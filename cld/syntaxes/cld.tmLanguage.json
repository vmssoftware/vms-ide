{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "CLD",
	"patterns": 
	[
		{
			"include": "#statement"
		},
		{
			"include": "#comment"
		}
	],
	"repository": 
	{
		"statement": 
		{
			"patterns": 
			[
				{
					"include": "#statement.define"
				},
				{
					"include": "#statement.ident"
				},
				{
					"include": "#statement.module"
				}
			]
		},
		"statement.define":
		{
			"name": "statement.define",
			"begin" : "(?i)define",
			"beginCaptures" : 
			{
			  "0" : 
			  {
				"name" : "statement.define.keyword markup.bold"
			  }
			},
			"end" : "(?=(?i)(define|ident|module))",
			"patterns": 
			[
				{
					"include": "#statement.define.syntax"
				},
				{
					"include": "#statement.define.type"
				},
				{
					"include": "#statement.define.verb"
				},
				{
					"include": "#comment"
				}
			]
		},
		"statement.define.syntax":
		{
			"name": "statement.define.syntax",
			"begin" : "(?i)(syntax)",
			"beginCaptures" : 
			{
			  "1" : 
			  {
				"name" : "statement.define.syntax.keyword meta.preprocessor.string"
			  },
			  "2":
			  {
				"name" : "statement.define.syntax.name comment"
			  }
			},
			"end" : "(?=(?i)(define|ident|module))",
			"patterns":
			[
				{
					"name":	"statement.define.syntax.name comment",
					"match": ""
				},
				{
					"include": "#statement.define.syntax.disallow"
				},
				{
					"include": "#statement.define.syntax.nodisallows"
				},
				{
					"include": "#statement.define.syntax.image"
				},
				{
					"include": "#statement.define.syntax.parameter"
				},
				{
					"include": "#statement.define.syntax.noparameter"
				},
				{
					"include": "#statement.define.syntax.qualifier"
				},
				{
					"include": "#statement.define.syntax.noqualifier"
				},
				{
					"include": "#statement.define.syntax.routine"
				},
				{
					"include": "#comment"
				}
			]
		},
		"statement.define.syntax.disallow":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.disallow",
					"begin": "(?i)(disallow)",
					"beginCaptures": 
					{
						"1":
						{
							"name" : "statement.define.syntax.disallow.keyword meta.preprocessor.string"
						}
					},
					"end": "(?i)(?=(disallow|nodisallows|image|parameter|noparameter|qualifier|noqualifier|routine|define|ident|module))",
					"patterns": 
					[
						{
							"include": "#statement.define.syntax.disallow.expression"
						}
					]
				}
			]
		},
		"statement.define.syntax.nodisallows":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.nodisallows",
					"match": "(?i)(nodisallows)",
					"captures": 
					{
						"1":
						{
							"name": "statement.define.syntax.nodisallows.keyword meta.preprocessor.string"
						}
					}
				}
			]
		},
		"statement.define.syntax.disallow.expression":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.disallow.expression.brackets",
					"begin": "\\s*\\(\\s*",
					"beginCaptures": 
					{
						"0": 
						{
							"name": "statement.define.syntax.disallow.expression.brackets.open constant.regexp"
						}
					},
					"end": "\\s*\\)\\s*",
					"endCaptures": 
					{
						"0": 
						{
							"name": "statement.define.syntax.disallow.expression.bracket.close constant.regexp"
						}
					},
					"patterns": 
					[
						{
							"include": "#statement.define.syntax.disallow.expression"
						}
					]
				},
				{
					"name": "statement.define.syntax.disallow.expression.operators",
					"match": "(?i)\\b(and|or)\\b",
					"captures": 
					{
						"1":
						{
							"name": "statement.define.syntax.disallow.expression.operator markup.bold"
						}
					}
				},
				{
					"name": "statement.define.syntax.disallow.expression.fn",
					"begin": "(?i)\\s+(any2|neg|not)\\s*(\\()\\s*",
					"beginCaptures": 
					{
						"1":
						{
							"name": "statement.define.syntax.disallow.expression.fn.name string.regexp"
						},
						"2":
						{
							"name": "statement.define.syntax.disallow.expression.fn.bracket.open constant.regexp"
						}
					},
					"end": "\\s*\\)\\s*",
					"endCaptures": 
					{
						"0":
						{
							"name": "statement.define.syntax.disallow.expression.fn.bracket.close constant.regexp"
						}
					},
					"patterns": 
					[
						{
							"include": "#statement.define.syntax.disallow.expression.fn.params"
						}
					]
				},
				{
					"name": "statement.define.syntax.disallow.expression.path",
					"match": "(?i)\\s*([^,\\(\\)\\s]+)\\s*",
					"captures": 
					{
						"1":
						{
							"name": "comment"
						}
					}
				}
			]
		},
		"statement.define.syntax.disallow.expression.fn.params":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.disallow.expression.fn.params",
					"match": "\\s*([^,)]+)\\s*(,\\s*([^,)]+))?",
					"captures": 
					{
						"1":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.syntax.disallow.expression"
								}
							]
						},
						"3":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.syntax.disallow.expression.fn.params"
								}
							]
						}
					}
				}
			]
		},
		"statement.define.syntax.image":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.image",
					"match": "(?i)(image)\\s+\"(.*)\"",
					"captures": {
						"1":
						{
							"name": "statement.define.syntax.image.keyword meta.preprocessor.string"
						},
						"2":
						{
							"name": "statement.define.syntax.image.name comment"
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.parameter",
					"begin": "(?i)(parameter)\\s+([^,\\s]+)",
					"beginCaptures": 
					{
						"1":
						{
							"name": "statement.define.syntax.parameter.keyword meta.preprocessor.string"
						},
						"2":
						{
							"name": "statement.define.syntax.parameter.name comment"
						}
					},
					"end": "(?i)(?=(disallow|nodisallows|image|parameter|noparameter|qualifier|noqualifier|routine|define|ident|module))",
					"patterns": [
						{
							"include": "#statement.define.syntax.parameter.default"
						},
						{
							"include": "#statement.define.syntax.parameter.label"
						},
						{
							"include": "#statement.define.syntax.parameter.prompt"
						},
						{
							"include": "#statement.define.syntax.parameter.value"
						},
						{
							"include": "#comment"
						}
					]
				}
			]
		},
		"statement.define.syntax.noparameter":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.noparameter",
					"match": "(?i)(noparameter)",
					"captures": 
					{
						"1":
						{
							"name": "statement.define.syntax.noparameter.keyword meta.preprocessor.string"
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter.default":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.default",
					"match": "(?i)(default)",
					"captures": 
					{
						"1":
						{
							"name": "statement.define.syntax.parameter.default.keyword comment"
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter.label":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.label",
					"match": "(?i)(label)\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.syntax.parameter.label.keyword comment"
						},
						"2": 
						{
							"name": "statement.define.syntax.parameter.label.name constant.character"
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter.prompt":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.prompt",
					"match": "(?i)(prompt)\\s*=(.*)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.syntax.parameter.prompt.keyword comment"
						},
						"2": 
						{
							"patterns": 
							[
								{
									"include": "#string"
								},
								{
									"name": "invalid.deprecated",
									"match": "."
								}
							]
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter.value":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.value",
					"begin": "(?i)(value)\\s*\\(",
					"beginCaptures": 
					{
						"1":
						{
							"name": "statement.define.syntax.parameter.value.keyword comment"
						}
					},
					"end": "\\)",
					"patterns":
					[
						{
							"include": "#statement.define.syntax.parameter.value.clauses"
						}
					]
				}
			]
		},
		"statement.define.syntax.parameter.value.clauses":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.value.parameters",
					"match": "\\s*([^,)]+)\\s*(,\\s*([^,)]+))?",
					"captures": 
					{
						"1":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.syntax.parameter.value.clause"
								}
							]
						},
						"3":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.syntax.parameter.value.clauses"
								}
							]
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter.value.clause":
		{
			"patterns": [
				{
					"include": "#statement.define.syntax.parameter.value.concatenate"
				},
				{
					"include": "#statement.define.syntax.parameter.value.default"
				},
				{
					"include": "#statement.define.syntax.parameter.value.list"
				},
				{
					"include": "#statement.define.syntax.parameter.value.nonconcatenate"
				},
				{
					"include": "#statement.define.syntax.parameter.value.required"
				},
				{
					"include": "#statement.define.syntax.parameter.value.type"
				},
				{
					"include": "#comment"
				}
			]
		},
		"statement.define.syntax.parameter.value.default":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.parameter.value.default",
					"match": "(?i)(default)\\s*=(.*)",
					"captures": 
					{
						"1":
						{
							"name": "statement.define.syntax.parameter.value.default.keyword constant.character"
						},
						"2": 
						{
							"name": "statement.define.syntax.parameter.value.default.value",
							"patterns": 
							[
								{
									"include": "#string"
								},
								{
									"name": "invalid.deprecated",
									"match": "."
								}
							]
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter.value.list":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.value.list constant.character",
					"match": "(?i)list"
				}
			]
		},
		"statement.define.syntax.parameter.value.required":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.value.required constant.character",
					"match": "(?i)required"
				}
			]
		},
		"statement.define.syntax.parameter.value.type":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.parameter.value.type constant.character",
					"match": "(?i)type\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.syntax.parameter.value.type.name markup.italic"
						}
					}
				}
			]
		},
		"statement.define.syntax.parameter.value.concatenate":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.parameter.value.concatenate comment",
					"match": "(?i)concatenate"
				}
			]
		},
		"statement.define.syntax.parameter.value.noconcatenate":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.parameter.value.noconcatenate comment",
					"match": "(?i)noconcatenate"
				}
			]
		},
		"statement.define.syntax.qualifier":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier",
					"begin": "(?i)(qualifier)\\s+([^,\\s]+)",
					"beginCaptures": 
					{
						"1":
						{
							"name": "statement.define.syntax.qualifier.keyword meta.preprocessor.string"
						},
						"2":
						{
							"name": "statement.define.syntax.qualifier.name comment"
						}
					},
					"end": "(?i)(?=(disallow|nodisallows|image|parameter|noparameter|qualifier|noqualifier|routine|define|ident|module))",
					"patterns": 
					[
						{
							"include": "#statement.define.syntax.qualifier.batch"
						},
						{
							"include": "#statement.define.syntax.qualifier.default"
						},
						{
							"include": "#statement.define.syntax.qualifier.label"
						},
						{
							"include": "#statement.define.syntax.qualifier.negatable"
						},
						{
							"include": "#statement.define.syntax.qualifier.nonnegatable"
						},
						{
							"include": "#statement.define.syntax.qualifier.placement"
						},
						{
							"include": "#statement.define.syntax.qualifier.syntax"
						},
						{
							"include": "#statement.define.syntax.qualifier.value"
						},
						{
							"include": "#comment"
						}
					]
				}
			]
		},
		"statement.define.syntax.qualifier.batch":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.batch",
					"match": "(?i)batch"
				}
			]
		},
		"statement.define.syntax.qualifier.default":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.default",
					"match": "(?i)default"
				}
			]
		},
		"statement.define.syntax.qualifier.label":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.label",
					"match": "(?i)label\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.syntax.qualifier.label.name comment"
						}
					}
				}
			]
		},
		"statement.define.syntax.qualifier.negatable":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.negatable",
					"match": "(?i)negatable"
				}
			]
		},
		"statement.define.syntax.qualifier.nonnegatable":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.nonnegatable",
					"match": "(?i)nonnegatable"
				}
			]
		},
		"statement.define.syntax.qualifier.placement":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.placement",
					"match": "(?i)placement\\s*=\\s*(global|local|positional)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.syntax.qualifier.placement.clause"
						}
					}
				},
				{
					"name": "statement.define.syntax.qualifier.placement",
					"match": "(?i)placement\\s*=\\s*(.*)",
					"captures": 
					{
						"1": 
						{
							"name": "invalid.deprecated"
						}
					}
				}
			]
		},
		"statement.define.syntax.qualifier.syntax":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.syntax",
					"match": "(?i)(syntax)\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.syntax.qualifier.syntax.keyword meta.preprocessor.string"
						},
						"2": 
						{
							"name": "statement.define.syntax.qualifier.syntax.name comment"
						}
					}
				}
			]
		},
		"statement.define.syntax.qualifier.value":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.value",
					"begin": "(?i)(value)\\s*\\(",
					"beginCaptures": 
					{
						"1":
						{
							"name": "statement.define.syntax.qualifier.value.keyword comment"
						}
					},
					"end": "\\)",
					"patterns":
					[
						{
							"include": "#statement.define.syntax.qualifier.value.clauses"
						}
					]
				}
			]
		},
		"statement.define.syntax.qualifier.value.clauses":
		{
			"patterns": 
			[
				{
					"name": "statement.define.syntax.qualifier.value.parameters",
					"match": "\\s*([^,)]+)\\s*(,\\s*([^,)]+))?",
					"captures": 
					{
						"1":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.syntax.qualifier.value.clause"
								}
							]
						},
						"3":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.syntax.qualifier.value.clauses"
								}
							]
						}
					}
				}
			]
		},
		"statement.define.syntax.qualifier.value.clause":
		{
			"patterns": [
				{
					"include": "#statement.define.syntax.qualifier.value.default"
				},
				{
					"include": "#statement.define.syntax.qualifier.value.list"
				},
				{
					"include": "#statement.define.syntax.qualifier.value.required"
				},
				{
					"include": "#statement.define.syntax.qualifier.value.type"
				},
				{
					"include": "#comment"
				}
			]
		},
		"statement.define.syntax.qualifier.value.default":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.value.default",
					"match": "(?i)(default)\\s*=(.*)",
					"captures": 
					{
						"1":
						{
							"name": "statement.define.syntax.qualifier.value.default.value.keyword constant.character"
						},
						"2": 
						{
							"patterns": 
							[
								{
									"include": "#string"
								},
								{
									"name": "invalid.deprecated",
									"match": "."
								}
							]
						}
					}
				}
			]
		},
		"statement.define.syntax.qualifier.value.list":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.value.list constant.character",
					"match": "(?i)list"
				}
			]
		},
		"statement.define.syntax.qualifier.value.required":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.value.required constant.character",
					"match": "(?i)required"
				}
			]
		},
		"statement.define.syntax.qualifier.value.type":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.qualifier.value.type constant.character",
					"match": "(?i)type\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.syntax.qualifier.value.type.name comment"
						}
					}
				}
			]
		},
		"statement.define.syntax.noqualifier":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.noqualifier",
					"match": "(?i)(noqualifier)",
					"captures": 
					{
						"1":
						{
							"name": "statement.define.syntax.noqualifier.keyword meta.preprocessor.string"
						}
					}
				}
			]
		},
		"statement.define.syntax.routine":
		{
			"patterns": [
				{
					"name": "statement.define.syntax.routine",
					"match": "(?i)(routine)\\s+([^,\\s]+)",
					"captures": {
						"1":
						{
							"name": "statement.define.syntax.routine.keyword meta.preprocessor.string"
						},
						"2":
						{
							"name": "statement.define.syntax.routine.name comment"
						}
					}
				}
			]
		},
		"statement.define.type":
		{
			"name": "statement.define.type",
			"begin" : "(?i)(type)\\s+([^,\\s]+)",
			"beginCaptures" : 
			{
			  "1" : 
			  {
				"name" : "statement.define.type.keyword meta.preprocessor.string"
			  },
			  "2":
			  {
				"name": "statement.define.type.name comment"
			  }
			},
			"end" : "(?=(?i)(define|ident|module))",
			"patterns": 
			[
				{
					"include": "#statement.define.type.keyword"
				}
			]
		},
		"statement.define.type.keyword":
		{
			"patterns": [
				{
					"name": "statement.define.type.keyword",
					"begin": "(?i)(keyword)\\s+([^,\\s]+)",
					"beginCaptures": 
					{
						"1":
						{
							"name": "statement.define.type.keyword.keyword meta.preprocessor.string"
						},
						"2":
						{
							"name": "statement.define.type.keyword.name comment"
						}
					},
					"end": "(?i)(?=(define|module|ident|keyword))",
					"patterns": [
						{
							"include": "#statement.define.type.keyword.default"
						},
						{
							"include": "#statement.define.type.keyword.label"
						},
						{
							"include": "#statement.define.type.keyword.negatable"
						},
						{
							"include": "#statement.define.type.keyword.nonnegatable"
						},
						{
							"include": "#statement.define.type.keyword.syntax"
						},
						{
							"include": "#statement.define.type.keyword.value"
						},
						{
							"include": "#comment"
						}
					]
				}
			]
		},
		"statement.define.type.keyword.default":
		{
			"patterns": 
			[
				{
					"name": "statement.define.type.keyword.default",
					"match": "(?i)default"
				}
			]
		},
		"statement.define.type.keyword.label":
		{
			"patterns": 
			[
				{
					"name": "statement.define.type.keyword.label",
					"match": "(?i)(label)\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.type.keyword.label.keyword meta.preprocessor.string"
						},
						"2": 
						{
							"name": "statement.define.type.keyword.label.name comment"
						}
					}
				}
			]
		},
		"statement.define.type.keyword.negatable":
		{
			"patterns": 
			[
				{
					"name": "statement.define.type.keyword.negatable",
					"match": "(?i)negatable"
				}
			]
		},
		"statement.define.type.keyword.nonnegatable":
		{
			"patterns": 
			[
				{
					"name": "statement.define.type.keyword.nonnegatable",
					"match": "(?i)nonnegatable"
				}
			]
		},
		"statement.define.type.keyword.syntax":
		{
			"patterns": 
			[
				{
					"name": "statement.define.type.keyword.syntax",
					"match": "(?i)(syntax)\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.type.keyword.syntax.keyword comment"
						},
						"2": 
						{
							"name": "statement.define.type.keyword.syntax.name constant.character"
						}
					}
				}
			]
		},
		"statement.define.type.keyword.value":
		{
			"patterns": [
				{
					"name": "statement.define.type.keyword.value",
					"begin": "(?i)value\\s*\\(",
					"end": "\\)",
					"patterns":
					[
						{
							"include": "#statement.define.type.keyword.value.clauses"
						}
					]
				}
			]
		},
		"statement.define.type.keyword.value.clauses":
		{
			"patterns": 
			[
				{
					"name": "statement.define.type.keyword.value.parameters",
					"match": "\\s*([^,)]+)\\s*(,\\s*([^,)]+))?",
					"captures": 
					{
						"1":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.type.keyword.value.clause"
								}
							]
						},
						"3":
						{
							"patterns": 
							[
								{
									"include": "#statement.define.type.keyword.value.clauses"
								}
							]
						}
					}
				}
			]
		},
		"statement.define.type.keyword.value.clause":
		{
			"patterns": [
				{
					"include": "#statement.define.type.keyword.value.default"
				},
				{
					"include": "#statement.define.type.keyword.value.list"
				},
				{
					"include": "#statement.define.type.keyword.value.required"
				},
				{
					"include": "#statement.define.type.keyword.value.type"
				},
				{
					"include": "#comment"
				}
			]
		},
		"statement.define.type.keyword.value.default":
		{
			"patterns": [
				{
					"name": "statement.define.type.keyword.value.default",
					"match": "(?i)default\\s*=(.*)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.type.keyword.value.default.value",
							"patterns": 
							[
								{
									"include": "#string"
								},
								{
									"name": "invalid.deprecated",
									"match": "."
								}
							]
						}
					}
				}
			]
		},
		"statement.define.type.keyword.value.list":
		{
			"patterns": [
				{
					"name": "statement.define.type.keyword.value.list",
					"match": "(?i)list"
				}
			]
		},
		"statement.define.type.keyword.value.required":
		{
			"patterns": [
				{
					"name": "statement.define.type.keyword.value.required",
					"match": "(?i)required"
				}
			]
		},
		"statement.define.type.keyword.value.type":
		{
			"patterns": [
				{
					"name": "statement.define.type.keyword.value.type",
					"match": "(?i)type\\s*=\\s*([^,\\s]+)",
					"captures": 
					{
						"1": 
						{
							"name": "statement.define.type.keyword.value.type.name comment"
						}
					}
				}
			]
		},
		"statement.define.verb":
		{
			"name": "statement.define.verb",
			"begin" : "(?i)(verb)\\s+([^,\\s]+)",
			"beginCaptures" : 
			{
			  "1" : 
			  {
				"name" : "statement.define.verb.keyword meta.preprocessor.string"
			  },
			  "2":
			  {
				"name" : "statement.define.verb.name comment"
			  }
			},
			"end" : "(?=(?i)(define|ident|module))",
			"patterns":
			[
				{
					"include": "#statement.define.syntax.disallow"
				},
				{
					"include": "#statement.define.syntax.nodisallows"
				},
				{
					"include": "#statement.define.syntax.image"
				},
				{
					"include": "#statement.define.syntax.parameter"
				},
				{
					"include": "#statement.define.syntax.noparameter"
				},
				{
					"include": "#statement.define.syntax.qualifier"
				},
				{
					"include": "#statement.define.syntax.noqualifier"
				},
				{
					"include": "#statement.define.syntax.routine"
				},
				{
					"include": "#statement.define.verb.synonym"
				},
				{
					"include": "#comment"
				}
			]
		},
		"statement.define.verb.synonym":
		{
			"patterns": [
				{
					"name": "statement.define.verb.synonym",
					"match": "(?i)(synonym)\\s+(.*)",
					"captures": {
						"1":
						{
							"name": "statement.define.verb.synonym.keyword meta.preprocessor.string"
						},
						"2":
						{
							"name": "statement.define.verb.synonym.name comment"
						}
					}
				}
			]
		},
		"statement.ident":
		{
			"name": "statement.ident",
			"begin" : "(?i)(ident)",
			"beginCaptures":
			{
				"1":
				{
				  "name": "statement.ident.keyword markup.bold"
				}
			},
			"end" : "(?=(?i)(define|ident|module))",
			"patterns": 
			[
				{
					"include": "#string"
				},
				{
					"name": "invalid.deprecated",
					"match": "."
				}
			]
		},
		"statement.module":
		{
			"name": "statement.module",
			"begin" : "(?i)(module)",
			"beginCaptures":
			{
				"1":
				{
				  "name": "statement.module.keyword markup.bold"
				}
			},
			"end" : "(?=(?i)(define|ident|module))",
			"patterns": 
			[
				{
					"name": "statement.module.name",
					"begin": "\\G\\s*",
					"end": "(?!\\G)",
					"patterns": 
					[
						{
							"include": "#name"
						}
					]
				},
				{
					"include": "#comment"
				}
			]
		},
		"string": 
		{
			"name": "string.quoted.cld",
			"begin": "\"",
			"end": "\"(?=[^\"])",
			"patterns": 
			[
				{
					"name": "constant.character.escape.cld",
					"match": "\"\""
				}
			]
		},
		"comment":
		{
			"patterns": 
			[
				{
					"begin": "!",
					"end": "\\n",
					"name": "comment.line"
				}
			]
		},
		"name":
		{
			"patterns": 
			[
				{
					"name": "meta.preprocessor.string",
					"match": "[a-zA-Z$][a-zA-Z$_0-9]*"
				}
			]
		}
	},
	"scopeName": "source.cld"
}