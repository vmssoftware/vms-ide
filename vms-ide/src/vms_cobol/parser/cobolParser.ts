// Generated from src/vms_cobol/parser/cobol.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { cobolListener } from "./cobolListener";
import { cobolVisitor } from "./cobolVisitor";


export class cobolParser extends Parser {
	public static readonly ACCESS = 1;
	public static readonly ALPHA = 2;
	public static readonly ALPHABET = 3;
	public static readonly ALSO = 4;
	public static readonly ALTERNATE = 5;
	public static readonly APPLY = 6;
	public static readonly ARE = 7;
	public static readonly AREA = 8;
	public static readonly AREAS = 9;
	public static readonly ARGUMENT_NUMBER = 10;
	public static readonly ARGUMENT_VALUE = 11;
	public static readonly ARITHMETIC = 12;
	public static readonly ASCENDING = 13;
	public static readonly ASCII = 14;
	public static readonly ASSIGN = 15;
	public static readonly AT = 16;
	public static readonly AUTHOR = 17;
	public static readonly AUTOMATIC = 18;
	public static readonly BINARY = 19;
	public static readonly BINARY_CHAR = 20;
	public static readonly BINARY_DOUBLE = 21;
	public static readonly BINARY_LONG = 22;
	public static readonly BINARY_SHORT = 23;
	public static readonly BLANK = 24;
	public static readonly BLOCK = 25;
	public static readonly BOTTOM = 26;
	public static readonly BY = 27;
	public static readonly C01 = 28;
	public static readonly CARD_READER = 29;
	public static readonly CF = 30;
	public static readonly CH = 31;
	public static readonly CHARACTER = 32;
	public static readonly CHARACTERS = 33;
	public static readonly CLASS = 34;
	public static readonly CLOCK_UNITS = 35;
	public static readonly CODE = 36;
	public static readonly CODE_SET = 37;
	public static readonly COLLATING = 38;
	public static readonly COLUMN = 39;
	public static readonly COMMA = 40;
	public static readonly COMMON = 41;
	public static readonly COMP = 42;
	public static readonly COMPUTATIONAL = 43;
	public static readonly COMPUTATIONAL_1 = 44;
	public static readonly COMPUTATIONAL_2 = 45;
	public static readonly COMPUTATIONAL_3 = 46;
	public static readonly COMPUTATIONAL_4 = 47;
	public static readonly COMPUTATIONAL_5 = 48;
	public static readonly COMPUTATIONAL_X = 49;
	public static readonly COMP_1 = 50;
	public static readonly COMP_2 = 51;
	public static readonly COMP_3 = 52;
	public static readonly COMP_4 = 53;
	public static readonly COMP_5 = 54;
	public static readonly COMP_X = 55;
	public static readonly CONFIGURATION = 56;
	public static readonly CONSOLE = 57;
	public static readonly CONTAINS = 58;
	public static readonly CONTIGUOUS = 59;
	public static readonly CONTIGUOUS_BEST_TRY = 60;
	public static readonly CONTROL = 61;
	public static readonly CONTROLS = 62;
	public static readonly CRT = 63;
	public static readonly CURRENCY = 64;
	public static readonly CURSOR = 65;
	public static readonly DATA = 66;
	public static readonly DATE_COMPILED = 67;
	public static readonly DATE_WRITTEN = 68;
	public static readonly DE = 69;
	public static readonly DEBUGGING = 70;
	public static readonly DECIMAL_POINT = 71;
	public static readonly DEFERRED_WRITE = 72;
	public static readonly DELIMITER = 73;
	public static readonly DEPENDING = 74;
	public static readonly DESCENDING = 75;
	public static readonly DETAIL = 76;
	public static readonly DISK = 77;
	public static readonly DISPLAY = 78;
	public static readonly DIVISION = 79;
	public static readonly DUPLICATES = 80;
	public static readonly DYNAMIC = 81;
	public static readonly EBCDIC = 82;
	public static readonly END = 83;
	public static readonly ENVIRONMENT = 84;
	public static readonly ENVIRONMENT_NAME = 85;
	public static readonly ENVIRONMENT_VALUE = 86;
	public static readonly EVERY = 87;
	public static readonly EXCLUSIVE = 88;
	public static readonly EXTENSION = 89;
	public static readonly EXTERNAL = 90;
	public static readonly FD = 91;
	public static readonly FILE = 92;
	public static readonly FILE_CONTROL = 93;
	public static readonly FILLER = 94;
	public static readonly FILL_SIZE = 95;
	public static readonly FINAL = 96;
	public static readonly FIRST = 97;
	public static readonly FLOAT_EXTENDED = 98;
	public static readonly FLOAT_LONG = 99;
	public static readonly FLOAT_SHORT = 100;
	public static readonly FOOTING = 101;
	public static readonly FOR = 102;
	public static readonly FROM = 103;
	public static readonly GLOBAL = 104;
	public static readonly GROUP = 105;
	public static readonly HEADING = 106;
	public static readonly I64 = 107;
	public static readonly ID = 108;
	public static readonly IDENT = 109;
	public static readonly IDENTIFICATION_IN_A_AREA = 110;
	public static readonly IN = 111;
	public static readonly INDEX = 112;
	public static readonly INDEXED = 113;
	public static readonly INDICATE = 114;
	public static readonly INITIAL = 115;
	public static readonly INPUT_OUTPUT = 116;
	public static readonly INSTALLATION = 117;
	public static readonly IS = 118;
	public static readonly I_O_CONTROL = 119;
	public static readonly JUST = 120;
	public static readonly JUSTIFIED = 121;
	public static readonly KEY = 122;
	public static readonly LABEL = 123;
	public static readonly LAST = 124;
	public static readonly LEADING = 125;
	public static readonly LEFT = 126;
	public static readonly LIMIT = 127;
	public static readonly LIMITS = 128;
	public static readonly LINAGE = 129;
	public static readonly LINE = 130;
	public static readonly LINES = 131;
	public static readonly LINE_PRINTER = 132;
	public static readonly LINKAGE = 133;
	public static readonly LOCK = 134;
	public static readonly LOCK_HOLDING = 135;
	public static readonly MANUAL = 136;
	public static readonly MASS_INSERT = 137;
	public static readonly MEMORY = 138;
	public static readonly MODE = 139;
	public static readonly MODULES = 140;
	public static readonly MULTIPLE = 141;
	public static readonly NATIVE = 142;
	public static readonly NEXT = 143;
	public static readonly NUMBER = 144;
	public static readonly OBJECT_COMPUTER = 145;
	public static readonly OCCURS = 146;
	public static readonly OF = 147;
	public static readonly OFF = 148;
	public static readonly OMITTED = 149;
	public static readonly ON = 150;
	public static readonly OPTIONAL = 151;
	public static readonly OPTIONS = 152;
	public static readonly ORGANIZATION = 153;
	public static readonly PACKED_DECIMAL = 154;
	public static readonly PADDING = 155;
	public static readonly PAGE = 156;
	public static readonly PAPER_TAPE_PUNCH = 157;
	public static readonly PAPER_TAPE_READER = 158;
	public static readonly PF = 159;
	public static readonly PH = 160;
	public static readonly PIC = 161;
	public static readonly PICTURE = 162;
	public static readonly PLUS = 163;
	public static readonly POINTER = 164;
	public static readonly POINTER_64 = 165;
	public static readonly POSITION = 166;
	public static readonly PREALLOCATION = 167;
	public static readonly PRINTER = 168;
	public static readonly PRINT_CONTROL = 169;
	public static readonly PROGRAM = 170;
	public static readonly PROGRAM_ID = 171;
	public static readonly RANDOM = 172;
	public static readonly RD = 173;
	public static readonly RECORD = 174;
	public static readonly RECORDS = 175;
	public static readonly REDEFINES = 176;
	public static readonly REEL = 177;
	public static readonly REFERENCE = 178;
	public static readonly RELATIVE = 179;
	public static readonly RENAMES = 180;
	public static readonly REPORT = 181;
	public static readonly REPORTS = 182;
	public static readonly RERUN = 183;
	public static readonly RESERVE = 184;
	public static readonly RESET = 185;
	public static readonly RF = 186;
	public static readonly RH = 187;
	public static readonly RIGHT = 188;
	public static readonly ROLLBACK = 189;
	public static readonly SAME = 190;
	public static readonly SCREEN = 191;
	public static readonly SD = 192;
	public static readonly SECTION = 193;
	public static readonly SECURITY = 194;
	public static readonly SEGMENT_LIMIT = 195;
	public static readonly SELECT = 196;
	public static readonly SEPARATE = 197;
	public static readonly SEQUENCE = 198;
	public static readonly SEQUENTIAL = 199;
	public static readonly SIGN = 200;
	public static readonly SIGNED = 201;
	public static readonly SIZE = 202;
	public static readonly SORT = 203;
	public static readonly SORT_MERGE = 204;
	public static readonly SOURCE = 205;
	public static readonly SOURCE_COMPUTER = 206;
	public static readonly SPECIAL_NAMES = 207;
	public static readonly STANDARD = 208;
	public static readonly STANDARD_1 = 209;
	public static readonly STANDARD_2 = 210;
	public static readonly STATUS = 211;
	public static readonly SUM = 212;
	public static readonly SWITCH = 213;
	public static readonly SYMBOL = 214;
	public static readonly SYMBOLIC = 215;
	public static readonly SYNC = 216;
	public static readonly SYNCHRONIZED = 217;
	public static readonly SYSERR = 218;
	public static readonly SYSIN = 219;
	public static readonly SYSOUT = 220;
	public static readonly TAPE = 221;
	public static readonly THROUGH = 222;
	public static readonly THRU = 223;
	public static readonly TIMES = 224;
	public static readonly TO = 225;
	public static readonly TOP = 226;
	public static readonly TRAILING = 227;
	public static readonly TYPE = 228;
	public static readonly UNIT = 229;
	public static readonly UNSIGNED = 230;
	public static readonly UPON = 231;
	public static readonly USAGE = 232;
	public static readonly VALUE = 233;
	public static readonly VALUES = 234;
	public static readonly VARYING = 235;
	public static readonly VAX = 236;
	public static readonly WHEN = 237;
	public static readonly WINDOW = 238;
	public static readonly WITH = 239;
	public static readonly WORDS = 240;
	public static readonly WORKING_STORAGE = 241;
	public static readonly ZERO = 242;
	public static readonly START_SLASH_ = 243;
	public static readonly START_STAR_ = 244;
	public static readonly EXCLAM_ = 245;
	public static readonly UNDER_ = 246;
	public static readonly PLUS_ = 247;
	public static readonly MINUS_ = 248;
	public static readonly STAR_ = 249;
	public static readonly SLASH_ = 250;
	public static readonly COMMA_ = 251;
	public static readonly SEMI_ = 252;
	public static readonly COLON_ = 253;
	public static readonly EQUAL_ = 254;
	public static readonly LT_ = 255;
	public static readonly LE_ = 256;
	public static readonly GE_ = 257;
	public static readonly GT_ = 258;
	public static readonly LPAREN_ = 259;
	public static readonly RPAREN_ = 260;
	public static readonly LBRACK_ = 261;
	public static readonly RBRACK_ = 262;
	public static readonly POINTER_ = 263;
	public static readonly ATP_ = 264;
	public static readonly DOT_ = 265;
	public static readonly DOTDOT_ = 266;
	public static readonly LCURLY_ = 267;
	public static readonly RCURLY_ = 268;
	public static readonly STRING_LITERAL = 269;
	public static readonly NUMERIC_LITERAL = 270;
	public static readonly HEX_LITERAL = 271;
	public static readonly USER_DEFINED_WORD = 272;
	public static readonly START_FOUR_SPACES = 273;
	public static readonly WHITESPACE = 274;
	public static readonly NEWLINE = 275;
	public static readonly RULE_cobol_source = 0;
	public static readonly RULE_separator = 1;
	public static readonly RULE_line_comment = 2;
	public static readonly RULE_program = 3;
	public static readonly RULE_data_division = 4;
	public static readonly RULE_file_section = 5;
	public static readonly RULE_file_description = 6;
	public static readonly RULE_file_description_entry = 7;
	public static readonly RULE_file_data_description = 8;
	public static readonly RULE_level_number = 9;
	public static readonly RULE_file_data_description_entry = 10;
	public static readonly RULE_value_is = 11;
	public static readonly RULE_value_is_definition = 12;
	public static readonly RULE_value_is_definition_part = 13;
	public static readonly RULE_value_is_definition_thru = 14;
	public static readonly RULE_external_name = 15;
	public static readonly RULE_ref_data_name = 16;
	public static readonly RULE_value_is_literal = 17;
	public static readonly RULE_occurs = 18;
	public static readonly RULE_indexed_by = 19;
	public static readonly RULE_ind_name = 20;
	public static readonly RULE_key_is = 21;
	public static readonly RULE_key_name = 22;
	public static readonly RULE_times_def = 23;
	public static readonly RULE_table_size = 24;
	public static readonly RULE_min_times = 25;
	public static readonly RULE_max_times = 26;
	public static readonly RULE_report_description = 27;
	public static readonly RULE_report_data_description = 28;
	public static readonly RULE_report_data_description_entry = 29;
	public static readonly RULE_sum = 30;
	public static readonly RULE_control_foot_name = 31;
	public static readonly RULE_detail_report_group_name = 32;
	public static readonly RULE_sum_name = 33;
	public static readonly RULE_source_name = 34;
	public static readonly RULE_column_number = 35;
	public static readonly RULE_type_is_definition = 36;
	public static readonly RULE_type_control_name = 37;
	public static readonly RULE_next_group_definition = 38;
	public static readonly RULE_line_num_definition = 39;
	public static readonly RULE_line_num = 40;
	public static readonly RULE_report_description_entry = 41;
	public static readonly RULE_footing_line_rd = 42;
	public static readonly RULE_last_detail_line = 43;
	public static readonly RULE_first_detail_line = 44;
	public static readonly RULE_heading_line = 45;
	public static readonly RULE_page_size_rd = 46;
	public static readonly RULE_control_name = 47;
	public static readonly RULE_report_code = 48;
	public static readonly RULE_usage = 49;
	public static readonly RULE_usage_def = 50;
	public static readonly RULE_picture = 51;
	public static readonly RULE_character_string = 52;
	public static readonly RULE_char_str_part = 53;
	public static readonly RULE_other_data_item = 54;
	public static readonly RULE_data_name = 55;
	public static readonly RULE_sort_merge_file_description = 56;
	public static readonly RULE_sort_merge_file_description_entry = 57;
	public static readonly RULE_report_is = 58;
	public static readonly RULE_report_name = 59;
	public static readonly RULE_linage = 60;
	public static readonly RULE_bottom_lines = 61;
	public static readonly RULE_top_lines = 62;
	public static readonly RULE_footing_line = 63;
	public static readonly RULE_page_size = 64;
	public static readonly RULE_data_rec = 65;
	public static readonly RULE_rec_name = 66;
	public static readonly RULE_value_of_id = 67;
	public static readonly RULE_value_of_id_def = 68;
	public static readonly RULE_label = 69;
	public static readonly RULE_record = 70;
	public static readonly RULE_record_def = 71;
	public static readonly RULE_depending_item = 72;
	public static readonly RULE_shortest_rec = 73;
	public static readonly RULE_longest_rec = 74;
	public static readonly RULE_working_storage_section = 75;
	public static readonly RULE_linkage_section = 76;
	public static readonly RULE_report_section = 77;
	public static readonly RULE_screen_section = 78;
	public static readonly RULE_identification_division = 79;
	public static readonly RULE_identification_division_paragraph = 80;
	public static readonly RULE_program_id = 81;
	public static readonly RULE_program_name = 82;
	public static readonly RULE_is_program = 83;
	public static readonly RULE_with_ident = 84;
	public static readonly RULE_ident_string = 85;
	public static readonly RULE_comment_entry = 86;
	public static readonly RULE_author = 87;
	public static readonly RULE_installation = 88;
	public static readonly RULE_date_written = 89;
	public static readonly RULE_date_compiled = 90;
	public static readonly RULE_security = 91;
	public static readonly RULE_options_ = 92;
	public static readonly RULE_arithmetic = 93;
	public static readonly RULE_environment_division = 94;
	public static readonly RULE_configuration_section = 95;
	public static readonly RULE_input_output_section = 96;
	public static readonly RULE_source_computer = 97;
	public static readonly RULE_computer_type = 98;
	public static readonly RULE_with_debugging = 99;
	public static readonly RULE_object_computer = 100;
	public static readonly RULE_memory_size = 101;
	public static readonly RULE_memory_size_amount = 102;
	public static readonly RULE_memory_size_unit = 103;
	public static readonly RULE_program_collating = 104;
	public static readonly RULE_alpha_name = 105;
	public static readonly RULE_segment_limit = 106;
	public static readonly RULE_segment_number = 107;
	public static readonly RULE_special_names = 108;
	public static readonly RULE_special_names_content = 109;
	public static readonly RULE_qualified_data_item = 110;
	public static readonly RULE_currency = 111;
	public static readonly RULE_currency_def = 112;
	public static readonly RULE_literal_7 = 113;
	public static readonly RULE_literal_8 = 114;
	public static readonly RULE_class_ = 115;
	public static readonly RULE_class_name = 116;
	public static readonly RULE_user_class = 117;
	public static readonly RULE_symbolic_chars = 118;
	public static readonly RULE_symb_ch_definition = 119;
	public static readonly RULE_symb_ch_def_clause = 120;
	public static readonly RULE_symb_ch_def_in_alphabet = 121;
	public static readonly RULE_symbol_char = 122;
	public static readonly RULE_char_val = 123;
	public static readonly RULE_alphabet = 124;
	public static readonly RULE_alpha_value = 125;
	public static readonly RULE_user_alpha = 126;
	public static readonly RULE_first_literal = 127;
	public static readonly RULE_last_literal = 128;
	public static readonly RULE_same_literal = 129;
	public static readonly RULE_switch_ = 130;
	public static readonly RULE_switch_clause_on = 131;
	public static readonly RULE_switch_clause_off = 132;
	public static readonly RULE_cond_name = 133;
	public static readonly RULE_switch_name = 134;
	public static readonly RULE_switch_num = 135;
	public static readonly RULE_top_of_page_name = 136;
	public static readonly RULE_predefined_device = 137;
	public static readonly RULE_device_name = 138;
	public static readonly RULE_arg_env = 139;
	public static readonly RULE_arg_env_name = 140;
	public static readonly RULE_file_control = 141;
	public static readonly RULE_select = 142;
	public static readonly RULE_file_status = 143;
	public static readonly RULE_file_stat = 144;
	public static readonly RULE_record_key = 145;
	public static readonly RULE_record_key_def = 146;
	public static readonly RULE_access_mode = 147;
	public static readonly RULE_reserve = 148;
	public static readonly RULE_reserve_num = 149;
	public static readonly RULE_record_delimiter = 150;
	public static readonly RULE_padding = 151;
	public static readonly RULE_pad_char = 152;
	public static readonly RULE_organization = 153;
	public static readonly RULE_lock_mode = 154;
	public static readonly RULE_lock_mode_def = 155;
	public static readonly RULE_code_set = 156;
	public static readonly RULE_block_contains = 157;
	public static readonly RULE_smallest_block = 158;
	public static readonly RULE_blocksize = 159;
	public static readonly RULE_assign_to = 160;
	public static readonly RULE_assign_to_def = 161;
	public static readonly RULE_file_spec = 162;
	public static readonly RULE_file_name = 163;
	public static readonly RULE_i_o_control = 164;
	public static readonly RULE_multiple_file = 165;
	public static readonly RULE_multiple_file_def = 166;
	public static readonly RULE_multiple_file_name = 167;
	public static readonly RULE_pos_integer = 168;
	public static readonly RULE_rerun = 169;
	public static readonly RULE_rerun_def = 170;
	public static readonly RULE_clock_count = 171;
	public static readonly RULE_condition_name = 172;
	public static readonly RULE_rerun_def_file = 173;
	public static readonly RULE_rec_count = 174;
	public static readonly RULE_same = 175;
	public static readonly RULE_same_area_file = 176;
	public static readonly RULE_apply = 177;
	public static readonly RULE_apply_def = 178;
	public static readonly RULE_window_ptrs = 179;
	public static readonly RULE_preall_amt = 180;
	public static readonly RULE_extend_amt = 181;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"cobol_source", "separator", "line_comment", "program", "data_division", 
		"file_section", "file_description", "file_description_entry", "file_data_description", 
		"level_number", "file_data_description_entry", "value_is", "value_is_definition", 
		"value_is_definition_part", "value_is_definition_thru", "external_name", 
		"ref_data_name", "value_is_literal", "occurs", "indexed_by", "ind_name", 
		"key_is", "key_name", "times_def", "table_size", "min_times", "max_times", 
		"report_description", "report_data_description", "report_data_description_entry", 
		"sum", "control_foot_name", "detail_report_group_name", "sum_name", "source_name", 
		"column_number", "type_is_definition", "type_control_name", "next_group_definition", 
		"line_num_definition", "line_num", "report_description_entry", "footing_line_rd", 
		"last_detail_line", "first_detail_line", "heading_line", "page_size_rd", 
		"control_name", "report_code", "usage", "usage_def", "picture", "character_string", 
		"char_str_part", "other_data_item", "data_name", "sort_merge_file_description", 
		"sort_merge_file_description_entry", "report_is", "report_name", "linage", 
		"bottom_lines", "top_lines", "footing_line", "page_size", "data_rec", 
		"rec_name", "value_of_id", "value_of_id_def", "label", "record", "record_def", 
		"depending_item", "shortest_rec", "longest_rec", "working_storage_section", 
		"linkage_section", "report_section", "screen_section", "identification_division", 
		"identification_division_paragraph", "program_id", "program_name", "is_program", 
		"with_ident", "ident_string", "comment_entry", "author", "installation", 
		"date_written", "date_compiled", "security", "options_", "arithmetic", 
		"environment_division", "configuration_section", "input_output_section", 
		"source_computer", "computer_type", "with_debugging", "object_computer", 
		"memory_size", "memory_size_amount", "memory_size_unit", "program_collating", 
		"alpha_name", "segment_limit", "segment_number", "special_names", "special_names_content", 
		"qualified_data_item", "currency", "currency_def", "literal_7", "literal_8", 
		"class_", "class_name", "user_class", "symbolic_chars", "symb_ch_definition", 
		"symb_ch_def_clause", "symb_ch_def_in_alphabet", "symbol_char", "char_val", 
		"alphabet", "alpha_value", "user_alpha", "first_literal", "last_literal", 
		"same_literal", "switch_", "switch_clause_on", "switch_clause_off", "cond_name", 
		"switch_name", "switch_num", "top_of_page_name", "predefined_device", 
		"device_name", "arg_env", "arg_env_name", "file_control", "select", "file_status", 
		"file_stat", "record_key", "record_key_def", "access_mode", "reserve", 
		"reserve_num", "record_delimiter", "padding", "pad_char", "organization", 
		"lock_mode", "lock_mode_def", "code_set", "block_contains", "smallest_block", 
		"blocksize", "assign_to", "assign_to_def", "file_spec", "file_name", "i_o_control", 
		"multiple_file", "multiple_file_def", "multiple_file_name", "pos_integer", 
		"rerun", "rerun_def", "clock_count", "condition_name", "rerun_def_file", 
		"rec_count", "same", "same_area_file", "apply", "apply_def", "window_ptrs", 
		"preall_amt", "extend_amt",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"'!'", "'_'", "'+'", "'-'", undefined, undefined, "','", "';'", "':'", 
		"'='", "'<'", "'<='", "'>='", "'>'", "'('", "')'", "'['", "']'", "'^'", 
		"'@'", "'.'", "'..'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ACCESS", "ALPHA", "ALPHABET", "ALSO", "ALTERNATE", "APPLY", 
		"ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", "ARGUMENT_VALUE", "ARITHMETIC", 
		"ASCENDING", "ASCII", "ASSIGN", "AT", "AUTHOR", "AUTOMATIC", "BINARY", 
		"BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", "BLANK", 
		"BLOCK", "BOTTOM", "BY", "C01", "CARD_READER", "CF", "CH", "CHARACTER", 
		"CHARACTERS", "CLASS", "CLOCK_UNITS", "CODE", "CODE_SET", "COLLATING", 
		"COLUMN", "COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", 
		"COMPUTATIONAL_2", "COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", 
		"COMPUTATIONAL_X", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", 
		"CONFIGURATION", "CONSOLE", "CONTAINS", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", 
		"CONTROL", "CONTROLS", "CRT", "CURRENCY", "CURSOR", "DATA", "DATE_COMPILED", 
		"DATE_WRITTEN", "DE", "DEBUGGING", "DECIMAL_POINT", "DEFERRED_WRITE", 
		"DELIMITER", "DEPENDING", "DESCENDING", "DETAIL", "DISK", "DISPLAY", "DIVISION", 
		"DUPLICATES", "DYNAMIC", "EBCDIC", "END", "ENVIRONMENT", "ENVIRONMENT_NAME", 
		"ENVIRONMENT_VALUE", "EVERY", "EXCLUSIVE", "EXTENSION", "EXTERNAL", "FD", 
		"FILE", "FILE_CONTROL", "FILLER", "FILL_SIZE", "FINAL", "FIRST", "FLOAT_EXTENDED", 
		"FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", "FROM", "GLOBAL", "GROUP", 
		"HEADING", "I64", "ID", "IDENT", "IDENTIFICATION_IN_A_AREA", "IN", "INDEX", 
		"INDEXED", "INDICATE", "INITIAL", "INPUT_OUTPUT", "INSTALLATION", "IS", 
		"I_O_CONTROL", "JUST", "JUSTIFIED", "KEY", "LABEL", "LAST", "LEADING", 
		"LEFT", "LIMIT", "LIMITS", "LINAGE", "LINE", "LINES", "LINE_PRINTER", 
		"LINKAGE", "LOCK", "LOCK_HOLDING", "MANUAL", "MASS_INSERT", "MEMORY", 
		"MODE", "MODULES", "MULTIPLE", "NATIVE", "NEXT", "NUMBER", "OBJECT_COMPUTER", 
		"OCCURS", "OF", "OFF", "OMITTED", "ON", "OPTIONAL", "OPTIONS", "ORGANIZATION", 
		"PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", "PAPER_TAPE_READER", 
		"PF", "PH", "PIC", "PICTURE", "PLUS", "POINTER", "POINTER_64", "POSITION", 
		"PREALLOCATION", "PRINTER", "PRINT_CONTROL", "PROGRAM", "PROGRAM_ID", 
		"RANDOM", "RD", "RECORD", "RECORDS", "REDEFINES", "REEL", "REFERENCE", 
		"RELATIVE", "RENAMES", "REPORT", "REPORTS", "RERUN", "RESERVE", "RESET", 
		"RF", "RH", "RIGHT", "ROLLBACK", "SAME", "SCREEN", "SD", "SECTION", "SECURITY", 
		"SEGMENT_LIMIT", "SELECT", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SIGN", 
		"SIGNED", "SIZE", "SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", "SPECIAL_NAMES", 
		"STANDARD", "STANDARD_1", "STANDARD_2", "STATUS", "SUM", "SWITCH", "SYMBOL", 
		"SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", "SYSOUT", "TAPE", 
		"THROUGH", "THRU", "TIMES", "TO", "TOP", "TRAILING", "TYPE", "UNIT", "UNSIGNED", 
		"UPON", "USAGE", "VALUE", "VALUES", "VARYING", "VAX", "WHEN", "WINDOW", 
		"WITH", "WORDS", "WORKING_STORAGE", "ZERO", "START_SLASH_", "START_STAR_", 
		"EXCLAM_", "UNDER_", "PLUS_", "MINUS_", "STAR_", "SLASH_", "COMMA_", "SEMI_", 
		"COLON_", "EQUAL_", "LT_", "LE_", "GE_", "GT_", "LPAREN_", "RPAREN_", 
		"LBRACK_", "RBRACK_", "POINTER_", "ATP_", "DOT_", "DOTDOT_", "LCURLY_", 
		"RCURLY_", "STRING_LITERAL", "NUMERIC_LITERAL", "HEX_LITERAL", "USER_DEFINED_WORD", 
		"START_FOUR_SPACES", "WHITESPACE", "NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(cobolParser._LITERAL_NAMES, cobolParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return cobolParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "cobol.g4"; }

	// @Override
	public get ruleNames(): string[] { return cobolParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return cobolParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(cobolParser._ATN, this);
	}
	// @RuleVersion(0)
	public cobol_source(): Cobol_sourceContext {
		let _localctx: Cobol_sourceContext = new Cobol_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, cobolParser.RULE_cobol_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 367;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IDENTIFICATION_IN_A_AREA || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 364;
				this.program();
				}
				}
				this.state = 369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 370;
			this.match(cobolParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public separator(): SeparatorContext {
		let _localctx: SeparatorContext = new SeparatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, cobolParser.RULE_separator);
		try {
			this.state = 378;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 372;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 373;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 374;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.COMMA_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 375;
				this.match(cobolParser.COMMA_);
				}
				break;
			case cobolParser.SEMI_:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 376;
				this.match(cobolParser.SEMI_);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 377;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_comment(): Line_commentContext {
		let _localctx: Line_commentContext = new Line_commentContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, cobolParser.RULE_line_comment);
		let _la: number;
		try {
			this.state = 396;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_SLASH_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 380;
				this.match(cobolParser.START_SLASH_);
				this.state = 384;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
					{
					{
					this.state = 381;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 386;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 387;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 388;
				this.match(cobolParser.START_STAR_);
				this.state = 392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
					{
					{
					this.state = 389;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 394;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 395;
				this.match(cobolParser.NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, cobolParser.RULE_program);
		let _la: number;
		try {
			this.state = 406;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.IDENTIFICATION_IN_A_AREA:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 398;
				this.identification_division();
				this.state = 400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ENVIRONMENT) {
					{
					this.state = 399;
					this.environment_division();
					}
				}

				this.state = 403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DATA) {
					{
					this.state = 402;
					this.data_division();
					}
				}

				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 405;
				this.separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_division(): Data_divisionContext {
		let _localctx: Data_divisionContext = new Data_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, cobolParser.RULE_data_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 408;
			this.match(cobolParser.DATA);
			this.state = 410;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 409;
				this.separator();
				}
				}
				this.state = 412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 414;
			this.match(cobolParser.DIVISION);
			this.state = 418;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 415;
				this.separator();
				}
				}
				this.state = 420;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 421;
			this.match(cobolParser.DOT_);
			this.state = 425;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 422;
					this.separator();
					}
					}
				}
				this.state = 427;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);
			}
			this.state = 435;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 428;
				this.file_section();
				this.state = 432;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 11, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 429;
						this.separator();
						}
						}
					}
					this.state = 434;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 11, this._ctx);
				}
				}
			}

			this.state = 444;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WORKING_STORAGE) {
				{
				this.state = 437;
				this.working_storage_section();
				this.state = 441;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 438;
						this.separator();
						}
						}
					}
					this.state = 443;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
				}
				}
			}

			this.state = 453;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINKAGE) {
				{
				this.state = 446;
				this.linkage_section();
				this.state = 450;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 447;
						this.separator();
						}
						}
					}
					this.state = 452;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				}
				}
			}

			this.state = 462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REPORT) {
				{
				this.state = 455;
				this.report_section();
				this.state = 459;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 456;
						this.separator();
						}
						}
					}
					this.state = 461;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
				}
				}
			}

			this.state = 471;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SCREEN) {
				{
				this.state = 464;
				this.screen_section();
				this.state = 468;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 465;
						this.separator();
						}
						}
					}
					this.state = 470;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_section(): File_sectionContext {
		let _localctx: File_sectionContext = new File_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, cobolParser.RULE_file_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 473;
			this.match(cobolParser.FILE);
			this.state = 475;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 474;
				this.separator();
				}
				}
				this.state = 477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 479;
			this.match(cobolParser.SECTION);
			this.state = 483;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 480;
				this.separator();
				}
				}
				this.state = 485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 486;
			this.match(cobolParser.DOT_);
			this.state = 490;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 487;
					this.separator();
					}
					}
				}
				this.state = 492;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
			}
			this.state = 506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.FD || _la === cobolParser.RD || _la === cobolParser.SD) {
				{
				{
				this.state = 496;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FD:
					{
					this.state = 493;
					this.file_description();
					}
					break;
				case cobolParser.SD:
					{
					this.state = 494;
					this.sort_merge_file_description();
					}
					break;
				case cobolParser.RD:
					{
					this.state = 495;
					this.report_description();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 501;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 498;
						this.separator();
						}
						}
					}
					this.state = 503;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
				}
				}
				}
				this.state = 508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_description(): File_descriptionContext {
		let _localctx: File_descriptionContext = new File_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, cobolParser.RULE_file_description);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 509;
			this.match(cobolParser.FD);
			this.state = 511;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 510;
				this.separator();
				}
				}
				this.state = 513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 515;
			this.file_name();
			this.state = 519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 516;
				this.separator();
				}
				}
				this.state = 521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 531;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.BLOCK))) !== 0) || _la === cobolParser.CODE_SET || _la === cobolParser.DATA || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & ((1 << (cobolParser.DYNAMIC - 81)) | (1 << (cobolParser.EXTERNAL - 81)) | (1 << (cobolParser.FILE - 81)) | (1 << (cobolParser.GLOBAL - 81)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (cobolParser.IS - 118)) | (1 << (cobolParser.LABEL - 118)) | (1 << (cobolParser.LINAGE - 118)))) !== 0) || ((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (cobolParser.RANDOM - 172)) | (1 << (cobolParser.RECORD - 172)) | (1 << (cobolParser.REPORT - 172)) | (1 << (cobolParser.REPORTS - 172)) | (1 << (cobolParser.SEQUENTIAL - 172)))) !== 0) || _la === cobolParser.STATUS || _la === cobolParser.VALUE) {
				{
				{
				this.state = 522;
				this.file_description_entry();
				this.state = 526;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 523;
					this.separator();
					}
					}
					this.state = 528;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 534;
			this.match(cobolParser.DOT_);
			this.state = 538;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 535;
					this.separator();
					}
					}
				}
				this.state = 540;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
			}
			this.state = 550;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 541;
				this.file_data_description();
				this.state = 545;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 542;
						this.separator();
						}
						}
					}
					this.state = 547;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
				}
				}
				}
				this.state = 552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_description_entry(): File_description_entryContext {
		let _localctx: File_description_entryContext = new File_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, cobolParser.RULE_file_description_entry);
		let _la: number;
		try {
			this.state = 582;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 553;
					this.match(cobolParser.IS);
					this.state = 555;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 554;
						this.separator();
						}
						}
						this.state = 557;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 561;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 562;
					this.match(cobolParser.IS);
					this.state = 564;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 563;
						this.separator();
						}
						}
						this.state = 566;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 570;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 571;
				this.block_contains();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 572;
				this.record();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 573;
				this.label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 574;
				this.value_of_id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 575;
				this.data_rec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 576;
				this.linage();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 577;
				this.report_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 578;
				this.code_set();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 579;
				this.access_mode();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 580;
				this.record_key();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 581;
				this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_data_description(): File_data_descriptionContext {
		let _localctx: File_data_descriptionContext = new File_data_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, cobolParser.RULE_file_data_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 584;
			this.level_number();
			this.state = 594;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 41, this._ctx) ) {
			case 1:
				{
				this.state = 586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 585;
					this.separator();
					}
					}
					this.state = 588;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 592;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 590;
					this.data_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 591;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 609;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 44, this._ctx) ) {
			case 1:
				{
				this.state = 597;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 596;
					this.separator();
					}
					}
					this.state = 599;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 601;
				this.match(cobolParser.REDEFINES);
				this.state = 603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 602;
					this.separator();
					}
					}
					this.state = 605;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 607;
				this.other_data_item();
				}
				break;
			}
			this.state = 620;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 611;
					this.separator();
					}
					}
					this.state = 614;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 616;
				this.file_data_description_entry();
				}
				}
				this.state = 622;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 623;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public level_number(): Level_numberContext {
		let _localctx: Level_numberContext = new Level_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, cobolParser.RULE_level_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 625;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_data_description_entry(): File_data_description_entryContext {
		let _localctx: File_data_description_entryContext = new File_data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, cobolParser.RULE_file_data_description_entry);
		let _la: number;
		try {
			this.state = 718;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 633;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 627;
					this.match(cobolParser.IS);
					this.state = 629;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 628;
						this.separator();
						}
						}
						this.state = 631;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 635;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 642;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 636;
					this.match(cobolParser.IS);
					this.state = 638;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 637;
						this.separator();
						}
						}
						this.state = 640;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 644;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 645;
				this.picture();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 646;
				this.usage();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 662;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIGN) {
					{
					this.state = 647;
					this.match(cobolParser.SIGN);
					this.state = 655;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
					case 1:
						{
						this.state = 649;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 648;
							this.separator();
							}
							}
							this.state = 651;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 653;
						this.match(cobolParser.IS);
						}
						break;
					}
					this.state = 658;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 657;
						this.separator();
						}
						}
						this.state = 660;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 664;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 678;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 57, this._ctx) ) {
				case 1:
					{
					this.state = 666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 665;
						this.separator();
						}
						}
						this.state = 668;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 670;
					this.match(cobolParser.SEPARATE);
					{
					this.state = 672;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 671;
						this.separator();
						}
						}
						this.state = 674;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 676;
					this.match(cobolParser.CHARACTER);
					}
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 680;
				this.occurs();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 681;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.SYNC || _la === cobolParser.SYNCHRONIZED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 689;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 59, this._ctx) ) {
				case 1:
					{
					this.state = 683;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 682;
						this.separator();
						}
						}
						this.state = 685;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 687;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LEFT || _la === cobolParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 691;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 699;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
				case 1:
					{
					this.state = 693;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 692;
						this.separator();
						}
						}
						this.state = 695;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 697;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 701;
				this.match(cobolParser.BLANK);
				this.state = 703;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 702;
					this.separator();
					}
					}
					this.state = 705;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 707;
					this.match(cobolParser.WHEN);
					this.state = 709;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 708;
						this.separator();
						}
						}
						this.state = 711;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 715;
				this.match(cobolParser.ZERO);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 717;
				this.value_is();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is(): Value_isContext {
		let _localctx: Value_isContext = new Value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, cobolParser.RULE_value_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 746;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.VALUE:
				{
				this.state = 720;
				this.match(cobolParser.VALUE);
				this.state = 722;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 721;
					this.separator();
					}
					}
					this.state = 724;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 726;
					this.match(cobolParser.IS);
					this.state = 728;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 727;
						this.separator();
						}
						}
						this.state = 730;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				}
				break;
			case cobolParser.VALUES:
				{
				this.state = 734;
				this.match(cobolParser.VALUES);
				this.state = 736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 735;
					this.separator();
					}
					}
					this.state = 738;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				{
				this.state = 740;
				this.match(cobolParser.ARE);
				this.state = 742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 741;
					this.separator();
					}
					}
					this.state = 744;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 748;
			this.value_is_definition();
			this.state = 758;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 750;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 749;
						this.separator();
						}
						}
						this.state = 752;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 754;
					this.value_is_definition();
					}
					}
				}
				this.state = 760;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition(): Value_is_definitionContext {
		let _localctx: Value_is_definitionContext = new Value_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, cobolParser.RULE_value_is_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 761;
			this.value_is_definition_part();
			this.state = 769;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				{
				this.state = 763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 762;
					this.separator();
					}
					}
					this.state = 765;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 767;
				this.value_is_definition_thru();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_part(): Value_is_definition_partContext {
		let _localctx: Value_is_definition_partContext = new Value_is_definition_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, cobolParser.RULE_value_is_definition_part);
		let _la: number;
		try {
			this.state = 788;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 771;
				this.value_is_literal();
				}
				break;
			case cobolParser.REFERENCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 772;
				this.match(cobolParser.REFERENCE);
				this.state = 774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 773;
					this.separator();
					}
					}
					this.state = 776;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 778;
				this.ref_data_name();
				}
				break;
			case cobolParser.EXTERNAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 780;
				this.match(cobolParser.EXTERNAL);
				this.state = 782;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 781;
					this.separator();
					}
					}
					this.state = 784;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 786;
				this.external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_thru(): Value_is_definition_thruContext {
		let _localctx: Value_is_definition_thruContext = new Value_is_definition_thruContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, cobolParser.RULE_value_is_definition_thru);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 790;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 792;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 791;
				this.separator();
				}
				}
				this.state = 794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 796;
			this.value_is_definition_part();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public external_name(): External_nameContext {
		let _localctx: External_nameContext = new External_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, cobolParser.RULE_external_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 798;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ref_data_name(): Ref_data_nameContext {
		let _localctx: Ref_data_nameContext = new Ref_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, cobolParser.RULE_ref_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 800;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_literal(): Value_is_literalContext {
		let _localctx: Value_is_literalContext = new Value_is_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, cobolParser.RULE_value_is_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 802;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public occurs(): OccursContext {
		let _localctx: OccursContext = new OccursContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, cobolParser.RULE_occurs);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 804;
			this.match(cobolParser.OCCURS);
			this.state = 806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 805;
				this.separator();
				}
				}
				this.state = 808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 810;
			this.times_def();
			this.state = 820;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 812;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 811;
						this.separator();
						}
						}
						this.state = 814;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 816;
					this.key_is();
					}
					}
				}
				this.state = 822;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
			}
			this.state = 830;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 84, this._ctx) ) {
			case 1:
				{
				this.state = 824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 823;
					this.separator();
					}
					}
					this.state = 826;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 828;
				this.indexed_by();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexed_by(): Indexed_byContext {
		let _localctx: Indexed_byContext = new Indexed_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, cobolParser.RULE_indexed_by);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 832;
			this.match(cobolParser.INDEXED);
			this.state = 834;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 833;
				this.separator();
				}
				}
				this.state = 836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BY) {
				{
				this.state = 838;
				this.match(cobolParser.BY);
				this.state = 840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 839;
					this.separator();
					}
					}
					this.state = 842;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 846;
			this.ind_name();
			this.state = 856;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 847;
						this.separator();
						}
						}
						this.state = 850;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 852;
					this.ind_name();
					}
					}
				}
				this.state = 858;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ind_name(): Ind_nameContext {
		let _localctx: Ind_nameContext = new Ind_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, cobolParser.RULE_ind_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 859;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_is(): Key_isContext {
		let _localctx: Key_isContext = new Key_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, cobolParser.RULE_key_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 861;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 863;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 862;
				this.separator();
				}
				}
				this.state = 865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 867;
				this.match(cobolParser.KEY);
				this.state = 869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 868;
					this.separator();
					}
					}
					this.state = 871;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 881;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 875;
				this.match(cobolParser.IS);
				this.state = 877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 876;
					this.separator();
					}
					}
					this.state = 879;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 883;
			this.key_name();
			this.state = 893;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 885;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 884;
						this.separator();
						}
						}
						this.state = 887;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 889;
					this.key_name();
					}
					}
				}
				this.state = 895;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_name(): Key_nameContext {
		let _localctx: Key_nameContext = new Key_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, cobolParser.RULE_key_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 896;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public times_def(): Times_defContext {
		let _localctx: Times_defContext = new Times_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, cobolParser.RULE_times_def);
		let _la: number;
		try {
			this.state = 946;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 898;
				this.table_size();
				this.state = 900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 899;
					this.separator();
					}
					}
					this.state = 902;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 904;
				this.match(cobolParser.TIMES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 906;
				this.min_times();
				this.state = 908;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 907;
					this.separator();
					}
					}
					this.state = 910;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 912;
				this.match(cobolParser.TO);
				this.state = 914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 913;
					this.separator();
					}
					}
					this.state = 916;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 918;
				this.max_times();
				this.state = 920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 919;
					this.separator();
					}
					}
					this.state = 922;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 924;
				this.match(cobolParser.TIMES);
				this.state = 926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 925;
					this.separator();
					}
					}
					this.state = 928;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 930;
				this.match(cobolParser.DEPENDING);
				this.state = 932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 931;
					this.separator();
					}
					}
					this.state = 934;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 936;
					this.match(cobolParser.ON);
					this.state = 938;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 937;
						this.separator();
						}
						}
						this.state = 940;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 944;
				this.depending_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_size(): Table_sizeContext {
		let _localctx: Table_sizeContext = new Table_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, cobolParser.RULE_table_size);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 948;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public min_times(): Min_timesContext {
		let _localctx: Min_timesContext = new Min_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, cobolParser.RULE_min_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 950;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public max_times(): Max_timesContext {
		let _localctx: Max_timesContext = new Max_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, cobolParser.RULE_max_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 952;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_description(): Report_descriptionContext {
		let _localctx: Report_descriptionContext = new Report_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, cobolParser.RULE_report_description);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 954;
			this.match(cobolParser.RD);
			this.state = 956;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 955;
				this.separator();
				}
				}
				this.state = 958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 960;
			this.report_name();
			this.state = 964;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 961;
				this.separator();
				}
				}
				this.state = 966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (cobolParser.CODE - 36)) | (1 << (cobolParser.CONTROL - 36)) | (1 << (cobolParser.CONTROLS - 36)))) !== 0) || _la === cobolParser.GLOBAL || _la === cobolParser.IS || _la === cobolParser.PAGE) {
				{
				{
				this.state = 967;
				this.report_description_entry();
				this.state = 971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 968;
					this.separator();
					}
					}
					this.state = 973;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 979;
			this.match(cobolParser.DOT_);
			this.state = 983;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 980;
					this.separator();
					}
					}
				}
				this.state = 985;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
			}
			this.state = 995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 986;
				this.report_data_description();
				this.state = 990;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 987;
						this.separator();
						}
						}
					}
					this.state = 992;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
				}
				}
				}
				this.state = 997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_data_description(): Report_data_descriptionContext {
		let _localctx: Report_data_descriptionContext = new Report_data_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, cobolParser.RULE_report_data_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 998;
			this.level_number();
			this.state = 1006;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
			case 1:
				{
				this.state = 1000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 999;
					this.separator();
					}
					}
					this.state = 1002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1004;
				this.data_name();
				}
				break;
			}
			this.state = 1017;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 1009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1008;
					this.separator();
					}
					}
					this.state = 1011;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1013;
				this.report_data_description_entry();
				}
				}
				this.state = 1019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1020;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_data_description_entry(): Report_data_description_entryContext {
		let _localctx: Report_data_description_entryContext = new Report_data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, cobolParser.RULE_report_data_description_entry);
		let _la: number;
		try {
			this.state = 1228;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1022;
				this.match(cobolParser.LINE);
				this.state = 1024;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1023;
					this.separator();
					}
					}
					this.state = 1026;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 1028;
					this.match(cobolParser.NUMBER);
					this.state = 1030;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1029;
						this.separator();
						}
						}
						this.state = 1032;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1036;
					this.match(cobolParser.IS);
					this.state = 1038;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1037;
						this.separator();
						}
						}
						this.state = 1040;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1044;
				this.line_num_definition();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1046;
				this.match(cobolParser.NEXT);
				this.state = 1048;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1047;
					this.separator();
					}
					}
					this.state = 1050;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1052;
				this.match(cobolParser.GROUP);
				this.state = 1054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1053;
					this.separator();
					}
					}
					this.state = 1056;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1064;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1058;
					this.match(cobolParser.IS);
					this.state = 1060;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1059;
						this.separator();
						}
						}
						this.state = 1062;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1066;
				this.next_group_definition();
				}
				break;
			case cobolParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1068;
				this.match(cobolParser.TYPE);
				this.state = 1070;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1069;
					this.separator();
					}
					}
					this.state = 1072;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1074;
					this.match(cobolParser.IS);
					this.state = 1076;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1075;
						this.separator();
						}
						}
						this.state = 1078;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1082;
				this.type_is_definition();
				}
				break;
			case cobolParser.DISPLAY:
			case cobolParser.USAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1098;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 1084;
					this.match(cobolParser.USAGE);
					this.state = 1086;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1085;
						this.separator();
						}
						}
						this.state = 1088;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1096;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 1090;
						this.match(cobolParser.IS);
						this.state = 1092;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1091;
							this.separator();
							}
							}
							this.state = 1094;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					}
				}

				this.state = 1100;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.BLANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1101;
				this.match(cobolParser.BLANK);
				this.state = 1103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1102;
					this.separator();
					}
					}
					this.state = 1105;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 1107;
					this.match(cobolParser.WHEN);
					this.state = 1109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1108;
						this.separator();
						}
						}
						this.state = 1111;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1115;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.COLUMN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1117;
				this.match(cobolParser.COLUMN);
				this.state = 1119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1118;
					this.separator();
					}
					}
					this.state = 1121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 1123;
					this.match(cobolParser.NUMBER);
					this.state = 1125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1124;
						this.separator();
						}
						}
						this.state = 1127;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1131;
					this.match(cobolParser.IS);
					this.state = 1133;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1132;
						this.separator();
						}
						}
						this.state = 1135;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1139;
				this.column_number();
				}
				break;
			case cobolParser.GROUP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1141;
				this.match(cobolParser.GROUP);
				this.state = 1149;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 142, this._ctx) ) {
				case 1:
					{
					this.state = 1143;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1142;
						this.separator();
						}
						}
						this.state = 1145;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1147;
					this.match(cobolParser.INDICATE);
					}
					break;
				}
				}
				break;
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1151;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1159;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 144, this._ctx) ) {
				case 1:
					{
					this.state = 1153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1152;
						this.separator();
						}
						}
						this.state = 1155;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1157;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;
			case cobolParser.PIC:
			case cobolParser.PICTURE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1161;
				this.picture();
				}
				break;
			case cobolParser.LEADING:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1177;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIGN) {
					{
					this.state = 1162;
					this.match(cobolParser.SIGN);
					this.state = 1170;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
					case 1:
						{
						this.state = 1164;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1163;
							this.separator();
							}
							}
							this.state = 1166;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 1168;
						this.match(cobolParser.IS);
						}
						break;
					}
					this.state = 1173;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1172;
						this.separator();
						}
						}
						this.state = 1175;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1179;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1193;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 151, this._ctx) ) {
				case 1:
					{
					this.state = 1181;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1180;
						this.separator();
						}
						}
						this.state = 1183;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1185;
					this.match(cobolParser.SEPARATE);
					{
					this.state = 1187;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1186;
						this.separator();
						}
						}
						this.state = 1189;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1191;
					this.match(cobolParser.CHARACTER);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.SOURCE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1195;
				this.match(cobolParser.SOURCE);
				this.state = 1197;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1196;
					this.separator();
					}
					}
					this.state = 1199;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1207;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1201;
					this.match(cobolParser.IS);
					this.state = 1203;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1202;
						this.separator();
						}
						}
						this.state = 1205;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1209;
				this.source_name();
				}
				break;
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1211;
				this.match(cobolParser.VALUE);
				this.state = 1213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1212;
					this.separator();
					}
					}
					this.state = 1215;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1217;
					this.match(cobolParser.IS);
					this.state = 1219;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1218;
						this.separator();
						}
						}
						this.state = 1221;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1225;
				this.value_is_literal();
				}
				break;
			case cobolParser.SUM:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1227;
				this.sum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum(): SumContext {
		let _localctx: SumContext = new SumContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, cobolParser.RULE_sum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1270;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1230;
				this.match(cobolParser.SUM);
				this.state = 1232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1231;
					this.separator();
					}
					}
					this.state = 1234;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1236;
				this.sum_name();
				this.state = 1246;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1238;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1237;
							this.separator();
							}
							}
							this.state = 1240;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 1242;
						this.sum_name();
						}
						}
					}
					this.state = 1248;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
				}
				this.state = 1256;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
				case 1:
					{
					this.state = 1250;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1249;
						this.separator();
						}
						}
						this.state = 1252;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1254;
					this.match(cobolParser.UPON);
					}
					break;
				}
				this.state = 1267;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1259;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1258;
							this.separator();
							}
							}
							this.state = 1261;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 1263;
						this.detail_report_group_name();
						}
						}
					}
					this.state = 1269;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
				}
				}
				}
				this.state = 1272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.SUM);
			this.state = 1294;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				{
				this.state = 1277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 1274;
					this.separator();
					}
					}
					this.state = 1279;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1280;
				this.match(cobolParser.RESET);
				this.state = 1282;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1281;
					this.separator();
					}
					}
					this.state = 1284;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				{
				this.state = 1286;
				this.match(cobolParser.ON);
				this.state = 1288;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1287;
					this.separator();
					}
					}
					this.state = 1290;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				this.state = 1292;
				this.control_foot_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_foot_name(): Control_foot_nameContext {
		let _localctx: Control_foot_nameContext = new Control_foot_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, cobolParser.RULE_control_foot_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1296;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public detail_report_group_name(): Detail_report_group_nameContext {
		let _localctx: Detail_report_group_nameContext = new Detail_report_group_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, cobolParser.RULE_detail_report_group_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1298;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum_name(): Sum_nameContext {
		let _localctx: Sum_nameContext = new Sum_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, cobolParser.RULE_sum_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1300;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_name(): Source_nameContext {
		let _localctx: Source_nameContext = new Source_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, cobolParser.RULE_source_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1302;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_number(): Column_numberContext {
		let _localctx: Column_numberContext = new Column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, cobolParser.RULE_column_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1304;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_is_definition(): Type_is_definitionContext {
		let _localctx: Type_is_definitionContext = new Type_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, cobolParser.RULE_type_is_definition);
		let _la: number;
		try {
			this.state = 1380;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 181, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1306;
				this.match(cobolParser.REPORT);
				this.state = 1308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1307;
					this.separator();
					}
					}
					this.state = 1310;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1312;
				this.match(cobolParser.HEADING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1314;
				this.match(cobolParser.RH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1315;
				this.match(cobolParser.PAGE);
				this.state = 1317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1316;
					this.separator();
					}
					}
					this.state = 1319;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1321;
				this.match(cobolParser.HEADING);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1323;
				this.match(cobolParser.PH);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1333;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 1324;
					this.match(cobolParser.CONTROL);
					this.state = 1326;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1325;
						this.separator();
						}
						}
						this.state = 1328;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1330;
					this.match(cobolParser.HEADING);
					}
					break;
				case cobolParser.CH:
					{
					this.state = 1332;
					this.match(cobolParser.CH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1335;
					this.separator();
					}
					}
					this.state = 1338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1340;
				this.type_control_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1342;
				this.match(cobolParser.DETAIL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1343;
				this.match(cobolParser.DE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1353;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 1344;
					this.match(cobolParser.CONTROL);
					this.state = 1346;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1345;
						this.separator();
						}
						}
						this.state = 1348;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1350;
					this.match(cobolParser.FOOTING);
					}
					break;
				case cobolParser.CF:
					{
					this.state = 1352;
					this.match(cobolParser.CF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1355;
					this.separator();
					}
					}
					this.state = 1358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1360;
				this.type_control_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1362;
				this.match(cobolParser.PAGE);
				this.state = 1364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1363;
					this.separator();
					}
					}
					this.state = 1366;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1368;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1370;
				this.match(cobolParser.PF);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1371;
				this.match(cobolParser.REPORT);
				this.state = 1373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1372;
					this.separator();
					}
					}
					this.state = 1375;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1377;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1379;
				this.match(cobolParser.RF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_control_name(): Type_control_nameContext {
		let _localctx: Type_control_nameContext = new Type_control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, cobolParser.RULE_type_control_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1382;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public next_group_definition(): Next_group_definitionContext {
		let _localctx: Next_group_definitionContext = new Next_group_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, cobolParser.RULE_next_group_definition);
		let _la: number;
		try {
			this.state = 1401;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1384;
				this.line_num();
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1385;
				this.match(cobolParser.PLUS);
				this.state = 1387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1386;
					this.separator();
					}
					}
					this.state = 1389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1391;
				this.line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1393;
				this.match(cobolParser.NEXT);
				this.state = 1395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1394;
					this.separator();
					}
					}
					this.state = 1397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1399;
				this.match(cobolParser.PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num_definition(): Line_num_definitionContext {
		let _localctx: Line_num_definitionContext = new Line_num_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, cobolParser.RULE_line_num_definition);
		let _la: number;
		try {
			this.state = 1435;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1403;
				this.line_num();
				this.state = 1425;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 189, this._ctx) ) {
				case 1:
					{
					this.state = 1405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1404;
						this.separator();
						}
						}
						this.state = 1407;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1415;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 1409;
						this.match(cobolParser.ON);
						this.state = 1411;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1410;
							this.separator();
							}
							}
							this.state = 1413;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					this.state = 1417;
					this.match(cobolParser.NEXT);
					this.state = 1419;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1418;
						this.separator();
						}
						}
						this.state = 1421;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1423;
					this.match(cobolParser.PAGE);
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1427;
				this.match(cobolParser.PLUS);
				this.state = 1429;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1428;
					this.separator();
					}
					}
					this.state = 1431;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1433;
				this.line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num(): Line_numContext {
		let _localctx: Line_numContext = new Line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, cobolParser.RULE_line_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1437;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_description_entry(): Report_description_entryContext {
		let _localctx: Report_description_entryContext = new Report_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, cobolParser.RULE_report_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1624;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.GLOBAL:
			case cobolParser.IS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1445;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1439;
					this.match(cobolParser.IS);
					this.state = 1441;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1440;
						this.separator();
						}
						}
						this.state = 1443;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1447;
				this.match(cobolParser.GLOBAL);
				}
				break;
			case cobolParser.CODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1448;
				this.match(cobolParser.CODE);
				this.state = 1450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1449;
					this.separator();
					}
					}
					this.state = 1452;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1454;
				this.report_code();
				}
				break;
			case cobolParser.CONTROL:
			case cobolParser.CONTROLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1476;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 1456;
					this.match(cobolParser.CONTROL);
					this.state = 1464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						this.state = 1458;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1457;
							this.separator();
							}
							}
							this.state = 1460;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 1462;
						this.match(cobolParser.IS);
						}
					}

					}
					break;
				case cobolParser.CONTROLS:
					{
					this.state = 1466;
					this.match(cobolParser.CONTROLS);
					this.state = 1474;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						this.state = 1468;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1467;
							this.separator();
							}
							}
							this.state = 1470;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 1472;
						this.match(cobolParser.ARE);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1504;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 1478;
					this.control_name();
					this.state = 1488;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1482;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
								{
								{
								this.state = 1479;
								this.separator();
								}
								}
								this.state = 1484;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 1485;
							this.control_name();
							}
							}
						}
						this.state = 1490;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
					}
					}
					break;
				case cobolParser.FINAL:
					{
					this.state = 1491;
					this.match(cobolParser.FINAL);
					this.state = 1501;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1495;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
								{
								{
								this.state = 1492;
								this.separator();
								}
								}
								this.state = 1497;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 1498;
							this.control_name();
							}
							}
						}
						this.state = 1503;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1506;
				this.match(cobolParser.PAGE);
				this.state = 1508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1507;
					this.separator();
					}
					}
					this.state = 1510;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1540;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LIMIT:
					{
					this.state = 1512;
					this.match(cobolParser.LIMIT);
					this.state = 1514;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1513;
						this.separator();
						}
						}
						this.state = 1516;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1524;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 1518;
						this.match(cobolParser.IS);
						this.state = 1520;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1519;
							this.separator();
							}
							}
							this.state = 1522;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					}
					break;
				case cobolParser.LIMITS:
					{
					this.state = 1526;
					this.match(cobolParser.LIMITS);
					this.state = 1528;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1527;
						this.separator();
						}
						}
						this.state = 1530;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ARE) {
						{
						this.state = 1532;
						this.match(cobolParser.ARE);
						this.state = 1534;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1533;
							this.separator();
							}
							}
							this.state = 1536;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					}
					break;
				case cobolParser.NUMERIC_LITERAL:
					break;
				default:
					break;
				}
				this.state = 1542;
				this.page_size_rd();
				this.state = 1550;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
				case 1:
					{
					this.state = 1544;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1543;
						this.separator();
						}
						}
						this.state = 1546;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1548;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1565;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 217, this._ctx) ) {
				case 1:
					{
					this.state = 1553;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1552;
						this.separator();
						}
						}
						this.state = 1555;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1557;
					this.match(cobolParser.HEADING);
					this.state = 1559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1558;
						this.separator();
						}
						}
						this.state = 1561;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1563;
					this.heading_line();
					}
					break;
				}
				this.state = 1586;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 221, this._ctx) ) {
				case 1:
					{
					this.state = 1568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1567;
						this.separator();
						}
						}
						this.state = 1570;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1572;
					this.match(cobolParser.FIRST);
					this.state = 1574;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1573;
						this.separator();
						}
						}
						this.state = 1576;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1578;
					this.match(cobolParser.DETAIL);
					this.state = 1580;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1579;
						this.separator();
						}
						}
						this.state = 1582;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1584;
					this.first_detail_line();
					}
					break;
				}
				this.state = 1607;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
				case 1:
					{
					this.state = 1589;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1588;
						this.separator();
						}
						}
						this.state = 1591;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1593;
					this.match(cobolParser.LAST);
					this.state = 1595;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1594;
						this.separator();
						}
						}
						this.state = 1597;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1599;
					this.match(cobolParser.DETAIL);
					this.state = 1601;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1600;
						this.separator();
						}
						}
						this.state = 1603;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1605;
					this.last_detail_line();
					}
					break;
				}
				this.state = 1622;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
				case 1:
					{
					this.state = 1610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1609;
						this.separator();
						}
						}
						this.state = 1612;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1614;
					this.match(cobolParser.FOOTING);
					this.state = 1616;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1615;
						this.separator();
						}
						}
						this.state = 1618;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1620;
					this.footing_line_rd();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line_rd(): Footing_line_rdContext {
		let _localctx: Footing_line_rdContext = new Footing_line_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, cobolParser.RULE_footing_line_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1626;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_detail_line(): Last_detail_lineContext {
		let _localctx: Last_detail_lineContext = new Last_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, cobolParser.RULE_last_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1628;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_detail_line(): First_detail_lineContext {
		let _localctx: First_detail_lineContext = new First_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, cobolParser.RULE_first_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1630;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public heading_line(): Heading_lineContext {
		let _localctx: Heading_lineContext = new Heading_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, cobolParser.RULE_heading_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1632;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size_rd(): Page_size_rdContext {
		let _localctx: Page_size_rdContext = new Page_size_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, cobolParser.RULE_page_size_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1634;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_name(): Control_nameContext {
		let _localctx: Control_nameContext = new Control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, cobolParser.RULE_control_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1636;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_code(): Report_codeContext {
		let _localctx: Report_codeContext = new Report_codeContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, cobolParser.RULE_report_code);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1638;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage(): UsageContext {
		let _localctx: UsageContext = new UsageContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, cobolParser.RULE_usage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 1640;
				this.match(cobolParser.USAGE);
				this.state = 1648;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
				case 1:
					{
					this.state = 1642;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1641;
						this.separator();
						}
						}
						this.state = 1644;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1646;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 1651;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1650;
					this.separator();
					}
					}
					this.state = 1653;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 1657;
			this.usage_def();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage_def(): Usage_defContext {
		let _localctx: Usage_defContext = new Usage_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, cobolParser.RULE_usage_def);
		let _la: number;
		try {
			this.state = 1722;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1659;
				this.match(cobolParser.BINARY);
				}
				break;
			case cobolParser.BINARY_CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1660;
				this.match(cobolParser.BINARY_CHAR);
				this.state = 1668;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
				case 1:
					{
					this.state = 1662;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1661;
						this.separator();
						}
						}
						this.state = 1664;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1666;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_SHORT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1670;
				this.match(cobolParser.BINARY_SHORT);
				this.state = 1678;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 237, this._ctx) ) {
				case 1:
					{
					this.state = 1672;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1671;
						this.separator();
						}
						}
						this.state = 1674;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1676;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_LONG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1680;
				this.match(cobolParser.BINARY_LONG);
				this.state = 1688;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 239, this._ctx) ) {
				case 1:
					{
					this.state = 1682;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1681;
						this.separator();
						}
						}
						this.state = 1684;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1686;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_DOUBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1690;
				this.match(cobolParser.BINARY_DOUBLE);
				this.state = 1698;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 241, this._ctx) ) {
				case 1:
					{
					this.state = 1692;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1691;
						this.separator();
						}
						}
						this.state = 1694;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1696;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.COMPUTATIONAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1700;
				this.match(cobolParser.COMPUTATIONAL);
				}
				break;
			case cobolParser.COMPUTATIONAL_1:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1701;
				this.match(cobolParser.COMPUTATIONAL_1);
				}
				break;
			case cobolParser.COMPUTATIONAL_2:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1702;
				this.match(cobolParser.COMPUTATIONAL_2);
				}
				break;
			case cobolParser.COMPUTATIONAL_3:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1703;
				this.match(cobolParser.COMPUTATIONAL_3);
				}
				break;
			case cobolParser.COMPUTATIONAL_4:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1704;
				this.match(cobolParser.COMPUTATIONAL_4);
				}
				break;
			case cobolParser.COMPUTATIONAL_5:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1705;
				this.match(cobolParser.COMPUTATIONAL_5);
				}
				break;
			case cobolParser.COMPUTATIONAL_X:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1706;
				this.match(cobolParser.COMPUTATIONAL_X);
				}
				break;
			case cobolParser.COMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1707;
				this.match(cobolParser.COMP);
				}
				break;
			case cobolParser.COMP_1:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1708;
				this.match(cobolParser.COMP_1);
				}
				break;
			case cobolParser.COMP_2:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1709;
				this.match(cobolParser.COMP_2);
				}
				break;
			case cobolParser.COMP_3:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1710;
				this.match(cobolParser.COMP_3);
				}
				break;
			case cobolParser.COMP_4:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1711;
				this.match(cobolParser.COMP_4);
				}
				break;
			case cobolParser.COMP_5:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1712;
				this.match(cobolParser.COMP_5);
				}
				break;
			case cobolParser.COMP_X:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1713;
				this.match(cobolParser.COMP_X);
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1714;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.FLOAT_SHORT:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1715;
				this.match(cobolParser.FLOAT_SHORT);
				}
				break;
			case cobolParser.FLOAT_LONG:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1716;
				this.match(cobolParser.FLOAT_LONG);
				}
				break;
			case cobolParser.FLOAT_EXTENDED:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1717;
				this.match(cobolParser.FLOAT_EXTENDED);
				}
				break;
			case cobolParser.INDEX:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1718;
				this.match(cobolParser.INDEX);
				}
				break;
			case cobolParser.PACKED_DECIMAL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1719;
				this.match(cobolParser.PACKED_DECIMAL);
				}
				break;
			case cobolParser.POINTER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1720;
				this.match(cobolParser.POINTER);
				}
				break;
			case cobolParser.POINTER_64:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1721;
				this.match(cobolParser.POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public picture(): PictureContext {
		let _localctx: PictureContext = new PictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, cobolParser.RULE_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1724;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PIC || _la === cobolParser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1726;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1725;
					this.separator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1728;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 1730;
				this.match(cobolParser.IS);
				this.state = 1732;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1731;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1734;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 1738;
			this.character_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_string(): Character_stringContext {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, cobolParser.RULE_character_string);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1741;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1740;
					this.char_str_part();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1743;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_str_part(): Char_str_partContext {
		let _localctx: Char_str_partContext = new Char_str_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, cobolParser.RULE_char_str_part);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1745;
			_la = this._input.LA(1);
			if (!(((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (cobolParser.SLASH_ - 250)) | (1 << (cobolParser.COMMA_ - 250)) | (1 << (cobolParser.LPAREN_ - 250)) | (1 << (cobolParser.RPAREN_ - 250)) | (1 << (cobolParser.DOT_ - 250)) | (1 << (cobolParser.NUMERIC_LITERAL - 250)) | (1 << (cobolParser.USER_DEFINED_WORD - 250)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public other_data_item(): Other_data_itemContext {
		let _localctx: Other_data_itemContext = new Other_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, cobolParser.RULE_other_data_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1747;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_name(): Data_nameContext {
		let _localctx: Data_nameContext = new Data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, cobolParser.RULE_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1749;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_merge_file_description(): Sort_merge_file_descriptionContext {
		let _localctx: Sort_merge_file_descriptionContext = new Sort_merge_file_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, cobolParser.RULE_sort_merge_file_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1751;
			this.match(cobolParser.SD);
			this.state = 1753;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1752;
				this.separator();
				}
				}
				this.state = 1755;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 1757;
			this.file_name();
			this.state = 1761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 1758;
				this.separator();
				}
				}
				this.state = 1763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.DATA || _la === cobolParser.RECORD) {
				{
				{
				this.state = 1764;
				this.sort_merge_file_description_entry();
				this.state = 1768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 1765;
					this.separator();
					}
					}
					this.state = 1770;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1785;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 1776;
				this.file_data_description();
				this.state = 1780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 1777;
					this.separator();
					}
					}
					this.state = 1782;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1787;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1788;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext {
		let _localctx: Sort_merge_file_description_entryContext = new Sort_merge_file_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, cobolParser.RULE_sort_merge_file_description_entry);
		try {
			this.state = 1792;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1790;
				this.record();
				}
				break;
			case cobolParser.DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1791;
				this.data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_is(): Report_isContext {
		let _localctx: Report_isContext = new Report_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, cobolParser.RULE_report_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1814;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				{
				this.state = 1794;
				this.match(cobolParser.REPORT);
				this.state = 1802;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
				case 1:
					{
					this.state = 1796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1795;
						this.separator();
						}
						}
						this.state = 1798;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1800;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.REPORTS:
				{
				this.state = 1804;
				this.match(cobolParser.REPORTS);
				this.state = 1812;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 257, this._ctx) ) {
				case 1:
					{
					this.state = 1806;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1805;
						this.separator();
						}
						}
						this.state = 1808;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1810;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1816;
				this.separator();
				}
				}
				this.state = 1819;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 1821;
			this.report_name();
			this.state = 1831;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1825;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						{
						this.state = 1822;
						this.separator();
						}
						}
						this.state = 1827;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1828;
					this.report_name();
					}
					}
				}
				this.state = 1833;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_name(): Report_nameContext {
		let _localctx: Report_nameContext = new Report_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, cobolParser.RULE_report_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1834;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linage(): LinageContext {
		let _localctx: LinageContext = new LinageContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, cobolParser.RULE_linage);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1836;
			this.match(cobolParser.LINAGE);
			this.state = 1838;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1837;
				this.separator();
				}
				}
				this.state = 1840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 1848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 1842;
				this.match(cobolParser.IS);
				this.state = 1844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1843;
					this.separator();
					}
					}
					this.state = 1846;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 1850;
			this.page_size();
			this.state = 1858;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 266, this._ctx) ) {
			case 1:
				{
				this.state = 1852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1851;
					this.separator();
					}
					}
					this.state = 1854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1856;
				this.match(cobolParser.LINES);
				}
				break;
			}
			this.state = 1887;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOOTING || _la === cobolParser.WITH) {
				{
				this.state = 1866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1860;
					this.match(cobolParser.WITH);
					this.state = 1862;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1861;
						this.separator();
						}
						}
						this.state = 1864;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1868;
				this.match(cobolParser.FOOTING);
				this.state = 1870;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1869;
					this.separator();
					}
					}
					this.state = 1872;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				{
				this.state = 1874;
				this.match(cobolParser.AT);
				this.state = 1876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1875;
					this.separator();
					}
					}
					this.state = 1878;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				this.state = 1880;
				this.footing_line();
				this.state = 1884;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1881;
						this.separator();
						}
						}
					}
					this.state = 1886;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
				}
				}
			}

			this.state = 1918;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				{
				this.state = 1895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 1889;
					this.match(cobolParser.LINES);
					this.state = 1891;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1890;
						this.separator();
						}
						}
						this.state = 1893;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 1897;
					this.match(cobolParser.AT);
					this.state = 1899;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1898;
						this.separator();
						}
						}
						this.state = 1901;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1905;
				this.match(cobolParser.TOP);
				this.state = 1907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1906;
					this.separator();
					}
					}
					this.state = 1909;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1911;
				this.top_lines();
				this.state = 1915;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1912;
						this.separator();
						}
						}
					}
					this.state = 1917;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
				}
				}
				break;
			}
			this.state = 1949;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT || _la === cobolParser.BOTTOM || _la === cobolParser.LINES) {
				{
				this.state = 1926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 1920;
					this.match(cobolParser.LINES);
					this.state = 1922;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1921;
						this.separator();
						}
						}
						this.state = 1924;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 1928;
					this.match(cobolParser.AT);
					this.state = 1930;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1929;
						this.separator();
						}
						}
						this.state = 1932;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 1936;
				this.match(cobolParser.BOTTOM);
				this.state = 1938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1937;
					this.separator();
					}
					}
					this.state = 1940;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 1942;
				this.bottom_lines();
				this.state = 1946;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1943;
						this.separator();
						}
						}
					}
					this.state = 1948;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bottom_lines(): Bottom_linesContext {
		let _localctx: Bottom_linesContext = new Bottom_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, cobolParser.RULE_bottom_lines);
		try {
			this.state = 1953;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1951;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1952;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_lines(): Top_linesContext {
		let _localctx: Top_linesContext = new Top_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, cobolParser.RULE_top_lines);
		try {
			this.state = 1957;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1955;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1956;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line(): Footing_lineContext {
		let _localctx: Footing_lineContext = new Footing_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, cobolParser.RULE_footing_line);
		try {
			this.state = 1961;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1959;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1960;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size(): Page_sizeContext {
		let _localctx: Page_sizeContext = new Page_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, cobolParser.RULE_page_size);
		try {
			this.state = 1965;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1963;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1964;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_rec(): Data_recContext {
		let _localctx: Data_recContext = new Data_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, cobolParser.RULE_data_rec);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1967;
			this.match(cobolParser.DATA);
			this.state = 1969;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1968;
				this.separator();
				}
				}
				this.state = 1971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 1993;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 1973;
				this.match(cobolParser.RECORDS);
				this.state = 1981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					this.state = 1975;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1974;
						this.separator();
						}
						}
						this.state = 1977;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1979;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 1983;
				this.match(cobolParser.RECORD);
				this.state = 1991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					this.state = 1985;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1984;
						this.separator();
						}
						}
						this.state = 1987;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 1989;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1995;
			this.rec_name();
			this.state = 2005;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1997;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1996;
						this.separator();
						}
						}
						this.state = 1999;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2001;
					this.rec_name();
					}
					}
				}
				this.state = 2007;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_name(): Rec_nameContext {
		let _localctx: Rec_nameContext = new Rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, cobolParser.RULE_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2008;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id(): Value_of_idContext {
		let _localctx: Value_of_idContext = new Value_of_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, cobolParser.RULE_value_of_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2010;
			this.match(cobolParser.VALUE);
			this.state = 2012;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2011;
				this.separator();
				}
				}
				this.state = 2014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2016;
			this.match(cobolParser.OF);
			this.state = 2018;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2017;
				this.separator();
				}
				}
				this.state = 2020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2022;
			this.match(cobolParser.ID);
			this.state = 2024;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2023;
				this.separator();
				}
				}
				this.state = 2026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			{
			this.state = 2028;
			this.match(cobolParser.IS);
			this.state = 2030;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2029;
				this.separator();
				}
				}
				this.state = 2032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			}
			this.state = 2034;
			this.value_of_id_def();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id_def(): Value_of_id_defContext {
		let _localctx: Value_of_id_defContext = new Value_of_id_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, cobolParser.RULE_value_of_id_def);
		try {
			this.state = 2038;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2036;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2037;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, cobolParser.RULE_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2040;
			this.match(cobolParser.LABEL);
			this.state = 2042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2041;
				this.separator();
				}
				}
				this.state = 2044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2066;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 2046;
				this.match(cobolParser.RECORDS);
				this.state = 2054;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 306, this._ctx) ) {
				case 1:
					{
					this.state = 2048;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2047;
						this.separator();
						}
						}
						this.state = 2050;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2052;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 2056;
				this.match(cobolParser.RECORD);
				this.state = 2064;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 308, this._ctx) ) {
				case 1:
					{
					this.state = 2058;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2057;
						this.separator();
						}
						}
						this.state = 2060;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2062;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2068;
				this.separator();
				}
				}
				this.state = 2071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2073;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.OMITTED || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record(): RecordContext {
		let _localctx: RecordContext = new RecordContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, cobolParser.RULE_record);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2075;
			this.match(cobolParser.RECORD);
			this.state = 2077;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2076;
				this.separator();
				}
				}
				this.state = 2079;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2081;
			this.record_def();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_def(): Record_defContext {
		let _localctx: Record_defContext = new Record_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, cobolParser.RULE_record_def);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2206;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTAINS:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTAINS) {
					{
					this.state = 2083;
					this.match(cobolParser.CONTAINS);
					this.state = 2085;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2084;
						this.separator();
						}
						}
						this.state = 2087;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 2103;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 316, this._ctx) ) {
				case 1:
					{
					this.state = 2091;
					this.shortest_rec();
					this.state = 2093;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2092;
						this.separator();
						}
						}
						this.state = 2095;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2097;
					this.match(cobolParser.TO);
					this.state = 2099;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2098;
						this.separator();
						}
						}
						this.state = 2101;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
					break;
				}
				this.state = 2105;
				this.longest_rec();
				this.state = 2109;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2106;
						this.separator();
						}
						}
					}
					this.state = 2111;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
				}
				this.state = 2119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 2112;
					this.match(cobolParser.CHARACTERS);
					this.state = 2116;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2113;
							this.separator();
							}
							}
						}
						this.state = 2118;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
					}
					}
				}

				}
				break;
			case cobolParser.IS:
			case cobolParser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2121;
					this.match(cobolParser.IS);
					this.state = 2123;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2122;
						this.separator();
						}
						}
						this.state = 2125;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 2129;
				this.match(cobolParser.VARYING);
				this.state = 2131;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2130;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2133;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 2135;
					this.match(cobolParser.IN);
					this.state = 2137;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 2136;
							this.separator();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 2139;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 2150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIZE) {
					{
					this.state = 2143;
					this.match(cobolParser.SIZE);
					this.state = 2147;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2144;
							this.separator();
							}
							}
						}
						this.state = 2149;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
					}
					}
				}

				this.state = 2161;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 329, this._ctx) ) {
				case 1:
					{
					this.state = 2158;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FROM) {
						{
						this.state = 2152;
						this.match(cobolParser.FROM);
						this.state = 2154;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2153;
							this.separator();
							}
							}
							this.state = 2156;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					this.state = 2160;
					this.shortest_rec();
					}
					break;
				}
				this.state = 2171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 2163;
					this.match(cobolParser.TO);
					this.state = 2165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2164;
						this.separator();
						}
						}
						this.state = 2167;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2169;
					this.longest_rec();
					}
				}

				this.state = 2186;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 334, this._ctx) ) {
				case 1:
					{
					this.state = 2176;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						{
						this.state = 2173;
						this.separator();
						}
						}
						this.state = 2178;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2179;
					this.match(cobolParser.CHARACTERS);
					this.state = 2183;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2180;
							this.separator();
							}
							}
						}
						this.state = 2185;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
					}
					}
					break;
				}
				this.state = 2204;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEPENDING) {
					{
					this.state = 2188;
					this.match(cobolParser.DEPENDING);
					this.state = 2190;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2189;
						this.separator();
						}
						}
						this.state = 2192;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2200;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 2194;
						this.match(cobolParser.ON);
						this.state = 2196;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2195;
							this.separator();
							}
							}
							this.state = 2198;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					this.state = 2202;
					this.depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public depending_item(): Depending_itemContext {
		let _localctx: Depending_itemContext = new Depending_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, cobolParser.RULE_depending_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2208;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortest_rec(): Shortest_recContext {
		let _localctx: Shortest_recContext = new Shortest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, cobolParser.RULE_shortest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2210;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public longest_rec(): Longest_recContext {
		let _localctx: Longest_recContext = new Longest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, cobolParser.RULE_longest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2212;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public working_storage_section(): Working_storage_sectionContext {
		let _localctx: Working_storage_sectionContext = new Working_storage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, cobolParser.RULE_working_storage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2214;
			this.match(cobolParser.WORKING_STORAGE);
			this.state = 2216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2215;
				this.separator();
				}
				}
				this.state = 2218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2220;
			this.match(cobolParser.SECTION);
			this.state = 2224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2221;
				this.separator();
				}
				}
				this.state = 2226;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2227;
			this.match(cobolParser.DOT_);
			this.state = 2231;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2228;
					this.separator();
					}
					}
				}
				this.state = 2233;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			}
			this.state = 2243;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 2234;
				this.file_data_description();
				this.state = 2238;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2235;
						this.separator();
						}
						}
					}
					this.state = 2240;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
				}
				}
				}
				this.state = 2245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linkage_section(): Linkage_sectionContext {
		let _localctx: Linkage_sectionContext = new Linkage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, cobolParser.RULE_linkage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2246;
			this.match(cobolParser.LINKAGE);
			this.state = 2248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2247;
				this.separator();
				}
				}
				this.state = 2250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2252;
			this.match(cobolParser.SECTION);
			this.state = 2256;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2253;
				this.separator();
				}
				}
				this.state = 2258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2259;
			this.match(cobolParser.DOT_);
			this.state = 2263;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2260;
					this.separator();
					}
					}
				}
				this.state = 2265;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
			}
			this.state = 2275;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 2266;
				this.file_data_description();
				this.state = 2270;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2267;
						this.separator();
						}
						}
					}
					this.state = 2272;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
				}
				}
				}
				this.state = 2277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_section(): Report_sectionContext {
		let _localctx: Report_sectionContext = new Report_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, cobolParser.RULE_report_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2278;
			this.match(cobolParser.REPORT);
			this.state = 2280;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2279;
				this.separator();
				}
				}
				this.state = 2282;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2284;
			this.match(cobolParser.SECTION);
			this.state = 2288;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2285;
				this.separator();
				}
				}
				this.state = 2290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2291;
			this.match(cobolParser.DOT_);
			this.state = 2295;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2292;
					this.separator();
					}
					}
				}
				this.state = 2297;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			}
			this.state = 2307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.RD) {
				{
				{
				this.state = 2298;
				this.report_description();
				this.state = 2302;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2299;
						this.separator();
						}
						}
					}
					this.state = 2304;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
				}
				}
				}
				this.state = 2309;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_section(): Screen_sectionContext {
		let _localctx: Screen_sectionContext = new Screen_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, cobolParser.RULE_screen_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2310;
			this.match(cobolParser.SCREEN);
			this.state = 2312;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2311;
				this.separator();
				}
				}
				this.state = 2314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2316;
			this.match(cobolParser.SECTION);
			this.state = 2320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2317;
				this.separator();
				}
				}
				this.state = 2322;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2323;
			this.match(cobolParser.DOT_);
			this.state = 2327;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2324;
					this.separator();
					}
					}
				}
				this.state = 2329;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
			}
			this.state = 2339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (cobolParser.COMP - 42)) | (1 << (cobolParser.COMPUTATIONAL - 42)) | (1 << (cobolParser.COMPUTATIONAL_1 - 42)) | (1 << (cobolParser.COMPUTATIONAL_2 - 42)) | (1 << (cobolParser.COMPUTATIONAL_3 - 42)) | (1 << (cobolParser.COMPUTATIONAL_4 - 42)) | (1 << (cobolParser.COMPUTATIONAL_5 - 42)) | (1 << (cobolParser.COMPUTATIONAL_X - 42)) | (1 << (cobolParser.COMP_1 - 42)) | (1 << (cobolParser.COMP_2 - 42)) | (1 << (cobolParser.COMP_3 - 42)) | (1 << (cobolParser.COMP_4 - 42)) | (1 << (cobolParser.COMP_5 - 42)) | (1 << (cobolParser.COMP_X - 42)))) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (cobolParser.DISPLAY - 78)) | (1 << (cobolParser.EXTERNAL - 78)) | (1 << (cobolParser.FLOAT_EXTENDED - 78)) | (1 << (cobolParser.FLOAT_LONG - 78)) | (1 << (cobolParser.FLOAT_SHORT - 78)) | (1 << (cobolParser.GLOBAL - 78)))) !== 0) || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & ((1 << (cobolParser.INDEX - 112)) | (1 << (cobolParser.IS - 112)) | (1 << (cobolParser.JUST - 112)) | (1 << (cobolParser.JUSTIFIED - 112)) | (1 << (cobolParser.LEADING - 112)))) !== 0) || ((((_la - 146)) & ~0x1F) === 0 && ((1 << (_la - 146)) & ((1 << (cobolParser.OCCURS - 146)) | (1 << (cobolParser.PACKED_DECIMAL - 146)) | (1 << (cobolParser.PIC - 146)) | (1 << (cobolParser.PICTURE - 146)) | (1 << (cobolParser.POINTER - 146)) | (1 << (cobolParser.POINTER_64 - 146)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (cobolParser.SIGN - 200)) | (1 << (cobolParser.SYNC - 200)) | (1 << (cobolParser.SYNCHRONIZED - 200)) | (1 << (cobolParser.TRAILING - 200)))) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & ((1 << (cobolParser.USAGE - 232)) | (1 << (cobolParser.VALUE - 232)) | (1 << (cobolParser.VALUES - 232)))) !== 0)) {
				{
				{
				this.state = 2330;
				this.file_data_description_entry();
				this.state = 2334;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2331;
						this.separator();
						}
						}
					}
					this.state = 2336;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
				}
				}
				}
				this.state = 2341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division(): Identification_divisionContext {
		let _localctx: Identification_divisionContext = new Identification_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, cobolParser.RULE_identification_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2342;
			this.match(cobolParser.IDENTIFICATION_IN_A_AREA);
			this.state = 2344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2343;
				this.separator();
				}
				}
				this.state = 2346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2348;
			this.match(cobolParser.DIVISION);
			this.state = 2352;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2349;
				this.separator();
				}
				}
				this.state = 2354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2355;
			this.match(cobolParser.DOT_);
			this.state = 2359;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2356;
					this.separator();
					}
					}
				}
				this.state = 2361;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
			}
			this.state = 2365;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2362;
					this.identification_division_paragraph();
					}
					}
				}
				this.state = 2367;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division_paragraph(): Identification_division_paragraphContext {
		let _localctx: Identification_division_paragraphContext = new Identification_division_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, cobolParser.RULE_identification_division_paragraph);
		try {
			this.state = 2376;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PROGRAM_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2368;
				this.program_id();
				}
				break;
			case cobolParser.AUTHOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2369;
				this.author();
				}
				break;
			case cobolParser.INSTALLATION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2370;
				this.installation();
				}
				break;
			case cobolParser.DATE_WRITTEN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2371;
				this.date_written();
				}
				break;
			case cobolParser.DATE_COMPILED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2372;
				this.date_compiled();
				}
				break;
			case cobolParser.SECURITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2373;
				this.security();
				}
				break;
			case cobolParser.OPTIONS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2374;
				this.options_();
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2375;
				this.separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_id(): Program_idContext {
		let _localctx: Program_idContext = new Program_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, cobolParser.RULE_program_id);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2378;
			this.match(cobolParser.PROGRAM_ID);
			this.state = 2382;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2379;
				this.separator();
				}
				}
				this.state = 2384;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2385;
			this.match(cobolParser.DOT_);
			this.state = 2389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2386;
				this.separator();
				}
				}
				this.state = 2391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2392;
			this.program_name();
			this.state = 2396;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2393;
					this.separator();
					}
					}
				}
				this.state = 2398;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
			}
			this.state = 2400;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COMMON || _la === cobolParser.INITIAL || _la === cobolParser.IS) {
				{
				this.state = 2399;
				this.is_program();
				}
			}

			this.state = 2405;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2402;
					this.separator();
					}
					}
				}
				this.state = 2407;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
			}
			this.state = 2409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IDENT || _la === cobolParser.WITH) {
				{
				this.state = 2408;
				this.with_ident();
				}
			}

			this.state = 2414;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2411;
				this.separator();
				}
				}
				this.state = 2416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2417;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_name(): Program_nameContext {
		let _localctx: Program_nameContext = new Program_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, cobolParser.RULE_program_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2419;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public is_program(): Is_programContext {
		let _localctx: Is_programContext = new Is_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, cobolParser.RULE_is_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2427;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2421;
				this.match(cobolParser.IS);
				this.state = 2423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2422;
					this.separator();
					}
					}
					this.state = 2425;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 2429;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.COMMON || _la === cobolParser.INITIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2437;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 375, this._ctx) ) {
			case 1:
				{
				this.state = 2431;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2430;
					this.separator();
					}
					}
					this.state = 2433;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2435;
				this.match(cobolParser.PROGRAM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_ident(): With_identContext {
		let _localctx: With_identContext = new With_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, cobolParser.RULE_with_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2445;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2439;
				this.match(cobolParser.WITH);
				this.state = 2441;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2440;
					this.separator();
					}
					}
					this.state = 2443;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 2447;
			this.match(cobolParser.IDENT);
			this.state = 2449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2448;
				this.separator();
				}
				}
				this.state = 2451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2453;
			this.ident_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident_string(): Ident_stringContext {
		let _localctx: Ident_stringContext = new Ident_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, cobolParser.RULE_ident_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2455;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_entry(): Comment_entryContext {
		let _localctx: Comment_entryContext = new Comment_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, cobolParser.RULE_comment_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2457;
			this.match(cobolParser.START_FOUR_SPACES);
			this.state = 2461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
				{
				{
				this.state = 2458;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2464;
			this.match(cobolParser.NEWLINE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public author(): AuthorContext {
		let _localctx: AuthorContext = new AuthorContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, cobolParser.RULE_author);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2466;
			this.match(cobolParser.AUTHOR);
			this.state = 2470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2467;
				this.separator();
				}
				}
				this.state = 2472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2473;
			this.match(cobolParser.DOT_);
			this.state = 2477;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
				{
				{
				this.state = 2474;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2480;
			this.match(cobolParser.NEWLINE);
			this.state = 2484;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2481;
					this.comment_entry();
					}
					}
				}
				this.state = 2486;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installation(): InstallationContext {
		let _localctx: InstallationContext = new InstallationContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, cobolParser.RULE_installation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2487;
			this.match(cobolParser.INSTALLATION);
			this.state = 2491;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2488;
				this.separator();
				}
				}
				this.state = 2493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2494;
			this.match(cobolParser.DOT_);
			this.state = 2498;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
				{
				{
				this.state = 2495;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2501;
			this.match(cobolParser.NEWLINE);
			this.state = 2505;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2502;
					this.comment_entry();
					}
					}
				}
				this.state = 2507;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_written(): Date_writtenContext {
		let _localctx: Date_writtenContext = new Date_writtenContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, cobolParser.RULE_date_written);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2508;
			this.match(cobolParser.DATE_WRITTEN);
			this.state = 2512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2509;
				this.separator();
				}
				}
				this.state = 2514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2515;
			this.match(cobolParser.DOT_);
			this.state = 2519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
				{
				{
				this.state = 2516;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2522;
			this.match(cobolParser.NEWLINE);
			this.state = 2526;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2523;
					this.comment_entry();
					}
					}
				}
				this.state = 2528;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_compiled(): Date_compiledContext {
		let _localctx: Date_compiledContext = new Date_compiledContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, cobolParser.RULE_date_compiled);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2529;
			this.match(cobolParser.DATE_COMPILED);
			this.state = 2533;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2530;
				this.separator();
				}
				}
				this.state = 2535;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2536;
			this.match(cobolParser.DOT_);
			this.state = 2540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
				{
				{
				this.state = 2537;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2542;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2543;
			this.match(cobolParser.NEWLINE);
			this.state = 2547;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2544;
					this.comment_entry();
					}
					}
				}
				this.state = 2549;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security(): SecurityContext {
		let _localctx: SecurityContext = new SecurityContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, cobolParser.RULE_security);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2550;
			this.match(cobolParser.SECURITY);
			this.state = 2554;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2551;
				this.separator();
				}
				}
				this.state = 2556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2557;
			this.match(cobolParser.DOT_);
			this.state = 2561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK) | (1 << cobolParser.BLOCK) | (1 << cobolParser.BOTTOM) | (1 << cobolParser.BY) | (1 << cobolParser.C01) | (1 << cobolParser.CARD_READER) | (1 << cobolParser.CF) | (1 << cobolParser.CH))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)) | (1 << (cobolParser.COMP_3 - 32)) | (1 << (cobolParser.COMP_4 - 32)) | (1 << (cobolParser.COMP_5 - 32)) | (1 << (cobolParser.COMP_X - 32)) | (1 << (cobolParser.CONFIGURATION - 32)) | (1 << (cobolParser.CONSOLE - 32)) | (1 << (cobolParser.CONTAINS - 32)) | (1 << (cobolParser.CONTIGUOUS - 32)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 32)) | (1 << (cobolParser.CONTROL - 32)) | (1 << (cobolParser.CONTROLS - 32)) | (1 << (cobolParser.CRT - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)) | (1 << (cobolParser.DISK - 64)) | (1 << (cobolParser.DISPLAY - 64)) | (1 << (cobolParser.DIVISION - 64)) | (1 << (cobolParser.DUPLICATES - 64)) | (1 << (cobolParser.DYNAMIC - 64)) | (1 << (cobolParser.EBCDIC - 64)) | (1 << (cobolParser.END - 64)) | (1 << (cobolParser.ENVIRONMENT - 64)) | (1 << (cobolParser.ENVIRONMENT_NAME - 64)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 64)) | (1 << (cobolParser.EVERY - 64)) | (1 << (cobolParser.EXCLUSIVE - 64)) | (1 << (cobolParser.EXTENSION - 64)) | (1 << (cobolParser.EXTERNAL - 64)) | (1 << (cobolParser.FD - 64)) | (1 << (cobolParser.FILE - 64)) | (1 << (cobolParser.FILE_CONTROL - 64)) | (1 << (cobolParser.FILLER - 64)) | (1 << (cobolParser.FILL_SIZE - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.FINAL - 96)) | (1 << (cobolParser.FIRST - 96)) | (1 << (cobolParser.FLOAT_EXTENDED - 96)) | (1 << (cobolParser.FLOAT_LONG - 96)) | (1 << (cobolParser.FLOAT_SHORT - 96)) | (1 << (cobolParser.FOOTING - 96)) | (1 << (cobolParser.FOR - 96)) | (1 << (cobolParser.FROM - 96)) | (1 << (cobolParser.GLOBAL - 96)) | (1 << (cobolParser.GROUP - 96)) | (1 << (cobolParser.HEADING - 96)) | (1 << (cobolParser.I64 - 96)) | (1 << (cobolParser.ID - 96)) | (1 << (cobolParser.IDENT - 96)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 96)) | (1 << (cobolParser.IN - 96)) | (1 << (cobolParser.INDEX - 96)) | (1 << (cobolParser.INDEXED - 96)) | (1 << (cobolParser.INDICATE - 96)) | (1 << (cobolParser.INITIAL - 96)) | (1 << (cobolParser.INPUT_OUTPUT - 96)) | (1 << (cobolParser.INSTALLATION - 96)) | (1 << (cobolParser.IS - 96)) | (1 << (cobolParser.I_O_CONTROL - 96)) | (1 << (cobolParser.JUST - 96)) | (1 << (cobolParser.JUSTIFIED - 96)) | (1 << (cobolParser.KEY - 96)) | (1 << (cobolParser.LABEL - 96)) | (1 << (cobolParser.LAST - 96)) | (1 << (cobolParser.LEADING - 96)) | (1 << (cobolParser.LEFT - 96)) | (1 << (cobolParser.LIMIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.LIMITS - 128)) | (1 << (cobolParser.LINAGE - 128)) | (1 << (cobolParser.LINE - 128)) | (1 << (cobolParser.LINES - 128)) | (1 << (cobolParser.LINE_PRINTER - 128)) | (1 << (cobolParser.LINKAGE - 128)) | (1 << (cobolParser.LOCK - 128)) | (1 << (cobolParser.LOCK_HOLDING - 128)) | (1 << (cobolParser.MANUAL - 128)) | (1 << (cobolParser.MASS_INSERT - 128)) | (1 << (cobolParser.MEMORY - 128)) | (1 << (cobolParser.MODE - 128)) | (1 << (cobolParser.MODULES - 128)) | (1 << (cobolParser.MULTIPLE - 128)) | (1 << (cobolParser.NATIVE - 128)) | (1 << (cobolParser.NEXT - 128)) | (1 << (cobolParser.NUMBER - 128)) | (1 << (cobolParser.OBJECT_COMPUTER - 128)) | (1 << (cobolParser.OCCURS - 128)) | (1 << (cobolParser.OF - 128)) | (1 << (cobolParser.OFF - 128)) | (1 << (cobolParser.OMITTED - 128)) | (1 << (cobolParser.ON - 128)) | (1 << (cobolParser.OPTIONAL - 128)) | (1 << (cobolParser.OPTIONS - 128)) | (1 << (cobolParser.ORGANIZATION - 128)) | (1 << (cobolParser.PACKED_DECIMAL - 128)) | (1 << (cobolParser.PADDING - 128)) | (1 << (cobolParser.PAGE - 128)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 128)) | (1 << (cobolParser.PAPER_TAPE_READER - 128)) | (1 << (cobolParser.PF - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.PH - 160)) | (1 << (cobolParser.PIC - 160)) | (1 << (cobolParser.PICTURE - 160)) | (1 << (cobolParser.PLUS - 160)) | (1 << (cobolParser.POINTER - 160)) | (1 << (cobolParser.POINTER_64 - 160)) | (1 << (cobolParser.POSITION - 160)) | (1 << (cobolParser.PREALLOCATION - 160)) | (1 << (cobolParser.PRINTER - 160)) | (1 << (cobolParser.PRINT_CONTROL - 160)) | (1 << (cobolParser.PROGRAM - 160)) | (1 << (cobolParser.PROGRAM_ID - 160)) | (1 << (cobolParser.RANDOM - 160)) | (1 << (cobolParser.RD - 160)) | (1 << (cobolParser.RECORD - 160)) | (1 << (cobolParser.RECORDS - 160)) | (1 << (cobolParser.REDEFINES - 160)) | (1 << (cobolParser.REEL - 160)) | (1 << (cobolParser.REFERENCE - 160)) | (1 << (cobolParser.RELATIVE - 160)) | (1 << (cobolParser.RENAMES - 160)) | (1 << (cobolParser.REPORT - 160)) | (1 << (cobolParser.REPORTS - 160)) | (1 << (cobolParser.RERUN - 160)) | (1 << (cobolParser.RESERVE - 160)) | (1 << (cobolParser.RESET - 160)) | (1 << (cobolParser.RF - 160)) | (1 << (cobolParser.RH - 160)) | (1 << (cobolParser.RIGHT - 160)) | (1 << (cobolParser.ROLLBACK - 160)) | (1 << (cobolParser.SAME - 160)) | (1 << (cobolParser.SCREEN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.SD - 192)) | (1 << (cobolParser.SECTION - 192)) | (1 << (cobolParser.SECURITY - 192)) | (1 << (cobolParser.SEGMENT_LIMIT - 192)) | (1 << (cobolParser.SELECT - 192)) | (1 << (cobolParser.SEPARATE - 192)) | (1 << (cobolParser.SEQUENCE - 192)) | (1 << (cobolParser.SEQUENTIAL - 192)) | (1 << (cobolParser.SIGN - 192)) | (1 << (cobolParser.SIGNED - 192)) | (1 << (cobolParser.SIZE - 192)) | (1 << (cobolParser.SORT - 192)) | (1 << (cobolParser.SORT_MERGE - 192)) | (1 << (cobolParser.SOURCE - 192)) | (1 << (cobolParser.SOURCE_COMPUTER - 192)) | (1 << (cobolParser.SPECIAL_NAMES - 192)) | (1 << (cobolParser.STANDARD - 192)) | (1 << (cobolParser.STANDARD_1 - 192)) | (1 << (cobolParser.STANDARD_2 - 192)) | (1 << (cobolParser.STATUS - 192)) | (1 << (cobolParser.SUM - 192)) | (1 << (cobolParser.SWITCH - 192)) | (1 << (cobolParser.SYMBOL - 192)) | (1 << (cobolParser.SYMBOLIC - 192)) | (1 << (cobolParser.SYNC - 192)) | (1 << (cobolParser.SYNCHRONIZED - 192)) | (1 << (cobolParser.SYSERR - 192)) | (1 << (cobolParser.SYSIN - 192)) | (1 << (cobolParser.SYSOUT - 192)) | (1 << (cobolParser.TAPE - 192)) | (1 << (cobolParser.THROUGH - 192)) | (1 << (cobolParser.THRU - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.TIMES - 224)) | (1 << (cobolParser.TO - 224)) | (1 << (cobolParser.TOP - 224)) | (1 << (cobolParser.TRAILING - 224)) | (1 << (cobolParser.TYPE - 224)) | (1 << (cobolParser.UNIT - 224)) | (1 << (cobolParser.UNSIGNED - 224)) | (1 << (cobolParser.UPON - 224)) | (1 << (cobolParser.USAGE - 224)) | (1 << (cobolParser.VALUE - 224)) | (1 << (cobolParser.VALUES - 224)) | (1 << (cobolParser.VARYING - 224)) | (1 << (cobolParser.VAX - 224)) | (1 << (cobolParser.WHEN - 224)) | (1 << (cobolParser.WINDOW - 224)) | (1 << (cobolParser.WITH - 224)) | (1 << (cobolParser.WORDS - 224)) | (1 << (cobolParser.WORKING_STORAGE - 224)) | (1 << (cobolParser.ZERO - 224)) | (1 << (cobolParser.START_SLASH_ - 224)) | (1 << (cobolParser.START_STAR_ - 224)) | (1 << (cobolParser.EXCLAM_ - 224)) | (1 << (cobolParser.UNDER_ - 224)) | (1 << (cobolParser.PLUS_ - 224)) | (1 << (cobolParser.MINUS_ - 224)) | (1 << (cobolParser.STAR_ - 224)) | (1 << (cobolParser.SLASH_ - 224)) | (1 << (cobolParser.COMMA_ - 224)) | (1 << (cobolParser.SEMI_ - 224)) | (1 << (cobolParser.COLON_ - 224)) | (1 << (cobolParser.EQUAL_ - 224)) | (1 << (cobolParser.LT_ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.LE_ - 256)) | (1 << (cobolParser.GE_ - 256)) | (1 << (cobolParser.GT_ - 256)) | (1 << (cobolParser.LPAREN_ - 256)) | (1 << (cobolParser.RPAREN_ - 256)) | (1 << (cobolParser.LBRACK_ - 256)) | (1 << (cobolParser.RBRACK_ - 256)) | (1 << (cobolParser.POINTER_ - 256)) | (1 << (cobolParser.ATP_ - 256)) | (1 << (cobolParser.DOT_ - 256)) | (1 << (cobolParser.DOTDOT_ - 256)) | (1 << (cobolParser.LCURLY_ - 256)) | (1 << (cobolParser.RCURLY_ - 256)) | (1 << (cobolParser.STRING_LITERAL - 256)) | (1 << (cobolParser.NUMERIC_LITERAL - 256)) | (1 << (cobolParser.HEX_LITERAL - 256)) | (1 << (cobolParser.USER_DEFINED_WORD - 256)) | (1 << (cobolParser.START_FOUR_SPACES - 256)) | (1 << (cobolParser.WHITESPACE - 256)))) !== 0)) {
				{
				{
				this.state = 2558;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2564;
			this.match(cobolParser.NEWLINE);
			this.state = 2568;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2565;
					this.comment_entry();
					}
					}
				}
				this.state = 2570;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public options_(): Options_Context {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 184, cobolParser.RULE_options_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2571;
			this.match(cobolParser.OPTIONS);
			this.state = 2575;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2572;
				this.separator();
				}
				}
				this.state = 2577;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2578;
			this.match(cobolParser.DOT_);
			this.state = 2582;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2579;
					this.separator();
					}
					}
				}
				this.state = 2584;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
			}
			this.state = 2586;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARITHMETIC) {
				{
				this.state = 2585;
				this.arithmetic();
				}
			}

			this.state = 2591;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2588;
					this.separator();
					}
					}
				}
				this.state = 2593;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
			}
			this.state = 2595;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DOT_) {
				{
				this.state = 2594;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic(): ArithmeticContext {
		let _localctx: ArithmeticContext = new ArithmeticContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, cobolParser.RULE_arithmetic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2597;
			this.match(cobolParser.ARITHMETIC);
			this.state = 2599;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2598;
				this.separator();
				}
				}
				this.state = 2601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2609;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2603;
				this.match(cobolParser.IS);
				this.state = 2605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2604;
					this.separator();
					}
					}
					this.state = 2607;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 2611;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NATIVE || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2615;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2612;
				this.separator();
				}
				}
				this.state = 2617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2618;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environment_division(): Environment_divisionContext {
		let _localctx: Environment_divisionContext = new Environment_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, cobolParser.RULE_environment_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2620;
			this.match(cobolParser.ENVIRONMENT);
			this.state = 2622;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2621;
				this.separator();
				}
				}
				this.state = 2624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2626;
			this.match(cobolParser.DIVISION);
			this.state = 2630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2627;
				this.separator();
				}
				}
				this.state = 2632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2633;
			this.match(cobolParser.DOT_);
			this.state = 2637;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2634;
					this.separator();
					}
					}
				}
				this.state = 2639;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
			}
			this.state = 2641;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONFIGURATION) {
				{
				this.state = 2640;
				this.configuration_section();
				}
			}

			this.state = 2644;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INPUT_OUTPUT) {
				{
				this.state = 2643;
				this.input_output_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configuration_section(): Configuration_sectionContext {
		let _localctx: Configuration_sectionContext = new Configuration_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, cobolParser.RULE_configuration_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2646;
			this.match(cobolParser.CONFIGURATION);
			this.state = 2648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2647;
				this.separator();
				}
				}
				this.state = 2650;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2652;
			this.match(cobolParser.SECTION);
			this.state = 2656;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2653;
				this.separator();
				}
				}
				this.state = 2658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2659;
			this.match(cobolParser.DOT_);
			this.state = 2663;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2660;
					this.separator();
					}
					}
				}
				this.state = 2665;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
			}
			this.state = 2667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SOURCE_COMPUTER) {
				{
				this.state = 2666;
				this.source_computer();
				}
			}

			this.state = 2672;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2669;
					this.separator();
					}
					}
				}
				this.state = 2674;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
			}
			this.state = 2676;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OBJECT_COMPUTER) {
				{
				this.state = 2675;
				this.object_computer();
				}
			}

			this.state = 2681;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2678;
					this.separator();
					}
					}
				}
				this.state = 2683;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
			}
			this.state = 2685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SPECIAL_NAMES) {
				{
				this.state = 2684;
				this.special_names();
				}
			}

			this.state = 2690;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2687;
					this.separator();
					}
					}
				}
				this.state = 2692;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_output_section(): Input_output_sectionContext {
		let _localctx: Input_output_sectionContext = new Input_output_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, cobolParser.RULE_input_output_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2693;
			this.match(cobolParser.INPUT_OUTPUT);
			this.state = 2695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2694;
				this.separator();
				}
				}
				this.state = 2697;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2699;
			this.match(cobolParser.SECTION);
			this.state = 2703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2700;
				this.separator();
				}
				}
				this.state = 2705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2706;
			this.match(cobolParser.DOT_);
			this.state = 2710;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2707;
					this.separator();
					}
					}
				}
				this.state = 2712;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
			}
			this.state = 2714;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE_CONTROL) {
				{
				this.state = 2713;
				this.file_control();
				}
			}

			this.state = 2717;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.I_O_CONTROL) {
				{
				this.state = 2716;
				this.i_o_control();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_computer(): Source_computerContext {
		let _localctx: Source_computerContext = new Source_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, cobolParser.RULE_source_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2719;
			this.match(cobolParser.SOURCE_COMPUTER);
			this.state = 2723;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2720;
				this.separator();
				}
				}
				this.state = 2725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2726;
			this.match(cobolParser.DOT_);
			this.state = 2730;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2727;
					this.separator();
					}
					}
				}
				this.state = 2732;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
			}
			this.state = 2751;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 2733;
				this.computer_type();
				this.state = 2741;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
				case 1:
					{
					this.state = 2735;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2734;
						this.separator();
						}
						}
						this.state = 2737;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2739;
					this.with_debugging();
					}
					break;
				}
				this.state = 2746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 2743;
					this.separator();
					}
					}
					this.state = 2748;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2749;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computer_type(): Computer_typeContext {
		let _localctx: Computer_typeContext = new Computer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, cobolParser.RULE_computer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2753;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_debugging(): With_debuggingContext {
		let _localctx: With_debuggingContext = new With_debuggingContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, cobolParser.RULE_with_debugging);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2755;
				this.match(cobolParser.WITH);
				this.state = 2757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2756;
					this.separator();
					}
					}
					this.state = 2759;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 2763;
			this.match(cobolParser.DEBUGGING);
			this.state = 2765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2764;
				this.separator();
				}
				}
				this.state = 2767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2769;
			this.match(cobolParser.MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_computer(): Object_computerContext {
		let _localctx: Object_computerContext = new Object_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, cobolParser.RULE_object_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2771;
			this.match(cobolParser.OBJECT_COMPUTER);
			this.state = 2775;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2772;
				this.separator();
				}
				}
				this.state = 2777;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2778;
			this.match(cobolParser.DOT_);
			this.state = 2782;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2779;
					this.separator();
					}
					}
				}
				this.state = 2784;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
			}
			this.state = 2821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 2785;
				this.computer_type();
				this.state = 2793;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 435, this._ctx) ) {
				case 1:
					{
					this.state = 2787;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2786;
						this.separator();
						}
						}
						this.state = 2789;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2791;
					this.memory_size();
					}
					break;
				}
				this.state = 2802;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 437, this._ctx) ) {
				case 1:
					{
					this.state = 2796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2795;
						this.separator();
						}
						}
						this.state = 2798;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2800;
					this.program_collating();
					}
					break;
				}
				this.state = 2811;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 439, this._ctx) ) {
				case 1:
					{
					this.state = 2805;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2804;
						this.separator();
						}
						}
						this.state = 2807;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 2809;
					this.segment_limit();
					}
					break;
				}
				this.state = 2816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 2813;
					this.separator();
					}
					}
					this.state = 2818;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2819;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size(): Memory_sizeContext {
		let _localctx: Memory_sizeContext = new Memory_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, cobolParser.RULE_memory_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2823;
			this.match(cobolParser.MEMORY);
			this.state = 2831;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
			case 1:
				{
				this.state = 2825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2824;
					this.separator();
					}
					}
					this.state = 2827;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2829;
				this.match(cobolParser.SIZE);
				}
				break;
			}
			this.state = 2834;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2833;
				this.separator();
				}
				}
				this.state = 2836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2838;
			this.memory_size_amount();
			this.state = 2840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2839;
				this.separator();
				}
				}
				this.state = 2842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2844;
			this.memory_size_unit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_amount(): Memory_size_amountContext {
		let _localctx: Memory_size_amountContext = new Memory_size_amountContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, cobolParser.RULE_memory_size_amount);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2846;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_unit(): Memory_size_unitContext {
		let _localctx: Memory_size_unitContext = new Memory_size_unitContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, cobolParser.RULE_memory_size_unit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2848;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.MODULES || _la === cobolParser.WORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_collating(): Program_collatingContext {
		let _localctx: Program_collatingContext = new Program_collatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, cobolParser.RULE_program_collating);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2856;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 2850;
				this.match(cobolParser.PROGRAM);
				this.state = 2852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2851;
					this.separator();
					}
					}
					this.state = 2854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 2864;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING) {
				{
				this.state = 2858;
				this.match(cobolParser.COLLATING);
				this.state = 2860;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2859;
					this.separator();
					}
					}
					this.state = 2862;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 2866;
			this.match(cobolParser.SEQUENCE);
			this.state = 2874;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 451, this._ctx) ) {
			case 1:
				{
				this.state = 2868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2867;
					this.separator();
					}
					}
					this.state = 2870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2872;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 2877;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2876;
				this.separator();
				}
				}
				this.state = 2879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 2881;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_name(): Alpha_nameContext {
		let _localctx: Alpha_nameContext = new Alpha_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, cobolParser.RULE_alpha_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2883;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_limit(): Segment_limitContext {
		let _localctx: Segment_limitContext = new Segment_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, cobolParser.RULE_segment_limit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2885;
			this.match(cobolParser.SEGMENT_LIMIT);
			this.state = 2893;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				this.state = 2887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2886;
					this.separator();
					}
					}
					this.state = 2889;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2891;
				this.match(cobolParser.IS);
				}
			}

			this.state = 2895;
			this.segment_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_number(): Segment_numberContext {
		let _localctx: Segment_numberContext = new Segment_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, cobolParser.RULE_segment_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2897;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names(): Special_namesContext {
		let _localctx: Special_namesContext = new Special_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, cobolParser.RULE_special_names);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2899;
			this.match(cobolParser.SPECIAL_NAMES);
			this.state = 2903;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 2900;
				this.separator();
				}
				}
				this.state = 2905;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2906;
			this.match(cobolParser.DOT_);
			this.state = 2910;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2907;
					this.separator();
					}
					}
				}
				this.state = 2912;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
			}
			this.state = 2926;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 3)) & ~0x1F) === 0 && ((1 << (_la - 3)) & ((1 << (cobolParser.ALPHABET - 3)) | (1 << (cobolParser.ARGUMENT_NUMBER - 3)) | (1 << (cobolParser.ARGUMENT_VALUE - 3)) | (1 << (cobolParser.C01 - 3)) | (1 << (cobolParser.CARD_READER - 3)) | (1 << (cobolParser.CLASS - 3)))) !== 0) || ((((_la - 57)) & ~0x1F) === 0 && ((1 << (_la - 57)) & ((1 << (cobolParser.CONSOLE - 57)) | (1 << (cobolParser.CRT - 57)) | (1 << (cobolParser.CURRENCY - 57)) | (1 << (cobolParser.CURSOR - 57)) | (1 << (cobolParser.DECIMAL_POINT - 57)) | (1 << (cobolParser.ENVIRONMENT_NAME - 57)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 57)))) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & ((1 << (cobolParser.LINE_PRINTER - 132)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 132)) | (1 << (cobolParser.PAPER_TAPE_READER - 132)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (cobolParser.SWITCH - 213)) | (1 << (cobolParser.SYMBOLIC - 213)) | (1 << (cobolParser.SYSERR - 213)) | (1 << (cobolParser.SYSIN - 213)) | (1 << (cobolParser.SYSOUT - 213)))) !== 0)) {
				{
				this.state = 2920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2913;
					this.special_names_content();
					this.state = 2917;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						{
						this.state = 2914;
						this.separator();
						}
						}
						this.state = 2919;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 2922;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 3)) & ~0x1F) === 0 && ((1 << (_la - 3)) & ((1 << (cobolParser.ALPHABET - 3)) | (1 << (cobolParser.ARGUMENT_NUMBER - 3)) | (1 << (cobolParser.ARGUMENT_VALUE - 3)) | (1 << (cobolParser.C01 - 3)) | (1 << (cobolParser.CARD_READER - 3)) | (1 << (cobolParser.CLASS - 3)))) !== 0) || ((((_la - 57)) & ~0x1F) === 0 && ((1 << (_la - 57)) & ((1 << (cobolParser.CONSOLE - 57)) | (1 << (cobolParser.CRT - 57)) | (1 << (cobolParser.CURRENCY - 57)) | (1 << (cobolParser.CURSOR - 57)) | (1 << (cobolParser.DECIMAL_POINT - 57)) | (1 << (cobolParser.ENVIRONMENT_NAME - 57)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 57)))) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & ((1 << (cobolParser.LINE_PRINTER - 132)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 132)) | (1 << (cobolParser.PAPER_TAPE_READER - 132)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (cobolParser.SWITCH - 213)) | (1 << (cobolParser.SYMBOLIC - 213)) | (1 << (cobolParser.SYSERR - 213)) | (1 << (cobolParser.SYSIN - 213)) | (1 << (cobolParser.SYSOUT - 213)))) !== 0));
				this.state = 2924;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names_content(): Special_names_contentContext {
		let _localctx: Special_names_contentContext = new Special_names_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, cobolParser.RULE_special_names_content);
		let _la: number;
		try {
			this.state = 3035;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CARD_READER:
			case cobolParser.CONSOLE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2928;
				this.predefined_device();
				this.state = 2930;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2929;
					this.separator();
					}
					}
					this.state = 2932;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2934;
					this.match(cobolParser.IS);
					this.state = 2936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2935;
						this.separator();
						}
						}
						this.state = 2938;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 2942;
				this.device_name();
				}
				break;
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2944;
				this.arg_env();
				this.state = 2946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2945;
					this.separator();
					}
					}
					this.state = 2948;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2950;
					this.match(cobolParser.IS);
					this.state = 2952;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2951;
						this.separator();
						}
						}
						this.state = 2954;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 2958;
				this.arg_env_name();
				}
				break;
			case cobolParser.C01:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2960;
				this.match(cobolParser.C01);
				this.state = 2962;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2961;
					this.separator();
					}
					}
					this.state = 2964;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2966;
					this.match(cobolParser.IS);
					this.state = 2968;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2967;
						this.separator();
						}
						}
						this.state = 2970;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 2974;
				this.top_of_page_name();
				}
				break;
			case cobolParser.SWITCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2976;
				this.switch_();
				}
				break;
			case cobolParser.ALPHABET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2977;
				this.alphabet();
				}
				break;
			case cobolParser.SYMBOLIC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2978;
				this.symbolic_chars();
				}
				break;
			case cobolParser.CLASS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2979;
				this.class_();
				}
				break;
			case cobolParser.CURRENCY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2980;
				this.currency();
				}
				break;
			case cobolParser.DECIMAL_POINT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2981;
				this.match(cobolParser.DECIMAL_POINT);
				this.state = 2983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2982;
					this.separator();
					}
					}
					this.state = 2985;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 2993;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2987;
					this.match(cobolParser.IS);
					this.state = 2989;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2988;
						this.separator();
						}
						}
						this.state = 2991;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 2995;
				this.match(cobolParser.COMMA);
				}
				break;
			case cobolParser.CURSOR:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2997;
				this.match(cobolParser.CURSOR);
				this.state = 2999;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2998;
					this.separator();
					}
					}
					this.state = 3001;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3003;
					this.match(cobolParser.IS);
					this.state = 3005;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3004;
						this.separator();
						}
						}
						this.state = 3007;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3011;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CRT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3013;
				this.match(cobolParser.CRT);
				this.state = 3015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3014;
					this.separator();
					}
					}
					this.state = 3017;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3019;
				this.match(cobolParser.STATUS);
				this.state = 3021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3020;
					this.separator();
					}
					}
					this.state = 3023;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3025;
					this.match(cobolParser.IS);
					this.state = 3027;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3026;
						this.separator();
						}
						}
						this.state = 3029;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3033;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_data_item(): Qualified_data_itemContext {
		let _localctx: Qualified_data_itemContext = new Qualified_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, cobolParser.RULE_qualified_data_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3037;
			this.match(cobolParser.USER_DEFINED_WORD);
			this.state = 3052;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IN || _la === cobolParser.OF) {
				{
				{
				this.state = 3038;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.IN || _la === cobolParser.OF)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3039;
					this.separator();
					}
					}
					this.state = 3042;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3044;
				this.match(cobolParser.USER_DEFINED_WORD);
				this.state = 3046;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3045;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3048;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 481, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				}
				this.state = 3054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency(): CurrencyContext {
		let _localctx: CurrencyContext = new CurrencyContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, cobolParser.RULE_currency);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3055;
			this.match(cobolParser.CURRENCY);
			this.state = 3057;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3056;
				this.separator();
				}
				}
				this.state = 3059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3067;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 3061;
				this.match(cobolParser.SIGN);
				this.state = 3063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3062;
					this.separator();
					}
					}
					this.state = 3065;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3069;
				this.match(cobolParser.IS);
				this.state = 3071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3070;
					this.separator();
					}
					}
					this.state = 3073;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3077;
			this.currency_def();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency_def(): Currency_defContext {
		let _localctx: Currency_defContext = new Currency_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, cobolParser.RULE_currency_def);
		let _la: number;
		try {
			this.state = 3103;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 492, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3079;
				this.literal_7();
				this.state = 3086;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3080;
					this.match(cobolParser.WITH);
					this.state = 3082;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3081;
						this.separator();
						}
						}
						this.state = 3084;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3088;
				this.match(cobolParser.PICTURE);
				this.state = 3090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3089;
					this.separator();
					}
					}
					this.state = 3092;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3094;
				this.match(cobolParser.SYMBOL);
				this.state = 3096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3095;
					this.separator();
					}
					}
					this.state = 3098;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3100;
				this.literal_8();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3102;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_7(): Literal_7Context {
		let _localctx: Literal_7Context = new Literal_7Context(this._ctx, this.state);
		this.enterRule(_localctx, 226, cobolParser.RULE_literal_7);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3105;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_8(): Literal_8Context {
		let _localctx: Literal_8Context = new Literal_8Context(this._ctx, this.state);
		this.enterRule(_localctx, 228, cobolParser.RULE_literal_8);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3107;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_(): Class_Context {
		let _localctx: Class_Context = new Class_Context(this._ctx, this.state);
		this.enterRule(_localctx, 230, cobolParser.RULE_class_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3109;
			this.match(cobolParser.CLASS);
			this.state = 3111;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3110;
				this.separator();
				}
				}
				this.state = 3113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3115;
			this.class_name();
			this.state = 3117;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3116;
				this.separator();
				}
				}
				this.state = 3119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3121;
				this.match(cobolParser.IS);
				this.state = 3123;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3122;
					this.separator();
					}
					}
					this.state = 3125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3136;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3129;
				this.user_class();
				this.state = 3133;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3130;
						this.separator();
						}
						}
					}
					this.state = 3135;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
				}
				}
				}
				this.state = 3138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_name(): Class_nameContext {
		let _localctx: Class_nameContext = new Class_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, cobolParser.RULE_class_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3140;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_class(): User_classContext {
		let _localctx: User_classContext = new User_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, cobolParser.RULE_user_class);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3142;
			this.first_literal();
			this.state = 3156;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 501, this._ctx) ) {
			case 1:
				{
				this.state = 3144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3143;
					this.separator();
					}
					}
					this.state = 3146;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3148;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3149;
					this.separator();
					}
					}
					this.state = 3152;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3154;
				this.last_literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolic_chars(): Symbolic_charsContext {
		let _localctx: Symbolic_charsContext = new Symbolic_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, cobolParser.RULE_symbolic_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3158;
			this.match(cobolParser.SYMBOLIC);
			this.state = 3160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3159;
				this.separator();
				}
				}
				this.state = 3162;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3170;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTERS) {
				{
				this.state = 3164;
				this.match(cobolParser.CHARACTERS);
				this.state = 3166;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3165;
					this.separator();
					}
					}
					this.state = 3168;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3173;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3172;
				this.symb_ch_definition();
				}
				}
				this.state = 3175;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_definition(): Symb_ch_definitionContext {
		let _localctx: Symb_ch_definitionContext = new Symb_ch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, cobolParser.RULE_symb_ch_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3178;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3177;
					this.symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3180;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 506, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 3182;
				this.symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_clause(): Symb_ch_def_clauseContext {
		let _localctx: Symb_ch_def_clauseContext = new Symb_ch_def_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, cobolParser.RULE_symb_ch_def_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3185;
				this.symbol_char();
				this.state = 3187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3186;
					this.separator();
					}
					}
					this.state = 3189;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				}
				this.state = 3193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 3201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARE || _la === cobolParser.IS) {
				{
				this.state = 3195;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ARE || _la === cobolParser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3197;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3196;
					this.separator();
					}
					}
					this.state = 3199;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3209;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3203;
				this.char_val();
				this.state = 3205;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3204;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3207;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				}
				this.state = 3211;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext {
		let _localctx: Symb_ch_def_in_alphabetContext = new Symb_ch_def_in_alphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, cobolParser.RULE_symb_ch_def_in_alphabet);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3213;
			this.match(cobolParser.IN);
			this.state = 3215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3214;
				this.separator();
				}
				}
				this.state = 3217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3219;
			this.alpha_name();
			this.state = 3223;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3220;
					this.separator();
					}
					}
				}
				this.state = 3225;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbol_char(): Symbol_charContext {
		let _localctx: Symbol_charContext = new Symbol_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, cobolParser.RULE_symbol_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3226;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_val(): Char_valContext {
		let _localctx: Char_valContext = new Char_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, cobolParser.RULE_char_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3228;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabet(): AlphabetContext {
		let _localctx: AlphabetContext = new AlphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, cobolParser.RULE_alphabet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3230;
			this.match(cobolParser.ALPHABET);
			this.state = 3232;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3231;
				this.separator();
				}
				}
				this.state = 3234;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3236;
			this.alpha_name();
			this.state = 3238;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3237;
				this.separator();
				}
				}
				this.state = 3240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3242;
				this.match(cobolParser.IS);
				this.state = 3244;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3243;
					this.separator();
					}
					}
					this.state = 3246;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3250;
			this.alpha_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_value(): Alpha_valueContext {
		let _localctx: Alpha_valueContext = new Alpha_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, cobolParser.RULE_alpha_value);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3268;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ASCII:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3252;
				this.match(cobolParser.ASCII);
				}
				break;
			case cobolParser.STANDARD_1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3253;
				this.match(cobolParser.STANDARD_1);
				}
				break;
			case cobolParser.STANDARD_2:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3254;
				this.match(cobolParser.STANDARD_2);
				}
				break;
			case cobolParser.NATIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3255;
				this.match(cobolParser.NATIVE);
				}
				break;
			case cobolParser.EBCDIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3256;
				this.match(cobolParser.EBCDIC);
				}
				break;
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3257;
					this.user_alpha();
					this.state = 3261;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3258;
							this.separator();
							}
							}
						}
						this.state = 3263;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
					}
					}
					}
					this.state = 3266;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_alpha(): User_alphaContext {
		let _localctx: User_alphaContext = new User_alphaContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, cobolParser.RULE_user_alpha);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3304;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 529, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3270;
				this.first_literal();
				this.state = 3284;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 525, this._ctx) ) {
				case 1:
					{
					this.state = 3272;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3271;
						this.separator();
						}
						}
						this.state = 3274;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 3276;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3277;
						this.separator();
						}
						}
						this.state = 3280;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 3282;
					this.last_literal();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3286;
				this.first_literal();
				this.state = 3300;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3288;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3287;
							this.separator();
							}
							}
							this.state = 3290;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 3292;
						this.match(cobolParser.ALSO);
						this.state = 3294;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3293;
							this.separator();
							}
							}
							this.state = 3296;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 3298;
						this.same_literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3302;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_literal(): First_literalContext {
		let _localctx: First_literalContext = new First_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, cobolParser.RULE_first_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3306;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_literal(): Last_literalContext {
		let _localctx: Last_literalContext = new Last_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, cobolParser.RULE_last_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3308;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_literal(): Same_literalContext {
		let _localctx: Same_literalContext = new Same_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, cobolParser.RULE_same_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3310;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_(): Switch_Context {
		let _localctx: Switch_Context = new Switch_Context(this._ctx, this.state);
		this.enterRule(_localctx, 260, cobolParser.RULE_switch_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3312;
			this.match(cobolParser.SWITCH);
			this.state = 3314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3313;
				this.separator();
				}
				}
				this.state = 3316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3318;
			this.switch_num();
			this.state = 3322;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3319;
					this.separator();
					}
					}
				}
				this.state = 3324;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
			}
			this.state = 3337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				{
				this.state = 3325;
				this.match(cobolParser.IS);
				this.state = 3327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3326;
					this.separator();
					}
					}
					this.state = 3329;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				this.state = 3331;
				this.switch_name();
				this.state = 3333;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3332;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3335;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 533, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 3359;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
				{
				this.state = 3339;
				this.switch_clause_on();
				this.state = 3347;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 536, this._ctx) ) {
				case 1:
					{
					this.state = 3341;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3340;
						this.separator();
						}
						}
						this.state = 3343;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 3345;
					this.switch_clause_off();
					}
					break;
				}
				}
				break;
			case cobolParser.OFF:
				{
				this.state = 3349;
				this.switch_clause_off();
				this.state = 3357;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 538, this._ctx) ) {
				case 1:
					{
					this.state = 3351;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3350;
						this.separator();
						}
						}
						this.state = 3353;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 3355;
					this.switch_clause_on();
					}
					break;
				}
				}
				break;
			case cobolParser.ALPHABET:
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.C01:
			case cobolParser.CARD_READER:
			case cobolParser.CLASS:
			case cobolParser.CONSOLE:
			case cobolParser.CRT:
			case cobolParser.CURRENCY:
			case cobolParser.CURSOR:
			case cobolParser.DECIMAL_POINT:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SWITCH:
			case cobolParser.SYMBOLIC:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.DOT_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				break;
			default:
				break;
			}
			this.state = 3364;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3361;
					this.separator();
					}
					}
				}
				this.state = 3366;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_on(): Switch_clause_onContext {
		let _localctx: Switch_clause_onContext = new Switch_clause_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, cobolParser.RULE_switch_clause_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3367;
			this.match(cobolParser.ON);
			this.state = 3369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3368;
				this.separator();
				}
				}
				this.state = 3371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 3373;
				this.match(cobolParser.STATUS);
				this.state = 3375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3374;
					this.separator();
					}
					}
					this.state = 3377;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3387;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3381;
				this.match(cobolParser.IS);
				this.state = 3383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3382;
					this.separator();
					}
					}
					this.state = 3385;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3389;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_off(): Switch_clause_offContext {
		let _localctx: Switch_clause_offContext = new Switch_clause_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, cobolParser.RULE_switch_clause_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3391;
			this.match(cobolParser.OFF);
			this.state = 3393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3392;
				this.separator();
				}
				}
				this.state = 3395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3403;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 3397;
				this.match(cobolParser.STATUS);
				this.state = 3399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3398;
					this.separator();
					}
					}
					this.state = 3401;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3411;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3405;
				this.match(cobolParser.IS);
				this.state = 3407;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3406;
					this.separator();
					}
					}
					this.state = 3409;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3413;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_name(): Cond_nameContext {
		let _localctx: Cond_nameContext = new Cond_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, cobolParser.RULE_cond_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3415;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_name(): Switch_nameContext {
		let _localctx: Switch_nameContext = new Switch_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, cobolParser.RULE_switch_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3417;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_num(): Switch_numContext {
		let _localctx: Switch_numContext = new Switch_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, cobolParser.RULE_switch_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3419;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_of_page_name(): Top_of_page_nameContext {
		let _localctx: Top_of_page_nameContext = new Top_of_page_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, cobolParser.RULE_top_of_page_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3421;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predefined_device(): Predefined_deviceContext {
		let _localctx: Predefined_deviceContext = new Predefined_deviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, cobolParser.RULE_predefined_device);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3423;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CARD_READER || _la === cobolParser.CONSOLE || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & ((1 << (cobolParser.LINE_PRINTER - 132)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 132)) | (1 << (cobolParser.PAPER_TAPE_READER - 132)))) !== 0) || ((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & ((1 << (cobolParser.SYSERR - 218)) | (1 << (cobolParser.SYSIN - 218)) | (1 << (cobolParser.SYSOUT - 218)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public device_name(): Device_nameContext {
		let _localctx: Device_nameContext = new Device_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, cobolParser.RULE_device_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3425;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env(): Arg_envContext {
		let _localctx: Arg_envContext = new Arg_envContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, cobolParser.RULE_arg_env);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3427;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ARGUMENT_NUMBER || _la === cobolParser.ARGUMENT_VALUE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env_name(): Arg_env_nameContext {
		let _localctx: Arg_env_nameContext = new Arg_env_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, cobolParser.RULE_arg_env_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3429;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_control(): File_controlContext {
		let _localctx: File_controlContext = new File_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, cobolParser.RULE_file_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3431;
			this.match(cobolParser.FILE_CONTROL);
			this.state = 3435;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 3432;
				this.separator();
				}
				}
				this.state = 3437;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3438;
			this.match(cobolParser.DOT_);
			this.state = 3442;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3439;
					this.separator();
					}
					}
				}
				this.state = 3444;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			}
			this.state = 3454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SELECT) {
				{
				{
				this.state = 3445;
				this.select();
				this.state = 3449;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3446;
						this.separator();
						}
						}
					}
					this.state = 3451;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
				}
				}
				}
				this.state = 3456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select(): SelectContext {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, cobolParser.RULE_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3457;
			this.match(cobolParser.SELECT);
			this.state = 3459;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3458;
				this.separator();
				}
				}
				this.state = 3461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3469;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONAL) {
				{
				this.state = 3463;
				this.match(cobolParser.OPTIONAL);
				this.state = 3465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3464;
					this.separator();
					}
					}
					this.state = 3467;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3471;
			this.file_name();
			this.state = 3475;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 3472;
				this.separator();
				}
				}
				this.state = 3477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3478;
			this.assign_to();
			this.state = 3482;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 3479;
				this.separator();
				}
				}
				this.state = 3484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RESERVE) {
				{
				this.state = 3485;
				this.reserve();
				this.state = 3489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3486;
					this.separator();
					}
					}
					this.state = 3491;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 563, this._ctx) ) {
			case 1:
				{
				this.state = 3494;
				this.organization();
				this.state = 3498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3495;
					this.separator();
					}
					}
					this.state = 3500;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 3510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BLOCK) {
				{
				this.state = 3503;
				this.block_contains();
				this.state = 3507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3504;
					this.separator();
					}
					}
					this.state = 3509;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CODE_SET) {
				{
				this.state = 3512;
				this.code_set();
				this.state = 3516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3513;
					this.separator();
					}
					}
					this.state = 3518;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3528;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PADDING) {
				{
				this.state = 3521;
				this.padding();
				this.state = 3525;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3522;
					this.separator();
					}
					}
					this.state = 3527;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3537;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 571, this._ctx) ) {
			case 1:
				{
				this.state = 3530;
				this.record_delimiter();
				this.state = 3534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3531;
					this.separator();
					}
					}
					this.state = 3536;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 3546;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS || _la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL) {
				{
				this.state = 3539;
				this.access_mode();
				this.state = 3543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3540;
					this.separator();
					}
					}
					this.state = 3545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3557;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ALTERNATE || _la === cobolParser.RECORD) {
				{
				{
				this.state = 3548;
				this.record_key();
				this.state = 3552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3549;
					this.separator();
					}
					}
					this.state = 3554;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3567;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LOCK) {
				{
				this.state = 3560;
				this.lock_mode();
				this.state = 3564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3561;
					this.separator();
					}
					}
					this.state = 3566;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3576;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE || _la === cobolParser.STATUS) {
				{
				this.state = 3569;
				this.file_status();
				this.state = 3573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3570;
					this.separator();
					}
					}
					this.state = 3575;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3578;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_status(): File_statusContext {
		let _localctx: File_statusContext = new File_statusContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, cobolParser.RULE_file_status);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3586;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 3580;
				this.match(cobolParser.FILE);
				this.state = 3582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3581;
					this.separator();
					}
					}
					this.state = 3584;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3588;
			this.match(cobolParser.STATUS);
			this.state = 3590;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3589;
				this.separator();
				}
				}
				this.state = 3592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3600;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3594;
				this.match(cobolParser.IS);
				this.state = 3596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3595;
					this.separator();
					}
					}
					this.state = 3598;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3602;
			this.file_stat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_stat(): File_statContext {
		let _localctx: File_statContext = new File_statContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, cobolParser.RULE_file_stat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3604;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key(): Record_keyContext {
		let _localctx: Record_keyContext = new Record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, cobolParser.RULE_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3612;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALTERNATE) {
				{
				this.state = 3606;
				this.match(cobolParser.ALTERNATE);
				this.state = 3608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3607;
					this.separator();
					}
					}
					this.state = 3610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3614;
			this.match(cobolParser.RECORD);
			this.state = 3616;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3615;
				this.separator();
				}
				}
				this.state = 3618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3626;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 3620;
				this.match(cobolParser.KEY);
				this.state = 3622;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3621;
					this.separator();
					}
					}
					this.state = 3624;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3634;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3628;
				this.match(cobolParser.IS);
				this.state = 3630;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3629;
					this.separator();
					}
					}
					this.state = 3632;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3636;
			this.record_key_def();
			this.state = 3652;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 595, this._ctx) ) {
			case 1:
				{
				this.state = 3638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3637;
					this.separator();
					}
					}
					this.state = 3640;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3642;
					this.match(cobolParser.WITH);
					this.state = 3644;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3643;
						this.separator();
						}
						}
						this.state = 3646;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3650;
				this.match(cobolParser.DUPLICATES);
				}
				break;
			}
			this.state = 3661;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 597, this._ctx) ) {
			case 1:
				{
				this.state = 3655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3654;
					this.separator();
					}
					}
					this.state = 3657;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3659;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key_def(): Record_key_defContext {
		let _localctx: Record_key_defContext = new Record_key_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, cobolParser.RULE_record_key_def);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3691;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 602, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3663;
				this.qualified_data_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3664;
				this.match(cobolParser.USER_DEFINED_WORD);
				this.state = 3668;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3665;
					this.separator();
					}
					}
					this.state = 3670;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3671;
				this.match(cobolParser.EQUAL_);
				this.state = 3675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
					{
					{
					this.state = 3672;
					this.separator();
					}
					}
					this.state = 3677;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3678;
				this.qualified_data_item();
				this.state = 3688;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 601, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3682;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
							{
							{
							this.state = 3679;
							this.separator();
							}
							}
							this.state = 3684;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3685;
						this.qualified_data_item();
						}
						}
					}
					this.state = 3690;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 601, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public access_mode(): Access_modeContext {
		let _localctx: Access_modeContext = new Access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, cobolParser.RULE_access_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS) {
				{
				this.state = 3693;
				this.match(cobolParser.ACCESS);
				this.state = 3695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3694;
					this.separator();
					}
					}
					this.state = 3697;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MODE) {
					{
					this.state = 3699;
					this.match(cobolParser.MODE);
					this.state = 3701;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3700;
						this.separator();
						}
						}
						this.state = 3703;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3707;
					this.match(cobolParser.IS);
					this.state = 3709;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3708;
						this.separator();
						}
						}
						this.state = 3711;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				}
			}

			this.state = 3717;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3747;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 615, this._ctx) ) {
			case 1:
				{
				this.state = 3719;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3718;
					this.separator();
					}
					}
					this.state = 3721;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3723;
				this.match(cobolParser.RELATIVE);
				this.state = 3725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3724;
					this.separator();
					}
					}
					this.state = 3727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3735;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 3729;
					this.match(cobolParser.KEY);
					this.state = 3731;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3730;
						this.separator();
						}
						}
						this.state = 3733;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3737;
					this.match(cobolParser.IS);
					this.state = 3739;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3738;
						this.separator();
						}
						}
						this.state = 3741;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3745;
				this.qualified_data_item();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve(): ReserveContext {
		let _localctx: ReserveContext = new ReserveContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, cobolParser.RULE_reserve);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3749;
			this.match(cobolParser.RESERVE);
			this.state = 3751;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3750;
				this.separator();
				}
				}
				this.state = 3753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3755;
			this.reserve_num();
			this.state = 3763;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 618, this._ctx) ) {
			case 1:
				{
				this.state = 3757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3756;
					this.separator();
					}
					}
					this.state = 3759;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3761;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AREA || _la === cobolParser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve_num(): Reserve_numContext {
		let _localctx: Reserve_numContext = new Reserve_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, cobolParser.RULE_reserve_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3765;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_delimiter(): Record_delimiterContext {
		let _localctx: Record_delimiterContext = new Record_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, cobolParser.RULE_record_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3767;
			this.match(cobolParser.RECORD);
			this.state = 3769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3768;
				this.separator();
				}
				}
				this.state = 3771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3773;
			this.match(cobolParser.DELIMITER);
			this.state = 3775;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3774;
				this.separator();
				}
				}
				this.state = 3777;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3785;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3779;
				this.match(cobolParser.IS);
				this.state = 3781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3780;
					this.separator();
					}
					}
					this.state = 3783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3787;
			this.match(cobolParser.STANDARD_1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public padding(): PaddingContext {
		let _localctx: PaddingContext = new PaddingContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, cobolParser.RULE_padding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3789;
			this.match(cobolParser.PADDING);
			this.state = 3791;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3790;
				this.separator();
				}
				}
				this.state = 3793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3801;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTER) {
				{
				this.state = 3795;
				this.match(cobolParser.CHARACTER);
				this.state = 3797;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3796;
					this.separator();
					}
					}
					this.state = 3799;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3809;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3803;
				this.match(cobolParser.IS);
				this.state = 3805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3804;
					this.separator();
					}
					}
					this.state = 3807;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3811;
			this.pad_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pad_char(): Pad_charContext {
		let _localctx: Pad_charContext = new Pad_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, cobolParser.RULE_pad_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3813;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public organization(): OrganizationContext {
		let _localctx: OrganizationContext = new OrganizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, cobolParser.RULE_organization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3827;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ORGANIZATION) {
				{
				this.state = 3815;
				this.match(cobolParser.ORGANIZATION);
				this.state = 3817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3816;
					this.separator();
					}
					}
					this.state = 3819;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				{
				this.state = 3821;
				this.match(cobolParser.IS);
				this.state = 3823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3822;
					this.separator();
					}
					}
					this.state = 3825;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				}
			}

			this.state = 3840;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SEQUENTIAL:
				{
				this.state = 3829;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.LINE:
				{
				this.state = 3830;
				this.match(cobolParser.LINE);
				this.state = 3832;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3831;
					this.separator();
					}
					}
					this.state = 3834;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3836;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.RELATIVE:
				{
				this.state = 3838;
				this.match(cobolParser.RELATIVE);
				}
				break;
			case cobolParser.INDEXED:
				{
				this.state = 3839;
				this.match(cobolParser.INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode(): Lock_modeContext {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, cobolParser.RULE_lock_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3842;
			this.match(cobolParser.LOCK);
			this.state = 3844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3843;
				this.separator();
				}
				}
				this.state = 3846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3854;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.MODE) {
				{
				this.state = 3848;
				this.match(cobolParser.MODE);
				this.state = 3850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3849;
					this.separator();
					}
					}
					this.state = 3852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3856;
				this.match(cobolParser.IS);
				this.state = 3858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3857;
					this.separator();
					}
					}
					this.state = 3860;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3864;
			this.lock_mode_def();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode_def(): Lock_mode_defContext {
		let _localctx: Lock_mode_defContext = new Lock_mode_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, cobolParser.RULE_lock_mode_def);
		let _la: number;
		try {
			this.state = 3934;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.MANUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3866;
				this.match(cobolParser.MANUAL);
				this.state = 3868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3867;
					this.separator();
					}
					}
					this.state = 3870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3878;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3872;
					this.match(cobolParser.WITH);
					this.state = 3874;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3873;
						this.separator();
						}
						}
						this.state = 3876;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 3880;
				this.match(cobolParser.LOCK);
				this.state = 3882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3881;
					this.separator();
					}
					}
					this.state = 3884;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3886;
				this.match(cobolParser.ON);
				this.state = 3888;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3887;
					this.separator();
					}
					}
					this.state = 3890;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3892;
				this.match(cobolParser.MULTIPLE);
				this.state = 3894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3893;
					this.separator();
					}
					}
					this.state = 3896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3898;
				this.match(cobolParser.RECORDS);
				}
				break;
			case cobolParser.AUTOMATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3900;
				this.match(cobolParser.AUTOMATIC);
				this.state = 3931;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 650, this._ctx) ) {
				case 1:
					{
					this.state = 3902;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3901;
						this.separator();
						}
						}
						this.state = 3904;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 3912;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 3906;
						this.match(cobolParser.WITH);
						this.state = 3908;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3907;
							this.separator();
							}
							}
							this.state = 3910;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					this.state = 3929;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.LOCK:
						{
						{
						this.state = 3914;
						this.match(cobolParser.LOCK);
						this.state = 3916;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3915;
							this.separator();
							}
							}
							this.state = 3918;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 3920;
						this.match(cobolParser.ON);
						this.state = 3922;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3921;
							this.separator();
							}
							}
							this.state = 3924;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						this.state = 3926;
						this.match(cobolParser.RECORD);
						}
						}
						break;
					case cobolParser.ROLLBACK:
						{
						this.state = 3928;
						this.match(cobolParser.ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.EXCLUSIVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3933;
				this.match(cobolParser.EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code_set(): Code_setContext {
		let _localctx: Code_setContext = new Code_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, cobolParser.RULE_code_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3936;
			this.match(cobolParser.CODE_SET);
			this.state = 3938;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3937;
				this.separator();
				}
				}
				this.state = 3940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3942;
				this.match(cobolParser.IS);
				this.state = 3944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3943;
					this.separator();
					}
					}
					this.state = 3946;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3950;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_contains(): Block_containsContext {
		let _localctx: Block_containsContext = new Block_containsContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, cobolParser.RULE_block_contains);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3952;
			this.match(cobolParser.BLOCK);
			this.state = 3954;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3953;
				this.separator();
				}
				}
				this.state = 3956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3964;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 3958;
				this.match(cobolParser.CONTAINS);
				this.state = 3960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3959;
					this.separator();
					}
					}
					this.state = 3962;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 3978;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 660, this._ctx) ) {
			case 1:
				{
				this.state = 3966;
				this.smallest_block();
				this.state = 3968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3967;
					this.separator();
					}
					}
					this.state = 3970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 3972;
				this.match(cobolParser.TO);
				this.state = 3974;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3973;
					this.separator();
					}
					}
					this.state = 3976;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				break;
			}
			this.state = 3980;
			this.blocksize();
			this.state = 3982;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3981;
				this.separator();
				}
				}
				this.state = 3984;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 3986;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.RECORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public smallest_block(): Smallest_blockContext {
		let _localctx: Smallest_blockContext = new Smallest_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, cobolParser.RULE_smallest_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3988;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocksize(): BlocksizeContext {
		let _localctx: BlocksizeContext = new BlocksizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, cobolParser.RULE_blocksize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3990;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to(): Assign_toContext {
		let _localctx: Assign_toContext = new Assign_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, cobolParser.RULE_assign_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3992;
			this.match(cobolParser.ASSIGN);
			this.state = 3994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3993;
				this.separator();
				}
				}
				this.state = 3996;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 4004;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TO) {
				{
				this.state = 3998;
				this.match(cobolParser.TO);
				this.state = 4000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3999;
					this.separator();
					}
					}
					this.state = 4002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4006;
			this.assign_to_def();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to_def(): Assign_to_defContext {
		let _localctx: Assign_to_defContext = new Assign_to_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, cobolParser.RULE_assign_to_def);
		let _la: number;
		try {
			this.state = 4035;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DISK:
			case cobolParser.DYNAMIC:
			case cobolParser.EXTERNAL:
			case cobolParser.PRINTER:
			case cobolParser.STRING_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL) {
					{
					this.state = 4008;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4010;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4009;
						this.separator();
						}
						}
						this.state = 4012;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 4016;
				this.file_spec();
				}
				break;
			case cobolParser.MULTIPLE:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MULTIPLE) {
					{
					this.state = 4017;
					this.match(cobolParser.MULTIPLE);
					this.state = 4019;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4018;
						this.separator();
						}
						}
						this.state = 4021;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 4025;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4033;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 670, this._ctx) ) {
				case 1:
					{
					this.state = 4027;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4026;
						this.separator();
						}
						}
						this.state = 4029;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 4031;
					this.match(cobolParser.FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_spec(): File_specContext {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, cobolParser.RULE_file_spec);
		try {
			this.state = 4041;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4037;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4038;
				this.qualified_data_item();
				}
				break;
			case cobolParser.DISK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4039;
				this.match(cobolParser.DISK);
				}
				break;
			case cobolParser.PRINTER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4040;
				this.match(cobolParser.PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, cobolParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4043;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public i_o_control(): I_o_controlContext {
		let _localctx: I_o_controlContext = new I_o_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, cobolParser.RULE_i_o_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4045;
			this.match(cobolParser.I_O_CONTROL);
			this.state = 4049;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
				{
				{
				this.state = 4046;
				this.separator();
				}
				}
				this.state = 4051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4052;
			this.match(cobolParser.DOT_);
			this.state = 4056;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 674, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4053;
					this.separator();
					}
					}
				}
				this.state = 4058;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 674, this._ctx);
			}
			this.state = 4114;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME || _la === cobolParser.DOT_) {
				{
				this.state = 4068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.APPLY) {
					{
					{
					this.state = 4059;
					this.apply();
					this.state = 4063;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						{
						this.state = 4060;
						this.separator();
						}
						}
						this.state = 4065;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4070;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.SAME) {
					{
					{
					this.state = 4071;
					this.same();
					this.state = 4075;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						{
						this.state = 4072;
						this.separator();
						}
						}
						this.state = 4077;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4082;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4092;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.RERUN) {
					{
					{
					this.state = 4083;
					this.rerun();
					this.state = 4087;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						{
						this.state = 4084;
						this.separator();
						}
						}
						this.state = 4089;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4094;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4104;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.MULTIPLE) {
					{
					{
					this.state = 4095;
					this.multiple_file();
					this.state = 4099;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE) {
						{
						{
						this.state = 4096;
						this.separator();
						}
						}
						this.state = 4101;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4106;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4107;
				this.match(cobolParser.DOT_);
				this.state = 4111;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 683, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4108;
						this.separator();
						}
						}
					}
					this.state = 4113;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 683, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file(): Multiple_fileContext {
		let _localctx: Multiple_fileContext = new Multiple_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, cobolParser.RULE_multiple_file);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4116;
			this.match(cobolParser.MULTIPLE);
			this.state = 4118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4117;
				this.separator();
				}
				}
				this.state = 4120;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 4122;
			this.match(cobolParser.FILE);
			this.state = 4124;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4123;
				this.separator();
				}
				}
				this.state = 4126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 4134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TAPE) {
				{
				this.state = 4128;
				this.match(cobolParser.TAPE);
				this.state = 4130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4129;
					this.separator();
					}
					}
					this.state = 4132;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 4136;
				this.match(cobolParser.CONTAINS);
				this.state = 4138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4137;
					this.separator();
					}
					}
					this.state = 4140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4144;
				this.multiple_file_def();
				this.state = 4148;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 691, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4145;
						this.separator();
						}
						}
					}
					this.state = 4150;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 691, this._ctx);
				}
				}
				}
				this.state = 4153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_def(): Multiple_file_defContext {
		let _localctx: Multiple_file_defContext = new Multiple_file_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, cobolParser.RULE_multiple_file_def);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4155;
			this.multiple_file_name();
			this.state = 4169;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 695, this._ctx) ) {
			case 1:
				{
				this.state = 4157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4156;
					this.separator();
					}
					}
					this.state = 4159;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4161;
				this.match(cobolParser.POSITION);
				this.state = 4163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4162;
					this.separator();
					}
					}
					this.state = 4165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4167;
				this.pos_integer();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_name(): Multiple_file_nameContext {
		let _localctx: Multiple_file_nameContext = new Multiple_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, cobolParser.RULE_multiple_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4171;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos_integer(): Pos_integerContext {
		let _localctx: Pos_integerContext = new Pos_integerContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, cobolParser.RULE_pos_integer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4173;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun(): RerunContext {
		let _localctx: RerunContext = new RerunContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, cobolParser.RULE_rerun);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4175;
			this.match(cobolParser.RERUN);
			this.state = 4177;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4176;
				this.separator();
				}
				}
				this.state = 4179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 4193;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 4181;
				this.match(cobolParser.ON);
				this.state = 4183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4182;
					this.separator();
					}
					}
					this.state = 4185;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4187;
				this.file_name();
				this.state = 4189;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4188;
					this.separator();
					}
					}
					this.state = 4191;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EVERY) {
				{
				this.state = 4195;
				this.match(cobolParser.EVERY);
				this.state = 4197;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4196;
					this.separator();
					}
					}
					this.state = 4199;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4203;
			this.rerun_def();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_def(): Rerun_defContext {
		let _localctx: Rerun_defContext = new Rerun_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, cobolParser.RULE_rerun_def);
		let _la: number;
		try {
			this.state = 4230;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 706, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4205;
				this.rerun_def_file();
				this.state = 4207;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4206;
					this.separator();
					}
					}
					this.state = 4209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 4211;
					this.match(cobolParser.OF);
					this.state = 4213;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4212;
						this.separator();
						}
						}
						this.state = 4215;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 4219;
				this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4221;
				this.clock_count();
				this.state = 4223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4222;
					this.separator();
					}
					}
					this.state = 4225;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4227;
				this.match(cobolParser.CLOCK_UNITS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4229;
				this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clock_count(): Clock_countContext {
		let _localctx: Clock_countContext = new Clock_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, cobolParser.RULE_clock_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4232;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_name(): Condition_nameContext {
		let _localctx: Condition_nameContext = new Condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, cobolParser.RULE_condition_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4234;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_def_file(): Rerun_def_fileContext {
		let _localctx: Rerun_def_fileContext = new Rerun_def_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, cobolParser.RULE_rerun_def_file);
		let _la: number;
		try {
			this.state = 4261;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.END:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.END) {
					{
					this.state = 4236;
					this.match(cobolParser.END);
					this.state = 4238;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4237;
						this.separator();
						}
						}
						this.state = 4240;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 4248;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OF) {
						{
						this.state = 4242;
						this.match(cobolParser.OF);
						this.state = 4244;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4243;
							this.separator();
							}
							}
							this.state = 4246;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
						}
					}

					}
				}

				this.state = 4252;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4253;
				this.rec_count();
				this.state = 4255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4254;
					this.separator();
					}
					}
					this.state = 4257;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4259;
				this.match(cobolParser.RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_count(): Rec_countContext {
		let _localctx: Rec_countContext = new Rec_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, cobolParser.RULE_rec_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4263;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same(): SameContext {
		let _localctx: SameContext = new SameContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, cobolParser.RULE_same);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4265;
			this.match(cobolParser.SAME);
			this.state = 4267;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4266;
				this.separator();
				}
				}
				this.state = 4269;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 4277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & ((1 << (cobolParser.RECORD - 174)) | (1 << (cobolParser.SORT - 174)) | (1 << (cobolParser.SORT_MERGE - 174)))) !== 0)) {
				{
				this.state = 4271;
				_la = this._input.LA(1);
				if (!(((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & ((1 << (cobolParser.RECORD - 174)) | (1 << (cobolParser.SORT - 174)) | (1 << (cobolParser.SORT_MERGE - 174)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4272;
					this.separator();
					}
					}
					this.state = 4275;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA) {
				{
				this.state = 4279;
				this.match(cobolParser.AREA);
				this.state = 4281;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4280;
					this.separator();
					}
					}
					this.state = 4283;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4293;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOR) {
				{
				this.state = 4287;
				this.match(cobolParser.FOR);
				this.state = 4289;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4288;
					this.separator();
					}
					}
					this.state = 4291;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
			}

			this.state = 4295;
			this.same_area_file();
			this.state = 4303;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4297;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4296;
						this.separator();
						}
						}
						this.state = 4299;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					this.state = 4301;
					this.same_area_file();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4305;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 721, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_area_file(): Same_area_fileContext {
		let _localctx: Same_area_fileContext = new Same_area_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, cobolParser.RULE_same_area_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4307;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply(): ApplyContext {
		let _localctx: ApplyContext = new ApplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, cobolParser.RULE_apply);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4309;
			this.match(cobolParser.APPLY);
			this.state = 4311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4310;
				this.separator();
				}
				}
				this.state = 4313;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 4321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4315;
				this.apply_def();
				this.state = 4317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4316;
					this.separator();
					}
					}
					this.state = 4319;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				}
				}
				this.state = 4323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 59)) & ~0x1F) === 0 && ((1 << (_la - 59)) & ((1 << (cobolParser.CONTIGUOUS - 59)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 59)) | (1 << (cobolParser.DEFERRED_WRITE - 59)) | (1 << (cobolParser.EXTENSION - 59)))) !== 0) || _la === cobolParser.FILL_SIZE || _la === cobolParser.LOCK_HOLDING || _la === cobolParser.MASS_INSERT || _la === cobolParser.PREALLOCATION || _la === cobolParser.PRINT_CONTROL || _la === cobolParser.WINDOW);
			this.state = 4325;
			this.match(cobolParser.ON);
			this.state = 4327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4326;
				this.separator();
				}
				}
				this.state = 4329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
			this.state = 4338;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4331;
				this.file_name();
				this.state = 4335;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 726, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4332;
						this.separator();
						}
						}
					}
					this.state = 4337;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 726, this._ctx);
				}
				}
				}
				this.state = 4340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply_def(): Apply_defContext {
		let _localctx: Apply_defContext = new Apply_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, cobolParser.RULE_apply_def);
		let _la: number;
		try {
			this.state = 4379;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DEFERRED_WRITE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4342;
				this.match(cobolParser.DEFERRED_WRITE);
				}
				break;
			case cobolParser.EXTENSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4343;
				this.match(cobolParser.EXTENSION);
				this.state = 4345;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4344;
					this.separator();
					}
					}
					this.state = 4347;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4349;
				this.extend_amt();
				}
				break;
			case cobolParser.FILL_SIZE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4351;
				this.match(cobolParser.FILL_SIZE);
				}
				break;
			case cobolParser.LOCK_HOLDING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4352;
				this.match(cobolParser.LOCK_HOLDING);
				}
				break;
			case cobolParser.MASS_INSERT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4353;
				this.match(cobolParser.MASS_INSERT);
				}
				break;
			case cobolParser.CONTIGUOUS:
			case cobolParser.CONTIGUOUS_BEST_TRY:
			case cobolParser.PREALLOCATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY) {
					{
					this.state = 4354;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4356;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4355;
						this.separator();
						}
						}
						this.state = 4358;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
					}
				}

				this.state = 4362;
				this.match(cobolParser.PREALLOCATION);
				this.state = 4364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4363;
					this.separator();
					}
					}
					this.state = 4366;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4368;
				this.preall_amt();
				}
				break;
			case cobolParser.PRINT_CONTROL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4370;
				this.match(cobolParser.PRINT_CONTROL);
				}
				break;
			case cobolParser.WINDOW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4371;
				this.match(cobolParser.WINDOW);
				this.state = 4373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4372;
					this.separator();
					}
					}
					this.state = 4375;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (cobolParser.START_SLASH_ - 243)) | (1 << (cobolParser.START_STAR_ - 243)) | (1 << (cobolParser.COMMA_ - 243)) | (1 << (cobolParser.SEMI_ - 243)) | (1 << (cobolParser.START_FOUR_SPACES - 243)) | (1 << (cobolParser.WHITESPACE - 243)))) !== 0) || _la === cobolParser.NEWLINE);
				this.state = 4377;
				this.window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_ptrs(): Window_ptrsContext {
		let _localctx: Window_ptrsContext = new Window_ptrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, cobolParser.RULE_window_ptrs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4381;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preall_amt(): Preall_amtContext {
		let _localctx: Preall_amtContext = new Preall_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, cobolParser.RULE_preall_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4383;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extend_amt(): Extend_amtContext {
		let _localctx: Extend_amtContext = new Extend_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, cobolParser.RULE_extend_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4385;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	private static readonly _serializedATNSegments: number = 9;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0115\u1126\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x03\x02\x07\x02" +
		"\u0170\n\x02\f\x02\x0E\x02\u0173\v\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\u017D\n\x03\x03\x04\x03\x04\x07" +
		"\x04\u0181\n\x04\f\x04\x0E\x04\u0184\v\x04\x03\x04\x03\x04\x03\x04\x07" +
		"\x04\u0189\n\x04\f\x04\x0E\x04\u018C\v\x04\x03\x04\x05\x04\u018F\n\x04" +
		"\x03\x05\x03\x05\x05\x05\u0193\n\x05\x03\x05\x05\x05\u0196\n\x05\x03\x05" +
		"\x05\x05\u0199\n\x05\x03\x06\x03\x06\x06\x06\u019D\n\x06\r\x06\x0E\x06" +
		"\u019E\x03\x06\x03\x06\x07\x06\u01A3\n\x06\f\x06\x0E\x06\u01A6\v\x06\x03" +
		"\x06\x03\x06\x07\x06\u01AA\n\x06\f\x06\x0E\x06\u01AD\v\x06\x03\x06\x03" +
		"\x06\x07\x06\u01B1\n\x06\f\x06\x0E\x06\u01B4\v\x06\x05\x06\u01B6\n\x06" +
		"\x03\x06\x03\x06\x07\x06\u01BA\n\x06\f\x06\x0E\x06\u01BD\v\x06\x05\x06" +
		"\u01BF\n\x06\x03\x06\x03\x06\x07\x06\u01C3\n\x06\f\x06\x0E\x06\u01C6\v" +
		"\x06\x05\x06\u01C8\n\x06\x03\x06\x03\x06\x07\x06\u01CC\n\x06\f\x06\x0E" +
		"\x06\u01CF\v\x06\x05\x06\u01D1\n\x06\x03\x06\x03\x06\x07\x06\u01D5\n\x06" +
		"\f\x06\x0E\x06\u01D8\v\x06\x05\x06\u01DA\n\x06\x03\x07\x03\x07\x06\x07" +
		"\u01DE\n\x07\r\x07\x0E\x07\u01DF\x03\x07\x03\x07\x07\x07\u01E4\n\x07\f" +
		"\x07\x0E\x07\u01E7\v\x07\x03\x07\x03\x07\x07\x07\u01EB\n\x07\f\x07\x0E" +
		"\x07\u01EE\v\x07\x03\x07\x03\x07\x03\x07\x05\x07\u01F3\n\x07\x03\x07\x07" +
		"\x07\u01F6\n\x07\f\x07\x0E\x07\u01F9\v\x07\x07\x07\u01FB\n\x07\f\x07\x0E" +
		"\x07\u01FE\v\x07\x03\b\x03\b\x06\b\u0202\n\b\r\b\x0E\b\u0203\x03\b\x03" +
		"\b\x07\b\u0208\n\b\f\b\x0E\b\u020B\v\b\x03\b\x03\b\x07\b\u020F\n\b\f\b" +
		"\x0E\b\u0212\v\b\x07\b\u0214\n\b\f\b\x0E\b\u0217\v\b\x03\b\x03\b\x07\b" +
		"\u021B\n\b\f\b\x0E\b\u021E\v\b\x03\b\x03\b\x07\b\u0222\n\b\f\b\x0E\b\u0225" +
		"\v\b\x07\b\u0227\n\b\f\b\x0E\b\u022A\v\b\x03\t\x03\t\x06\t\u022E\n\t\r" +
		"\t\x0E\t\u022F\x05\t\u0232\n\t\x03\t\x03\t\x03\t\x06\t\u0237\n\t\r\t\x0E" +
		"\t\u0238\x05\t\u023B\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0249\n\t\x03\n\x03\n\x06\n\u024D\n\n" +
		"\r\n\x0E\n\u024E\x03\n\x03\n\x05\n\u0253\n\n\x05\n\u0255\n\n\x03\n\x06" +
		"\n\u0258\n\n\r\n\x0E\n\u0259\x03\n\x03\n\x06\n\u025E\n\n\r\n\x0E\n\u025F" +
		"\x03\n\x03\n\x05\n\u0264\n\n\x03\n\x06\n\u0267\n\n\r\n\x0E\n\u0268\x03" +
		"\n\x03\n\x07\n\u026D\n\n\f\n\x0E\n\u0270\v\n\x03\n\x03\n\x03\v\x03\v\x03" +
		"\f\x03\f\x06\f\u0278\n\f\r\f\x0E\f\u0279\x05\f\u027C\n\f\x03\f\x03\f\x03" +
		"\f\x06\f\u0281\n\f\r\f\x0E\f\u0282\x05\f\u0285\n\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x06\f\u028C\n\f\r\f\x0E\f\u028D\x03\f\x03\f\x05\f\u0292\n\f\x03" +
		"\f\x06\f\u0295\n\f\r\f\x0E\f\u0296\x05\f\u0299\n\f\x03\f\x03\f\x06\f\u029D" +
		"\n\f\r\f\x0E\f\u029E\x03\f\x03\f\x06\f\u02A3\n\f\r\f\x0E\f\u02A4\x03\f" +
		"\x03\f\x05\f\u02A9\n\f\x03\f\x03\f\x03\f\x06\f\u02AE\n\f\r\f\x0E\f\u02AF" +
		"\x03\f\x03\f\x05\f\u02B4\n\f\x03\f\x03\f\x06\f\u02B8\n\f\r\f\x0E\f\u02B9" +
		"\x03\f\x03\f\x05\f\u02BE\n\f\x03\f\x03\f\x06\f\u02C2\n\f\r\f\x0E\f\u02C3" +
		"\x03\f\x03\f\x06\f\u02C8\n\f\r\f\x0E\f\u02C9\x05\f\u02CC\n\f\x03\f\x03" +
		"\f\x03\f\x05\f\u02D1\n\f\x03\r\x03\r\x06\r\u02D5\n\r\r\r\x0E\r\u02D6\x03" +
		"\r\x03\r\x06\r\u02DB\n\r\r\r\x0E\r\u02DC\x05\r\u02DF\n\r\x03\r\x03\r\x06" +
		"\r\u02E3\n\r\r\r\x0E\r\u02E4\x03\r\x03\r\x06\r\u02E9\n\r\r\r\x0E\r\u02EA" +
		"\x05\r\u02ED\n\r\x03\r\x03\r\x06\r\u02F1\n\r\r\r\x0E\r\u02F2\x03\r\x03" +
		"\r\x07\r\u02F7\n\r\f\r\x0E\r\u02FA\v\r\x03\x0E\x03\x0E\x06\x0E\u02FE\n" +
		"\x0E\r\x0E\x0E\x0E\u02FF\x03\x0E\x03\x0E\x05\x0E\u0304\n\x0E\x03\x0F\x03" +
		"\x0F\x03\x0F\x06\x0F\u0309\n\x0F\r\x0F\x0E\x0F\u030A\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x06\x0F\u0311\n\x0F\r\x0F\x0E\x0F\u0312\x03\x0F\x03\x0F\x05" +
		"\x0F\u0317\n\x0F\x03\x10\x03\x10\x06\x10\u031B\n\x10\r\x10\x0E\x10\u031C" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14" +
		"\x03\x14\x06\x14\u0329\n\x14\r\x14\x0E\x14\u032A\x03\x14\x03\x14\x06\x14" +
		"\u032F\n\x14\r\x14\x0E\x14\u0330\x03\x14\x03\x14\x07\x14\u0335\n\x14\f" +
		"\x14\x0E\x14\u0338\v\x14\x03\x14\x06\x14\u033B\n\x14\r\x14\x0E\x14\u033C" +
		"\x03\x14\x03\x14\x05\x14\u0341\n\x14\x03\x15\x03\x15\x06\x15\u0345\n\x15" +
		"\r\x15\x0E\x15\u0346\x03\x15\x03\x15\x06\x15\u034B\n\x15\r\x15\x0E\x15" +
		"\u034C\x05\x15\u034F\n\x15\x03\x15\x03\x15\x06\x15\u0353\n\x15\r\x15\x0E" +
		"\x15\u0354\x03\x15\x03\x15\x07\x15\u0359\n\x15\f\x15\x0E\x15\u035C\v\x15" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x06\x17\u0362\n\x17\r\x17\x0E\x17\u0363" +
		"\x03\x17\x03\x17\x06\x17\u0368\n\x17\r\x17\x0E\x17\u0369\x05\x17\u036C" +
		"\n\x17\x03\x17\x03\x17\x06\x17\u0370\n\x17\r\x17\x0E\x17\u0371\x05\x17" +
		"\u0374\n\x17\x03\x17\x03\x17\x06\x17\u0378\n\x17\r\x17\x0E\x17\u0379\x03" +
		"\x17\x03\x17\x07\x17\u037E\n\x17\f\x17\x0E\x17\u0381\v\x17\x03\x18\x03" +
		"\x18\x03\x19\x03\x19\x06\x19\u0387\n\x19\r\x19\x0E\x19\u0388\x03\x19\x03" +
		"\x19\x03\x19\x03\x19\x06\x19\u038F\n\x19\r\x19\x0E\x19\u0390\x03\x19\x03" +
		"\x19\x06\x19\u0395\n\x19\r\x19\x0E\x19\u0396\x03\x19\x03\x19\x06\x19\u039B" +
		"\n\x19\r\x19\x0E\x19\u039C\x03\x19\x03\x19\x06\x19\u03A1\n\x19\r\x19\x0E" +
		"\x19\u03A2\x03\x19\x03\x19\x06\x19\u03A7\n\x19\r\x19\x0E\x19\u03A8\x03" +
		"\x19\x03\x19\x06\x19\u03AD\n\x19\r\x19\x0E\x19\u03AE\x05\x19\u03B1\n\x19" +
		"\x03\x19\x03\x19\x05\x19\u03B5\n\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03" +
		"\x1C\x03\x1C\x03\x1D\x03\x1D\x06\x1D\u03BF\n\x1D\r\x1D\x0E\x1D\u03C0\x03" +
		"\x1D\x03\x1D\x07\x1D\u03C5\n\x1D\f\x1D\x0E\x1D\u03C8\v\x1D\x03\x1D\x03" +
		"\x1D\x07\x1D\u03CC\n\x1D\f\x1D\x0E\x1D\u03CF\v\x1D\x07\x1D\u03D1\n\x1D" +
		"\f\x1D\x0E\x1D\u03D4\v\x1D\x03\x1D\x03\x1D\x07\x1D\u03D8\n\x1D\f\x1D\x0E" +
		"\x1D\u03DB\v\x1D\x03\x1D\x03\x1D\x07\x1D\u03DF\n\x1D\f\x1D\x0E\x1D\u03E2" +
		"\v\x1D\x07\x1D\u03E4\n\x1D\f\x1D\x0E\x1D\u03E7\v\x1D\x03\x1E\x03\x1E\x06" +
		"\x1E\u03EB\n\x1E\r\x1E\x0E\x1E\u03EC\x03\x1E\x03\x1E\x05\x1E\u03F1\n\x1E" +
		"\x03\x1E\x06\x1E\u03F4\n\x1E\r\x1E\x0E\x1E\u03F5\x03\x1E\x03\x1E\x07\x1E" +
		"\u03FA\n\x1E\f\x1E\x0E\x1E\u03FD\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F" +
		"\x06\x1F\u0403\n\x1F\r\x1F\x0E\x1F\u0404\x03\x1F\x03\x1F\x06\x1F\u0409" +
		"\n\x1F\r\x1F\x0E\x1F\u040A\x05\x1F\u040D\n\x1F\x03\x1F\x03\x1F\x06\x1F" +
		"\u0411\n\x1F\r\x1F\x0E\x1F\u0412\x05\x1F\u0415\n\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x06\x1F\u041B\n\x1F\r\x1F\x0E\x1F\u041C\x03\x1F\x03\x1F\x06" +
		"\x1F\u0421\n\x1F\r\x1F\x0E\x1F\u0422\x03\x1F\x03\x1F\x06\x1F\u0427\n\x1F" +
		"\r\x1F\x0E\x1F\u0428\x05\x1F\u042B\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x06\x1F\u0431\n\x1F\r\x1F\x0E\x1F\u0432\x03\x1F\x03\x1F\x06\x1F\u0437" +
		"\n\x1F\r\x1F\x0E\x1F\u0438\x05\x1F\u043B\n\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x06\x1F\u0441\n\x1F\r\x1F\x0E\x1F\u0442\x03\x1F\x03\x1F\x06\x1F" +
		"\u0447\n\x1F\r\x1F\x0E\x1F\u0448\x05\x1F\u044B\n\x1F\x05\x1F\u044D\n\x1F" +
		"\x03\x1F\x03\x1F\x03\x1F\x06\x1F\u0452\n\x1F\r\x1F\x0E\x1F\u0453\x03\x1F" +
		"\x03\x1F\x06\x1F\u0458\n\x1F\r\x1F\x0E\x1F\u0459\x05\x1F\u045C\n\x1F\x03" +
		"\x1F\x03\x1F\x03\x1F\x03\x1F\x06\x1F\u0462\n\x1F\r\x1F\x0E\x1F\u0463\x03" +
		"\x1F\x03\x1F\x06\x1F\u0468\n\x1F\r\x1F\x0E\x1F\u0469\x05\x1F\u046C\n\x1F" +
		"\x03\x1F\x03\x1F\x06\x1F\u0470\n\x1F\r\x1F\x0E\x1F\u0471\x05\x1F\u0474" +
		"\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x06\x1F\u047A\n\x1F\r\x1F\x0E\x1F" +
		"\u047B\x03\x1F\x03\x1F\x05\x1F\u0480\n\x1F\x03\x1F\x03\x1F\x06\x1F\u0484" +
		"\n\x1F\r\x1F\x0E\x1F\u0485\x03\x1F\x03\x1F\x05\x1F\u048A\n\x1F\x03\x1F" +
		"\x03\x1F\x03\x1F\x06\x1F\u048F\n\x1F\r\x1F\x0E\x1F\u0490\x03\x1F\x03\x1F" +
		"\x05\x1F\u0495\n\x1F\x03\x1F\x06\x1F\u0498\n\x1F\r\x1F\x0E\x1F\u0499\x05" +
		"\x1F\u049C\n\x1F\x03\x1F\x03\x1F\x06\x1F\u04A0\n\x1F\r\x1F\x0E\x1F\u04A1" +
		"\x03\x1F\x03\x1F\x06\x1F\u04A6\n\x1F\r\x1F\x0E\x1F\u04A7\x03\x1F\x03\x1F" +
		"\x05\x1F\u04AC\n\x1F\x03\x1F\x03\x1F\x06\x1F\u04B0\n\x1F\r\x1F\x0E\x1F" +
		"\u04B1\x03\x1F\x03\x1F\x06\x1F\u04B6\n\x1F\r\x1F\x0E\x1F\u04B7\x05\x1F" +
		"\u04BA\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x06\x1F\u04C0\n\x1F\r\x1F" +
		"\x0E\x1F\u04C1\x03\x1F\x03\x1F\x06\x1F\u04C6\n\x1F\r\x1F\x0E\x1F\u04C7" +
		"\x05\x1F\u04CA\n\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u04CF\n\x1F\x03 " +
		"\x03 \x06 \u04D3\n \r \x0E \u04D4\x03 \x03 \x06 \u04D9\n \r \x0E \u04DA" +
		"\x03 \x03 \x07 \u04DF\n \f \x0E \u04E2\v \x03 \x06 \u04E5\n \r \x0E \u04E6" +
		"\x03 \x03 \x05 \u04EB\n \x03 \x06 \u04EE\n \r \x0E \u04EF\x03 \x03 \x07" +
		" \u04F4\n \f \x0E \u04F7\v \x06 \u04F9\n \r \x0E \u04FA\x03 \x07 \u04FE" +
		"\n \f \x0E \u0501\v \x03 \x03 \x06 \u0505\n \r \x0E \u0506\x03 \x03 \x06" +
		" \u050B\n \r \x0E \u050C\x03 \x03 \x05 \u0511\n \x03!\x03!\x03\"\x03\"" +
		"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x06&\u051F\n&\r&\x0E&\u0520\x03" +
		"&\x03&\x03&\x03&\x03&\x06&\u0528\n&\r&\x0E&\u0529\x03&\x03&\x03&\x03&" +
		"\x03&\x06&\u0531\n&\r&\x0E&\u0532\x03&\x03&\x03&\x05&\u0538\n&\x03&\x06" +
		"&\u053B\n&\r&\x0E&\u053C\x03&\x03&\x03&\x03&\x03&\x03&\x06&\u0545\n&\r" +
		"&\x0E&\u0546\x03&\x03&\x03&\x05&\u054C\n&\x03&\x06&\u054F\n&\r&\x0E&\u0550" +
		"\x03&\x03&\x03&\x03&\x06&\u0557\n&\r&\x0E&\u0558\x03&\x03&\x03&\x03&\x03" +
		"&\x06&\u0560\n&\r&\x0E&\u0561\x03&\x03&\x03&\x05&\u0567\n&\x03\'\x03\'" +
		"\x03(\x03(\x03(\x06(\u056E\n(\r(\x0E(\u056F\x03(\x03(\x03(\x03(\x06(\u0576" +
		"\n(\r(\x0E(\u0577\x03(\x03(\x05(\u057C\n(\x03)\x03)\x06)\u0580\n)\r)\x0E" +
		")\u0581\x03)\x03)\x06)\u0586\n)\r)\x0E)\u0587\x05)\u058A\n)\x03)\x03)" +
		"\x06)\u058E\n)\r)\x0E)\u058F\x03)\x03)\x05)\u0594\n)\x03)\x03)\x06)\u0598" +
		"\n)\r)\x0E)\u0599\x03)\x03)\x05)\u059E\n)\x03*\x03*\x03+\x03+\x06+\u05A4" +
		"\n+\r+\x0E+\u05A5\x05+\u05A8\n+\x03+\x03+\x03+\x06+\u05AD\n+\r+\x0E+\u05AE" +
		"\x03+\x03+\x03+\x03+\x06+\u05B5\n+\r+\x0E+\u05B6\x03+\x03+\x05+\u05BB" +
		"\n+\x03+\x03+\x06+\u05BF\n+\r+\x0E+\u05C0\x03+\x03+\x05+\u05C5\n+\x05" +
		"+\u05C7\n+\x03+\x03+\x07+\u05CB\n+\f+\x0E+\u05CE\v+\x03+\x07+\u05D1\n" +
		"+\f+\x0E+\u05D4\v+\x03+\x03+\x07+\u05D8\n+\f+\x0E+\u05DB\v+\x03+\x07+" +
		"\u05DE\n+\f+\x0E+\u05E1\v+\x05+\u05E3\n+\x03+\x03+\x06+\u05E7\n+\r+\x0E" +
		"+\u05E8\x03+\x03+\x06+\u05ED\n+\r+\x0E+\u05EE\x03+\x03+\x06+\u05F3\n+" +
		"\r+\x0E+\u05F4\x05+\u05F7\n+\x03+\x03+\x06+\u05FB\n+\r+\x0E+\u05FC\x03" +
		"+\x03+\x06+\u0601\n+\r+\x0E+\u0602\x05+\u0605\n+\x05+\u0607\n+\x03+\x03" +
		"+\x06+\u060B\n+\r+\x0E+\u060C\x03+\x03+\x05+\u0611\n+\x03+\x06+\u0614" +
		"\n+\r+\x0E+\u0615\x03+\x03+\x06+\u061A\n+\r+\x0E+\u061B\x03+\x03+\x05" +
		"+\u0620\n+\x03+\x06+\u0623\n+\r+\x0E+\u0624\x03+\x03+\x06+\u0629\n+\r" +
		"+\x0E+\u062A\x03+\x03+\x06+\u062F\n+\r+\x0E+\u0630\x03+\x03+\x05+\u0635" +
		"\n+\x03+\x06+\u0638\n+\r+\x0E+\u0639\x03+\x03+\x06+\u063E\n+\r+\x0E+\u063F" +
		"\x03+\x03+\x06+\u0644\n+\r+\x0E+\u0645\x03+\x03+\x05+\u064A\n+\x03+\x06" +
		"+\u064D\n+\r+\x0E+\u064E\x03+\x03+\x06+\u0653\n+\r+\x0E+\u0654\x03+\x03" +
		"+\x05+\u0659\n+\x05+\u065B\n+\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/" +
		"\x030\x030\x031\x031\x032\x032\x033\x033\x063\u066D\n3\r3\x0E3\u066E\x03" +
		"3\x033\x053\u0673\n3\x033\x063\u0676\n3\r3\x0E3\u0677\x053\u067A\n3\x03" +
		"3\x033\x034\x034\x034\x064\u0681\n4\r4\x0E4\u0682\x034\x034\x054\u0687" +
		"\n4\x034\x034\x064\u068B\n4\r4\x0E4\u068C\x034\x034\x054\u0691\n4\x03" +
		"4\x034\x064\u0695\n4\r4\x0E4\u0696\x034\x034\x054\u069B\n4\x034\x034\x06" +
		"4\u069F\n4\r4\x0E4\u06A0\x034\x034\x054\u06A5\n4\x034\x034\x034\x034\x03" +
		"4\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x03" +
		"4\x034\x034\x034\x054\u06BD\n4\x035\x035\x065\u06C1\n5\r5\x0E5\u06C2\x03" +
		"5\x035\x065\u06C7\n5\r5\x0E5\u06C8\x055\u06CB\n5\x035\x035\x036\x066\u06D0" +
		"\n6\r6\x0E6\u06D1\x037\x037\x038\x038\x039\x039\x03:\x03:\x06:\u06DC\n" +
		":\r:\x0E:\u06DD\x03:\x03:\x07:\u06E2\n:\f:\x0E:\u06E5\v:\x03:\x03:\x07" +
		":\u06E9\n:\f:\x0E:\u06EC\v:\x07:\u06EE\n:\f:\x0E:\u06F1\v:\x03:\x03:\x07" +
		":\u06F5\n:\f:\x0E:\u06F8\v:\x07:\u06FA\n:\f:\x0E:\u06FD\v:\x03:\x03:\x03" +
		";\x03;\x05;\u0703\n;\x03<\x03<\x06<\u0707\n<\r<\x0E<\u0708\x03<\x03<\x05" +
		"<\u070D\n<\x03<\x03<\x06<\u0711\n<\r<\x0E<\u0712\x03<\x03<\x05<\u0717" +
		"\n<\x05<\u0719\n<\x03<\x06<\u071C\n<\r<\x0E<\u071D\x03<\x03<\x07<\u0722" +
		"\n<\f<\x0E<\u0725\v<\x03<\x07<\u0728\n<\f<\x0E<\u072B\v<\x03=\x03=\x03" +
		">\x03>\x06>\u0731\n>\r>\x0E>\u0732\x03>\x03>\x06>\u0737\n>\r>\x0E>\u0738" +
		"\x05>\u073B\n>\x03>\x03>\x06>\u073F\n>\r>\x0E>\u0740\x03>\x03>\x05>\u0745" +
		"\n>\x03>\x03>\x06>\u0749\n>\r>\x0E>\u074A\x05>\u074D\n>\x03>\x03>\x06" +
		">\u0751\n>\r>\x0E>\u0752\x03>\x03>\x06>\u0757\n>\r>\x0E>\u0758\x03>\x03" +
		">\x07>\u075D\n>\f>\x0E>\u0760\v>\x05>\u0762\n>\x03>\x03>\x06>\u0766\n" +
		">\r>\x0E>\u0767\x05>\u076A\n>\x03>\x03>\x06>\u076E\n>\r>\x0E>\u076F\x05" +
		">\u0772\n>\x03>\x03>\x06>\u0776\n>\r>\x0E>\u0777\x03>\x03>\x07>\u077C" +
		"\n>\f>\x0E>\u077F\v>\x05>\u0781\n>\x03>\x03>\x06>\u0785\n>\r>\x0E>\u0786" +
		"\x05>\u0789\n>\x03>\x03>\x06>\u078D\n>\r>\x0E>\u078E\x05>\u0791\n>\x03" +
		">\x03>\x06>\u0795\n>\r>\x0E>\u0796\x03>\x03>\x07>\u079B\n>\f>\x0E>\u079E" +
		"\v>\x05>\u07A0\n>\x03?\x03?\x05?\u07A4\n?\x03@\x03@\x05@\u07A8\n@\x03" +
		"A\x03A\x05A\u07AC\nA\x03B\x03B\x05B\u07B0\nB\x03C\x03C\x06C\u07B4\nC\r" +
		"C\x0EC\u07B5\x03C\x03C\x06C\u07BA\nC\rC\x0EC\u07BB\x03C\x03C\x05C\u07C0" +
		"\nC\x03C\x03C\x06C\u07C4\nC\rC\x0EC\u07C5\x03C\x03C\x05C\u07CA\nC\x05" +
		"C\u07CC\nC\x03C\x03C\x06C\u07D0\nC\rC\x0EC\u07D1\x03C\x03C\x07C\u07D6" +
		"\nC\fC\x0EC\u07D9\vC\x03D\x03D\x03E\x03E\x06E\u07DF\nE\rE\x0EE\u07E0\x03" +
		"E\x03E\x06E\u07E5\nE\rE\x0EE\u07E6\x03E\x03E\x06E\u07EB\nE\rE\x0EE\u07EC" +
		"\x03E\x03E\x06E\u07F1\nE\rE\x0EE\u07F2\x03E\x03E\x03F\x03F\x05F\u07F9" +
		"\nF\x03G\x03G\x06G\u07FD\nG\rG\x0EG\u07FE\x03G\x03G\x06G\u0803\nG\rG\x0E" +
		"G\u0804\x03G\x03G\x05G\u0809\nG\x03G\x03G\x06G\u080D\nG\rG\x0EG\u080E" +
		"\x03G\x03G\x05G\u0813\nG\x05G\u0815\nG\x03G\x06G\u0818\nG\rG\x0EG\u0819" +
		"\x03G\x03G\x03H\x03H\x06H\u0820\nH\rH\x0EH\u0821\x03H\x03H\x03I\x03I\x06" +
		"I\u0828\nI\rI\x0EI\u0829\x05I\u082C\nI\x03I\x03I\x06I\u0830\nI\rI\x0E" +
		"I\u0831\x03I\x03I\x06I\u0836\nI\rI\x0EI\u0837\x05I\u083A\nI\x03I\x03I" +
		"\x07I\u083E\nI\fI\x0EI\u0841\vI\x03I\x03I\x07I\u0845\nI\fI\x0EI\u0848" +
		"\vI\x05I\u084A\nI\x03I\x03I\x06I\u084E\nI\rI\x0EI\u084F\x05I\u0852\nI" +
		"\x03I\x03I\x06I\u0856\nI\rI\x0EI\u0857\x03I\x03I\x06I\u085C\nI\rI\x0E" +
		"I\u085D\x05I\u0860\nI\x03I\x03I\x07I\u0864\nI\fI\x0EI\u0867\vI\x05I\u0869" +
		"\nI\x03I\x03I\x06I\u086D\nI\rI\x0EI\u086E\x05I\u0871\nI\x03I\x05I\u0874" +
		"\nI\x03I\x03I\x06I\u0878\nI\rI\x0EI\u0879\x03I\x03I\x05I\u087E\nI\x03" +
		"I\x07I\u0881\nI\fI\x0EI\u0884\vI\x03I\x03I\x07I\u0888\nI\fI\x0EI\u088B" +
		"\vI\x05I\u088D\nI\x03I\x03I\x06I\u0891\nI\rI\x0EI\u0892\x03I\x03I\x06" +
		"I\u0897\nI\rI\x0EI\u0898\x05I\u089B\nI\x03I\x03I\x05I\u089F\nI\x05I\u08A1" +
		"\nI\x03J\x03J\x03K\x03K\x03L\x03L\x03M\x03";
	private static readonly _serializedATNSegment1: string =
		"M\x06M\u08AB\nM\rM\x0EM\u08AC\x03M\x03M\x07M\u08B1\nM\fM\x0EM\u08B4\v" +
		"M\x03M\x03M\x07M\u08B8\nM\fM\x0EM\u08BB\vM\x03M\x03M\x07M\u08BF\nM\fM" +
		"\x0EM\u08C2\vM\x07M\u08C4\nM\fM\x0EM\u08C7\vM\x03N\x03N\x06N\u08CB\nN" +
		"\rN\x0EN\u08CC\x03N\x03N\x07N\u08D1\nN\fN\x0EN\u08D4\vN\x03N\x03N\x07" +
		"N\u08D8\nN\fN\x0EN\u08DB\vN\x03N\x03N\x07N\u08DF\nN\fN\x0EN\u08E2\vN\x07" +
		"N\u08E4\nN\fN\x0EN\u08E7\vN\x03O\x03O\x06O\u08EB\nO\rO\x0EO\u08EC\x03" +
		"O\x03O\x07O\u08F1\nO\fO\x0EO\u08F4\vO\x03O\x03O\x07O\u08F8\nO\fO\x0EO" +
		"\u08FB\vO\x03O\x03O\x07O\u08FF\nO\fO\x0EO\u0902\vO\x07O\u0904\nO\fO\x0E" +
		"O\u0907\vO\x03P\x03P\x06P\u090B\nP\rP\x0EP\u090C\x03P\x03P\x07P\u0911" +
		"\nP\fP\x0EP\u0914\vP\x03P\x03P\x07P\u0918\nP\fP\x0EP\u091B\vP\x03P\x03" +
		"P\x07P\u091F\nP\fP\x0EP\u0922\vP\x07P\u0924\nP\fP\x0EP\u0927\vP\x03Q\x03" +
		"Q\x06Q\u092B\nQ\rQ\x0EQ\u092C\x03Q\x03Q\x07Q\u0931\nQ\fQ\x0EQ\u0934\v" +
		"Q\x03Q\x03Q\x07Q\u0938\nQ\fQ\x0EQ\u093B\vQ\x03Q\x07Q\u093E\nQ\fQ\x0EQ" +
		"\u0941\vQ\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u094B\nR\x03S\x03" +
		"S\x07S\u094F\nS\fS\x0ES\u0952\vS\x03S\x03S\x07S\u0956\nS\fS\x0ES\u0959" +
		"\vS\x03S\x03S\x07S\u095D\nS\fS\x0ES\u0960\vS\x03S\x05S\u0963\nS\x03S\x07" +
		"S\u0966\nS\fS\x0ES\u0969\vS\x03S\x05S\u096C\nS\x03S\x07S\u096F\nS\fS\x0E" +
		"S\u0972\vS\x03S\x03S\x03T\x03T\x03U\x03U\x06U\u097A\nU\rU\x0EU\u097B\x05" +
		"U\u097E\nU\x03U\x03U\x06U\u0982\nU\rU\x0EU\u0983\x03U\x03U\x05U\u0988" +
		"\nU\x03V\x03V\x06V\u098C\nV\rV\x0EV\u098D\x05V\u0990\nV\x03V\x03V\x06" +
		"V\u0994\nV\rV\x0EV\u0995\x03V\x03V\x03W\x03W\x03X\x03X\x07X\u099E\nX\f" +
		"X\x0EX\u09A1\vX\x03X\x03X\x03Y\x03Y\x07Y\u09A7\nY\fY\x0EY\u09AA\vY\x03" +
		"Y\x03Y\x07Y\u09AE\nY\fY\x0EY\u09B1\vY\x03Y\x03Y\x07Y\u09B5\nY\fY\x0EY" +
		"\u09B8\vY\x03Z\x03Z\x07Z\u09BC\nZ\fZ\x0EZ\u09BF\vZ\x03Z\x03Z\x07Z\u09C3" +
		"\nZ\fZ\x0EZ\u09C6\vZ\x03Z\x03Z\x07Z\u09CA\nZ\fZ\x0EZ\u09CD\vZ\x03[\x03" +
		"[\x07[\u09D1\n[\f[\x0E[\u09D4\v[\x03[\x03[\x07[\u09D8\n[\f[\x0E[\u09DB" +
		"\v[\x03[\x03[\x07[\u09DF\n[\f[\x0E[\u09E2\v[\x03\\\x03\\\x07\\\u09E6\n" +
		"\\\f\\\x0E\\\u09E9\v\\\x03\\\x03\\\x07\\\u09ED\n\\\f\\\x0E\\\u09F0\v\\" +
		"\x03\\\x03\\\x07\\\u09F4\n\\\f\\\x0E\\\u09F7\v\\\x03]\x03]\x07]\u09FB" +
		"\n]\f]\x0E]\u09FE\v]\x03]\x03]\x07]\u0A02\n]\f]\x0E]\u0A05\v]\x03]\x03" +
		"]\x07]\u0A09\n]\f]\x0E]\u0A0C\v]\x03^\x03^\x07^\u0A10\n^\f^\x0E^\u0A13" +
		"\v^\x03^\x03^\x07^\u0A17\n^\f^\x0E^\u0A1A\v^\x03^\x05^\u0A1D\n^\x03^\x07" +
		"^\u0A20\n^\f^\x0E^\u0A23\v^\x03^\x05^\u0A26\n^\x03_\x03_\x06_\u0A2A\n" +
		"_\r_\x0E_\u0A2B\x03_\x03_\x06_\u0A30\n_\r_\x0E_\u0A31\x05_\u0A34\n_\x03" +
		"_\x03_\x07_\u0A38\n_\f_\x0E_\u0A3B\v_\x03_\x03_\x03`\x03`\x06`\u0A41\n" +
		"`\r`\x0E`\u0A42\x03`\x03`\x07`\u0A47\n`\f`\x0E`\u0A4A\v`\x03`\x03`\x07" +
		"`\u0A4E\n`\f`\x0E`\u0A51\v`\x03`\x05`\u0A54\n`\x03`\x05`\u0A57\n`\x03" +
		"a\x03a\x06a\u0A5B\na\ra\x0Ea\u0A5C\x03a\x03a\x07a\u0A61\na\fa\x0Ea\u0A64" +
		"\va\x03a\x03a\x07a\u0A68\na\fa\x0Ea\u0A6B\va\x03a\x05a\u0A6E\na\x03a\x07" +
		"a\u0A71\na\fa\x0Ea\u0A74\va\x03a\x05a\u0A77\na\x03a\x07a\u0A7A\na\fa\x0E" +
		"a\u0A7D\va\x03a\x05a\u0A80\na\x03a\x07a\u0A83\na\fa\x0Ea\u0A86\va\x03" +
		"b\x03b\x06b\u0A8A\nb\rb\x0Eb\u0A8B\x03b\x03b\x07b\u0A90\nb\fb\x0Eb\u0A93" +
		"\vb\x03b\x03b\x07b\u0A97\nb\fb\x0Eb\u0A9A\vb\x03b\x05b\u0A9D\nb\x03b\x05" +
		"b\u0AA0\nb\x03c\x03c\x07c\u0AA4\nc\fc\x0Ec\u0AA7\vc\x03c\x03c\x07c\u0AAB" +
		"\nc\fc\x0Ec\u0AAE\vc\x03c\x03c\x06c\u0AB2\nc\rc\x0Ec\u0AB3\x03c\x03c\x05" +
		"c\u0AB8\nc\x03c\x07c\u0ABB\nc\fc\x0Ec\u0ABE\vc\x03c\x03c\x05c\u0AC2\n" +
		"c\x03d\x03d\x03e\x03e\x06e\u0AC8\ne\re\x0Ee\u0AC9\x05e\u0ACC\ne\x03e\x03" +
		"e\x06e\u0AD0\ne\re\x0Ee\u0AD1\x03e\x03e\x03f\x03f\x07f\u0AD8\nf\ff\x0E" +
		"f\u0ADB\vf\x03f\x03f\x07f\u0ADF\nf\ff\x0Ef\u0AE2\vf\x03f\x03f\x06f\u0AE6" +
		"\nf\rf\x0Ef\u0AE7\x03f\x03f\x05f\u0AEC\nf\x03f\x06f\u0AEF\nf\rf\x0Ef\u0AF0" +
		"\x03f\x03f\x05f\u0AF5\nf\x03f\x06f\u0AF8\nf\rf\x0Ef\u0AF9\x03f\x03f\x05" +
		"f\u0AFE\nf\x03f\x07f\u0B01\nf\ff\x0Ef\u0B04\vf\x03f\x03f\x05f\u0B08\n" +
		"f\x03g\x03g\x06g\u0B0C\ng\rg\x0Eg\u0B0D\x03g\x03g\x05g\u0B12\ng\x03g\x06" +
		"g\u0B15\ng\rg\x0Eg\u0B16\x03g\x03g\x06g\u0B1B\ng\rg\x0Eg\u0B1C\x03g\x03" +
		"g\x03h\x03h\x03i\x03i\x03j\x03j\x06j\u0B27\nj\rj\x0Ej\u0B28\x05j\u0B2B" +
		"\nj\x03j\x03j\x06j\u0B2F\nj\rj\x0Ej\u0B30\x05j\u0B33\nj\x03j\x03j\x06" +
		"j\u0B37\nj\rj\x0Ej\u0B38\x03j\x03j\x05j\u0B3D\nj\x03j\x06j\u0B40\nj\r" +
		"j\x0Ej\u0B41\x03j\x03j\x03k\x03k\x03l\x03l\x06l\u0B4A\nl\rl\x0El\u0B4B" +
		"\x03l\x03l\x05l\u0B50\nl\x03l\x03l\x03m\x03m\x03n\x03n\x07n\u0B58\nn\f" +
		"n\x0En\u0B5B\vn\x03n\x03n\x07n\u0B5F\nn\fn\x0En\u0B62\vn\x03n\x03n\x07" +
		"n\u0B66\nn\fn\x0En\u0B69\vn\x06n\u0B6B\nn\rn\x0En\u0B6C\x03n\x03n\x05" +
		"n\u0B71\nn\x03o\x03o\x06o\u0B75\no\ro\x0Eo\u0B76\x03o\x03o\x06o\u0B7B" +
		"\no\ro\x0Eo\u0B7C\x05o\u0B7F\no\x03o\x03o\x03o\x03o\x06o\u0B85\no\ro\x0E" +
		"o\u0B86\x03o\x03o\x06o\u0B8B\no\ro\x0Eo\u0B8C\x05o\u0B8F\no\x03o\x03o" +
		"\x03o\x03o\x06o\u0B95\no\ro\x0Eo\u0B96\x03o\x03o\x06o\u0B9B\no\ro\x0E" +
		"o\u0B9C\x05o\u0B9F\no\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x06" +
		"o\u0BAA\no\ro\x0Eo\u0BAB\x03o\x03o\x06o\u0BB0\no\ro\x0Eo\u0BB1\x05o\u0BB4" +
		"\no\x03o\x03o\x03o\x03o\x06o\u0BBA\no\ro\x0Eo\u0BBB\x03o\x03o\x06o\u0BC0" +
		"\no\ro\x0Eo\u0BC1\x05o\u0BC4\no\x03o\x03o\x03o\x03o\x06o\u0BCA\no\ro\x0E" +
		"o\u0BCB\x03o\x03o\x06o\u0BD0\no\ro\x0Eo\u0BD1\x03o\x03o\x06o\u0BD6\no" +
		"\ro\x0Eo\u0BD7\x05o\u0BDA\no\x03o\x03o\x05o\u0BDE\no\x03p\x03p\x03p\x06" +
		"p\u0BE3\np\rp\x0Ep\u0BE4\x03p\x03p\x06p\u0BE9\np\rp\x0Ep\u0BEA\x07p\u0BED" +
		"\np\fp\x0Ep\u0BF0\vp\x03q\x03q\x06q\u0BF4\nq\rq\x0Eq\u0BF5\x03q\x03q\x06" +
		"q\u0BFA\nq\rq\x0Eq\u0BFB\x05q\u0BFE\nq\x03q\x03q\x06q\u0C02\nq\rq\x0E" +
		"q\u0C03\x05q\u0C06\nq\x03q\x03q\x03r\x03r\x03r\x06r\u0C0D\nr\rr\x0Er\u0C0E" +
		"\x05r\u0C11\nr\x03r\x03r\x06r\u0C15\nr\rr\x0Er\u0C16\x03r\x03r\x06r\u0C1B" +
		"\nr\rr\x0Er\u0C1C\x03r\x03r\x03r\x05r\u0C22\nr\x03s\x03s\x03t\x03t\x03" +
		"u\x03u\x06u\u0C2A\nu\ru\x0Eu\u0C2B\x03u\x03u\x06u\u0C30\nu\ru\x0Eu\u0C31" +
		"\x03u\x03u\x06u\u0C36\nu\ru\x0Eu\u0C37\x05u\u0C3A\nu\x03u\x03u\x07u\u0C3E" +
		"\nu\fu\x0Eu\u0C41\vu\x06u\u0C43\nu\ru\x0Eu\u0C44\x03v\x03v\x03w\x03w\x06" +
		"w\u0C4B\nw\rw\x0Ew\u0C4C\x03w\x03w\x06w\u0C51\nw\rw\x0Ew\u0C52\x03w\x03" +
		"w\x05w\u0C57\nw\x03x\x03x\x06x\u0C5B\nx\rx\x0Ex\u0C5C\x03x\x03x\x06x\u0C61" +
		"\nx\rx\x0Ex\u0C62\x05x\u0C65\nx\x03x\x06x\u0C68\nx\rx\x0Ex\u0C69\x03y" +
		"\x06y\u0C6D\ny\ry\x0Ey\u0C6E\x03y\x05y\u0C72\ny\x03z\x03z\x06z\u0C76\n" +
		"z\rz\x0Ez\u0C77\x06z\u0C7A\nz\rz\x0Ez\u0C7B\x03z\x03z\x06z\u0C80\nz\r" +
		"z\x0Ez\u0C81\x05z\u0C84\nz\x03z\x03z\x06z\u0C88\nz\rz\x0Ez\u0C89\x06z" +
		"\u0C8C\nz\rz\x0Ez\u0C8D\x03{\x03{\x06{\u0C92\n{\r{\x0E{\u0C93\x03{\x03" +
		"{\x07{\u0C98\n{\f{\x0E{\u0C9B\v{\x03|\x03|\x03}\x03}\x03~\x03~\x06~\u0CA3" +
		"\n~\r~\x0E~\u0CA4\x03~\x03~\x06~\u0CA9\n~\r~\x0E~\u0CAA\x03~\x03~\x06" +
		"~\u0CAF\n~\r~\x0E~\u0CB0\x05~\u0CB3\n~\x03~\x03~\x03\x7F\x03\x7F\x03\x7F" +
		"\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x07\x7F\u0CBE\n\x7F\f\x7F\x0E\x7F\u0CC1" +
		"\v\x7F\x06\x7F\u0CC3\n\x7F\r\x7F\x0E\x7F\u0CC4\x05\x7F\u0CC7\n\x7F\x03" +
		"\x80\x03\x80\x06\x80\u0CCB\n\x80\r\x80\x0E\x80\u0CCC\x03\x80\x03\x80\x06" +
		"\x80\u0CD1\n\x80\r\x80\x0E\x80\u0CD2\x03\x80\x03\x80\x05\x80\u0CD7\n\x80" +
		"\x03\x80\x03\x80\x06\x80\u0CDB\n\x80\r\x80\x0E\x80\u0CDC\x03\x80\x03\x80" +
		"\x06\x80\u0CE1\n\x80\r\x80\x0E\x80\u0CE2\x03\x80\x03\x80\x06\x80\u0CE7" +
		"\n\x80\r\x80\x0E\x80\u0CE8\x05\x80\u0CEB\n\x80\x03\x81\x03\x81\x03\x82" +
		"\x03\x82\x03\x83\x03\x83\x03\x84\x03\x84\x06\x84\u0CF5\n\x84\r\x84\x0E" +
		"\x84\u0CF6\x03\x84\x03\x84\x07\x84\u0CFB\n\x84\f\x84\x0E\x84\u0CFE\v\x84" +
		"\x03\x84\x03\x84\x06\x84\u0D02\n\x84\r\x84\x0E\x84\u0D03\x03\x84\x03\x84" +
		"\x06\x84\u0D08\n\x84\r\x84\x0E\x84\u0D09\x05\x84\u0D0C\n\x84\x03\x84\x03" +
		"\x84\x06\x84\u0D10\n\x84\r\x84\x0E\x84\u0D11\x03\x84\x03\x84\x05\x84\u0D16" +
		"\n\x84\x03\x84\x03\x84\x06\x84\u0D1A\n\x84\r\x84\x0E\x84\u0D1B\x03\x84" +
		"\x03\x84\x05\x84\u0D20\n\x84\x05\x84\u0D22\n\x84\x03\x84\x07\x84\u0D25" +
		"\n\x84\f\x84\x0E\x84\u0D28\v\x84\x03\x85\x03\x85\x06\x85\u0D2C\n\x85\r" +
		"\x85\x0E\x85\u0D2D\x03\x85\x03\x85\x06\x85\u0D32\n\x85\r\x85\x0E\x85\u0D33" +
		"\x05\x85\u0D36\n\x85\x03\x85\x03\x85\x06\x85\u0D3A\n\x85\r\x85\x0E\x85" +
		"\u0D3B\x05\x85\u0D3E\n\x85\x03\x85\x03\x85\x03\x86\x03\x86\x06\x86\u0D44" +
		"\n\x86\r\x86\x0E\x86\u0D45\x03\x86\x03\x86\x06\x86\u0D4A\n\x86\r\x86\x0E" +
		"\x86\u0D4B\x05\x86\u0D4E\n\x86\x03\x86\x03\x86\x06\x86\u0D52\n\x86\r\x86" +
		"\x0E\x86\u0D53\x05\x86\u0D56\n\x86\x03\x86\x03\x86\x03\x87\x03\x87\x03" +
		"\x88\x03\x88\x03\x89\x03\x89\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8C\x03" +
		"\x8C\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x07\x8F\u0D6C\n\x8F" +
		"\f\x8F\x0E\x8F\u0D6F\v\x8F\x03\x8F\x03\x8F\x07\x8F\u0D73\n\x8F\f\x8F\x0E" +
		"\x8F\u0D76\v\x8F\x03\x8F\x03\x8F\x07\x8F\u0D7A\n\x8F\f\x8F\x0E\x8F\u0D7D" +
		"\v\x8F\x07\x8F\u0D7F\n\x8F\f\x8F\x0E\x8F\u0D82\v\x8F\x03\x90\x03\x90\x06" +
		"\x90\u0D86\n\x90\r\x90\x0E\x90\u0D87\x03\x90\x03\x90\x06\x90\u0D8C\n\x90" +
		"\r\x90\x0E\x90\u0D8D\x05\x90\u0D90\n\x90\x03\x90\x03\x90\x07\x90\u0D94" +
		"\n\x90\f\x90\x0E\x90\u0D97\v\x90\x03\x90\x03\x90\x07\x90\u0D9B\n\x90\f" +
		"\x90\x0E\x90\u0D9E\v\x90\x03\x90\x03\x90\x07\x90\u0DA2\n\x90\f\x90\x0E" +
		"\x90\u0DA5\v\x90\x05\x90\u0DA7\n\x90\x03\x90\x03\x90\x07\x90\u0DAB\n\x90" +
		"\f\x90\x0E\x90\u0DAE\v\x90\x05\x90\u0DB0\n\x90\x03\x90\x03\x90\x07\x90" +
		"\u0DB4\n\x90\f\x90\x0E\x90\u0DB7\v\x90\x05\x90\u0DB9\n\x90\x03\x90\x03" +
		"\x90\x07\x90\u0DBD\n\x90\f\x90\x0E\x90\u0DC0\v\x90\x05\x90\u0DC2\n\x90" +
		"\x03\x90\x03\x90\x07\x90\u0DC6\n\x90\f\x90\x0E\x90\u0DC9\v\x90\x05\x90" +
		"\u0DCB\n\x90\x03\x90\x03\x90\x07\x90\u0DCF\n\x90\f\x90\x0E\x90\u0DD2\v" +
		"\x90\x05\x90\u0DD4\n\x90\x03\x90\x03\x90\x07\x90\u0DD8\n\x90\f\x90\x0E" +
		"\x90\u0DDB\v\x90\x05\x90\u0DDD\n\x90\x03\x90\x03\x90\x07\x90\u0DE1\n\x90" +
		"\f\x90\x0E\x90\u0DE4\v\x90\x07\x90\u0DE6\n\x90\f\x90\x0E\x90\u0DE9\v\x90" +
		"\x03\x90\x03\x90\x07\x90\u0DED\n\x90\f\x90\x0E\x90\u0DF0\v\x90\x05\x90" +
		"\u0DF2\n\x90\x03\x90\x03\x90\x07\x90\u0DF6\n\x90\f\x90\x0E\x90\u0DF9\v" +
		"\x90\x05\x90\u0DFB\n\x90\x03\x90\x03\x90\x03\x91\x03\x91\x06\x91\u0E01" +
		"\n\x91\r\x91\x0E\x91\u0E02\x05\x91\u0E05\n\x91\x03\x91\x03\x91\x06\x91" +
		"\u0E09\n\x91\r\x91\x0E\x91\u0E0A\x03\x91\x03\x91\x06\x91\u0E0F\n\x91\r" +
		"\x91\x0E\x91\u0E10\x05\x91\u0E13\n\x91\x03\x91\x03\x91\x03\x92\x03\x92" +
		"\x03\x93\x03\x93\x06\x93\u0E1B\n\x93\r\x93\x0E\x93\u0E1C\x05\x93\u0E1F" +
		"\n\x93\x03\x93\x03\x93\x06\x93\u0E23\n\x93\r\x93\x0E\x93\u0E24\x03\x93" +
		"\x03\x93\x06\x93\u0E29\n\x93\r\x93\x0E\x93\u0E2A\x05\x93\u0E2D\n\x93\x03" +
		"\x93\x03\x93\x06\x93\u0E31\n\x93\r\x93\x0E\x93\u0E32\x05\x93\u0E35\n\x93" +
		"\x03\x93\x03\x93\x06\x93\u0E39\n\x93\r\x93\x0E\x93\u0E3A\x03\x93\x03\x93" +
		"\x06\x93\u0E3F\n\x93\r\x93\x0E\x93\u0E40\x05\x93\u0E43\n\x93\x03\x93\x03" +
		"\x93\x05\x93\u0E47\n\x93\x03\x93\x06\x93\u0E4A\n\x93\r\x93\x0E\x93\u0E4B" +
		"\x03\x93\x03\x93\x05\x93\u0E50\n\x93\x03\x94\x03\x94\x03\x94\x07\x94\u0E55" +
		"\n\x94\f\x94\x0E\x94\u0E58\v\x94\x03\x94\x03\x94\x07\x94\u0E5C\n\x94\f" +
		"\x94\x0E\x94\u0E5F\v\x94\x03\x94\x03\x94\x07\x94\u0E63\n\x94\f\x94\x0E" +
		"\x94\u0E66\v\x94\x03\x94\x07\x94\u0E69\n\x94\f\x94\x0E\x94\u0E6C\v\x94" +
		"\x05\x94\u0E6E\n\x94\x03\x95\x03\x95\x06\x95\u0E72\n\x95\r\x95\x0E\x95" +
		"\u0E73\x03\x95\x03\x95\x06\x95\u0E78\n\x95\r\x95\x0E\x95\u0E79\x05\x95" +
		"\u0E7C\n\x95\x03\x95\x03\x95\x06\x95\u0E80\n\x95\r\x95\x0E\x95\u0E81\x05" +
		"\x95\u0E84\n\x95\x05\x95\u0E86\n\x95\x03\x95\x03\x95\x06\x95\u0E8A\n\x95" +
		"\r\x95\x0E\x95\u0E8B\x03\x95\x03\x95\x06\x95\u0E90\n\x95\r\x95\x0E\x95" +
		"\u0E91\x03\x95\x03\x95\x06\x95\u0E96\n\x95\r\x95\x0E\x95\u0E97\x05\x95" +
		"\u0E9A\n\x95\x03\x95\x03\x95\x06\x95\u0E9E\n\x95\r\x95\x0E\x95\u0E9F\x05" +
		"\x95\u0EA2\n\x95\x03\x95\x03\x95\x05\x95\u0EA6\n\x95\x03\x96\x03\x96\x06" +
		"\x96\u0EAA\n\x96\r\x96\x0E\x96\u0EAB\x03\x96\x03\x96\x06\x96\u0EB0\n\x96" +
		"\r\x96\x0E\x96\u0EB1\x03\x96\x03\x96\x05\x96\u0EB6\n\x96\x03\x97\x03\x97" +
		"\x03\x98\x03\x98\x06\x98\u0EBC\n\x98\r\x98\x0E\x98\u0EBD\x03\x98\x03\x98" +
		"\x06\x98\u0EC2\n\x98\r\x98\x0E\x98\u0EC3\x03\x98\x03\x98\x06\x98\u0EC8" +
		"\n\x98\r\x98\x0E\x98\u0EC9\x05\x98\u0ECC\n\x98\x03\x98\x03\x98\x03\x99" +
		"\x03\x99\x06\x99\u0ED2\n\x99\r\x99\x0E\x99\u0ED3\x03\x99\x03\x99\x06\x99" +
		"\u0ED8\n\x99\r\x99\x0E\x99\u0ED9\x05\x99\u0EDC\n\x99\x03\x99\x03\x99\x06" +
		"\x99\u0EE0\n\x99\r\x99\x0E\x99\u0EE1\x05\x99\u0EE4\n\x99\x03\x99\x03\x99" +
		"\x03\x9A\x03\x9A\x03\x9B\x03\x9B\x06\x9B\u0EEC\n\x9B\r\x9B\x0E\x9B\u0EED" +
		"\x03\x9B\x03\x9B\x06\x9B\u0EF2\n\x9B\r\x9B\x0E\x9B\u0EF3\x05\x9B\u0EF6" +
		"\n\x9B\x03\x9B\x03\x9B\x03\x9B\x06\x9B\u0EFB\n\x9B\r\x9B\x0E\x9B\u0EFC" +
		"\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0F03\n\x9B\x03\x9C\x03\x9C\x06" +
		"\x9C\u0F07\n\x9C\r\x9C\x0E\x9C\u0F08\x03\x9C\x03\x9C\x06\x9C\u0F0D\n\x9C" +
		"\r\x9C\x0E\x9C\u0F0E\x05\x9C\u0F11\n\x9C\x03\x9C\x03\x9C\x06\x9C\u0F15" +
		"\n\x9C\r\x9C\x0E\x9C\u0F16\x05\x9C\u0F19\n\x9C\x03\x9C\x03\x9C\x03\x9D" +
		"\x03\x9D\x06\x9D\u0F1F\n\x9D\r\x9D\x0E\x9D\u0F20\x03\x9D\x03\x9D\x06\x9D" +
		"\u0F25\n\x9D\r\x9D\x0E\x9D\u0F26\x05\x9D\u0F29\n\x9D\x03\x9D\x03\x9D\x06" +
		"\x9D\u0F2D\n\x9D\r\x9D\x0E\x9D\u0F2E\x03\x9D\x03\x9D\x06\x9D\u0F33\n\x9D" +
		"\r\x9D\x0E\x9D\u0F34\x03\x9D\x03\x9D\x06\x9D\u0F39\n\x9D\r\x9D\x0E\x9D" +
		"\u0F3A\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x06\x9D\u0F41\n\x9D\r\x9D\x0E\x9D" +
		"\u0F42\x03\x9D\x03\x9D\x06\x9D\u0F47\n\x9D\r\x9D\x0E\x9D\u0F48\x05\x9D" +
		"\u0F4B\n\x9D\x03\x9D\x03\x9D\x06\x9D\u0F4F\n\x9D\r\x9D\x0E\x9D\u0F50\x03" +
		"\x9D\x03\x9D\x06\x9D\u0F55\n\x9D\r\x9D\x0E\x9D\u0F56\x03\x9D\x03\x9D\x03" +
		"\x9D\x05\x9D\u0F5C\n\x9D\x05\x9D\u0F5E\n\x9D\x03\x9D\x05\x9D\u0F61\n\x9D" +
		"\x03\x9E\x03\x9E\x06\x9E\u0F65\n\x9E\r\x9E\x0E\x9E\u0F66\x03\x9E\x03\x9E" +
		"\x06\x9E\u0F6B\n\x9E\r\x9E\x0E\x9E\u0F6C\x05\x9E\u0F6F\n\x9E\x03\x9E\x03" +
		"\x9E\x03\x9F\x03\x9F\x06\x9F\u0F75\n\x9F\r\x9F\x0E\x9F\u0F76\x03\x9F\x03" +
		"\x9F\x06\x9F\u0F7B\n\x9F\r\x9F\x0E\x9F\u0F7C\x05\x9F\u0F7F\n\x9F\x03\x9F" +
		"\x03\x9F\x06\x9F\u0F83\n\x9F\r\x9F\x0E\x9F\u0F84\x03\x9F\x03\x9F\x06\x9F" +
		"\u0F89\n\x9F\r\x9F\x0E\x9F\u0F8A\x05\x9F\u0F8D\n\x9F\x03\x9F\x03\x9F\x06" +
		"\x9F\u0F91\n\x9F\r\x9F\x0E\x9F\u0F92\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03" +
		"\xA1\x03\xA1\x03\xA2\x03\xA2\x06\xA2\u0F9D\n\xA2\r\xA2\x0E\xA2\u0F9E\x03" +
		"\xA2\x03\xA2\x06\xA2\u0FA3\n\xA2\r\xA2\x0E\xA2\u0FA4\x05\xA2\u0FA7\n\xA2" +
		"\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x06\xA3\u0FAD\n\xA3\r\xA3\x0E\xA3\u0FAE" +
		"\x05\xA3\u0FB1\n\xA3\x03\xA3\x03\xA3\x03\xA3\x06\xA3\u0FB6\n\xA3\r\xA3" +
		"\x0E\xA3\u0FB7\x05\xA3\u0FBA\n\xA3\x03\xA3\x03\xA3\x06\xA3\u0FBE\n\xA3" +
		"\r\xA3\x0E\xA3\u0FBF\x03\xA3\x03\xA3\x05\xA3\u0FC4\n\xA3\x05\xA3\u0FC6" +
		"\n\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x05\xA4\u0FCC\n\xA4\x03\xA5\x03" +
		"\xA5\x03\xA6\x03\xA6\x07\xA6\u0FD2\n\xA6\f\xA6\x0E\xA6\u0FD5\v\xA6\x03" +
		"\xA6\x03\xA6\x07\xA6\u0FD9\n\xA6\f\xA6\x0E\xA6\u0FDC\v\xA6\x03\xA6\x03" +
		"\xA6\x07\xA6\u0FE0\n\xA6\f\xA6\x0E\xA6\u0FE3\v\xA6\x07\xA6\u0FE5\n\xA6" +
		"\f\xA6\x0E\xA6\u0FE8\v\xA6\x03\xA6\x03\xA6\x07\xA6\u0FEC\n\xA6\f\xA6\x0E" +
		"\xA6\u0FEF\v\xA6\x07\xA6\u0FF1\n\xA6\f\xA6\x0E\xA6\u0FF4\v\xA6\x03\xA6" +
		"\x03\xA6\x07\xA6\u0FF8\n\xA6\f\xA6\x0E\xA6\u0FFB\v\xA6\x07\xA6\u0FFD\n" +
		"\xA6\f\xA6\x0E\xA6\u1000\v\xA6\x03\xA6\x03\xA6\x07\xA6\u1004\n\xA6\f\xA6" +
		"\x0E\xA6\u1007\v\xA6\x07\xA6\u1009\n\xA6\f\xA6\x0E\xA6\u100C\v\xA6\x03" +
		"\xA6\x03\xA6\x07\xA6\u1010\n\xA6\f\xA6\x0E\xA6\u1013\v\xA6\x05\xA6\u1015" +
		"\n\xA6\x03\xA7\x03\xA7\x06\xA7\u1019\n\xA7\r\xA7\x0E\xA7\u101A\x03\xA7" +
		"\x03\xA7\x06\xA7\u101F\n\xA7\r\xA7\x0E\xA7\u1020\x03\xA7\x03\xA7\x06\xA7" +
		"\u1025\n\xA7\r\xA7\x0E\xA7\u1026\x05\xA7\u1029\n\xA7\x03\xA7\x03\xA7\x06" +
		"\xA7\u102D\n\xA7\r\xA7\x0E\xA7\u102E\x05\xA7\u1031\n\xA7\x03\xA7\x03\xA7" +
		"\x07\xA7\u1035\n\xA7\f\xA7\x0E\xA7\u1038\v\xA7\x06\xA7\u103A\n\xA7\r\xA7" +
		"\x0E\xA7\u103B\x03\xA8\x03\xA8\x06\xA8\u1040\n\xA8\r\xA8\x0E\xA8\u1041" +
		"\x03\xA8\x03\xA8\x06\xA8\u1046\n\xA8\r\xA8\x0E\xA8\u1047\x03\xA8\x03\xA8" +
		"\x05\xA8\u104C\n\xA8\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x06" +
		"\xAB\u1054\n\xAB\r\xAB\x0E\xAB\u1055\x03\xAB\x03\xAB\x06\xAB\u105A\n\xAB" +
		"\r\xAB\x0E\xAB\u105B\x03\xAB\x03\xAB\x06\xAB\u1060\n\xAB\r\xAB\x0E\xAB" +
		"\u1061\x05\xAB\u1064\n\xAB\x03\xAB\x03\xAB\x06\xAB\u1068\n\xAB\r\xAB\x0E" +
		"\xAB\u1069\x05\xAB\u106C\n\xAB\x03\xAB\x03\xAB\x03\xAC\x03\xAC\x06\xAC" +
		"\u1072\n\xAC\r\xAC\x0E\xAC\u1073\x03\xAC\x03\xAC\x06\xAC\u1078\n\xAC\r" +
		"\xAC\x0E\xAC\u1079\x05\xAC\u107C\n\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC" +
		"\x06\xAC\u1082\n\xAC\r\xAC\x0E\xAC\u1083\x03\xAC\x03\xAC\x03\xAC\x05\xAC" +
		"\u1089\n\xAC\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x06\xAF\u1091" +
		"\n\xAF\r\xAF\x0E\xAF\u1092\x03\xAF\x03\xAF\x06\xAF\u1097\n\xAF\r\xAF\x0E" +
		"\xAF\u1098\x05\xAF\u109B\n\xAF\x05\xAF\u109D\n\xAF\x03\xAF\x03\xAF\x03" +
		"\xAF\x06\xAF\u10A2\n\xAF\r\xAF\x0E\xAF\u10A3\x03\xAF\x03\xAF\x05\xAF\u10A8" +
		"\n\xAF\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x06\xB1\u10AE\n\xB1\r\xB1\x0E\xB1" +
		"\u10AF\x03\xB1\x03\xB1\x06\xB1\u10B4\n\xB1\r\xB1\x0E\xB1\u10B5\x05\xB1" +
		"\u10B8\n\xB1\x03\xB1\x03\xB1\x06\xB1\u10BC\n\xB1\r\xB1\x0E\xB1\u10BD\x05" +
		"\xB1\u10C0\n\xB1\x03\xB1\x03\xB1\x06\xB1\u10C4\n\xB1\r\xB1\x0E\xB1\u10C5" +
		"\x05\xB1\u10C8\n\xB1\x03\xB1\x03\xB1\x06\xB1\u10CC\n\xB1\r\xB1\x0E\xB1" +
		"\u10CD\x03\xB1\x03\xB1\x06\xB1\u10D2\n\xB1\r\xB1\x0E\xB1\u10D3\x03\xB2" +
		"\x03\xB2\x03\xB3\x03\xB3\x06\xB3\u10DA\n\xB3\r\xB3\x0E\xB3\u10DB\x03\xB3" +
		"\x03\xB3\x06\xB3\u10E0\n\xB3\r\xB3\x0E\xB3\u10E1\x06\xB3\u10E4\n\xB3\r" +
		"\xB3\x0E\xB3\u10E5\x03\xB3\x03\xB3\x06\xB3\u10EA\n\xB3\r\xB3\x0E\xB3\u10EB" +
		"\x03\xB3\x03\xB3\x07\xB3\u10F0\n\xB3\f\xB3\x0E\xB3\u10F3\v\xB3\x06\xB3" +
		"\u10F5\n\xB3\r\xB3\x0E\xB3\u10F6\x03\xB4\x03\xB4\x03\xB4\x06\xB4\u10FC" +
		"\n\xB4\r\xB4\x0E\xB4\u10FD\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x06\xB4\u1107\n\xB4\r\xB4\x0E\xB4\u1108\x05\xB4\u110B\n\xB4" +
		"\x03\xB4\x03\xB4\x06\xB4\u110F\n\xB4\r\xB4\x0E\xB4\u1110\x03\xB4\x03\xB4" +
		"\x03\xB4\x03\xB4\x03\xB4\x06\xB4\u1118\n\xB4\r\xB4\x0E\xB4\u1119\x03\xB4" +
		"\x03\xB4\x05\xB4\u111E\n\xB4\x03";
	private static readonly _serializedATNSegment2: string =
		"\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB7\x02\x02\x02\xB8\x02" +
		"\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02" +
		"\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02" +
		",\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02" +
		"H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02" +
		"d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02" +
		"\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02" +
		"\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02" +
		"\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02" +
		"\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02" +
		"\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02" +
		"\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02" +
		"\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02" +
		"\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
		"\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
		"\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
		"\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
		"\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
		"\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
		"\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
		"\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\x02\x1F" +
		"\x03\x02\u0115\u0115\x04\x02\x7F\x7F\xE5\xE5\x03\x02\xDA\xDB\x04\x02\x80" +
		"\x80\xBE\xBE\x03\x02z{\x03\x02\xE0\xE1\x03\x02\u010F\u0110\x04\x02\x0F" +
		"\x0FMM\x04\x02bb\u0112\u0112\x03\x02\x84\x85\x04\x02\xCB\xCB\xE8\xE8\x03" +
		"\x02\xA3\xA4\x07\x02\xFC\xFD\u0105\u0106\u010B\u010B\u0110\u0110\u0112" +
		"\u0112\x04\x02\x97\x97\xD2\xD2\x04\x02++uu\x04\x02\x90\x90\xD2\xD2\x06" +
		"\x02\x04\x04mm\xEE\xEE\u0112\u0112\x05\x02##\x8E\x8E\xF2\xF2\x04\x02q" +
		"q\x95\x95\x04\x02\t\txx\x07\x02\x1F\x1F;;\x86\x86\x9F\xA0\xDC\xDE\x04" +
		"\x02\f\rWX\x05\x02SS\xAE\xAE\xC9\xC9\x03\x02\n\v\x04\x02##\xB1\xB1\x04" +
		"\x02SS\\\\\x04\x02\xB3\xB3\xE7\xE7\x04\x02\xB0\xB0\xCD\xCE\x03\x02=>\x02" +
		"\u13B8\x02\u0171\x03\x02\x02\x02\x04\u017C\x03\x02\x02\x02\x06\u018E\x03" +
		"\x02\x02\x02\b\u0198\x03\x02\x02\x02\n\u019A\x03\x02\x02\x02\f\u01DB\x03" +
		"\x02\x02\x02\x0E\u01FF\x03\x02\x02\x02\x10\u0248\x03\x02\x02\x02\x12\u024A" +
		"\x03\x02\x02\x02\x14\u0273\x03\x02\x02\x02\x16\u02D0\x03\x02\x02\x02\x18" +
		"\u02EC\x03\x02\x02\x02\x1A\u02FB\x03\x02\x02\x02\x1C\u0316\x03\x02\x02" +
		"\x02\x1E\u0318\x03\x02\x02\x02 \u0320\x03\x02\x02\x02\"\u0322\x03\x02" +
		"\x02\x02$\u0324\x03\x02\x02\x02&\u0326\x03\x02\x02\x02(\u0342\x03\x02" +
		"\x02\x02*\u035D\x03\x02\x02\x02,\u035F\x03\x02\x02\x02.\u0382\x03\x02" +
		"\x02\x020\u03B4\x03\x02\x02\x022\u03B6\x03\x02\x02\x024\u03B8\x03\x02" +
		"\x02\x026\u03BA\x03\x02\x02\x028\u03BC\x03\x02\x02\x02:\u03E8\x03\x02" +
		"\x02\x02<\u04CE\x03\x02\x02\x02>\u04F8\x03\x02\x02\x02@\u0512\x03\x02" +
		"\x02\x02B\u0514\x03\x02\x02\x02D\u0516\x03\x02\x02\x02F\u0518\x03\x02" +
		"\x02\x02H\u051A\x03\x02\x02\x02J\u0566\x03\x02\x02\x02L\u0568\x03\x02" +
		"\x02\x02N\u057B\x03\x02\x02\x02P\u059D\x03\x02\x02\x02R\u059F\x03\x02" +
		"\x02\x02T\u065A\x03\x02\x02\x02V\u065C\x03\x02\x02\x02X\u065E\x03\x02" +
		"\x02\x02Z\u0660\x03\x02\x02\x02\\\u0662\x03\x02\x02\x02^\u0664\x03\x02" +
		"\x02\x02`\u0666\x03\x02\x02\x02b\u0668\x03\x02\x02\x02d\u0679\x03\x02" +
		"\x02\x02f\u06BC\x03\x02\x02\x02h\u06BE\x03\x02\x02\x02j\u06CF\x03\x02" +
		"\x02\x02l\u06D3\x03\x02\x02\x02n\u06D5\x03\x02\x02\x02p\u06D7\x03\x02" +
		"\x02\x02r\u06D9\x03\x02\x02\x02t\u0702\x03\x02\x02\x02v\u0718\x03\x02" +
		"\x02\x02x\u072C\x03\x02\x02\x02z\u072E\x03\x02\x02\x02|\u07A3\x03\x02" +
		"\x02\x02~\u07A7\x03\x02\x02\x02\x80\u07AB\x03\x02\x02\x02\x82\u07AF\x03" +
		"\x02\x02\x02\x84\u07B1\x03\x02\x02\x02\x86\u07DA\x03\x02\x02\x02\x88\u07DC" +
		"\x03\x02\x02\x02\x8A\u07F8\x03\x02\x02\x02\x8C\u07FA\x03\x02\x02\x02\x8E" +
		"\u081D\x03\x02\x02\x02\x90\u08A0\x03\x02\x02\x02\x92\u08A2\x03\x02\x02" +
		"\x02\x94\u08A4\x03\x02\x02\x02\x96\u08A6\x03\x02\x02\x02\x98\u08A8\x03" +
		"\x02\x02\x02\x9A\u08C8\x03\x02\x02\x02\x9C\u08E8\x03\x02\x02\x02\x9E\u0908" +
		"\x03\x02\x02\x02\xA0\u0928\x03\x02\x02\x02\xA2\u094A\x03\x02\x02\x02\xA4" +
		"\u094C\x03\x02\x02\x02\xA6\u0975\x03\x02\x02\x02\xA8\u097D\x03\x02\x02" +
		"\x02\xAA\u098F\x03\x02\x02\x02\xAC\u0999\x03\x02\x02\x02\xAE\u099B\x03" +
		"\x02\x02\x02\xB0\u09A4\x03\x02\x02\x02\xB2\u09B9\x03\x02\x02\x02\xB4\u09CE" +
		"\x03\x02\x02\x02\xB6\u09E3\x03\x02\x02\x02\xB8\u09F8\x03\x02\x02\x02\xBA" +
		"\u0A0D\x03\x02\x02\x02\xBC\u0A27\x03\x02\x02\x02\xBE\u0A3E\x03\x02\x02" +
		"\x02\xC0\u0A58\x03\x02\x02\x02\xC2\u0A87\x03\x02\x02\x02\xC4\u0AA1\x03" +
		"\x02\x02\x02\xC6\u0AC3\x03\x02\x02\x02\xC8\u0ACB\x03\x02\x02\x02\xCA\u0AD5" +
		"\x03\x02\x02\x02\xCC\u0B09\x03\x02\x02\x02\xCE\u0B20\x03\x02\x02\x02\xD0" +
		"\u0B22\x03\x02\x02\x02\xD2\u0B2A\x03\x02\x02\x02\xD4\u0B45\x03\x02\x02" +
		"\x02\xD6\u0B47\x03\x02\x02\x02\xD8\u0B53\x03\x02\x02\x02\xDA\u0B55\x03" +
		"\x02\x02\x02\xDC\u0BDD\x03\x02\x02\x02\xDE\u0BDF\x03\x02\x02\x02\xE0\u0BF1" +
		"\x03\x02\x02\x02\xE2\u0C21\x03\x02\x02\x02\xE4\u0C23\x03\x02\x02\x02\xE6" +
		"\u0C25\x03\x02\x02\x02\xE8\u0C27\x03\x02\x02\x02\xEA\u0C46\x03\x02\x02" +
		"\x02\xEC\u0C48\x03\x02\x02\x02\xEE\u0C58\x03\x02\x02\x02\xF0\u0C6C\x03" +
		"\x02\x02\x02\xF2\u0C79\x03\x02\x02\x02\xF4\u0C8F\x03\x02\x02\x02\xF6\u0C9C" +
		"\x03\x02\x02\x02\xF8\u0C9E\x03\x02\x02\x02\xFA\u0CA0\x03\x02\x02\x02\xFC" +
		"\u0CC6\x03\x02\x02\x02\xFE\u0CEA\x03\x02\x02\x02\u0100\u0CEC\x03\x02\x02" +
		"\x02\u0102\u0CEE\x03\x02\x02\x02\u0104\u0CF0\x03\x02\x02\x02\u0106\u0CF2" +
		"\x03\x02\x02\x02\u0108\u0D29\x03\x02\x02\x02\u010A\u0D41\x03\x02\x02\x02" +
		"\u010C\u0D59\x03\x02\x02\x02\u010E\u0D5B\x03\x02\x02\x02\u0110\u0D5D\x03" +
		"\x02\x02\x02\u0112\u0D5F\x03\x02\x02\x02\u0114\u0D61\x03\x02\x02\x02\u0116" +
		"\u0D63\x03\x02\x02\x02\u0118\u0D65\x03\x02\x02\x02\u011A\u0D67\x03\x02" +
		"\x02\x02\u011C\u0D69\x03\x02\x02\x02\u011E\u0D83\x03\x02\x02\x02\u0120" +
		"\u0E04\x03\x02\x02\x02\u0122\u0E16\x03\x02\x02\x02\u0124\u0E1E\x03\x02" +
		"\x02\x02\u0126\u0E6D\x03\x02\x02\x02\u0128\u0E85\x03\x02\x02\x02\u012A" +
		"\u0EA7\x03\x02\x02\x02\u012C\u0EB7\x03\x02\x02\x02\u012E\u0EB9\x03\x02" +
		"\x02\x02\u0130\u0ECF\x03\x02\x02\x02\u0132\u0EE7\x03\x02\x02\x02\u0134" +
		"\u0EF5\x03\x02\x02\x02\u0136\u0F04\x03\x02\x02\x02\u0138\u0F60\x03\x02" +
		"\x02\x02\u013A\u0F62\x03\x02\x02\x02\u013C\u0F72\x03\x02\x02\x02\u013E" +
		"\u0F96\x03\x02\x02\x02\u0140\u0F98\x03\x02\x02\x02\u0142\u0F9A\x03\x02" +
		"\x02\x02\u0144\u0FC5\x03\x02\x02\x02\u0146\u0FCB\x03\x02\x02\x02\u0148" +
		"\u0FCD\x03\x02\x02\x02\u014A\u0FCF\x03\x02\x02\x02\u014C\u1016\x03\x02" +
		"\x02\x02\u014E\u103D\x03\x02\x02\x02\u0150\u104D\x03\x02\x02\x02\u0152" +
		"\u104F\x03\x02\x02\x02\u0154\u1051\x03\x02\x02\x02\u0156\u1088\x03\x02" +
		"\x02\x02\u0158\u108A\x03\x02\x02\x02\u015A\u108C\x03\x02\x02\x02\u015C" +
		"\u10A7\x03\x02\x02\x02\u015E\u10A9\x03\x02\x02\x02\u0160\u10AB\x03\x02" +
		"\x02\x02\u0162\u10D5\x03\x02\x02\x02\u0164\u10D7\x03\x02\x02\x02\u0166" +
		"\u111D\x03\x02\x02\x02\u0168\u111F\x03\x02\x02\x02\u016A\u1121\x03\x02" +
		"\x02\x02\u016C\u1123\x03\x02\x02\x02\u016E\u0170\x05\b\x05\x02\u016F\u016E" +
		"\x03\x02\x02\x02\u0170\u0173\x03\x02\x02\x02\u0171\u016F\x03\x02\x02\x02" +
		"\u0171\u0172\x03\x02\x02\x02\u0172\u0174\x03\x02\x02\x02\u0173\u0171\x03" +
		"\x02\x02\x02\u0174\u0175\x07\x02\x02\x03\u0175\x03\x03\x02\x02\x02\u0176" +
		"\u017D\x07\u0114\x02\x02\u0177\u017D\x07\u0115\x02\x02\u0178\u017D\x07" +
		"\u0113\x02\x02\u0179\u017D\x07\xFD\x02\x02\u017A\u017D\x07\xFE\x02\x02" +
		"\u017B\u017D\x05\x06\x04\x02\u017C\u0176\x03\x02\x02\x02\u017C\u0177\x03" +
		"\x02\x02\x02\u017C\u0178\x03\x02\x02\x02\u017C\u0179\x03\x02\x02\x02\u017C" +
		"\u017A\x03\x02\x02\x02\u017C\u017B\x03\x02\x02\x02\u017D\x05\x03\x02\x02" +
		"\x02\u017E\u0182\x07\xF5\x02\x02\u017F\u0181\n\x02\x02\x02\u0180\u017F" +
		"\x03\x02\x02\x02\u0181\u0184\x03\x02\x02\x02\u0182\u0180\x03\x02\x02\x02" +
		"\u0182\u0183\x03\x02\x02\x02\u0183\u0185\x03\x02\x02\x02\u0184\u0182\x03" +
		"\x02\x02\x02\u0185\u018F\x07\u0115\x02\x02\u0186\u018A\x07\xF6\x02\x02" +
		"\u0187\u0189\n\x02\x02\x02\u0188\u0187\x03\x02\x02\x02\u0189\u018C\x03" +
		"\x02\x02\x02\u018A\u0188\x03\x02\x02\x02\u018A\u018B\x03\x02\x02\x02\u018B" +
		"\u018D\x03\x02\x02\x02\u018C\u018A\x03\x02\x02\x02\u018D\u018F\x07\u0115" +
		"\x02\x02\u018E\u017E\x03\x02\x02\x02\u018E\u0186\x03\x02\x02\x02\u018F" +
		"\x07\x03\x02\x02\x02\u0190\u0192\x05\xA0Q\x02\u0191\u0193\x05\xBE`\x02" +
		"\u0192\u0191\x03\x02\x02\x02\u0192\u0193\x03\x02\x02\x02\u0193\u0195\x03" +
		"\x02\x02\x02\u0194\u0196\x05\n\x06\x02\u0195\u0194\x03\x02\x02\x02\u0195" +
		"\u0196\x03\x02\x02\x02\u0196\u0199\x03\x02\x02\x02\u0197\u0199\x05\x04" +
		"\x03\x02\u0198\u0190\x03\x02\x02\x02\u0198\u0197\x03\x02\x02\x02\u0199" +
		"\t\x03\x02\x02\x02\u019A\u019C\x07D\x02\x02\u019B\u019D\x05\x04\x03\x02" +
		"\u019C\u019B\x03\x02\x02\x02\u019D\u019E\x03\x02\x02\x02\u019E\u019C\x03" +
		"\x02\x02\x02\u019E\u019F\x03\x02\x02\x02\u019F\u01A0\x03\x02\x02\x02\u01A0" +
		"\u01A4\x07Q\x02\x02\u01A1\u01A3\x05\x04\x03\x02\u01A2\u01A1\x03\x02\x02" +
		"\x02\u01A3\u01A6\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02\u01A4\u01A5" +
		"\x03\x02\x02\x02\u01A5\u01A7\x03\x02\x02\x02\u01A6\u01A4\x03\x02\x02\x02" +
		"\u01A7\u01AB\x07\u010B\x02\x02\u01A8\u01AA\x05\x04\x03\x02\u01A9\u01A8" +
		"\x03\x02\x02\x02\u01AA\u01AD\x03\x02\x02\x02\u01AB\u01A9\x03\x02\x02\x02" +
		"\u01AB\u01AC\x03\x02\x02\x02\u01AC\u01B5\x03\x02\x02\x02\u01AD\u01AB\x03" +
		"\x02\x02\x02\u01AE\u01B2\x05\f\x07\x02\u01AF\u01B1\x05\x04\x03\x02\u01B0" +
		"\u01AF\x03\x02\x02\x02\u01B1\u01B4\x03\x02\x02\x02\u01B2\u01B0\x03\x02" +
		"\x02\x02\u01B2\u01B3\x03\x02\x02\x02\u01B3\u01B6\x03\x02\x02\x02\u01B4" +
		"\u01B2\x03\x02\x02\x02\u01B5\u01AE\x03\x02\x02\x02\u01B5\u01B6\x03\x02" +
		"\x02\x02\u01B6\u01BE\x03\x02\x02\x02\u01B7\u01BB\x05\x98M\x02\u01B8\u01BA" +
		"\x05\x04\x03\x02\u01B9\u01B8\x03\x02\x02\x02\u01BA\u01BD\x03\x02\x02\x02" +
		"\u01BB\u01B9\x03\x02\x02\x02\u01BB\u01BC\x03\x02\x02\x02\u01BC\u01BF\x03" +
		"\x02\x02\x02\u01BD\u01BB\x03\x02\x02\x02\u01BE\u01B7\x03\x02\x02\x02\u01BE" +
		"\u01BF\x03\x02\x02\x02\u01BF\u01C7\x03\x02\x02\x02\u01C0\u01C4\x05\x9A" +
		"N\x02\u01C1\u01C3\x05\x04\x03\x02\u01C2\u01C1\x03\x02\x02\x02\u01C3\u01C6" +
		"\x03\x02\x02\x02\u01C4\u01C2\x03\x02\x02\x02\u01C4\u01C5\x03\x02\x02\x02" +
		"\u01C5\u01C8\x03\x02\x02\x02\u01C6\u01C4\x03\x02\x02\x02\u01C7\u01C0\x03" +
		"\x02\x02\x02\u01C7\u01C8\x03\x02\x02\x02\u01C8\u01D0\x03\x02\x02\x02\u01C9" +
		"\u01CD\x05\x9CO\x02\u01CA\u01CC\x05\x04\x03\x02\u01CB\u01CA\x03\x02\x02" +
		"\x02\u01CC\u01CF\x03\x02\x02\x02\u01CD\u01CB\x03\x02\x02\x02\u01CD\u01CE" +
		"\x03\x02\x02\x02\u01CE\u01D1\x03\x02\x02\x02\u01CF\u01CD\x03\x02\x02\x02" +
		"\u01D0\u01C9\x03\x02\x02\x02\u01D0\u01D1\x03\x02\x02\x02\u01D1\u01D9\x03" +
		"\x02\x02\x02\u01D2\u01D6\x05\x9EP\x02\u01D3\u01D5\x05\x04\x03\x02\u01D4" +
		"\u01D3\x03\x02\x02\x02\u01D5\u01D8\x03\x02\x02\x02\u01D6\u01D4\x03\x02" +
		"\x02\x02\u01D6\u01D7\x03\x02\x02\x02\u01D7\u01DA\x03\x02\x02\x02\u01D8" +
		"\u01D6\x03\x02\x02\x02\u01D9\u01D2\x03\x02\x02\x02\u01D9\u01DA\x03\x02" +
		"\x02\x02\u01DA\v\x03\x02\x02\x02\u01DB\u01DD\x07^\x02\x02\u01DC\u01DE" +
		"\x05\x04\x03\x02\u01DD\u01DC\x03\x02\x02\x02\u01DE\u01DF\x03\x02\x02\x02" +
		"\u01DF\u01DD\x03\x02\x02\x02\u01DF\u01E0\x03\x02\x02\x02\u01E0\u01E1\x03" +
		"\x02\x02\x02\u01E1\u01E5\x07\xC3\x02\x02\u01E2\u01E4\x05\x04\x03\x02\u01E3" +
		"\u01E2\x03\x02\x02\x02\u01E4\u01E7\x03\x02\x02\x02\u01E5\u01E3\x03\x02" +
		"\x02\x02\u01E5\u01E6\x03\x02\x02\x02\u01E6\u01E8\x03\x02\x02\x02\u01E7" +
		"\u01E5\x03\x02\x02\x02\u01E8\u01EC\x07\u010B\x02\x02\u01E9\u01EB\x05\x04" +
		"\x03\x02\u01EA\u01E9\x03\x02\x02\x02\u01EB\u01EE\x03\x02\x02\x02\u01EC" +
		"\u01EA\x03\x02\x02\x02\u01EC\u01ED\x03\x02\x02\x02\u01ED\u01FC\x03\x02" +
		"\x02\x02\u01EE\u01EC\x03\x02\x02\x02\u01EF\u01F3\x05\x0E\b\x02\u01F0\u01F3" +
		"\x05r:\x02\u01F1\u01F3\x058\x1D\x02\u01F2\u01EF\x03\x02\x02\x02\u01F2" +
		"\u01F0\x03\x02\x02\x02\u01F2\u01F1\x03\x02\x02\x02\u01F3\u01F7\x03\x02" +
		"\x02\x02\u01F4\u01F6\x05\x04\x03\x02\u01F5\u01F4\x03\x02\x02\x02\u01F6" +
		"\u01F9\x03\x02\x02\x02\u01F7\u01F5\x03\x02\x02\x02\u01F7\u01F8\x03\x02" +
		"\x02\x02\u01F8\u01FB\x03\x02\x02\x02\u01F9\u01F7\x03\x02\x02\x02\u01FA" +
		"\u01F2\x03\x02\x02\x02\u01FB\u01FE\x03\x02\x02\x02\u01FC\u01FA\x03\x02" +
		"\x02\x02\u01FC\u01FD\x03\x02\x02\x02\u01FD\r\x03\x02\x02\x02\u01FE\u01FC" +
		"\x03\x02\x02\x02\u01FF\u0201\x07]\x02\x02\u0200\u0202\x05\x04\x03\x02" +
		"\u0201\u0200\x03\x02\x02\x02\u0202\u0203\x03\x02\x02\x02\u0203\u0201\x03" +
		"\x02\x02\x02\u0203\u0204\x03\x02\x02\x02\u0204\u0205\x03\x02\x02\x02\u0205" +
		"\u0209\x05\u0148\xA5\x02\u0206\u0208\x05\x04\x03\x02\u0207\u0206\x03\x02" +
		"\x02\x02\u0208\u020B\x03\x02\x02\x02\u0209\u0207\x03\x02\x02\x02\u0209" +
		"\u020A\x03\x02\x02\x02\u020A\u0215\x03\x02\x02\x02\u020B\u0209\x03\x02" +
		"\x02\x02\u020C\u0210\x05\x10\t\x02\u020D\u020F\x05\x04\x03\x02\u020E\u020D" +
		"\x03\x02\x02\x02\u020F\u0212\x03\x02\x02\x02\u0210\u020E\x03\x02\x02\x02" +
		"\u0210\u0211\x03\x02\x02\x02\u0211\u0214\x03\x02\x02\x02\u0212\u0210\x03" +
		"\x02\x02\x02\u0213\u020C\x03\x02\x02\x02\u0214\u0217\x03\x02\x02\x02\u0215" +
		"\u0213\x03\x02\x02\x02\u0215\u0216\x03\x02\x02\x02\u0216\u0218\x03\x02" +
		"\x02\x02\u0217\u0215\x03\x02\x02\x02\u0218\u021C\x07\u010B\x02\x02\u0219" +
		"\u021B\x05\x04\x03\x02\u021A\u0219\x03\x02\x02\x02\u021B\u021E\x03\x02" +
		"\x02\x02\u021C\u021A\x03\x02\x02\x02\u021C\u021D\x03\x02\x02\x02\u021D" +
		"\u0228\x03\x02\x02\x02\u021E\u021C\x03\x02\x02\x02\u021F\u0223\x05\x12" +
		"\n\x02\u0220\u0222\x05\x04\x03\x02\u0221\u0220\x03\x02\x02\x02\u0222\u0225" +
		"\x03\x02\x02\x02\u0223\u0221\x03\x02\x02\x02\u0223\u0224\x03\x02\x02\x02" +
		"\u0224\u0227\x03\x02\x02\x02\u0225\u0223\x03\x02\x02\x02\u0226\u021F\x03" +
		"\x02\x02\x02\u0227\u022A\x03\x02\x02\x02\u0228\u0226\x03\x02\x02\x02\u0228" +
		"\u0229\x03\x02\x02\x02\u0229\x0F\x03\x02\x02\x02\u022A\u0228\x03\x02\x02" +
		"\x02\u022B\u022D\x07x\x02\x02\u022C\u022E\x05\x04\x03\x02\u022D\u022C" +
		"\x03\x02\x02\x02\u022E\u022F\x03\x02\x02\x02\u022F\u022D\x03\x02\x02\x02" +
		"\u022F\u0230\x03\x02\x02\x02\u0230\u0232\x03\x02\x02\x02\u0231\u022B\x03" +
		"\x02\x02\x02\u0231\u0232\x03\x02\x02\x02\u0232\u0233\x03\x02\x02\x02\u0233" +
		"\u0249\x07\\\x02\x02\u0234\u0236\x07x\x02\x02\u0235\u0237\x05\x04\x03" +
		"\x02\u0236\u0235\x03\x02\x02\x02\u0237\u0238\x03\x02\x02\x02\u0238\u0236" +
		"\x03\x02\x02\x02\u0238\u0239\x03\x02\x02\x02\u0239\u023B\x03\x02\x02\x02" +
		"\u023A\u0234\x03\x02\x02\x02\u023A\u023B\x03\x02\x02\x02\u023B\u023C\x03" +
		"\x02\x02\x02\u023C\u0249\x07j\x02\x02\u023D\u0249\x05\u013C\x9F\x02\u023E" +
		"\u0249\x05\x8EH\x02\u023F\u0249\x05\x8CG\x02\u0240\u0249\x05\x88E\x02" +
		"\u0241\u0249\x05\x84C\x02\u0242\u0249\x05z>\x02\u0243\u0249\x05v<\x02" +
		"\u0244\u0249\x05\u013A\x9E\x02\u0245\u0249\x05\u0128\x95\x02\u0246\u0249" +
		"\x05\u0124\x93\x02\u0247\u0249\x05\u0120\x91\x02\u0248\u0231\x03\x02\x02" +
		"\x02\u0248\u023A\x03\x02\x02\x02\u0248\u023D\x03\x02\x02\x02\u0248\u023E" +
		"\x03\x02\x02\x02\u0248\u023F\x03\x02\x02\x02\u0248\u0240\x03\x02\x02\x02" +
		"\u0248\u0241\x03\x02\x02\x02\u0248\u0242\x03\x02\x02\x02\u0248\u0243\x03" +
		"\x02\x02\x02\u0248\u0244\x03\x02\x02\x02\u0248\u0245\x03\x02\x02\x02\u0248" +
		"\u0246\x03\x02\x02\x02\u0248\u0247\x03\x02\x02\x02\u0249\x11\x03\x02\x02" +
		"\x02\u024A\u0254\x05\x14\v\x02\u024B\u024D\x05\x04\x03\x02\u024C\u024B" +
		"\x03\x02\x02\x02\u024D\u024E\x03\x02\x02\x02\u024E\u024C\x03\x02\x02\x02" +
		"\u024E\u024F\x03\x02\x02\x02\u024F\u0252\x03\x02\x02\x02\u0250\u0253\x05" +
		"p9\x02\u0251\u0253\x07`\x02\x02\u0252\u0250\x03\x02\x02\x02\u0252\u0251" +
		"\x03\x02\x02\x02\u0253\u0255\x03\x02\x02\x02\u0254\u024C\x03\x02\x02\x02" +
		"\u0254\u0255\x03\x02\x02\x02\u0255\u0263\x03\x02\x02\x02\u0256\u0258\x05" +
		"\x04\x03\x02\u0257\u0256\x03\x02\x02\x02\u0258\u0259\x03\x02\x02\x02\u0259" +
		"\u0257\x03\x02\x02\x02\u0259\u025A\x03\x02\x02\x02\u025A\u025B\x03\x02" +
		"\x02\x02\u025B\u025D\x07\xB2\x02\x02\u025C\u025E\x05\x04\x03\x02\u025D" +
		"\u025C\x03\x02\x02\x02\u025E\u025F\x03\x02\x02\x02\u025F\u025D\x03\x02" +
		"\x02\x02\u025F\u0260\x03\x02\x02\x02\u0260\u0261\x03\x02\x02\x02\u0261" +
		"\u0262\x05n8\x02\u0262\u0264\x03\x02\x02\x02\u0263\u0257\x03\x02\x02\x02" +
		"\u0263\u0264\x03\x02\x02\x02\u0264\u026E\x03\x02\x02\x02\u0265\u0267\x05" +
		"\x04\x03\x02\u0266\u0265\x03\x02\x02\x02\u0267\u0268\x03\x02\x02\x02\u0268" +
		"\u0266\x03\x02\x02\x02\u0268\u0269\x03\x02\x02\x02\u0269\u026A\x03\x02" +
		"\x02\x02\u026A\u026B\x05\x16\f\x02\u026B\u026D\x03\x02\x02\x02\u026C\u0266" +
		"\x03\x02\x02\x02\u026D\u0270\x03\x02\x02\x02\u026E\u026C\x03\x02\x02\x02" +
		"\u026E\u026F\x03\x02\x02\x02\u026F\u0271\x03\x02\x02\x02\u0270\u026E\x03" +
		"\x02\x02\x02\u0271\u0272\x07\u010B\x02\x02\u0272\x13\x03\x02\x02\x02\u0273" +
		"\u0274\x07\u0110\x02\x02\u0274\x15\x03\x02\x02\x02\u0275\u0277\x07x\x02" +
		"\x02\u0276\u0278\x05\x04\x03\x02\u0277\u0276\x03\x02\x02\x02\u0278\u0279" +
		"\x03\x02\x02\x02\u0279\u0277\x03\x02\x02\x02\u0279\u027A\x03\x02\x02\x02" +
		"\u027A\u027C\x03\x02\x02\x02\u027B\u0275\x03\x02\x02\x02\u027B\u027C\x03" +
		"\x02\x02\x02\u027C\u027D\x03\x02\x02\x02\u027D\u02D1\x07\\\x02\x02\u027E" +
		"\u0280\x07x\x02\x02\u027F\u0281\x05\x04\x03\x02\u0280\u027F\x03\x02\x02" +
		"\x02\u0281\u0282\x03\x02\x02\x02\u0282\u0280\x03\x02\x02\x02\u0282\u0283" +
		"\x03\x02\x02\x02\u0283\u0285\x03\x02\x02\x02\u0284\u027E\x03\x02\x02\x02" +
		"\u0284\u0285\x03\x02\x02\x02\u0285\u0286\x03\x02\x02\x02\u0286\u02D1\x07" +
		"j\x02\x02\u0287\u02D1\x05h5\x02\u0288\u02D1\x05d3\x02\u0289\u0291\x07" +
		"\xCA\x02\x02\u028A\u028C\x05\x04\x03\x02\u028B\u028A\x03\x02\x02\x02\u028C" +
		"\u028D\x03\x02\x02\x02\u028D\u028B\x03\x02\x02\x02\u028D\u028E\x03\x02" +
		"\x02\x02\u028E\u028F\x03\x02\x02\x02\u028F\u0290\x07x\x02\x02\u0290\u0292" +
		"\x03\x02\x02\x02\u0291\u028B\x03\x02\x02\x02\u0291\u0292\x03\x02\x02\x02" +
		"\u0292\u0294\x03\x02\x02\x02\u0293\u0295\x05\x04\x03\x02\u0294\u0293\x03" +
		"\x02\x02\x02\u0295\u0296\x03\x02\x02\x02\u0296\u0294\x03\x02\x02\x02\u0296" +
		"\u0297\x03\x02\x02\x02\u0297\u0299\x03\x02\x02\x02\u0298\u0289\x03\x02" +
		"\x02\x02\u0298\u0299\x03\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A" +
		"\u02A8\t\x03\x02\x02\u029B\u029D\x05\x04\x03\x02\u029C\u029B\x03\x02\x02" +
		"\x02\u029D\u029E\x03\x02\x02\x02\u029E\u029C\x03\x02\x02\x02\u029E\u029F" +
		"\x03\x02\x02\x02\u029F\u02A0\x03\x02\x02\x02\u02A0\u02A2\x07\xC7\x02\x02" +
		"\u02A1\u02A3\x05\x04\x03\x02\u02A2\u02A1\x03\x02\x02\x02\u02A3\u02A4\x03" +
		"\x02\x02\x02\u02A4\u02A2\x03\x02\x02\x02\u02A4\u02A5\x03\x02\x02\x02\u02A5" +
		"\u02A6\x03\x02\x02\x02\u02A6\u02A7\x07\"\x02\x02\u02A7\u02A9\x03\x02\x02" +
		"\x02\u02A8\u029C\x03\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9\u02D1" +
		"\x03\x02\x02\x02\u02AA\u02D1\x05&\x14\x02\u02AB\u02B3\t\x04\x02\x02\u02AC" +
		"\u02AE\x05\x04\x03\x02\u02AD\u02AC\x03\x02\x02\x02\u02AE\u02AF\x03\x02" +
		"\x02\x02\u02AF\u02AD\x03\x02\x02\x02\u02AF\u02B0\x03\x02\x02\x02\u02B0" +
		"\u02B1\x03\x02\x02\x02\u02B1\u02B2\t\x05\x02\x02\u02B2\u02B4\x03\x02\x02" +
		"\x02\u02B3\u02AD\x03\x02\x02\x02\u02B3\u02B4\x03\x02\x02\x02\u02B4\u02D1" +
		"\x03\x02\x02\x02\u02B5\u02BD\t\x06\x02\x02\u02B6\u02B8\x05\x04\x03\x02" +
		"\u02B7\u02B6\x03\x02\x02\x02\u02B8\u02B9\x03\x02\x02\x02\u02B9\u02B7\x03" +
		"\x02\x02\x02\u02B9\u02BA\x03\x02\x02\x02\u02BA\u02BB\x03\x02\x02\x02\u02BB" +
		"\u02BC\x07\xBE\x02\x02\u02BC\u02BE\x03\x02\x02\x02\u02BD\u02B7\x03\x02" +
		"\x02\x02\u02BD\u02BE\x03\x02\x02\x02\u02BE\u02D1\x03\x02\x02\x02\u02BF" +
		"\u02C1\x07\x1A\x02\x02\u02C0\u02C2\x05\x04\x03\x02\u02C1\u02C0\x03\x02" +
		"\x02\x02\u02C2\u02C3\x03\x02\x02\x02\u02C3\u02C1\x03\x02\x02\x02\u02C3" +
		"\u02C4\x03\x02\x02\x02\u02C4\u02CB\x03\x02\x02\x02\u02C5\u02C7\x07\xEF" +
		"\x02\x02\u02C6\u02C8\x05\x04\x03\x02\u02C7\u02C6\x03\x02\x02\x02\u02C8" +
		"\u02C9\x03\x02\x02\x02\u02C9\u02C7\x03\x02\x02\x02\u02C9\u02CA\x03\x02" +
		"\x02\x02\u02CA\u02CC\x03\x02\x02\x02\u02CB\u02C5\x03\x02\x02\x02\u02CB" +
		"\u02CC\x03\x02\x02\x02\u02CC\u02CD\x03\x02\x02\x02\u02CD\u02CE\x07\xF4" +
		"\x02\x02\u02CE\u02D1\x03\x02\x02\x02\u02CF\u02D1\x05\x18\r\x02\u02D0\u027B" +
		"\x03\x02\x02\x02\u02D0\u0284\x03\x02\x02\x02\u02D0\u0287\x03\x02\x02\x02" +
		"\u02D0\u0288\x03\x02\x02\x02\u02D0\u0298\x03\x02\x02\x02\u02D0\u02AA\x03" +
		"\x02\x02\x02\u02D0\u02AB\x03\x02\x02\x02\u02D0\u02B5\x03\x02\x02\x02\u02D0" +
		"\u02BF\x03\x02\x02\x02\u02D0\u02CF\x03\x02\x02\x02\u02D1\x17\x03\x02\x02" +
		"\x02\u02D2\u02D4\x07\xEB\x02\x02\u02D3\u02D5\x05\x04\x03\x02\u02D4\u02D3" +
		"\x03\x02\x02\x02\u02D5\u02D6\x03\x02\x02\x02\u02D6\u02D4\x03\x02\x02\x02" +
		"\u02D6\u02D7\x03\x02\x02\x02\u02D7\u02DE\x03\x02\x02\x02\u02D8\u02DA\x07" +
		"x\x02\x02\u02D9\u02DB\x05\x04\x03\x02\u02DA\u02D9\x03\x02\x02\x02\u02DB" +
		"\u02DC\x03\x02\x02\x02\u02DC\u02DA\x03\x02\x02\x02\u02DC\u02DD\x03\x02" +
		"\x02\x02\u02DD\u02DF\x03\x02\x02\x02\u02DE\u02D8\x03\x02\x02\x02\u02DE" +
		"\u02DF\x03\x02\x02\x02\u02DF\u02ED\x03\x02\x02\x02\u02E0\u02E2\x07\xEC" +
		"\x02\x02\u02E1\u02E3\x05\x04\x03\x02\u02E2\u02E1\x03\x02\x02\x02\u02E3" +
		"\u02E4\x03\x02\x02\x02\u02E4\u02E2\x03\x02\x02\x02\u02E4\u02E5\x03\x02" +
		"\x02\x02\u02E5\u02E6\x03\x02\x02\x02\u02E6\u02E8\x07\t\x02\x02\u02E7\u02E9" +
		"\x05\x04\x03\x02\u02E8\u02E7\x03\x02\x02\x02\u02E9\u02EA\x03\x02\x02\x02" +
		"\u02EA\u02E8\x03\x02\x02\x02\u02EA\u02EB\x03\x02\x02\x02\u02EB\u02ED\x03" +
		"\x02\x02\x02\u02EC\u02D2\x03\x02\x02\x02\u02EC\u02E0\x03\x02\x02\x02\u02ED" +
		"\u02EE\x03\x02\x02\x02\u02EE\u02F8\x05\x1A\x0E\x02\u02EF\u02F1\x05\x04" +
		"\x03\x02\u02F0\u02EF\x03\x02\x02\x02\u02F1\u02F2\x03\x02\x02\x02\u02F2" +
		"\u02F0\x03\x02\x02\x02\u02F2\u02F3\x03\x02\x02\x02\u02F3\u02F4\x03\x02" +
		"\x02\x02\u02F4\u02F5\x05\x1A\x0E\x02\u02F5\u02F7\x03\x02\x02\x02\u02F6" +
		"\u02F0\x03\x02\x02\x02\u02F7\u02FA\x03\x02\x02\x02\u02F8\u02F6\x03\x02" +
		"\x02\x02\u02F8\u02F9\x03\x02\x02\x02\u02F9\x19\x03\x02\x02\x02\u02FA\u02F8" +
		"\x03\x02\x02\x02\u02FB\u0303\x05\x1C\x0F\x02\u02FC\u02FE\x05\x04\x03\x02" +
		"\u02FD\u02FC\x03\x02\x02\x02\u02FE\u02FF\x03\x02\x02\x02\u02FF\u02FD\x03" +
		"\x02\x02\x02\u02FF\u0300\x03\x02\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301" +
		"\u0302\x05\x1E\x10\x02\u0302\u0304\x03\x02\x02\x02\u0303\u02FD\x03\x02" +
		"\x02\x02\u0303\u0304\x03\x02\x02\x02\u0304\x1B\x03\x02\x02\x02\u0305\u0317" +
		"\x05$\x13\x02\u0306\u0308\x07\xB4\x02\x02\u0307\u0309\x05\x04\x03\x02" +
		"\u0308\u0307\x03\x02\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\u0308\x03" +
		"\x02\x02\x02\u030A\u030B\x03\x02\x02\x02\u030B\u030C\x03\x02\x02\x02\u030C" +
		"\u030D\x05\"\x12\x02\u030D\u0317\x03\x02\x02\x02\u030E\u0310\x07\\\x02" +
		"\x02\u030F\u0311\x05\x04\x03\x02\u0310\u030F\x03\x02\x02\x02\u0311\u0312" +
		"\x03\x02\x02\x02\u0312\u0310\x03\x02\x02\x02\u0312\u0313\x03\x02\x02\x02" +
		"\u0313\u0314\x03\x02\x02\x02\u0314\u0315\x05 \x11\x02\u0315\u0317\x03" +
		"\x02\x02\x02\u0316\u0305\x03\x02\x02\x02\u0316\u0306\x03\x02\x02\x02\u0316" +
		"\u030E\x03\x02\x02\x02\u0317\x1D\x03\x02\x02\x02\u0318\u031A\t\x07\x02" +
		"\x02\u0319\u031B\x05\x04\x03\x02\u031A\u0319\x03\x02\x02\x02\u031B\u031C" +
		"\x03\x02\x02\x02\u031C\u031A\x03\x02\x02\x02\u031C\u031D\x03\x02\x02\x02" +
		"\u031D\u031E\x03\x02\x02\x02\u031E\u031F\x05\x1C\x0F\x02\u031F\x1F\x03" +
		"\x02\x02\x02\u0320\u0321\x07\u0112\x02\x02\u0321!\x03\x02\x02\x02\u0322" +
		"\u0323\x05\xDEp\x02\u0323#\x03\x02\x02\x02\u0324\u0325\t\b\x02\x02\u0325" +
		"%\x03\x02\x02\x02\u0326\u0328\x07\x94\x02\x02\u0327\u0329\x05\x04\x03" +
		"\x02\u0328\u0327\x03\x02\x02\x02\u0329\u032A\x03\x02\x02\x02\u032A\u0328" +
		"\x03\x02\x02\x02\u032A\u032B\x03\x02\x02\x02\u032B\u032C\x03\x02\x02\x02" +
		"\u032C\u0336\x050\x19\x02\u032D\u032F\x05\x04\x03\x02\u032E\u032D\x03" +
		"\x02\x02\x02\u032F\u0330\x03\x02\x02\x02\u0330\u032E\x03\x02\x02\x02\u0330" +
		"\u0331\x03\x02\x02";
	private static readonly _serializedATNSegment3: string =
		"\x02\u0331\u0332\x03\x02\x02\x02\u0332\u0333\x05,\x17\x02\u0333\u0335" +
		"\x03\x02\x02\x02\u0334\u032E\x03\x02\x02\x02\u0335\u0338\x03\x02\x02\x02" +
		"\u0336\u0334\x03\x02\x02\x02\u0336\u0337\x03\x02\x02\x02\u0337\u0340\x03" +
		"\x02\x02\x02\u0338\u0336\x03\x02\x02\x02\u0339\u033B\x05\x04\x03\x02\u033A" +
		"\u0339\x03\x02\x02\x02\u033B\u033C\x03\x02\x02\x02\u033C\u033A\x03\x02" +
		"\x02\x02\u033C\u033D\x03\x02\x02\x02\u033D\u033E\x03\x02\x02\x02\u033E" +
		"\u033F\x05(\x15\x02\u033F\u0341\x03\x02\x02\x02\u0340\u033A\x03\x02\x02" +
		"\x02\u0340\u0341\x03\x02\x02\x02\u0341\'\x03\x02\x02\x02\u0342\u0344\x07" +
		"s\x02\x02\u0343\u0345\x05\x04\x03\x02\u0344\u0343\x03\x02\x02\x02\u0345" +
		"\u0346\x03\x02\x02\x02\u0346\u0344\x03\x02\x02\x02\u0346\u0347\x03\x02" +
		"\x02\x02\u0347\u034E\x03\x02\x02\x02\u0348\u034A\x07\x1D\x02\x02\u0349" +
		"\u034B\x05\x04\x03\x02\u034A\u0349\x03\x02\x02\x02\u034B\u034C\x03\x02" +
		"\x02\x02\u034C\u034A\x03\x02\x02\x02\u034C\u034D\x03\x02\x02\x02\u034D" +
		"\u034F\x03\x02\x02\x02\u034E\u0348\x03\x02\x02\x02\u034E\u034F\x03\x02" +
		"\x02\x02\u034F\u0350\x03\x02\x02\x02\u0350\u035A\x05*\x16\x02\u0351\u0353" +
		"\x05\x04\x03\x02\u0352\u0351\x03\x02\x02\x02\u0353\u0354\x03\x02\x02\x02" +
		"\u0354\u0352\x03\x02\x02\x02\u0354\u0355\x03\x02\x02\x02\u0355\u0356\x03" +
		"\x02\x02\x02\u0356\u0357\x05*\x16\x02\u0357\u0359\x03\x02\x02\x02\u0358" +
		"\u0352\x03\x02\x02\x02\u0359\u035C\x03\x02\x02\x02\u035A\u0358\x03\x02" +
		"\x02\x02\u035A\u035B\x03\x02\x02\x02\u035B)\x03\x02\x02\x02\u035C\u035A" +
		"\x03\x02\x02\x02\u035D\u035E\x07\u0112\x02\x02\u035E+\x03\x02\x02\x02" +
		"\u035F\u0361\t\t\x02\x02\u0360\u0362\x05\x04\x03\x02\u0361\u0360\x03\x02" +
		"\x02\x02\u0362\u0363\x03\x02\x02\x02\u0363\u0361\x03\x02\x02\x02\u0363" +
		"\u0364\x03\x02\x02\x02\u0364\u036B\x03\x02\x02\x02\u0365\u0367\x07|\x02" +
		"\x02\u0366\u0368\x05\x04\x03\x02\u0367\u0366\x03\x02\x02\x02\u0368\u0369" +
		"\x03\x02\x02\x02\u0369\u0367\x03\x02\x02\x02\u0369\u036A\x03\x02\x02\x02" +
		"\u036A\u036C\x03\x02\x02\x02\u036B\u0365\x03\x02\x02\x02\u036B\u036C\x03" +
		"\x02\x02\x02\u036C\u0373\x03\x02\x02\x02\u036D\u036F\x07x\x02\x02\u036E" +
		"\u0370\x05\x04\x03\x02\u036F\u036E\x03\x02\x02\x02\u0370\u0371\x03\x02" +
		"\x02\x02\u0371\u036F\x03\x02\x02\x02\u0371\u0372\x03\x02\x02\x02\u0372" +
		"\u0374\x03\x02\x02\x02\u0373\u036D\x03\x02\x02\x02\u0373\u0374\x03\x02" +
		"\x02\x02\u0374\u0375\x03\x02\x02\x02\u0375\u037F\x05.\x18\x02\u0376\u0378" +
		"\x05\x04\x03\x02\u0377\u0376\x03\x02\x02\x02\u0378\u0379\x03\x02\x02\x02" +
		"\u0379\u0377\x03\x02\x02\x02\u0379\u037A\x03\x02\x02\x02\u037A\u037B\x03" +
		"\x02\x02\x02\u037B\u037C\x05.\x18\x02\u037C\u037E\x03\x02\x02\x02\u037D" +
		"\u0377\x03\x02\x02\x02\u037E\u0381\x03\x02\x02\x02\u037F\u037D\x03\x02" +
		"\x02\x02\u037F\u0380\x03\x02\x02\x02\u0380-\x03\x02\x02\x02\u0381\u037F" +
		"\x03\x02\x02\x02\u0382\u0383\x05\xDEp\x02\u0383/\x03\x02\x02\x02\u0384" +
		"\u0386\x052\x1A\x02\u0385\u0387\x05\x04\x03\x02\u0386\u0385\x03\x02\x02" +
		"\x02\u0387\u0388\x03\x02\x02\x02\u0388\u0386\x03\x02\x02\x02\u0388\u0389" +
		"\x03\x02\x02\x02\u0389\u038A\x03\x02\x02\x02\u038A\u038B\x07\xE2\x02\x02" +
		"\u038B\u03B5\x03\x02\x02\x02\u038C\u038E\x054\x1B\x02\u038D\u038F\x05" +
		"\x04\x03\x02\u038E\u038D\x03\x02\x02\x02\u038F\u0390\x03\x02\x02\x02\u0390" +
		"\u038E\x03\x02\x02\x02\u0390\u0391\x03\x02\x02\x02\u0391\u0392\x03\x02" +
		"\x02\x02\u0392\u0394\x07\xE3\x02\x02\u0393\u0395\x05\x04\x03\x02\u0394" +
		"\u0393\x03\x02\x02\x02\u0395\u0396\x03\x02\x02\x02\u0396\u0394\x03\x02" +
		"\x02\x02\u0396\u0397\x03\x02\x02\x02\u0397\u0398\x03\x02\x02\x02\u0398" +
		"\u039A\x056\x1C\x02\u0399\u039B\x05\x04\x03\x02\u039A\u0399\x03\x02\x02" +
		"\x02\u039B\u039C\x03\x02\x02\x02\u039C\u039A\x03\x02\x02\x02\u039C\u039D" +
		"\x03\x02\x02\x02\u039D\u039E\x03\x02\x02\x02\u039E\u03A0\x07\xE2\x02\x02" +
		"\u039F\u03A1\x05\x04\x03\x02\u03A0\u039F\x03\x02\x02\x02\u03A1\u03A2\x03" +
		"\x02\x02\x02\u03A2\u03A0\x03\x02\x02\x02\u03A2\u03A3\x03\x02\x02\x02\u03A3" +
		"\u03A4\x03\x02\x02\x02\u03A4\u03A6\x07L\x02\x02\u03A5\u03A7\x05\x04\x03" +
		"\x02\u03A6\u03A5\x03\x02\x02\x02\u03A7\u03A8\x03\x02\x02\x02\u03A8\u03A6" +
		"\x03\x02\x02\x02\u03A8\u03A9\x03\x02\x02\x02\u03A9\u03B0\x03\x02\x02\x02" +
		"\u03AA\u03AC\x07\x98\x02\x02\u03AB\u03AD\x05\x04\x03\x02\u03AC\u03AB\x03" +
		"\x02\x02\x02\u03AD\u03AE\x03\x02\x02\x02\u03AE\u03AC\x03\x02\x02\x02\u03AE" +
		"\u03AF\x03\x02\x02\x02\u03AF\u03B1\x03\x02\x02\x02\u03B0\u03AA\x03\x02" +
		"\x02\x02\u03B0\u03B1\x03\x02\x02\x02\u03B1\u03B2\x03\x02\x02\x02\u03B2" +
		"\u03B3\x05\x92J\x02\u03B3\u03B5\x03\x02\x02\x02\u03B4\u0384\x03\x02\x02" +
		"\x02\u03B4\u038C\x03\x02\x02\x02\u03B51\x03\x02\x02\x02\u03B6\u03B7\x07" +
		"\u0110\x02\x02\u03B73\x03\x02\x02\x02\u03B8\u03B9\x07\u0110\x02\x02\u03B9" +
		"5\x03\x02\x02\x02\u03BA\u03BB\x07\u0110\x02\x02\u03BB7\x03\x02\x02\x02" +
		"\u03BC\u03BE\x07\xAF\x02\x02\u03BD\u03BF\x05\x04\x03\x02\u03BE\u03BD\x03" +
		"\x02\x02\x02\u03BF\u03C0\x03\x02\x02\x02\u03C0\u03BE\x03\x02\x02\x02\u03C0" +
		"\u03C1\x03\x02\x02\x02\u03C1\u03C2\x03\x02\x02\x02\u03C2\u03C6\x05x=\x02" +
		"\u03C3\u03C5\x05\x04\x03\x02\u03C4\u03C3\x03\x02\x02\x02\u03C5\u03C8\x03" +
		"\x02\x02\x02\u03C6\u03C4\x03\x02\x02\x02\u03C6\u03C7\x03\x02\x02\x02\u03C7" +
		"\u03D2\x03\x02\x02\x02\u03C8\u03C6\x03\x02\x02\x02\u03C9\u03CD\x05T+\x02" +
		"\u03CA\u03CC\x05\x04\x03\x02\u03CB\u03CA\x03\x02\x02\x02\u03CC\u03CF\x03" +
		"\x02\x02\x02\u03CD\u03CB\x03\x02\x02\x02\u03CD\u03CE\x03\x02\x02\x02\u03CE" +
		"\u03D1\x03\x02\x02\x02\u03CF\u03CD\x03\x02\x02\x02\u03D0\u03C9\x03\x02" +
		"\x02\x02\u03D1\u03D4\x03\x02\x02\x02\u03D2\u03D0\x03\x02\x02\x02\u03D2" +
		"\u03D3\x03\x02\x02\x02\u03D3\u03D5\x03\x02\x02\x02\u03D4\u03D2\x03\x02" +
		"\x02\x02\u03D5\u03D9\x07\u010B\x02\x02\u03D6\u03D8\x05\x04\x03\x02\u03D7" +
		"\u03D6\x03\x02\x02\x02\u03D8\u03DB\x03\x02\x02\x02\u03D9\u03D7\x03\x02" +
		"\x02\x02\u03D9\u03DA\x03\x02\x02\x02\u03DA\u03E5\x03\x02\x02\x02\u03DB" +
		"\u03D9\x03\x02\x02\x02\u03DC\u03E0\x05:\x1E\x02\u03DD\u03DF\x05\x04\x03" +
		"\x02\u03DE\u03DD\x03\x02\x02\x02\u03DF\u03E2\x03\x02\x02\x02\u03E0\u03DE" +
		"\x03\x02\x02\x02\u03E0\u03E1\x03\x02\x02\x02\u03E1\u03E4\x03\x02\x02\x02" +
		"\u03E2\u03E0\x03\x02\x02\x02\u03E3\u03DC\x03\x02\x02\x02\u03E4\u03E7\x03" +
		"\x02\x02\x02\u03E5\u03E3\x03\x02\x02\x02\u03E5\u03E6\x03\x02\x02\x02\u03E6" +
		"9\x03\x02\x02\x02\u03E7\u03E5\x03\x02\x02\x02\u03E8\u03F0\x05\x14\v\x02" +
		"\u03E9\u03EB\x05\x04\x03\x02\u03EA\u03E9\x03\x02\x02\x02\u03EB\u03EC\x03" +
		"\x02\x02\x02\u03EC\u03EA\x03\x02\x02\x02\u03EC\u03ED\x03\x02\x02\x02\u03ED" +
		"\u03EE\x03\x02\x02\x02\u03EE\u03EF\x05p9\x02\u03EF\u03F1\x03\x02\x02\x02" +
		"\u03F0\u03EA\x03\x02\x02\x02\u03F0\u03F1\x03\x02\x02\x02\u03F1\u03FB\x03" +
		"\x02\x02\x02\u03F2\u03F4\x05\x04\x03\x02\u03F3\u03F2\x03\x02\x02\x02\u03F4" +
		"\u03F5\x03\x02\x02\x02\u03F5\u03F3\x03\x02\x02\x02\u03F5\u03F6\x03\x02" +
		"\x02\x02\u03F6\u03F7\x03\x02\x02\x02\u03F7\u03F8\x05<\x1F\x02\u03F8\u03FA" +
		"\x03\x02\x02\x02\u03F9\u03F3\x03\x02\x02\x02\u03FA\u03FD\x03\x02\x02\x02" +
		"\u03FB\u03F9\x03\x02\x02\x02\u03FB\u03FC\x03\x02\x02\x02\u03FC\u03FE\x03" +
		"\x02\x02\x02\u03FD\u03FB\x03\x02\x02\x02\u03FE\u03FF\x07\u010B\x02\x02" +
		"\u03FF;\x03\x02\x02\x02\u0400\u0402\x07\x84\x02\x02\u0401\u0403\x05\x04" +
		"\x03\x02\u0402\u0401\x03\x02\x02\x02\u0403\u0404\x03\x02\x02\x02\u0404" +
		"\u0402\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02\u0405\u040C\x03\x02" +
		"\x02\x02\u0406\u0408\x07\x92\x02\x02\u0407\u0409\x05\x04\x03\x02\u0408" +
		"\u0407\x03\x02\x02\x02\u0409\u040A\x03\x02\x02\x02\u040A\u0408\x03\x02" +
		"\x02\x02\u040A\u040B\x03\x02\x02\x02\u040B\u040D\x03\x02\x02\x02\u040C" +
		"\u0406\x03\x02\x02\x02\u040C\u040D\x03\x02\x02\x02\u040D\u0414\x03\x02" +
		"\x02\x02\u040E\u0410\x07x\x02\x02\u040F\u0411\x05\x04\x03\x02\u0410\u040F" +
		"\x03\x02\x02\x02\u0411\u0412\x03\x02\x02\x02\u0412\u0410\x03\x02\x02\x02" +
		"\u0412\u0413\x03\x02\x02\x02\u0413\u0415\x03\x02\x02\x02\u0414\u040E\x03" +
		"\x02\x02\x02\u0414\u0415\x03\x02\x02\x02\u0415\u0416\x03\x02\x02\x02\u0416" +
		"\u0417\x05P)\x02\u0417\u04CF\x03\x02\x02\x02\u0418\u041A\x07\x91\x02\x02" +
		"\u0419\u041B\x05\x04\x03\x02\u041A\u0419\x03\x02\x02\x02\u041B\u041C\x03" +
		"\x02\x02\x02\u041C\u041A\x03\x02\x02\x02\u041C\u041D\x03\x02\x02\x02\u041D" +
		"\u041E\x03\x02\x02\x02\u041E\u0420\x07k\x02\x02\u041F\u0421\x05\x04\x03" +
		"\x02\u0420\u041F\x03\x02\x02\x02\u0421\u0422\x03\x02\x02\x02\u0422\u0420" +
		"\x03\x02\x02\x02\u0422\u0423\x03\x02\x02\x02\u0423\u042A\x03\x02\x02\x02" +
		"\u0424\u0426\x07x\x02\x02\u0425\u0427\x05\x04\x03\x02\u0426\u0425\x03" +
		"\x02\x02\x02\u0427\u0428\x03\x02\x02\x02\u0428\u0426\x03\x02\x02\x02\u0428" +
		"\u0429\x03\x02\x02\x02\u0429\u042B\x03\x02\x02\x02\u042A\u0424\x03\x02" +
		"\x02\x02\u042A\u042B\x03\x02\x02\x02\u042B\u042C\x03\x02\x02\x02\u042C" +
		"\u042D\x05N(\x02\u042D\u04CF\x03\x02\x02\x02\u042E\u0430\x07\xE6\x02\x02" +
		"\u042F\u0431\x05\x04\x03\x02\u0430\u042F\x03\x02\x02\x02\u0431\u0432\x03" +
		"\x02\x02\x02\u0432\u0430\x03\x02\x02\x02\u0432\u0433\x03\x02\x02\x02\u0433" +
		"\u043A\x03\x02\x02\x02\u0434\u0436\x07x\x02\x02\u0435\u0437\x05\x04\x03" +
		"\x02\u0436\u0435\x03\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438\u0436" +
		"\x03\x02\x02\x02\u0438\u0439\x03\x02\x02\x02\u0439\u043B\x03\x02\x02\x02" +
		"\u043A\u0434\x03\x02\x02\x02\u043A\u043B\x03\x02\x02\x02\u043B\u043C\x03" +
		"\x02\x02\x02\u043C\u043D\x05J&\x02\u043D\u04CF\x03\x02\x02\x02\u043E\u0440" +
		"\x07\xEA\x02\x02\u043F\u0441\x05\x04\x03\x02\u0440\u043F\x03\x02\x02\x02" +
		"\u0441\u0442\x03\x02\x02\x02\u0442\u0440\x03\x02\x02\x02\u0442\u0443\x03" +
		"\x02\x02\x02\u0443\u044A\x03\x02\x02\x02\u0444\u0446\x07x\x02\x02\u0445" +
		"\u0447\x05\x04\x03\x02\u0446\u0445\x03\x02\x02\x02\u0447\u0448\x03\x02" +
		"\x02\x02\u0448\u0446\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449" +
		"\u044B\x03\x02\x02\x02\u044A\u0444\x03\x02\x02\x02\u044A\u044B\x03\x02" +
		"\x02\x02\u044B\u044D\x03\x02\x02\x02\u044C\u043E\x03\x02\x02\x02\u044C" +
		"\u044D\x03\x02\x02\x02\u044D\u044E\x03\x02\x02\x02\u044E\u04CF\x07P\x02" +
		"\x02\u044F\u0451\x07\x1A\x02\x02\u0450\u0452\x05\x04\x03\x02\u0451\u0450" +
		"\x03\x02\x02\x02\u0452\u0453\x03\x02\x02\x02\u0453\u0451\x03\x02\x02\x02" +
		"\u0453\u0454\x03\x02\x02\x02\u0454\u045B\x03\x02\x02\x02\u0455\u0457\x07" +
		"\xEF\x02\x02\u0456\u0458\x05\x04\x03\x02\u0457\u0456\x03\x02\x02\x02\u0458" +
		"\u0459\x03\x02\x02\x02\u0459\u0457\x03\x02\x02\x02\u0459\u045A\x03\x02" +
		"\x02\x02\u045A\u045C\x03\x02\x02\x02\u045B\u0455\x03\x02\x02\x02\u045B" +
		"\u045C\x03\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u045E\x07\xF4" +
		"\x02\x02\u045E\u04CF\x03\x02\x02\x02\u045F\u0461\x07)\x02\x02\u0460\u0462" +
		"\x05\x04\x03\x02\u0461\u0460\x03\x02\x02\x02\u0462\u0463\x03\x02\x02\x02" +
		"\u0463\u0461\x03\x02\x02\x02\u0463\u0464\x03\x02\x02\x02\u0464\u046B\x03" +
		"\x02\x02\x02\u0465\u0467\x07\x92\x02\x02\u0466\u0468\x05\x04\x03\x02\u0467" +
		"\u0466\x03\x02\x02\x02\u0468\u0469\x03\x02\x02\x02\u0469\u0467\x03\x02" +
		"\x02\x02\u0469\u046A\x03\x02\x02\x02\u046A\u046C\x03\x02\x02\x02\u046B" +
		"\u0465\x03\x02\x02\x02\u046B\u046C\x03\x02\x02\x02\u046C\u0473\x03\x02" +
		"\x02\x02\u046D\u046F\x07x\x02\x02\u046E\u0470\x05\x04\x03\x02\u046F\u046E" +
		"\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u046F\x03\x02\x02\x02" +
		"\u0471\u0472\x03\x02\x02\x02\u0472\u0474\x03\x02\x02\x02\u0473\u046D\x03" +
		"\x02\x02\x02\u0473\u0474\x03\x02\x02\x02\u0474\u0475\x03\x02\x02\x02\u0475" +
		"\u0476\x05H%\x02\u0476\u04CF\x03\x02\x02\x02\u0477\u047F\x07k\x02\x02" +
		"\u0478\u047A\x05\x04\x03\x02\u0479\u0478\x03\x02\x02\x02\u047A\u047B\x03" +
		"\x02\x02\x02\u047B\u0479\x03\x02\x02\x02\u047B\u047C\x03\x02\x02\x02\u047C" +
		"\u047D\x03\x02\x02\x02\u047D\u047E\x07t\x02\x02\u047E\u0480\x03\x02\x02" +
		"\x02\u047F\u0479\x03\x02\x02\x02\u047F\u0480\x03\x02\x02\x02\u0480\u04CF" +
		"\x03\x02\x02\x02\u0481\u0489\t\x06\x02\x02\u0482\u0484\x05\x04\x03\x02" +
		"\u0483\u0482\x03\x02\x02\x02\u0484\u0485\x03\x02\x02\x02\u0485\u0483\x03" +
		"\x02\x02\x02\u0485\u0486\x03\x02\x02\x02\u0486\u0487\x03\x02\x02\x02\u0487" +
		"\u0488\x07\xBE\x02\x02\u0488\u048A\x03\x02\x02\x02\u0489\u0483\x03\x02" +
		"\x02\x02\u0489\u048A\x03\x02\x02\x02\u048A\u04CF\x03\x02\x02\x02\u048B" +
		"\u04CF\x05h5\x02\u048C\u0494\x07\xCA\x02\x02\u048D\u048F\x05\x04\x03\x02" +
		"\u048E\u048D\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u048E\x03" +
		"\x02\x02\x02\u0490\u0491\x03\x02\x02\x02\u0491\u0492\x03\x02\x02\x02\u0492" +
		"\u0493\x07x\x02\x02\u0493\u0495\x03\x02\x02\x02\u0494\u048E\x03\x02\x02" +
		"\x02\u0494\u0495\x03\x02\x02\x02\u0495\u0497\x03\x02\x02\x02\u0496\u0498" +
		"\x05\x04\x03\x02\u0497\u0496\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02" +
		"\u0499\u0497\x03\x02\x02\x02\u0499\u049A\x03\x02\x02\x02\u049A\u049C\x03" +
		"\x02\x02\x02\u049B\u048C\x03\x02\x02\x02\u049B\u049C\x03\x02\x02\x02\u049C" +
		"\u049D\x03\x02\x02\x02\u049D\u04AB\t\x03\x02\x02\u049E\u04A0\x05\x04\x03" +
		"\x02\u049F\u049E\x03\x02\x02\x02\u04A0\u04A1\x03\x02\x02\x02\u04A1\u049F" +
		"\x03\x02\x02\x02\u04A1\u04A2\x03\x02\x02\x02\u04A2\u04A3\x03\x02\x02\x02" +
		"\u04A3\u04A5\x07\xC7\x02\x02\u04A4\u04A6\x05\x04\x03\x02\u04A5\u04A4\x03" +
		"\x02\x02\x02\u04A6\u04A7\x03\x02\x02\x02\u04A7\u04A5\x03\x02\x02\x02\u04A7" +
		"\u04A8\x03\x02\x02\x02\u04A8\u04A9\x03\x02\x02\x02\u04A9\u04AA\x07\"\x02" +
		"\x02\u04AA\u04AC\x03\x02\x02\x02\u04AB\u049F\x03\x02\x02\x02\u04AB\u04AC" +
		"\x03\x02\x02\x02\u04AC\u04CF\x03\x02\x02\x02\u04AD\u04AF\x07\xCF\x02\x02" +
		"\u04AE\u04B0\x05\x04\x03\x02\u04AF\u04AE\x03\x02\x02\x02\u04B0\u04B1\x03" +
		"\x02\x02\x02\u04B1\u04AF\x03\x02\x02\x02\u04B1\u04B2\x03\x02\x02\x02\u04B2" +
		"\u04B9\x03\x02\x02\x02\u04B3\u04B5\x07x\x02\x02\u04B4\u04B6\x05\x04\x03" +
		"\x02\u04B5\u04B4\x03\x02\x02\x02\u04B6\u04B7\x03\x02\x02\x02\u04B7\u04B5" +
		"\x03\x02\x02\x02\u04B7\u04B8\x03\x02\x02\x02\u04B8\u04BA\x03\x02\x02\x02" +
		"\u04B9\u04B3\x03\x02\x02\x02\u04B9\u04BA\x03\x02\x02\x02\u04BA\u04BB\x03" +
		"\x02\x02\x02\u04BB\u04BC\x05F$\x02\u04BC\u04CF\x03\x02\x02\x02\u04BD\u04BF" +
		"\x07\xEB\x02\x02\u04BE\u04C0\x05\x04\x03\x02\u04BF\u04BE\x03\x02\x02\x02" +
		"\u04C0\u04C1\x03\x02\x02\x02\u04C1\u04BF\x03\x02\x02\x02\u04C1\u04C2\x03" +
		"\x02\x02\x02\u04C2\u04C9\x03\x02\x02\x02\u04C3\u04C5\x07x\x02\x02\u04C4" +
		"\u04C6\x05\x04\x03\x02\u04C5\u04C4\x03\x02\x02\x02\u04C6\u04C7\x03\x02" +
		"\x02\x02\u04C7\u04C5\x03\x02\x02\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8" +
		"\u04CA\x03\x02\x02\x02\u04C9\u04C3\x03\x02\x02\x02\u04C9\u04CA\x03\x02" +
		"\x02\x02\u04CA\u04CB\x03\x02\x02\x02\u04CB\u04CC\x05$\x13\x02\u04CC\u04CF" +
		"\x03\x02\x02\x02\u04CD\u04CF\x05> \x02\u04CE\u0400\x03\x02\x02\x02\u04CE" +
		"\u0418\x03\x02\x02\x02\u04CE\u042E\x03\x02\x02\x02\u04CE\u044C\x03\x02" +
		"\x02\x02\u04CE\u044F\x03\x02\x02\x02\u04CE\u045F\x03\x02\x02\x02\u04CE" +
		"\u0477\x03\x02\x02\x02\u04CE\u0481\x03\x02\x02\x02\u04CE\u048B\x03\x02" +
		"\x02\x02\u04CE\u049B\x03\x02\x02\x02\u04CE\u04AD\x03\x02\x02\x02\u04CE" +
		"\u04BD\x03\x02\x02\x02\u04CE\u04CD\x03\x02\x02\x02\u04CF=\x03\x02\x02" +
		"\x02\u04D0\u04D2\x07\xD6\x02\x02\u04D1\u04D3\x05\x04\x03\x02\u04D2\u04D1" +
		"\x03\x02\x02\x02\u04D3\u04D4\x03\x02\x02\x02\u04D4\u04D2\x03\x02\x02\x02" +
		"\u04D4\u04D5\x03\x02\x02\x02\u04D5\u04D6\x03\x02\x02\x02\u04D6\u04E0\x05" +
		"D#\x02\u04D7\u04D9\x05\x04\x03\x02\u04D8\u04D7\x03\x02\x02\x02\u04D9\u04DA" +
		"\x03\x02\x02\x02\u04DA\u04D8\x03\x02\x02\x02\u04DA\u04DB\x03\x02\x02\x02" +
		"\u04DB\u04DC\x03\x02\x02\x02\u04DC\u04DD\x05D#\x02\u04DD\u04DF\x03\x02" +
		"\x02\x02\u04DE\u04D8\x03\x02\x02\x02\u04DF\u04E2\x03\x02\x02\x02\u04E0" +
		"\u04DE\x03\x02\x02\x02\u04E0\u04E1\x03\x02\x02\x02\u04E1\u04EA\x03\x02" +
		"\x02\x02\u04E2\u04E0\x03\x02\x02\x02\u04E3\u04E5\x05\x04\x03\x02\u04E4" +
		"\u04E3\x03\x02\x02\x02\u04E5\u04E6\x03\x02\x02\x02\u04E6\u04E4\x03\x02" +
		"\x02\x02\u04E6\u04E7\x03\x02\x02\x02\u04E7\u04E8\x03\x02\x02\x02\u04E8" +
		"\u04E9\x07\xE9\x02\x02\u04E9\u04EB\x03\x02\x02\x02\u04EA\u04E4\x03\x02" +
		"\x02\x02\u04EA\u04EB\x03\x02\x02\x02\u04EB\u04F5\x03\x02\x02\x02\u04EC" +
		"\u04EE\x05\x04\x03\x02\u04ED\u04EC\x03\x02\x02\x02\u04EE\u04EF\x03\x02" +
		"\x02\x02\u04EF\u04ED\x03\x02\x02\x02\u04EF\u04F0\x03\x02\x02\x02\u04F0" +
		"\u04F1\x03\x02\x02\x02\u04F1\u04F2\x05B\"\x02\u04F2\u04F4\x03\x02\x02" +
		"\x02\u04F3\u04ED\x03\x02\x02\x02\u04F4\u04F7\x03\x02\x02\x02\u04F5\u04F3" +
		"\x03\x02\x02\x02\u04F5\u04F6\x03\x02\x02\x02\u04F6\u04F9\x03\x02\x02\x02" +
		"\u04F7\u04F5\x03\x02\x02\x02\u04F8\u04D0\x03\x02\x02\x02\u04F9\u04FA\x03" +
		"\x02\x02\x02\u04FA\u04F8\x03\x02\x02\x02\u04FA\u04FB\x03\x02\x02\x02\u04FB" +
		"\u0510\x03\x02\x02\x02\u04FC\u04FE\x05\x04\x03\x02\u04FD\u04FC\x03\x02" +
		"\x02\x02\u04FE\u0501\x03\x02\x02\x02\u04FF\u04FD\x03\x02\x02\x02\u04FF" +
		"\u0500\x03\x02\x02\x02\u0500\u0502\x03\x02\x02\x02\u0501\u04FF\x03\x02" +
		"\x02\x02\u0502\u0504\x07\xBB\x02\x02\u0503\u0505\x05\x04\x03\x02\u0504" +
		"\u0503\x03\x02\x02\x02\u0505\u0506\x03\x02\x02\x02\u0506\u0504\x03\x02" +
		"\x02\x02\u0506\u0507\x03\x02\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508" +
		"\u050A\x07\x98\x02\x02\u0509\u050B\x05\x04\x03\x02\u050A\u0509\x03\x02" +
		"\x02\x02\u050B\u050C\x03\x02\x02\x02\u050C\u050A\x03\x02\x02\x02\u050C" +
		"\u050D\x03\x02\x02\x02\u050D\u050E\x03\x02\x02\x02\u050E\u050F\x05@!\x02" +
		"\u050F\u0511\x03\x02\x02\x02\u0510\u04FF\x03\x02\x02\x02\u0510\u0511\x03" +
		"\x02\x02\x02\u0511?\x03\x02\x02\x02\u0512\u0513\t\n\x02\x02\u0513A\x03" +
		"\x02\x02\x02\u0514\u0515\x07\u0112\x02\x02\u0515C\x03\x02\x02\x02\u0516" +
		"\u0517\x07\u0112\x02\x02\u0517E\x03\x02\x02\x02\u0518\u0519\x05\xDEp\x02" +
		"\u0519G\x03\x02\x02\x02\u051A\u051B\x07\u0110\x02\x02\u051BI\x03\x02\x02" +
		"\x02\u051C\u051E\x07\xB7\x02\x02\u051D\u051F\x05\x04\x03\x02\u051E\u051D" +
		"\x03\x02\x02\x02\u051F\u0520\x03\x02\x02\x02\u0520\u051E\x03\x02\x02\x02" +
		"\u0520\u0521\x03\x02\x02\x02\u0521\u0522\x03\x02\x02\x02\u0522\u0523\x07" +
		"l\x02\x02\u0523\u0567\x03\x02\x02\x02\u0524\u0567\x07\xBD\x02\x02\u0525" +
		"\u0527\x07\x9E\x02\x02\u0526\u0528\x05\x04\x03\x02\u0527\u0526\x03\x02" +
		"\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\u0527\x03\x02\x02\x02\u0529" +
		"\u052A\x03\x02\x02\x02\u052A\u052B\x03\x02\x02\x02\u052B\u052C\x07l\x02" +
		"\x02\u052C\u0567\x03\x02\x02\x02\u052D\u0567\x07\xA2\x02\x02\u052E\u0530" +
		"\x07?\x02\x02\u052F\u0531\x05\x04\x03\x02\u0530\u052F\x03\x02\x02\x02" +
		"\u0531\u0532\x03\x02\x02\x02\u0532\u0530\x03\x02\x02\x02\u0532\u0533\x03" +
		"\x02\x02\x02\u0533\u0534\x03\x02\x02\x02\u0534\u0535\x07l\x02\x02\u0535" +
		"\u0538\x03\x02\x02\x02\u0536\u0538\x07!\x02\x02\u0537\u052E\x03\x02\x02" +
		"\x02\u0537\u0536\x03\x02\x02\x02\u0538\u053A\x03\x02\x02\x02\u0539\u053B" +
		"\x05\x04\x03\x02\u053A\u0539\x03\x02\x02\x02\u053B\u053C\x03\x02\x02\x02" +
		"\u053C\u053A\x03\x02\x02\x02\u053C\u053D\x03\x02\x02\x02\u053D\u053E\x03" +
		"\x02\x02\x02\u053E\u053F\x05L\'\x02\u053F\u0567\x03\x02\x02\x02\u0540" +
		"\u0567\x07N\x02\x02\u0541\u0567\x07G\x02\x02\u0542\u0544\x07?\x02\x02" +
		"\u0543\u0545\x05\x04\x03\x02\u0544\u0543\x03\x02\x02\x02\u0545\u0546\x03" +
		"\x02\x02\x02\u0546\u0544\x03\x02\x02\x02\u0546\u0547\x03\x02\x02\x02\u0547" +
		"\u0548\x03\x02\x02\x02\u0548\u0549\x07g\x02\x02\u0549\u054C\x03\x02\x02" +
		"\x02\u054A\u054C\x07 \x02\x02\u054B\u0542\x03\x02\x02\x02\u054B\u054A" +
		"\x03\x02\x02\x02\u054C\u054E\x03\x02\x02\x02\u054D\u054F\x05\x04\x03\x02" +
		"\u054E\u054D\x03\x02\x02\x02\u054F\u0550\x03\x02\x02\x02\u0550\u054E\x03" +
		"\x02\x02\x02\u0550\u0551\x03\x02\x02\x02\u0551\u0552\x03\x02\x02\x02\u0552" +
		"\u0553\x05L\'\x02\u0553\u0567\x03\x02\x02\x02\u0554\u0556\x07\x9E\x02" +
		"\x02\u0555\u0557\x05\x04\x03\x02\u0556\u0555\x03\x02\x02\x02\u0557\u0558" +
		"\x03\x02\x02\x02\u0558\u0556\x03\x02\x02\x02\u0558\u0559\x03\x02\x02\x02" +
		"\u0559\u055A\x03\x02\x02\x02\u055A\u055B\x07g\x02\x02\u055B\u0567\x03" +
		"\x02\x02\x02\u055C\u0567\x07\xA1\x02\x02\u055D\u055F\x07\xB7\x02\x02\u055E" +
		"\u0560\x05\x04\x03\x02\u055F\u055E\x03\x02\x02\x02\u0560\u0561\x03\x02" +
		"\x02\x02\u0561\u055F\x03\x02\x02\x02\u0561\u0562\x03\x02\x02\x02\u0562" +
		"\u0563\x03\x02\x02\x02\u0563\u0564\x07g\x02\x02\u0564\u0567\x03\x02\x02" +
		"\x02\u0565\u0567\x07\xBC\x02\x02\u0566\u051C\x03\x02\x02\x02\u0566\u0524" +
		"\x03\x02\x02\x02\u0566\u0525\x03\x02\x02\x02\u0566\u052D\x03\x02\x02\x02" +
		"\u0566\u0537\x03\x02\x02\x02\u0566\u0540\x03\x02\x02\x02\u0566\u0541\x03" +
		"\x02\x02\x02\u0566\u054B\x03\x02\x02\x02\u0566\u0554\x03\x02\x02\x02\u0566" +
		"\u055C\x03\x02\x02\x02\u0566\u055D\x03\x02\x02\x02\u0566\u0565\x03\x02" +
		"\x02\x02\u0567K\x03\x02\x02\x02\u0568\u0569\t\n\x02\x02\u0569M\x03\x02" +
		"\x02\x02\u056A\u057C\x05R*\x02\u056B\u056D\x07\xA5\x02\x02\u056C\u056E" +
		"\x05\x04\x03\x02\u056D\u056C\x03\x02\x02\x02\u056E\u056F\x03\x02\x02\x02" +
		"\u056F\u056D\x03\x02\x02\x02\u056F\u0570\x03\x02\x02\x02\u0570\u0571\x03" +
		"\x02\x02\x02\u0571\u0572\x05R*\x02\u0572\u057C\x03\x02\x02\x02\u0573\u0575" +
		"\x07\x91\x02\x02\u0574\u0576\x05\x04\x03\x02\u0575\u0574\x03\x02\x02\x02" +
		"\u0576\u0577\x03\x02\x02\x02\u0577\u0575\x03\x02\x02\x02\u0577\u0578\x03" +
		"\x02\x02\x02\u0578\u0579\x03\x02\x02\x02\u0579\u057A\x07\x9E\x02\x02\u057A" +
		"\u057C\x03\x02\x02\x02\u057B\u056A\x03\x02\x02\x02\u057B\u056B\x03\x02" +
		"\x02\x02\u057B\u0573\x03\x02\x02\x02\u057CO\x03\x02\x02\x02\u057D\u0593" +
		"\x05R*\x02\u057E\u0580\x05\x04\x03\x02\u057F\u057E\x03\x02\x02\x02\u0580" +
		"\u0581\x03\x02\x02\x02\u0581\u057F\x03\x02\x02\x02\u0581\u0582\x03\x02" +
		"\x02\x02\u0582\u0589\x03\x02\x02\x02\u0583\u0585\x07\x98\x02\x02\u0584" +
		"\u0586\x05\x04\x03\x02\u0585\u0584\x03\x02\x02\x02\u0586\u0587\x03\x02" +
		"\x02\x02\u0587\u0585\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588" +
		"\u058A\x03\x02\x02\x02\u0589\u0583\x03\x02\x02\x02\u0589\u058A\x03\x02" +
		"\x02\x02\u058A\u058B\x03\x02\x02\x02\u058B\u058D\x07\x91\x02\x02\u058C" +
		"\u058E\x05\x04\x03\x02\u058D\u058C\x03\x02\x02\x02\u058E\u058F\x03\x02" +
		"\x02\x02\u058F\u058D\x03\x02\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590" +
		"\u0591\x03\x02\x02\x02\u0591\u0592\x07\x9E\x02\x02\u0592\u0594\x03\x02" +
		"\x02\x02\u0593\u057F\x03\x02\x02\x02\u0593\u0594\x03\x02\x02\x02\u0594" +
		"\u059E\x03\x02\x02\x02\u0595\u0597\x07\xA5\x02\x02\u0596\u0598\x05\x04" +
		"\x03\x02\u0597\u0596\x03\x02\x02\x02\u0598\u0599\x03\x02\x02\x02\u0599" +
		"\u0597\x03\x02\x02\x02\u0599\u059A\x03\x02\x02\x02\u059A\u059B\x03\x02" +
		"\x02\x02\u059B\u059C\x05R*\x02\u059C\u059E\x03\x02\x02\x02\u059D\u057D" +
		"\x03\x02\x02\x02\u059D\u0595\x03\x02\x02\x02\u059EQ\x03\x02\x02\x02\u059F" +
		"\u05A0\x07\u0110\x02\x02\u05A0S\x03\x02\x02\x02\u05A1\u05A3\x07x\x02\x02" +
		"\u05A2\u05A4\x05\x04\x03\x02\u05A3\u05A2\x03\x02\x02\x02\u05A4\u05A5\x03" +
		"\x02\x02\x02\u05A5\u05A3\x03\x02\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6" +
		"\u05A8\x03\x02\x02\x02\u05A7\u05A1\x03\x02\x02\x02\u05A7\u05A8\x03\x02" +
		"\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9\u065B\x07j\x02\x02\u05AA\u05AC" +
		"\x07&\x02\x02\u05AB\u05AD\x05\x04\x03\x02\u05AC\u05AB\x03\x02\x02\x02" +
		"\u05AD\u05AE\x03\x02\x02\x02\u05AE\u05AC\x03\x02\x02\x02\u05AE\u05AF\x03" +
		"\x02\x02\x02\u05AF\u05B0\x03\x02\x02\x02\u05B0\u05B1\x05b2\x02\u05B1\u065B" +
		"\x03\x02\x02\x02\u05B2\u05BA\x07?\x02\x02\u05B3\u05B5\x05\x04\x03\x02" +
		"\u05B4\u05B3\x03\x02\x02\x02\u05B5\u05B6\x03\x02\x02\x02\u05B6\u05B4\x03" +
		"\x02\x02\x02\u05B6\u05B7\x03\x02\x02\x02\u05B7\u05B8\x03\x02\x02\x02\u05B8" +
		"\u05B9\x07x\x02\x02\u05B9\u05BB\x03\x02\x02\x02\u05BA\u05B4\x03\x02\x02" +
		"\x02\u05BA\u05BB\x03\x02\x02\x02\u05BB\u05C7\x03\x02\x02\x02\u05BC\u05C4" +
		"\x07@\x02\x02\u05BD\u05BF\x05\x04\x03\x02\u05BE\u05BD\x03\x02\x02\x02" +
		"\u05BF\u05C0\x03\x02\x02\x02\u05C0\u05BE\x03\x02\x02\x02\u05C0\u05C1\x03" +
		"\x02\x02\x02\u05C1\u05C2\x03\x02\x02\x02\u05C2\u05C3\x07\t\x02\x02\u05C3" +
		"\u05C5\x03\x02\x02\x02\u05C4\u05BE\x03\x02\x02\x02\u05C4\u05C5\x03\x02" +
		"\x02\x02\u05C5\u05C7\x03\x02\x02\x02\u05C6\u05B2\x03\x02\x02\x02\u05C6" +
		"\u05BC\x03\x02\x02\x02\u05C7\u05E2\x03\x02\x02\x02\u05C8\u05D2\x05`1\x02" +
		"\u05C9\u05CB\x05\x04\x03\x02\u05CA\u05C9\x03\x02\x02\x02\u05CB\u05CE\x03" +
		"\x02\x02\x02\u05CC\u05CA\x03\x02\x02\x02\u05CC\u05CD\x03\x02\x02\x02\u05CD" +
		"\u05CF\x03\x02\x02\x02\u05CE\u05CC\x03\x02\x02\x02\u05CF\u05D1\x05`1\x02" +
		"\u05D0\u05CC\x03\x02\x02\x02\u05D1\u05D4\x03\x02\x02\x02\u05D2\u05D0\x03" +
		"\x02\x02\x02\u05D2\u05D3\x03\x02\x02\x02\u05D3\u05E3\x03\x02\x02\x02\u05D4" +
		"\u05D2\x03\x02\x02\x02\u05D5\u05DF\x07b\x02\x02\u05D6\u05D8\x05\x04\x03" +
		"\x02\u05D7\u05D6\x03\x02\x02\x02\u05D8\u05DB\x03\x02\x02\x02\u05D9\u05D7" +
		"\x03\x02\x02\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05DC\x03\x02\x02\x02" +
		"\u05DB\u05D9\x03\x02\x02\x02\u05DC\u05DE\x05`1\x02\u05DD\u05D9\x03\x02" +
		"\x02\x02\u05DE\u05E1\x03\x02\x02\x02\u05DF\u05DD\x03\x02\x02\x02\u05DF" +
		"\u05E0\x03\x02\x02\x02\u05E0\u05E3\x03\x02\x02\x02\u05E1\u05DF\x03\x02" +
		"\x02\x02\u05E2";
	private static readonly _serializedATNSegment4: string =
		"\u05C8\x03\x02\x02\x02\u05E2\u05D5\x03\x02\x02\x02\u05E3\u065B\x03\x02" +
		"\x02\x02\u05E4\u05E6\x07\x9E\x02\x02\u05E5\u05E7\x05\x04\x03\x02\u05E6" +
		"\u05E5\x03\x02\x02\x02\u05E7\u05E8\x03\x02\x02\x02\u05E8\u05E6\x03\x02" +
		"\x02\x02\u05E8\u05E9\x03\x02\x02\x02\u05E9\u0606\x03\x02\x02\x02\u05EA" +
		"\u05EC\x07\x81\x02\x02\u05EB\u05ED\x05\x04\x03\x02\u05EC\u05EB\x03\x02" +
		"\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05EC\x03\x02\x02\x02\u05EE" +
		"\u05EF\x03\x02\x02\x02\u05EF\u05F6\x03\x02\x02\x02\u05F0\u05F2\x07x\x02" +
		"\x02\u05F1\u05F3\x05\x04\x03\x02\u05F2\u05F1\x03\x02\x02\x02\u05F3\u05F4" +
		"\x03\x02\x02\x02\u05F4\u05F2\x03\x02\x02\x02\u05F4\u05F5\x03\x02\x02\x02" +
		"\u05F5\u05F7\x03\x02\x02\x02\u05F6\u05F0\x03\x02\x02\x02\u05F6\u05F7\x03" +
		"\x02\x02\x02\u05F7\u0607\x03\x02\x02\x02\u05F8\u05FA\x07\x82\x02\x02\u05F9" +
		"\u05FB\x05\x04\x03\x02\u05FA\u05F9\x03\x02\x02\x02\u05FB\u05FC\x03\x02" +
		"\x02\x02\u05FC\u05FA\x03\x02\x02\x02\u05FC\u05FD\x03\x02\x02\x02\u05FD" +
		"\u0604\x03\x02\x02\x02\u05FE\u0600\x07\t\x02\x02\u05FF\u0601\x05\x04\x03" +
		"\x02\u0600\u05FF\x03\x02\x02\x02\u0601\u0602\x03\x02\x02\x02\u0602\u0600" +
		"\x03\x02\x02\x02\u0602\u0603\x03\x02\x02\x02\u0603\u0605\x03\x02\x02\x02" +
		"\u0604\u05FE\x03\x02\x02\x02\u0604\u0605\x03\x02\x02\x02\u0605\u0607\x03" +
		"\x02\x02\x02\u0606\u05EA\x03\x02\x02\x02\u0606\u05F8\x03\x02\x02\x02\u0606" +
		"\u0607\x03\x02\x02\x02\u0607\u0608\x03\x02\x02\x02\u0608\u0610\x05^0\x02" +
		"\u0609\u060B\x05\x04\x03\x02\u060A\u0609\x03\x02\x02\x02\u060B\u060C\x03" +
		"\x02\x02\x02\u060C\u060A\x03\x02\x02\x02\u060C\u060D\x03\x02\x02\x02\u060D" +
		"\u060E\x03\x02\x02\x02\u060E\u060F\t\v\x02\x02\u060F\u0611\x03\x02\x02" +
		"\x02\u0610\u060A\x03\x02\x02\x02\u0610\u0611\x03\x02\x02\x02\u0611\u061F" +
		"\x03\x02\x02\x02\u0612\u0614\x05\x04\x03\x02\u0613\u0612\x03\x02\x02\x02" +
		"\u0614\u0615\x03\x02\x02\x02\u0615\u0613\x03\x02\x02\x02\u0615\u0616\x03" +
		"\x02\x02\x02\u0616\u0617\x03\x02\x02\x02\u0617\u0619\x07l\x02\x02\u0618" +
		"\u061A\x05\x04\x03\x02\u0619\u0618\x03\x02\x02\x02\u061A\u061B\x03\x02" +
		"\x02\x02\u061B\u0619\x03\x02\x02\x02\u061B\u061C\x03\x02\x02\x02\u061C" +
		"\u061D\x03\x02\x02\x02\u061D\u061E\x05\\/\x02\u061E\u0620\x03\x02\x02" +
		"\x02\u061F\u0613\x03\x02\x02\x02\u061F\u0620\x03\x02\x02\x02\u0620\u0634" +
		"\x03\x02\x02\x02\u0621\u0623\x05\x04\x03\x02\u0622\u0621\x03\x02\x02\x02" +
		"\u0623\u0624\x03\x02\x02\x02\u0624\u0622\x03\x02\x02\x02\u0624\u0625\x03" +
		"\x02\x02\x02\u0625\u0626\x03\x02\x02\x02\u0626\u0628\x07c\x02\x02\u0627" +
		"\u0629\x05\x04\x03\x02\u0628\u0627\x03\x02\x02\x02\u0629\u062A\x03\x02" +
		"\x02\x02\u062A\u0628\x03\x02\x02\x02\u062A\u062B\x03\x02\x02\x02\u062B" +
		"\u062C\x03\x02\x02\x02\u062C\u062E\x07N\x02\x02\u062D\u062F\x05\x04\x03" +
		"\x02\u062E\u062D\x03\x02\x02\x02\u062F\u0630\x03\x02\x02\x02\u0630\u062E" +
		"\x03\x02\x02\x02\u0630\u0631\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02" +
		"\u0632\u0633\x05Z.\x02\u0633\u0635\x03\x02\x02\x02\u0634\u0622\x03\x02" +
		"\x02\x02\u0634\u0635\x03\x02\x02\x02\u0635\u0649\x03\x02\x02\x02\u0636" +
		"\u0638\x05\x04\x03\x02\u0637\u0636\x03\x02\x02\x02\u0638\u0639\x03\x02" +
		"\x02\x02\u0639\u0637\x03\x02\x02\x02\u0639\u063A\x03\x02\x02\x02\u063A" +
		"\u063B\x03\x02\x02\x02\u063B\u063D\x07~\x02\x02\u063C\u063E\x05\x04\x03" +
		"\x02\u063D\u063C\x03\x02\x02\x02\u063E\u063F\x03\x02\x02\x02\u063F\u063D" +
		"\x03\x02\x02\x02\u063F\u0640\x03\x02\x02\x02\u0640\u0641\x03\x02\x02\x02" +
		"\u0641\u0643\x07N\x02\x02\u0642\u0644\x05\x04\x03\x02\u0643\u0642\x03" +
		"\x02\x02\x02\u0644\u0645\x03\x02\x02\x02\u0645\u0643\x03\x02\x02\x02\u0645" +
		"\u0646\x03\x02\x02\x02\u0646\u0647\x03\x02\x02\x02\u0647\u0648\x05X-\x02" +
		"\u0648\u064A\x03\x02\x02\x02\u0649\u0637\x03\x02\x02\x02\u0649\u064A\x03" +
		"\x02\x02\x02\u064A\u0658\x03\x02\x02\x02\u064B\u064D\x05\x04\x03\x02\u064C" +
		"\u064B\x03\x02\x02\x02\u064D\u064E\x03\x02\x02\x02\u064E\u064C\x03\x02" +
		"\x02\x02\u064E\u064F\x03\x02\x02\x02\u064F\u0650\x03\x02\x02\x02\u0650" +
		"\u0652\x07g\x02\x02\u0651\u0653\x05\x04\x03\x02\u0652\u0651\x03\x02\x02" +
		"\x02\u0653\u0654\x03\x02\x02\x02\u0654\u0652\x03\x02\x02\x02\u0654\u0655" +
		"\x03\x02\x02\x02\u0655\u0656\x03\x02\x02\x02\u0656\u0657\x05V,\x02\u0657" +
		"\u0659\x03\x02\x02\x02\u0658\u064C\x03\x02\x02\x02\u0658\u0659\x03\x02" +
		"\x02\x02\u0659\u065B\x03\x02\x02\x02\u065A\u05A7\x03\x02\x02\x02\u065A" +
		"\u05AA\x03\x02\x02\x02\u065A\u05C6\x03\x02\x02\x02\u065A\u05E4\x03\x02" +
		"\x02\x02\u065BU\x03\x02\x02\x02\u065C\u065D\x07\u0110\x02\x02\u065DW\x03" +
		"\x02\x02\x02\u065E\u065F\x07\u0110\x02\x02\u065FY\x03\x02\x02\x02\u0660" +
		"\u0661\x07\u0110\x02\x02\u0661[\x03\x02\x02\x02\u0662\u0663\x07\u0110" +
		"\x02\x02\u0663]\x03\x02\x02\x02\u0664\u0665\x07\u0110\x02\x02\u0665_\x03" +
		"\x02\x02\x02\u0666\u0667\x05\xDEp\x02\u0667a\x03\x02\x02\x02\u0668\u0669" +
		"\x07\u010F\x02\x02\u0669c\x03\x02\x02\x02\u066A\u0672\x07\xEA\x02\x02" +
		"\u066B\u066D\x05\x04\x03\x02\u066C\u066B\x03\x02\x02\x02\u066D\u066E\x03" +
		"\x02\x02\x02\u066E\u066C\x03\x02\x02\x02\u066E\u066F\x03\x02\x02\x02\u066F" +
		"\u0670\x03\x02\x02\x02\u0670\u0671\x07x\x02\x02\u0671\u0673\x03\x02\x02" +
		"\x02\u0672\u066C\x03\x02\x02\x02\u0672\u0673\x03\x02\x02\x02\u0673\u0675" +
		"\x03\x02\x02\x02\u0674\u0676\x05\x04\x03\x02\u0675\u0674\x03\x02\x02\x02" +
		"\u0676\u0677\x03\x02\x02\x02\u0677\u0675\x03\x02\x02\x02\u0677\u0678\x03" +
		"\x02\x02\x02\u0678\u067A\x03\x02\x02\x02\u0679\u066A\x03\x02\x02\x02\u0679" +
		"\u067A\x03\x02\x02\x02\u067A\u067B\x03\x02\x02\x02\u067B\u067C\x05f4\x02" +
		"\u067Ce\x03\x02\x02\x02\u067D\u06BD\x07\x15\x02\x02\u067E\u0686\x07\x16" +
		"\x02\x02\u067F\u0681\x05\x04\x03\x02\u0680\u067F\x03\x02\x02\x02\u0681" +
		"\u0682\x03\x02\x02\x02\u0682\u0680\x03\x02\x02\x02\u0682\u0683\x03\x02" +
		"\x02\x02\u0683\u0684\x03\x02\x02\x02\u0684\u0685\t\f\x02\x02\u0685\u0687" +
		"\x03\x02\x02\x02\u0686\u0680\x03\x02\x02\x02\u0686\u0687\x03\x02\x02\x02" +
		"\u0687\u06BD\x03\x02\x02\x02\u0688\u0690\x07\x19\x02\x02\u0689\u068B\x05" +
		"\x04\x03\x02\u068A\u0689\x03\x02\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C" +
		"\u068A\x03\x02\x02\x02\u068C\u068D\x03\x02\x02\x02\u068D\u068E\x03\x02" +
		"\x02\x02\u068E\u068F\t\f\x02\x02\u068F\u0691\x03\x02\x02\x02\u0690\u068A" +
		"\x03\x02\x02\x02\u0690\u0691\x03\x02\x02\x02\u0691\u06BD\x03\x02\x02\x02" +
		"\u0692\u069A\x07\x18\x02\x02\u0693\u0695\x05\x04\x03\x02\u0694\u0693\x03" +
		"\x02\x02\x02\u0695\u0696\x03\x02\x02\x02\u0696\u0694\x03\x02\x02\x02\u0696" +
		"\u0697\x03\x02\x02\x02\u0697\u0698\x03\x02\x02\x02\u0698\u0699\t\f\x02" +
		"\x02\u0699\u069B\x03\x02\x02\x02\u069A\u0694\x03\x02\x02\x02\u069A\u069B" +
		"\x03\x02\x02\x02\u069B\u06BD\x03\x02\x02\x02\u069C\u06A4\x07\x17\x02\x02" +
		"\u069D\u069F\x05\x04\x03\x02\u069E\u069D\x03\x02\x02\x02\u069F\u06A0\x03" +
		"\x02\x02\x02\u06A0\u069E\x03\x02\x02\x02\u06A0\u06A1\x03\x02\x02\x02\u06A1" +
		"\u06A2\x03\x02\x02\x02\u06A2\u06A3\t\f\x02\x02\u06A3\u06A5\x03\x02\x02" +
		"\x02\u06A4\u069E\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02\x02\u06A5\u06BD" +
		"\x03\x02\x02\x02\u06A6\u06BD\x07-\x02\x02\u06A7\u06BD\x07.\x02\x02\u06A8" +
		"\u06BD\x07/\x02\x02\u06A9\u06BD\x070\x02\x02\u06AA\u06BD\x071\x02\x02" +
		"\u06AB\u06BD\x072\x02\x02\u06AC\u06BD\x073\x02\x02\u06AD\u06BD\x07,\x02" +
		"\x02\u06AE\u06BD\x074\x02\x02\u06AF\u06BD\x075\x02\x02\u06B0\u06BD\x07" +
		"6\x02\x02\u06B1\u06BD\x077\x02\x02\u06B2\u06BD\x078\x02\x02\u06B3\u06BD" +
		"\x079\x02\x02\u06B4\u06BD\x07P\x02\x02\u06B5\u06BD\x07f\x02\x02\u06B6" +
		"\u06BD\x07e\x02\x02\u06B7\u06BD\x07d\x02\x02\u06B8\u06BD\x07r\x02\x02" +
		"\u06B9\u06BD\x07\x9C\x02\x02\u06BA\u06BD\x07\xA6\x02\x02\u06BB\u06BD\x07" +
		"\xA7\x02\x02\u06BC\u067D\x03\x02\x02\x02\u06BC\u067E\x03\x02\x02\x02\u06BC" +
		"\u0688\x03\x02\x02\x02\u06BC\u0692\x03\x02\x02\x02\u06BC\u069C\x03\x02" +
		"\x02\x02\u06BC\u06A6\x03\x02\x02\x02\u06BC\u06A7\x03\x02\x02\x02\u06BC" +
		"\u06A8\x03\x02\x02\x02\u06BC\u06A9\x03\x02\x02\x02\u06BC\u06AA\x03\x02" +
		"\x02\x02\u06BC\u06AB\x03\x02\x02\x02\u06BC\u06AC\x03\x02\x02\x02\u06BC" +
		"\u06AD\x03\x02\x02\x02\u06BC\u06AE\x03\x02\x02\x02\u06BC\u06AF\x03\x02" +
		"\x02\x02\u06BC\u06B0\x03\x02\x02\x02\u06BC\u06B1\x03\x02\x02\x02\u06BC" +
		"\u06B2\x03\x02\x02\x02\u06BC\u06B3\x03\x02\x02\x02\u06BC\u06B4\x03\x02" +
		"\x02\x02\u06BC\u06B5\x03\x02\x02\x02\u06BC\u06B6\x03\x02\x02\x02\u06BC" +
		"\u06B7\x03\x02\x02\x02\u06BC\u06B8\x03\x02\x02\x02\u06BC\u06B9\x03\x02" +
		"\x02\x02\u06BC\u06BA\x03\x02\x02\x02\u06BC\u06BB\x03\x02\x02\x02\u06BD" +
		"g\x03\x02\x02\x02\u06BE\u06C0\t\r\x02\x02\u06BF\u06C1\x05\x04\x03\x02" +
		"\u06C0\u06BF\x03\x02\x02\x02\u06C1\u06C2\x03\x02\x02\x02\u06C2\u06C0\x03" +
		"\x02\x02\x02\u06C2\u06C3\x03\x02\x02\x02\u06C3\u06CA\x03\x02\x02\x02\u06C4" +
		"\u06C6\x07x\x02\x02\u06C5\u06C7\x05\x04\x03\x02\u06C6\u06C5\x03\x02\x02" +
		"\x02\u06C7\u06C8\x03\x02\x02\x02\u06C8\u06C6\x03\x02\x02\x02\u06C8\u06C9" +
		"\x03\x02\x02\x02\u06C9\u06CB\x03\x02\x02\x02\u06CA\u06C4\x03\x02\x02\x02" +
		"\u06CA\u06CB\x03\x02\x02\x02\u06CB\u06CC\x03\x02\x02\x02\u06CC\u06CD\x05" +
		"j6\x02\u06CDi\x03\x02\x02\x02\u06CE\u06D0\x05l7\x02\u06CF\u06CE\x03\x02" +
		"\x02\x02\u06D0\u06D1\x03\x02\x02\x02\u06D1\u06CF\x03\x02\x02\x02\u06D1" +
		"\u06D2\x03\x02\x02\x02\u06D2k\x03\x02\x02\x02\u06D3\u06D4\t\x0E\x02\x02" +
		"\u06D4m\x03\x02\x02\x02\u06D5\u06D6\x07\u0112\x02\x02\u06D6o\x03\x02\x02" +
		"\x02\u06D7\u06D8\x07\u0112\x02\x02\u06D8q\x03\x02\x02\x02\u06D9\u06DB" +
		"\x07\xC2\x02\x02\u06DA\u06DC\x05\x04\x03\x02\u06DB\u06DA\x03\x02\x02\x02" +
		"\u06DC\u06DD\x03\x02\x02\x02\u06DD\u06DB\x03\x02\x02\x02\u06DD\u06DE\x03" +
		"\x02\x02\x02\u06DE\u06DF\x03\x02\x02\x02\u06DF\u06E3\x05\u0148\xA5\x02" +
		"\u06E0\u06E2\x05\x04\x03\x02\u06E1\u06E0\x03\x02\x02\x02\u06E2\u06E5\x03" +
		"\x02\x02\x02\u06E3\u06E1\x03\x02\x02\x02\u06E3\u06E4\x03\x02\x02\x02\u06E4" +
		"\u06EF\x03\x02\x02\x02\u06E5\u06E3\x03\x02\x02\x02\u06E6\u06EA\x05t;\x02" +
		"\u06E7\u06E9\x05\x04\x03\x02\u06E8\u06E7\x03\x02\x02\x02\u06E9\u06EC\x03" +
		"\x02\x02\x02\u06EA\u06E8\x03\x02\x02\x02\u06EA\u06EB\x03\x02\x02\x02\u06EB" +
		"\u06EE\x03\x02\x02\x02\u06EC\u06EA\x03\x02\x02\x02\u06ED\u06E6\x03\x02" +
		"\x02\x02\u06EE\u06F1\x03\x02\x02\x02\u06EF\u06ED\x03\x02\x02\x02\u06EF" +
		"\u06F0\x03\x02\x02\x02\u06F0\u06FB\x03\x02\x02\x02\u06F1\u06EF\x03\x02" +
		"\x02\x02\u06F2\u06F6\x05\x12\n\x02\u06F3\u06F5\x05\x04\x03\x02\u06F4\u06F3" +
		"\x03\x02\x02\x02\u06F5\u06F8\x03\x02\x02\x02\u06F6\u06F4\x03\x02\x02\x02" +
		"\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06FA\x03\x02\x02\x02\u06F8\u06F6\x03" +
		"\x02\x02\x02\u06F9\u06F2\x03\x02\x02\x02\u06FA\u06FD\x03\x02\x02\x02\u06FB" +
		"\u06F9\x03\x02\x02\x02\u06FB\u06FC\x03\x02\x02\x02\u06FC\u06FE\x03\x02" +
		"\x02\x02\u06FD\u06FB\x03\x02\x02\x02\u06FE\u06FF\x07\u010B\x02\x02\u06FF" +
		"s\x03\x02\x02\x02\u0700\u0703\x05\x8EH\x02\u0701\u0703\x05\x84C\x02\u0702" +
		"\u0700\x03\x02\x02\x02\u0702\u0701\x03\x02\x02\x02\u0703u\x03\x02\x02" +
		"\x02\u0704\u070C\x07\xB7\x02\x02\u0705\u0707\x05\x04\x03\x02\u0706\u0705" +
		"\x03\x02\x02\x02\u0707\u0708\x03\x02\x02\x02\u0708\u0706\x03\x02\x02\x02" +
		"\u0708\u0709\x03\x02\x02\x02\u0709\u070A\x03\x02\x02\x02\u070A\u070B\x07" +
		"x\x02\x02\u070B\u070D\x03\x02\x02\x02\u070C\u0706\x03\x02\x02\x02\u070C" +
		"\u070D\x03\x02\x02\x02\u070D\u0719\x03\x02\x02\x02\u070E\u0716\x07\xB8" +
		"\x02\x02\u070F\u0711\x05\x04\x03\x02\u0710\u070F\x03\x02\x02\x02\u0711" +
		"\u0712\x03\x02\x02\x02\u0712\u0710\x03\x02\x02\x02\u0712\u0713\x03\x02" +
		"\x02\x02\u0713\u0714\x03\x02\x02\x02\u0714\u0715\x07\t\x02\x02\u0715\u0717" +
		"\x03\x02\x02\x02\u0716\u0710\x03\x02\x02\x02\u0716\u0717\x03\x02\x02\x02" +
		"\u0717\u0719\x03\x02\x02\x02\u0718\u0704\x03\x02\x02\x02\u0718\u070E\x03" +
		"\x02\x02\x02\u0719\u071B\x03\x02\x02\x02\u071A\u071C\x05\x04\x03\x02\u071B" +
		"\u071A\x03\x02\x02\x02\u071C\u071D\x03\x02\x02\x02\u071D\u071B\x03\x02" +
		"\x02\x02\u071D\u071E\x03\x02\x02\x02\u071E\u071F\x03\x02\x02\x02\u071F" +
		"\u0729\x05x=\x02\u0720\u0722\x05\x04\x03\x02\u0721\u0720\x03\x02\x02\x02" +
		"\u0722\u0725\x03\x02\x02\x02\u0723\u0721\x03\x02\x02\x02\u0723\u0724\x03" +
		"\x02\x02\x02\u0724\u0726\x03\x02\x02\x02\u0725\u0723\x03\x02\x02\x02\u0726" +
		"\u0728\x05x=\x02\u0727\u0723\x03\x02\x02\x02\u0728\u072B\x03\x02\x02\x02" +
		"\u0729\u0727\x03\x02\x02\x02\u0729\u072A\x03\x02\x02\x02\u072Aw\x03\x02" +
		"\x02\x02\u072B\u0729\x03\x02\x02\x02\u072C\u072D\x07\u0112\x02\x02\u072D" +
		"y\x03\x02\x02\x02\u072E\u0730\x07\x83\x02\x02\u072F\u0731\x05\x04\x03" +
		"\x02\u0730\u072F\x03\x02\x02\x02\u0731\u0732\x03\x02\x02\x02\u0732\u0730" +
		"\x03\x02\x02\x02\u0732\u0733\x03\x02\x02\x02\u0733\u073A\x03\x02\x02\x02" +
		"\u0734\u0736\x07x\x02\x02\u0735\u0737\x05\x04\x03\x02\u0736\u0735\x03" +
		"\x02\x02\x02\u0737\u0738\x03\x02\x02\x02\u0738\u0736\x03\x02\x02\x02\u0738" +
		"\u0739\x03\x02\x02\x02\u0739\u073B\x03\x02\x02\x02\u073A\u0734\x03\x02" +
		"\x02\x02\u073A\u073B\x03\x02\x02\x02\u073B\u073C\x03\x02\x02\x02\u073C" +
		"\u0744\x05\x82B\x02\u073D\u073F\x05\x04\x03\x02\u073E\u073D\x03\x02\x02" +
		"\x02\u073F\u0740\x03\x02\x02\x02\u0740\u073E\x03\x02\x02\x02\u0740\u0741" +
		"\x03\x02\x02\x02\u0741\u0742\x03\x02\x02\x02\u0742\u0743\x07\x85\x02\x02" +
		"\u0743\u0745\x03\x02\x02\x02\u0744\u073E\x03\x02\x02\x02\u0744\u0745\x03" +
		"\x02\x02\x02\u0745\u0761\x03\x02\x02\x02\u0746\u0748\x07\xF1\x02\x02\u0747" +
		"\u0749\x05\x04\x03\x02\u0748\u0747\x03\x02\x02\x02\u0749\u074A\x03\x02" +
		"\x02\x02\u074A\u0748\x03\x02\x02\x02\u074A\u074B\x03\x02\x02\x02\u074B" +
		"\u074D\x03\x02\x02\x02\u074C\u0746\x03\x02\x02\x02\u074C\u074D\x03\x02" +
		"\x02\x02\u074D\u074E\x03\x02\x02\x02\u074E\u0750\x07g\x02\x02\u074F\u0751" +
		"\x05\x04\x03\x02\u0750\u074F\x03\x02\x02\x02\u0751\u0752\x03\x02\x02\x02" +
		"\u0752\u0750\x03\x02\x02\x02\u0752\u0753\x03\x02\x02\x02\u0753\u0754\x03" +
		"\x02\x02\x02\u0754\u0756\x07\x12\x02\x02\u0755\u0757\x05\x04\x03\x02\u0756" +
		"\u0755\x03\x02\x02\x02\u0757\u0758\x03\x02\x02\x02\u0758\u0756\x03\x02" +
		"\x02\x02\u0758\u0759\x03\x02\x02\x02\u0759\u075A\x03\x02\x02\x02\u075A" +
		"\u075E\x05\x80A\x02\u075B\u075D\x05\x04\x03\x02\u075C\u075B\x03\x02\x02" +
		"\x02\u075D\u0760\x03\x02\x02\x02\u075E\u075C\x03\x02\x02\x02\u075E\u075F" +
		"\x03\x02\x02\x02\u075F\u0762\x03\x02\x02\x02\u0760\u075E\x03\x02\x02\x02" +
		"\u0761\u074C\x03\x02\x02\x02\u0761\u0762\x03\x02\x02\x02\u0762\u0780\x03" +
		"\x02\x02\x02\u0763\u0765\x07\x85\x02\x02\u0764\u0766\x05\x04\x03\x02\u0765" +
		"\u0764\x03\x02\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767\u0765\x03\x02" +
		"\x02\x02\u0767\u0768\x03\x02\x02\x02\u0768\u076A\x03\x02\x02\x02\u0769" +
		"\u0763\x03\x02\x02\x02\u0769\u076A\x03\x02\x02\x02\u076A\u0771\x03\x02" +
		"\x02\x02\u076B\u076D\x07\x12\x02\x02\u076C\u076E\x05\x04\x03\x02\u076D" +
		"\u076C\x03\x02\x02\x02\u076E\u076F\x03\x02\x02\x02\u076F\u076D\x03\x02" +
		"\x02\x02\u076F\u0770\x03\x02\x02\x02\u0770\u0772\x03\x02\x02\x02\u0771" +
		"\u076B\x03\x02\x02\x02\u0771\u0772\x03\x02\x02\x02\u0772\u0773\x03\x02" +
		"\x02\x02\u0773\u0775\x07\xE4\x02\x02\u0774\u0776\x05\x04\x03\x02\u0775" +
		"\u0774\x03\x02\x02\x02\u0776\u0777\x03\x02\x02\x02\u0777\u0775\x03\x02" +
		"\x02\x02\u0777\u0778\x03\x02\x02\x02\u0778\u0779\x03\x02\x02\x02\u0779" +
		"\u077D\x05~@\x02\u077A\u077C\x05\x04\x03\x02\u077B\u077A\x03\x02\x02\x02" +
		"\u077C\u077F\x03\x02\x02\x02\u077D\u077B\x03\x02\x02\x02\u077D\u077E\x03" +
		"\x02\x02\x02\u077E\u0781\x03\x02\x02\x02\u077F\u077D\x03\x02\x02\x02\u0780" +
		"\u0769\x03\x02\x02\x02\u0780\u0781\x03\x02\x02\x02\u0781\u079F\x03\x02" +
		"\x02\x02\u0782\u0784\x07\x85\x02\x02\u0783\u0785\x05\x04\x03\x02\u0784" +
		"\u0783\x03\x02\x02\x02\u0785\u0786\x03\x02\x02\x02\u0786\u0784\x03\x02" +
		"\x02\x02\u0786\u0787\x03\x02\x02\x02\u0787\u0789\x03\x02\x02\x02\u0788" +
		"\u0782\x03\x02\x02\x02\u0788\u0789\x03\x02\x02\x02\u0789\u0790\x03\x02" +
		"\x02\x02\u078A\u078C\x07\x12\x02\x02\u078B\u078D\x05\x04\x03\x02\u078C" +
		"\u078B\x03\x02\x02\x02\u078D\u078E\x03\x02\x02\x02\u078E\u078C\x03\x02" +
		"\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u0791\x03\x02\x02\x02\u0790" +
		"\u078A\x03\x02\x02\x02\u0790\u0791\x03\x02\x02\x02\u0791\u0792\x03\x02" +
		"\x02\x02\u0792\u0794\x07\x1C\x02\x02\u0793\u0795\x05\x04\x03\x02\u0794" +
		"\u0793\x03\x02\x02\x02\u0795\u0796\x03\x02\x02\x02\u0796\u0794\x03\x02" +
		"\x02\x02\u0796\u0797\x03\x02\x02\x02\u0797\u0798\x03\x02\x02\x02\u0798" +
		"\u079C\x05|?\x02\u0799\u079B\x05\x04\x03\x02\u079A\u0799\x03\x02\x02\x02" +
		"\u079B\u079E\x03\x02\x02\x02\u079C\u079A\x03\x02\x02\x02\u079C\u079D\x03" +
		"\x02\x02\x02\u079D\u07A0\x03\x02\x02\x02\u079E\u079C\x03\x02\x02\x02\u079F" +
		"\u0788\x03\x02\x02\x02\u079F\u07A0\x03\x02\x02\x02\u07A0{\x03\x02\x02" +
		"\x02\u07A1\u07A4\x07\u0110\x02\x02\u07A2\u07A4\x05\xDEp\x02\u07A3\u07A1" +
		"\x03\x02\x02\x02\u07A3\u07A2\x03\x02\x02\x02\u07A4}\x03\x02\x02\x02\u07A5" +
		"\u07A8\x07\u0110\x02\x02\u07A6\u07A8\x05\xDEp\x02\u07A7\u07A5\x03\x02" +
		"\x02\x02\u07A7\u07A6\x03\x02\x02\x02\u07A8\x7F\x03\x02\x02\x02\u07A9\u07AC" +
		"\x07\u0110\x02\x02\u07AA\u07AC\x05\xDEp\x02\u07AB\u07A9\x03\x02\x02\x02" +
		"\u07AB\u07AA\x03\x02\x02\x02\u07AC\x81\x03\x02\x02\x02\u07AD\u07B0\x07" +
		"\u0110\x02\x02\u07AE\u07B0\x05\xDEp\x02\u07AF\u07AD\x03\x02\x02\x02\u07AF" +
		"\u07AE\x03\x02\x02\x02\u07B0\x83\x03\x02\x02\x02\u07B1\u07B3\x07D\x02" +
		"\x02\u07B2\u07B4\x05\x04\x03\x02\u07B3\u07B2\x03\x02\x02\x02\u07B4\u07B5" +
		"\x03\x02\x02\x02\u07B5\u07B3\x03\x02\x02\x02\u07B5\u07B6\x03\x02\x02\x02" +
		"\u07B6\u07CB\x03\x02\x02\x02\u07B7\u07BF\x07\xB1\x02\x02\u07B8\u07BA\x05" +
		"\x04\x03\x02\u07B9\u07B8\x03\x02\x02\x02\u07BA\u07BB\x03\x02\x02\x02\u07BB" +
		"\u07B9\x03\x02\x02\x02\u07BB\u07BC\x03\x02\x02\x02\u07BC\u07BD\x03\x02" +
		"\x02\x02\u07BD\u07BE\x07\t\x02\x02\u07BE\u07C0\x03\x02\x02\x02\u07BF\u07B9" +
		"\x03\x02\x02\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0\u07CC\x03\x02\x02\x02" +
		"\u07C1\u07C9\x07\xB0\x02\x02\u07C2\u07C4\x05\x04\x03\x02\u07C3\u07C2\x03" +
		"\x02\x02\x02\u07C4\u07C5\x03\x02\x02\x02\u07C5\u07C3\x03\x02\x02\x02\u07C5" +
		"\u07C6\x03\x02\x02\x02\u07C6\u07C7\x03\x02\x02\x02\u07C7\u07C8\x07x\x02" +
		"\x02\u07C8\u07CA\x03\x02\x02\x02\u07C9\u07C3\x03\x02\x02\x02\u07C9\u07CA" +
		"\x03\x02\x02\x02\u07CA\u07CC\x03\x02\x02\x02\u07CB\u07B7\x03\x02\x02\x02" +
		"\u07CB\u07C1\x03\x02\x02\x02\u07CC\u07CD\x03\x02\x02\x02\u07CD\u07D7\x05" +
		"\x86D\x02\u07CE\u07D0\x05\x04\x03\x02\u07CF\u07CE\x03\x02\x02\x02\u07D0" +
		"\u07D1\x03\x02\x02\x02\u07D1\u07CF\x03\x02\x02\x02\u07D1\u07D2\x03\x02" +
		"\x02\x02\u07D2\u07D3\x03\x02\x02\x02\u07D3\u07D4\x05\x86D\x02\u07D4\u07D6" +
		"\x03\x02\x02\x02\u07D5\u07CF\x03\x02\x02\x02\u07D6\u07D9\x03\x02\x02\x02" +
		"\u07D7\u07D5\x03\x02\x02\x02\u07D7\u07D8\x03\x02\x02\x02\u07D8\x85\x03" +
		"\x02\x02\x02\u07D9\u07D7\x03\x02\x02\x02\u07DA\u07DB\x07\u0112\x02\x02" +
		"\u07DB\x87\x03\x02\x02\x02\u07DC\u07DE\x07\xEB\x02\x02\u07DD\u07DF\x05" +
		"\x04\x03\x02\u07DE\u07DD\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02\u07E0" +
		"\u07DE\x03\x02\x02\x02\u07E0\u07E1\x03\x02\x02\x02\u07E1\u07E2\x03\x02" +
		"\x02\x02\u07E2\u07E4\x07\x95\x02\x02\u07E3\u07E5\x05\x04\x03\x02\u07E4" +
		"\u07E3\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6\u07E4\x03\x02" +
		"\x02\x02\u07E6\u07E7\x03\x02\x02\x02\u07E7\u07E8\x03\x02\x02\x02\u07E8" +
		"\u07EA\x07n\x02\x02\u07E9\u07EB\x05\x04\x03\x02\u07EA\u07E9\x03\x02\x02" +
		"\x02\u07EB\u07EC\x03\x02\x02\x02\u07EC\u07EA\x03\x02\x02\x02\u07EC\u07ED" +
		"\x03\x02\x02\x02\u07ED\u07EE\x03\x02\x02\x02\u07EE\u07F0\x07x\x02\x02" +
		"\u07EF\u07F1\x05\x04\x03\x02\u07F0\u07EF\x03\x02\x02\x02\u07F1\u07F2\x03" +
		"\x02\x02\x02\u07F2\u07F0\x03\x02\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3" +
		"\u07F4\x03\x02\x02\x02\u07F4\u07F5\x05\x8AF\x02\u07F5\x89\x03\x02\x02" +
		"\x02\u07F6\u07F9\x07\u010F\x02\x02\u07F7\u07F9\x05\xDEp\x02\u07F8\u07F6" +
		"\x03\x02\x02\x02\u07F8\u07F7\x03\x02\x02\x02\u07F9\x8B\x03\x02\x02\x02" +
		"\u07FA\u07FC\x07}\x02\x02\u07FB\u07FD\x05\x04\x03\x02\u07FC\u07FB\x03" +
		"\x02\x02\x02\u07FD\u07FE\x03\x02\x02\x02\u07FE\u07FC\x03\x02\x02\x02\u07FE" +
		"\u07FF\x03\x02\x02\x02\u07FF\u0814\x03\x02\x02\x02\u0800\u0808\x07\xB1" +
		"\x02\x02\u0801\u0803\x05\x04\x03\x02\u0802\u0801\x03\x02\x02\x02\u0803" +
		"\u0804\x03\x02\x02\x02\u0804\u0802\x03\x02\x02\x02\u0804\u0805\x03\x02" +
		"\x02\x02\u0805\u0806\x03\x02\x02\x02\u0806\u0807\x07\t\x02\x02\u0807\u0809" +
		"\x03\x02\x02\x02\u0808\u0802\x03\x02\x02\x02\u0808\u0809\x03\x02\x02\x02" +
		"\u0809\u0815\x03\x02\x02\x02\u080A\u0812\x07\xB0\x02\x02\u080B\u080D\x05" +
		"\x04\x03\x02\u080C\u080B\x03\x02\x02\x02\u080D\u080E\x03\x02\x02\x02\u080E" +
		"\u080C\x03\x02\x02\x02\u080E\u080F\x03\x02\x02\x02\u080F\u0810\x03\x02" +
		"\x02\x02\u0810\u0811\x07x\x02\x02\u0811\u0813\x03\x02\x02\x02\u0812\u080C" +
		"\x03\x02\x02\x02\u0812\u0813\x03\x02\x02\x02\u0813\u0815\x03\x02\x02\x02" +
		"\u0814\u0800\x03\x02\x02\x02\u0814\u080A\x03\x02\x02\x02\u0815\u0817\x03" +
		"\x02\x02\x02\u0816\u0818\x05\x04\x03\x02\u0817\u0816\x03\x02\x02\x02\u0818" +
		"\u0819\x03\x02\x02\x02\u0819\u0817\x03\x02\x02\x02\u0819\u081A\x03\x02" +
		"\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u081C\t\x0F\x02\x02\u081C\x8D" +
		"\x03\x02\x02\x02\u081D\u081F\x07\xB0\x02\x02\u081E\u0820\x05\x04\x03\x02" +
		"\u081F\u081E\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u081F\x03" +
		"\x02\x02\x02\u0821\u0822\x03\x02\x02\x02\u0822\u0823\x03\x02\x02\x02\u0823" +
		"\u0824\x05\x90I\x02\u0824\x8F\x03\x02\x02\x02\u0825\u0827\x07<\x02\x02" +
		"\u0826\u0828\x05\x04\x03\x02\u0827\u0826\x03\x02\x02\x02\u0828\u0829\x03" +
		"\x02\x02\x02\u0829\u0827\x03\x02\x02\x02\u0829\u082A\x03\x02\x02\x02\u082A" +
		"\u082C\x03\x02\x02\x02\u082B\u0825\x03\x02\x02\x02\u082B\u082C\x03\x02" +
		"\x02\x02\u082C\u0839\x03\x02\x02\x02\u082D\u082F\x05\x94K\x02\u082E\u0830" +
		"\x05\x04\x03\x02\u082F\u082E\x03\x02\x02\x02\u0830\u0831\x03\x02\x02\x02" +
		"\u0831\u082F\x03\x02\x02\x02\u0831\u0832\x03\x02\x02\x02\u0832\u0833\x03" +
		"\x02\x02\x02\u0833\u0835\x07\xE3\x02\x02\u0834\u0836\x05\x04\x03\x02\u0835" +
		"\u0834\x03\x02\x02\x02\u0836\u0837\x03\x02\x02\x02\u0837\u0835\x03\x02" +
		"\x02\x02\u0837\u0838\x03\x02\x02\x02\u0838\u083A\x03\x02\x02\x02\u0839" +
		"\u082D\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u083B\x03\x02" +
		"\x02\x02\u083B\u083F\x05\x96L\x02\u083C\u083E\x05\x04\x03\x02\u083D\u083C" +
		"\x03\x02\x02\x02\u083E\u0841\x03\x02\x02\x02\u083F\u083D\x03\x02\x02\x02" +
		"\u083F\u0840\x03\x02\x02\x02\u0840\u0849\x03\x02\x02\x02\u0841\u083F\x03" +
		"\x02\x02\x02\u0842\u0846\x07#\x02\x02\u0843\u0845\x05\x04\x03\x02\u0844" +
		"\u0843\x03\x02\x02\x02\u0845\u0848\x03\x02\x02\x02\u0846\u0844\x03\x02" +
		"\x02\x02\u0846\u0847\x03\x02\x02\x02\u0847\u084A\x03\x02\x02\x02\u0848" +
		"\u0846\x03\x02\x02\x02\u0849\u0842\x03\x02\x02\x02\u0849\u084A\x03\x02" +
		"\x02\x02\u084A\u08A1\x03\x02\x02\x02\u084B\u084D\x07x\x02\x02\u084C\u084E" +
		"\x05\x04\x03\x02\u084D\u084C\x03\x02\x02\x02\u084E\u084F\x03\x02\x02\x02" +
		"\u084F\u084D\x03\x02\x02\x02\u084F\u0850\x03\x02\x02\x02\u0850\u0852\x03" +
		"\x02\x02\x02\u0851\u084B\x03\x02\x02\x02\u0851\u0852\x03\x02\x02\x02\u0852" +
		"\u0853\x03\x02\x02\x02\u0853\u0855\x07\xED\x02\x02\u0854\u0856\x05\x04" +
		"\x03\x02\u0855\u0854\x03\x02\x02\x02\u0856\u0857\x03\x02\x02\x02\u0857" +
		"\u0855\x03\x02\x02\x02\u0857\u0858\x03\x02\x02\x02\u0858\u085F\x03\x02" +
		"\x02\x02\u0859\u085B\x07q\x02\x02\u085A\u085C\x05\x04\x03\x02\u085B\u085A" +
		"\x03\x02\x02\x02\u085C\u085D\x03\x02\x02\x02\u085D\u085B\x03\x02\x02\x02" +
		"\u085D\u085E\x03\x02\x02\x02\u085E\u0860\x03\x02\x02\x02\u085F\u0859\x03" +
		"\x02\x02\x02\u085F\u0860\x03\x02\x02\x02\u0860\u0868\x03\x02\x02\x02\u0861" +
		"\u0865\x07\xCC\x02\x02\u0862\u0864\x05\x04\x03\x02\u0863\u0862\x03\x02" +
		"\x02\x02\u0864\u0867\x03\x02\x02\x02\u0865\u0863\x03\x02\x02\x02\u0865" +
		"\u0866\x03\x02\x02\x02\u0866\u0869\x03\x02\x02\x02\u0867\u0865\x03\x02" +
		"\x02\x02\u0868\u0861\x03\x02\x02\x02\u0868\u0869\x03\x02\x02\x02\u0869" +
		"\u0873\x03\x02\x02\x02\u086A\u086C\x07i\x02\x02\u086B\u086D\x05\x04\x03" +
		"\x02\u086C\u086B\x03\x02\x02\x02\u086D\u086E\x03\x02\x02\x02\u086E\u086C" +
		"\x03\x02\x02\x02\u086E\u086F\x03\x02\x02\x02\u086F\u0871\x03\x02\x02\x02" +
		"\u0870\u086A\x03\x02\x02\x02\u0870\u0871\x03\x02\x02\x02\u0871\u0872\x03" +
		"\x02\x02\x02\u0872\u0874\x05\x94K\x02\u0873\u0870\x03\x02\x02\x02\u0873" +
		"\u0874\x03\x02\x02\x02\u0874\u087D\x03\x02\x02\x02\u0875\u0877\x07\xE3" +
		"\x02\x02\u0876\u0878\x05\x04\x03\x02\u0877\u0876\x03\x02\x02\x02\u0878" +
		"\u0879\x03\x02\x02\x02\u0879\u0877\x03\x02\x02\x02\u0879\u087A\x03\x02" +
		"\x02\x02\u087A\u087B\x03\x02\x02\x02\u087B\u087C\x05\x96L\x02\u087C\u087E" +
		"\x03\x02\x02\x02\u087D\u0875\x03\x02\x02\x02\u087D\u087E\x03\x02\x02\x02" +
		"\u087E\u088C\x03\x02\x02\x02\u087F\u0881\x05\x04\x03\x02\u0880\u087F\x03" +
		"\x02\x02\x02\u0881\u0884\x03\x02\x02\x02\u0882\u0880\x03\x02\x02\x02\u0882" +
		"\u0883\x03\x02\x02\x02\u0883\u0885\x03\x02\x02\x02\u0884\u0882\x03\x02" +
		"\x02\x02\u0885\u0889\x07#\x02\x02\u0886\u0888\x05";
	private static readonly _serializedATNSegment5: string =
		"\x04\x03\x02\u0887\u0886\x03\x02\x02\x02\u0888\u088B\x03\x02\x02\x02\u0889" +
		"\u0887\x03\x02\x02\x02\u0889\u088A\x03\x02\x02\x02\u088A\u088D\x03\x02" +
		"\x02\x02\u088B\u0889\x03\x02\x02\x02\u088C\u0882\x03\x02\x02\x02\u088C" +
		"\u088D\x03\x02\x02\x02\u088D\u089E\x03\x02\x02\x02\u088E\u0890\x07L\x02" +
		"\x02\u088F\u0891\x05\x04\x03\x02\u0890\u088F\x03\x02\x02\x02\u0891\u0892" +
		"\x03\x02\x02\x02\u0892\u0890\x03\x02\x02\x02\u0892\u0893\x03\x02\x02\x02" +
		"\u0893\u089A\x03\x02\x02\x02\u0894\u0896\x07\x98\x02\x02\u0895\u0897\x05" +
		"\x04\x03\x02\u0896\u0895\x03\x02\x02\x02\u0897\u0898\x03\x02\x02\x02\u0898" +
		"\u0896\x03\x02\x02\x02\u0898\u0899\x03\x02\x02\x02\u0899\u089B\x03\x02" +
		"\x02\x02\u089A\u0894\x03\x02\x02\x02\u089A\u089B\x03\x02\x02\x02\u089B" +
		"\u089C\x03\x02\x02\x02\u089C\u089D\x05\x92J\x02\u089D\u089F\x03\x02\x02" +
		"\x02\u089E\u088E\x03\x02\x02\x02\u089E\u089F\x03\x02\x02\x02\u089F\u08A1" +
		"\x03\x02\x02\x02\u08A0\u082B\x03\x02\x02\x02\u08A0\u0851\x03\x02\x02\x02" +
		"\u08A1\x91\x03\x02\x02\x02\u08A2\u08A3\x05\xDEp\x02\u08A3\x93\x03\x02" +
		"\x02\x02\u08A4\u08A5\x07\u0110\x02\x02\u08A5\x95\x03\x02\x02\x02\u08A6" +
		"\u08A7\x07\u0110\x02\x02\u08A7\x97\x03\x02\x02\x02\u08A8\u08AA\x07\xF3" +
		"\x02\x02\u08A9\u08AB\x05\x04\x03\x02\u08AA\u08A9\x03\x02\x02\x02\u08AB" +
		"\u08AC\x03\x02\x02\x02\u08AC\u08AA\x03\x02\x02\x02\u08AC\u08AD\x03\x02" +
		"\x02\x02\u08AD\u08AE\x03\x02\x02\x02\u08AE\u08B2\x07\xC3\x02\x02\u08AF" +
		"\u08B1\x05\x04\x03\x02\u08B0\u08AF\x03\x02\x02\x02\u08B1\u08B4\x03\x02" +
		"\x02\x02\u08B2\u08B0\x03\x02\x02\x02\u08B2\u08B3\x03\x02\x02\x02\u08B3" +
		"\u08B5\x03\x02\x02\x02\u08B4\u08B2\x03\x02\x02\x02\u08B5\u08B9\x07\u010B" +
		"\x02\x02\u08B6\u08B8\x05\x04\x03\x02\u08B7\u08B6\x03\x02\x02\x02\u08B8" +
		"\u08BB\x03\x02\x02\x02\u08B9\u08B7\x03\x02\x02\x02\u08B9\u08BA\x03\x02" +
		"\x02\x02\u08BA\u08C5\x03\x02\x02\x02\u08BB\u08B9\x03\x02\x02\x02\u08BC" +
		"\u08C0\x05\x12\n\x02\u08BD\u08BF\x05\x04\x03\x02\u08BE\u08BD\x03\x02\x02" +
		"\x02\u08BF\u08C2\x03\x02\x02\x02\u08C0\u08BE\x03\x02\x02\x02\u08C0\u08C1" +
		"\x03\x02\x02\x02\u08C1\u08C4\x03\x02\x02\x02\u08C2\u08C0\x03\x02\x02\x02" +
		"\u08C3\u08BC\x03\x02\x02\x02\u08C4\u08C7\x03\x02\x02\x02\u08C5\u08C3\x03" +
		"\x02\x02\x02\u08C5\u08C6\x03\x02\x02\x02\u08C6\x99\x03\x02\x02\x02\u08C7" +
		"\u08C5\x03\x02\x02\x02\u08C8\u08CA\x07\x87\x02\x02\u08C9\u08CB\x05\x04" +
		"\x03\x02\u08CA\u08C9\x03\x02\x02\x02\u08CB\u08CC\x03\x02\x02\x02\u08CC" +
		"\u08CA\x03\x02\x02\x02\u08CC\u08CD\x03\x02\x02\x02\u08CD\u08CE\x03\x02" +
		"\x02\x02\u08CE\u08D2\x07\xC3\x02\x02\u08CF\u08D1\x05\x04\x03\x02\u08D0" +
		"\u08CF\x03\x02\x02\x02\u08D1\u08D4\x03\x02\x02\x02\u08D2\u08D0\x03\x02" +
		"\x02\x02\u08D2\u08D3\x03\x02\x02\x02\u08D3\u08D5\x03\x02\x02\x02\u08D4" +
		"\u08D2\x03\x02\x02\x02\u08D5\u08D9\x07\u010B\x02\x02\u08D6\u08D8\x05\x04" +
		"\x03\x02\u08D7\u08D6\x03\x02\x02\x02\u08D8\u08DB\x03\x02\x02\x02\u08D9" +
		"\u08D7\x03\x02\x02\x02\u08D9\u08DA\x03\x02\x02\x02\u08DA\u08E5\x03\x02" +
		"\x02\x02\u08DB\u08D9\x03\x02\x02\x02\u08DC\u08E0\x05\x12\n\x02\u08DD\u08DF" +
		"\x05\x04\x03\x02\u08DE\u08DD\x03\x02\x02\x02\u08DF\u08E2\x03\x02\x02\x02" +
		"\u08E0\u08DE\x03\x02\x02\x02\u08E0\u08E1\x03\x02\x02\x02\u08E1\u08E4\x03" +
		"\x02\x02\x02\u08E2\u08E0\x03\x02\x02\x02\u08E3\u08DC\x03\x02\x02\x02\u08E4" +
		"\u08E7\x03\x02\x02\x02\u08E5\u08E3\x03\x02\x02\x02\u08E5\u08E6\x03\x02" +
		"\x02\x02\u08E6\x9B\x03\x02\x02\x02\u08E7\u08E5\x03\x02\x02\x02\u08E8\u08EA" +
		"\x07\xB7\x02\x02\u08E9\u08EB\x05\x04\x03\x02\u08EA\u08E9\x03\x02\x02\x02" +
		"\u08EB\u08EC\x03\x02\x02\x02\u08EC\u08EA\x03\x02\x02\x02\u08EC\u08ED\x03" +
		"\x02\x02\x02\u08ED\u08EE\x03\x02\x02\x02\u08EE\u08F2\x07\xC3\x02\x02\u08EF" +
		"\u08F1\x05\x04\x03\x02\u08F0\u08EF\x03\x02\x02\x02\u08F1\u08F4\x03\x02" +
		"\x02\x02\u08F2\u08F0\x03\x02\x02\x02\u08F2\u08F3\x03\x02\x02\x02\u08F3" +
		"\u08F5\x03\x02\x02\x02\u08F4\u08F2\x03\x02\x02\x02\u08F5\u08F9\x07\u010B" +
		"\x02\x02\u08F6\u08F8\x05\x04\x03\x02\u08F7\u08F6\x03\x02\x02\x02\u08F8" +
		"\u08FB\x03\x02\x02\x02\u08F9\u08F7\x03\x02\x02\x02\u08F9\u08FA\x03\x02" +
		"\x02\x02\u08FA\u0905\x03\x02\x02\x02\u08FB\u08F9\x03\x02\x02\x02\u08FC" +
		"\u0900\x058\x1D\x02\u08FD\u08FF\x05\x04\x03\x02\u08FE\u08FD\x03\x02\x02" +
		"\x02\u08FF\u0902\x03\x02\x02\x02\u0900\u08FE\x03\x02\x02\x02\u0900\u0901" +
		"\x03\x02\x02\x02\u0901\u0904\x03\x02\x02\x02\u0902\u0900\x03\x02\x02\x02" +
		"\u0903\u08FC\x03\x02\x02\x02\u0904\u0907\x03\x02\x02\x02\u0905\u0903\x03" +
		"\x02\x02\x02\u0905\u0906\x03\x02\x02\x02\u0906\x9D\x03\x02\x02\x02\u0907" +
		"\u0905\x03\x02\x02\x02\u0908\u090A\x07\xC1\x02\x02\u0909\u090B\x05\x04" +
		"\x03\x02\u090A\u0909\x03\x02\x02\x02\u090B\u090C\x03\x02\x02\x02\u090C" +
		"\u090A\x03\x02\x02\x02\u090C\u090D\x03\x02\x02\x02\u090D\u090E\x03\x02" +
		"\x02\x02\u090E\u0912\x07\xC3\x02\x02\u090F\u0911\x05\x04\x03\x02\u0910" +
		"\u090F\x03\x02\x02\x02\u0911\u0914\x03\x02\x02\x02\u0912\u0910\x03\x02" +
		"\x02\x02\u0912\u0913\x03\x02\x02\x02\u0913\u0915\x03\x02\x02\x02\u0914" +
		"\u0912\x03\x02\x02\x02\u0915\u0919\x07\u010B\x02\x02\u0916\u0918\x05\x04" +
		"\x03\x02\u0917\u0916\x03\x02\x02\x02\u0918\u091B\x03\x02\x02\x02\u0919" +
		"\u0917\x03\x02\x02\x02\u0919\u091A\x03\x02\x02\x02\u091A\u0925\x03\x02" +
		"\x02\x02\u091B\u0919\x03\x02\x02\x02\u091C\u0920\x05\x16\f\x02\u091D\u091F" +
		"\x05\x04\x03\x02\u091E\u091D\x03\x02\x02\x02\u091F\u0922\x03\x02\x02\x02" +
		"\u0920\u091E\x03\x02\x02\x02\u0920\u0921\x03\x02\x02\x02\u0921\u0924\x03" +
		"\x02\x02\x02\u0922\u0920\x03\x02\x02\x02\u0923\u091C\x03\x02\x02\x02\u0924" +
		"\u0927\x03\x02\x02\x02\u0925\u0923\x03\x02\x02\x02\u0925\u0926\x03\x02" +
		"\x02\x02\u0926\x9F\x03\x02\x02\x02\u0927\u0925\x03\x02\x02\x02\u0928\u092A" +
		"\x07p\x02\x02\u0929\u092B\x05\x04\x03\x02\u092A\u0929\x03\x02\x02\x02" +
		"\u092B\u092C\x03\x02\x02\x02\u092C\u092A\x03\x02\x02\x02\u092C\u092D\x03" +
		"\x02\x02\x02\u092D\u092E\x03\x02\x02\x02\u092E\u0932\x07Q\x02\x02\u092F" +
		"\u0931\x05\x04\x03\x02\u0930\u092F\x03\x02\x02\x02\u0931\u0934\x03\x02" +
		"\x02\x02\u0932\u0930\x03\x02\x02\x02\u0932\u0933\x03\x02\x02\x02\u0933" +
		"\u0935\x03\x02\x02\x02\u0934\u0932\x03\x02\x02\x02\u0935\u0939\x07\u010B" +
		"\x02\x02\u0936\u0938\x05\x04\x03\x02\u0937\u0936\x03\x02\x02\x02\u0938" +
		"\u093B\x03\x02\x02\x02\u0939\u0937\x03\x02\x02\x02\u0939\u093A\x03\x02" +
		"\x02\x02\u093A\u093F\x03\x02\x02\x02\u093B\u0939\x03\x02\x02\x02\u093C" +
		"\u093E\x05\xA2R\x02\u093D\u093C\x03\x02\x02\x02\u093E\u0941\x03\x02\x02" +
		"\x02\u093F\u093D\x03\x02\x02\x02\u093F\u0940\x03\x02\x02\x02\u0940\xA1" +
		"\x03\x02\x02\x02\u0941\u093F\x03\x02\x02\x02\u0942\u094B\x05\xA4S\x02" +
		"\u0943\u094B\x05\xB0Y\x02\u0944\u094B\x05\xB2Z\x02\u0945\u094B\x05\xB4" +
		"[\x02\u0946\u094B\x05\xB6\\\x02\u0947\u094B\x05\xB8]\x02\u0948\u094B\x05" +
		"\xBA^\x02\u0949\u094B\x05\x04\x03\x02\u094A\u0942\x03\x02\x02\x02\u094A" +
		"\u0943\x03\x02\x02\x02\u094A\u0944\x03\x02\x02\x02\u094A\u0945\x03\x02" +
		"\x02\x02\u094A\u0946\x03\x02\x02\x02\u094A\u0947\x03\x02\x02\x02\u094A" +
		"\u0948\x03\x02\x02\x02\u094A\u0949\x03\x02\x02\x02\u094B\xA3\x03\x02\x02" +
		"\x02\u094C\u0950\x07\xAD\x02\x02\u094D\u094F\x05\x04\x03\x02\u094E\u094D" +
		"\x03\x02\x02\x02\u094F\u0952\x03\x02\x02\x02\u0950\u094E\x03\x02\x02\x02" +
		"\u0950\u0951\x03\x02\x02\x02\u0951\u0953\x03\x02\x02\x02\u0952\u0950\x03" +
		"\x02\x02\x02\u0953\u0957\x07\u010B\x02\x02\u0954\u0956\x05\x04\x03\x02" +
		"\u0955\u0954\x03\x02\x02\x02\u0956\u0959\x03\x02\x02\x02\u0957\u0955\x03" +
		"\x02\x02\x02\u0957\u0958\x03\x02\x02\x02\u0958\u095A\x03\x02\x02\x02\u0959" +
		"\u0957\x03\x02\x02\x02\u095A\u095E\x05\xA6T\x02\u095B\u095D\x05\x04\x03" +
		"\x02\u095C\u095B\x03\x02\x02\x02\u095D\u0960\x03\x02\x02\x02\u095E\u095C" +
		"\x03\x02\x02\x02\u095E\u095F\x03\x02\x02\x02\u095F\u0962\x03\x02\x02\x02" +
		"\u0960\u095E\x03\x02\x02\x02\u0961\u0963\x05\xA8U\x02\u0962\u0961\x03" +
		"\x02\x02\x02\u0962\u0963\x03\x02\x02\x02\u0963\u0967\x03\x02\x02\x02\u0964" +
		"\u0966\x05\x04\x03\x02\u0965\u0964\x03\x02\x02\x02\u0966\u0969\x03\x02" +
		"\x02\x02\u0967\u0965\x03\x02\x02\x02\u0967\u0968\x03\x02\x02\x02\u0968" +
		"\u096B\x03\x02\x02\x02\u0969\u0967\x03\x02\x02\x02\u096A\u096C\x05\xAA" +
		"V\x02\u096B\u096A\x03\x02\x02\x02\u096B\u096C\x03\x02\x02\x02\u096C\u0970" +
		"\x03\x02\x02\x02\u096D\u096F\x05\x04\x03\x02\u096E\u096D\x03\x02\x02\x02" +
		"\u096F\u0972\x03\x02\x02\x02\u0970\u096E\x03\x02\x02\x02\u0970\u0971\x03" +
		"\x02\x02\x02\u0971\u0973\x03\x02\x02\x02\u0972\u0970\x03\x02\x02\x02\u0973" +
		"\u0974\x07\u010B\x02\x02\u0974\xA5\x03\x02\x02\x02\u0975\u0976\x07\u0112" +
		"\x02\x02\u0976\xA7\x03\x02\x02\x02\u0977\u0979\x07x\x02\x02\u0978\u097A" +
		"\x05\x04\x03\x02\u0979\u0978\x03\x02\x02\x02\u097A\u097B\x03\x02\x02\x02" +
		"\u097B\u0979\x03\x02\x02\x02\u097B\u097C\x03\x02\x02\x02\u097C\u097E\x03" +
		"\x02\x02\x02\u097D\u0977\x03\x02\x02\x02\u097D\u097E\x03\x02\x02\x02\u097E" +
		"\u097F\x03\x02\x02\x02\u097F\u0987\t\x10\x02\x02\u0980\u0982\x05\x04\x03" +
		"\x02\u0981\u0980\x03\x02\x02\x02\u0982\u0983\x03\x02\x02\x02\u0983\u0981" +
		"\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02\u0984\u0985\x03\x02\x02\x02" +
		"\u0985\u0986\x07\xAC\x02\x02\u0986\u0988\x03\x02\x02\x02\u0987\u0981\x03" +
		"\x02\x02\x02\u0987\u0988\x03\x02\x02\x02\u0988\xA9\x03\x02\x02\x02\u0989" +
		"\u098B\x07\xF1\x02\x02\u098A\u098C\x05\x04\x03\x02\u098B\u098A\x03\x02" +
		"\x02\x02\u098C\u098D\x03\x02\x02\x02\u098D\u098B\x03\x02\x02\x02\u098D" +
		"\u098E\x03\x02\x02\x02\u098E\u0990\x03\x02\x02\x02\u098F\u0989\x03\x02" +
		"\x02\x02\u098F\u0990\x03\x02\x02\x02\u0990\u0991\x03\x02\x02\x02\u0991" +
		"\u0993\x07o\x02\x02\u0992\u0994\x05\x04\x03\x02\u0993\u0992\x03\x02\x02" +
		"\x02\u0994\u0995\x03\x02\x02\x02\u0995\u0993\x03\x02\x02\x02\u0995\u0996" +
		"\x03\x02\x02\x02\u0996\u0997\x03\x02\x02\x02\u0997\u0998\x05\xACW\x02" +
		"\u0998\xAB\x03\x02\x02\x02\u0999\u099A\x07\u010F\x02\x02\u099A\xAD\x03" +
		"\x02\x02\x02\u099B\u099F\x07\u0113\x02\x02\u099C\u099E\n\x02\x02\x02\u099D" +
		"\u099C\x03\x02\x02\x02\u099E\u09A1\x03\x02\x02\x02\u099F\u099D\x03\x02" +
		"\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u09A2\x03\x02\x02\x02\u09A1" +
		"\u099F\x03\x02\x02\x02\u09A2\u09A3\x07\u0115\x02\x02\u09A3\xAF\x03\x02" +
		"\x02\x02\u09A4\u09A8\x07\x13\x02\x02\u09A5\u09A7\x05\x04\x03\x02\u09A6" +
		"\u09A5\x03\x02\x02\x02\u09A7\u09AA\x03\x02\x02\x02\u09A8\u09A6\x03\x02" +
		"\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9\u09AB\x03\x02\x02\x02\u09AA" +
		"\u09A8\x03\x02\x02\x02\u09AB\u09AF\x07\u010B\x02\x02\u09AC\u09AE\n\x02" +
		"\x02\x02\u09AD\u09AC\x03\x02\x02\x02\u09AE\u09B1\x03\x02\x02\x02\u09AF" +
		"\u09AD\x03\x02\x02\x02\u09AF\u09B0\x03\x02\x02\x02\u09B0\u09B2\x03\x02" +
		"\x02\x02\u09B1\u09AF\x03\x02\x02\x02\u09B2\u09B6\x07\u0115\x02\x02\u09B3" +
		"\u09B5\x05\xAEX\x02\u09B4\u09B3\x03\x02\x02\x02\u09B5\u09B8\x03\x02\x02" +
		"\x02\u09B6\u09B4\x03\x02\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7\xB1" +
		"\x03\x02\x02\x02\u09B8\u09B6\x03\x02\x02\x02\u09B9\u09BD\x07w\x02\x02" +
		"\u09BA\u09BC\x05\x04\x03\x02\u09BB\u09BA\x03\x02\x02\x02\u09BC\u09BF\x03" +
		"\x02\x02\x02\u09BD\u09BB\x03\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE" +
		"\u09C0\x03\x02\x02\x02\u09BF\u09BD\x03\x02\x02\x02\u09C0\u09C4\x07\u010B" +
		"\x02\x02\u09C1\u09C3\n\x02\x02\x02\u09C2\u09C1\x03\x02\x02\x02\u09C3\u09C6" +
		"\x03\x02\x02\x02\u09C4\u09C2\x03\x02\x02\x02\u09C4\u09C5\x03\x02\x02\x02" +
		"\u09C5\u09C7\x03\x02\x02\x02\u09C6\u09C4\x03\x02\x02\x02\u09C7\u09CB\x07" +
		"\u0115\x02\x02\u09C8\u09CA\x05\xAEX\x02\u09C9\u09C8\x03\x02\x02\x02\u09CA" +
		"\u09CD\x03\x02\x02\x02\u09CB\u09C9\x03\x02\x02\x02\u09CB\u09CC\x03\x02" +
		"\x02\x02\u09CC\xB3\x03\x02\x02\x02\u09CD\u09CB\x03\x02\x02\x02\u09CE\u09D2" +
		"\x07F\x02\x02\u09CF\u09D1\x05\x04\x03\x02\u09D0\u09CF\x03\x02\x02\x02" +
		"\u09D1\u09D4\x03\x02\x02\x02\u09D2\u09D0\x03\x02\x02\x02\u09D2\u09D3\x03" +
		"\x02\x02\x02\u09D3\u09D5\x03\x02\x02\x02\u09D4\u09D2\x03\x02\x02\x02\u09D5" +
		"\u09D9\x07\u010B\x02\x02\u09D6\u09D8\n\x02\x02\x02\u09D7\u09D6\x03\x02" +
		"\x02\x02\u09D8\u09DB\x03\x02\x02\x02\u09D9\u09D7\x03\x02\x02\x02\u09D9" +
		"\u09DA\x03\x02\x02\x02\u09DA\u09DC\x03\x02\x02\x02\u09DB\u09D9\x03\x02" +
		"\x02\x02\u09DC\u09E0\x07\u0115\x02\x02\u09DD\u09DF\x05\xAEX\x02\u09DE" +
		"\u09DD\x03\x02\x02\x02\u09DF\u09E2\x03\x02\x02\x02\u09E0\u09DE\x03\x02" +
		"\x02\x02\u09E0\u09E1\x03\x02\x02\x02\u09E1\xB5\x03\x02\x02\x02\u09E2\u09E0" +
		"\x03\x02\x02\x02\u09E3\u09E7\x07E\x02\x02\u09E4\u09E6\x05\x04\x03\x02" +
		"\u09E5\u09E4\x03\x02\x02\x02\u09E6\u09E9\x03\x02\x02\x02\u09E7\u09E5\x03" +
		"\x02\x02\x02\u09E7\u09E8\x03\x02\x02\x02\u09E8\u09EA\x03\x02\x02\x02\u09E9" +
		"\u09E7\x03\x02\x02\x02\u09EA\u09EE\x07\u010B\x02\x02\u09EB\u09ED\n\x02" +
		"\x02\x02\u09EC\u09EB\x03\x02\x02\x02\u09ED\u09F0\x03\x02\x02\x02\u09EE" +
		"\u09EC\x03\x02\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09F1\x03\x02" +
		"\x02\x02\u09F0\u09EE\x03\x02\x02\x02\u09F1\u09F5\x07\u0115\x02\x02\u09F2" +
		"\u09F4\x05\xAEX\x02\u09F3\u09F2\x03\x02\x02\x02\u09F4\u09F7\x03\x02\x02" +
		"\x02\u09F5\u09F3\x03\x02\x02\x02\u09F5\u09F6\x03\x02\x02\x02\u09F6\xB7" +
		"\x03\x02\x02\x02\u09F7\u09F5\x03\x02\x02\x02\u09F8\u09FC\x07\xC4\x02\x02" +
		"\u09F9\u09FB\x05\x04\x03\x02\u09FA\u09F9\x03\x02\x02\x02\u09FB\u09FE\x03" +
		"\x02\x02\x02\u09FC\u09FA\x03\x02\x02\x02\u09FC\u09FD\x03\x02\x02\x02\u09FD" +
		"\u09FF\x03\x02\x02\x02\u09FE\u09FC\x03\x02\x02\x02\u09FF\u0A03\x07\u010B" +
		"\x02\x02\u0A00\u0A02\n\x02\x02\x02\u0A01\u0A00\x03\x02\x02\x02\u0A02\u0A05" +
		"\x03\x02\x02\x02\u0A03\u0A01\x03\x02\x02\x02\u0A03\u0A04\x03\x02\x02\x02" +
		"\u0A04\u0A06\x03\x02\x02\x02\u0A05\u0A03\x03\x02\x02\x02\u0A06\u0A0A\x07" +
		"\u0115\x02\x02\u0A07\u0A09\x05\xAEX\x02\u0A08\u0A07\x03\x02\x02\x02\u0A09" +
		"\u0A0C\x03\x02\x02\x02\u0A0A\u0A08\x03\x02\x02\x02\u0A0A\u0A0B\x03\x02" +
		"\x02\x02\u0A0B\xB9\x03\x02\x02\x02\u0A0C\u0A0A\x03\x02\x02\x02\u0A0D\u0A11" +
		"\x07\x9A\x02\x02\u0A0E\u0A10\x05\x04\x03\x02\u0A0F\u0A0E\x03\x02\x02\x02" +
		"\u0A10\u0A13\x03\x02\x02\x02\u0A11\u0A0F\x03\x02\x02\x02\u0A11\u0A12\x03" +
		"\x02\x02\x02\u0A12\u0A14\x03\x02\x02\x02\u0A13\u0A11\x03\x02\x02\x02\u0A14" +
		"\u0A18\x07\u010B\x02\x02\u0A15\u0A17\x05\x04\x03\x02\u0A16\u0A15\x03\x02" +
		"\x02\x02\u0A17\u0A1A\x03\x02\x02\x02\u0A18\u0A16\x03\x02\x02\x02\u0A18" +
		"\u0A19\x03\x02\x02\x02\u0A19\u0A1C\x03\x02\x02\x02\u0A1A\u0A18\x03\x02" +
		"\x02\x02\u0A1B\u0A1D\x05\xBC_\x02\u0A1C\u0A1B\x03\x02\x02\x02\u0A1C\u0A1D" +
		"\x03\x02\x02\x02\u0A1D\u0A21\x03\x02\x02\x02\u0A1E\u0A20\x05\x04\x03\x02" +
		"\u0A1F\u0A1E\x03\x02\x02\x02\u0A20\u0A23\x03\x02\x02\x02\u0A21\u0A1F\x03" +
		"\x02\x02\x02\u0A21\u0A22\x03\x02\x02\x02\u0A22\u0A25\x03\x02\x02\x02\u0A23" +
		"\u0A21\x03\x02\x02\x02\u0A24\u0A26\x07\u010B\x02\x02\u0A25\u0A24\x03\x02" +
		"\x02\x02\u0A25\u0A26\x03\x02\x02\x02\u0A26\xBB\x03\x02\x02\x02\u0A27\u0A29" +
		"\x07\x0E\x02\x02\u0A28\u0A2A\x05\x04\x03\x02\u0A29\u0A28\x03\x02\x02\x02" +
		"\u0A2A\u0A2B\x03\x02\x02\x02\u0A2B\u0A29\x03\x02\x02\x02\u0A2B\u0A2C\x03" +
		"\x02\x02\x02\u0A2C\u0A33\x03\x02\x02\x02\u0A2D\u0A2F\x07x\x02\x02\u0A2E" +
		"\u0A30\x05\x04\x03\x02\u0A2F\u0A2E\x03\x02\x02\x02\u0A30\u0A31\x03\x02" +
		"\x02\x02\u0A31\u0A2F\x03\x02\x02\x02\u0A31\u0A32\x03\x02\x02\x02\u0A32" +
		"\u0A34\x03\x02\x02\x02\u0A33\u0A2D\x03\x02\x02\x02\u0A33\u0A34\x03\x02" +
		"\x02\x02\u0A34\u0A35\x03\x02\x02\x02\u0A35\u0A39\t\x11\x02\x02\u0A36\u0A38" +
		"\x05\x04\x03\x02\u0A37\u0A36\x03\x02\x02\x02\u0A38\u0A3B\x03\x02\x02\x02" +
		"\u0A39\u0A37\x03\x02\x02\x02\u0A39\u0A3A\x03\x02\x02\x02\u0A3A\u0A3C\x03" +
		"\x02\x02\x02\u0A3B\u0A39\x03\x02\x02\x02\u0A3C\u0A3D\x07\u010B\x02\x02" +
		"\u0A3D\xBD\x03\x02\x02\x02\u0A3E\u0A40\x07V\x02\x02\u0A3F\u0A41\x05\x04" +
		"\x03\x02\u0A40\u0A3F\x03\x02\x02\x02\u0A41\u0A42\x03\x02\x02\x02\u0A42" +
		"\u0A40\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02\u0A43\u0A44\x03\x02" +
		"\x02\x02\u0A44\u0A48\x07Q\x02\x02\u0A45\u0A47\x05\x04\x03\x02\u0A46\u0A45" +
		"\x03\x02\x02\x02\u0A47\u0A4A\x03\x02\x02\x02\u0A48\u0A46\x03\x02\x02\x02" +
		"\u0A48\u0A49\x03\x02\x02\x02\u0A49\u0A4B\x03\x02\x02\x02\u0A4A\u0A48\x03" +
		"\x02\x02\x02\u0A4B\u0A4F\x07\u010B\x02\x02\u0A4C\u0A4E\x05\x04\x03\x02" +
		"\u0A4D\u0A4C\x03\x02\x02\x02\u0A4E\u0A51\x03\x02\x02\x02\u0A4F\u0A4D\x03" +
		"\x02\x02\x02\u0A4F\u0A50\x03\x02\x02\x02\u0A50\u0A53\x03\x02\x02\x02\u0A51" +
		"\u0A4F\x03\x02\x02\x02\u0A52\u0A54\x05\xC0a\x02\u0A53\u0A52\x03\x02\x02" +
		"\x02\u0A53\u0A54\x03\x02\x02\x02\u0A54\u0A56\x03\x02\x02\x02\u0A55\u0A57" +
		"\x05\xC2b\x02\u0A56\u0A55\x03\x02\x02\x02\u0A56\u0A57\x03\x02\x02\x02" +
		"\u0A57\xBF\x03\x02\x02\x02\u0A58\u0A5A\x07:\x02\x02\u0A59\u0A5B\x05\x04" +
		"\x03\x02\u0A5A\u0A59\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C" +
		"\u0A5A\x03\x02\x02\x02\u0A5C\u0A5D\x03\x02\x02\x02\u0A5D\u0A5E\x03\x02" +
		"\x02\x02\u0A5E\u0A62\x07\xC3\x02\x02\u0A5F\u0A61\x05\x04\x03\x02\u0A60" +
		"\u0A5F\x03\x02\x02\x02\u0A61\u0A64\x03\x02\x02\x02\u0A62\u0A60\x03\x02" +
		"\x02\x02\u0A62\u0A63\x03\x02\x02\x02\u0A63\u0A65\x03\x02\x02\x02\u0A64" +
		"\u0A62\x03\x02\x02\x02\u0A65\u0A69\x07\u010B\x02\x02\u0A66\u0A68\x05\x04" +
		"\x03\x02\u0A67\u0A66\x03\x02\x02\x02\u0A68\u0A6B\x03\x02\x02\x02\u0A69" +
		"\u0A67\x03\x02\x02\x02\u0A69\u0A6A\x03\x02\x02\x02\u0A6A\u0A6D\x03\x02" +
		"\x02\x02\u0A6B\u0A69\x03\x02\x02\x02\u0A6C\u0A6E\x05\xC4c\x02\u0A6D\u0A6C" +
		"\x03\x02\x02\x02\u0A6D\u0A6E\x03\x02\x02\x02\u0A6E\u0A72\x03\x02\x02\x02" +
		"\u0A6F\u0A71\x05\x04\x03\x02\u0A70\u0A6F\x03\x02\x02\x02\u0A71\u0A74\x03" +
		"\x02\x02\x02\u0A72\u0A70\x03\x02\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73" +
		"\u0A76\x03\x02\x02\x02\u0A74\u0A72\x03\x02\x02\x02\u0A75\u0A77\x05\xCA" +
		"f\x02\u0A76\u0A75\x03\x02\x02\x02\u0A76\u0A77\x03\x02\x02\x02\u0A77\u0A7B" +
		"\x03\x02\x02\x02\u0A78\u0A7A\x05\x04\x03\x02\u0A79\u0A78\x03\x02\x02\x02" +
		"\u0A7A\u0A7D\x03\x02\x02\x02\u0A7B\u0A79\x03\x02\x02\x02\u0A7B\u0A7C\x03" +
		"\x02\x02\x02\u0A7C\u0A7F\x03\x02\x02\x02\u0A7D\u0A7B\x03\x02\x02\x02\u0A7E" +
		"\u0A80\x05\xDAn\x02\u0A7F\u0A7E\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02" +
		"\x02\u0A80\u0A84\x03\x02\x02\x02\u0A81\u0A83\x05\x04\x03\x02\u0A82\u0A81" +
		"\x03\x02\x02\x02\u0A83\u0A86\x03\x02\x02\x02\u0A84\u0A82\x03\x02\x02\x02" +
		"\u0A84\u0A85\x03\x02\x02\x02\u0A85\xC1\x03\x02\x02\x02\u0A86\u0A84\x03" +
		"\x02\x02\x02\u0A87\u0A89\x07v\x02\x02\u0A88\u0A8A\x05\x04\x03\x02\u0A89" +
		"\u0A88\x03\x02\x02\x02\u0A8A\u0A8B\x03\x02\x02\x02\u0A8B\u0A89\x03\x02" +
		"\x02\x02\u0A8B\u0A8C\x03\x02\x02\x02\u0A8C\u0A8D\x03\x02\x02\x02\u0A8D" +
		"\u0A91\x07\xC3\x02\x02\u0A8E\u0A90\x05\x04\x03\x02\u0A8F\u0A8E\x03\x02" +
		"\x02\x02\u0A90\u0A93\x03\x02\x02\x02\u0A91\u0A8F\x03\x02\x02\x02\u0A91" +
		"\u0A92\x03\x02\x02\x02\u0A92\u0A94\x03\x02\x02\x02\u0A93\u0A91\x03\x02" +
		"\x02\x02\u0A94\u0A98\x07\u010B\x02\x02\u0A95\u0A97\x05\x04\x03\x02\u0A96" +
		"\u0A95\x03\x02\x02\x02\u0A97\u0A9A\x03\x02\x02\x02\u0A98\u0A96\x03\x02" +
		"\x02\x02\u0A98\u0A99\x03\x02\x02\x02\u0A99\u0A9C\x03\x02\x02\x02\u0A9A" +
		"\u0A98\x03\x02\x02\x02\u0A9B\u0A9D\x05\u011C\x8F\x02\u0A9C\u0A9B\x03\x02" +
		"\x02\x02\u0A9C\u0A9D\x03\x02\x02\x02\u0A9D\u0A9F\x03\x02\x02\x02\u0A9E" +
		"\u0AA0\x05\u014A\xA6\x02\u0A9F\u0A9E\x03\x02\x02\x02\u0A9F\u0AA0\x03\x02" +
		"\x02\x02\u0AA0\xC3\x03\x02\x02\x02\u0AA1\u0AA5\x07\xD0\x02\x02\u0AA2\u0AA4" +
		"\x05\x04\x03\x02\u0AA3\u0AA2\x03\x02\x02\x02\u0AA4\u0AA7\x03\x02\x02\x02" +
		"\u0AA5\u0AA3\x03\x02\x02\x02\u0AA5\u0AA6\x03\x02\x02\x02\u0AA6\u0AA8\x03" +
		"\x02\x02\x02\u0AA7\u0AA5\x03\x02\x02\x02\u0AA8\u0AAC\x07\u010B\x02\x02" +
		"\u0AA9\u0AAB\x05\x04\x03\x02\u0AAA\u0AA9\x03\x02\x02\x02\u0AAB\u0AAE\x03" +
		"\x02\x02\x02\u0AAC\u0AAA\x03\x02\x02\x02\u0AAC\u0AAD\x03\x02\x02\x02\u0AAD" +
		"\u0AC1\x03\x02\x02\x02\u0AAE\u0AAC\x03\x02\x02\x02\u0AAF\u0AB7\x05\xC6" +
		"d\x02\u0AB0\u0AB2\x05\x04\x03\x02\u0AB1\u0AB0\x03\x02\x02\x02\u0AB2\u0AB3" +
		"\x03\x02\x02\x02\u0AB3\u0AB1\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02\x02\x02" +
		"\u0AB4\u0AB5\x03\x02\x02\x02\u0AB5\u0AB6\x05\xC8e\x02\u0AB6\u0AB8\x03" +
		"\x02\x02\x02\u0AB7\u0AB1\x03\x02\x02\x02\u0AB7\u0AB8\x03\x02\x02\x02\u0AB8" +
		"\u0ABC\x03\x02\x02\x02\u0AB9\u0ABB\x05\x04\x03\x02\u0ABA\u0AB9\x03\x02" +
		"\x02\x02\u0ABB\u0ABE\x03\x02\x02\x02\u0ABC\u0ABA\x03\x02\x02\x02\u0ABC" +
		"\u0ABD\x03\x02\x02\x02\u0ABD\u0ABF\x03\x02\x02\x02\u0ABE\u0ABC\x03\x02" +
		"\x02\x02\u0ABF\u0AC0\x07\u010B\x02\x02\u0AC0\u0AC2\x03\x02\x02\x02\u0AC1" +
		"\u0AAF\x03\x02\x02\x02\u0AC1\u0AC2\x03\x02\x02\x02\u0AC2\xC5\x03\x02\x02" +
		"\x02\u0AC3\u0AC4\t\x12\x02\x02\u0AC4\xC7\x03\x02\x02\x02\u0AC5\u0AC7\x07" +
		"\xF1\x02\x02\u0AC6\u0AC8\x05\x04\x03\x02\u0AC7\u0AC6\x03\x02\x02\x02\u0AC8" +
		"\u0AC9\x03\x02\x02\x02\u0AC9\u0AC7\x03\x02\x02\x02\u0AC9\u0ACA\x03\x02" +
		"\x02\x02\u0ACA\u0ACC\x03\x02\x02\x02\u0ACB\u0AC5\x03\x02\x02\x02\u0ACB" +
		"\u0ACC\x03\x02\x02\x02\u0ACC\u0ACD\x03\x02\x02\x02\u0ACD\u0ACF\x07H\x02" +
		"\x02\u0ACE\u0AD0\x05\x04\x03\x02\u0ACF\u0ACE\x03\x02\x02\x02\u0AD0\u0AD1" +
		"\x03\x02\x02\x02\u0AD1\u0ACF\x03\x02\x02\x02\u0AD1\u0AD2\x03\x02\x02\x02" +
		"\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3\u0AD4\x07\x8D\x02\x02\u0AD4\xC9\x03" +
		"\x02\x02\x02\u0AD5\u0AD9\x07\x93\x02\x02\u0AD6\u0AD8\x05\x04\x03\x02\u0AD7" +
		"\u0AD6\x03\x02\x02\x02\u0AD8\u0ADB\x03\x02\x02\x02\u0AD9\u0AD7\x03\x02" +
		"\x02\x02\u0AD9\u0ADA\x03\x02\x02\x02\u0ADA\u0ADC\x03\x02\x02\x02\u0ADB" +
		"\u0AD9\x03\x02\x02\x02\u0ADC\u0AE0\x07\u010B\x02\x02\u0ADD\u0ADF\x05\x04" +
		"\x03\x02\u0ADE\u0ADD\x03\x02\x02\x02\u0ADF\u0AE2\x03\x02\x02\x02\u0AE0" +
		"\u0ADE\x03\x02\x02\x02\u0AE0\u0AE1\x03\x02\x02\x02\u0AE1\u0B07\x03\x02" +
		"\x02\x02\u0AE2\u0AE0\x03\x02\x02\x02\u0AE3\u0AEB\x05\xC6d\x02\u0AE4\u0AE6" +
		"\x05\x04\x03\x02\u0AE5\u0AE4\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02\x02" +
		"\u0AE7\u0AE5\x03\x02\x02\x02\u0AE7\u0AE8\x03\x02\x02\x02\u0AE8\u0AE9\x03" +
		"\x02\x02\x02\u0AE9\u0AEA\x05\xCCg\x02\u0AEA\u0AEC\x03\x02\x02\x02\u0AEB" +
		"\u0AE5\x03\x02\x02\x02\u0AEB\u0AEC\x03\x02\x02\x02\u0AEC\u0AF4\x03\x02" +
		"\x02\x02\u0AED\u0AEF\x05\x04\x03\x02\u0AEE\u0AED\x03\x02\x02\x02\u0AEF" +
		"\u0AF0\x03\x02\x02\x02\u0AF0\u0AEE\x03\x02\x02\x02\u0AF0\u0AF1\x03\x02" +
		"\x02\x02\u0AF1\u0AF2\x03\x02\x02\x02\u0AF2\u0AF3\x05\xD2j\x02\u0AF3\u0AF5" +
		"\x03\x02\x02\x02\u0AF4\u0AEE\x03\x02\x02\x02\u0AF4\u0AF5\x03\x02\x02\x02" +
		"\u0AF5\u0AFD\x03\x02\x02\x02\u0AF6\u0AF8\x05\x04\x03\x02\u0AF7\u0AF6\x03" +
		"\x02\x02\x02\u0AF8\u0AF9\x03\x02\x02\x02\u0AF9\u0AF7\x03\x02\x02\x02\u0AF9" +
		"\u0AFA\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02\u0AFB\u0AFC\x05\xD6" +
		"l\x02\u0AFC\u0AFE\x03\x02\x02\x02\u0AFD\u0AF7\x03\x02\x02\x02\u0AFD\u0AFE" +
		"\x03\x02\x02\x02\u0AFE\u0B02\x03\x02\x02\x02\u0AFF\u0B01\x05\x04\x03\x02" +
		"\u0B00\u0AFF\x03\x02\x02\x02\u0B01\u0B04\x03\x02\x02\x02\u0B02\u0B00\x03" +
		"\x02\x02\x02\u0B02\u0B03\x03\x02\x02\x02\u0B03\u0B05\x03\x02\x02\x02\u0B04" +
		"\u0B02\x03\x02\x02\x02\u0B05\u0B06\x07\u010B\x02\x02\u0B06\u0B08\x03\x02" +
		"\x02\x02\u0B07\u0AE3\x03\x02\x02\x02\u0B07\u0B08\x03\x02\x02\x02\u0B08" +
		"\xCB\x03\x02\x02\x02\u0B09\u0B11\x07\x8C\x02\x02\u0B0A\u0B0C\x05\x04\x03" +
		"\x02\u0B0B\u0B0A\x03\x02\x02\x02\u0B0C\u0B0D\x03\x02\x02\x02\u0B0D\u0B0B" +
		"\x03\x02\x02\x02\u0B0D\u0B0E\x03\x02\x02\x02\u0B0E\u0B0F\x03\x02\x02\x02" +
		"\u0B0F\u0B10\x07\xCC\x02\x02\u0B10\u0B12\x03\x02\x02\x02\u0B11\u0B0B\x03" +
		"\x02\x02\x02\u0B11\u0B12\x03\x02\x02\x02\u0B12\u0B14\x03\x02\x02\x02\u0B13" +
		"\u0B15\x05\x04\x03\x02\u0B14\u0B13\x03\x02\x02\x02\u0B15\u0B16\x03\x02" +
		"\x02\x02\u0B16\u0B14\x03\x02\x02\x02\u0B16\u0B17\x03\x02\x02\x02\u0B17" +
		"\u0B18\x03\x02\x02\x02\u0B18\u0B1A\x05\xCEh\x02\u0B19\u0B1B\x05\x04\x03" +
		"\x02\u0B1A\u0B19\x03\x02\x02\x02\u0B1B\u0B1C\x03\x02\x02\x02\u0B1C\u0B1A" +
		"\x03\x02\x02\x02\u0B1C\u0B1D\x03\x02\x02\x02\u0B1D\u0B1E\x03\x02\x02\x02" +
		"\u0B1E\u0B1F\x05\xD0i\x02\u0B1F\xCD\x03\x02\x02\x02\u0B20\u0B21\x07\u0110" +
		"\x02\x02\u0B21\xCF\x03\x02\x02\x02\u0B22\u0B23\t\x13\x02\x02\u0B23\xD1" +
		"\x03\x02\x02\x02\u0B24\u0B26\x07\xAC\x02\x02\u0B25\u0B27\x05\x04\x03\x02" +
		"\u0B26\u0B25\x03\x02\x02\x02\u0B27\u0B28\x03\x02\x02\x02\u0B28\u0B26\x03" +
		"\x02\x02\x02\u0B28\u0B29\x03\x02\x02\x02\u0B29\u0B2B\x03\x02\x02\x02\u0B2A" +
		"\u0B24\x03\x02\x02\x02\u0B2A\u0B2B\x03\x02\x02\x02\u0B2B\u0B32\x03\x02" +
		"\x02\x02\u0B2C\u0B2E\x07(\x02\x02\u0B2D\u0B2F\x05\x04\x03\x02\u0B2E\u0B2D" +
		"\x03\x02\x02\x02\u0B2F\u0B30\x03\x02\x02\x02\u0B30\u0B2E\x03\x02\x02\x02" +
		"\u0B30\u0B31\x03\x02\x02\x02\u0B31\u0B33\x03\x02\x02\x02\u0B32\u0B2C\x03" +
		"\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33\u0B34\x03\x02\x02\x02\u0B34" +
		"\u0B3C\x07\xC8\x02\x02\u0B35\u0B37\x05\x04\x03\x02\u0B36\u0B35\x03\x02" +
		"\x02\x02\u0B37\u0B38\x03\x02\x02\x02\u0B38\u0B36\x03\x02\x02\x02\u0B38" +
		"\u0B39\x03\x02\x02\x02\u0B39\u0B3A\x03\x02\x02\x02\u0B3A\u0B3B\x07x\x02" +
		"\x02\u0B3B\u0B3D\x03\x02\x02\x02\u0B3C\u0B36\x03\x02\x02\x02\u0B3C\u0B3D" +
		"\x03\x02\x02\x02\u0B3D\u0B3F\x03\x02\x02\x02\u0B3E\u0B40\x05\x04\x03\x02" +
		"\u0B3F\u0B3E\x03\x02\x02\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41\u0B3F\x03" +
		"\x02\x02\x02\u0B41\u0B42\x03\x02\x02\x02\u0B42\u0B43\x03\x02\x02\x02\u0B43" +
		"\u0B44\x05\xD4k\x02\u0B44\xD3\x03\x02\x02\x02\u0B45\u0B46\x07\u0112\x02" +
		"\x02\u0B46\xD5\x03\x02\x02\x02\u0B47\u0B4F\x07\xC5\x02\x02\u0B48\u0B4A" +
		"\x05\x04\x03\x02\u0B49\u0B48\x03\x02\x02";
	private static readonly _serializedATNSegment6: string =
		"\x02\u0B4A\u0B4B\x03\x02\x02\x02\u0B4B\u0B49\x03\x02\x02\x02\u0B4B\u0B4C" +
		"\x03\x02\x02\x02\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\u0B4E\x07x\x02\x02" +
		"\u0B4E\u0B50\x03\x02\x02\x02\u0B4F\u0B49\x03\x02\x02\x02\u0B4F\u0B50\x03" +
		"\x02\x02\x02\u0B50\u0B51\x03\x02\x02\x02\u0B51\u0B52\x05\xD8m\x02\u0B52" +
		"\xD7\x03\x02\x02\x02\u0B53\u0B54\x07\u0110\x02\x02\u0B54\xD9\x03\x02\x02" +
		"\x02\u0B55\u0B59\x07\xD1\x02\x02\u0B56\u0B58\x05\x04\x03\x02\u0B57\u0B56" +
		"\x03\x02\x02\x02\u0B58\u0B5B\x03\x02\x02\x02\u0B59\u0B57\x03\x02\x02\x02" +
		"\u0B59\u0B5A\x03\x02\x02\x02\u0B5A\u0B5C\x03\x02\x02\x02\u0B5B\u0B59\x03" +
		"\x02\x02\x02\u0B5C\u0B60\x07\u010B\x02\x02\u0B5D\u0B5F\x05\x04\x03\x02" +
		"\u0B5E\u0B5D\x03\x02\x02\x02\u0B5F\u0B62\x03\x02\x02\x02\u0B60\u0B5E\x03" +
		"\x02\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61\u0B70\x03\x02\x02\x02\u0B62" +
		"\u0B60\x03\x02\x02\x02\u0B63\u0B67\x05\xDCo\x02\u0B64\u0B66\x05\x04\x03" +
		"\x02\u0B65\u0B64\x03\x02\x02\x02\u0B66\u0B69\x03\x02\x02\x02\u0B67\u0B65" +
		"\x03\x02\x02\x02\u0B67\u0B68\x03\x02\x02\x02\u0B68\u0B6B\x03\x02\x02\x02" +
		"\u0B69\u0B67\x03\x02\x02\x02\u0B6A\u0B63\x03\x02\x02\x02\u0B6B\u0B6C\x03" +
		"\x02\x02\x02\u0B6C\u0B6A\x03\x02\x02\x02\u0B6C\u0B6D\x03\x02\x02\x02\u0B6D" +
		"\u0B6E\x03\x02\x02\x02\u0B6E\u0B6F\x07\u010B\x02\x02\u0B6F\u0B71\x03\x02" +
		"\x02\x02\u0B70\u0B6A\x03\x02\x02\x02\u0B70\u0B71\x03\x02\x02\x02\u0B71" +
		"\xDB\x03\x02\x02\x02\u0B72\u0B74\x05\u0114\x8B\x02\u0B73\u0B75\x05\x04" +
		"\x03\x02\u0B74\u0B73\x03\x02\x02\x02\u0B75\u0B76\x03\x02\x02\x02\u0B76" +
		"\u0B74\x03\x02\x02\x02\u0B76\u0B77\x03\x02\x02\x02\u0B77\u0B7E\x03\x02" +
		"\x02\x02\u0B78\u0B7A\x07x\x02\x02\u0B79\u0B7B\x05\x04\x03\x02\u0B7A\u0B79" +
		"\x03\x02\x02\x02\u0B7B\u0B7C\x03\x02\x02\x02\u0B7C\u0B7A\x03\x02\x02\x02" +
		"\u0B7C\u0B7D\x03\x02\x02\x02\u0B7D\u0B7F\x03\x02\x02\x02\u0B7E\u0B78\x03" +
		"\x02\x02\x02\u0B7E\u0B7F\x03\x02\x02\x02\u0B7F\u0B80\x03\x02\x02\x02\u0B80" +
		"\u0B81\x05\u0116\x8C\x02\u0B81\u0BDE\x03\x02\x02\x02\u0B82\u0B84\x05\u0118" +
		"\x8D\x02\u0B83\u0B85\x05\x04\x03\x02\u0B84\u0B83\x03\x02\x02\x02\u0B85" +
		"\u0B86\x03\x02\x02\x02\u0B86\u0B84\x03\x02\x02\x02\u0B86\u0B87\x03\x02" +
		"\x02\x02\u0B87\u0B8E\x03\x02\x02\x02\u0B88\u0B8A\x07x\x02\x02\u0B89\u0B8B" +
		"\x05\x04\x03\x02\u0B8A\u0B89\x03\x02\x02\x02\u0B8B\u0B8C\x03\x02\x02\x02" +
		"\u0B8C\u0B8A\x03\x02\x02\x02\u0B8C\u0B8D\x03\x02\x02\x02\u0B8D\u0B8F\x03" +
		"\x02\x02\x02\u0B8E\u0B88\x03\x02\x02\x02\u0B8E\u0B8F\x03\x02\x02\x02\u0B8F" +
		"\u0B90\x03\x02\x02\x02\u0B90\u0B91\x05\u011A\x8E\x02\u0B91\u0BDE\x03\x02" +
		"\x02\x02\u0B92\u0B94\x07\x1E\x02\x02\u0B93\u0B95\x05\x04\x03\x02\u0B94" +
		"\u0B93\x03\x02\x02\x02\u0B95\u0B96\x03\x02\x02\x02\u0B96\u0B94\x03\x02" +
		"\x02\x02\u0B96\u0B97\x03\x02\x02\x02\u0B97\u0B9E\x03\x02\x02\x02\u0B98" +
		"\u0B9A\x07x\x02\x02\u0B99\u0B9B\x05\x04\x03\x02\u0B9A\u0B99\x03\x02\x02" +
		"\x02\u0B9B\u0B9C\x03\x02\x02\x02\u0B9C\u0B9A\x03\x02\x02\x02\u0B9C\u0B9D" +
		"\x03\x02\x02\x02\u0B9D\u0B9F\x03\x02\x02\x02\u0B9E\u0B98\x03\x02\x02\x02" +
		"\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0BA1\x05" +
		"\u0112\x8A\x02\u0BA1\u0BDE\x03\x02\x02\x02\u0BA2\u0BDE\x05\u0106\x84\x02" +
		"\u0BA3\u0BDE\x05\xFA~\x02\u0BA4\u0BDE\x05\xEEx\x02\u0BA5\u0BDE\x05\xE8" +
		"u\x02\u0BA6\u0BDE\x05\xE0q\x02\u0BA7\u0BA9\x07I\x02\x02\u0BA8\u0BAA\x05" +
		"\x04\x03\x02\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02\x02\x02\u0BAB" +
		"\u0BA9\x03\x02\x02\x02\u0BAB\u0BAC\x03\x02\x02\x02\u0BAC\u0BB3\x03\x02" +
		"\x02\x02\u0BAD\u0BAF\x07x\x02\x02\u0BAE\u0BB0\x05\x04\x03\x02\u0BAF\u0BAE" +
		"\x03\x02\x02\x02\u0BB0\u0BB1\x03\x02\x02\x02\u0BB1\u0BAF\x03\x02\x02\x02" +
		"\u0BB1\u0BB2\x03\x02\x02\x02\u0BB2\u0BB4\x03\x02\x02\x02\u0BB3\u0BAD\x03" +
		"\x02\x02\x02\u0BB3\u0BB4\x03\x02\x02\x02\u0BB4\u0BB5\x03\x02\x02\x02\u0BB5" +
		"\u0BB6\x07*\x02\x02\u0BB6\u0BDE\x03\x02\x02\x02\u0BB7\u0BB9\x07C\x02\x02" +
		"\u0BB8\u0BBA\x05\x04\x03\x02\u0BB9\u0BB8\x03\x02\x02\x02\u0BBA\u0BBB\x03" +
		"\x02\x02\x02\u0BBB\u0BB9\x03\x02\x02\x02\u0BBB\u0BBC\x03\x02\x02\x02\u0BBC" +
		"\u0BC3\x03\x02\x02\x02\u0BBD\u0BBF\x07x\x02\x02\u0BBE\u0BC0\x05\x04\x03" +
		"\x02\u0BBF\u0BBE\x03\x02\x02\x02\u0BC0\u0BC1\x03\x02\x02\x02\u0BC1\u0BBF" +
		"\x03\x02\x02\x02\u0BC1\u0BC2\x03\x02\x02\x02\u0BC2\u0BC4\x03\x02\x02\x02" +
		"\u0BC3\u0BBD\x03\x02\x02\x02\u0BC3\u0BC4\x03\x02\x02\x02\u0BC4\u0BC5\x03" +
		"\x02\x02\x02\u0BC5\u0BC6\x05\xDEp\x02\u0BC6\u0BDE\x03\x02\x02\x02\u0BC7" +
		"\u0BC9\x07A\x02\x02\u0BC8\u0BCA\x05\x04\x03\x02\u0BC9\u0BC8\x03\x02\x02" +
		"\x02\u0BCA\u0BCB\x03\x02\x02\x02\u0BCB\u0BC9\x03\x02\x02\x02\u0BCB\u0BCC" +
		"\x03\x02\x02\x02\u0BCC\u0BCD\x03\x02\x02\x02\u0BCD\u0BCF\x07\xD5\x02\x02" +
		"\u0BCE\u0BD0\x05\x04\x03\x02\u0BCF\u0BCE\x03\x02\x02\x02\u0BD0\u0BD1\x03" +
		"\x02\x02\x02\u0BD1\u0BCF\x03\x02\x02\x02\u0BD1\u0BD2\x03\x02\x02\x02\u0BD2" +
		"\u0BD9\x03\x02\x02\x02\u0BD3\u0BD5\x07x\x02\x02\u0BD4\u0BD6\x05\x04\x03" +
		"\x02\u0BD5\u0BD4\x03\x02\x02\x02\u0BD6\u0BD7\x03\x02\x02\x02\u0BD7\u0BD5" +
		"\x03\x02\x02\x02\u0BD7\u0BD8\x03\x02\x02\x02\u0BD8\u0BDA\x03\x02\x02\x02" +
		"\u0BD9\u0BD3\x03\x02\x02\x02\u0BD9\u0BDA\x03\x02\x02\x02\u0BDA\u0BDB\x03" +
		"\x02\x02\x02\u0BDB\u0BDC\x05\xDEp\x02\u0BDC\u0BDE\x03\x02\x02\x02\u0BDD" +
		"\u0B72\x03\x02\x02\x02\u0BDD\u0B82\x03\x02\x02\x02\u0BDD\u0B92\x03\x02" +
		"\x02\x02\u0BDD\u0BA2\x03\x02\x02\x02\u0BDD\u0BA3\x03\x02\x02\x02\u0BDD" +
		"\u0BA4\x03\x02\x02\x02\u0BDD\u0BA5\x03\x02\x02\x02\u0BDD\u0BA6\x03\x02" +
		"\x02\x02\u0BDD\u0BA7\x03\x02\x02\x02\u0BDD\u0BB7\x03\x02\x02\x02\u0BDD" +
		"\u0BC7\x03\x02\x02\x02\u0BDE\xDD\x03\x02\x02\x02\u0BDF\u0BEE\x07\u0112" +
		"\x02\x02\u0BE0\u0BE2\t\x14\x02\x02\u0BE1\u0BE3\x05\x04\x03\x02\u0BE2\u0BE1" +
		"\x03\x02\x02\x02\u0BE3\u0BE4\x03\x02\x02\x02\u0BE4\u0BE2\x03\x02\x02\x02" +
		"\u0BE4\u0BE5\x03\x02\x02\x02\u0BE5\u0BE6\x03\x02\x02\x02\u0BE6\u0BE8\x07" +
		"\u0112\x02\x02\u0BE7\u0BE9\x05\x04\x03\x02\u0BE8\u0BE7\x03\x02\x02\x02" +
		"\u0BE9\u0BEA\x03\x02\x02\x02\u0BEA\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB\x03" +
		"\x02\x02\x02\u0BEB\u0BED\x03\x02\x02\x02\u0BEC\u0BE0\x03\x02\x02\x02\u0BED" +
		"\u0BF0\x03\x02\x02\x02\u0BEE\u0BEC\x03\x02\x02\x02\u0BEE\u0BEF\x03\x02" +
		"\x02\x02\u0BEF\xDF\x03\x02\x02\x02\u0BF0\u0BEE\x03\x02\x02\x02\u0BF1\u0BF3" +
		"\x07B\x02\x02\u0BF2\u0BF4\x05\x04\x03\x02\u0BF3\u0BF2\x03\x02\x02\x02" +
		"\u0BF4\u0BF5\x03\x02\x02\x02\u0BF5\u0BF3\x03\x02\x02\x02\u0BF5\u0BF6\x03" +
		"\x02\x02\x02\u0BF6\u0BFD\x03\x02\x02\x02\u0BF7\u0BF9\x07\xCA\x02\x02\u0BF8" +
		"\u0BFA\x05\x04\x03\x02\u0BF9\u0BF8\x03\x02\x02\x02\u0BFA\u0BFB\x03\x02" +
		"\x02\x02\u0BFB\u0BF9\x03\x02\x02\x02\u0BFB\u0BFC\x03\x02\x02\x02\u0BFC" +
		"\u0BFE\x03\x02\x02\x02\u0BFD\u0BF7\x03\x02\x02\x02\u0BFD\u0BFE\x03\x02" +
		"\x02\x02\u0BFE\u0C05\x03\x02\x02\x02\u0BFF\u0C01\x07x\x02\x02\u0C00\u0C02" +
		"\x05\x04\x03\x02\u0C01\u0C00\x03\x02\x02\x02\u0C02\u0C03\x03\x02\x02\x02" +
		"\u0C03\u0C01\x03\x02\x02\x02\u0C03\u0C04\x03\x02\x02\x02\u0C04\u0C06\x03" +
		"\x02\x02\x02\u0C05\u0BFF\x03\x02\x02\x02\u0C05\u0C06\x03\x02\x02\x02\u0C06" +
		"\u0C07\x03\x02\x02\x02\u0C07\u0C08\x05\xE2r\x02\u0C08\xE1\x03\x02\x02" +
		"\x02\u0C09\u0C10\x05\xE4s\x02\u0C0A\u0C0C\x07\xF1\x02\x02\u0C0B\u0C0D" +
		"\x05\x04\x03\x02\u0C0C\u0C0B\x03\x02\x02\x02\u0C0D\u0C0E\x03\x02\x02\x02" +
		"\u0C0E\u0C0C\x03\x02\x02\x02\u0C0E\u0C0F\x03\x02\x02\x02\u0C0F\u0C11\x03" +
		"\x02\x02\x02\u0C10\u0C0A\x03\x02\x02\x02\u0C10\u0C11\x03\x02\x02\x02\u0C11" +
		"\u0C12\x03\x02\x02\x02\u0C12\u0C14\x07\xA4\x02\x02\u0C13\u0C15\x05\x04" +
		"\x03\x02\u0C14\u0C13\x03\x02\x02\x02\u0C15\u0C16\x03\x02\x02\x02\u0C16" +
		"\u0C14\x03\x02\x02\x02\u0C16\u0C17\x03\x02\x02\x02\u0C17\u0C18\x03\x02" +
		"\x02\x02\u0C18\u0C1A\x07\xD8\x02\x02\u0C19\u0C1B\x05\x04\x03\x02\u0C1A" +
		"\u0C19\x03\x02\x02\x02\u0C1B\u0C1C\x03\x02\x02\x02\u0C1C\u0C1A\x03\x02" +
		"\x02\x02\u0C1C\u0C1D\x03\x02\x02\x02\u0C1D\u0C1E\x03\x02\x02\x02\u0C1E" +
		"\u0C1F\x05\xE6t\x02\u0C1F\u0C22\x03\x02\x02\x02\u0C20\u0C22\x07\u010F" +
		"\x02\x02\u0C21\u0C09\x03\x02\x02\x02\u0C21\u0C20\x03\x02\x02\x02\u0C22" +
		"\xE3\x03\x02\x02\x02\u0C23\u0C24\x07\u010F\x02\x02\u0C24\xE5\x03\x02\x02" +
		"\x02\u0C25\u0C26\x07\u010F\x02\x02\u0C26\xE7\x03\x02\x02\x02\u0C27\u0C29" +
		"\x07$\x02\x02\u0C28\u0C2A\x05\x04\x03\x02\u0C29\u0C28\x03\x02\x02\x02" +
		"\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0C29\x03\x02\x02\x02\u0C2B\u0C2C\x03" +
		"\x02\x02\x02\u0C2C\u0C2D\x03\x02\x02\x02\u0C2D\u0C2F\x05\xEAv\x02\u0C2E" +
		"\u0C30\x05\x04\x03\x02\u0C2F\u0C2E\x03\x02\x02\x02\u0C30\u0C31\x03\x02" +
		"\x02\x02\u0C31\u0C2F\x03\x02\x02\x02\u0C31\u0C32\x03\x02\x02\x02\u0C32" +
		"\u0C39\x03\x02\x02\x02\u0C33\u0C35\x07x\x02\x02\u0C34\u0C36\x05\x04\x03" +
		"\x02\u0C35\u0C34\x03\x02\x02\x02\u0C36\u0C37\x03\x02\x02\x02\u0C37\u0C35" +
		"\x03\x02\x02\x02\u0C37\u0C38\x03\x02\x02\x02\u0C38\u0C3A\x03\x02\x02\x02" +
		"\u0C39\u0C33\x03\x02\x02\x02\u0C39\u0C3A\x03\x02\x02\x02\u0C3A\u0C42\x03" +
		"\x02\x02\x02\u0C3B\u0C3F\x05\xECw\x02\u0C3C\u0C3E\x05\x04\x03\x02\u0C3D" +
		"\u0C3C\x03\x02\x02\x02\u0C3E\u0C41\x03\x02\x02\x02\u0C3F\u0C3D\x03\x02" +
		"\x02\x02\u0C3F\u0C40\x03\x02\x02\x02\u0C40\u0C43\x03\x02\x02\x02\u0C41" +
		"\u0C3F\x03\x02\x02\x02\u0C42\u0C3B\x03\x02\x02\x02\u0C43\u0C44\x03\x02" +
		"\x02\x02\u0C44\u0C42\x03\x02\x02\x02\u0C44\u0C45\x03\x02\x02\x02\u0C45" +
		"\xE9\x03\x02\x02\x02\u0C46\u0C47\x07\u0112\x02\x02\u0C47\xEB\x03\x02\x02" +
		"\x02\u0C48\u0C56\x05\u0100\x81\x02\u0C49\u0C4B\x05\x04\x03\x02\u0C4A\u0C49" +
		"\x03\x02\x02\x02\u0C4B\u0C4C\x03\x02\x02\x02\u0C4C\u0C4A\x03\x02\x02\x02" +
		"\u0C4C\u0C4D\x03\x02\x02\x02\u0C4D\u0C4E\x03\x02\x02\x02\u0C4E\u0C50\t" +
		"\x07\x02\x02\u0C4F\u0C51\x05\x04\x03\x02\u0C50\u0C4F\x03\x02\x02\x02\u0C51" +
		"\u0C52\x03\x02\x02\x02\u0C52\u0C50\x03\x02\x02\x02\u0C52\u0C53\x03\x02" +
		"\x02\x02\u0C53\u0C54\x03\x02\x02\x02\u0C54\u0C55\x05\u0102\x82\x02\u0C55" +
		"\u0C57\x03\x02\x02\x02\u0C56\u0C4A\x03\x02\x02\x02\u0C56\u0C57\x03\x02" +
		"\x02\x02\u0C57\xED\x03\x02\x02\x02\u0C58\u0C5A\x07\xD9\x02\x02\u0C59\u0C5B" +
		"\x05\x04\x03\x02\u0C5A\u0C59\x03\x02\x02\x02\u0C5B\u0C5C\x03\x02\x02\x02" +
		"\u0C5C\u0C5A\x03\x02\x02\x02\u0C5C\u0C5D\x03\x02\x02\x02\u0C5D\u0C64\x03" +
		"\x02\x02\x02\u0C5E\u0C60\x07#\x02\x02\u0C5F\u0C61\x05\x04\x03\x02\u0C60" +
		"\u0C5F\x03\x02\x02\x02\u0C61\u0C62\x03\x02\x02\x02\u0C62\u0C60\x03\x02" +
		"\x02\x02\u0C62\u0C63\x03\x02\x02\x02\u0C63\u0C65\x03\x02\x02\x02\u0C64" +
		"\u0C5E\x03\x02\x02\x02\u0C64\u0C65\x03\x02\x02\x02\u0C65\u0C67\x03\x02" +
		"\x02\x02\u0C66\u0C68\x05\xF0y\x02\u0C67\u0C66\x03\x02\x02\x02\u0C68\u0C69" +
		"\x03\x02\x02\x02\u0C69\u0C67\x03\x02\x02\x02\u0C69\u0C6A\x03\x02\x02\x02" +
		"\u0C6A\xEF\x03\x02\x02\x02\u0C6B\u0C6D\x05\xF2z\x02\u0C6C\u0C6B\x03\x02" +
		"\x02\x02\u0C6D\u0C6E\x03\x02\x02\x02\u0C6E\u0C6C\x03\x02\x02\x02\u0C6E" +
		"\u0C6F\x03\x02\x02\x02\u0C6F\u0C71\x03\x02\x02\x02\u0C70\u0C72\x05\xF4" +
		"{\x02\u0C71\u0C70\x03\x02\x02\x02\u0C71\u0C72\x03\x02\x02\x02\u0C72\xF1" +
		"\x03\x02\x02\x02\u0C73\u0C75\x05\xF6|\x02\u0C74\u0C76\x05\x04\x03\x02" +
		"\u0C75\u0C74\x03\x02\x02\x02\u0C76\u0C77\x03\x02\x02\x02\u0C77\u0C75\x03" +
		"\x02\x02\x02\u0C77\u0C78\x03\x02\x02\x02\u0C78\u0C7A\x03\x02\x02\x02\u0C79" +
		"\u0C73\x03\x02\x02\x02\u0C7A\u0C7B\x03\x02\x02\x02\u0C7B\u0C79\x03\x02" +
		"\x02\x02\u0C7B\u0C7C\x03\x02\x02\x02\u0C7C\u0C83\x03\x02\x02\x02\u0C7D" +
		"\u0C7F\t\x15\x02\x02\u0C7E\u0C80\x05\x04\x03\x02\u0C7F\u0C7E\x03\x02\x02" +
		"\x02\u0C80\u0C81\x03\x02\x02\x02\u0C81\u0C7F\x03\x02\x02\x02\u0C81\u0C82" +
		"\x03\x02\x02\x02\u0C82\u0C84\x03\x02\x02\x02\u0C83\u0C7D\x03\x02\x02\x02" +
		"\u0C83\u0C84\x03\x02\x02\x02\u0C84\u0C8B\x03\x02\x02\x02\u0C85\u0C87\x05" +
		"\xF8}\x02\u0C86\u0C88\x05\x04\x03\x02\u0C87\u0C86\x03\x02\x02\x02\u0C88" +
		"\u0C89\x03\x02\x02\x02\u0C89\u0C87\x03\x02\x02\x02\u0C89\u0C8A\x03\x02" +
		"\x02\x02\u0C8A\u0C8C\x03\x02\x02\x02\u0C8B\u0C85\x03\x02\x02\x02\u0C8C" +
		"\u0C8D\x03\x02\x02\x02\u0C8D\u0C8B\x03\x02\x02\x02\u0C8D\u0C8E\x03\x02" +
		"\x02\x02\u0C8E\xF3\x03\x02\x02\x02\u0C8F\u0C91\x07q\x02\x02\u0C90\u0C92" +
		"\x05\x04\x03\x02\u0C91\u0C90\x03\x02\x02\x02\u0C92\u0C93\x03\x02\x02\x02" +
		"\u0C93\u0C91\x03\x02\x02\x02\u0C93\u0C94\x03\x02\x02\x02\u0C94\u0C95\x03" +
		"\x02\x02\x02\u0C95\u0C99\x05\xD4k\x02\u0C96\u0C98\x05\x04\x03\x02\u0C97" +
		"\u0C96\x03\x02\x02\x02\u0C98\u0C9B\x03\x02\x02\x02\u0C99\u0C97\x03\x02" +
		"\x02\x02\u0C99\u0C9A\x03\x02\x02\x02\u0C9A\xF5\x03\x02\x02\x02\u0C9B\u0C99" +
		"\x03\x02\x02\x02\u0C9C\u0C9D\x07\u0112\x02\x02\u0C9D\xF7\x03\x02\x02\x02" +
		"\u0C9E\u0C9F\x07\u0110\x02\x02\u0C9F\xF9\x03\x02\x02\x02\u0CA0\u0CA2\x07" +
		"\x05\x02\x02\u0CA1\u0CA3\x05\x04\x03\x02\u0CA2\u0CA1\x03\x02\x02\x02\u0CA3" +
		"\u0CA4\x03\x02\x02\x02\u0CA4\u0CA2\x03\x02\x02\x02\u0CA4\u0CA5\x03\x02" +
		"\x02\x02\u0CA5\u0CA6\x03\x02\x02\x02\u0CA6\u0CA8\x05\xD4k\x02\u0CA7\u0CA9" +
		"\x05\x04\x03\x02\u0CA8\u0CA7\x03\x02\x02\x02\u0CA9\u0CAA\x03\x02\x02\x02" +
		"\u0CAA\u0CA8\x03\x02\x02\x02\u0CAA\u0CAB\x03\x02\x02\x02\u0CAB\u0CB2\x03" +
		"\x02\x02\x02\u0CAC\u0CAE\x07x\x02\x02\u0CAD\u0CAF\x05\x04\x03\x02\u0CAE" +
		"\u0CAD\x03\x02\x02\x02\u0CAF\u0CB0\x03\x02\x02\x02\u0CB0\u0CAE\x03\x02" +
		"\x02\x02\u0CB0\u0CB1\x03\x02\x02\x02\u0CB1\u0CB3\x03\x02\x02\x02\u0CB2" +
		"\u0CAC\x03\x02\x02\x02\u0CB2\u0CB3\x03\x02\x02\x02\u0CB3\u0CB4\x03\x02" +
		"\x02\x02\u0CB4\u0CB5\x05\xFC\x7F\x02\u0CB5\xFB\x03\x02\x02\x02\u0CB6\u0CC7" +
		"\x07\x10\x02\x02\u0CB7\u0CC7\x07\xD3\x02\x02\u0CB8\u0CC7\x07\xD4\x02\x02" +
		"\u0CB9\u0CC7\x07\x90\x02\x02\u0CBA\u0CC7\x07T\x02\x02\u0CBB\u0CBF\x05" +
		"\xFE\x80\x02\u0CBC\u0CBE\x05\x04\x03\x02\u0CBD\u0CBC\x03\x02\x02\x02\u0CBE" +
		"\u0CC1\x03\x02\x02\x02\u0CBF\u0CBD\x03\x02\x02\x02\u0CBF\u0CC0\x03\x02" +
		"\x02\x02\u0CC0\u0CC3\x03\x02\x02\x02\u0CC1\u0CBF\x03\x02\x02\x02\u0CC2" +
		"\u0CBB\x03\x02\x02\x02\u0CC3\u0CC4\x03\x02\x02\x02\u0CC4\u0CC2\x03\x02" +
		"\x02\x02\u0CC4\u0CC5\x03\x02\x02\x02\u0CC5\u0CC7\x03\x02\x02\x02\u0CC6" +
		"\u0CB6\x03\x02\x02\x02\u0CC6\u0CB7\x03\x02\x02\x02\u0CC6\u0CB8\x03\x02" +
		"\x02\x02\u0CC6\u0CB9\x03\x02\x02\x02\u0CC6\u0CBA\x03\x02\x02\x02\u0CC6" +
		"\u0CC2\x03\x02\x02\x02\u0CC7\xFD\x03\x02\x02\x02\u0CC8\u0CD6\x05\u0100" +
		"\x81\x02\u0CC9\u0CCB\x05\x04\x03\x02\u0CCA\u0CC9\x03\x02\x02\x02\u0CCB" +
		"\u0CCC\x03\x02\x02\x02\u0CCC\u0CCA\x03\x02\x02\x02\u0CCC\u0CCD\x03\x02" +
		"\x02\x02\u0CCD\u0CCE\x03\x02\x02\x02\u0CCE\u0CD0\t\x07\x02\x02\u0CCF\u0CD1" +
		"\x05\x04\x03\x02\u0CD0\u0CCF\x03\x02\x02\x02\u0CD1\u0CD2\x03\x02\x02\x02" +
		"\u0CD2\u0CD0\x03\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD4\x03" +
		"\x02\x02\x02\u0CD4\u0CD5\x05\u0102\x82\x02\u0CD5\u0CD7\x03\x02\x02\x02" +
		"\u0CD6\u0CCA\x03\x02\x02\x02\u0CD6\u0CD7\x03\x02\x02\x02\u0CD7\u0CEB\x03" +
		"\x02\x02\x02\u0CD8\u0CE6\x05\u0100\x81\x02\u0CD9\u0CDB\x05\x04\x03\x02" +
		"\u0CDA\u0CD9\x03\x02\x02\x02\u0CDB\u0CDC\x03\x02\x02\x02\u0CDC\u0CDA\x03" +
		"\x02\x02\x02\u0CDC\u0CDD\x03\x02\x02\x02\u0CDD\u0CDE\x03\x02\x02\x02\u0CDE" +
		"\u0CE0\x07\x06\x02\x02\u0CDF\u0CE1\x05\x04\x03\x02\u0CE0\u0CDF\x03\x02" +
		"\x02\x02\u0CE1\u0CE2\x03\x02\x02\x02\u0CE2\u0CE0\x03\x02\x02\x02\u0CE2" +
		"\u0CE3\x03\x02\x02\x02\u0CE3\u0CE4\x03\x02\x02\x02\u0CE4\u0CE5\x05\u0104" +
		"\x83\x02\u0CE5\u0CE7\x03\x02\x02\x02\u0CE6\u0CDA\x03\x02\x02\x02\u0CE7" +
		"\u0CE8\x03\x02\x02\x02\u0CE8\u0CE6\x03\x02\x02\x02\u0CE8\u0CE9\x03\x02" +
		"\x02\x02\u0CE9\u0CEB\x03\x02\x02\x02\u0CEA\u0CC8\x03\x02\x02\x02\u0CEA" +
		"\u0CD8\x03\x02\x02\x02\u0CEB\xFF\x03\x02\x02\x02\u0CEC\u0CED\t\b\x02\x02" +
		"\u0CED\u0101\x03\x02\x02\x02\u0CEE\u0CEF\t\b\x02\x02\u0CEF\u0103\x03\x02" +
		"\x02\x02\u0CF0\u0CF1\t\b\x02\x02\u0CF1\u0105\x03\x02\x02\x02\u0CF2\u0CF4" +
		"\x07\xD7\x02\x02\u0CF3\u0CF5\x05\x04\x03\x02\u0CF4\u0CF3\x03\x02\x02\x02" +
		"\u0CF5\u0CF6\x03\x02\x02\x02\u0CF6\u0CF4\x03\x02\x02\x02\u0CF6\u0CF7\x03" +
		"\x02\x02\x02\u0CF7\u0CF8\x03\x02\x02\x02\u0CF8\u0CFC\x05\u0110\x89\x02" +
		"\u0CF9\u0CFB\x05\x04\x03\x02\u0CFA\u0CF9\x03\x02\x02\x02\u0CFB\u0CFE\x03" +
		"\x02\x02\x02\u0CFC\u0CFA\x03\x02\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD" +
		"\u0D0B\x03\x02\x02\x02\u0CFE\u0CFC\x03\x02\x02\x02\u0CFF\u0D01\x07x\x02" +
		"\x02\u0D00\u0D02\x05\x04\x03\x02\u0D01\u0D00\x03\x02\x02\x02\u0D02\u0D03" +
		"\x03\x02\x02\x02\u0D03\u0D01\x03\x02\x02\x02\u0D03\u0D04\x03\x02\x02\x02" +
		"\u0D04\u0D05\x03\x02\x02\x02\u0D05\u0D07\x05\u010E\x88\x02\u0D06\u0D08" +
		"\x05\x04\x03\x02\u0D07\u0D06\x03\x02\x02\x02\u0D08\u0D09\x03\x02\x02\x02" +
		"\u0D09\u0D07\x03\x02\x02\x02\u0D09\u0D0A\x03\x02\x02\x02\u0D0A\u0D0C\x03" +
		"\x02\x02\x02\u0D0B\u0CFF\x03\x02\x02\x02\u0D0B\u0D0C\x03\x02\x02\x02\u0D0C" +
		"\u0D21\x03\x02\x02\x02\u0D0D\u0D15\x05\u0108\x85\x02\u0D0E\u0D10\x05\x04" +
		"\x03\x02\u0D0F\u0D0E\x03\x02\x02\x02\u0D10\u0D11\x03\x02\x02\x02\u0D11" +
		"\u0D0F\x03\x02\x02\x02\u0D11\u0D12\x03\x02\x02\x02\u0D12\u0D13\x03\x02" +
		"\x02\x02\u0D13\u0D14\x05\u010A\x86\x02\u0D14\u0D16\x03\x02\x02\x02\u0D15" +
		"\u0D0F\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D22\x03\x02" +
		"\x02\x02\u0D17\u0D1F\x05\u010A\x86\x02\u0D18\u0D1A\x05\x04\x03\x02\u0D19" +
		"\u0D18\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02\u0D1B\u0D19\x03\x02" +
		"\x02\x02\u0D1B\u0D1C\x03\x02\x02\x02\u0D1C\u0D1D\x03\x02\x02\x02\u0D1D" +
		"\u0D1E\x05\u0108\x85\x02\u0D1E\u0D20\x03\x02\x02\x02\u0D1F\u0D19\x03\x02" +
		"\x02\x02\u0D1F\u0D20\x03\x02\x02\x02\u0D20\u0D22\x03\x02\x02\x02\u0D21" +
		"\u0D0D\x03\x02\x02\x02\u0D21\u0D17\x03\x02\x02\x02\u0D21\u0D22\x03\x02" +
		"\x02\x02\u0D22\u0D26\x03\x02\x02\x02\u0D23\u0D25\x05\x04\x03\x02\u0D24" +
		"\u0D23\x03\x02\x02\x02\u0D25\u0D28\x03\x02\x02\x02\u0D26\u0D24\x03\x02" +
		"\x02\x02\u0D26\u0D27\x03\x02\x02\x02\u0D27\u0107\x03\x02\x02\x02\u0D28" +
		"\u0D26\x03\x02\x02\x02\u0D29\u0D2B\x07\x98\x02\x02\u0D2A\u0D2C\x05\x04" +
		"\x03\x02\u0D2B\u0D2A\x03\x02\x02\x02\u0D2C\u0D2D\x03\x02\x02\x02\u0D2D" +
		"\u0D2B\x03\x02\x02\x02\u0D2D\u0D2E\x03\x02\x02\x02\u0D2E\u0D35\x03\x02" +
		"\x02\x02\u0D2F\u0D31\x07\xD5\x02\x02\u0D30\u0D32\x05\x04\x03\x02\u0D31" +
		"\u0D30\x03\x02\x02\x02\u0D32\u0D33\x03\x02\x02\x02\u0D33\u0D31\x03\x02" +
		"\x02\x02\u0D33\u0D34\x03\x02\x02\x02\u0D34\u0D36\x03\x02\x02\x02\u0D35" +
		"\u0D2F\x03\x02\x02\x02\u0D35\u0D36\x03\x02\x02\x02\u0D36\u0D3D\x03\x02" +
		"\x02\x02\u0D37\u0D39\x07x\x02\x02\u0D38\u0D3A\x05\x04\x03\x02\u0D39\u0D38" +
		"\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02\x02\x02\u0D3B\u0D39\x03\x02\x02\x02" +
		"\u0D3B\u0D3C\x03\x02\x02\x02\u0D3C\u0D3E\x03\x02\x02\x02\u0D3D\u0D37\x03" +
		"\x02\x02\x02\u0D3D\u0D3E\x03\x02\x02\x02\u0D3E\u0D3F\x03\x02\x02\x02\u0D3F" +
		"\u0D40\x05\u010C\x87\x02\u0D40\u0109\x03\x02\x02\x02\u0D41\u0D43\x07\x96" +
		"\x02\x02\u0D42\u0D44\x05\x04\x03\x02\u0D43\u0D42\x03\x02\x02\x02\u0D44" +
		"\u0D45\x03\x02\x02\x02\u0D45\u0D43\x03\x02\x02\x02\u0D45\u0D46\x03\x02" +
		"\x02\x02\u0D46\u0D4D\x03\x02\x02\x02\u0D47\u0D49\x07\xD5\x02\x02\u0D48" +
		"\u0D4A\x05\x04\x03\x02\u0D49\u0D48\x03\x02\x02\x02\u0D4A\u0D4B\x03\x02" +
		"\x02\x02\u0D4B\u0D49\x03\x02\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02\u0D4C" +
		"\u0D4E\x03\x02\x02\x02\u0D4D\u0D47\x03\x02\x02\x02\u0D4D\u0D4E\x03\x02" +
		"\x02\x02\u0D4E\u0D55\x03\x02\x02\x02\u0D4F\u0D51\x07x\x02\x02\u0D50\u0D52" +
		"\x05\x04\x03\x02\u0D51\u0D50\x03\x02\x02\x02\u0D52\u0D53\x03\x02\x02\x02" +
		"\u0D53\u0D51\x03\x02\x02\x02\u0D53\u0D54\x03\x02\x02\x02\u0D54\u0D56\x03" +
		"\x02\x02\x02\u0D55\u0D4F\x03\x02\x02\x02\u0D55\u0D56\x03\x02\x02\x02\u0D56" +
		"\u0D57\x03\x02\x02\x02\u0D57\u0D58\x05\u010C\x87\x02\u0D58\u010B\x03\x02" +
		"\x02\x02\u0D59\u0D5A\x07\u0112\x02\x02\u0D5A\u010D\x03\x02\x02\x02\u0D5B" +
		"\u0D5C\x07\u0112\x02\x02\u0D5C\u010F\x03\x02\x02\x02\u0D5D\u0D5E\x07\u0110" +
		"\x02\x02\u0D5E\u0111\x03\x02\x02\x02\u0D5F\u0D60\x07\u0112\x02\x02\u0D60" +
		"\u0113\x03\x02\x02\x02\u0D61\u0D62\t\x16\x02\x02\u0D62\u0115\x03\x02\x02" +
		"\x02\u0D63\u0D64\x07\u0112\x02\x02\u0D64\u0117\x03\x02\x02\x02\u0D65\u0D66" +
		"\t\x17\x02\x02\u0D66\u0119\x03\x02\x02\x02\u0D67\u0D68\x07\u0112\x02\x02" +
		"\u0D68\u011B\x03\x02\x02\x02\u0D69\u0D6D\x07_\x02\x02\u0D6A\u0D6C\x05" +
		"\x04\x03\x02\u0D6B\u0D6A\x03\x02\x02\x02\u0D6C\u0D6F\x03\x02\x02\x02\u0D6D" +
		"\u0D6B\x03\x02\x02\x02\u0D6D\u0D6E\x03\x02\x02\x02\u0D6E\u0D70\x03\x02" +
		"\x02\x02\u0D6F\u0D6D\x03\x02\x02\x02\u0D70\u0D74\x07\u010B\x02\x02\u0D71" +
		"\u0D73\x05\x04\x03\x02\u0D72\u0D71\x03\x02\x02\x02\u0D73\u0D76\x03\x02" +
		"\x02\x02\u0D74\u0D72\x03\x02\x02\x02\u0D74\u0D75\x03\x02\x02\x02\u0D75" +
		"\u0D80\x03\x02\x02\x02\u0D76\u0D74\x03\x02\x02\x02\u0D77\u0D7B\x05\u011E" +
		"\x90\x02\u0D78\u0D7A\x05\x04\x03\x02\u0D79\u0D78\x03\x02\x02\x02\u0D7A" +
		"\u0D7D\x03\x02\x02\x02\u0D7B\u0D79\x03\x02\x02\x02\u0D7B\u0D7C\x03\x02" +
		"\x02\x02\u0D7C\u0D7F\x03\x02\x02\x02\u0D7D\u0D7B\x03\x02\x02\x02\u0D7E" +
		"\u0D77\x03\x02\x02\x02\u0D7F\u0D82\x03\x02\x02\x02\u0D80\u0D7E\x03\x02" +
		"\x02\x02\u0D80\u0D81\x03\x02\x02\x02\u0D81\u011D\x03\x02\x02\x02\u0D82" +
		"\u0D80\x03\x02\x02\x02\u0D83\u0D85\x07\xC6\x02\x02\u0D84\u0D86\x05\x04" +
		"\x03\x02\u0D85\u0D84\x03\x02\x02\x02\u0D86\u0D87\x03\x02\x02\x02\u0D87" +
		"\u0D85\x03\x02\x02\x02\u0D87\u0D88\x03\x02\x02\x02\u0D88\u0D8F\x03\x02" +
		"\x02\x02\u0D89\u0D8B\x07\x99\x02\x02\u0D8A\u0D8C\x05\x04\x03\x02\u0D8B" +
		"\u0D8A\x03\x02\x02\x02\u0D8C\u0D8D\x03\x02\x02\x02\u0D8D\u0D8B\x03\x02" +
		"\x02\x02\u0D8D\u0D8E\x03\x02\x02\x02\u0D8E\u0D90\x03\x02\x02\x02\u0D8F" +
		"\u0D89\x03\x02\x02\x02\u0D8F\u0D90\x03\x02\x02\x02\u0D90\u0D91\x03\x02" +
		"\x02\x02\u0D91\u0D95\x05\u0148\xA5\x02\u0D92\u0D94\x05\x04\x03\x02\u0D93" +
		"\u0D92\x03\x02\x02\x02\u0D94\u0D97\x03\x02\x02\x02\u0D95\u0D93\x03\x02" +
		"\x02\x02\u0D95\u0D96\x03\x02\x02\x02\u0D96\u0D98\x03\x02\x02\x02\u0D97" +
		"\u0D95\x03\x02\x02\x02\u0D98\u0D9C\x05\u0142\xA2\x02\u0D99\u0D9B\x05\x04" +
		"\x03\x02\u0D9A\u0D99\x03\x02\x02\x02\u0D9B\u0D9E\x03\x02\x02\x02\u0D9C" +
		"\u0D9A\x03\x02\x02\x02\u0D9C\u0D9D\x03\x02\x02\x02\u0D9D\u0DA6\x03\x02" +
		"\x02\x02\u0D9E\u0D9C\x03\x02\x02\x02\u0D9F\u0DA3\x05\u012A\x96\x02\u0DA0" +
		"\u0DA2\x05\x04\x03\x02\u0DA1\u0DA0\x03\x02\x02\x02\u0DA2\u0DA5\x03\x02" +
		"\x02\x02\u0DA3\u0DA1\x03\x02\x02\x02\u0DA3\u0DA4\x03\x02\x02\x02\u0DA4" +
		"\u0DA7\x03\x02\x02\x02\u0DA5\u0DA3\x03\x02\x02\x02\u0DA6\u0D9F\x03\x02" +
		"\x02\x02\u0DA6\u0DA7\x03\x02\x02\x02\u0DA7\u0DAF\x03\x02\x02\x02\u0DA8" +
		"\u0DAC\x05\u0134\x9B\x02\u0DA9\u0DAB\x05\x04\x03\x02\u0DAA\u0DA9\x03\x02" +
		"\x02\x02\u0DAB\u0DAE\x03\x02\x02\x02\u0DAC\u0DAA\x03\x02\x02\x02\u0DAC" +
		"\u0DAD\x03\x02\x02\x02\u0DAD\u0DB0\x03\x02\x02\x02\u0DAE\u0DAC\x03\x02" +
		"\x02\x02\u0DAF\u0DA8\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02\u0DB0" +
		"\u0DB8\x03\x02\x02\x02\u0DB1\u0DB5\x05\u013C\x9F\x02\u0DB2\u0DB4\x05\x04" +
		"\x03\x02\u0DB3\u0DB2\x03\x02\x02\x02\u0DB4\u0DB7\x03\x02\x02\x02\u0DB5" +
		"\u0DB3\x03\x02\x02\x02\u0DB5\u0DB6\x03\x02\x02\x02\u0DB6\u0DB9\x03\x02" +
		"\x02\x02\u0DB7\u0DB5\x03\x02\x02\x02\u0DB8\u0DB1\x03\x02\x02\x02\u0DB8" +
		"\u0DB9\x03\x02\x02\x02\u0DB9\u0DC1\x03\x02\x02\x02\u0DBA\u0DBE\x05\u013A" +
		"\x9E\x02\u0DBB\u0DBD\x05\x04\x03\x02\u0DBC\u0DBB\x03\x02\x02\x02\u0DBD" +
		"\u0DC0\x03\x02\x02\x02\u0DBE\u0DBC\x03\x02\x02\x02\u0DBE\u0DBF\x03\x02" +
		"\x02\x02\u0DBF\u0DC2\x03\x02\x02\x02\u0DC0\u0DBE\x03\x02\x02\x02\u0DC1" +
		"\u0DBA\x03\x02\x02\x02\u0DC1\u0DC2\x03\x02\x02\x02\u0DC2\u0DCA\x03\x02" +
		"\x02\x02\u0DC3\u0DC7\x05\u0130\x99\x02\u0DC4\u0DC6\x05\x04\x03\x02\u0DC5" +
		"\u0DC4\x03\x02\x02\x02\u0DC6\u0DC9\x03\x02\x02\x02\u0DC7\u0DC5\x03\x02" +
		"\x02\x02\u0DC7\u0DC8\x03\x02\x02\x02\u0DC8\u0DCB\x03\x02\x02\x02\u0DC9" +
		"\u0DC7\x03\x02\x02\x02\u0DCA\u0DC3\x03\x02\x02\x02\u0DCA\u0DCB\x03\x02" +
		"\x02\x02\u0DCB\u0DD3\x03\x02\x02\x02\u0DCC\u0DD0\x05\u012E\x98\x02\u0DCD" +
		"\u0DCF\x05\x04\x03\x02\u0DCE\u0DCD\x03\x02\x02\x02\u0DCF\u0DD2\x03\x02" +
		"\x02\x02\u0DD0\u0DCE\x03\x02\x02\x02\u0DD0\u0DD1\x03\x02\x02\x02\u0DD1" +
		"\u0DD4\x03\x02\x02\x02\u0DD2\u0DD0\x03\x02\x02\x02\u0DD3\u0DCC\x03\x02" +
		"\x02\x02\u0DD3\u0DD4\x03\x02\x02\x02\u0DD4\u0DDC\x03\x02\x02\x02\u0DD5" +
		"\u0DD9\x05\u0128\x95\x02\u0DD6\u0DD8\x05\x04\x03\x02\u0DD7\u0DD6\x03\x02" +
		"\x02\x02\u0DD8\u0DDB\x03\x02\x02\x02\u0DD9\u0DD7\x03\x02\x02\x02\u0DD9" +
		"\u0DDA\x03\x02\x02\x02\u0DDA\u0DDD\x03\x02\x02\x02\u0DDB\u0DD9\x03\x02" +
		"\x02\x02\u0DDC\u0DD5\x03\x02\x02\x02\u0DDC\u0DDD\x03\x02\x02\x02\u0DDD" +
		"\u0DE7\x03\x02\x02\x02\u0DDE\u0DE2\x05\u0124\x93\x02\u0DDF\u0DE1\x05\x04" +
		"\x03\x02\u0DE0\u0DDF\x03\x02\x02\x02\u0DE1\u0DE4\x03\x02\x02\x02\u0DE2" +
		"\u0DE0\x03\x02\x02\x02\u0DE2\u0DE3\x03\x02\x02\x02\u0DE3\u0DE6\x03\x02" +
		"\x02\x02\u0DE4\u0DE2\x03\x02\x02\x02\u0DE5\u0DDE\x03\x02\x02\x02\u0DE6" +
		"\u0DE9\x03\x02\x02\x02\u0DE7\u0DE5\x03\x02\x02\x02\u0DE7\u0DE8\x03\x02" +
		"\x02\x02\u0DE8\u0DF1\x03\x02\x02\x02\u0DE9\u0DE7\x03\x02\x02\x02\u0DEA" +
		"\u0DEE\x05\u0136\x9C\x02\u0DEB\u0DED\x05\x04\x03\x02\u0DEC\u0DEB\x03\x02" +
		"\x02\x02\u0DED\u0DF0\x03\x02\x02\x02\u0DEE\u0DEC\x03\x02\x02\x02\u0DEE" +
		"\u0DEF\x03\x02\x02\x02\u0DEF\u0DF2\x03\x02\x02\x02\u0DF0\u0DEE\x03\x02" +
		"\x02\x02\u0DF1\u0DEA\x03\x02\x02\x02\u0DF1\u0DF2\x03\x02\x02\x02\u0DF2" +
		"\u0DFA\x03\x02\x02\x02\u0DF3\u0DF7\x05\u0120\x91\x02\u0DF4\u0DF6\x05\x04" +
		"\x03\x02\u0DF5\u0DF4\x03\x02\x02\x02\u0DF6\u0DF9\x03\x02\x02\x02\u0DF7" +
		"\u0DF5\x03\x02\x02\x02\u0DF7\u0DF8\x03\x02\x02\x02\u0DF8\u0DFB\x03\x02" +
		"\x02\x02\u0DF9\u0DF7\x03\x02\x02\x02\u0DFA\u0DF3\x03\x02\x02\x02\u0DFA" +
		"\u0DFB\x03\x02\x02\x02\u0DFB\u0DFC\x03\x02\x02\x02\u0DFC\u0DFD\x07\u010B" +
		"\x02\x02\u0DFD\u011F\x03\x02\x02\x02\u0DFE";
	private static readonly _serializedATNSegment7: string =
		"\u0E00\x07^\x02\x02\u0DFF\u0E01\x05\x04\x03\x02\u0E00\u0DFF\x03\x02\x02" +
		"\x02\u0E01\u0E02\x03\x02\x02\x02\u0E02\u0E00\x03\x02\x02\x02\u0E02\u0E03" +
		"\x03\x02\x02\x02\u0E03\u0E05\x03\x02\x02\x02\u0E04\u0DFE\x03\x02\x02\x02" +
		"\u0E04\u0E05\x03\x02\x02\x02\u0E05\u0E06\x03\x02\x02\x02\u0E06\u0E08\x07" +
		"\xD5\x02\x02\u0E07\u0E09\x05\x04\x03\x02\u0E08\u0E07\x03\x02\x02\x02\u0E09" +
		"\u0E0A\x03\x02\x02\x02\u0E0A\u0E08\x03\x02\x02\x02\u0E0A\u0E0B\x03\x02" +
		"\x02\x02\u0E0B\u0E12\x03\x02\x02\x02\u0E0C\u0E0E\x07x\x02\x02\u0E0D\u0E0F" +
		"\x05\x04\x03\x02\u0E0E\u0E0D\x03\x02\x02\x02\u0E0F\u0E10\x03\x02\x02\x02" +
		"\u0E10\u0E0E\x03\x02\x02\x02\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E13\x03" +
		"\x02\x02\x02\u0E12\u0E0C\x03\x02\x02\x02\u0E12\u0E13\x03\x02\x02\x02\u0E13" +
		"\u0E14\x03\x02\x02\x02\u0E14\u0E15\x05\u0122\x92\x02\u0E15\u0121\x03\x02" +
		"\x02\x02\u0E16\u0E17\x05\xDEp\x02\u0E17\u0123\x03\x02\x02\x02\u0E18\u0E1A" +
		"\x07\x07\x02\x02\u0E19\u0E1B\x05\x04\x03\x02\u0E1A\u0E19\x03\x02\x02\x02" +
		"\u0E1B\u0E1C\x03\x02\x02\x02\u0E1C\u0E1A\x03\x02\x02\x02\u0E1C\u0E1D\x03" +
		"\x02\x02\x02\u0E1D\u0E1F\x03\x02\x02\x02\u0E1E\u0E18\x03\x02\x02\x02\u0E1E" +
		"\u0E1F\x03\x02\x02\x02\u0E1F\u0E20\x03\x02\x02\x02\u0E20\u0E22\x07\xB0" +
		"\x02\x02\u0E21\u0E23\x05\x04\x03\x02\u0E22\u0E21\x03\x02\x02\x02\u0E23" +
		"\u0E24\x03\x02\x02\x02\u0E24\u0E22\x03\x02\x02\x02\u0E24\u0E25\x03\x02" +
		"\x02\x02\u0E25\u0E2C\x03\x02\x02\x02\u0E26\u0E28\x07|\x02\x02\u0E27\u0E29" +
		"\x05\x04\x03\x02\u0E28\u0E27\x03\x02\x02\x02\u0E29\u0E2A\x03\x02\x02\x02" +
		"\u0E2A\u0E28\x03\x02\x02\x02\u0E2A\u0E2B\x03\x02\x02\x02\u0E2B\u0E2D\x03" +
		"\x02\x02\x02\u0E2C\u0E26\x03\x02\x02\x02\u0E2C\u0E2D\x03\x02\x02\x02\u0E2D" +
		"\u0E34\x03\x02\x02\x02\u0E2E\u0E30\x07x\x02\x02\u0E2F\u0E31\x05\x04\x03" +
		"\x02\u0E30\u0E2F\x03\x02\x02\x02\u0E31\u0E32\x03\x02\x02\x02\u0E32\u0E30" +
		"\x03\x02\x02\x02\u0E32\u0E33\x03\x02\x02\x02\u0E33\u0E35\x03\x02\x02\x02" +
		"\u0E34\u0E2E\x03\x02\x02\x02\u0E34\u0E35\x03\x02\x02\x02\u0E35\u0E36\x03" +
		"\x02\x02\x02\u0E36\u0E46\x05\u0126\x94\x02\u0E37\u0E39\x05\x04\x03\x02" +
		"\u0E38\u0E37\x03\x02\x02\x02\u0E39\u0E3A\x03\x02\x02\x02\u0E3A\u0E38\x03" +
		"\x02\x02\x02\u0E3A\u0E3B\x03\x02\x02\x02\u0E3B\u0E42\x03\x02\x02\x02\u0E3C" +
		"\u0E3E\x07\xF1\x02\x02\u0E3D\u0E3F\x05\x04\x03\x02\u0E3E\u0E3D\x03\x02" +
		"\x02\x02\u0E3F\u0E40\x03\x02\x02\x02\u0E40\u0E3E\x03\x02\x02\x02\u0E40" +
		"\u0E41\x03\x02\x02\x02\u0E41\u0E43\x03\x02\x02\x02\u0E42\u0E3C\x03\x02" +
		"\x02\x02\u0E42\u0E43\x03\x02\x02\x02\u0E43\u0E44\x03\x02\x02\x02\u0E44" +
		"\u0E45\x07R\x02\x02\u0E45\u0E47\x03\x02\x02\x02\u0E46\u0E38\x03\x02\x02" +
		"\x02\u0E46\u0E47\x03\x02\x02\x02\u0E47\u0E4F\x03\x02\x02\x02\u0E48\u0E4A" +
		"\x05\x04\x03\x02\u0E49\u0E48\x03\x02\x02\x02\u0E4A\u0E4B\x03\x02\x02\x02" +
		"\u0E4B\u0E49\x03\x02\x02\x02\u0E4B\u0E4C\x03\x02\x02\x02\u0E4C\u0E4D\x03" +
		"\x02\x02\x02\u0E4D\u0E4E\t\t\x02\x02\u0E4E\u0E50\x03\x02\x02\x02\u0E4F" +
		"\u0E49\x03\x02\x02\x02\u0E4F\u0E50\x03\x02\x02\x02\u0E50\u0125\x03\x02" +
		"\x02\x02\u0E51\u0E6E\x05\xDEp\x02\u0E52\u0E56\x07\u0112\x02\x02\u0E53" +
		"\u0E55\x05\x04\x03\x02\u0E54\u0E53\x03\x02\x02\x02\u0E55\u0E58\x03\x02" +
		"\x02\x02\u0E56\u0E54\x03\x02\x02\x02\u0E56\u0E57\x03\x02\x02\x02\u0E57" +
		"\u0E59\x03\x02\x02\x02\u0E58\u0E56\x03\x02\x02\x02\u0E59\u0E5D\x07\u0100" +
		"\x02\x02\u0E5A\u0E5C\x05\x04\x03\x02\u0E5B\u0E5A\x03\x02\x02\x02\u0E5C" +
		"\u0E5F\x03\x02\x02\x02\u0E5D\u0E5B\x03\x02\x02\x02\u0E5D\u0E5E\x03\x02" +
		"\x02\x02\u0E5E\u0E60\x03\x02\x02\x02\u0E5F\u0E5D\x03\x02\x02\x02\u0E60" +
		"\u0E6A\x05\xDEp\x02\u0E61\u0E63\x05\x04\x03\x02\u0E62\u0E61\x03\x02\x02" +
		"\x02\u0E63\u0E66\x03\x02\x02\x02\u0E64\u0E62\x03\x02\x02\x02\u0E64\u0E65" +
		"\x03\x02\x02\x02\u0E65\u0E67\x03\x02\x02\x02\u0E66\u0E64\x03\x02\x02\x02" +
		"\u0E67\u0E69\x05\xDEp\x02\u0E68\u0E64\x03\x02\x02\x02\u0E69\u0E6C\x03" +
		"\x02\x02\x02\u0E6A\u0E68\x03\x02\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02\u0E6B" +
		"\u0E6E\x03\x02\x02\x02\u0E6C\u0E6A\x03\x02\x02\x02\u0E6D\u0E51\x03\x02" +
		"\x02\x02\u0E6D\u0E52\x03\x02\x02\x02\u0E6E\u0127\x03\x02\x02\x02\u0E6F" +
		"\u0E71\x07\x03\x02\x02\u0E70\u0E72\x05\x04\x03\x02\u0E71\u0E70\x03\x02" +
		"\x02\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73\u0E71\x03\x02\x02\x02\u0E73" +
		"\u0E74\x03\x02\x02\x02\u0E74\u0E7B\x03\x02\x02\x02\u0E75\u0E77\x07\x8D" +
		"\x02\x02\u0E76\u0E78\x05\x04\x03\x02\u0E77\u0E76\x03\x02\x02\x02\u0E78" +
		"\u0E79\x03\x02\x02\x02\u0E79\u0E77\x03\x02\x02\x02\u0E79\u0E7A\x03\x02" +
		"\x02\x02\u0E7A\u0E7C\x03\x02\x02\x02\u0E7B\u0E75\x03\x02\x02\x02\u0E7B" +
		"\u0E7C\x03\x02\x02\x02\u0E7C\u0E83\x03\x02\x02\x02\u0E7D\u0E7F\x07x\x02" +
		"\x02\u0E7E\u0E80\x05\x04\x03\x02\u0E7F\u0E7E\x03\x02\x02\x02\u0E80\u0E81" +
		"\x03\x02\x02\x02\u0E81\u0E7F\x03\x02\x02\x02\u0E81\u0E82\x03\x02\x02\x02" +
		"\u0E82\u0E84\x03\x02\x02\x02\u0E83\u0E7D\x03\x02\x02\x02\u0E83\u0E84\x03" +
		"\x02\x02\x02\u0E84\u0E86\x03\x02\x02\x02\u0E85\u0E6F\x03\x02\x02\x02\u0E85" +
		"\u0E86\x03\x02\x02\x02\u0E86\u0E87\x03\x02\x02\x02\u0E87\u0EA5\t\x18\x02" +
		"\x02\u0E88\u0E8A\x05\x04\x03\x02\u0E89\u0E88\x03\x02\x02\x02\u0E8A\u0E8B" +
		"\x03\x02\x02\x02\u0E8B\u0E89\x03\x02\x02\x02\u0E8B\u0E8C\x03\x02\x02\x02" +
		"\u0E8C\u0E8D\x03\x02\x02\x02\u0E8D\u0E8F\x07\xB5\x02\x02\u0E8E\u0E90\x05" +
		"\x04\x03\x02\u0E8F\u0E8E\x03\x02\x02\x02\u0E90\u0E91\x03\x02\x02\x02\u0E91" +
		"\u0E8F\x03\x02\x02\x02\u0E91\u0E92\x03\x02\x02\x02\u0E92\u0E99\x03\x02" +
		"\x02\x02\u0E93\u0E95\x07|\x02\x02\u0E94\u0E96\x05\x04\x03\x02\u0E95\u0E94" +
		"\x03\x02\x02\x02\u0E96\u0E97\x03\x02\x02\x02\u0E97\u0E95\x03\x02\x02\x02" +
		"\u0E97\u0E98\x03\x02\x02\x02\u0E98\u0E9A\x03\x02\x02\x02\u0E99\u0E93\x03" +
		"\x02\x02\x02\u0E99\u0E9A\x03\x02\x02\x02\u0E9A\u0EA1\x03\x02\x02\x02\u0E9B" +
		"\u0E9D\x07x\x02\x02\u0E9C\u0E9E\x05\x04\x03\x02\u0E9D\u0E9C\x03\x02\x02" +
		"\x02\u0E9E\u0E9F\x03\x02\x02\x02\u0E9F\u0E9D\x03\x02\x02\x02\u0E9F\u0EA0" +
		"\x03\x02\x02\x02\u0EA0\u0EA2\x03\x02\x02\x02\u0EA1\u0E9B\x03\x02\x02\x02" +
		"\u0EA1\u0EA2\x03\x02\x02\x02\u0EA2\u0EA3\x03\x02\x02\x02\u0EA3\u0EA4\x05" +
		"\xDEp\x02\u0EA4\u0EA6\x03\x02\x02\x02\u0EA5\u0E89\x03\x02\x02\x02\u0EA5" +
		"\u0EA6\x03\x02\x02\x02\u0EA6\u0129\x03\x02\x02\x02\u0EA7\u0EA9\x07\xBA" +
		"\x02\x02\u0EA8\u0EAA\x05\x04\x03\x02\u0EA9\u0EA8\x03\x02\x02\x02\u0EAA" +
		"\u0EAB\x03\x02\x02\x02\u0EAB\u0EA9\x03\x02\x02\x02\u0EAB\u0EAC\x03\x02" +
		"\x02\x02\u0EAC\u0EAD\x03\x02\x02\x02\u0EAD\u0EB5\x05\u012C\x97\x02\u0EAE" +
		"\u0EB0\x05\x04\x03\x02\u0EAF\u0EAE\x03\x02\x02\x02\u0EB0\u0EB1\x03\x02" +
		"\x02\x02\u0EB1\u0EAF\x03\x02\x02\x02\u0EB1\u0EB2\x03\x02\x02\x02\u0EB2" +
		"\u0EB3\x03\x02\x02\x02\u0EB3\u0EB4\t\x19\x02\x02\u0EB4\u0EB6\x03\x02\x02" +
		"\x02\u0EB5\u0EAF\x03\x02\x02\x02\u0EB5\u0EB6\x03\x02\x02\x02\u0EB6\u012B" +
		"\x03\x02\x02\x02\u0EB7\u0EB8\x07\u0110\x02\x02\u0EB8\u012D\x03\x02\x02" +
		"\x02\u0EB9\u0EBB\x07\xB0\x02\x02\u0EBA\u0EBC\x05\x04\x03\x02\u0EBB\u0EBA" +
		"\x03\x02\x02\x02\u0EBC\u0EBD\x03\x02\x02\x02\u0EBD\u0EBB\x03\x02\x02\x02" +
		"\u0EBD\u0EBE\x03\x02\x02\x02\u0EBE\u0EBF\x03\x02\x02\x02\u0EBF\u0EC1\x07" +
		"K\x02\x02\u0EC0\u0EC2\x05\x04\x03\x02\u0EC1\u0EC0\x03\x02\x02\x02\u0EC2" +
		"\u0EC3\x03\x02\x02\x02\u0EC3\u0EC1\x03\x02\x02\x02\u0EC3\u0EC4\x03\x02" +
		"\x02\x02\u0EC4\u0ECB\x03\x02\x02\x02\u0EC5\u0EC7\x07x\x02\x02\u0EC6\u0EC8" +
		"\x05\x04\x03\x02\u0EC7\u0EC6\x03\x02\x02\x02\u0EC8\u0EC9\x03\x02\x02\x02" +
		"\u0EC9\u0EC7\x03\x02\x02\x02\u0EC9\u0ECA\x03\x02\x02\x02\u0ECA\u0ECC\x03" +
		"\x02\x02\x02\u0ECB\u0EC5\x03\x02\x02\x02\u0ECB\u0ECC\x03\x02\x02\x02\u0ECC" +
		"\u0ECD\x03\x02\x02\x02\u0ECD\u0ECE\x07\xD3\x02\x02\u0ECE\u012F\x03\x02" +
		"\x02\x02\u0ECF\u0ED1\x07\x9D\x02\x02\u0ED0\u0ED2\x05\x04\x03\x02\u0ED1" +
		"\u0ED0\x03\x02\x02\x02\u0ED2\u0ED3\x03\x02\x02\x02\u0ED3\u0ED1\x03\x02" +
		"\x02\x02\u0ED3\u0ED4\x03\x02\x02\x02\u0ED4\u0EDB\x03\x02\x02\x02\u0ED5" +
		"\u0ED7\x07\"\x02\x02\u0ED6\u0ED8\x05\x04\x03\x02\u0ED7\u0ED6\x03\x02\x02" +
		"\x02\u0ED8\u0ED9\x03\x02\x02\x02\u0ED9\u0ED7\x03\x02\x02\x02\u0ED9\u0EDA" +
		"\x03\x02\x02\x02\u0EDA\u0EDC\x03\x02\x02\x02\u0EDB\u0ED5\x03\x02\x02\x02" +
		"\u0EDB\u0EDC\x03\x02\x02\x02\u0EDC\u0EE3\x03\x02\x02\x02\u0EDD\u0EDF\x07" +
		"x\x02\x02\u0EDE\u0EE0\x05\x04\x03\x02\u0EDF\u0EDE\x03\x02\x02\x02\u0EE0" +
		"\u0EE1\x03\x02\x02\x02\u0EE1\u0EDF\x03\x02\x02\x02\u0EE1\u0EE2\x03\x02" +
		"\x02\x02\u0EE2\u0EE4\x03\x02\x02\x02\u0EE3\u0EDD\x03\x02\x02\x02\u0EE3" +
		"\u0EE4\x03\x02\x02\x02\u0EE4\u0EE5\x03\x02\x02\x02\u0EE5\u0EE6\x05\u0132" +
		"\x9A\x02\u0EE6\u0131\x03\x02\x02\x02\u0EE7\u0EE8\x07\u010F\x02\x02\u0EE8" +
		"\u0133\x03\x02\x02\x02\u0EE9\u0EEB\x07\x9B\x02\x02\u0EEA\u0EEC\x05\x04" +
		"\x03\x02\u0EEB\u0EEA\x03\x02\x02\x02\u0EEC\u0EED\x03\x02\x02\x02\u0EED" +
		"\u0EEB\x03\x02\x02\x02\u0EED\u0EEE\x03\x02\x02\x02\u0EEE\u0EEF\x03\x02" +
		"\x02\x02\u0EEF\u0EF1\x07x\x02\x02\u0EF0\u0EF2\x05\x04\x03\x02\u0EF1\u0EF0" +
		"\x03\x02\x02\x02\u0EF2\u0EF3\x03\x02\x02\x02\u0EF3\u0EF1\x03\x02\x02\x02" +
		"\u0EF3\u0EF4\x03\x02\x02\x02\u0EF4\u0EF6\x03\x02\x02\x02\u0EF5\u0EE9\x03" +
		"\x02\x02\x02\u0EF5\u0EF6\x03\x02\x02\x02\u0EF6\u0F02\x03\x02\x02\x02\u0EF7" +
		"\u0F03\x07\xC9\x02\x02\u0EF8\u0EFA\x07\x84\x02\x02\u0EF9\u0EFB\x05\x04" +
		"\x03\x02\u0EFA\u0EF9\x03\x02\x02\x02\u0EFB\u0EFC\x03\x02\x02\x02\u0EFC" +
		"\u0EFA\x03\x02\x02\x02\u0EFC\u0EFD\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02" +
		"\x02\x02\u0EFE\u0EFF\x07\xC9\x02\x02\u0EFF\u0F03\x03\x02\x02\x02\u0F00" +
		"\u0F03\x07\xB5\x02\x02\u0F01\u0F03\x07s\x02\x02\u0F02\u0EF7\x03\x02\x02" +
		"\x02\u0F02\u0EF8\x03\x02\x02\x02\u0F02\u0F00\x03\x02\x02\x02\u0F02\u0F01" +
		"\x03\x02\x02\x02\u0F03\u0135\x03\x02\x02\x02\u0F04\u0F06\x07\x88\x02\x02" +
		"\u0F05\u0F07\x05\x04\x03\x02\u0F06\u0F05\x03\x02\x02\x02\u0F07\u0F08\x03" +
		"\x02\x02\x02\u0F08\u0F06\x03\x02\x02\x02\u0F08\u0F09\x03\x02\x02\x02\u0F09" +
		"\u0F10\x03\x02\x02\x02\u0F0A\u0F0C\x07\x8D\x02\x02\u0F0B\u0F0D\x05\x04" +
		"\x03\x02\u0F0C\u0F0B\x03\x02\x02\x02\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E" +
		"\u0F0C\x03\x02\x02\x02\u0F0E\u0F0F\x03\x02\x02\x02\u0F0F\u0F11\x03\x02" +
		"\x02\x02\u0F10\u0F0A\x03\x02\x02\x02\u0F10\u0F11\x03\x02\x02\x02\u0F11" +
		"\u0F18\x03\x02\x02\x02\u0F12\u0F14\x07x\x02\x02\u0F13\u0F15\x05\x04\x03" +
		"\x02\u0F14\u0F13\x03\x02\x02\x02\u0F15\u0F16\x03\x02\x02\x02\u0F16\u0F14" +
		"\x03\x02\x02\x02\u0F16\u0F17\x03\x02\x02\x02\u0F17\u0F19\x03\x02\x02\x02" +
		"\u0F18\u0F12\x03\x02\x02\x02\u0F18\u0F19\x03\x02\x02\x02\u0F19\u0F1A\x03" +
		"\x02\x02\x02\u0F1A\u0F1B\x05\u0138\x9D\x02\u0F1B\u0137\x03\x02\x02\x02" +
		"\u0F1C\u0F1E\x07\x8A\x02\x02\u0F1D\u0F1F\x05\x04\x03\x02\u0F1E\u0F1D\x03" +
		"\x02\x02\x02\u0F1F\u0F20\x03\x02\x02\x02\u0F20\u0F1E\x03\x02\x02\x02\u0F20" +
		"\u0F21\x03\x02\x02\x02\u0F21\u0F28\x03\x02\x02\x02\u0F22\u0F24\x07\xF1" +
		"\x02\x02\u0F23\u0F25\x05\x04\x03\x02\u0F24\u0F23\x03\x02\x02\x02\u0F25" +
		"\u0F26\x03\x02\x02\x02\u0F26\u0F24\x03\x02\x02\x02\u0F26\u0F27\x03\x02" +
		"\x02\x02\u0F27\u0F29\x03\x02\x02\x02\u0F28\u0F22\x03\x02\x02\x02\u0F28" +
		"\u0F29\x03\x02\x02\x02\u0F29\u0F2A\x03\x02\x02\x02\u0F2A\u0F2C\x07\x88" +
		"\x02\x02\u0F2B\u0F2D\x05\x04\x03\x02\u0F2C\u0F2B\x03\x02\x02\x02\u0F2D" +
		"\u0F2E\x03\x02\x02\x02\u0F2E\u0F2C\x03\x02\x02\x02\u0F2E\u0F2F\x03\x02" +
		"\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30\u0F32\x07\x98\x02\x02\u0F31" +
		"\u0F33\x05\x04\x03\x02\u0F32\u0F31\x03\x02\x02\x02\u0F33\u0F34\x03\x02" +
		"\x02\x02\u0F34\u0F32\x03\x02\x02\x02\u0F34\u0F35\x03\x02\x02\x02\u0F35" +
		"\u0F36\x03\x02\x02\x02\u0F36\u0F38\x07\x8F\x02\x02\u0F37\u0F39\x05\x04" +
		"\x03\x02\u0F38\u0F37\x03\x02\x02\x02\u0F39\u0F3A\x03\x02\x02\x02\u0F3A" +
		"\u0F38\x03\x02\x02\x02\u0F3A\u0F3B\x03\x02\x02\x02\u0F3B\u0F3C\x03\x02" +
		"\x02\x02\u0F3C\u0F3D\x07\xB1\x02\x02\u0F3D\u0F61\x03\x02\x02\x02\u0F3E" +
		"\u0F5D\x07\x14\x02\x02\u0F3F\u0F41\x05\x04\x03\x02\u0F40\u0F3F\x03\x02" +
		"\x02\x02\u0F41\u0F42\x03\x02\x02\x02\u0F42\u0F40\x03\x02\x02\x02\u0F42" +
		"\u0F43\x03\x02\x02\x02\u0F43\u0F4A\x03\x02\x02\x02\u0F44\u0F46\x07\xF1" +
		"\x02\x02\u0F45\u0F47\x05\x04\x03\x02\u0F46\u0F45\x03\x02\x02\x02\u0F47" +
		"\u0F48\x03\x02\x02\x02\u0F48\u0F46\x03\x02\x02\x02\u0F48\u0F49\x03\x02" +
		"\x02\x02\u0F49\u0F4B\x03\x02\x02\x02\u0F4A\u0F44\x03\x02\x02\x02\u0F4A" +
		"\u0F4B\x03\x02\x02\x02\u0F4B\u0F5B\x03\x02\x02\x02\u0F4C\u0F4E\x07\x88" +
		"\x02\x02\u0F4D\u0F4F\x05\x04\x03\x02\u0F4E\u0F4D\x03\x02\x02\x02\u0F4F" +
		"\u0F50\x03\x02\x02\x02\u0F50\u0F4E\x03\x02\x02\x02\u0F50\u0F51\x03\x02" +
		"\x02\x02\u0F51\u0F52\x03\x02\x02\x02\u0F52\u0F54\x07\x98\x02\x02\u0F53" +
		"\u0F55\x05\x04\x03\x02\u0F54\u0F53\x03\x02\x02\x02\u0F55\u0F56\x03\x02" +
		"\x02\x02\u0F56\u0F54\x03\x02\x02\x02\u0F56\u0F57\x03\x02\x02\x02\u0F57" +
		"\u0F58\x03\x02\x02\x02\u0F58\u0F59\x07\xB0\x02\x02\u0F59\u0F5C\x03\x02" +
		"\x02\x02\u0F5A\u0F5C\x07\xBF\x02\x02\u0F5B\u0F4C\x03\x02\x02\x02\u0F5B" +
		"\u0F5A\x03\x02\x02\x02\u0F5C\u0F5E\x03\x02\x02\x02\u0F5D\u0F40\x03\x02" +
		"\x02\x02\u0F5D\u0F5E\x03\x02\x02\x02\u0F5E\u0F61\x03\x02\x02\x02\u0F5F" +
		"\u0F61\x07Z\x02\x02\u0F60\u0F1C\x03\x02\x02\x02\u0F60\u0F3E\x03\x02\x02" +
		"\x02\u0F60\u0F5F\x03\x02\x02\x02\u0F61\u0139\x03\x02\x02\x02\u0F62\u0F64" +
		"\x07\'\x02\x02\u0F63\u0F65\x05\x04\x03\x02\u0F64\u0F63\x03\x02\x02\x02" +
		"\u0F65\u0F66\x03\x02\x02\x02\u0F66\u0F64\x03\x02\x02\x02\u0F66\u0F67\x03" +
		"\x02\x02\x02\u0F67\u0F6E\x03\x02\x02\x02\u0F68\u0F6A\x07x\x02\x02\u0F69" +
		"\u0F6B\x05\x04\x03\x02\u0F6A\u0F69\x03\x02\x02\x02\u0F6B\u0F6C\x03\x02" +
		"\x02\x02\u0F6C\u0F6A\x03\x02\x02\x02\u0F6C\u0F6D\x03\x02\x02\x02\u0F6D" +
		"\u0F6F\x03\x02\x02\x02\u0F6E\u0F68\x03\x02\x02\x02\u0F6E\u0F6F\x03\x02" +
		"\x02\x02\u0F6F\u0F70\x03\x02\x02\x02\u0F70\u0F71\x05\xD4k\x02\u0F71\u013B" +
		"\x03\x02\x02\x02\u0F72\u0F74\x07\x1B\x02\x02\u0F73\u0F75\x05\x04\x03\x02" +
		"\u0F74\u0F73\x03\x02\x02\x02\u0F75\u0F76\x03\x02\x02\x02\u0F76\u0F74\x03" +
		"\x02\x02\x02\u0F76\u0F77\x03\x02\x02\x02\u0F77\u0F7E\x03\x02\x02\x02\u0F78" +
		"\u0F7A\x07<\x02\x02\u0F79\u0F7B\x05\x04\x03\x02\u0F7A\u0F79\x03\x02\x02" +
		"\x02\u0F7B\u0F7C\x03\x02\x02\x02\u0F7C\u0F7A\x03\x02\x02\x02\u0F7C\u0F7D" +
		"\x03\x02\x02\x02\u0F7D\u0F7F\x03\x02\x02\x02\u0F7E\u0F78\x03\x02\x02\x02" +
		"\u0F7E\u0F7F\x03\x02\x02\x02\u0F7F\u0F8C\x03\x02\x02\x02\u0F80\u0F82\x05" +
		"\u013E\xA0\x02\u0F81\u0F83\x05\x04\x03\x02\u0F82\u0F81\x03\x02\x02\x02" +
		"\u0F83\u0F84\x03\x02\x02\x02\u0F84\u0F82\x03\x02\x02\x02\u0F84\u0F85\x03" +
		"\x02\x02\x02\u0F85\u0F86\x03\x02\x02\x02\u0F86\u0F88\x07\xE3\x02\x02\u0F87" +
		"\u0F89\x05\x04\x03\x02\u0F88\u0F87\x03\x02\x02\x02\u0F89\u0F8A\x03\x02" +
		"\x02\x02\u0F8A\u0F88\x03\x02\x02\x02\u0F8A\u0F8B\x03\x02\x02\x02\u0F8B" +
		"\u0F8D\x03\x02\x02\x02\u0F8C\u0F80\x03\x02\x02\x02\u0F8C\u0F8D\x03\x02" +
		"\x02\x02\u0F8D\u0F8E\x03\x02\x02\x02\u0F8E\u0F90\x05\u0140\xA1\x02\u0F8F" +
		"\u0F91\x05\x04\x03\x02\u0F90\u0F8F\x03\x02\x02\x02\u0F91\u0F92\x03\x02" +
		"\x02\x02\u0F92\u0F90\x03\x02\x02\x02\u0F92\u0F93\x03\x02\x02\x02\u0F93" +
		"\u0F94\x03\x02\x02\x02\u0F94\u0F95\t\x1A\x02\x02\u0F95\u013D\x03\x02\x02" +
		"\x02\u0F96\u0F97\x07\u0110\x02\x02\u0F97\u013F\x03\x02\x02\x02\u0F98\u0F99" +
		"\x07\u0110\x02\x02\u0F99\u0141\x03\x02\x02\x02\u0F9A\u0F9C\x07\x11\x02" +
		"\x02\u0F9B\u0F9D\x05\x04\x03\x02\u0F9C\u0F9B\x03\x02\x02\x02\u0F9D\u0F9E" +
		"\x03\x02\x02\x02\u0F9E\u0F9C\x03\x02\x02\x02\u0F9E\u0F9F\x03\x02\x02\x02" +
		"\u0F9F\u0FA6\x03\x02\x02\x02\u0FA0\u0FA2\x07\xE3\x02\x02\u0FA1\u0FA3\x05" +
		"\x04\x03\x02\u0FA2\u0FA1\x03\x02\x02\x02\u0FA3\u0FA4\x03\x02\x02\x02\u0FA4" +
		"\u0FA2\x03\x02\x02\x02\u0FA4\u0FA5\x03\x02\x02\x02\u0FA5\u0FA7\x03\x02" +
		"\x02\x02\u0FA6\u0FA0\x03\x02\x02\x02\u0FA6\u0FA7\x03\x02\x02\x02\u0FA7" +
		"\u0FA8\x03\x02\x02\x02\u0FA8\u0FA9\x05\u0144\xA3\x02\u0FA9\u0143\x03\x02" +
		"\x02\x02\u0FAA\u0FAC\t\x1B\x02\x02\u0FAB\u0FAD\x05\x04\x03\x02\u0FAC\u0FAB" +
		"\x03\x02\x02\x02\u0FAD\u0FAE\x03\x02\x02\x02\u0FAE\u0FAC\x03\x02\x02\x02" +
		"\u0FAE\u0FAF\x03\x02\x02\x02\u0FAF\u0FB1\x03\x02\x02\x02\u0FB0\u0FAA\x03" +
		"\x02\x02\x02\u0FB0\u0FB1\x03\x02\x02\x02\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2" +
		"\u0FC6\x05\u0146\xA4\x02\u0FB3\u0FB5\x07\x8F\x02\x02\u0FB4\u0FB6\x05\x04" +
		"\x03\x02\u0FB5\u0FB4\x03\x02\x02\x02\u0FB6\u0FB7\x03\x02\x02\x02\u0FB7" +
		"\u0FB5\x03\x02\x02\x02\u0FB7\u0FB8\x03\x02\x02\x02\u0FB8\u0FBA\x03\x02" +
		"\x02\x02\u0FB9\u0FB3\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02\x02\x02\u0FBA" +
		"\u0FBB\x03\x02\x02\x02\u0FBB\u0FC3\t\x1C\x02\x02\u0FBC\u0FBE\x05\x04\x03" +
		"\x02\u0FBD\u0FBC\x03\x02\x02\x02\u0FBE\u0FBF\x03\x02\x02\x02\u0FBF\u0FBD" +
		"\x03\x02\x02\x02\u0FBF\u0FC0\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02" +
		"\u0FC1\u0FC2\x07^\x02\x02\u0FC2\u0FC4\x03\x02\x02\x02\u0FC3\u0FBD\x03" +
		"\x02\x02\x02\u0FC3\u0FC4\x03\x02\x02\x02\u0FC4\u0FC6\x03\x02\x02\x02\u0FC5" +
		"\u0FB0\x03\x02\x02\x02\u0FC5\u0FB9\x03\x02\x02\x02\u0FC6\u0145\x03\x02" +
		"\x02\x02\u0FC7\u0FCC\x07\u010F\x02\x02\u0FC8\u0FCC\x05\xDEp\x02\u0FC9" +
		"\u0FCC\x07O\x02\x02\u0FCA\u0FCC\x07\xAA\x02\x02\u0FCB\u0FC7\x03\x02\x02" +
		"\x02\u0FCB\u0FC8\x03\x02\x02\x02\u0FCB\u0FC9\x03\x02\x02\x02\u0FCB\u0FCA" +
		"\x03\x02\x02\x02\u0FCC\u0147\x03\x02\x02\x02\u0FCD\u0FCE\x07\u0112\x02" +
		"\x02\u0FCE\u0149\x03\x02\x02\x02\u0FCF\u0FD3\x07y\x02\x02\u0FD0\u0FD2" +
		"\x05\x04\x03\x02\u0FD1\u0FD0\x03\x02\x02\x02\u0FD2\u0FD5\x03\x02\x02\x02" +
		"\u0FD3\u0FD1\x03\x02\x02\x02\u0FD3\u0FD4\x03\x02\x02\x02\u0FD4\u0FD6\x03" +
		"\x02\x02\x02\u0FD5\u0FD3\x03\x02\x02\x02\u0FD6\u0FDA\x07\u010B\x02\x02" +
		"\u0FD7\u0FD9\x05\x04\x03\x02\u0FD8\u0FD7\x03\x02\x02\x02\u0FD9\u0FDC\x03" +
		"\x02\x02\x02\u0FDA\u0FD8\x03\x02\x02\x02\u0FDA\u0FDB\x03\x02\x02\x02\u0FDB" +
		"\u1014\x03\x02\x02\x02\u0FDC\u0FDA\x03\x02\x02\x02\u0FDD\u0FE1\x05\u0164" +
		"\xB3\x02\u0FDE\u0FE0\x05\x04\x03\x02\u0FDF\u0FDE\x03\x02\x02\x02\u0FE0" +
		"\u0FE3\x03\x02\x02\x02\u0FE1\u0FDF\x03\x02\x02\x02\u0FE1\u0FE2\x03\x02" +
		"\x02\x02\u0FE2\u0FE5\x03\x02\x02\x02\u0FE3\u0FE1\x03\x02\x02\x02\u0FE4" +
		"\u0FDD\x03\x02\x02\x02\u0FE5\u0FE8\x03\x02\x02\x02\u0FE6\u0FE4\x03\x02" +
		"\x02\x02\u0FE6\u0FE7\x03\x02\x02\x02\u0FE7\u0FF2\x03\x02\x02\x02\u0FE8" +
		"\u0FE6\x03\x02\x02\x02\u0FE9\u0FED\x05\u0160\xB1\x02\u0FEA\u0FEC\x05\x04" +
		"\x03\x02\u0FEB\u0FEA\x03\x02\x02\x02\u0FEC\u0FEF\x03\x02\x02\x02\u0FED" +
		"\u0FEB\x03\x02\x02\x02\u0FED\u0FEE\x03\x02\x02\x02\u0FEE\u0FF1\x03\x02" +
		"\x02\x02\u0FEF\u0FED\x03\x02\x02\x02\u0FF0\u0FE9\x03\x02\x02\x02\u0FF1" +
		"\u0FF4\x03\x02\x02\x02\u0FF2\u0FF0\x03\x02\x02\x02\u0FF2\u0FF3\x03\x02" +
		"\x02\x02\u0FF3\u0FFE\x03\x02\x02\x02\u0FF4\u0FF2\x03\x02\x02\x02\u0FF5" +
		"\u0FF9\x05\u0154\xAB\x02\u0FF6\u0FF8\x05\x04\x03\x02\u0FF7\u0FF6\x03\x02" +
		"\x02\x02\u0FF8\u0FFB\x03\x02\x02\x02\u0FF9\u0FF7\x03\x02\x02\x02\u0FF9" +
		"\u0FFA\x03\x02\x02\x02\u0FFA\u0FFD\x03\x02\x02\x02\u0FFB\u0FF9\x03\x02" +
		"\x02\x02\u0FFC\u0FF5\x03\x02\x02\x02\u0FFD\u1000\x03\x02\x02\x02\u0FFE" +
		"\u0FFC\x03\x02\x02\x02\u0FFE\u0FFF\x03\x02\x02\x02\u0FFF\u100A\x03\x02" +
		"\x02\x02\u1000\u0FFE\x03\x02\x02\x02\u1001\u1005\x05\u014C\xA7\x02\u1002" +
		"\u1004\x05\x04\x03\x02\u1003\u1002\x03\x02\x02\x02\u1004\u1007\x03\x02" +
		"\x02\x02\u1005\u1003\x03\x02\x02\x02\u1005\u1006\x03\x02\x02\x02\u1006" +
		"\u1009\x03\x02\x02\x02\u1007\u1005\x03\x02\x02\x02\u1008\u1001\x03\x02" +
		"\x02\x02\u1009\u100C\x03\x02\x02\x02\u100A\u1008\x03\x02\x02\x02\u100A" +
		"\u100B\x03\x02\x02\x02\u100B\u100D\x03\x02\x02\x02\u100C\u100A\x03\x02" +
		"\x02\x02\u100D\u1011\x07\u010B\x02\x02\u100E\u1010\x05\x04\x03\x02\u100F" +
		"\u100E\x03\x02\x02\x02\u1010\u1013\x03\x02\x02\x02\u1011\u100F\x03\x02" +
		"\x02\x02\u1011\u1012\x03\x02\x02\x02\u1012\u1015\x03\x02\x02\x02\u1013" +
		"\u1011\x03\x02\x02\x02\u1014\u0FE6\x03\x02\x02\x02\u1014\u1015\x03\x02" +
		"\x02\x02\u1015\u014B\x03\x02\x02\x02\u1016\u1018\x07\x8F\x02\x02\u1017" +
		"\u1019\x05\x04\x03\x02\u1018\u1017\x03\x02\x02\x02\u1019\u101A\x03\x02" +
		"\x02\x02\u101A\u1018\x03\x02\x02\x02\u101A\u101B\x03\x02\x02\x02\u101B" +
		"\u101C\x03\x02\x02\x02\u101C\u101E\x07^\x02\x02\u101D\u101F\x05\x04\x03" +
		"\x02\u101E\u101D\x03\x02\x02\x02\u101F\u1020\x03\x02\x02\x02\u1020\u101E" +
		"\x03\x02\x02\x02\u1020\u1021\x03\x02\x02\x02\u1021\u1028\x03\x02\x02\x02" +
		"\u1022\u1024\x07\xDF\x02\x02\u1023\u1025\x05\x04\x03\x02\u1024\u1023\x03" +
		"\x02\x02\x02\u1025\u1026\x03\x02\x02\x02\u1026\u1024\x03\x02\x02\x02\u1026" +
		"\u1027\x03\x02\x02\x02\u1027\u1029\x03\x02\x02\x02\u1028\u1022\x03\x02" +
		"\x02\x02\u1028\u1029\x03\x02\x02\x02\u1029\u1030\x03\x02\x02\x02\u102A" +
		"\u102C\x07<\x02\x02\u102B\u102D\x05\x04\x03\x02\u102C\u102B\x03\x02\x02" +
		"\x02\u102D\u102E\x03\x02\x02\x02\u102E\u102C\x03\x02\x02\x02\u102E\u102F" +
		"\x03\x02\x02\x02\u102F\u1031\x03\x02\x02\x02\u1030\u102A\x03\x02\x02\x02" +
		"\u1030\u1031\x03\x02\x02\x02\u1031\u1039\x03\x02\x02\x02\u1032\u1036\x05" +
		"\u014E\xA8\x02\u1033\u1035\x05\x04\x03\x02\u1034\u1033\x03\x02\x02\x02" +
		"\u1035\u1038\x03\x02\x02\x02\u1036\u1034\x03\x02\x02\x02\u1036\u1037\x03" +
		"\x02\x02\x02\u1037\u103A\x03\x02\x02\x02\u1038\u1036\x03\x02\x02\x02\u1039" +
		"\u1032\x03\x02\x02\x02\u103A\u103B\x03\x02\x02\x02\u103B\u1039\x03\x02" +
		"\x02\x02\u103B\u103C\x03\x02\x02\x02\u103C\u014D\x03\x02\x02\x02\u103D" +
		"\u104B\x05\u0150\xA9\x02\u103E\u1040\x05\x04\x03\x02\u103F\u103E\x03\x02" +
		"\x02\x02\u1040\u1041\x03\x02\x02\x02\u1041\u103F\x03\x02\x02\x02\u1041" +
		"\u1042\x03\x02\x02\x02\u1042\u1043\x03\x02\x02\x02\u1043\u1045\x07\xA8" +
		"\x02\x02\u1044\u1046\x05\x04\x03\x02\u1045\u1044\x03\x02\x02\x02\u1046" +
		"\u1047\x03\x02\x02\x02\u1047\u1045\x03\x02\x02\x02\u1047\u1048\x03\x02" +
		"\x02\x02\u1048\u1049\x03\x02\x02\x02\u1049\u104A\x05\u0152\xAA\x02\u104A" +
		"\u104C\x03\x02\x02\x02\u104B\u103F\x03\x02\x02\x02\u104B\u104C\x03\x02" +
		"\x02\x02\u104C\u014F\x03\x02\x02\x02\u104D\u104E\x07\u0112\x02\x02\u104E" +
		"\u0151\x03\x02\x02\x02\u104F\u1050\x07\u0110\x02\x02\u1050\u0153\x03\x02" +
		"\x02\x02\u1051\u1053\x07\xB9\x02\x02\u1052\u1054\x05\x04\x03\x02\u1053" +
		"\u1052\x03\x02\x02\x02\u1054\u1055\x03\x02\x02\x02\u1055\u1053\x03\x02" +
		"\x02\x02\u1055\u1056\x03\x02\x02\x02\u1056\u1063\x03\x02\x02\x02\u1057" +
		"\u1059\x07\x98\x02\x02\u1058\u105A\x05\x04\x03\x02\u1059\u1058\x03\x02" +
		"\x02\x02\u105A\u105B\x03\x02\x02\x02\u105B\u1059\x03\x02\x02\x02\u105B" +
		"\u105C\x03\x02\x02\x02\u105C\u105D\x03\x02\x02\x02\u105D\u105F\x05\u0148" +
		"\xA5\x02\u105E\u1060\x05\x04\x03\x02\u105F\u105E\x03\x02\x02\x02\u1060" +
		"\u1061\x03\x02\x02\x02\u1061\u105F\x03\x02\x02\x02\u1061\u1062\x03\x02" +
		"\x02\x02\u1062\u1064\x03\x02\x02\x02\u1063\u1057\x03\x02\x02\x02\u1063" +
		"\u1064\x03\x02\x02\x02\u1064\u106B\x03\x02\x02\x02\u1065\u1067\x07Y\x02" +
		"\x02\u1066\u1068\x05\x04\x03\x02\u1067\u1066\x03\x02\x02\x02\u1068\u1069" +
		"\x03\x02\x02\x02\u1069\u1067\x03\x02\x02\x02\u1069\u106A\x03\x02\x02\x02" +
		"\u106A\u106C\x03\x02\x02\x02\u106B\u1065\x03\x02\x02\x02\u106B\u106C\x03" +
		"\x02\x02\x02\u106C\u106D\x03\x02\x02\x02\u106D\u106E\x05\u0156\xAC\x02" +
		"\u106E\u0155\x03\x02\x02\x02\u106F\u1071\x05\u015C\xAF\x02\u1070\u1072" +
		"\x05\x04\x03\x02\u1071\u1070\x03\x02\x02\x02\u1072\u1073\x03\x02\x02\x02" +
		"\u1073\u1071\x03\x02\x02\x02\u1073\u1074\x03\x02\x02\x02\u1074\u107B\x03" +
		"\x02\x02\x02\u1075\u1077\x07\x95\x02\x02\u1076\u1078\x05\x04\x03\x02\u1077" +
		"\u1076\x03\x02\x02\x02\u1078\u1079\x03\x02\x02\x02\u1079\u1077\x03\x02" +
		"\x02\x02\u1079\u107A\x03\x02\x02\x02\u107A\u107C\x03\x02\x02\x02\u107B" +
		"\u1075\x03\x02\x02\x02\u107B\u107C\x03\x02\x02\x02\u107C\u107D\x03\x02" +
		"\x02\x02\u107D\u107E\x05\u0148\xA5\x02\u107E\u1089\x03\x02\x02\x02\u107F" +
		"\u1081\x05\u0158\xAD\x02\u1080\u1082\x05\x04\x03\x02\u1081\u1080\x03\x02" +
		"\x02\x02\u1082\u1083\x03\x02\x02\x02\u1083\u1081\x03\x02\x02\x02\u1083" +
		"\u1084\x03\x02\x02\x02\u1084\u1085\x03\x02\x02\x02\u1085\u1086\x07%\x02" +
		"\x02\u1086\u1089\x03\x02\x02\x02\u1087\u1089\x05\u015A\xAE\x02\u1088\u106F" +
		"\x03\x02\x02\x02\u1088\u107F\x03\x02\x02\x02\u1088\u1087\x03\x02\x02\x02" +
		"\u1089\u0157\x03\x02\x02\x02\u108A\u108B\x07\u0110\x02\x02\u108B\u0159" +
		"\x03\x02\x02\x02\u108C\u108D\x07\u0112\x02\x02\u108D\u015B\x03\x02\x02" +
		"\x02\u108E\u1090\x07U\x02\x02\u108F\u1091\x05\x04\x03\x02\u1090\u108F" +
		"\x03\x02\x02\x02\u1091\u1092\x03\x02\x02\x02\u1092\u1090\x03\x02\x02\x02" +
		"\u1092\u1093\x03\x02\x02\x02\u1093\u109A\x03\x02\x02\x02\u1094\u1096\x07" +
		"\x95\x02\x02\u1095\u1097\x05\x04\x03\x02\u1096\u1095\x03\x02\x02\x02\u1097" +
		"\u1098\x03\x02\x02\x02\u1098\u1096\x03\x02\x02\x02\u1098\u1099\x03\x02" +
		"\x02\x02\u1099\u109B\x03\x02\x02\x02\u109A\u1094\x03\x02\x02\x02\u109A" +
		"\u109B\x03\x02\x02\x02\u109B\u109D\x03\x02\x02\x02\u109C\u108E\x03\x02" +
		"\x02\x02\u109C\u109D\x03\x02\x02\x02\u109D\u109E\x03\x02\x02\x02\u109E" +
		"\u10A8\t\x1C\x02\x02\u109F\u10A1\x05\u015E\xB0\x02\u10A0\u10A2\x05\x04" +
		"\x03\x02\u10A1\u10A0\x03\x02\x02\x02\u10A2\u10A3\x03\x02\x02\x02\u10A3" +
		"\u10A1\x03\x02\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4\u10A5\x03\x02" +
		"\x02\x02\u10A5\u10A6\x07\xB1\x02\x02\u10A6\u10A8\x03\x02\x02\x02\u10A7" +
		"\u109C\x03\x02\x02\x02\u10A7\u109F\x03\x02\x02\x02\u10A8\u015D\x03\x02" +
		"\x02\x02\u10A9\u10AA\x07\u0110\x02\x02\u10AA\u015F\x03\x02\x02\x02\u10AB" +
		"\u10AD\x07\xC0\x02\x02\u10AC\u10AE\x05\x04\x03\x02\u10AD\u10AC\x03\x02" +
		"\x02\x02\u10AE\u10AF\x03\x02\x02\x02\u10AF\u10AD\x03\x02\x02\x02\u10AF" +
		"\u10B0\x03\x02\x02\x02\u10B0\u10B7\x03\x02\x02\x02\u10B1\u10B3\t\x1D\x02" +
		"\x02\u10B2\u10B4\x05\x04\x03\x02\u10B3\u10B2\x03";
	private static readonly _serializedATNSegment8: string =
		"\x02\x02\x02\u10B4\u10B5\x03\x02\x02\x02\u10B5\u10B3\x03\x02\x02\x02\u10B5" +
		"\u10B6\x03\x02\x02\x02\u10B6\u10B8\x03\x02\x02\x02\u10B7\u10B1\x03\x02" +
		"\x02\x02\u10B7\u10B8\x03\x02\x02\x02\u10B8\u10BF\x03\x02\x02\x02\u10B9" +
		"\u10BB\x07\n\x02\x02\u10BA\u10BC\x05\x04\x03\x02\u10BB\u10BA\x03\x02\x02" +
		"\x02\u10BC\u10BD\x03\x02\x02\x02\u10BD\u10BB\x03\x02\x02\x02\u10BD\u10BE" +
		"\x03\x02\x02\x02\u10BE\u10C0\x03\x02\x02\x02\u10BF\u10B9\x03\x02\x02\x02" +
		"\u10BF\u10C0\x03\x02\x02\x02\u10C0\u10C7\x03\x02\x02\x02\u10C1\u10C3\x07" +
		"h\x02\x02\u10C2\u10C4\x05\x04\x03\x02\u10C3\u10C2\x03\x02\x02\x02\u10C4" +
		"\u10C5\x03\x02\x02\x02\u10C5\u10C3\x03\x02\x02\x02\u10C5\u10C6\x03\x02" +
		"\x02\x02\u10C6\u10C8\x03\x02\x02\x02\u10C7\u10C1\x03\x02\x02\x02\u10C7" +
		"\u10C8\x03\x02\x02\x02\u10C8\u10C9\x03\x02\x02\x02\u10C9\u10D1\x05\u0162" +
		"\xB2\x02\u10CA\u10CC\x05\x04\x03\x02\u10CB\u10CA\x03\x02\x02\x02\u10CC" +
		"\u10CD\x03\x02\x02\x02\u10CD\u10CB\x03\x02\x02\x02\u10CD\u10CE\x03\x02" +
		"\x02\x02\u10CE\u10CF\x03\x02\x02\x02\u10CF\u10D0\x05\u0162\xB2\x02\u10D0" +
		"\u10D2\x03\x02\x02\x02\u10D1\u10CB\x03\x02\x02\x02\u10D2\u10D3\x03\x02" +
		"\x02\x02\u10D3\u10D1\x03\x02\x02\x02\u10D3\u10D4\x03\x02\x02\x02\u10D4" +
		"\u0161\x03\x02\x02\x02\u10D5\u10D6\x07\u0112\x02\x02\u10D6\u0163\x03\x02" +
		"\x02\x02\u10D7\u10D9\x07\b\x02\x02\u10D8\u10DA\x05\x04\x03\x02\u10D9\u10D8" +
		"\x03\x02\x02\x02\u10DA\u10DB\x03\x02\x02\x02\u10DB\u10D9\x03\x02\x02\x02" +
		"\u10DB\u10DC\x03\x02\x02\x02\u10DC\u10E3\x03\x02\x02\x02\u10DD\u10DF\x05" +
		"\u0166\xB4\x02\u10DE\u10E0\x05\x04\x03\x02\u10DF\u10DE\x03\x02\x02\x02" +
		"\u10E0\u10E1\x03\x02\x02\x02\u10E1\u10DF\x03\x02\x02\x02\u10E1\u10E2\x03" +
		"\x02\x02\x02\u10E2\u10E4\x03\x02\x02\x02\u10E3\u10DD\x03\x02\x02\x02\u10E4" +
		"\u10E5\x03\x02\x02\x02\u10E5\u10E3\x03\x02\x02\x02\u10E5\u10E6\x03\x02" +
		"\x02\x02\u10E6\u10E7\x03\x02\x02\x02\u10E7\u10E9\x07\x98\x02\x02\u10E8" +
		"\u10EA\x05\x04\x03\x02\u10E9\u10E8\x03\x02\x02\x02\u10EA\u10EB\x03\x02" +
		"\x02\x02\u10EB\u10E9\x03\x02\x02\x02\u10EB\u10EC\x03\x02\x02\x02\u10EC" +
		"\u10F4\x03\x02\x02\x02\u10ED\u10F1\x05\u0148\xA5\x02\u10EE\u10F0\x05\x04" +
		"\x03\x02\u10EF\u10EE\x03\x02\x02\x02\u10F0\u10F3\x03\x02\x02\x02\u10F1" +
		"\u10EF\x03\x02\x02\x02\u10F1\u10F2\x03\x02\x02\x02\u10F2\u10F5\x03\x02" +
		"\x02\x02\u10F3\u10F1\x03\x02\x02\x02\u10F4\u10ED\x03\x02\x02\x02\u10F5" +
		"\u10F6\x03\x02\x02\x02\u10F6\u10F4\x03\x02\x02\x02\u10F6\u10F7\x03\x02" +
		"\x02\x02\u10F7\u0165\x03\x02\x02\x02\u10F8\u111E\x07J\x02\x02\u10F9\u10FB" +
		"\x07[\x02\x02\u10FA\u10FC\x05\x04\x03\x02\u10FB\u10FA\x03\x02\x02\x02" +
		"\u10FC\u10FD\x03\x02\x02\x02\u10FD\u10FB\x03\x02\x02\x02\u10FD\u10FE\x03" +
		"\x02\x02\x02\u10FE\u10FF\x03\x02\x02\x02\u10FF\u1100\x05\u016C\xB7\x02" +
		"\u1100\u111E\x03\x02\x02\x02\u1101\u111E\x07a\x02\x02\u1102\u111E\x07" +
		"\x89\x02\x02\u1103\u111E\x07\x8B\x02\x02\u1104\u1106\t\x1E\x02\x02\u1105" +
		"\u1107\x05\x04\x03\x02\u1106\u1105\x03\x02\x02\x02\u1107\u1108\x03\x02" +
		"\x02\x02\u1108\u1106\x03\x02\x02\x02\u1108\u1109\x03\x02\x02\x02\u1109" +
		"\u110B\x03\x02\x02\x02\u110A\u1104\x03\x02\x02\x02\u110A\u110B\x03\x02" +
		"\x02\x02\u110B\u110C\x03\x02\x02\x02\u110C\u110E\x07\xA9\x02\x02\u110D" +
		"\u110F\x05\x04\x03\x02\u110E\u110D\x03\x02\x02\x02\u110F\u1110\x03\x02" +
		"\x02\x02\u1110\u110E\x03\x02\x02\x02\u1110\u1111\x03\x02\x02\x02\u1111" +
		"\u1112\x03\x02\x02\x02\u1112\u1113\x05\u016A\xB6\x02\u1113\u111E\x03\x02" +
		"\x02\x02\u1114\u111E\x07\xAB\x02\x02\u1115\u1117\x07\xF0\x02\x02\u1116" +
		"\u1118\x05\x04\x03\x02\u1117\u1116\x03\x02\x02\x02\u1118\u1119\x03\x02" +
		"\x02\x02\u1119\u1117\x03\x02\x02\x02\u1119\u111A\x03\x02\x02\x02\u111A" +
		"\u111B\x03\x02\x02\x02\u111B\u111C\x05\u0168\xB5\x02\u111C\u111E\x03\x02" +
		"\x02\x02\u111D\u10F8\x03\x02\x02\x02\u111D\u10F9\x03\x02\x02\x02\u111D" +
		"\u1101\x03\x02\x02\x02\u111D\u1102\x03\x02\x02\x02\u111D\u1103\x03\x02" +
		"\x02\x02\u111D\u110A\x03\x02\x02\x02\u111D\u1114\x03\x02\x02\x02\u111D" +
		"\u1115\x03\x02\x02\x02\u111E\u0167\x03\x02\x02\x02\u111F\u1120\x07\u0110" +
		"\x02\x02\u1120\u0169\x03\x02\x02\x02\u1121\u1122\x07\u0110\x02\x02\u1122" +
		"\u016B\x03\x02\x02\x02\u1123\u1124\x07\u0110\x02\x02\u1124\u016D\x03\x02" +
		"\x02\x02\u02E0\u0171\u017C\u0182\u018A\u018E\u0192\u0195\u0198\u019E\u01A4" +
		"\u01AB\u01B2\u01B5\u01BB\u01BE\u01C4\u01C7\u01CD\u01D0\u01D6\u01D9\u01DF" +
		"\u01E5\u01EC\u01F2\u01F7\u01FC\u0203\u0209\u0210\u0215\u021C\u0223\u0228" +
		"\u022F\u0231\u0238\u023A\u0248\u024E\u0252\u0254\u0259\u025F\u0263\u0268" +
		"\u026E\u0279\u027B\u0282\u0284\u028D\u0291\u0296\u0298\u029E\u02A4\u02A8" +
		"\u02AF\u02B3\u02B9\u02BD\u02C3\u02C9\u02CB\u02D0\u02D6\u02DC\u02DE\u02E4" +
		"\u02EA\u02EC\u02F2\u02F8\u02FF\u0303\u030A\u0312\u0316\u031C\u032A\u0330" +
		"\u0336\u033C\u0340\u0346\u034C\u034E\u0354\u035A\u0363\u0369\u036B\u0371" +
		"\u0373\u0379\u037F\u0388\u0390\u0396\u039C\u03A2\u03A8\u03AE\u03B0\u03B4" +
		"\u03C0\u03C6\u03CD\u03D2\u03D9\u03E0\u03E5\u03EC\u03F0\u03F5\u03FB\u0404" +
		"\u040A\u040C\u0412\u0414\u041C\u0422\u0428\u042A\u0432\u0438\u043A\u0442" +
		"\u0448\u044A\u044C\u0453\u0459\u045B\u0463\u0469\u046B\u0471\u0473\u047B" +
		"\u047F\u0485\u0489\u0490\u0494\u0499\u049B\u04A1\u04A7\u04AB\u04B1\u04B7" +
		"\u04B9\u04C1\u04C7\u04C9\u04CE\u04D4\u04DA\u04E0\u04E6\u04EA\u04EF\u04F5" +
		"\u04FA\u04FF\u0506\u050C\u0510\u0520\u0529\u0532\u0537\u053C\u0546\u054B" +
		"\u0550\u0558\u0561\u0566\u056F\u0577\u057B\u0581\u0587\u0589\u058F\u0593" +
		"\u0599\u059D\u05A5\u05A7\u05AE\u05B6\u05BA\u05C0\u05C4\u05C6\u05CC\u05D2" +
		"\u05D9\u05DF\u05E2\u05E8\u05EE\u05F4\u05F6\u05FC\u0602\u0604\u0606\u060C" +
		"\u0610\u0615\u061B\u061F\u0624\u062A\u0630\u0634\u0639\u063F\u0645\u0649" +
		"\u064E\u0654\u0658\u065A\u066E\u0672\u0677\u0679\u0682\u0686\u068C\u0690" +
		"\u0696\u069A\u06A0\u06A4\u06BC\u06C2\u06C8\u06CA\u06D1\u06DD\u06E3\u06EA" +
		"\u06EF\u06F6\u06FB\u0702\u0708\u070C\u0712\u0716\u0718\u071D\u0723\u0729" +
		"\u0732\u0738\u073A\u0740\u0744\u074A\u074C\u0752\u0758\u075E\u0761\u0767" +
		"\u0769\u076F\u0771\u0777\u077D\u0780\u0786\u0788\u078E\u0790\u0796\u079C" +
		"\u079F\u07A3\u07A7\u07AB\u07AF\u07B5\u07BB\u07BF\u07C5\u07C9\u07CB\u07D1" +
		"\u07D7\u07E0\u07E6\u07EC\u07F2\u07F8\u07FE\u0804\u0808\u080E\u0812\u0814" +
		"\u0819\u0821\u0829\u082B\u0831\u0837\u0839\u083F\u0846\u0849\u084F\u0851" +
		"\u0857\u085D\u085F\u0865\u0868\u086E\u0870\u0873\u0879\u087D\u0882\u0889" +
		"\u088C\u0892\u0898\u089A\u089E\u08A0\u08AC\u08B2\u08B9\u08C0\u08C5\u08CC" +
		"\u08D2\u08D9\u08E0\u08E5\u08EC\u08F2\u08F9\u0900\u0905\u090C\u0912\u0919" +
		"\u0920\u0925\u092C\u0932\u0939\u093F\u094A\u0950\u0957\u095E\u0962\u0967" +
		"\u096B\u0970\u097B\u097D\u0983\u0987\u098D\u098F\u0995\u099F\u09A8\u09AF" +
		"\u09B6\u09BD\u09C4\u09CB\u09D2\u09D9\u09E0\u09E7\u09EE\u09F5\u09FC\u0A03" +
		"\u0A0A\u0A11\u0A18\u0A1C\u0A21\u0A25\u0A2B\u0A31\u0A33\u0A39\u0A42\u0A48" +
		"\u0A4F\u0A53\u0A56\u0A5C\u0A62\u0A69\u0A6D\u0A72\u0A76\u0A7B\u0A7F\u0A84" +
		"\u0A8B\u0A91\u0A98\u0A9C\u0A9F\u0AA5\u0AAC\u0AB3\u0AB7\u0ABC\u0AC1\u0AC9" +
		"\u0ACB\u0AD1\u0AD9\u0AE0\u0AE7\u0AEB\u0AF0\u0AF4\u0AF9\u0AFD\u0B02\u0B07" +
		"\u0B0D\u0B11\u0B16\u0B1C\u0B28\u0B2A\u0B30\u0B32\u0B38\u0B3C\u0B41\u0B4B" +
		"\u0B4F\u0B59\u0B60\u0B67\u0B6C\u0B70\u0B76\u0B7C\u0B7E\u0B86\u0B8C\u0B8E" +
		"\u0B96\u0B9C\u0B9E\u0BAB\u0BB1\u0BB3\u0BBB\u0BC1\u0BC3\u0BCB\u0BD1\u0BD7" +
		"\u0BD9\u0BDD\u0BE4\u0BEA\u0BEE\u0BF5\u0BFB\u0BFD\u0C03\u0C05\u0C0E\u0C10" +
		"\u0C16\u0C1C\u0C21\u0C2B\u0C31\u0C37\u0C39\u0C3F\u0C44\u0C4C\u0C52\u0C56" +
		"\u0C5C\u0C62\u0C64\u0C69\u0C6E\u0C71\u0C77\u0C7B\u0C81\u0C83\u0C89\u0C8D" +
		"\u0C93\u0C99\u0CA4\u0CAA\u0CB0\u0CB2\u0CBF\u0CC4\u0CC6\u0CCC\u0CD2\u0CD6" +
		"\u0CDC\u0CE2\u0CE8\u0CEA\u0CF6\u0CFC\u0D03\u0D09\u0D0B\u0D11\u0D15\u0D1B" +
		"\u0D1F\u0D21\u0D26\u0D2D\u0D33\u0D35\u0D3B\u0D3D\u0D45\u0D4B\u0D4D\u0D53" +
		"\u0D55\u0D6D\u0D74\u0D7B\u0D80\u0D87\u0D8D\u0D8F\u0D95\u0D9C\u0DA3\u0DA6" +
		"\u0DAC\u0DAF\u0DB5\u0DB8\u0DBE\u0DC1\u0DC7\u0DCA\u0DD0\u0DD3\u0DD9\u0DDC" +
		"\u0DE2\u0DE7\u0DEE\u0DF1\u0DF7\u0DFA\u0E02\u0E04\u0E0A\u0E10\u0E12\u0E1C" +
		"\u0E1E\u0E24\u0E2A\u0E2C\u0E32\u0E34\u0E3A\u0E40\u0E42\u0E46\u0E4B\u0E4F" +
		"\u0E56\u0E5D\u0E64\u0E6A\u0E6D\u0E73\u0E79\u0E7B\u0E81\u0E83\u0E85\u0E8B" +
		"\u0E91\u0E97\u0E99\u0E9F\u0EA1\u0EA5\u0EAB\u0EB1\u0EB5\u0EBD\u0EC3\u0EC9" +
		"\u0ECB\u0ED3\u0ED9\u0EDB\u0EE1\u0EE3\u0EED\u0EF3\u0EF5\u0EFC\u0F02\u0F08" +
		"\u0F0E\u0F10\u0F16\u0F18\u0F20\u0F26\u0F28\u0F2E\u0F34\u0F3A\u0F42\u0F48" +
		"\u0F4A\u0F50\u0F56\u0F5B\u0F5D\u0F60\u0F66\u0F6C\u0F6E\u0F76\u0F7C\u0F7E" +
		"\u0F84\u0F8A\u0F8C\u0F92\u0F9E\u0FA4\u0FA6\u0FAE\u0FB0\u0FB7\u0FB9\u0FBF" +
		"\u0FC3\u0FC5\u0FCB\u0FD3\u0FDA\u0FE1\u0FE6\u0FED\u0FF2\u0FF9\u0FFE\u1005" +
		"\u100A\u1011\u1014\u101A\u1020\u1026\u1028\u102E\u1030\u1036\u103B\u1041" +
		"\u1047\u104B\u1055\u105B\u1061\u1063\u1069\u106B\u1073\u1079\u107B\u1083" +
		"\u1088\u1092\u1098\u109A\u109C\u10A3\u10A7\u10AF\u10B5\u10B7\u10BD\u10BF" +
		"\u10C5\u10C7\u10CD\u10D3\u10DB\u10E1\u10E5\u10EB\u10F1\u10F6\u10FD\u1108" +
		"\u110A\u1110\u1119\u111D";
	public static readonly _serializedATN: string = Utils.join(
		[
			cobolParser._serializedATNSegment0,
			cobolParser._serializedATNSegment1,
			cobolParser._serializedATNSegment2,
			cobolParser._serializedATNSegment3,
			cobolParser._serializedATNSegment4,
			cobolParser._serializedATNSegment5,
			cobolParser._serializedATNSegment6,
			cobolParser._serializedATNSegment7,
			cobolParser._serializedATNSegment8,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!cobolParser.__ATN) {
			cobolParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(cobolParser._serializedATN));
		}

		return cobolParser.__ATN;
	}

}

export class Cobol_sourceContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(cobolParser.EOF, 0); }
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cobol_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCobol_source) {
			listener.enterCobol_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCobol_source) {
			listener.exitCobol_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCobol_source) {
			return visitor.visitCobol_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeparatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SEMI_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEMI_, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSeparator) {
			listener.enterSeparator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSeparator) {
			listener.exitSeparator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSeparator) {
			return visitor.visitSeparator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_commentContext extends ParserRuleContext {
	public START_SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_SLASH_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public START_STAR_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_STAR_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_comment; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_comment) {
			listener.enterLine_comment(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_comment) {
			listener.exitLine_comment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_comment) {
			return visitor.visitLine_comment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramContext extends ParserRuleContext {
	public identification_division(): Identification_divisionContext | undefined {
		return this.tryGetRuleContext(0, Identification_divisionContext);
	}
	public environment_division(): Environment_divisionContext | undefined {
		return this.tryGetRuleContext(0, Environment_divisionContext);
	}
	public data_division(): Data_divisionContext | undefined {
		return this.tryGetRuleContext(0, Data_divisionContext);
	}
	public separator(): SeparatorContext | undefined {
		return this.tryGetRuleContext(0, SeparatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_divisionContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_section(): File_sectionContext | undefined {
		return this.tryGetRuleContext(0, File_sectionContext);
	}
	public working_storage_section(): Working_storage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Working_storage_sectionContext);
	}
	public linkage_section(): Linkage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Linkage_sectionContext);
	}
	public report_section(): Report_sectionContext | undefined {
		return this.tryGetRuleContext(0, Report_sectionContext);
	}
	public screen_section(): Screen_sectionContext | undefined {
		return this.tryGetRuleContext(0, Screen_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division) {
			listener.enterData_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division) {
			listener.exitData_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division) {
			return visitor.visitData_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_description(): File_descriptionContext[];
	public file_description(i: number): File_descriptionContext;
	public file_description(i?: number): File_descriptionContext | File_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_descriptionContext);
		} else {
			return this.getRuleContext(i, File_descriptionContext);
		}
	}
	public sort_merge_file_description(): Sort_merge_file_descriptionContext[];
	public sort_merge_file_description(i: number): Sort_merge_file_descriptionContext;
	public sort_merge_file_description(i?: number): Sort_merge_file_descriptionContext | Sort_merge_file_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_descriptionContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_descriptionContext);
		}
	}
	public report_description(): Report_descriptionContext[];
	public report_description(i: number): Report_descriptionContext;
	public report_description(i?: number): Report_descriptionContext | Report_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_section) {
			listener.enterFile_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_section) {
			listener.exitFile_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_section) {
			return visitor.visitFile_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_descriptionContext extends ParserRuleContext {
	public FD(): TerminalNode { return this.getToken(cobolParser.FD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_description_entry(): File_description_entryContext[];
	public file_description_entry(i: number): File_description_entryContext;
	public file_description_entry(i?: number): File_description_entryContext | File_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_description_entryContext);
		} else {
			return this.getRuleContext(i, File_description_entryContext);
		}
	}
	public file_data_description(): File_data_descriptionContext[];
	public file_data_description(i: number): File_data_descriptionContext;
	public file_data_description(i?: number): File_data_descriptionContext | File_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_data_descriptionContext);
		} else {
			return this.getRuleContext(i, File_data_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description) {
			listener.enterFile_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description) {
			listener.exitFile_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description) {
			return visitor.visitFile_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_description_entryContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public value_of_id(): Value_of_idContext | undefined {
		return this.tryGetRuleContext(0, Value_of_idContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	public linage(): LinageContext | undefined {
		return this.tryGetRuleContext(0, LinageContext);
	}
	public report_is(): Report_isContext | undefined {
		return this.tryGetRuleContext(0, Report_isContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description_entry) {
			listener.enterFile_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description_entry) {
			listener.exitFile_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description_entry) {
			return visitor.visitFile_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_data_descriptionContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public REDEFINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REDEFINES, 0); }
	public other_data_item(): Other_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Other_data_itemContext);
	}
	public file_data_description_entry(): File_data_description_entryContext[];
	public file_data_description_entry(i: number): File_data_description_entryContext;
	public file_data_description_entry(i?: number): File_data_description_entryContext | File_data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_data_description_entryContext);
		} else {
			return this.getRuleContext(i, File_data_description_entryContext);
		}
	}
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_data_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_data_description) {
			listener.enterFile_data_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_data_description) {
			listener.exitFile_data_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_data_description) {
			return visitor.visitFile_data_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Level_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_level_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLevel_number) {
			listener.enterLevel_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLevel_number) {
			listener.exitLevel_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLevel_number) {
			return visitor.visitLevel_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_data_description_entryContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public usage(): UsageContext | undefined {
		return this.tryGetRuleContext(0, UsageContext);
	}
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public occurs(): OccursContext | undefined {
		return this.tryGetRuleContext(0, OccursContext);
	}
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public value_is(): Value_isContext | undefined {
		return this.tryGetRuleContext(0, Value_isContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_data_description_entry) {
			listener.enterFile_data_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_data_description_entry) {
			listener.exitFile_data_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_data_description_entry) {
			return visitor.visitFile_data_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_isContext extends ParserRuleContext {
	public value_is_definition(): Value_is_definitionContext[];
	public value_is_definition(i: number): Value_is_definitionContext;
	public value_is_definition(i?: number): Value_is_definitionContext | Value_is_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Value_is_definitionContext);
		} else {
			return this.getRuleContext(i, Value_is_definitionContext);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUES, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is) {
			listener.enterValue_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is) {
			listener.exitValue_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is) {
			return visitor.visitValue_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definitionContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public value_is_definition_thru(): Value_is_definition_thruContext | undefined {
		return this.tryGetRuleContext(0, Value_is_definition_thruContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition) {
			listener.enterValue_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition) {
			listener.exitValue_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition) {
			return visitor.visitValue_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_partContext extends ParserRuleContext {
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public ref_data_name(): Ref_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Ref_data_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public external_name(): External_nameContext | undefined {
		return this.tryGetRuleContext(0, External_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_part) {
			listener.enterValue_is_definition_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_part) {
			listener.exitValue_is_definition_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_part) {
			return visitor.visitValue_is_definition_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_thruContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_thru; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_thru) {
			listener.enterValue_is_definition_thru(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_thru) {
			listener.exitValue_is_definition_thru(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_thru) {
			return visitor.visitValue_is_definition_thru(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_external_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExternal_name) {
			listener.enterExternal_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExternal_name) {
			listener.exitExternal_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExternal_name) {
			return visitor.visitExternal_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ref_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ref_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRef_data_name) {
			listener.enterRef_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRef_data_name) {
			listener.exitRef_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRef_data_name) {
			return visitor.visitRef_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_literal) {
			listener.enterValue_is_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_literal) {
			listener.exitValue_is_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_literal) {
			return visitor.visitValue_is_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OccursContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(cobolParser.OCCURS, 0); }
	public times_def(): Times_defContext {
		return this.getRuleContext(0, Times_defContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public key_is(): Key_isContext[];
	public key_is(i: number): Key_isContext;
	public key_is(i?: number): Key_isContext | Key_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_isContext);
		} else {
			return this.getRuleContext(i, Key_isContext);
		}
	}
	public indexed_by(): Indexed_byContext | undefined {
		return this.tryGetRuleContext(0, Indexed_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_occurs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOccurs) {
			listener.enterOccurs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOccurs) {
			listener.exitOccurs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOccurs) {
			return visitor.visitOccurs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indexed_byContext extends ParserRuleContext {
	public INDEXED(): TerminalNode { return this.getToken(cobolParser.INDEXED, 0); }
	public ind_name(): Ind_nameContext[];
	public ind_name(i: number): Ind_nameContext;
	public ind_name(i?: number): Ind_nameContext | Ind_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ind_nameContext);
		} else {
			return this.getRuleContext(i, Ind_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_indexed_by; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIndexed_by) {
			listener.enterIndexed_by(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIndexed_by) {
			listener.exitIndexed_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIndexed_by) {
			return visitor.visitIndexed_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ind_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ind_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInd_name) {
			listener.enterInd_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInd_name) {
			listener.exitInd_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInd_name) {
			return visitor.visitInd_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_isContext extends ParserRuleContext {
	public key_name(): Key_nameContext[];
	public key_name(i: number): Key_nameContext;
	public key_name(i?: number): Key_nameContext | Key_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_nameContext);
		} else {
			return this.getRuleContext(i, Key_nameContext);
		}
	}
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_is) {
			listener.enterKey_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_is) {
			listener.exitKey_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_is) {
			return visitor.visitKey_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_name) {
			listener.enterKey_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_name) {
			listener.exitKey_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_name) {
			return visitor.visitKey_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Times_defContext extends ParserRuleContext {
	public table_size(): Table_sizeContext | undefined {
		return this.tryGetRuleContext(0, Table_sizeContext);
	}
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public min_times(): Min_timesContext | undefined {
		return this.tryGetRuleContext(0, Min_timesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public max_times(): Max_timesContext | undefined {
		return this.tryGetRuleContext(0, Max_timesContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_times_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTimes_def) {
			listener.enterTimes_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTimes_def) {
			listener.exitTimes_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTimes_def) {
			return visitor.visitTimes_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_table_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTable_size) {
			listener.enterTable_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTable_size) {
			listener.exitTable_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTable_size) {
			return visitor.visitTable_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Min_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_min_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMin_times) {
			listener.enterMin_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMin_times) {
			listener.exitMin_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMin_times) {
			return visitor.visitMin_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Max_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_max_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMax_times) {
			listener.enterMax_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMax_times) {
			listener.exitMax_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMax_times) {
			return visitor.visitMax_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_descriptionContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(cobolParser.RD, 0); }
	public report_name(): Report_nameContext {
		return this.getRuleContext(0, Report_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public report_data_description(): Report_data_descriptionContext[];
	public report_data_description(i: number): Report_data_descriptionContext;
	public report_data_description(i?: number): Report_data_descriptionContext | Report_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_data_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_data_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description) {
			listener.enterReport_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description) {
			listener.exitReport_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description) {
			return visitor.visitReport_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_data_descriptionContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public report_data_description_entry(): Report_data_description_entryContext[];
	public report_data_description_entry(i: number): Report_data_description_entryContext;
	public report_data_description_entry(i?: number): Report_data_description_entryContext | Report_data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_data_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_data_description_entryContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_data_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_data_description) {
			listener.enterReport_data_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_data_description) {
			listener.exitReport_data_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_data_description) {
			return visitor.visitReport_data_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_data_description_entryContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public line_num_definition(): Line_num_definitionContext | undefined {
		return this.tryGetRuleContext(0, Line_num_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GROUP, 0); }
	public next_group_definition(): Next_group_definitionContext | undefined {
		return this.tryGetRuleContext(0, Next_group_definitionContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public type_is_definition(): Type_is_definitionContext | undefined {
		return this.tryGetRuleContext(0, Type_is_definitionContext);
	}
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public column_number(): Column_numberContext | undefined {
		return this.tryGetRuleContext(0, Column_numberContext);
	}
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDICATE, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SOURCE, 0); }
	public source_name(): Source_nameContext | undefined {
		return this.tryGetRuleContext(0, Source_nameContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public sum(): SumContext | undefined {
		return this.tryGetRuleContext(0, SumContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_data_description_entry) {
			listener.enterReport_data_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_data_description_entry) {
			listener.exitReport_data_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_data_description_entry) {
			return visitor.visitReport_data_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SumContext extends ParserRuleContext {
	public SUM(): TerminalNode[];
	public SUM(i: number): TerminalNode;
	public SUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SUM);
		} else {
			return this.getToken(cobolParser.SUM, i);
		}
	}
	public sum_name(): Sum_nameContext[];
	public sum_name(i: number): Sum_nameContext;
	public sum_name(i?: number): Sum_nameContext | Sum_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sum_nameContext);
		} else {
			return this.getRuleContext(i, Sum_nameContext);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RESET, 0); }
	public control_foot_name(): Control_foot_nameContext | undefined {
		return this.tryGetRuleContext(0, Control_foot_nameContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode[];
	public UPON(i: number): TerminalNode;
	public UPON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UPON);
		} else {
			return this.getToken(cobolParser.UPON, i);
		}
	}
	public detail_report_group_name(): Detail_report_group_nameContext[];
	public detail_report_group_name(i: number): Detail_report_group_nameContext;
	public detail_report_group_name(i?: number): Detail_report_group_nameContext | Detail_report_group_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Detail_report_group_nameContext);
		} else {
			return this.getRuleContext(i, Detail_report_group_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum) {
			listener.enterSum(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum) {
			listener.exitSum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum) {
			return visitor.visitSum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_foot_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_foot_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_foot_name) {
			listener.enterControl_foot_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_foot_name) {
			listener.exitControl_foot_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_foot_name) {
			return visitor.visitControl_foot_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Detail_report_group_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_detail_report_group_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDetail_report_group_name) {
			listener.enterDetail_report_group_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDetail_report_group_name) {
			listener.exitDetail_report_group_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDetail_report_group_name) {
			return visitor.visitDetail_report_group_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sum_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum_name) {
			listener.enterSum_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum_name) {
			listener.exitSum_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum_name) {
			return visitor.visitSum_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_name) {
			listener.enterSource_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_name) {
			listener.exitSource_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_name) {
			return visitor.visitSource_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColumn_number) {
			listener.enterColumn_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColumn_number) {
			listener.exitColumn_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColumn_number) {
			return visitor.visitColumn_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_is_definitionContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RH, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PH, 0); }
	public type_control_name(): Type_control_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CH, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CF, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PF, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_is_definition) {
			listener.enterType_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_is_definition) {
			listener.exitType_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_is_definition) {
			return visitor.visitType_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_control_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_control_name) {
			listener.enterType_control_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_control_name) {
			listener.exitType_control_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_control_name) {
			return visitor.visitType_control_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Next_group_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_next_group_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNext_group_definition) {
			listener.enterNext_group_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNext_group_definition) {
			listener.exitNext_group_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNext_group_definition) {
			return visitor.visitNext_group_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_num_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext {
		return this.getRuleContext(0, Line_numContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num_definition) {
			listener.enterLine_num_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num_definition) {
			listener.exitLine_num_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num_definition) {
			return visitor.visitLine_num_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num) {
			listener.enterLine_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num) {
			listener.exitLine_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num) {
			return visitor.visitLine_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_description_entryContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CODE, 0); }
	public report_code(): Report_codeContext | undefined {
		return this.tryGetRuleContext(0, Report_codeContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CONTROLS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROLS, 0); }
	public control_name(): Control_nameContext[];
	public control_name(i: number): Control_nameContext;
	public control_name(i?: number): Control_nameContext | Control_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Control_nameContext);
		} else {
			return this.getRuleContext(i, Control_nameContext);
		}
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public page_size_rd(): Page_size_rdContext | undefined {
		return this.tryGetRuleContext(0, Page_size_rdContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMITS, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public heading_line(): Heading_lineContext | undefined {
		return this.tryGetRuleContext(0, Heading_lineContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public DETAIL(): TerminalNode[];
	public DETAIL(i: number): TerminalNode;
	public DETAIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DETAIL);
		} else {
			return this.getToken(cobolParser.DETAIL, i);
		}
	}
	public first_detail_line(): First_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, First_detail_lineContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LAST, 0); }
	public last_detail_line(): Last_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, Last_detail_lineContext);
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line_rd(): Footing_line_rdContext | undefined {
		return this.tryGetRuleContext(0, Footing_line_rdContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description_entry) {
			listener.enterReport_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description_entry) {
			listener.exitReport_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description_entry) {
			return visitor.visitReport_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_line_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line_rd) {
			listener.enterFooting_line_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line_rd) {
			listener.exitFooting_line_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line_rd) {
			return visitor.visitFooting_line_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_detail_line) {
			listener.enterLast_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_detail_line) {
			listener.exitLast_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_detail_line) {
			return visitor.visitLast_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_detail_line) {
			listener.enterFirst_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_detail_line) {
			listener.exitFirst_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_detail_line) {
			return visitor.visitFirst_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Heading_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_heading_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterHeading_line) {
			listener.enterHeading_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitHeading_line) {
			listener.exitHeading_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitHeading_line) {
			return visitor.visitHeading_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_size_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size_rd) {
			listener.enterPage_size_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size_rd) {
			listener.exitPage_size_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size_rd) {
			return visitor.visitPage_size_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_name) {
			listener.enterControl_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_name) {
			listener.exitControl_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_name) {
			return visitor.visitControl_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_codeContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_code; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_code) {
			listener.enterReport_code(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_code) {
			listener.exitReport_code(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_code) {
			return visitor.visitReport_code(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsageContext extends ParserRuleContext {
	public usage_def(): Usage_defContext {
		return this.getRuleContext(0, Usage_defContext);
	}
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage) {
			listener.enterUsage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage) {
			listener.exitUsage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage) {
			return visitor.visitUsage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_defContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY, 0); }
	public BINARY_CHAR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_CHAR, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNSIGNED, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BINARY_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_SHORT, 0); }
	public BINARY_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_LONG, 0); }
	public BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_DOUBLE, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_5, 0); }
	public COMPUTATIONAL_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_X, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_5, 0); }
	public COMP_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_X, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public FLOAT_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_SHORT, 0); }
	public FLOAT_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_LONG, 0); }
	public FLOAT_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_EXTENDED, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEX, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public POINTER_64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER_64, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_def) {
			listener.enterUsage_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_def) {
			listener.exitUsage_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_def) {
			return visitor.visitUsage_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureContext extends ParserRuleContext {
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPicture) {
			listener.enterPicture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPicture) {
			listener.exitPicture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPicture) {
			return visitor.visitPicture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public char_str_part(): Char_str_partContext[];
	public char_str_part(i: number): Char_str_partContext;
	public char_str_part(i?: number): Char_str_partContext | Char_str_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_str_partContext);
		} else {
			return this.getRuleContext(i, Char_str_partContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_character_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCharacter_string) {
			return visitor.visitCharacter_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_str_partContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_str_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_str_part) {
			listener.enterChar_str_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_str_part) {
			listener.exitChar_str_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_str_part) {
			return visitor.visitChar_str_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Other_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_other_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOther_data_item) {
			listener.enterOther_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOther_data_item) {
			listener.exitOther_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOther_data_item) {
			return visitor.visitOther_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_name) {
			listener.enterData_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_name) {
			listener.exitData_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_name) {
			return visitor.visitData_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_descriptionContext extends ParserRuleContext {
	public SD(): TerminalNode { return this.getToken(cobolParser.SD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext[];
	public sort_merge_file_description_entry(i: number): Sort_merge_file_description_entryContext;
	public sort_merge_file_description_entry(i?: number): Sort_merge_file_description_entryContext | Sort_merge_file_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_description_entryContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_description_entryContext);
		}
	}
	public file_data_description(): File_data_descriptionContext[];
	public file_data_description(i: number): File_data_descriptionContext;
	public file_data_description(i?: number): File_data_descriptionContext | File_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_data_descriptionContext);
		} else {
			return this.getRuleContext(i, File_data_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description) {
			listener.enterSort_merge_file_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description) {
			listener.exitSort_merge_file_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description) {
			return visitor.visitSort_merge_file_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_description_entryContext extends ParserRuleContext {
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description_entry) {
			listener.enterSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description_entry) {
			listener.exitSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description_entry) {
			return visitor.visitSort_merge_file_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_isContext extends ParserRuleContext {
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_is) {
			listener.enterReport_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_is) {
			listener.exitReport_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_is) {
			return visitor.visitReport_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_name) {
			listener.enterReport_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_name) {
			listener.exitReport_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_name) {
			return visitor.visitReport_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(cobolParser.LINAGE, 0); }
	public page_size(): Page_sizeContext {
		return this.getRuleContext(0, Page_sizeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.LINES);
		} else {
			return this.getToken(cobolParser.LINES, i);
		}
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line(): Footing_lineContext | undefined {
		return this.tryGetRuleContext(0, Footing_lineContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TOP, 0); }
	public top_lines(): Top_linesContext | undefined {
		return this.tryGetRuleContext(0, Top_linesContext);
	}
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOTTOM, 0); }
	public bottom_lines(): Bottom_linesContext | undefined {
		return this.tryGetRuleContext(0, Bottom_linesContext);
	}
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AT);
		} else {
			return this.getToken(cobolParser.AT, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinage) {
			listener.enterLinage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinage) {
			listener.exitLinage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinage) {
			return visitor.visitLinage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bottom_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bottom_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBottom_lines) {
			listener.enterBottom_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBottom_lines) {
			listener.exitBottom_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBottom_lines) {
			return visitor.visitBottom_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_lines) {
			listener.enterTop_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_lines) {
			listener.exitTop_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_lines) {
			return visitor.visitTop_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line) {
			listener.enterFooting_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line) {
			listener.exitFooting_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line) {
			return visitor.visitFooting_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size) {
			listener.enterPage_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size) {
			listener.exitPage_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size) {
			return visitor.visitPage_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_recContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public rec_name(): Rec_nameContext[];
	public rec_name(i: number): Rec_nameContext;
	public rec_name(i?: number): Rec_nameContext | Rec_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_nameContext);
		} else {
			return this.getRuleContext(i, Rec_nameContext);
		}
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_rec) {
			listener.enterData_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_rec) {
			listener.exitData_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_rec) {
			return visitor.visitData_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_name) {
			listener.enterRec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_name) {
			listener.exitRec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_name) {
			return visitor.visitRec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_idContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(cobolParser.OF, 0); }
	public ID(): TerminalNode { return this.getToken(cobolParser.ID, 0); }
	public value_of_id_def(): Value_of_id_defContext {
		return this.getRuleContext(0, Value_of_id_defContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id) {
			listener.enterValue_of_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id) {
			listener.exitValue_of_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id) {
			return visitor.visitValue_of_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_id_defContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id_def) {
			listener.enterValue_of_id_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id_def) {
			listener.exitValue_of_id_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id_def) {
			return visitor.visitValue_of_id_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(cobolParser.LABEL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_label; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_def(): Record_defContext {
		return this.getRuleContext(0, Record_defContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord) {
			listener.enterRecord(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord) {
			listener.exitRecord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord) {
			return visitor.visitRecord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_defContext extends ParserRuleContext {
	public longest_rec(): Longest_recContext | undefined {
		return this.tryGetRuleContext(0, Longest_recContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public shortest_rec(): Shortest_recContext | undefined {
		return this.tryGetRuleContext(0, Shortest_recContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_def) {
			listener.enterRecord_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_def) {
			listener.exitRecord_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_def) {
			return visitor.visitRecord_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Depending_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_depending_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDepending_item) {
			listener.enterDepending_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDepending_item) {
			listener.exitDepending_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDepending_item) {
			return visitor.visitDepending_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Shortest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_shortest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterShortest_rec) {
			listener.enterShortest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitShortest_rec) {
			listener.exitShortest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitShortest_rec) {
			return visitor.visitShortest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Longest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_longest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLongest_rec) {
			listener.enterLongest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLongest_rec) {
			listener.exitLongest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLongest_rec) {
			return visitor.visitLongest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_sectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(cobolParser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_data_description(): File_data_descriptionContext[];
	public file_data_description(i: number): File_data_descriptionContext;
	public file_data_description(i?: number): File_data_descriptionContext | File_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_data_descriptionContext);
		} else {
			return this.getRuleContext(i, File_data_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_section) {
			listener.enterWorking_storage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_section) {
			listener.exitWorking_storage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_section) {
			return visitor.visitWorking_storage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Linkage_sectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(cobolParser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_data_description(): File_data_descriptionContext[];
	public file_data_description(i: number): File_data_descriptionContext;
	public file_data_description(i?: number): File_data_descriptionContext | File_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_data_descriptionContext);
		} else {
			return this.getRuleContext(i, File_data_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linkage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinkage_section) {
			listener.enterLinkage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinkage_section) {
			listener.exitLinkage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinkage_section) {
			return visitor.visitLinkage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_sectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(cobolParser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public report_description(): Report_descriptionContext[];
	public report_description(i: number): Report_descriptionContext;
	public report_description(i?: number): Report_descriptionContext | Report_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_section) {
			listener.enterReport_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_section) {
			listener.exitReport_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_section) {
			return visitor.visitReport_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_sectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(cobolParser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_data_description_entry(): File_data_description_entryContext[];
	public file_data_description_entry(i: number): File_data_description_entryContext;
	public file_data_description_entry(i?: number): File_data_description_entryContext | File_data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_data_description_entryContext);
		} else {
			return this.getRuleContext(i, File_data_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_section) {
			listener.enterScreen_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_section) {
			listener.exitScreen_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_section) {
			return visitor.visitScreen_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_divisionContext extends ParserRuleContext {
	public IDENTIFICATION_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.IDENTIFICATION_IN_A_AREA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identification_division_paragraph(): Identification_division_paragraphContext[];
	public identification_division_paragraph(i: number): Identification_division_paragraphContext;
	public identification_division_paragraph(i?: number): Identification_division_paragraphContext | Identification_division_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identification_division_paragraphContext);
		} else {
			return this.getRuleContext(i, Identification_division_paragraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division) {
			listener.enterIdentification_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division) {
			listener.exitIdentification_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division) {
			return visitor.visitIdentification_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_division_paragraphContext extends ParserRuleContext {
	public program_id(): Program_idContext | undefined {
		return this.tryGetRuleContext(0, Program_idContext);
	}
	public author(): AuthorContext | undefined {
		return this.tryGetRuleContext(0, AuthorContext);
	}
	public installation(): InstallationContext | undefined {
		return this.tryGetRuleContext(0, InstallationContext);
	}
	public date_written(): Date_writtenContext | undefined {
		return this.tryGetRuleContext(0, Date_writtenContext);
	}
	public date_compiled(): Date_compiledContext | undefined {
		return this.tryGetRuleContext(0, Date_compiledContext);
	}
	public security(): SecurityContext | undefined {
		return this.tryGetRuleContext(0, SecurityContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public separator(): SeparatorContext | undefined {
		return this.tryGetRuleContext(0, SeparatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division_paragraph) {
			listener.enterIdentification_division_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division_paragraph) {
			listener.exitIdentification_division_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division_paragraph) {
			return visitor.visitIdentification_division_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_idContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(cobolParser.PROGRAM_ID, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public is_program(): Is_programContext | undefined {
		return this.tryGetRuleContext(0, Is_programContext);
	}
	public with_ident(): With_identContext | undefined {
		return this.tryGetRuleContext(0, With_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_id) {
			listener.enterProgram_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_id) {
			listener.exitProgram_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_id) {
			return visitor.visitProgram_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_name) {
			listener.enterProgram_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_name) {
			listener.exitProgram_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_name) {
			return visitor.visitProgram_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_programContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_program) {
			listener.enterIs_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_program) {
			listener.exitIs_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_program) {
			return visitor.visitIs_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_identContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(cobolParser.IDENT, 0); }
	public ident_string(): Ident_stringContext {
		return this.getRuleContext(0, Ident_stringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_ident; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_ident) {
			listener.enterWith_ident(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_ident) {
			listener.exitWith_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_ident) {
			return visitor.visitWith_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ident_stringContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ident_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdent_string) {
			listener.enterIdent_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdent_string) {
			listener.exitIdent_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdent_string) {
			return visitor.visitIdent_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_entryContext extends ParserRuleContext {
	public START_FOUR_SPACES(): TerminalNode { return this.getToken(cobolParser.START_FOUR_SPACES, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_comment_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComment_entry) {
			listener.enterComment_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComment_entry) {
			listener.exitComment_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComment_entry) {
			return visitor.visitComment_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(cobolParser.AUTHOR, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor) {
			listener.enterAuthor(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor) {
			listener.exitAuthor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor) {
			return visitor.visitAuthor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(cobolParser.INSTALLATION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_installation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInstallation) {
			listener.enterInstallation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInstallation) {
			listener.exitInstallation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInstallation) {
			return visitor.visitInstallation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_writtenContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(cobolParser.DATE_WRITTEN, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_written; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_written) {
			listener.enterDate_written(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_written) {
			listener.exitDate_written(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_written) {
			return visitor.visitDate_written(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_compiledContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(cobolParser.DATE_COMPILED, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_compiled; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_compiled) {
			listener.enterDate_compiled(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_compiled) {
			listener.exitDate_compiled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_compiled) {
			return visitor.visitDate_compiled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(cobolParser.SECURITY, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_security; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSecurity) {
			listener.enterSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSecurity) {
			listener.exitSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSecurity) {
			return visitor.visitSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(cobolParser.OPTIONS, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public arithmetic(): ArithmeticContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_options_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticContext extends ParserRuleContext {
	public ARITHMETIC(): TerminalNode { return this.getToken(cobolParser.ARITHMETIC, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic) {
			listener.enterArithmetic(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic) {
			listener.exitArithmetic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic) {
			return visitor.visitArithmetic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_divisionContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(cobolParser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public configuration_section(): Configuration_sectionContext | undefined {
		return this.tryGetRuleContext(0, Configuration_sectionContext);
	}
	public input_output_section(): Input_output_sectionContext | undefined {
		return this.tryGetRuleContext(0, Input_output_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division) {
			listener.enterEnvironment_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division) {
			listener.exitEnvironment_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division) {
			return visitor.visitEnvironment_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Configuration_sectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(cobolParser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public source_computer(): Source_computerContext | undefined {
		return this.tryGetRuleContext(0, Source_computerContext);
	}
	public object_computer(): Object_computerContext | undefined {
		return this.tryGetRuleContext(0, Object_computerContext);
	}
	public special_names(): Special_namesContext | undefined {
		return this.tryGetRuleContext(0, Special_namesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_configuration_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConfiguration_section) {
			listener.enterConfiguration_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConfiguration_section) {
			listener.exitConfiguration_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConfiguration_section) {
			return visitor.visitConfiguration_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_output_sectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(cobolParser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_control(): File_controlContext | undefined {
		return this.tryGetRuleContext(0, File_controlContext);
	}
	public i_o_control(): I_o_controlContext | undefined {
		return this.tryGetRuleContext(0, I_o_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_output_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_output_section) {
			listener.enterInput_output_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_output_section) {
			listener.exitInput_output_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_output_section) {
			return visitor.visitInput_output_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_computerContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(cobolParser.SOURCE_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public with_debugging(): With_debuggingContext | undefined {
		return this.tryGetRuleContext(0, With_debuggingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_computer) {
			listener.enterSource_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_computer) {
			listener.exitSource_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_computer) {
			return visitor.visitSource_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Computer_typeContext extends ParserRuleContext {
	public ALPHA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHA, 0); }
	public I64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I64, 0); }
	public VAX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VAX, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_computer_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComputer_type) {
			listener.enterComputer_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComputer_type) {
			listener.exitComputer_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComputer_type) {
			return visitor.visitComputer_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_debuggingContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(cobolParser.DEBUGGING, 0); }
	public MODE(): TerminalNode { return this.getToken(cobolParser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_debugging; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_debugging) {
			listener.enterWith_debugging(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_debugging) {
			listener.exitWith_debugging(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_debugging) {
			return visitor.visitWith_debugging(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_computerContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(cobolParser.OBJECT_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public memory_size(): Memory_sizeContext | undefined {
		return this.tryGetRuleContext(0, Memory_sizeContext);
	}
	public program_collating(): Program_collatingContext | undefined {
		return this.tryGetRuleContext(0, Program_collatingContext);
	}
	public segment_limit(): Segment_limitContext | undefined {
		return this.tryGetRuleContext(0, Segment_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_object_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterObject_computer) {
			listener.enterObject_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitObject_computer) {
			listener.exitObject_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitObject_computer) {
			return visitor.visitObject_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_sizeContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(cobolParser.MEMORY, 0); }
	public memory_size_amount(): Memory_size_amountContext {
		return this.getRuleContext(0, Memory_size_amountContext);
	}
	public memory_size_unit(): Memory_size_unitContext {
		return this.getRuleContext(0, Memory_size_unitContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size) {
			listener.enterMemory_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size) {
			listener.exitMemory_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size) {
			return visitor.visitMemory_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_amountContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_amount; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_amount) {
			listener.enterMemory_size_amount(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_amount) {
			listener.exitMemory_size_amount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_amount) {
			return visitor.visitMemory_size_amount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_unitContext extends ParserRuleContext {
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_unit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_unit) {
			listener.enterMemory_size_unit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_unit) {
			listener.exitMemory_size_unit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_unit) {
			return visitor.visitMemory_size_unit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_collatingContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_collating; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_collating) {
			listener.enterProgram_collating(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_collating) {
			listener.exitProgram_collating(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_collating) {
			return visitor.visitProgram_collating(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_name) {
			listener.enterAlpha_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_name) {
			listener.exitAlpha_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_name) {
			return visitor.visitAlpha_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_limitContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(cobolParser.SEGMENT_LIMIT, 0); }
	public segment_number(): Segment_numberContext {
		return this.getRuleContext(0, Segment_numberContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_limit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_limit) {
			listener.enterSegment_limit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_limit) {
			listener.exitSegment_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_limit) {
			return visitor.visitSegment_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_number) {
			listener.enterSegment_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_number) {
			listener.exitSegment_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_number) {
			return visitor.visitSegment_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_namesContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(cobolParser.SPECIAL_NAMES, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public special_names_content(): Special_names_contentContext[];
	public special_names_content(i: number): Special_names_contentContext;
	public special_names_content(i?: number): Special_names_contentContext | Special_names_contentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Special_names_contentContext);
		} else {
			return this.getRuleContext(i, Special_names_contentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names) {
			listener.enterSpecial_names(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names) {
			listener.exitSpecial_names(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names) {
			return visitor.visitSpecial_names(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_names_contentContext extends ParserRuleContext {
	public predefined_device(): Predefined_deviceContext | undefined {
		return this.tryGetRuleContext(0, Predefined_deviceContext);
	}
	public device_name(): Device_nameContext | undefined {
		return this.tryGetRuleContext(0, Device_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arg_env(): Arg_envContext | undefined {
		return this.tryGetRuleContext(0, Arg_envContext);
	}
	public arg_env_name(): Arg_env_nameContext | undefined {
		return this.tryGetRuleContext(0, Arg_env_nameContext);
	}
	public C01(): TerminalNode | undefined { return this.tryGetToken(cobolParser.C01, 0); }
	public top_of_page_name(): Top_of_page_nameContext | undefined {
		return this.tryGetRuleContext(0, Top_of_page_nameContext);
	}
	public switch_(): Switch_Context | undefined {
		return this.tryGetRuleContext(0, Switch_Context);
	}
	public alphabet(): AlphabetContext | undefined {
		return this.tryGetRuleContext(0, AlphabetContext);
	}
	public symbolic_chars(): Symbolic_charsContext | undefined {
		return this.tryGetRuleContext(0, Symbolic_charsContext);
	}
	public class_(): Class_Context | undefined {
		return this.tryGetRuleContext(0, Class_Context);
	}
	public currency(): CurrencyContext | undefined {
		return this.tryGetRuleContext(0, CurrencyContext);
	}
	public DECIMAL_POINT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURSOR, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CRT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CRT, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names_content; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names_content) {
			listener.enterSpecial_names_content(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names_content) {
			listener.exitSpecial_names_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names_content) {
			return visitor.visitSpecial_names_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode[];
	public USER_DEFINED_WORD(i: number): TerminalNode;
	public USER_DEFINED_WORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.USER_DEFINED_WORD);
		} else {
			return this.getToken(cobolParser.USER_DEFINED_WORD, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OF);
		} else {
			return this.getToken(cobolParser.OF, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_qualified_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterQualified_data_item) {
			listener.enterQualified_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitQualified_data_item) {
			listener.exitQualified_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitQualified_data_item) {
			return visitor.visitQualified_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencyContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(cobolParser.CURRENCY, 0); }
	public currency_def(): Currency_defContext {
		return this.getRuleContext(0, Currency_defContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency) {
			listener.enterCurrency(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency) {
			listener.exitCurrency(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency) {
			return visitor.visitCurrency(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_defContext extends ParserRuleContext {
	public literal_7(): Literal_7Context | undefined {
		return this.tryGetRuleContext(0, Literal_7Context);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL, 0); }
	public literal_8(): Literal_8Context | undefined {
		return this.tryGetRuleContext(0, Literal_8Context);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_def) {
			listener.enterCurrency_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_def) {
			listener.exitCurrency_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_def) {
			return visitor.visitCurrency_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_7Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_7; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_7) {
			listener.enterLiteral_7(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_7) {
			listener.exitLiteral_7(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_7) {
			return visitor.visitLiteral_7(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_8Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_8; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_8) {
			listener.enterLiteral_8(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_8) {
			listener.exitLiteral_8(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_8) {
			return visitor.visitLiteral_8(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_Context extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(cobolParser.CLASS, 0); }
	public class_name(): Class_nameContext {
		return this.getRuleContext(0, Class_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public user_class(): User_classContext[];
	public user_class(i: number): User_classContext;
	public user_class(i?: number): User_classContext | User_classContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_classContext);
		} else {
			return this.getRuleContext(i, User_classContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_) {
			listener.enterClass_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_) {
			listener.exitClass_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_) {
			return visitor.visitClass_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_name) {
			listener.enterClass_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_name) {
			listener.exitClass_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_name) {
			return visitor.visitClass_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_classContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_class; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_class) {
			listener.enterUser_class(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_class) {
			listener.exitUser_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_class) {
			return visitor.visitUser_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbolic_charsContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(cobolParser.SYMBOLIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public symb_ch_definition(): Symb_ch_definitionContext[];
	public symb_ch_definition(i: number): Symb_ch_definitionContext;
	public symb_ch_definition(i?: number): Symb_ch_definitionContext | Symb_ch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_definitionContext);
		} else {
			return this.getRuleContext(i, Symb_ch_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbolic_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbolic_chars) {
			listener.enterSymbolic_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbolic_chars) {
			listener.exitSymbolic_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbolic_chars) {
			return visitor.visitSymbolic_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_definitionContext extends ParserRuleContext {
	public symb_ch_def_clause(): Symb_ch_def_clauseContext[];
	public symb_ch_def_clause(i: number): Symb_ch_def_clauseContext;
	public symb_ch_def_clause(i?: number): Symb_ch_def_clauseContext | Symb_ch_def_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_def_clauseContext);
		} else {
			return this.getRuleContext(i, Symb_ch_def_clauseContext);
		}
	}
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext | undefined {
		return this.tryGetRuleContext(0, Symb_ch_def_in_alphabetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_definition) {
			listener.enterSymb_ch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_definition) {
			listener.exitSymb_ch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_definition) {
			return visitor.visitSymb_ch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_clauseContext extends ParserRuleContext {
	public symbol_char(): Symbol_charContext[];
	public symbol_char(i: number): Symbol_charContext;
	public symbol_char(i?: number): Symbol_charContext | Symbol_charContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbol_charContext);
		} else {
			return this.getRuleContext(i, Symbol_charContext);
		}
	}
	public char_val(): Char_valContext[];
	public char_val(i: number): Char_valContext;
	public char_val(i?: number): Char_valContext | Char_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_valContext);
		} else {
			return this.getRuleContext(i, Char_valContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_clause) {
			listener.enterSymb_ch_def_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_clause) {
			listener.exitSymb_ch_def_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_clause) {
			return visitor.visitSymb_ch_def_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(cobolParser.IN, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_in_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_in_alphabet) {
			listener.enterSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_in_alphabet) {
			listener.exitSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_in_alphabet) {
			return visitor.visitSymb_ch_def_in_alphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbol_charContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbol_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbol_char) {
			listener.enterSymbol_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbol_char) {
			listener.exitSymbol_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbol_char) {
			return visitor.visitSymbol_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_valContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_val) {
			listener.enterChar_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_val) {
			listener.exitChar_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_val) {
			return visitor.visitChar_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetContext extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(cobolParser.ALPHABET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public alpha_value(): Alpha_valueContext {
		return this.getRuleContext(0, Alpha_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlphabet) {
			listener.enterAlphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlphabet) {
			listener.exitAlphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlphabet) {
			return visitor.visitAlphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_valueContext extends ParserRuleContext {
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EBCDIC, 0); }
	public user_alpha(): User_alphaContext[];
	public user_alpha(i: number): User_alphaContext;
	public user_alpha(i?: number): User_alphaContext | User_alphaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_alphaContext);
		} else {
			return this.getRuleContext(i, User_alphaContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_value) {
			listener.enterAlpha_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_value) {
			listener.exitAlpha_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_value) {
			return visitor.visitAlpha_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_alphaContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public same_literal(): Same_literalContext[];
	public same_literal(i: number): Same_literalContext;
	public same_literal(i?: number): Same_literalContext | Same_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_literalContext);
		} else {
			return this.getRuleContext(i, Same_literalContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_alpha; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_alpha) {
			listener.enterUser_alpha(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_alpha) {
			listener.exitUser_alpha(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_alpha) {
			return visitor.visitUser_alpha(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_literal) {
			listener.enterFirst_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_literal) {
			listener.exitFirst_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_literal) {
			return visitor.visitFirst_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_literal) {
			listener.enterLast_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_literal) {
			listener.exitLast_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_literal) {
			return visitor.visitLast_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_literal) {
			listener.enterSame_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_literal) {
			listener.exitSame_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_literal) {
			return visitor.visitSame_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_Context extends ParserRuleContext {
	public SWITCH(): TerminalNode { return this.getToken(cobolParser.SWITCH, 0); }
	public switch_num(): Switch_numContext {
		return this.getRuleContext(0, Switch_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public switch_name(): Switch_nameContext | undefined {
		return this.tryGetRuleContext(0, Switch_nameContext);
	}
	public switch_clause_on(): Switch_clause_onContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_onContext);
	}
	public switch_clause_off(): Switch_clause_offContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_offContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_) {
			listener.enterSwitch_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_) {
			listener.exitSwitch_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_) {
			return visitor.visitSwitch_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_onContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_on) {
			listener.enterSwitch_clause_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_on) {
			listener.exitSwitch_clause_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_on) {
			return visitor.visitSwitch_clause_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_offContext extends ParserRuleContext {
	public OFF(): TerminalNode { return this.getToken(cobolParser.OFF, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_off; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_off) {
			listener.enterSwitch_clause_off(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_off) {
			listener.exitSwitch_clause_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_off) {
			return visitor.visitSwitch_clause_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cond_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cond_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCond_name) {
			listener.enterCond_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCond_name) {
			listener.exitCond_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCond_name) {
			return visitor.visitCond_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_name) {
			listener.enterSwitch_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_name) {
			listener.exitSwitch_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_name) {
			return visitor.visitSwitch_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_num) {
			listener.enterSwitch_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_num) {
			listener.exitSwitch_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_num) {
			return visitor.visitSwitch_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_of_page_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_of_page_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_of_page_name) {
			listener.enterTop_of_page_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_of_page_name) {
			listener.exitTop_of_page_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_of_page_name) {
			return visitor.visitTop_of_page_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_deviceContext extends ParserRuleContext {
	public CARD_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CARD_READER, 0); }
	public PAPER_TAPE_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_READER, 0); }
	public CONSOLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONSOLE, 0); }
	public LINE_PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE_PRINTER, 0); }
	public PAPER_TAPE_PUNCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
	public SYSIN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSIN, 0); }
	public SYSOUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSOUT, 0); }
	public SYSERR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSERR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_device; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_device) {
			listener.enterPredefined_device(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_device) {
			listener.exitPredefined_device(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_device) {
			return visitor.visitPredefined_device(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Device_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_device_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDevice_name) {
			listener.enterDevice_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDevice_name) {
			listener.exitDevice_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDevice_name) {
			return visitor.visitDevice_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_envContext extends ParserRuleContext {
	public ARGUMENT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_NUMBER, 0); }
	public ARGUMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_VALUE, 0); }
	public ENVIRONMENT_NAME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_NAME, 0); }
	public ENVIRONMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env) {
			listener.enterArg_env(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env) {
			listener.exitArg_env(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env) {
			return visitor.visitArg_env(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_env_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env_name) {
			listener.enterArg_env_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env_name) {
			listener.exitArg_env_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env_name) {
			return visitor.visitArg_env_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_controlContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(cobolParser.FILE_CONTROL, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public select(): SelectContext[];
	public select(i: number): SelectContext;
	public select(i?: number): SelectContext | SelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectContext);
		} else {
			return this.getRuleContext(i, SelectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_control) {
			listener.enterFile_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_control) {
			listener.exitFile_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_control) {
			return visitor.visitFile_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(cobolParser.SELECT, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public assign_to(): Assign_toContext {
		return this.getRuleContext(0, Assign_toContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OPTIONAL, 0); }
	public reserve(): ReserveContext | undefined {
		return this.tryGetRuleContext(0, ReserveContext);
	}
	public organization(): OrganizationContext | undefined {
		return this.tryGetRuleContext(0, OrganizationContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public padding(): PaddingContext | undefined {
		return this.tryGetRuleContext(0, PaddingContext);
	}
	public record_delimiter(): Record_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Record_delimiterContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext[];
	public record_key(i: number): Record_keyContext;
	public record_key(i?: number): Record_keyContext | Record_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_keyContext);
		} else {
			return this.getRuleContext(i, Record_keyContext);
		}
	}
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect) {
			return visitor.visitSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public file_stat(): File_statContext {
		return this.getRuleContext(0, File_statContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_status; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_status) {
			listener.enterFile_status(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_status) {
			listener.exitFile_status(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_status) {
			return visitor.visitFile_status(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_stat; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_stat) {
			listener.enterFile_stat(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_stat) {
			listener.exitFile_stat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_stat) {
			return visitor.visitFile_stat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_keyContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_def(): Record_key_defContext {
		return this.getRuleContext(0, Record_key_defContext);
	}
	public ALTERNATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALTERNATE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key) {
			listener.enterRecord_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key) {
			listener.exitRecord_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key) {
			return visitor.visitRecord_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_key_defContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key_def) {
			listener.enterRecord_key_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key_def) {
			listener.exitRecord_key_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key_def) {
			return visitor.visitRecord_key_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_modeContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ACCESS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IS);
		} else {
			return this.getToken(cobolParser.IS, i);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_access_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccess_mode) {
			listener.enterAccess_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccess_mode) {
			listener.exitAccess_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccess_mode) {
			return visitor.visitAccess_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(cobolParser.RESERVE, 0); }
	public reserve_num(): Reserve_numContext {
		return this.getRuleContext(0, Reserve_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve) {
			listener.enterReserve(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve) {
			listener.exitReserve(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve) {
			return visitor.visitReserve(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserve_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve_num) {
			listener.enterReserve_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve_num) {
			listener.exitReserve_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve_num) {
			return visitor.visitReserve_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_delimiterContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(cobolParser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode { return this.getToken(cobolParser.STANDARD_1, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_delimiter; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_delimiter) {
			listener.enterRecord_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_delimiter) {
			listener.exitRecord_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_delimiter) {
			return visitor.visitRecord_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(cobolParser.PADDING, 0); }
	public pad_char(): Pad_charContext {
		return this.getRuleContext(0, Pad_charContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_padding; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPadding) {
			listener.enterPadding(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPadding) {
			listener.exitPadding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPadding) {
			return visitor.visitPadding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pad_charContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pad_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPad_char) {
			listener.enterPad_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPad_char) {
			listener.exitPad_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPad_char) {
			return visitor.visitPad_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORGANIZATION, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_organization; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOrganization) {
			listener.enterOrganization(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOrganization) {
			listener.exitOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOrganization) {
			return visitor.visitOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(cobolParser.LOCK, 0); }
	public lock_mode_def(): Lock_mode_defContext {
		return this.getRuleContext(0, Lock_mode_defContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode) {
			return visitor.visitLock_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_mode_defContext extends ParserRuleContext {
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MANUAL, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOMATIC, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROLLBACK, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode_def) {
			listener.enterLock_mode_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode_def) {
			listener.exitLock_mode_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode_def) {
			return visitor.visitLock_mode_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Code_setContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(cobolParser.CODE_SET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_code_set; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCode_set) {
			listener.enterCode_set(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCode_set) {
			listener.exitCode_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCode_set) {
			return visitor.visitCode_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_containsContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(cobolParser.BLOCK, 0); }
	public blocksize(): BlocksizeContext {
		return this.getRuleContext(0, BlocksizeContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public smallest_block(): Smallest_blockContext | undefined {
		return this.tryGetRuleContext(0, Smallest_blockContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_block_contains; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlock_contains) {
			listener.enterBlock_contains(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlock_contains) {
			listener.exitBlock_contains(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlock_contains) {
			return visitor.visitBlock_contains(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smallest_blockContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smallest_block; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmallest_block) {
			listener.enterSmallest_block(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmallest_block) {
			listener.exitSmallest_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmallest_block) {
			return visitor.visitSmallest_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlocksizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_blocksize; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlocksize) {
			listener.enterBlocksize(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlocksize) {
			listener.exitBlocksize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlocksize) {
			return visitor.visitBlocksize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_toContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(cobolParser.ASSIGN, 0); }
	public assign_to_def(): Assign_to_defContext {
		return this.getRuleContext(0, Assign_to_defContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to) {
			listener.enterAssign_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to) {
			listener.exitAssign_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to) {
			return visitor.visitAssign_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_to_defContext extends ParserRuleContext {
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to_def) {
			listener.enterAssign_to_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to_def) {
			listener.exitAssign_to_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to_def) {
			return visitor.visitAssign_to_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public DISK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISK, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_controlContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(cobolParser.I_O_CONTROL, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply(): ApplyContext[];
	public apply(i: number): ApplyContext;
	public apply(i?: number): ApplyContext | ApplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ApplyContext);
		} else {
			return this.getRuleContext(i, ApplyContext);
		}
	}
	public same(): SameContext[];
	public same(i: number): SameContext;
	public same(i?: number): SameContext | SameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SameContext);
		} else {
			return this.getRuleContext(i, SameContext);
		}
	}
	public rerun(): RerunContext[];
	public rerun(i: number): RerunContext;
	public rerun(i?: number): RerunContext | RerunContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RerunContext);
		} else {
			return this.getRuleContext(i, RerunContext);
		}
	}
	public multiple_file(): Multiple_fileContext[];
	public multiple_file(i: number): Multiple_fileContext;
	public multiple_file(i?: number): Multiple_fileContext | Multiple_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_fileContext);
		} else {
			return this.getRuleContext(i, Multiple_fileContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control) {
			listener.enterI_o_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control) {
			listener.exitI_o_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control) {
			return visitor.visitI_o_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_fileContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public multiple_file_def(): Multiple_file_defContext[];
	public multiple_file_def(i: number): Multiple_file_defContext;
	public multiple_file_def(i?: number): Multiple_file_defContext | Multiple_file_defContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_file_defContext);
		} else {
			return this.getRuleContext(i, Multiple_file_defContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file) {
			listener.enterMultiple_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file) {
			listener.exitMultiple_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file) {
			return visitor.visitMultiple_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_defContext extends ParserRuleContext {
	public multiple_file_name(): Multiple_file_nameContext {
		return this.getRuleContext(0, Multiple_file_nameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITION, 0); }
	public pos_integer(): Pos_integerContext | undefined {
		return this.tryGetRuleContext(0, Pos_integerContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_def) {
			listener.enterMultiple_file_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_def) {
			listener.exitMultiple_file_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_def) {
			return visitor.visitMultiple_file_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_name) {
			listener.enterMultiple_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_name) {
			listener.exitMultiple_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_name) {
			return visitor.visitMultiple_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos_integerContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pos_integer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPos_integer) {
			listener.enterPos_integer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPos_integer) {
			listener.exitPos_integer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPos_integer) {
			return visitor.visitPos_integer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(cobolParser.RERUN, 0); }
	public rerun_def(): Rerun_defContext {
		return this.getRuleContext(0, Rerun_defContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EVERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun) {
			listener.enterRerun(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun) {
			listener.exitRerun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun) {
			return visitor.visitRerun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_defContext extends ParserRuleContext {
	public rerun_def_file(): Rerun_def_fileContext | undefined {
		return this.tryGetRuleContext(0, Rerun_def_fileContext);
	}
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public clock_count(): Clock_countContext | undefined {
		return this.tryGetRuleContext(0, Clock_countContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CLOCK_UNITS, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def) {
			listener.enterRerun_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def) {
			listener.exitRerun_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def) {
			return visitor.visitRerun_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Clock_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_clock_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClock_count) {
			listener.enterClock_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClock_count) {
			listener.exitClock_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClock_count) {
			return visitor.visitClock_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_name) {
			listener.enterCondition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_name) {
			listener.exitCondition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_name) {
			return visitor.visitCondition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_def_fileContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public rec_count(): Rec_countContext | undefined {
		return this.tryGetRuleContext(0, Rec_countContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def_file) {
			listener.enterRerun_def_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def_file) {
			listener.exitRerun_def_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def_file) {
			return visitor.visitRerun_def_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_count) {
			listener.enterRec_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_count) {
			listener.exitRec_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_count) {
			return visitor.visitRec_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(cobolParser.SAME, 0); }
	public same_area_file(): Same_area_fileContext[];
	public same_area_file(i: number): Same_area_fileContext;
	public same_area_file(i?: number): Same_area_fileContext | Same_area_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_area_fileContext);
		} else {
			return this.getRuleContext(i, Same_area_fileContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame) {
			listener.enterSame(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame) {
			listener.exitSame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame) {
			return visitor.visitSame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_area_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_area_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_area_file) {
			listener.enterSame_area_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_area_file) {
			listener.exitSame_area_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_area_file) {
			return visitor.visitSame_area_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyContext extends ParserRuleContext {
	public APPLY(): TerminalNode { return this.getToken(cobolParser.APPLY, 0); }
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply_def(): Apply_defContext[];
	public apply_def(i: number): Apply_defContext;
	public apply_def(i?: number): Apply_defContext | Apply_defContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Apply_defContext);
		} else {
			return this.getRuleContext(i, Apply_defContext);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply) {
			listener.enterApply(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply) {
			listener.exitApply(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply) {
			return visitor.visitApply(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Apply_defContext extends ParserRuleContext {
	public DEFERRED_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFERRED_WRITE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTENSION, 0); }
	public extend_amt(): Extend_amtContext | undefined {
		return this.tryGetRuleContext(0, Extend_amtContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FILL_SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILL_SIZE, 0); }
	public LOCK_HOLDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK_HOLDING, 0); }
	public MASS_INSERT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MASS_INSERT, 0); }
	public PREALLOCATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREALLOCATION, 0); }
	public preall_amt(): Preall_amtContext | undefined {
		return this.tryGetRuleContext(0, Preall_amtContext);
	}
	public CONTIGUOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS, 0); }
	public CONTIGUOUS_BEST_TRY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
	public PRINT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINT_CONTROL, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WINDOW, 0); }
	public window_ptrs(): Window_ptrsContext | undefined {
		return this.tryGetRuleContext(0, Window_ptrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply_def; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply_def) {
			listener.enterApply_def(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply_def) {
			listener.exitApply_def(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply_def) {
			return visitor.visitApply_def(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_ptrsContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_window_ptrs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWindow_ptrs) {
			listener.enterWindow_ptrs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWindow_ptrs) {
			listener.exitWindow_ptrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWindow_ptrs) {
			return visitor.visitWindow_ptrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Preall_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_preall_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPreall_amt) {
			listener.enterPreall_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPreall_amt) {
			listener.exitPreall_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPreall_amt) {
			return visitor.visitPreall_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extend_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_extend_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExtend_amt) {
			listener.enterExtend_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExtend_amt) {
			listener.exitExtend_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExtend_amt) {
			return visitor.visitExtend_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


