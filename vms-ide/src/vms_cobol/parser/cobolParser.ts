// Generated from src/vms_cobol/parser/cobol.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { cobolListener } from "./cobolListener";
import { cobolVisitor } from "./cobolVisitor";


export class cobolParser extends Parser {
	public static readonly ACCEPT = 1;
	public static readonly ACCESS = 2;
	public static readonly ADD = 3;
	public static readonly ALL = 4;
	public static readonly ALPHA = 5;
	public static readonly ALPHABET = 6;
	public static readonly ALSO = 7;
	public static readonly ALTER = 8;
	public static readonly ALTERNATE = 9;
	public static readonly APPLY = 10;
	public static readonly ARE = 11;
	public static readonly AREA = 12;
	public static readonly AREAS = 13;
	public static readonly ARGUMENT_NUMBER = 14;
	public static readonly ARGUMENT_VALUE = 15;
	public static readonly ARITHMETIC = 16;
	public static readonly ASCENDING = 17;
	public static readonly ASCII = 18;
	public static readonly ASSIGN = 19;
	public static readonly AT = 20;
	public static readonly AUTHOR = 21;
	public static readonly AUTO = 22;
	public static readonly AUTOMATIC = 23;
	public static readonly BACKGROUND_COLOR = 24;
	public static readonly BELL = 25;
	public static readonly BINARY = 26;
	public static readonly BINARY_CHAR = 27;
	public static readonly BINARY_DOUBLE = 28;
	public static readonly BINARY_LONG = 29;
	public static readonly BINARY_SHORT = 30;
	public static readonly BLANK = 31;
	public static readonly BLINK = 32;
	public static readonly BLOCK = 33;
	public static readonly BOTTOM = 34;
	public static readonly BY = 35;
	public static readonly C01 = 36;
	public static readonly CALL = 37;
	public static readonly CANCEL = 38;
	public static readonly CARD_READER = 39;
	public static readonly CF = 40;
	public static readonly CH = 41;
	public static readonly CHARACTER = 42;
	public static readonly CHARACTERS = 43;
	public static readonly CLASS = 44;
	public static readonly CLOCK_UNITS = 45;
	public static readonly CLOSE = 46;
	public static readonly CODE = 47;
	public static readonly CODE_SET = 48;
	public static readonly COLLATING = 49;
	public static readonly COLUMN = 50;
	public static readonly COMMA = 51;
	public static readonly COMMON = 52;
	public static readonly COMP = 53;
	public static readonly COMPUTATIONAL = 54;
	public static readonly COMPUTATIONAL_1 = 55;
	public static readonly COMPUTATIONAL_2 = 56;
	public static readonly COMPUTATIONAL_3 = 57;
	public static readonly COMPUTATIONAL_4 = 58;
	public static readonly COMPUTATIONAL_5 = 59;
	public static readonly COMPUTATIONAL_X = 60;
	public static readonly COMPUTE = 61;
	public static readonly COMP_1 = 62;
	public static readonly COMP_2 = 63;
	public static readonly COMP_3 = 64;
	public static readonly COMP_4 = 65;
	public static readonly COMP_5 = 66;
	public static readonly COMP_X = 67;
	public static readonly CONFIGURATION = 68;
	public static readonly CONSOLE = 69;
	public static readonly CONTAINS = 70;
	public static readonly CONTIGUOUS = 71;
	public static readonly CONTIGUOUS_BEST_TRY = 72;
	public static readonly CONTINUE = 73;
	public static readonly CONTROL = 74;
	public static readonly CONTROLS = 75;
	public static readonly CONVERTING = 76;
	public static readonly COPY = 77;
	public static readonly CRT = 78;
	public static readonly CURRENCY = 79;
	public static readonly CURSOR = 80;
	public static readonly DATA = 81;
	public static readonly DATE = 82;
	public static readonly DATE_COMPILED = 83;
	public static readonly DATE_WRITTEN = 84;
	public static readonly DAY = 85;
	public static readonly DAY_OF_WEEK = 86;
	public static readonly DE = 87;
	public static readonly DEBUGGING = 88;
	public static readonly DECIMAL_POINT = 89;
	public static readonly DEFERRED_WRITE = 90;
	public static readonly DELETE = 91;
	public static readonly DELIMITER = 92;
	public static readonly DEPENDING = 93;
	public static readonly DESCENDING = 94;
	public static readonly DETAIL = 95;
	public static readonly DISK = 96;
	public static readonly DISPLAY = 97;
	public static readonly DIVIDE = 98;
	public static readonly DIVISION = 99;
	public static readonly DOWN = 100;
	public static readonly DUPLICATES = 101;
	public static readonly DYNAMIC = 102;
	public static readonly EBCDIC = 103;
	public static readonly END = 104;
	public static readonly END_ACCEPT = 105;
	public static readonly END_ADD = 106;
	public static readonly END_CALL = 107;
	public static readonly END_COMPUTE = 108;
	public static readonly END_DELETE = 109;
	public static readonly END_DIVIDE = 110;
	public static readonly END_EVALUATE = 111;
	public static readonly END_IF = 112;
	public static readonly END_MULTIPLY = 113;
	public static readonly END_OF_PAGE = 114;
	public static readonly END_PERFORM = 115;
	public static readonly END_READ = 116;
	public static readonly END_RETURN = 117;
	public static readonly END_REWRITE = 118;
	public static readonly END_SEARCH = 119;
	public static readonly END_START = 120;
	public static readonly END_STRING = 121;
	public static readonly END_SUBTRACT = 122;
	public static readonly END_UNSTRING = 123;
	public static readonly END_WRITE = 124;
	public static readonly ENVIRONMENT = 125;
	public static readonly ENVIRONMENT_NAME = 126;
	public static readonly ENVIRONMENT_VALUE = 127;
	public static readonly EOL = 128;
	public static readonly EOS = 129;
	public static readonly ERASE = 130;
	public static readonly ERROR = 131;
	public static readonly EVALUATE = 132;
	public static readonly EVERY = 133;
	public static readonly EXCEPTION = 134;
	public static readonly EXCLUSIVE = 135;
	public static readonly EXIT = 136;
	public static readonly EXTENSION = 137;
	public static readonly EXTERNAL = 138;
	public static readonly FD = 139;
	public static readonly FILE = 140;
	public static readonly FILE_CONTROL = 141;
	public static readonly FILE_ID = 142;
	public static readonly FILLER = 143;
	public static readonly FILL_SIZE = 144;
	public static readonly FINAL = 145;
	public static readonly FIRST = 146;
	public static readonly FLOAT_EXTENDED = 147;
	public static readonly FLOAT_LONG = 148;
	public static readonly FLOAT_SHORT = 149;
	public static readonly FOOTING = 150;
	public static readonly FOR = 151;
	public static readonly FOREGROUND_COLOR = 152;
	public static readonly FROM = 153;
	public static readonly FULL = 154;
	public static readonly FUNCTION = 155;
	public static readonly GENERATE = 156;
	public static readonly GLOBAL = 157;
	public static readonly GO = 158;
	public static readonly GROUP = 159;
	public static readonly HEADING = 160;
	public static readonly HIGHLIGHT = 161;
	public static readonly I64 = 162;
	public static readonly ID = 163;
	public static readonly IDENT = 164;
	public static readonly IDENTIFICATION_IN_A_AREA = 165;
	public static readonly IF = 166;
	public static readonly IN = 167;
	public static readonly INDEX = 168;
	public static readonly INDEXED = 169;
	public static readonly INDICATE = 170;
	public static readonly INITIAL = 171;
	public static readonly INITIALIZE = 172;
	public static readonly INITIATE = 173;
	public static readonly INPUT_OUTPUT = 174;
	public static readonly INSPECT = 175;
	public static readonly INSTALLATION = 176;
	public static readonly INVALID = 177;
	public static readonly IS = 178;
	public static readonly I_O_CONTROL = 179;
	public static readonly JUST = 180;
	public static readonly JUSTIFIED = 181;
	public static readonly KEY = 182;
	public static readonly LABEL = 183;
	public static readonly LAST = 184;
	public static readonly LEADING = 185;
	public static readonly LEFT = 186;
	public static readonly LIMIT = 187;
	public static readonly LIMITS = 188;
	public static readonly LINAGE = 189;
	public static readonly LINE = 190;
	public static readonly LINES = 191;
	public static readonly LINE_PRINTER = 192;
	public static readonly LINKAGE = 193;
	public static readonly LOCK = 194;
	public static readonly LOCK_HOLDING = 195;
	public static readonly LOWLIGHT = 196;
	public static readonly MANUAL = 197;
	public static readonly MASS_INSERT = 198;
	public static readonly MEMORY = 199;
	public static readonly MERGE = 200;
	public static readonly MODE = 201;
	public static readonly MODULES = 202;
	public static readonly MOVE = 203;
	public static readonly MULTIPLE = 204;
	public static readonly MULTIPLY = 205;
	public static readonly NATIVE = 206;
	public static readonly NEXT = 207;
	public static readonly NOT = 208;
	public static readonly NUMBER = 209;
	public static readonly OBJECT_COMPUTER = 210;
	public static readonly OCCURS = 211;
	public static readonly OF = 212;
	public static readonly OFF = 213;
	public static readonly OMITTED = 214;
	public static readonly ON = 215;
	public static readonly OPEN = 216;
	public static readonly OPTIONAL = 217;
	public static readonly OPTIONS = 218;
	public static readonly ORGANIZATION = 219;
	public static readonly OVERFLOW = 220;
	public static readonly PACKED_DECIMAL = 221;
	public static readonly PADDING = 222;
	public static readonly PAGE = 223;
	public static readonly PAPER_TAPE_PUNCH = 224;
	public static readonly PAPER_TAPE_READER = 225;
	public static readonly PERFORM = 226;
	public static readonly PF = 227;
	public static readonly PH = 228;
	public static readonly PIC = 229;
	public static readonly PICTURE = 230;
	public static readonly PLUS = 231;
	public static readonly POINTER = 232;
	public static readonly POINTER_64 = 233;
	public static readonly POSITION = 234;
	public static readonly PREALLOCATION = 235;
	public static readonly PRINTER = 236;
	public static readonly PRINT_CONTROL = 237;
	public static readonly PROCEDURE = 238;
	public static readonly PROGRAM = 239;
	public static readonly PROGRAM_ID = 240;
	public static readonly RANDOM = 241;
	public static readonly RD = 242;
	public static readonly READ = 243;
	public static readonly RECORD = 244;
	public static readonly RECORDS = 245;
	public static readonly REDEFINES = 246;
	public static readonly REEL = 247;
	public static readonly REFERENCE = 248;
	public static readonly RELATIVE = 249;
	public static readonly RELEASE = 250;
	public static readonly RENAMES = 251;
	public static readonly REPLACE = 252;
	public static readonly REPLACING = 253;
	public static readonly REPORT = 254;
	public static readonly REPORTS = 255;
	public static readonly REQUIRED = 256;
	public static readonly RERUN = 257;
	public static readonly RESERVE = 258;
	public static readonly RESET = 259;
	public static readonly RETURN = 260;
	public static readonly REVERSE_VIDEO = 261;
	public static readonly REWRITE = 262;
	public static readonly RF = 263;
	public static readonly RH = 264;
	public static readonly RIGHT = 265;
	public static readonly ROLLBACK = 266;
	public static readonly SAME = 267;
	public static readonly SCREEN = 268;
	public static readonly SD = 269;
	public static readonly SEARCH = 270;
	public static readonly SECTION = 271;
	public static readonly SECURE = 272;
	public static readonly SECURITY = 273;
	public static readonly SEGMENT_LIMIT = 274;
	public static readonly SELECT = 275;
	public static readonly SEPARATE = 276;
	public static readonly SEQUENCE = 277;
	public static readonly SEQUENTIAL = 278;
	public static readonly SET = 279;
	public static readonly SIGN = 280;
	public static readonly SIGNED = 281;
	public static readonly SIZE = 282;
	public static readonly SORT = 283;
	public static readonly SORT_MERGE = 284;
	public static readonly SOURCE = 285;
	public static readonly SOURCE_COMPUTER = 286;
	public static readonly SPECIAL_NAMES = 287;
	public static readonly STANDARD = 288;
	public static readonly STANDARD_1 = 289;
	public static readonly STANDARD_2 = 290;
	public static readonly START = 291;
	public static readonly STATUS = 292;
	public static readonly STOP = 293;
	public static readonly STRING = 294;
	public static readonly SUBTRACT = 295;
	public static readonly SUM = 296;
	public static readonly SUPPRESS = 297;
	public static readonly SWITCH = 298;
	public static readonly SYMBOL = 299;
	public static readonly SYMBOLIC = 300;
	public static readonly SYNC = 301;
	public static readonly SYNCHRONIZED = 302;
	public static readonly SYSERR = 303;
	public static readonly SYSIN = 304;
	public static readonly SYSOUT = 305;
	public static readonly TALLYING = 306;
	public static readonly TAPE = 307;
	public static readonly TERMINATE = 308;
	public static readonly THROUGH = 309;
	public static readonly THRU = 310;
	public static readonly TIME = 311;
	public static readonly TIMES = 312;
	public static readonly TO = 313;
	public static readonly TOP = 314;
	public static readonly TRAILING = 315;
	public static readonly TRUE = 316;
	public static readonly TYPE = 317;
	public static readonly UNDERLINE = 318;
	public static readonly UNIT = 319;
	public static readonly UNLOCK = 320;
	public static readonly UNSIGNED = 321;
	public static readonly UNSTRING = 322;
	public static readonly UP = 323;
	public static readonly UPON = 324;
	public static readonly USAGE = 325;
	public static readonly USE = 326;
	public static readonly USING = 327;
	public static readonly VALUE = 328;
	public static readonly VALUES = 329;
	public static readonly VARYING = 330;
	public static readonly VAX = 331;
	public static readonly WHEN = 332;
	public static readonly WINDOW = 333;
	public static readonly WITH = 334;
	public static readonly WORDS = 335;
	public static readonly WORKING_STORAGE = 336;
	public static readonly WRITE = 337;
	public static readonly ZERO = 338;
	public static readonly ZEROES = 339;
	public static readonly ZEROS = 340;
	public static readonly START_SLASH_ = 341;
	public static readonly START_STAR_ = 342;
	public static readonly EXCLAM_ = 343;
	public static readonly UNDER_ = 344;
	public static readonly PLUS_ = 345;
	public static readonly MINUS_ = 346;
	public static readonly STAR_ = 347;
	public static readonly SLASH_ = 348;
	public static readonly COMMA_ = 349;
	public static readonly SEMI_ = 350;
	public static readonly COLON_ = 351;
	public static readonly EQUAL_ = 352;
	public static readonly LT_ = 353;
	public static readonly LE_ = 354;
	public static readonly GE_ = 355;
	public static readonly GT_ = 356;
	public static readonly LPAREN_ = 357;
	public static readonly RPAREN_ = 358;
	public static readonly LBRACK_ = 359;
	public static readonly RBRACK_ = 360;
	public static readonly POINTER_ = 361;
	public static readonly ATP_ = 362;
	public static readonly DOT_ = 363;
	public static readonly LCURLY_ = 364;
	public static readonly RCURLY_ = 365;
	public static readonly STRING_LITERAL = 366;
	public static readonly NUMERIC_LITERAL = 367;
	public static readonly HEX_LITERAL = 368;
	public static readonly USER_DEFINED_WORD = 369;
	public static readonly START_FOUR_SPACES = 370;
	public static readonly WHITESPACE = 371;
	public static readonly NEWLINE = 372;
	public static readonly RULE_cobol_source = 0;
	public static readonly RULE_separator = 1;
	public static readonly RULE_arithmetic_separator = 2;
	public static readonly RULE_line_comment = 3;
	public static readonly RULE_program = 4;
	public static readonly RULE_procedure_division = 5;
	public static readonly RULE_data_division = 6;
	public static readonly RULE_file_section = 7;
	public static readonly RULE_working_storage_section = 8;
	public static readonly RULE_linkage_section = 9;
	public static readonly RULE_report_section = 10;
	public static readonly RULE_screen_section = 11;
	public static readonly RULE_file_description_entry = 12;
	public static readonly RULE_sort_merge_file_description_entry = 13;
	public static readonly RULE_report_description_entry = 14;
	public static readonly RULE_fd_clause = 15;
	public static readonly RULE_record_description_entry = 16;
	public static readonly RULE_data_description_entry = 17;
	public static readonly RULE_level_number = 18;
	public static readonly RULE_data_description_clause = 19;
	public static readonly RULE_renames = 20;
	public static readonly RULE_rename_start = 21;
	public static readonly RULE_rename_end = 22;
	public static readonly RULE_value_is = 23;
	public static readonly RULE_value_is_definition = 24;
	public static readonly RULE_value_is_definition_part = 25;
	public static readonly RULE_value_is_definition_thru = 26;
	public static readonly RULE_external_name = 27;
	public static readonly RULE_ref_data_name = 28;
	public static readonly RULE_value_is_literal = 29;
	public static readonly RULE_occurs = 30;
	public static readonly RULE_indexed_by = 31;
	public static readonly RULE_ind_name = 32;
	public static readonly RULE_key_is = 33;
	public static readonly RULE_key_name = 34;
	public static readonly RULE_times_definition = 35;
	public static readonly RULE_table_size = 36;
	public static readonly RULE_min_times = 37;
	public static readonly RULE_max_times = 38;
	public static readonly RULE_report_group_description_entry = 39;
	public static readonly RULE_report_group_data_description = 40;
	public static readonly RULE_report_group_data_description_clause = 41;
	public static readonly RULE_sign_is = 42;
	public static readonly RULE_sum = 43;
	public static readonly RULE_control_foot_name = 44;
	public static readonly RULE_detail_report_group_name = 45;
	public static readonly RULE_sum_name = 46;
	public static readonly RULE_source_name = 47;
	public static readonly RULE_column_number = 48;
	public static readonly RULE_type_is_definition = 49;
	public static readonly RULE_type_control_name = 50;
	public static readonly RULE_next_group_definition = 51;
	public static readonly RULE_line_num_definition = 52;
	public static readonly RULE_line_num = 53;
	public static readonly RULE_rd_clause = 54;
	public static readonly RULE_footing_line_rd = 55;
	public static readonly RULE_last_detail_line = 56;
	public static readonly RULE_first_detail_line = 57;
	public static readonly RULE_heading_line = 58;
	public static readonly RULE_page_size_rd = 59;
	public static readonly RULE_control_name = 60;
	public static readonly RULE_report_code = 61;
	public static readonly RULE_usage = 62;
	public static readonly RULE_usage_definition = 63;
	public static readonly RULE_picture = 64;
	public static readonly RULE_character_string = 65;
	public static readonly RULE_char_str_part = 66;
	public static readonly RULE_other_data_item = 67;
	public static readonly RULE_data_name = 68;
	public static readonly RULE_sd_clause = 69;
	public static readonly RULE_report_is = 70;
	public static readonly RULE_report_name = 71;
	public static readonly RULE_linage = 72;
	public static readonly RULE_bottom_lines = 73;
	public static readonly RULE_top_lines = 74;
	public static readonly RULE_footing_line = 75;
	public static readonly RULE_page_size = 76;
	public static readonly RULE_data_rec = 77;
	public static readonly RULE_rec_name = 78;
	public static readonly RULE_value_of_id = 79;
	public static readonly RULE_value_of_id_definition = 80;
	public static readonly RULE_label = 81;
	public static readonly RULE_record = 82;
	public static readonly RULE_record_definition = 83;
	public static readonly RULE_depending_item = 84;
	public static readonly RULE_shortest_rec = 85;
	public static readonly RULE_longest_rec = 86;
	public static readonly RULE_screen_description_entry = 87;
	public static readonly RULE_screen_name = 88;
	public static readonly RULE_screen_description_clause = 89;
	public static readonly RULE_scr_pic_using = 90;
	public static readonly RULE_scr_pic_from = 91;
	public static readonly RULE_scr_pic_to = 92;
	public static readonly RULE_nonnumeric_literal = 93;
	public static readonly RULE_src_number = 94;
	public static readonly RULE_color_num = 95;
	public static readonly RULE_identification_division = 96;
	public static readonly RULE_identification_division_paragraph = 97;
	public static readonly RULE_program_id = 98;
	public static readonly RULE_program_name = 99;
	public static readonly RULE_is_program = 100;
	public static readonly RULE_with_ident = 101;
	public static readonly RULE_ident_string = 102;
	public static readonly RULE_comment_entry = 103;
	public static readonly RULE_author = 104;
	public static readonly RULE_installation = 105;
	public static readonly RULE_date_written = 106;
	public static readonly RULE_date_compiled = 107;
	public static readonly RULE_security = 108;
	public static readonly RULE_options_ = 109;
	public static readonly RULE_arithmetic = 110;
	public static readonly RULE_environment_division = 111;
	public static readonly RULE_configuration_section = 112;
	public static readonly RULE_input_output_section = 113;
	public static readonly RULE_source_computer = 114;
	public static readonly RULE_computer_type = 115;
	public static readonly RULE_with_debugging = 116;
	public static readonly RULE_object_computer = 117;
	public static readonly RULE_memory_size = 118;
	public static readonly RULE_memory_size_amount = 119;
	public static readonly RULE_memory_size_unit = 120;
	public static readonly RULE_program_collating = 121;
	public static readonly RULE_alpha_name = 122;
	public static readonly RULE_segment_limit = 123;
	public static readonly RULE_segment_number = 124;
	public static readonly RULE_special_names = 125;
	public static readonly RULE_special_names_content = 126;
	public static readonly RULE_qualified_data_item = 127;
	public static readonly RULE_currency = 128;
	public static readonly RULE_currency_definition = 129;
	public static readonly RULE_literal_7 = 130;
	public static readonly RULE_literal_8 = 131;
	public static readonly RULE_class_ = 132;
	public static readonly RULE_class_name = 133;
	public static readonly RULE_user_class = 134;
	public static readonly RULE_symbolic_chars = 135;
	public static readonly RULE_symb_ch_definition = 136;
	public static readonly RULE_symb_ch_def_clause = 137;
	public static readonly RULE_symb_ch_def_in_alphabet = 138;
	public static readonly RULE_symbol_char = 139;
	public static readonly RULE_char_val = 140;
	public static readonly RULE_alphabet = 141;
	public static readonly RULE_alpha_value = 142;
	public static readonly RULE_user_alpha = 143;
	public static readonly RULE_first_literal = 144;
	public static readonly RULE_last_literal = 145;
	public static readonly RULE_same_literal = 146;
	public static readonly RULE_switch_ = 147;
	public static readonly RULE_switch_clause_on = 148;
	public static readonly RULE_switch_clause_off = 149;
	public static readonly RULE_cond_name = 150;
	public static readonly RULE_switch_name = 151;
	public static readonly RULE_switch_num = 152;
	public static readonly RULE_top_of_page_name = 153;
	public static readonly RULE_predefined_device = 154;
	public static readonly RULE_device_name = 155;
	public static readonly RULE_arg_env = 156;
	public static readonly RULE_arg_env_name = 157;
	public static readonly RULE_file_control = 158;
	public static readonly RULE_select = 159;
	public static readonly RULE_file_status = 160;
	public static readonly RULE_file_stat = 161;
	public static readonly RULE_record_key = 162;
	public static readonly RULE_record_key_definition = 163;
	public static readonly RULE_access_mode = 164;
	public static readonly RULE_reserve = 165;
	public static readonly RULE_reserve_num = 166;
	public static readonly RULE_record_delimiter = 167;
	public static readonly RULE_padding = 168;
	public static readonly RULE_pad_char = 169;
	public static readonly RULE_organization = 170;
	public static readonly RULE_lock_mode = 171;
	public static readonly RULE_lock_mode_definition = 172;
	public static readonly RULE_code_set = 173;
	public static readonly RULE_block_contains = 174;
	public static readonly RULE_smallest_block = 175;
	public static readonly RULE_blocksize = 176;
	public static readonly RULE_assign_to = 177;
	public static readonly RULE_assign_to_definition = 178;
	public static readonly RULE_file_spec = 179;
	public static readonly RULE_file_name = 180;
	public static readonly RULE_i_o_control = 181;
	public static readonly RULE_multiple_file = 182;
	public static readonly RULE_multiple_file_definition = 183;
	public static readonly RULE_multiple_file_name = 184;
	public static readonly RULE_pos_integer = 185;
	public static readonly RULE_rerun = 186;
	public static readonly RULE_rerun_definition = 187;
	public static readonly RULE_clock_count = 188;
	public static readonly RULE_condition_name = 189;
	public static readonly RULE_rerun_def_file = 190;
	public static readonly RULE_rec_count = 191;
	public static readonly RULE_same = 192;
	public static readonly RULE_same_area_file = 193;
	public static readonly RULE_apply = 194;
	public static readonly RULE_apply_definition = 195;
	public static readonly RULE_window_ptrs = 196;
	public static readonly RULE_preall_amt = 197;
	public static readonly RULE_extend_amt = 198;
	public static readonly RULE_arithmetic_expression = 199;
	public static readonly RULE_binary_arithmetic_operator = 200;
	public static readonly RULE_unary_arithmetic_operator = 201;
	public static readonly RULE_identifier = 202;
	public static readonly RULE_arguments = 203;
	public static readonly RULE_subscripting = 204;
	public static readonly RULE_reference_modification = 205;
	public static readonly RULE_leftmost_character_position = 206;
	public static readonly RULE_length = 207;
	public static readonly RULE_function_name = 208;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"cobol_source", "separator", "arithmetic_separator", "line_comment", "program", 
		"procedure_division", "data_division", "file_section", "working_storage_section", 
		"linkage_section", "report_section", "screen_section", "file_description_entry", 
		"sort_merge_file_description_entry", "report_description_entry", "fd_clause", 
		"record_description_entry", "data_description_entry", "level_number", 
		"data_description_clause", "renames", "rename_start", "rename_end", "value_is", 
		"value_is_definition", "value_is_definition_part", "value_is_definition_thru", 
		"external_name", "ref_data_name", "value_is_literal", "occurs", "indexed_by", 
		"ind_name", "key_is", "key_name", "times_definition", "table_size", "min_times", 
		"max_times", "report_group_description_entry", "report_group_data_description", 
		"report_group_data_description_clause", "sign_is", "sum", "control_foot_name", 
		"detail_report_group_name", "sum_name", "source_name", "column_number", 
		"type_is_definition", "type_control_name", "next_group_definition", "line_num_definition", 
		"line_num", "rd_clause", "footing_line_rd", "last_detail_line", "first_detail_line", 
		"heading_line", "page_size_rd", "control_name", "report_code", "usage", 
		"usage_definition", "picture", "character_string", "char_str_part", "other_data_item", 
		"data_name", "sd_clause", "report_is", "report_name", "linage", "bottom_lines", 
		"top_lines", "footing_line", "page_size", "data_rec", "rec_name", "value_of_id", 
		"value_of_id_definition", "label", "record", "record_definition", "depending_item", 
		"shortest_rec", "longest_rec", "screen_description_entry", "screen_name", 
		"screen_description_clause", "scr_pic_using", "scr_pic_from", "scr_pic_to", 
		"nonnumeric_literal", "src_number", "color_num", "identification_division", 
		"identification_division_paragraph", "program_id", "program_name", "is_program", 
		"with_ident", "ident_string", "comment_entry", "author", "installation", 
		"date_written", "date_compiled", "security", "options_", "arithmetic", 
		"environment_division", "configuration_section", "input_output_section", 
		"source_computer", "computer_type", "with_debugging", "object_computer", 
		"memory_size", "memory_size_amount", "memory_size_unit", "program_collating", 
		"alpha_name", "segment_limit", "segment_number", "special_names", "special_names_content", 
		"qualified_data_item", "currency", "currency_definition", "literal_7", 
		"literal_8", "class_", "class_name", "user_class", "symbolic_chars", "symb_ch_definition", 
		"symb_ch_def_clause", "symb_ch_def_in_alphabet", "symbol_char", "char_val", 
		"alphabet", "alpha_value", "user_alpha", "first_literal", "last_literal", 
		"same_literal", "switch_", "switch_clause_on", "switch_clause_off", "cond_name", 
		"switch_name", "switch_num", "top_of_page_name", "predefined_device", 
		"device_name", "arg_env", "arg_env_name", "file_control", "select", "file_status", 
		"file_stat", "record_key", "record_key_definition", "access_mode", "reserve", 
		"reserve_num", "record_delimiter", "padding", "pad_char", "organization", 
		"lock_mode", "lock_mode_definition", "code_set", "block_contains", "smallest_block", 
		"blocksize", "assign_to", "assign_to_definition", "file_spec", "file_name", 
		"i_o_control", "multiple_file", "multiple_file_definition", "multiple_file_name", 
		"pos_integer", "rerun", "rerun_definition", "clock_count", "condition_name", 
		"rerun_def_file", "rec_count", "same", "same_area_file", "apply", "apply_definition", 
		"window_ptrs", "preall_amt", "extend_amt", "arithmetic_expression", "binary_arithmetic_operator", 
		"unary_arithmetic_operator", "identifier", "arguments", "subscripting", 
		"reference_modification", "leftmost_character_position", "length", "function_name",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"'!'", "'_'", "'+'", "'-'", undefined, undefined, "','", "';'", "':'", 
		"'='", "'<'", "'<='", "'>='", "'>'", "'('", "')'", "'['", "']'", "'^'", 
		"'@'", "'.'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ACCEPT", "ACCESS", "ADD", "ALL", "ALPHA", "ALPHABET", "ALSO", 
		"ALTER", "ALTERNATE", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", 
		"ARGUMENT_VALUE", "ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", 
		"AUTHOR", "AUTO", "AUTOMATIC", "BACKGROUND_COLOR", "BELL", "BINARY", "BINARY_CHAR", 
		"BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", "BLANK", "BLINK", "BLOCK", 
		"BOTTOM", "BY", "C01", "CALL", "CANCEL", "CARD_READER", "CF", "CH", "CHARACTER", 
		"CHARACTERS", "CLASS", "CLOCK_UNITS", "CLOSE", "CODE", "CODE_SET", "COLLATING", 
		"COLUMN", "COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", 
		"COMPUTATIONAL_2", "COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", 
		"COMPUTATIONAL_X", "COMPUTE", "COMP_1", "COMP_2", "COMP_3", "COMP_4", 
		"COMP_5", "COMP_X", "CONFIGURATION", "CONSOLE", "CONTAINS", "CONTIGUOUS", 
		"CONTIGUOUS_BEST_TRY", "CONTINUE", "CONTROL", "CONTROLS", "CONVERTING", 
		"COPY", "CRT", "CURRENCY", "CURSOR", "DATA", "DATE", "DATE_COMPILED", 
		"DATE_WRITTEN", "DAY", "DAY_OF_WEEK", "DE", "DEBUGGING", "DECIMAL_POINT", 
		"DEFERRED_WRITE", "DELETE", "DELIMITER", "DEPENDING", "DESCENDING", "DETAIL", 
		"DISK", "DISPLAY", "DIVIDE", "DIVISION", "DOWN", "DUPLICATES", "DYNAMIC", 
		"EBCDIC", "END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", "END_DELETE", 
		"END_DIVIDE", "END_EVALUATE", "END_IF", "END_MULTIPLY", "END_OF_PAGE", 
		"END_PERFORM", "END_READ", "END_RETURN", "END_REWRITE", "END_SEARCH", 
		"END_START", "END_STRING", "END_SUBTRACT", "END_UNSTRING", "END_WRITE", 
		"ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", "EOL", "EOS", 
		"ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", "EXCLUSIVE", "EXIT", 
		"EXTENSION", "EXTERNAL", "FD", "FILE", "FILE_CONTROL", "FILE_ID", "FILLER", 
		"FILL_SIZE", "FINAL", "FIRST", "FLOAT_EXTENDED", "FLOAT_LONG", "FLOAT_SHORT", 
		"FOOTING", "FOR", "FOREGROUND_COLOR", "FROM", "FULL", "FUNCTION", "GENERATE", 
		"GLOBAL", "GO", "GROUP", "HEADING", "HIGHLIGHT", "I64", "ID", "IDENT", 
		"IDENTIFICATION_IN_A_AREA", "IF", "IN", "INDEX", "INDEXED", "INDICATE", 
		"INITIAL", "INITIALIZE", "INITIATE", "INPUT_OUTPUT", "INSPECT", "INSTALLATION", 
		"INVALID", "IS", "I_O_CONTROL", "JUST", "JUSTIFIED", "KEY", "LABEL", "LAST", 
		"LEADING", "LEFT", "LIMIT", "LIMITS", "LINAGE", "LINE", "LINES", "LINE_PRINTER", 
		"LINKAGE", "LOCK", "LOCK_HOLDING", "LOWLIGHT", "MANUAL", "MASS_INSERT", 
		"MEMORY", "MERGE", "MODE", "MODULES", "MOVE", "MULTIPLE", "MULTIPLY", 
		"NATIVE", "NEXT", "NOT", "NUMBER", "OBJECT_COMPUTER", "OCCURS", "OF", 
		"OFF", "OMITTED", "ON", "OPEN", "OPTIONAL", "OPTIONS", "ORGANIZATION", 
		"OVERFLOW", "PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", "PAPER_TAPE_READER", 
		"PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", "POINTER", "POINTER_64", 
		"POSITION", "PREALLOCATION", "PRINTER", "PRINT_CONTROL", "PROCEDURE", 
		"PROGRAM", "PROGRAM_ID", "RANDOM", "RD", "READ", "RECORD", "RECORDS", 
		"REDEFINES", "REEL", "REFERENCE", "RELATIVE", "RELEASE", "RENAMES", "REPLACE", 
		"REPLACING", "REPORT", "REPORTS", "REQUIRED", "RERUN", "RESERVE", "RESET", 
		"RETURN", "REVERSE_VIDEO", "REWRITE", "RF", "RH", "RIGHT", "ROLLBACK", 
		"SAME", "SCREEN", "SD", "SEARCH", "SECTION", "SECURE", "SECURITY", "SEGMENT_LIMIT", 
		"SELECT", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SIGN", "SIGNED", 
		"SIZE", "SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", "SPECIAL_NAMES", 
		"STANDARD", "STANDARD_1", "STANDARD_2", "START", "STATUS", "STOP", "STRING", 
		"SUBTRACT", "SUM", "SUPPRESS", "SWITCH", "SYMBOL", "SYMBOLIC", "SYNC", 
		"SYNCHRONIZED", "SYSERR", "SYSIN", "SYSOUT", "TALLYING", "TAPE", "TERMINATE", 
		"THROUGH", "THRU", "TIME", "TIMES", "TO", "TOP", "TRAILING", "TRUE", "TYPE", 
		"UNDERLINE", "UNIT", "UNLOCK", "UNSIGNED", "UNSTRING", "UP", "UPON", "USAGE", 
		"USE", "USING", "VALUE", "VALUES", "VARYING", "VAX", "WHEN", "WINDOW", 
		"WITH", "WORDS", "WORKING_STORAGE", "WRITE", "ZERO", "ZEROES", "ZEROS", 
		"START_SLASH_", "START_STAR_", "EXCLAM_", "UNDER_", "PLUS_", "MINUS_", 
		"STAR_", "SLASH_", "COMMA_", "SEMI_", "COLON_", "EQUAL_", "LT_", "LE_", 
		"GE_", "GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", "POINTER_", 
		"ATP_", "DOT_", "LCURLY_", "RCURLY_", "STRING_LITERAL", "NUMERIC_LITERAL", 
		"HEX_LITERAL", "USER_DEFINED_WORD", "START_FOUR_SPACES", "WHITESPACE", 
		"NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(cobolParser._LITERAL_NAMES, cobolParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return cobolParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "cobol.g4"; }

	// @Override
	public get ruleNames(): string[] { return cobolParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return cobolParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(cobolParser._ATN, this);
	}
	// @RuleVersion(0)
	public cobol_source(): Cobol_sourceContext {
		let _localctx: Cobol_sourceContext = new Cobol_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, cobolParser.RULE_cobol_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 422;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IDENTIFICATION_IN_A_AREA || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				this.state = 420;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.IDENTIFICATION_IN_A_AREA:
					{
					this.state = 418;
					this.program();
					}
					break;
				case cobolParser.START_SLASH_:
				case cobolParser.START_STAR_:
				case cobolParser.COMMA_:
				case cobolParser.SEMI_:
				case cobolParser.START_FOUR_SPACES:
				case cobolParser.WHITESPACE:
				case cobolParser.NEWLINE:
					{
					this.state = 419;
					this.separator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 425;
			this.match(cobolParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public separator(): SeparatorContext {
		let _localctx: SeparatorContext = new SeparatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, cobolParser.RULE_separator);
		try {
			this.state = 433;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 427;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 428;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 429;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.COMMA_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 430;
				this.match(cobolParser.COMMA_);
				}
				break;
			case cobolParser.SEMI_:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 431;
				this.match(cobolParser.SEMI_);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 432;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic_separator(): Arithmetic_separatorContext {
		let _localctx: Arithmetic_separatorContext = new Arithmetic_separatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, cobolParser.RULE_arithmetic_separator);
		try {
			this.state = 439;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 435;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 436;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 437;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 438;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_comment(): Line_commentContext {
		let _localctx: Line_commentContext = new Line_commentContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, cobolParser.RULE_line_comment);
		let _la: number;
		try {
			this.state = 457;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_SLASH_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 441;
				this.match(cobolParser.START_SLASH_);
				this.state = 445;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
					{
					{
					this.state = 442;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 447;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 448;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 449;
				this.match(cobolParser.START_STAR_);
				this.state = 453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
					{
					{
					this.state = 450;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 455;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 456;
				this.match(cobolParser.NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, cobolParser.RULE_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 459;
			this.identification_division();
			this.state = 461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ENVIRONMENT) {
				{
				this.state = 460;
				this.environment_division();
				}
			}

			this.state = 464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATA) {
				{
				this.state = 463;
				this.data_division();
				}
			}

			this.state = 467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROCEDURE) {
				{
				this.state = 466;
				this.procedure_division();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division(): Procedure_divisionContext {
		let _localctx: Procedure_divisionContext = new Procedure_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, cobolParser.RULE_procedure_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 469;
			this.match(cobolParser.PROCEDURE);
			this.state = 471;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 470;
				this.separator();
				}
				}
				this.state = 473;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 475;
			this.match(cobolParser.DIVISION);
			this.state = 479;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 476;
				this.separator();
				}
				}
				this.state = 481;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 482;
			this.match(cobolParser.DOT_);
			this.state = 486;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 483;
					this.separator();
					}
					}
				}
				this.state = 488;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
			}
			this.state = 501;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 499;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.FUNCTION:
					case cobolParser.ZERO:
					case cobolParser.ZEROES:
					case cobolParser.ZEROS:
					case cobolParser.PLUS_:
					case cobolParser.MINUS_:
					case cobolParser.LPAREN_:
					case cobolParser.NUMERIC_LITERAL:
					case cobolParser.USER_DEFINED_WORD:
						{
						this.state = 489;
						this.arithmetic_expression(0);
						this.state = 493;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
							{
							{
							this.state = 490;
							this.separator();
							}
							}
							this.state = 495;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 496;
						this.match(cobolParser.DOT_);
						}
						break;
					case cobolParser.START_SLASH_:
					case cobolParser.START_STAR_:
					case cobolParser.COMMA_:
					case cobolParser.SEMI_:
					case cobolParser.START_FOUR_SPACES:
					case cobolParser.WHITESPACE:
					case cobolParser.NEWLINE:
						{
						this.state = 498;
						this.separator();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 503;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_division(): Data_divisionContext {
		let _localctx: Data_divisionContext = new Data_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, cobolParser.RULE_data_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 504;
			this.match(cobolParser.DATA);
			this.state = 506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 505;
				this.separator();
				}
				}
				this.state = 508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 510;
			this.match(cobolParser.DIVISION);
			this.state = 514;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 511;
				this.separator();
				}
				}
				this.state = 516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 517;
			this.match(cobolParser.DOT_);
			this.state = 521;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 518;
					this.separator();
					}
					}
				}
				this.state = 523;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
			}
			this.state = 531;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 524;
				this.file_section();
				this.state = 528;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 525;
						this.separator();
						}
						}
					}
					this.state = 530;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
				}
				}
			}

			this.state = 540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WORKING_STORAGE) {
				{
				this.state = 533;
				this.working_storage_section();
				this.state = 537;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 534;
						this.separator();
						}
						}
					}
					this.state = 539;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
				}
				}
			}

			this.state = 549;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINKAGE) {
				{
				this.state = 542;
				this.linkage_section();
				this.state = 546;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 543;
						this.separator();
						}
						}
					}
					this.state = 548;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
				}
				}
			}

			this.state = 558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REPORT) {
				{
				this.state = 551;
				this.report_section();
				this.state = 555;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 552;
						this.separator();
						}
						}
					}
					this.state = 557;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
				}
				}
			}

			this.state = 567;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SCREEN) {
				{
				this.state = 560;
				this.screen_section();
				this.state = 564;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 561;
						this.separator();
						}
						}
					}
					this.state = 566;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_section(): File_sectionContext {
		let _localctx: File_sectionContext = new File_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, cobolParser.RULE_file_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 569;
			this.match(cobolParser.FILE);
			this.state = 571;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 570;
				this.separator();
				}
				}
				this.state = 573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 575;
			this.match(cobolParser.SECTION);
			this.state = 579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 576;
				this.separator();
				}
				}
				this.state = 581;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 582;
			this.match(cobolParser.DOT_);
			this.state = 586;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 583;
					this.separator();
					}
					}
				}
				this.state = 588;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
			}
			this.state = 626;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.FD || _la === cobolParser.RD || _la === cobolParser.SD) {
				{
				{
				this.state = 616;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FD:
					{
					this.state = 589;
					this.file_description_entry();
					this.state = 599;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 593;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
								{
								{
								this.state = 590;
								this.separator();
								}
								}
								this.state = 595;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 596;
							this.record_description_entry();
							}
							}
						}
						this.state = 601;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
					}
					}
					break;
				case cobolParser.RD:
					{
					this.state = 602;
					this.report_description_entry();
					}
					break;
				case cobolParser.SD:
					{
					this.state = 603;
					this.sort_merge_file_description_entry();
					this.state = 613;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 607;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
								{
								{
								this.state = 604;
								this.separator();
								}
								}
								this.state = 609;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 610;
							this.record_description_entry();
							}
							}
						}
						this.state = 615;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 621;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 618;
						this.separator();
						}
						}
					}
					this.state = 623;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
				}
				}
				}
				this.state = 628;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public working_storage_section(): Working_storage_sectionContext {
		let _localctx: Working_storage_sectionContext = new Working_storage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, cobolParser.RULE_working_storage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 629;
			this.match(cobolParser.WORKING_STORAGE);
			this.state = 631;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 630;
				this.separator();
				}
				}
				this.state = 633;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 635;
			this.match(cobolParser.SECTION);
			this.state = 639;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 636;
				this.separator();
				}
				}
				this.state = 641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 642;
			this.match(cobolParser.DOT_);
			this.state = 646;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 643;
					this.separator();
					}
					}
				}
				this.state = 648;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
			}
			this.state = 658;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 649;
				this.record_description_entry();
				this.state = 653;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 650;
						this.separator();
						}
						}
					}
					this.state = 655;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
				}
				}
				}
				this.state = 660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linkage_section(): Linkage_sectionContext {
		let _localctx: Linkage_sectionContext = new Linkage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, cobolParser.RULE_linkage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 661;
			this.match(cobolParser.LINKAGE);
			this.state = 663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 662;
				this.separator();
				}
				}
				this.state = 665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 667;
			this.match(cobolParser.SECTION);
			this.state = 671;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 668;
				this.separator();
				}
				}
				this.state = 673;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 674;
			this.match(cobolParser.DOT_);
			this.state = 678;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 675;
					this.separator();
					}
					}
				}
				this.state = 680;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
			}
			this.state = 690;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 681;
				this.record_description_entry();
				this.state = 685;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 682;
						this.separator();
						}
						}
					}
					this.state = 687;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
				}
				}
				}
				this.state = 692;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_section(): Report_sectionContext {
		let _localctx: Report_sectionContext = new Report_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, cobolParser.RULE_report_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 693;
			this.match(cobolParser.REPORT);
			this.state = 695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 694;
				this.separator();
				}
				}
				this.state = 697;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 699;
			this.match(cobolParser.SECTION);
			this.state = 703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 700;
				this.separator();
				}
				}
				this.state = 705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 706;
			this.match(cobolParser.DOT_);
			this.state = 710;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 707;
					this.separator();
					}
					}
				}
				this.state = 712;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
			}
			this.state = 734;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.RD) {
				{
				{
				this.state = 713;
				this.report_description_entry();
				this.state = 723;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 717;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
							{
							{
							this.state = 714;
							this.separator();
							}
							}
							this.state = 719;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 720;
						this.report_group_description_entry();
						}
						}
					}
					this.state = 725;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
				}
				this.state = 729;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 54, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 726;
						this.separator();
						}
						}
					}
					this.state = 731;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 54, this._ctx);
				}
				}
				}
				this.state = 736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_section(): Screen_sectionContext {
		let _localctx: Screen_sectionContext = new Screen_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, cobolParser.RULE_screen_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 737;
			this.match(cobolParser.SCREEN);
			this.state = 739;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 738;
				this.separator();
				}
				}
				this.state = 741;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 743;
			this.match(cobolParser.SECTION);
			this.state = 747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 744;
				this.separator();
				}
				}
				this.state = 749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 750;
			this.match(cobolParser.DOT_);
			this.state = 754;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 751;
					this.separator();
					}
					}
				}
				this.state = 756;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
			}
			this.state = 766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 757;
				this.screen_description_entry();
				this.state = 761;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 758;
						this.separator();
						}
						}
					}
					this.state = 763;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
				}
				}
				}
				this.state = 768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_description_entry(): File_description_entryContext {
		let _localctx: File_description_entryContext = new File_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, cobolParser.RULE_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 769;
			this.match(cobolParser.FD);
			this.state = 771;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 770;
				this.separator();
				}
				}
				this.state = 773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 775;
			this.file_name();
			this.state = 779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 776;
				this.separator();
				}
				}
				this.state = 781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 791;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ACCESS || _la === cobolParser.ALTERNATE || _la === cobolParser.BLOCK || _la === cobolParser.CODE_SET || _la === cobolParser.DATA || _la === cobolParser.DYNAMIC || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (cobolParser.EXTERNAL - 138)) | (1 << (cobolParser.FILE - 138)) | (1 << (cobolParser.GLOBAL - 138)))) !== 0) || ((((_la - 178)) & ~0x1F) === 0 && ((1 << (_la - 178)) & ((1 << (cobolParser.IS - 178)) | (1 << (cobolParser.LABEL - 178)) | (1 << (cobolParser.LINAGE - 178)))) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (cobolParser.RANDOM - 241)) | (1 << (cobolParser.RECORD - 241)) | (1 << (cobolParser.REPORT - 241)) | (1 << (cobolParser.REPORTS - 241)))) !== 0) || _la === cobolParser.SEQUENTIAL || _la === cobolParser.STATUS || _la === cobolParser.VALUE) {
				{
				{
				this.state = 782;
				this.fd_clause();
				this.state = 786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 783;
					this.separator();
					}
					}
					this.state = 788;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 794;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext {
		let _localctx: Sort_merge_file_description_entryContext = new Sort_merge_file_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, cobolParser.RULE_sort_merge_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 796;
			this.match(cobolParser.SD);
			this.state = 798;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 797;
				this.separator();
				}
				}
				this.state = 800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 802;
			this.file_name();
			this.state = 806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 803;
				this.separator();
				}
				}
				this.state = 808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.DATA || _la === cobolParser.RECORD) {
				{
				{
				this.state = 809;
				this.sd_clause();
				this.state = 813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 810;
					this.separator();
					}
					}
					this.state = 815;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 821;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_description_entry(): Report_description_entryContext {
		let _localctx: Report_description_entryContext = new Report_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, cobolParser.RULE_report_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 823;
			this.match(cobolParser.RD);
			this.state = 825;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 824;
				this.separator();
				}
				}
				this.state = 827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 829;
			this.report_name();
			this.state = 833;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 830;
				this.separator();
				}
				}
				this.state = 835;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & ((1 << (cobolParser.CODE - 47)) | (1 << (cobolParser.CONTROL - 47)) | (1 << (cobolParser.CONTROLS - 47)))) !== 0) || _la === cobolParser.GLOBAL || _la === cobolParser.IS || _la === cobolParser.PAGE) {
				{
				{
				this.state = 836;
				this.rd_clause();
				this.state = 840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 837;
					this.separator();
					}
					}
					this.state = 842;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 848;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fd_clause(): Fd_clauseContext {
		let _localctx: Fd_clauseContext = new Fd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, cobolParser.RULE_fd_clause);
		let _la: number;
		try {
			this.state = 879;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 77, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 850;
					this.match(cobolParser.IS);
					this.state = 852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 851;
						this.separator();
						}
						}
						this.state = 854;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 858;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 859;
					this.match(cobolParser.IS);
					this.state = 861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 860;
						this.separator();
						}
						}
						this.state = 863;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 867;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 868;
				this.block_contains();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 869;
				this.record();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 870;
				this.label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 871;
				this.value_of_id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 872;
				this.data_rec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 873;
				this.linage();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 874;
				this.report_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 875;
				this.code_set();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 876;
				this.access_mode();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 877;
				this.record_key();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 878;
				this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_description_entry(): Record_description_entryContext {
		let _localctx: Record_description_entryContext = new Record_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, cobolParser.RULE_record_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 881;
			this.data_description_entry();
			this.state = 891;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 885;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 882;
						this.separator();
						}
						}
						this.state = 887;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 888;
					this.data_description_entry();
					}
					}
				}
				this.state = 893;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_entry(): Data_description_entryContext {
		let _localctx: Data_description_entryContext = new Data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, cobolParser.RULE_data_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 894;
			this.level_number();
			this.state = 904;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 82, this._ctx) ) {
			case 1:
				{
				this.state = 896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 895;
					this.separator();
					}
					}
					this.state = 898;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 902;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 900;
					this.data_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 901;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 919;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 85, this._ctx) ) {
			case 1:
				{
				this.state = 907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 906;
					this.separator();
					}
					}
					this.state = 909;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 911;
				this.match(cobolParser.REDEFINES);
				this.state = 913;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 912;
					this.separator();
					}
					}
					this.state = 915;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 917;
				this.other_data_item();
				}
				break;
			}
			this.state = 930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 921;
					this.separator();
					}
					}
					this.state = 924;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 926;
				this.data_description_clause();
				}
				}
				this.state = 932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 933;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public level_number(): Level_numberContext {
		let _localctx: Level_numberContext = new Level_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, cobolParser.RULE_level_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 935;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_clause(): Data_description_clauseContext {
		let _localctx: Data_description_clauseContext = new Data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, cobolParser.RULE_data_description_clause);
		let _la: number;
		try {
			this.state = 997;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 99, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 937;
					this.match(cobolParser.IS);
					this.state = 939;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 938;
						this.separator();
						}
						}
						this.state = 941;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 945;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 952;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 946;
					this.match(cobolParser.IS);
					this.state = 948;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 947;
						this.separator();
						}
						}
						this.state = 950;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 954;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 955;
				this.picture();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 956;
				this.usage();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 957;
				this.sign_is();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 958;
				this.occurs();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 959;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.SYNC || _la === cobolParser.SYNCHRONIZED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 967;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
				case 1:
					{
					this.state = 961;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 960;
						this.separator();
						}
						}
						this.state = 963;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 965;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LEFT || _la === cobolParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 969;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 977;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
				case 1:
					{
					this.state = 971;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 970;
						this.separator();
						}
						}
						this.state = 973;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 975;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 979;
				this.match(cobolParser.BLANK);
				this.state = 981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 980;
					this.separator();
					}
					}
					this.state = 983;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 985;
					this.match(cobolParser.WHEN);
					this.state = 987;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 986;
						this.separator();
						}
						}
						this.state = 989;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 993;
				this.match(cobolParser.ZERO);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 995;
				this.value_is();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 996;
				this.renames();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renames(): RenamesContext {
		let _localctx: RenamesContext = new RenamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, cobolParser.RULE_renames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 999;
			this.match(cobolParser.RENAMES);
			this.state = 1001;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1000;
				this.separator();
				}
				}
				this.state = 1003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 1005;
			this.rename_start();
			this.state = 1019;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				{
				this.state = 1007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1006;
					this.separator();
					}
					}
					this.state = 1009;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1011;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1012;
					this.separator();
					}
					}
					this.state = 1015;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1017;
				this.rename_end();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_start(): Rename_startContext {
		let _localctx: Rename_startContext = new Rename_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, cobolParser.RULE_rename_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1021;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_end(): Rename_endContext {
		let _localctx: Rename_endContext = new Rename_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, cobolParser.RULE_rename_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1023;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is(): Value_isContext {
		let _localctx: Value_isContext = new Value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, cobolParser.RULE_value_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1051;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.VALUE:
				{
				this.state = 1025;
				this.match(cobolParser.VALUE);
				this.state = 1027;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1026;
					this.separator();
					}
					}
					this.state = 1029;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1031;
					this.match(cobolParser.IS);
					this.state = 1033;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1032;
						this.separator();
						}
						}
						this.state = 1035;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				}
				break;
			case cobolParser.VALUES:
				{
				this.state = 1039;
				this.match(cobolParser.VALUES);
				this.state = 1041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1040;
					this.separator();
					}
					}
					this.state = 1043;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				{
				this.state = 1045;
				this.match(cobolParser.ARE);
				this.state = 1047;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1046;
					this.separator();
					}
					}
					this.state = 1049;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1053;
			this.value_is_definition();
			this.state = 1063;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1055;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1054;
						this.separator();
						}
						}
						this.state = 1057;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1059;
					this.value_is_definition();
					}
					}
				}
				this.state = 1065;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition(): Value_is_definitionContext {
		let _localctx: Value_is_definitionContext = new Value_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, cobolParser.RULE_value_is_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1066;
			this.value_is_definition_part();
			this.state = 1074;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 113, this._ctx) ) {
			case 1:
				{
				this.state = 1068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1067;
					this.separator();
					}
					}
					this.state = 1070;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1072;
				this.value_is_definition_thru();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_part(): Value_is_definition_partContext {
		let _localctx: Value_is_definition_partContext = new Value_is_definition_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, cobolParser.RULE_value_is_definition_part);
		let _la: number;
		try {
			this.state = 1093;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1076;
				this.value_is_literal();
				}
				break;
			case cobolParser.REFERENCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1077;
				this.match(cobolParser.REFERENCE);
				this.state = 1079;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1078;
					this.separator();
					}
					}
					this.state = 1081;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1083;
				this.ref_data_name();
				}
				break;
			case cobolParser.EXTERNAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1085;
				this.match(cobolParser.EXTERNAL);
				this.state = 1087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1086;
					this.separator();
					}
					}
					this.state = 1089;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1091;
				this.external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_thru(): Value_is_definition_thruContext {
		let _localctx: Value_is_definition_thruContext = new Value_is_definition_thruContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, cobolParser.RULE_value_is_definition_thru);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1095;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1096;
				this.separator();
				}
				}
				this.state = 1099;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 1101;
			this.value_is_definition_part();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public external_name(): External_nameContext {
		let _localctx: External_nameContext = new External_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, cobolParser.RULE_external_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1103;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ref_data_name(): Ref_data_nameContext {
		let _localctx: Ref_data_nameContext = new Ref_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, cobolParser.RULE_ref_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1105;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_literal(): Value_is_literalContext {
		let _localctx: Value_is_literalContext = new Value_is_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, cobolParser.RULE_value_is_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1107;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public occurs(): OccursContext {
		let _localctx: OccursContext = new OccursContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, cobolParser.RULE_occurs);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1109;
			this.match(cobolParser.OCCURS);
			this.state = 1111;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1110;
				this.separator();
				}
				}
				this.state = 1113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 1115;
			this.times_definition();
			this.state = 1125;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1117;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1116;
						this.separator();
						}
						}
						this.state = 1119;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1121;
					this.key_is();
					}
					}
				}
				this.state = 1127;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
			}
			this.state = 1135;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				{
				this.state = 1129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1128;
					this.separator();
					}
					}
					this.state = 1131;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1133;
				this.indexed_by();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexed_by(): Indexed_byContext {
		let _localctx: Indexed_byContext = new Indexed_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, cobolParser.RULE_indexed_by);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1137;
			this.match(cobolParser.INDEXED);
			this.state = 1139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1138;
				this.separator();
				}
				}
				this.state = 1141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 1149;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BY) {
				{
				this.state = 1143;
				this.match(cobolParser.BY);
				this.state = 1145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1144;
					this.separator();
					}
					}
					this.state = 1147;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 1151;
			this.ind_name();
			this.state = 1161;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 127, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1152;
						this.separator();
						}
						}
						this.state = 1155;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1157;
					this.ind_name();
					}
					}
				}
				this.state = 1163;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 127, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ind_name(): Ind_nameContext {
		let _localctx: Ind_nameContext = new Ind_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, cobolParser.RULE_ind_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1164;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_is(): Key_isContext {
		let _localctx: Key_isContext = new Key_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, cobolParser.RULE_key_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1166;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1167;
				this.separator();
				}
				}
				this.state = 1170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 1178;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 1172;
				this.match(cobolParser.KEY);
				this.state = 1174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1173;
					this.separator();
					}
					}
					this.state = 1176;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 1186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 1180;
				this.match(cobolParser.IS);
				this.state = 1182;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1181;
					this.separator();
					}
					}
					this.state = 1184;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 1188;
			this.key_name();
			this.state = 1198;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1190;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1189;
						this.separator();
						}
						}
						this.state = 1192;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1194;
					this.key_name();
					}
					}
				}
				this.state = 1200;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_name(): Key_nameContext {
		let _localctx: Key_nameContext = new Key_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, cobolParser.RULE_key_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1201;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public times_definition(): Times_definitionContext {
		let _localctx: Times_definitionContext = new Times_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, cobolParser.RULE_times_definition);
		let _la: number;
		try {
			this.state = 1251;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1203;
				this.table_size();
				this.state = 1205;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1204;
					this.separator();
					}
					}
					this.state = 1207;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1209;
				this.match(cobolParser.TIMES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1211;
				this.min_times();
				this.state = 1213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1212;
					this.separator();
					}
					}
					this.state = 1215;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1217;
				this.match(cobolParser.TO);
				this.state = 1219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1218;
					this.separator();
					}
					}
					this.state = 1221;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1223;
				this.max_times();
				this.state = 1225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1224;
					this.separator();
					}
					}
					this.state = 1227;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1229;
				this.match(cobolParser.TIMES);
				this.state = 1231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1230;
					this.separator();
					}
					}
					this.state = 1233;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1235;
				this.match(cobolParser.DEPENDING);
				this.state = 1237;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1236;
					this.separator();
					}
					}
					this.state = 1239;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 1241;
					this.match(cobolParser.ON);
					this.state = 1243;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1242;
						this.separator();
						}
						}
						this.state = 1245;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1249;
				this.depending_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_size(): Table_sizeContext {
		let _localctx: Table_sizeContext = new Table_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, cobolParser.RULE_table_size);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1253;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public min_times(): Min_timesContext {
		let _localctx: Min_timesContext = new Min_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, cobolParser.RULE_min_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1255;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public max_times(): Max_timesContext {
		let _localctx: Max_timesContext = new Max_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, cobolParser.RULE_max_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1257;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_description_entry(): Report_group_description_entryContext {
		let _localctx: Report_group_description_entryContext = new Report_group_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, cobolParser.RULE_report_group_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1259;
			this.report_group_data_description();
			this.state = 1269;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 145, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1263;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 1260;
						this.separator();
						}
						}
						this.state = 1265;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1266;
					this.report_group_data_description();
					}
					}
				}
				this.state = 1271;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 145, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description(): Report_group_data_descriptionContext {
		let _localctx: Report_group_data_descriptionContext = new Report_group_data_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, cobolParser.RULE_report_group_data_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1272;
			this.level_number();
			this.state = 1280;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 147, this._ctx) ) {
			case 1:
				{
				this.state = 1274;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1273;
					this.separator();
					}
					}
					this.state = 1276;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1278;
				this.data_name();
				}
				break;
			}
			this.state = 1291;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 1283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1282;
					this.separator();
					}
					}
					this.state = 1285;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1287;
				this.report_group_data_description_clause();
				}
				}
				this.state = 1293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1294;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description_clause(): Report_group_data_description_clauseContext {
		let _localctx: Report_group_data_description_clauseContext = new Report_group_data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, cobolParser.RULE_report_group_data_description_clause);
		let _la: number;
		try {
			this.state = 1470;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1296;
				this.match(cobolParser.LINE);
				this.state = 1298;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1297;
					this.separator();
					}
					}
					this.state = 1300;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 1302;
					this.match(cobolParser.NUMBER);
					this.state = 1304;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1303;
						this.separator();
						}
						}
						this.state = 1306;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1310;
					this.match(cobolParser.IS);
					this.state = 1312;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1311;
						this.separator();
						}
						}
						this.state = 1314;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1318;
				this.line_num_definition();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1320;
				this.match(cobolParser.NEXT);
				this.state = 1322;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1321;
					this.separator();
					}
					}
					this.state = 1324;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1326;
				this.match(cobolParser.GROUP);
				this.state = 1328;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1327;
					this.separator();
					}
					}
					this.state = 1330;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1332;
					this.match(cobolParser.IS);
					this.state = 1334;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1333;
						this.separator();
						}
						}
						this.state = 1336;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1340;
				this.next_group_definition();
				}
				break;
			case cobolParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1342;
				this.match(cobolParser.TYPE);
				this.state = 1344;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1343;
					this.separator();
					}
					}
					this.state = 1346;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1348;
					this.match(cobolParser.IS);
					this.state = 1350;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1349;
						this.separator();
						}
						}
						this.state = 1352;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1356;
				this.type_is_definition();
				}
				break;
			case cobolParser.DISPLAY:
			case cobolParser.USAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 1358;
					this.match(cobolParser.USAGE);
					this.state = 1360;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1359;
						this.separator();
						}
						}
						this.state = 1362;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1370;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 1364;
						this.match(cobolParser.IS);
						this.state = 1366;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1365;
							this.separator();
							}
							}
							this.state = 1368;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					}
				}

				this.state = 1374;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.BLANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1375;
				this.match(cobolParser.BLANK);
				this.state = 1377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1376;
					this.separator();
					}
					}
					this.state = 1379;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 1381;
					this.match(cobolParser.WHEN);
					this.state = 1383;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1382;
						this.separator();
						}
						}
						this.state = 1385;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1389;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.COLUMN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1391;
				this.match(cobolParser.COLUMN);
				this.state = 1393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1392;
					this.separator();
					}
					}
					this.state = 1395;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 1397;
					this.match(cobolParser.NUMBER);
					this.state = 1399;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1398;
						this.separator();
						}
						}
						this.state = 1401;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1405;
					this.match(cobolParser.IS);
					this.state = 1407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1406;
						this.separator();
						}
						}
						this.state = 1409;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1413;
				this.column_number();
				}
				break;
			case cobolParser.GROUP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1415;
				this.match(cobolParser.GROUP);
				this.state = 1423;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 175, this._ctx) ) {
				case 1:
					{
					this.state = 1417;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1416;
						this.separator();
						}
						}
						this.state = 1419;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1421;
					this.match(cobolParser.INDICATE);
					}
					break;
				}
				}
				break;
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1425;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1433;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 177, this._ctx) ) {
				case 1:
					{
					this.state = 1427;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1426;
						this.separator();
						}
						}
						this.state = 1429;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1431;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;
			case cobolParser.PIC:
			case cobolParser.PICTURE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1435;
				this.picture();
				}
				break;
			case cobolParser.LEADING:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1436;
				this.sign_is();
				}
				break;
			case cobolParser.SOURCE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1437;
				this.match(cobolParser.SOURCE);
				this.state = 1439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1438;
					this.separator();
					}
					}
					this.state = 1441;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1443;
					this.match(cobolParser.IS);
					this.state = 1445;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1444;
						this.separator();
						}
						}
						this.state = 1447;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1451;
				this.source_name();
				}
				break;
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1453;
				this.match(cobolParser.VALUE);
				this.state = 1455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1454;
					this.separator();
					}
					}
					this.state = 1457;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1459;
					this.match(cobolParser.IS);
					this.state = 1461;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1460;
						this.separator();
						}
						}
						this.state = 1463;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1467;
				this.value_is_literal();
				}
				break;
			case cobolParser.SUM:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1469;
				this.sum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_is(): Sign_isContext {
		let _localctx: Sign_isContext = new Sign_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, cobolParser.RULE_sign_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1487;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 1472;
				this.match(cobolParser.SIGN);
				this.state = 1480;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 186, this._ctx) ) {
				case 1:
					{
					this.state = 1474;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1473;
						this.separator();
						}
						}
						this.state = 1476;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1478;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 1483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1482;
					this.separator();
					}
					}
					this.state = 1485;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 1489;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1503;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				{
				this.state = 1491;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1490;
					this.separator();
					}
					}
					this.state = 1493;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1495;
				this.match(cobolParser.SEPARATE);
				{
				this.state = 1497;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1496;
					this.separator();
					}
					}
					this.state = 1499;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1501;
				this.match(cobolParser.CHARACTER);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum(): SumContext {
		let _localctx: SumContext = new SumContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, cobolParser.RULE_sum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1505;
				this.match(cobolParser.SUM);
				this.state = 1507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1506;
					this.separator();
					}
					}
					this.state = 1509;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1511;
				this.sum_name();
				this.state = 1521;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 194, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1513;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1512;
							this.separator();
							}
							}
							this.state = 1515;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 1517;
						this.sum_name();
						}
						}
					}
					this.state = 1523;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 194, this._ctx);
				}
				this.state = 1531;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 196, this._ctx) ) {
				case 1:
					{
					this.state = 1525;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1524;
						this.separator();
						}
						}
						this.state = 1527;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1529;
					this.match(cobolParser.UPON);
					}
					break;
				}
				this.state = 1542;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1534;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1533;
							this.separator();
							}
							}
							this.state = 1536;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 1538;
						this.detail_report_group_name();
						}
						}
					}
					this.state = 1544;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
				}
				}
				}
				this.state = 1547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.SUM);
			this.state = 1569;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 203, this._ctx) ) {
			case 1:
				{
				this.state = 1552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 1549;
					this.separator();
					}
					}
					this.state = 1554;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1555;
				this.match(cobolParser.RESET);
				this.state = 1557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1556;
					this.separator();
					}
					}
					this.state = 1559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				{
				this.state = 1561;
				this.match(cobolParser.ON);
				this.state = 1563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1562;
					this.separator();
					}
					}
					this.state = 1565;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				this.state = 1567;
				this.control_foot_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_foot_name(): Control_foot_nameContext {
		let _localctx: Control_foot_nameContext = new Control_foot_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, cobolParser.RULE_control_foot_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1571;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public detail_report_group_name(): Detail_report_group_nameContext {
		let _localctx: Detail_report_group_nameContext = new Detail_report_group_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, cobolParser.RULE_detail_report_group_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1573;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum_name(): Sum_nameContext {
		let _localctx: Sum_nameContext = new Sum_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, cobolParser.RULE_sum_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1575;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_name(): Source_nameContext {
		let _localctx: Source_nameContext = new Source_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, cobolParser.RULE_source_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1577;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_number(): Column_numberContext {
		let _localctx: Column_numberContext = new Column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, cobolParser.RULE_column_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1579;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_is_definition(): Type_is_definitionContext {
		let _localctx: Type_is_definitionContext = new Type_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, cobolParser.RULE_type_is_definition);
		let _la: number;
		try {
			this.state = 1655;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1581;
				this.match(cobolParser.REPORT);
				this.state = 1583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1582;
					this.separator();
					}
					}
					this.state = 1585;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1587;
				this.match(cobolParser.HEADING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1589;
				this.match(cobolParser.RH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1590;
				this.match(cobolParser.PAGE);
				this.state = 1592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1591;
					this.separator();
					}
					}
					this.state = 1594;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1596;
				this.match(cobolParser.HEADING);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1598;
				this.match(cobolParser.PH);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1608;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 1599;
					this.match(cobolParser.CONTROL);
					this.state = 1601;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1600;
						this.separator();
						}
						}
						this.state = 1603;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1605;
					this.match(cobolParser.HEADING);
					}
					break;
				case cobolParser.CH:
					{
					this.state = 1607;
					this.match(cobolParser.CH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1611;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1610;
					this.separator();
					}
					}
					this.state = 1613;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1615;
				this.type_control_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1617;
				this.match(cobolParser.DETAIL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1618;
				this.match(cobolParser.DE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1628;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 1619;
					this.match(cobolParser.CONTROL);
					this.state = 1621;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1620;
						this.separator();
						}
						}
						this.state = 1623;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1625;
					this.match(cobolParser.FOOTING);
					}
					break;
				case cobolParser.CF:
					{
					this.state = 1627;
					this.match(cobolParser.CF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1630;
					this.separator();
					}
					}
					this.state = 1633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1635;
				this.type_control_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1637;
				this.match(cobolParser.PAGE);
				this.state = 1639;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1638;
					this.separator();
					}
					}
					this.state = 1641;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1643;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1645;
				this.match(cobolParser.PF);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1646;
				this.match(cobolParser.REPORT);
				this.state = 1648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1647;
					this.separator();
					}
					}
					this.state = 1650;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1652;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1654;
				this.match(cobolParser.RF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_control_name(): Type_control_nameContext {
		let _localctx: Type_control_nameContext = new Type_control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, cobolParser.RULE_type_control_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1657;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public next_group_definition(): Next_group_definitionContext {
		let _localctx: Next_group_definitionContext = new Next_group_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, cobolParser.RULE_next_group_definition);
		let _la: number;
		try {
			this.state = 1676;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1659;
				this.line_num();
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1660;
				this.match(cobolParser.PLUS);
				this.state = 1662;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1661;
					this.separator();
					}
					}
					this.state = 1664;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1666;
				this.line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1668;
				this.match(cobolParser.NEXT);
				this.state = 1670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1669;
					this.separator();
					}
					}
					this.state = 1672;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1674;
				this.match(cobolParser.PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num_definition(): Line_num_definitionContext {
		let _localctx: Line_num_definitionContext = new Line_num_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, cobolParser.RULE_line_num_definition);
		let _la: number;
		try {
			this.state = 1710;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1678;
				this.line_num();
				this.state = 1700;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 222, this._ctx) ) {
				case 1:
					{
					this.state = 1680;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1679;
						this.separator();
						}
						}
						this.state = 1682;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1690;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 1684;
						this.match(cobolParser.ON);
						this.state = 1686;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1685;
							this.separator();
							}
							}
							this.state = 1688;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					this.state = 1692;
					this.match(cobolParser.NEXT);
					this.state = 1694;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1693;
						this.separator();
						}
						}
						this.state = 1696;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1698;
					this.match(cobolParser.PAGE);
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1702;
				this.match(cobolParser.PLUS);
				this.state = 1704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1703;
					this.separator();
					}
					}
					this.state = 1706;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1708;
				this.line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num(): Line_numContext {
		let _localctx: Line_numContext = new Line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, cobolParser.RULE_line_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1712;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rd_clause(): Rd_clauseContext {
		let _localctx: Rd_clauseContext = new Rd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, cobolParser.RULE_rd_clause);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1904;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.GLOBAL:
			case cobolParser.IS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1714;
					this.match(cobolParser.IS);
					this.state = 1716;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1715;
						this.separator();
						}
						}
						this.state = 1718;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 1722;
				this.match(cobolParser.GLOBAL);
				}
				break;
			case cobolParser.CODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1723;
				this.match(cobolParser.CODE);
				this.state = 1725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1724;
					this.separator();
					}
					}
					this.state = 1727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1729;
				this.report_code();
				}
				break;
			case cobolParser.CONTROL:
			case cobolParser.CONTROLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1751;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 1731;
					this.match(cobolParser.CONTROL);
					this.state = 1739;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
					case 1:
						{
						this.state = 1733;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1732;
							this.separator();
							}
							}
							this.state = 1735;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 1737;
						this.match(cobolParser.IS);
						}
						break;
					}
					}
					break;
				case cobolParser.CONTROLS:
					{
					this.state = 1741;
					this.match(cobolParser.CONTROLS);
					this.state = 1749;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
					case 1:
						{
						this.state = 1743;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1742;
							this.separator();
							}
							}
							this.state = 1745;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 1747;
						this.match(cobolParser.ARE);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1754;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1753;
					this.separator();
					}
					}
					this.state = 1756;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1784;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 1758;
					this.control_name();
					this.state = 1768;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1762;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
								{
								{
								this.state = 1759;
								this.separator();
								}
								}
								this.state = 1764;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 1765;
							this.control_name();
							}
							}
						}
						this.state = 1770;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
					}
					}
					break;
				case cobolParser.FINAL:
					{
					this.state = 1771;
					this.match(cobolParser.FINAL);
					this.state = 1781;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1775;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
								{
								{
								this.state = 1772;
								this.separator();
								}
								}
								this.state = 1777;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 1778;
							this.control_name();
							}
							}
						}
						this.state = 1783;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1786;
				this.match(cobolParser.PAGE);
				this.state = 1788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1787;
					this.separator();
					}
					}
					this.state = 1790;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 1820;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LIMIT:
					{
					this.state = 1792;
					this.match(cobolParser.LIMIT);
					this.state = 1794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1793;
						this.separator();
						}
						}
						this.state = 1796;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 1798;
						this.match(cobolParser.IS);
						this.state = 1800;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1799;
							this.separator();
							}
							}
							this.state = 1802;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.LIMITS:
					{
					this.state = 1806;
					this.match(cobolParser.LIMITS);
					this.state = 1808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1807;
						this.separator();
						}
						}
						this.state = 1810;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1818;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ARE) {
						{
						this.state = 1812;
						this.match(cobolParser.ARE);
						this.state = 1814;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1813;
							this.separator();
							}
							}
							this.state = 1816;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.NUMERIC_LITERAL:
					break;
				default:
					break;
				}
				this.state = 1822;
				this.page_size_rd();
				this.state = 1830;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 248, this._ctx) ) {
				case 1:
					{
					this.state = 1824;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1823;
						this.separator();
						}
						}
						this.state = 1826;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1828;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1845;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 251, this._ctx) ) {
				case 1:
					{
					this.state = 1833;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1832;
						this.separator();
						}
						}
						this.state = 1835;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1837;
					this.match(cobolParser.HEADING);
					this.state = 1839;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1838;
						this.separator();
						}
						}
						this.state = 1841;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1843;
					this.heading_line();
					}
					break;
				}
				this.state = 1866;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
				case 1:
					{
					this.state = 1848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1847;
						this.separator();
						}
						}
						this.state = 1850;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1852;
					this.match(cobolParser.FIRST);
					this.state = 1854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1853;
						this.separator();
						}
						}
						this.state = 1856;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1858;
					this.match(cobolParser.DETAIL);
					this.state = 1860;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1859;
						this.separator();
						}
						}
						this.state = 1862;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1864;
					this.first_detail_line();
					}
					break;
				}
				this.state = 1887;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
				case 1:
					{
					this.state = 1869;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1868;
						this.separator();
						}
						}
						this.state = 1871;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1873;
					this.match(cobolParser.LAST);
					this.state = 1875;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1874;
						this.separator();
						}
						}
						this.state = 1877;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1879;
					this.match(cobolParser.DETAIL);
					this.state = 1881;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1880;
						this.separator();
						}
						}
						this.state = 1883;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1885;
					this.last_detail_line();
					}
					break;
				}
				this.state = 1902;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 262, this._ctx) ) {
				case 1:
					{
					this.state = 1890;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1889;
						this.separator();
						}
						}
						this.state = 1892;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1894;
					this.match(cobolParser.FOOTING);
					this.state = 1896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1895;
						this.separator();
						}
						}
						this.state = 1898;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1900;
					this.footing_line_rd();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line_rd(): Footing_line_rdContext {
		let _localctx: Footing_line_rdContext = new Footing_line_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, cobolParser.RULE_footing_line_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1906;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_detail_line(): Last_detail_lineContext {
		let _localctx: Last_detail_lineContext = new Last_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, cobolParser.RULE_last_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1908;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_detail_line(): First_detail_lineContext {
		let _localctx: First_detail_lineContext = new First_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, cobolParser.RULE_first_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1910;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public heading_line(): Heading_lineContext {
		let _localctx: Heading_lineContext = new Heading_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, cobolParser.RULE_heading_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1912;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size_rd(): Page_size_rdContext {
		let _localctx: Page_size_rdContext = new Page_size_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, cobolParser.RULE_page_size_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1914;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_name(): Control_nameContext {
		let _localctx: Control_nameContext = new Control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, cobolParser.RULE_control_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1916;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_code(): Report_codeContext {
		let _localctx: Report_codeContext = new Report_codeContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, cobolParser.RULE_report_code);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1918;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage(): UsageContext {
		let _localctx: UsageContext = new UsageContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, cobolParser.RULE_usage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 1920;
				this.match(cobolParser.USAGE);
				this.state = 1928;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 265, this._ctx) ) {
				case 1:
					{
					this.state = 1922;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1921;
						this.separator();
						}
						}
						this.state = 1924;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1926;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 1931;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1930;
					this.separator();
					}
					}
					this.state = 1933;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 1937;
			this.usage_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage_definition(): Usage_definitionContext {
		let _localctx: Usage_definitionContext = new Usage_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, cobolParser.RULE_usage_definition);
		let _la: number;
		try {
			this.state = 2002;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1939;
				this.match(cobolParser.BINARY);
				}
				break;
			case cobolParser.BINARY_CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1940;
				this.match(cobolParser.BINARY_CHAR);
				this.state = 1948;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 269, this._ctx) ) {
				case 1:
					{
					this.state = 1942;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1941;
						this.separator();
						}
						}
						this.state = 1944;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1946;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_SHORT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1950;
				this.match(cobolParser.BINARY_SHORT);
				this.state = 1958;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 271, this._ctx) ) {
				case 1:
					{
					this.state = 1952;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1951;
						this.separator();
						}
						}
						this.state = 1954;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1956;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_LONG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1960;
				this.match(cobolParser.BINARY_LONG);
				this.state = 1968;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 273, this._ctx) ) {
				case 1:
					{
					this.state = 1962;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1961;
						this.separator();
						}
						}
						this.state = 1964;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1966;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_DOUBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1970;
				this.match(cobolParser.BINARY_DOUBLE);
				this.state = 1978;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 275, this._ctx) ) {
				case 1:
					{
					this.state = 1972;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1971;
						this.separator();
						}
						}
						this.state = 1974;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 1976;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.COMPUTATIONAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1980;
				this.match(cobolParser.COMPUTATIONAL);
				}
				break;
			case cobolParser.COMPUTATIONAL_1:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1981;
				this.match(cobolParser.COMPUTATIONAL_1);
				}
				break;
			case cobolParser.COMPUTATIONAL_2:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1982;
				this.match(cobolParser.COMPUTATIONAL_2);
				}
				break;
			case cobolParser.COMPUTATIONAL_3:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1983;
				this.match(cobolParser.COMPUTATIONAL_3);
				}
				break;
			case cobolParser.COMPUTATIONAL_4:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1984;
				this.match(cobolParser.COMPUTATIONAL_4);
				}
				break;
			case cobolParser.COMPUTATIONAL_5:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1985;
				this.match(cobolParser.COMPUTATIONAL_5);
				}
				break;
			case cobolParser.COMPUTATIONAL_X:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1986;
				this.match(cobolParser.COMPUTATIONAL_X);
				}
				break;
			case cobolParser.COMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1987;
				this.match(cobolParser.COMP);
				}
				break;
			case cobolParser.COMP_1:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1988;
				this.match(cobolParser.COMP_1);
				}
				break;
			case cobolParser.COMP_2:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1989;
				this.match(cobolParser.COMP_2);
				}
				break;
			case cobolParser.COMP_3:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1990;
				this.match(cobolParser.COMP_3);
				}
				break;
			case cobolParser.COMP_4:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1991;
				this.match(cobolParser.COMP_4);
				}
				break;
			case cobolParser.COMP_5:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1992;
				this.match(cobolParser.COMP_5);
				}
				break;
			case cobolParser.COMP_X:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1993;
				this.match(cobolParser.COMP_X);
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1994;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.FLOAT_SHORT:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1995;
				this.match(cobolParser.FLOAT_SHORT);
				}
				break;
			case cobolParser.FLOAT_LONG:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1996;
				this.match(cobolParser.FLOAT_LONG);
				}
				break;
			case cobolParser.FLOAT_EXTENDED:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1997;
				this.match(cobolParser.FLOAT_EXTENDED);
				}
				break;
			case cobolParser.INDEX:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1998;
				this.match(cobolParser.INDEX);
				}
				break;
			case cobolParser.PACKED_DECIMAL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1999;
				this.match(cobolParser.PACKED_DECIMAL);
				}
				break;
			case cobolParser.POINTER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 2000;
				this.match(cobolParser.POINTER);
				}
				break;
			case cobolParser.POINTER_64:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 2001;
				this.match(cobolParser.POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public picture(): PictureContext {
		let _localctx: PictureContext = new PictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, cobolParser.RULE_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2004;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PIC || _la === cobolParser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2006;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2005;
					this.separator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2008;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2016;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2010;
				this.match(cobolParser.IS);
				this.state = 2012;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2011;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2014;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 2018;
			this.character_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_string(): Character_stringContext {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, cobolParser.RULE_character_string);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2021;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2020;
					this.char_str_part();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2023;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_str_part(): Char_str_partContext {
		let _localctx: Char_str_partContext = new Char_str_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, cobolParser.RULE_char_str_part);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2025;
			_la = this._input.LA(1);
			if (!(((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (cobolParser.SLASH_ - 348)) | (1 << (cobolParser.COMMA_ - 348)) | (1 << (cobolParser.LPAREN_ - 348)) | (1 << (cobolParser.RPAREN_ - 348)) | (1 << (cobolParser.DOT_ - 348)) | (1 << (cobolParser.NUMERIC_LITERAL - 348)) | (1 << (cobolParser.USER_DEFINED_WORD - 348)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public other_data_item(): Other_data_itemContext {
		let _localctx: Other_data_itemContext = new Other_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, cobolParser.RULE_other_data_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2027;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_name(): Data_nameContext {
		let _localctx: Data_nameContext = new Data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, cobolParser.RULE_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2029;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sd_clause(): Sd_clauseContext {
		let _localctx: Sd_clauseContext = new Sd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, cobolParser.RULE_sd_clause);
		try {
			this.state = 2033;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2031;
				this.record();
				}
				break;
			case cobolParser.DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2032;
				this.data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_is(): Report_isContext {
		let _localctx: Report_isContext = new Report_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, cobolParser.RULE_report_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2055;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				{
				this.state = 2035;
				this.match(cobolParser.REPORT);
				this.state = 2043;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 283, this._ctx) ) {
				case 1:
					{
					this.state = 2037;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2036;
						this.separator();
						}
						}
						this.state = 2039;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2041;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.REPORTS:
				{
				this.state = 2045;
				this.match(cobolParser.REPORTS);
				this.state = 2053;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 285, this._ctx) ) {
				case 1:
					{
					this.state = 2047;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2046;
						this.separator();
						}
						}
						this.state = 2049;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2051;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2057;
				this.separator();
				}
				}
				this.state = 2060;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2062;
			this.report_name();
			this.state = 2072;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2066;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 2063;
						this.separator();
						}
						}
						this.state = 2068;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2069;
					this.report_name();
					}
					}
				}
				this.state = 2074;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_name(): Report_nameContext {
		let _localctx: Report_nameContext = new Report_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, cobolParser.RULE_report_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2075;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linage(): LinageContext {
		let _localctx: LinageContext = new LinageContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, cobolParser.RULE_linage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2077;
			this.match(cobolParser.LINAGE);
			this.state = 2079;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2078;
				this.separator();
				}
				}
				this.state = 2081;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2083;
				this.match(cobolParser.IS);
				this.state = 2085;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2084;
					this.separator();
					}
					}
					this.state = 2087;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 2091;
			this.page_size();
			this.state = 2099;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 294, this._ctx) ) {
			case 1:
				{
				this.state = 2093;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2092;
					this.separator();
					}
					}
					this.state = 2095;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2097;
				this.match(cobolParser.LINES);
				}
				break;
			}
			this.state = 2128;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 300, this._ctx) ) {
			case 1:
				{
				this.state = 2102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2101;
					this.separator();
					}
					}
					this.state = 2104;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2112;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2106;
					this.match(cobolParser.WITH);
					this.state = 2108;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2107;
						this.separator();
						}
						}
						this.state = 2110;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2114;
				this.match(cobolParser.FOOTING);
				this.state = 2116;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2115;
					this.separator();
					}
					}
					this.state = 2118;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				{
				this.state = 2120;
				this.match(cobolParser.AT);
				this.state = 2122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2121;
					this.separator();
					}
					}
					this.state = 2124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				this.state = 2126;
				this.footing_line();
				}
				break;
			}
			this.state = 2159;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 307, this._ctx) ) {
			case 1:
				{
				this.state = 2131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2130;
					this.separator();
					}
					}
					this.state = 2133;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 2135;
					this.match(cobolParser.LINES);
					this.state = 2137;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2136;
						this.separator();
						}
						}
						this.state = 2139;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2149;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 2143;
					this.match(cobolParser.AT);
					this.state = 2145;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2144;
						this.separator();
						}
						}
						this.state = 2147;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2151;
				this.match(cobolParser.TOP);
				this.state = 2153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2152;
					this.separator();
					}
					}
					this.state = 2155;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2157;
				this.top_lines();
				}
				break;
			}
			this.state = 2190;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 314, this._ctx) ) {
			case 1:
				{
				this.state = 2162;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2161;
					this.separator();
					}
					}
					this.state = 2164;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2172;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 2166;
					this.match(cobolParser.LINES);
					this.state = 2168;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2167;
						this.separator();
						}
						}
						this.state = 2170;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2180;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 2174;
					this.match(cobolParser.AT);
					this.state = 2176;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2175;
						this.separator();
						}
						}
						this.state = 2178;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2182;
				this.match(cobolParser.BOTTOM);
				this.state = 2184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2183;
					this.separator();
					}
					}
					this.state = 2186;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2188;
				this.bottom_lines();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bottom_lines(): Bottom_linesContext {
		let _localctx: Bottom_linesContext = new Bottom_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, cobolParser.RULE_bottom_lines);
		try {
			this.state = 2194;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2192;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2193;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_lines(): Top_linesContext {
		let _localctx: Top_linesContext = new Top_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, cobolParser.RULE_top_lines);
		try {
			this.state = 2198;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2196;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2197;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line(): Footing_lineContext {
		let _localctx: Footing_lineContext = new Footing_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, cobolParser.RULE_footing_line);
		try {
			this.state = 2202;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2200;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2201;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size(): Page_sizeContext {
		let _localctx: Page_sizeContext = new Page_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, cobolParser.RULE_page_size);
		try {
			this.state = 2206;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2204;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2205;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_rec(): Data_recContext {
		let _localctx: Data_recContext = new Data_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, cobolParser.RULE_data_rec);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2208;
			this.match(cobolParser.DATA);
			this.state = 2210;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2209;
				this.separator();
				}
				}
				this.state = 2212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2234;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 2214;
				this.match(cobolParser.RECORDS);
				this.state = 2222;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					this.state = 2216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2215;
						this.separator();
						}
						}
						this.state = 2218;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2220;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 2224;
				this.match(cobolParser.RECORD);
				this.state = 2232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					this.state = 2226;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2225;
						this.separator();
						}
						}
						this.state = 2228;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2230;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2236;
			this.rec_name();
			this.state = 2246;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2238;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2237;
						this.separator();
						}
						}
						this.state = 2240;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2242;
					this.rec_name();
					}
					}
				}
				this.state = 2248;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_name(): Rec_nameContext {
		let _localctx: Rec_nameContext = new Rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, cobolParser.RULE_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2249;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id(): Value_of_idContext {
		let _localctx: Value_of_idContext = new Value_of_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, cobolParser.RULE_value_of_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2251;
			this.match(cobolParser.VALUE);
			this.state = 2253;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2252;
				this.separator();
				}
				}
				this.state = 2255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2257;
			this.match(cobolParser.OF);
			this.state = 2259;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2258;
				this.separator();
				}
				}
				this.state = 2261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2263;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FILE_ID || _la === cobolParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2264;
				this.separator();
				}
				}
				this.state = 2267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			{
			this.state = 2269;
			this.match(cobolParser.IS);
			this.state = 2271;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2270;
				this.separator();
				}
				}
				this.state = 2273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			}
			this.state = 2275;
			this.value_of_id_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id_definition(): Value_of_id_definitionContext {
		let _localctx: Value_of_id_definitionContext = new Value_of_id_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, cobolParser.RULE_value_of_id_definition);
		try {
			this.state = 2279;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2277;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2278;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, cobolParser.RULE_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2281;
			this.match(cobolParser.LABEL);
			this.state = 2283;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2282;
				this.separator();
				}
				}
				this.state = 2285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2307;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 2287;
				this.match(cobolParser.RECORDS);
				this.state = 2295;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 334, this._ctx) ) {
				case 1:
					{
					this.state = 2289;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2288;
						this.separator();
						}
						}
						this.state = 2291;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2293;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 2297;
				this.match(cobolParser.RECORD);
				this.state = 2305;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
				case 1:
					{
					this.state = 2299;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2298;
						this.separator();
						}
						}
						this.state = 2301;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2303;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2310;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2309;
				this.separator();
				}
				}
				this.state = 2312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2314;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.OMITTED || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record(): RecordContext {
		let _localctx: RecordContext = new RecordContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, cobolParser.RULE_record);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2316;
			this.match(cobolParser.RECORD);
			this.state = 2318;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2317;
				this.separator();
				}
				}
				this.state = 2320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2322;
			this.record_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_definition(): Record_definitionContext {
		let _localctx: Record_definitionContext = new Record_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, cobolParser.RULE_record_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2447;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTAINS:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTAINS) {
					{
					this.state = 2324;
					this.match(cobolParser.CONTAINS);
					this.state = 2326;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2325;
						this.separator();
						}
						}
						this.state = 2328;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2344;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 344, this._ctx) ) {
				case 1:
					{
					this.state = 2332;
					this.shortest_rec();
					this.state = 2334;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2333;
						this.separator();
						}
						}
						this.state = 2336;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2338;
					this.match(cobolParser.TO);
					this.state = 2340;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2339;
						this.separator();
						}
						}
						this.state = 2342;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
					break;
				}
				this.state = 2346;
				this.longest_rec();
				this.state = 2350;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2347;
						this.separator();
						}
						}
					}
					this.state = 2352;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
				}
				this.state = 2360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 2353;
					this.match(cobolParser.CHARACTERS);
					this.state = 2357;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2354;
							this.separator();
							}
							}
						}
						this.state = 2359;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
					}
					}
				}

				}
				break;
			case cobolParser.IS:
			case cobolParser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2362;
					this.match(cobolParser.IS);
					this.state = 2364;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2363;
						this.separator();
						}
						}
						this.state = 2366;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2370;
				this.match(cobolParser.VARYING);
				this.state = 2372;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2371;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2374;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 2376;
					this.match(cobolParser.IN);
					this.state = 2378;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 2377;
							this.separator();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 2380;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 2391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIZE) {
					{
					this.state = 2384;
					this.match(cobolParser.SIZE);
					this.state = 2388;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2385;
							this.separator();
							}
							}
						}
						this.state = 2390;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
					}
					}
				}

				this.state = 2402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM || _la === cobolParser.NUMERIC_LITERAL) {
					{
					this.state = 2399;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FROM) {
						{
						this.state = 2393;
						this.match(cobolParser.FROM);
						this.state = 2395;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2394;
							this.separator();
							}
							}
							this.state = 2397;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					this.state = 2401;
					this.shortest_rec();
					}
				}

				this.state = 2412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 2404;
					this.match(cobolParser.TO);
					this.state = 2406;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2405;
						this.separator();
						}
						}
						this.state = 2408;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2410;
					this.longest_rec();
					}
				}

				this.state = 2427;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 362, this._ctx) ) {
				case 1:
					{
					this.state = 2417;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 2414;
						this.separator();
						}
						}
						this.state = 2419;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2420;
					this.match(cobolParser.CHARACTERS);
					this.state = 2424;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2421;
							this.separator();
							}
							}
						}
						this.state = 2426;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
					}
					}
					break;
				}
				this.state = 2445;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEPENDING) {
					{
					this.state = 2429;
					this.match(cobolParser.DEPENDING);
					this.state = 2431;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2430;
						this.separator();
						}
						}
						this.state = 2433;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2441;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 2435;
						this.match(cobolParser.ON);
						this.state = 2437;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2436;
							this.separator();
							}
							}
							this.state = 2439;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					this.state = 2443;
					this.depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public depending_item(): Depending_itemContext {
		let _localctx: Depending_itemContext = new Depending_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, cobolParser.RULE_depending_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2449;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortest_rec(): Shortest_recContext {
		let _localctx: Shortest_recContext = new Shortest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, cobolParser.RULE_shortest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2451;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public longest_rec(): Longest_recContext {
		let _localctx: Longest_recContext = new Longest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, cobolParser.RULE_longest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2453;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_entry(): Screen_description_entryContext {
		let _localctx: Screen_description_entryContext = new Screen_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, cobolParser.RULE_screen_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2455;
			this.level_number();
			this.state = 2465;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 370, this._ctx) ) {
			case 1:
				{
				this.state = 2457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2456;
					this.separator();
					}
					}
					this.state = 2459;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2463;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 2461;
					this.screen_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 2462;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 2476;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2467;
					this.separator();
					}
					}
					this.state = 2470;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2472;
				this.screen_description_clause();
				}
				}
				this.state = 2478;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2479;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_name(): Screen_nameContext {
		let _localctx: Screen_nameContext = new Screen_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, cobolParser.RULE_screen_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2481;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_clause(): Screen_description_clauseContext {
		let _localctx: Screen_description_clauseContext = new Screen_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, cobolParser.RULE_screen_description_clause);
		let _la: number;
		try {
			this.state = 2685;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 411, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2483;
				this.match(cobolParser.BLANK);
				this.state = 2485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2484;
					this.separator();
					}
					}
					this.state = 2487;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2489;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2491;
				this.match(cobolParser.FOREGROUND_COLOR);
				this.state = 2493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2492;
					this.separator();
					}
					}
					this.state = 2495;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2497;
					this.match(cobolParser.IS);
					this.state = 2499;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2498;
						this.separator();
						}
						}
						this.state = 2501;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2505;
				this.color_num();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2507;
				this.match(cobolParser.BACKGROUND_COLOR);
				this.state = 2509;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2508;
					this.separator();
					}
					}
					this.state = 2511;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2519;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2513;
					this.match(cobolParser.IS);
					this.state = 2515;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2514;
						this.separator();
						}
						}
						this.state = 2517;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2521;
				this.color_num();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2523;
				this.match(cobolParser.AUTO);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2524;
				this.match(cobolParser.SECURE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2525;
				this.match(cobolParser.REQUIRED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 2526;
					this.match(cobolParser.USAGE);
					this.state = 2528;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2527;
						this.separator();
						}
						}
						this.state = 2530;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 2532;
						this.match(cobolParser.IS);
						this.state = 2534;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2533;
							this.separator();
							}
							}
							this.state = 2536;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					}
				}

				this.state = 2542;
				this.match(cobolParser.DISPLAY);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2543;
				this.sign_is();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2544;
				this.match(cobolParser.FULL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2545;
				this.match(cobolParser.BELL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2546;
				this.match(cobolParser.BLINK);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2547;
				this.match(cobolParser.ERASE);
				this.state = 2549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2548;
					this.separator();
					}
					}
					this.state = 2551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2553;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.EOL || _la === cobolParser.EOS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2555;
				this.match(cobolParser.HIGHLIGHT);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2556;
				this.match(cobolParser.LOWLIGHT);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2557;
				this.match(cobolParser.REVERSE_VIDEO);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2558;
				this.match(cobolParser.UNDERLINE);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2559;
				this.match(cobolParser.LINE);
				this.state = 2561;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2560;
					this.separator();
					}
					}
					this.state = 2563;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 2565;
					this.match(cobolParser.NUMBER);
					this.state = 2567;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2566;
						this.separator();
						}
						}
						this.state = 2569;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2573;
					this.match(cobolParser.IS);
					this.state = 2575;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2574;
						this.separator();
						}
						}
						this.state = 2577;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 2581;
					this.match(cobolParser.PLUS);
					this.state = 2583;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2582;
						this.separator();
						}
						}
						this.state = 2585;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2589;
				this.src_number();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2591;
				this.match(cobolParser.COLUMN);
				this.state = 2593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2592;
					this.separator();
					}
					}
					this.state = 2595;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 2597;
					this.match(cobolParser.NUMBER);
					this.state = 2599;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2598;
						this.separator();
						}
						}
						this.state = 2601;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2611;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2605;
					this.match(cobolParser.IS);
					this.state = 2607;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2606;
						this.separator();
						}
						}
						this.state = 2609;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2619;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 2613;
					this.match(cobolParser.PLUS);
					this.state = 2615;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2614;
						this.separator();
						}
						}
						this.state = 2617;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2621;
				this.src_number();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2623;
				this.match(cobolParser.VALUE);
				this.state = 2625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2624;
					this.separator();
					}
					}
					this.state = 2627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2629;
					this.match(cobolParser.IS);
					this.state = 2631;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2630;
						this.separator();
						}
						}
						this.state = 2633;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2637;
				this.nonnumeric_literal();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2639;
				this.match(cobolParser.BLANK);
				this.state = 2641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2640;
					this.separator();
					}
					}
					this.state = 2643;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2651;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 2645;
					this.match(cobolParser.WHEN);
					this.state = 2647;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2646;
						this.separator();
						}
						}
						this.state = 2649;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 2653;
				this.match(cobolParser.ZERO);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2655;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2663;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
				case 1:
					{
					this.state = 2657;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2656;
						this.separator();
						}
						}
						this.state = 2659;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 2661;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 2665;
				this.picture();
				this.state = 2667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2666;
					this.separator();
					}
					}
					this.state = 2669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2683;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USING:
					{
					this.state = 2671;
					this.scr_pic_using();
					}
					break;
				case cobolParser.FROM:
					{
					this.state = 2672;
					this.scr_pic_from();
					this.state = 2680;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
					case 1:
						{
						this.state = 2674;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2673;
							this.separator();
							}
							}
							this.state = 2676;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 2678;
						this.scr_pic_to();
						}
						break;
					}
					}
					break;
				case cobolParser.TO:
					{
					this.state = 2682;
					this.scr_pic_to();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_using(): Scr_pic_usingContext {
		let _localctx: Scr_pic_usingContext = new Scr_pic_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, cobolParser.RULE_scr_pic_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2687;
			this.match(cobolParser.USING);
			this.state = 2689;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2688;
				this.separator();
				}
				}
				this.state = 2691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2693;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_from(): Scr_pic_fromContext {
		let _localctx: Scr_pic_fromContext = new Scr_pic_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, cobolParser.RULE_scr_pic_from);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2695;
			this.match(cobolParser.FROM);
			this.state = 2697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2696;
				this.separator();
				}
				}
				this.state = 2699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2703;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 2701;
				this.qualified_data_item();
				}
				break;
			case cobolParser.STRING_LITERAL:
				{
				this.state = 2702;
				this.nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_to(): Scr_pic_toContext {
		let _localctx: Scr_pic_toContext = new Scr_pic_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, cobolParser.RULE_scr_pic_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2705;
			this.match(cobolParser.TO);
			this.state = 2707;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2706;
				this.separator();
				}
				}
				this.state = 2709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2711;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonnumeric_literal(): Nonnumeric_literalContext {
		let _localctx: Nonnumeric_literalContext = new Nonnumeric_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, cobolParser.RULE_nonnumeric_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2713;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_number(): Src_numberContext {
		let _localctx: Src_numberContext = new Src_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, cobolParser.RULE_src_number);
		try {
			this.state = 2717;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2715;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2716;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public color_num(): Color_numContext {
		let _localctx: Color_numContext = new Color_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, cobolParser.RULE_color_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2719;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division(): Identification_divisionContext {
		let _localctx: Identification_divisionContext = new Identification_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, cobolParser.RULE_identification_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2721;
			this.match(cobolParser.IDENTIFICATION_IN_A_AREA);
			this.state = 2723;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2722;
				this.separator();
				}
				}
				this.state = 2725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2727;
			this.match(cobolParser.DIVISION);
			this.state = 2731;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2728;
				this.separator();
				}
				}
				this.state = 2733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2734;
			this.match(cobolParser.DOT_);
			this.state = 2738;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2735;
					this.separator();
					}
					}
				}
				this.state = 2740;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
			}
			this.state = 2744;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2741;
					this.identification_division_paragraph();
					}
					}
				}
				this.state = 2746;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division_paragraph(): Identification_division_paragraphContext {
		let _localctx: Identification_division_paragraphContext = new Identification_division_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, cobolParser.RULE_identification_division_paragraph);
		try {
			this.state = 2755;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PROGRAM_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2747;
				this.program_id();
				}
				break;
			case cobolParser.AUTHOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2748;
				this.author();
				}
				break;
			case cobolParser.INSTALLATION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2749;
				this.installation();
				}
				break;
			case cobolParser.DATE_WRITTEN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2750;
				this.date_written();
				}
				break;
			case cobolParser.DATE_COMPILED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2751;
				this.date_compiled();
				}
				break;
			case cobolParser.SECURITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2752;
				this.security();
				}
				break;
			case cobolParser.OPTIONS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2753;
				this.options_();
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2754;
				this.separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_id(): Program_idContext {
		let _localctx: Program_idContext = new Program_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, cobolParser.RULE_program_id);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2757;
			this.match(cobolParser.PROGRAM_ID);
			this.state = 2761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2758;
				this.separator();
				}
				}
				this.state = 2763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2764;
			this.match(cobolParser.DOT_);
			this.state = 2768;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2765;
				this.separator();
				}
				}
				this.state = 2770;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2771;
			this.program_name();
			this.state = 2775;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2772;
					this.separator();
					}
					}
				}
				this.state = 2777;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
			}
			this.state = 2779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COMMON || _la === cobolParser.INITIAL || _la === cobolParser.IS) {
				{
				this.state = 2778;
				this.is_program();
				}
			}

			this.state = 2784;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2781;
					this.separator();
					}
					}
				}
				this.state = 2786;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
			}
			this.state = 2788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IDENT || _la === cobolParser.WITH) {
				{
				this.state = 2787;
				this.with_ident();
				}
			}

			this.state = 2793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2790;
				this.separator();
				}
				}
				this.state = 2795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2796;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_name(): Program_nameContext {
		let _localctx: Program_nameContext = new Program_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, cobolParser.RULE_program_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2798;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public is_program(): Is_programContext {
		let _localctx: Is_programContext = new Is_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, cobolParser.RULE_is_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2800;
				this.match(cobolParser.IS);
				this.state = 2802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2801;
					this.separator();
					}
					}
					this.state = 2804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 2808;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.COMMON || _la === cobolParser.INITIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2816;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 432, this._ctx) ) {
			case 1:
				{
				this.state = 2810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2809;
					this.separator();
					}
					}
					this.state = 2812;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 2814;
				this.match(cobolParser.PROGRAM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_ident(): With_identContext {
		let _localctx: With_identContext = new With_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, cobolParser.RULE_with_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2818;
				this.match(cobolParser.WITH);
				this.state = 2820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2819;
					this.separator();
					}
					}
					this.state = 2822;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 2826;
			this.match(cobolParser.IDENT);
			this.state = 2828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2827;
				this.separator();
				}
				}
				this.state = 2830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2832;
			this.ident_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident_string(): Ident_stringContext {
		let _localctx: Ident_stringContext = new Ident_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, cobolParser.RULE_ident_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2834;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_entry(): Comment_entryContext {
		let _localctx: Comment_entryContext = new Comment_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, cobolParser.RULE_comment_entry);
		let _la: number;
		try {
			this.state = 2845;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2836;
				this.match(cobolParser.START_FOUR_SPACES);
				this.state = 2840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
					{
					{
					this.state = 2837;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 2842;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2843;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2844;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public author(): AuthorContext {
		let _localctx: AuthorContext = new AuthorContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, cobolParser.RULE_author);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2847;
			this.match(cobolParser.AUTHOR);
			this.state = 2851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2848;
				this.separator();
				}
				}
				this.state = 2853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2854;
			this.match(cobolParser.DOT_);
			this.state = 2858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
				{
				{
				this.state = 2855;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2860;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2861;
			this.match(cobolParser.NEWLINE);
			this.state = 2865;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2862;
					this.comment_entry();
					}
					}
				}
				this.state = 2867;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installation(): InstallationContext {
		let _localctx: InstallationContext = new InstallationContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, cobolParser.RULE_installation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2868;
			this.match(cobolParser.INSTALLATION);
			this.state = 2872;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2869;
				this.separator();
				}
				}
				this.state = 2874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2875;
			this.match(cobolParser.DOT_);
			this.state = 2879;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
				{
				{
				this.state = 2876;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2882;
			this.match(cobolParser.NEWLINE);
			this.state = 2886;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2883;
					this.comment_entry();
					}
					}
				}
				this.state = 2888;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_written(): Date_writtenContext {
		let _localctx: Date_writtenContext = new Date_writtenContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, cobolParser.RULE_date_written);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2889;
			this.match(cobolParser.DATE_WRITTEN);
			this.state = 2893;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2890;
				this.separator();
				}
				}
				this.state = 2895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2896;
			this.match(cobolParser.DOT_);
			this.state = 2900;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
				{
				{
				this.state = 2897;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2903;
			this.match(cobolParser.NEWLINE);
			this.state = 2907;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2904;
					this.comment_entry();
					}
					}
				}
				this.state = 2909;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_compiled(): Date_compiledContext {
		let _localctx: Date_compiledContext = new Date_compiledContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, cobolParser.RULE_date_compiled);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2910;
			this.match(cobolParser.DATE_COMPILED);
			this.state = 2914;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2911;
				this.separator();
				}
				}
				this.state = 2916;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2917;
			this.match(cobolParser.DOT_);
			this.state = 2921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
				{
				{
				this.state = 2918;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2924;
			this.match(cobolParser.NEWLINE);
			this.state = 2928;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2925;
					this.comment_entry();
					}
					}
				}
				this.state = 2930;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security(): SecurityContext {
		let _localctx: SecurityContext = new SecurityContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, cobolParser.RULE_security);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2931;
			this.match(cobolParser.SECURITY);
			this.state = 2935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2932;
				this.separator();
				}
				}
				this.state = 2937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2938;
			this.match(cobolParser.DOT_);
			this.state = 2942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BELL) | (1 << cobolParser.BINARY) | (1 << cobolParser.BINARY_CHAR) | (1 << cobolParser.BINARY_DOUBLE) | (1 << cobolParser.BINARY_LONG) | (1 << cobolParser.BINARY_SHORT) | (1 << cobolParser.BLANK))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)) | (1 << (cobolParser.COMPUTATIONAL_1 - 32)) | (1 << (cobolParser.COMPUTATIONAL_2 - 32)) | (1 << (cobolParser.COMPUTATIONAL_3 - 32)) | (1 << (cobolParser.COMPUTATIONAL_4 - 32)) | (1 << (cobolParser.COMPUTATIONAL_5 - 32)) | (1 << (cobolParser.COMPUTATIONAL_X - 32)) | (1 << (cobolParser.COMPUTE - 32)) | (1 << (cobolParser.COMP_1 - 32)) | (1 << (cobolParser.COMP_2 - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)) | (1 << (cobolParser.DAY - 64)) | (1 << (cobolParser.DAY_OF_WEEK - 64)) | (1 << (cobolParser.DE - 64)) | (1 << (cobolParser.DEBUGGING - 64)) | (1 << (cobolParser.DECIMAL_POINT - 64)) | (1 << (cobolParser.DEFERRED_WRITE - 64)) | (1 << (cobolParser.DELETE - 64)) | (1 << (cobolParser.DELIMITER - 64)) | (1 << (cobolParser.DEPENDING - 64)) | (1 << (cobolParser.DESCENDING - 64)) | (1 << (cobolParser.DETAIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)) | (1 << (cobolParser.END_IF - 96)) | (1 << (cobolParser.END_MULTIPLY - 96)) | (1 << (cobolParser.END_OF_PAGE - 96)) | (1 << (cobolParser.END_PERFORM - 96)) | (1 << (cobolParser.END_READ - 96)) | (1 << (cobolParser.END_RETURN - 96)) | (1 << (cobolParser.END_REWRITE - 96)) | (1 << (cobolParser.END_SEARCH - 96)) | (1 << (cobolParser.END_START - 96)) | (1 << (cobolParser.END_STRING - 96)) | (1 << (cobolParser.END_SUBTRACT - 96)) | (1 << (cobolParser.END_UNSTRING - 96)) | (1 << (cobolParser.END_WRITE - 96)) | (1 << (cobolParser.ENVIRONMENT - 96)) | (1 << (cobolParser.ENVIRONMENT_NAME - 96)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FD - 128)) | (1 << (cobolParser.FILE - 128)) | (1 << (cobolParser.FILE_CONTROL - 128)) | (1 << (cobolParser.FILE_ID - 128)) | (1 << (cobolParser.FILLER - 128)) | (1 << (cobolParser.FILL_SIZE - 128)) | (1 << (cobolParser.FINAL - 128)) | (1 << (cobolParser.FIRST - 128)) | (1 << (cobolParser.FLOAT_EXTENDED - 128)) | (1 << (cobolParser.FLOAT_LONG - 128)) | (1 << (cobolParser.FLOAT_SHORT - 128)) | (1 << (cobolParser.FOOTING - 128)) | (1 << (cobolParser.FOR - 128)) | (1 << (cobolParser.FOREGROUND_COLOR - 128)) | (1 << (cobolParser.FROM - 128)) | (1 << (cobolParser.FULL - 128)) | (1 << (cobolParser.FUNCTION - 128)) | (1 << (cobolParser.GENERATE - 128)) | (1 << (cobolParser.GLOBAL - 128)) | (1 << (cobolParser.GO - 128)) | (1 << (cobolParser.GROUP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)) | (1 << (cobolParser.IN - 160)) | (1 << (cobolParser.INDEX - 160)) | (1 << (cobolParser.INDEXED - 160)) | (1 << (cobolParser.INDICATE - 160)) | (1 << (cobolParser.INITIAL - 160)) | (1 << (cobolParser.INITIALIZE - 160)) | (1 << (cobolParser.INITIATE - 160)) | (1 << (cobolParser.INPUT_OUTPUT - 160)) | (1 << (cobolParser.INSPECT - 160)) | (1 << (cobolParser.INSTALLATION - 160)) | (1 << (cobolParser.INVALID - 160)) | (1 << (cobolParser.IS - 160)) | (1 << (cobolParser.I_O_CONTROL - 160)) | (1 << (cobolParser.JUST - 160)) | (1 << (cobolParser.JUSTIFIED - 160)) | (1 << (cobolParser.KEY - 160)) | (1 << (cobolParser.LABEL - 160)) | (1 << (cobolParser.LAST - 160)) | (1 << (cobolParser.LEADING - 160)) | (1 << (cobolParser.LEFT - 160)) | (1 << (cobolParser.LIMIT - 160)) | (1 << (cobolParser.LIMITS - 160)) | (1 << (cobolParser.LINAGE - 160)) | (1 << (cobolParser.LINE - 160)) | (1 << (cobolParser.LINES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)) | (1 << (cobolParser.LOWLIGHT - 192)) | (1 << (cobolParser.MANUAL - 192)) | (1 << (cobolParser.MASS_INSERT - 192)) | (1 << (cobolParser.MEMORY - 192)) | (1 << (cobolParser.MERGE - 192)) | (1 << (cobolParser.MODE - 192)) | (1 << (cobolParser.MODULES - 192)) | (1 << (cobolParser.MOVE - 192)) | (1 << (cobolParser.MULTIPLE - 192)) | (1 << (cobolParser.MULTIPLY - 192)) | (1 << (cobolParser.NATIVE - 192)) | (1 << (cobolParser.NEXT - 192)) | (1 << (cobolParser.NOT - 192)) | (1 << (cobolParser.NUMBER - 192)) | (1 << (cobolParser.OBJECT_COMPUTER - 192)) | (1 << (cobolParser.OCCURS - 192)) | (1 << (cobolParser.OF - 192)) | (1 << (cobolParser.OFF - 192)) | (1 << (cobolParser.OMITTED - 192)) | (1 << (cobolParser.ON - 192)) | (1 << (cobolParser.OPEN - 192)) | (1 << (cobolParser.OPTIONAL - 192)) | (1 << (cobolParser.OPTIONS - 192)) | (1 << (cobolParser.ORGANIZATION - 192)) | (1 << (cobolParser.OVERFLOW - 192)) | (1 << (cobolParser.PACKED_DECIMAL - 192)) | (1 << (cobolParser.PADDING - 192)) | (1 << (cobolParser.PAGE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.PAPER_TAPE_PUNCH - 224)) | (1 << (cobolParser.PAPER_TAPE_READER - 224)) | (1 << (cobolParser.PERFORM - 224)) | (1 << (cobolParser.PF - 224)) | (1 << (cobolParser.PH - 224)) | (1 << (cobolParser.PIC - 224)) | (1 << (cobolParser.PICTURE - 224)) | (1 << (cobolParser.PLUS - 224)) | (1 << (cobolParser.POINTER - 224)) | (1 << (cobolParser.POINTER_64 - 224)) | (1 << (cobolParser.POSITION - 224)) | (1 << (cobolParser.PREALLOCATION - 224)) | (1 << (cobolParser.PRINTER - 224)) | (1 << (cobolParser.PRINT_CONTROL - 224)) | (1 << (cobolParser.PROCEDURE - 224)) | (1 << (cobolParser.PROGRAM - 224)) | (1 << (cobolParser.PROGRAM_ID - 224)) | (1 << (cobolParser.RANDOM - 224)) | (1 << (cobolParser.RD - 224)) | (1 << (cobolParser.READ - 224)) | (1 << (cobolParser.RECORD - 224)) | (1 << (cobolParser.RECORDS - 224)) | (1 << (cobolParser.REDEFINES - 224)) | (1 << (cobolParser.REEL - 224)) | (1 << (cobolParser.REFERENCE - 224)) | (1 << (cobolParser.RELATIVE - 224)) | (1 << (cobolParser.RELEASE - 224)) | (1 << (cobolParser.RENAMES - 224)) | (1 << (cobolParser.REPLACE - 224)) | (1 << (cobolParser.REPLACING - 224)) | (1 << (cobolParser.REPORT - 224)) | (1 << (cobolParser.REPORTS - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.REQUIRED - 256)) | (1 << (cobolParser.RERUN - 256)) | (1 << (cobolParser.RESERVE - 256)) | (1 << (cobolParser.RESET - 256)) | (1 << (cobolParser.RETURN - 256)) | (1 << (cobolParser.REVERSE_VIDEO - 256)) | (1 << (cobolParser.REWRITE - 256)) | (1 << (cobolParser.RF - 256)) | (1 << (cobolParser.RH - 256)) | (1 << (cobolParser.RIGHT - 256)) | (1 << (cobolParser.ROLLBACK - 256)) | (1 << (cobolParser.SAME - 256)) | (1 << (cobolParser.SCREEN - 256)) | (1 << (cobolParser.SD - 256)) | (1 << (cobolParser.SEARCH - 256)) | (1 << (cobolParser.SECTION - 256)) | (1 << (cobolParser.SECURE - 256)) | (1 << (cobolParser.SECURITY - 256)) | (1 << (cobolParser.SEGMENT_LIMIT - 256)) | (1 << (cobolParser.SELECT - 256)) | (1 << (cobolParser.SEPARATE - 256)) | (1 << (cobolParser.SEQUENCE - 256)) | (1 << (cobolParser.SEQUENTIAL - 256)) | (1 << (cobolParser.SET - 256)) | (1 << (cobolParser.SIGN - 256)) | (1 << (cobolParser.SIGNED - 256)) | (1 << (cobolParser.SIZE - 256)) | (1 << (cobolParser.SORT - 256)) | (1 << (cobolParser.SORT_MERGE - 256)) | (1 << (cobolParser.SOURCE - 256)) | (1 << (cobolParser.SOURCE_COMPUTER - 256)) | (1 << (cobolParser.SPECIAL_NAMES - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.STANDARD - 288)) | (1 << (cobolParser.STANDARD_1 - 288)) | (1 << (cobolParser.STANDARD_2 - 288)) | (1 << (cobolParser.START - 288)) | (1 << (cobolParser.STATUS - 288)) | (1 << (cobolParser.STOP - 288)) | (1 << (cobolParser.STRING - 288)) | (1 << (cobolParser.SUBTRACT - 288)) | (1 << (cobolParser.SUM - 288)) | (1 << (cobolParser.SUPPRESS - 288)) | (1 << (cobolParser.SWITCH - 288)) | (1 << (cobolParser.SYMBOL - 288)) | (1 << (cobolParser.SYMBOLIC - 288)) | (1 << (cobolParser.SYNC - 288)) | (1 << (cobolParser.SYNCHRONIZED - 288)) | (1 << (cobolParser.SYSERR - 288)) | (1 << (cobolParser.SYSIN - 288)) | (1 << (cobolParser.SYSOUT - 288)) | (1 << (cobolParser.TALLYING - 288)) | (1 << (cobolParser.TAPE - 288)) | (1 << (cobolParser.TERMINATE - 288)) | (1 << (cobolParser.THROUGH - 288)) | (1 << (cobolParser.THRU - 288)) | (1 << (cobolParser.TIME - 288)) | (1 << (cobolParser.TIMES - 288)) | (1 << (cobolParser.TO - 288)) | (1 << (cobolParser.TOP - 288)) | (1 << (cobolParser.TRAILING - 288)) | (1 << (cobolParser.TRUE - 288)) | (1 << (cobolParser.TYPE - 288)) | (1 << (cobolParser.UNDERLINE - 288)) | (1 << (cobolParser.UNIT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.UNLOCK - 320)) | (1 << (cobolParser.UNSIGNED - 320)) | (1 << (cobolParser.UNSTRING - 320)) | (1 << (cobolParser.UP - 320)) | (1 << (cobolParser.UPON - 320)) | (1 << (cobolParser.USAGE - 320)) | (1 << (cobolParser.USE - 320)) | (1 << (cobolParser.USING - 320)) | (1 << (cobolParser.VALUE - 320)) | (1 << (cobolParser.VALUES - 320)) | (1 << (cobolParser.VARYING - 320)) | (1 << (cobolParser.VAX - 320)) | (1 << (cobolParser.WHEN - 320)) | (1 << (cobolParser.WINDOW - 320)) | (1 << (cobolParser.WITH - 320)) | (1 << (cobolParser.WORDS - 320)) | (1 << (cobolParser.WORKING_STORAGE - 320)) | (1 << (cobolParser.WRITE - 320)) | (1 << (cobolParser.ZERO - 320)) | (1 << (cobolParser.ZEROES - 320)) | (1 << (cobolParser.ZEROS - 320)) | (1 << (cobolParser.START_SLASH_ - 320)) | (1 << (cobolParser.START_STAR_ - 320)) | (1 << (cobolParser.EXCLAM_ - 320)) | (1 << (cobolParser.UNDER_ - 320)) | (1 << (cobolParser.PLUS_ - 320)) | (1 << (cobolParser.MINUS_ - 320)) | (1 << (cobolParser.STAR_ - 320)) | (1 << (cobolParser.SLASH_ - 320)) | (1 << (cobolParser.COMMA_ - 320)) | (1 << (cobolParser.SEMI_ - 320)) | (1 << (cobolParser.COLON_ - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.EQUAL_ - 352)) | (1 << (cobolParser.LT_ - 352)) | (1 << (cobolParser.LE_ - 352)) | (1 << (cobolParser.GE_ - 352)) | (1 << (cobolParser.GT_ - 352)) | (1 << (cobolParser.LPAREN_ - 352)) | (1 << (cobolParser.RPAREN_ - 352)) | (1 << (cobolParser.LBRACK_ - 352)) | (1 << (cobolParser.RBRACK_ - 352)) | (1 << (cobolParser.POINTER_ - 352)) | (1 << (cobolParser.ATP_ - 352)) | (1 << (cobolParser.DOT_ - 352)) | (1 << (cobolParser.LCURLY_ - 352)) | (1 << (cobolParser.RCURLY_ - 352)) | (1 << (cobolParser.STRING_LITERAL - 352)) | (1 << (cobolParser.NUMERIC_LITERAL - 352)) | (1 << (cobolParser.HEX_LITERAL - 352)) | (1 << (cobolParser.USER_DEFINED_WORD - 352)) | (1 << (cobolParser.START_FOUR_SPACES - 352)) | (1 << (cobolParser.WHITESPACE - 352)))) !== 0)) {
				{
				{
				this.state = 2939;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 2944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2945;
			this.match(cobolParser.NEWLINE);
			this.state = 2949;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2946;
					this.comment_entry();
					}
					}
				}
				this.state = 2951;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public options_(): Options_Context {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 218, cobolParser.RULE_options_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2952;
			this.match(cobolParser.OPTIONS);
			this.state = 2956;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2953;
				this.separator();
				}
				}
				this.state = 2958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2959;
			this.match(cobolParser.DOT_);
			this.state = 2963;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2960;
					this.separator();
					}
					}
				}
				this.state = 2965;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
			}
			this.state = 2967;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARITHMETIC) {
				{
				this.state = 2966;
				this.arithmetic();
				}
			}

			this.state = 2972;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2969;
					this.separator();
					}
					}
				}
				this.state = 2974;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
			}
			this.state = 2976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DOT_) {
				{
				this.state = 2975;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic(): ArithmeticContext {
		let _localctx: ArithmeticContext = new ArithmeticContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, cobolParser.RULE_arithmetic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2978;
			this.match(cobolParser.ARITHMETIC);
			this.state = 2980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2979;
				this.separator();
				}
				}
				this.state = 2982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 2990;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2984;
				this.match(cobolParser.IS);
				this.state = 2986;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2985;
					this.separator();
					}
					}
					this.state = 2988;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 2992;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NATIVE || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2996;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 2993;
				this.separator();
				}
				}
				this.state = 2998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2999;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environment_division(): Environment_divisionContext {
		let _localctx: Environment_divisionContext = new Environment_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, cobolParser.RULE_environment_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3001;
			this.match(cobolParser.ENVIRONMENT);
			this.state = 3003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3002;
				this.separator();
				}
				}
				this.state = 3005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3007;
			this.match(cobolParser.DIVISION);
			this.state = 3011;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3008;
				this.separator();
				}
				}
				this.state = 3013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3014;
			this.match(cobolParser.DOT_);
			this.state = 3018;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3015;
					this.separator();
					}
					}
				}
				this.state = 3020;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
			}
			this.state = 3022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONFIGURATION) {
				{
				this.state = 3021;
				this.configuration_section();
				}
			}

			this.state = 3025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INPUT_OUTPUT) {
				{
				this.state = 3024;
				this.input_output_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configuration_section(): Configuration_sectionContext {
		let _localctx: Configuration_sectionContext = new Configuration_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, cobolParser.RULE_configuration_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3027;
			this.match(cobolParser.CONFIGURATION);
			this.state = 3029;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3028;
				this.separator();
				}
				}
				this.state = 3031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3033;
			this.match(cobolParser.SECTION);
			this.state = 3037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3034;
				this.separator();
				}
				}
				this.state = 3039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3040;
			this.match(cobolParser.DOT_);
			this.state = 3044;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3041;
					this.separator();
					}
					}
				}
				this.state = 3046;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			}
			this.state = 3048;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SOURCE_COMPUTER) {
				{
				this.state = 3047;
				this.source_computer();
				}
			}

			this.state = 3053;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3050;
					this.separator();
					}
					}
				}
				this.state = 3055;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
			}
			this.state = 3057;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OBJECT_COMPUTER) {
				{
				this.state = 3056;
				this.object_computer();
				}
			}

			this.state = 3062;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3059;
					this.separator();
					}
					}
				}
				this.state = 3064;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
			}
			this.state = 3066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SPECIAL_NAMES) {
				{
				this.state = 3065;
				this.special_names();
				}
			}

			this.state = 3071;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3068;
					this.separator();
					}
					}
				}
				this.state = 3073;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_output_section(): Input_output_sectionContext {
		let _localctx: Input_output_sectionContext = new Input_output_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, cobolParser.RULE_input_output_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3074;
			this.match(cobolParser.INPUT_OUTPUT);
			this.state = 3076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3075;
				this.separator();
				}
				}
				this.state = 3078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3080;
			this.match(cobolParser.SECTION);
			this.state = 3084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3081;
				this.separator();
				}
				}
				this.state = 3086;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3087;
			this.match(cobolParser.DOT_);
			this.state = 3091;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3088;
					this.separator();
					}
					}
				}
				this.state = 3093;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
			}
			this.state = 3095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE_CONTROL) {
				{
				this.state = 3094;
				this.file_control();
				}
			}

			this.state = 3098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.I_O_CONTROL) {
				{
				this.state = 3097;
				this.i_o_control();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_computer(): Source_computerContext {
		let _localctx: Source_computerContext = new Source_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, cobolParser.RULE_source_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3100;
			this.match(cobolParser.SOURCE_COMPUTER);
			this.state = 3104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3101;
				this.separator();
				}
				}
				this.state = 3106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3107;
			this.match(cobolParser.DOT_);
			this.state = 3111;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3108;
					this.separator();
					}
					}
				}
				this.state = 3113;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
			}
			this.state = 3132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 3114;
				this.computer_type();
				this.state = 3122;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
				case 1:
					{
					this.state = 3116;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3115;
						this.separator();
						}
						}
						this.state = 3118;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3120;
					this.with_debugging();
					}
					break;
				}
				this.state = 3127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3124;
					this.separator();
					}
					}
					this.state = 3129;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3130;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computer_type(): Computer_typeContext {
		let _localctx: Computer_typeContext = new Computer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, cobolParser.RULE_computer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3134;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_debugging(): With_debuggingContext {
		let _localctx: With_debuggingContext = new With_debuggingContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, cobolParser.RULE_with_debugging);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 3136;
				this.match(cobolParser.WITH);
				this.state = 3138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3137;
					this.separator();
					}
					}
					this.state = 3140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3144;
			this.match(cobolParser.DEBUGGING);
			this.state = 3146;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3145;
				this.separator();
				}
				}
				this.state = 3148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3150;
			this.match(cobolParser.MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_computer(): Object_computerContext {
		let _localctx: Object_computerContext = new Object_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, cobolParser.RULE_object_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3152;
			this.match(cobolParser.OBJECT_COMPUTER);
			this.state = 3156;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3153;
				this.separator();
				}
				}
				this.state = 3158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3159;
			this.match(cobolParser.DOT_);
			this.state = 3163;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3160;
					this.separator();
					}
					}
				}
				this.state = 3165;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
			}
			this.state = 3202;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 3166;
				this.computer_type();
				this.state = 3174;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 493, this._ctx) ) {
				case 1:
					{
					this.state = 3168;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3167;
						this.separator();
						}
						}
						this.state = 3170;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3172;
					this.memory_size();
					}
					break;
				}
				this.state = 3183;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 495, this._ctx) ) {
				case 1:
					{
					this.state = 3177;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3176;
						this.separator();
						}
						}
						this.state = 3179;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3181;
					this.program_collating();
					}
					break;
				}
				this.state = 3192;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 497, this._ctx) ) {
				case 1:
					{
					this.state = 3186;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3185;
						this.separator();
						}
						}
						this.state = 3188;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3190;
					this.segment_limit();
					}
					break;
				}
				this.state = 3197;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3194;
					this.separator();
					}
					}
					this.state = 3199;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3200;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size(): Memory_sizeContext {
		let _localctx: Memory_sizeContext = new Memory_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, cobolParser.RULE_memory_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3204;
			this.match(cobolParser.MEMORY);
			this.state = 3212;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 501, this._ctx) ) {
			case 1:
				{
				this.state = 3206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3205;
					this.separator();
					}
					}
					this.state = 3208;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3210;
				this.match(cobolParser.SIZE);
				}
				break;
			}
			this.state = 3215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3214;
				this.separator();
				}
				}
				this.state = 3217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3219;
			this.memory_size_amount();
			this.state = 3221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3220;
				this.separator();
				}
				}
				this.state = 3223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3225;
			this.memory_size_unit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_amount(): Memory_size_amountContext {
		let _localctx: Memory_size_amountContext = new Memory_size_amountContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, cobolParser.RULE_memory_size_amount);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3227;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_unit(): Memory_size_unitContext {
		let _localctx: Memory_size_unitContext = new Memory_size_unitContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, cobolParser.RULE_memory_size_unit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3229;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.MODULES || _la === cobolParser.WORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_collating(): Program_collatingContext {
		let _localctx: Program_collatingContext = new Program_collatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, cobolParser.RULE_program_collating);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3237;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 3231;
				this.match(cobolParser.PROGRAM);
				this.state = 3233;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3232;
					this.separator();
					}
					}
					this.state = 3235;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING) {
				{
				this.state = 3239;
				this.match(cobolParser.COLLATING);
				this.state = 3241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3240;
					this.separator();
					}
					}
					this.state = 3243;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3247;
			this.match(cobolParser.SEQUENCE);
			this.state = 3255;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 509, this._ctx) ) {
			case 1:
				{
				this.state = 3249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3248;
					this.separator();
					}
					}
					this.state = 3251;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3253;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 3258;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3257;
				this.separator();
				}
				}
				this.state = 3260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3262;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_name(): Alpha_nameContext {
		let _localctx: Alpha_nameContext = new Alpha_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, cobolParser.RULE_alpha_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3264;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_limit(): Segment_limitContext {
		let _localctx: Segment_limitContext = new Segment_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, cobolParser.RULE_segment_limit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3266;
			this.match(cobolParser.SEGMENT_LIMIT);
			this.state = 3274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				this.state = 3268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3267;
					this.separator();
					}
					}
					this.state = 3270;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3272;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3276;
			this.segment_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_number(): Segment_numberContext {
		let _localctx: Segment_numberContext = new Segment_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, cobolParser.RULE_segment_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3278;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names(): Special_namesContext {
		let _localctx: Special_namesContext = new Special_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, cobolParser.RULE_special_names);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3280;
			this.match(cobolParser.SPECIAL_NAMES);
			this.state = 3284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3281;
				this.separator();
				}
				}
				this.state = 3286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3287;
			this.match(cobolParser.DOT_);
			this.state = 3291;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3288;
					this.separator();
					}
					}
				}
				this.state = 3293;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
			}
			this.state = 3307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (cobolParser.C01 - 36)) | (1 << (cobolParser.CARD_READER - 36)) | (1 << (cobolParser.CLASS - 36)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (cobolParser.CONSOLE - 69)) | (1 << (cobolParser.CRT - 69)) | (1 << (cobolParser.CURRENCY - 69)) | (1 << (cobolParser.CURSOR - 69)) | (1 << (cobolParser.DECIMAL_POINT - 69)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 298)) & ~0x1F) === 0 && ((1 << (_la - 298)) & ((1 << (cobolParser.SWITCH - 298)) | (1 << (cobolParser.SYMBOLIC - 298)) | (1 << (cobolParser.SYSERR - 298)) | (1 << (cobolParser.SYSIN - 298)) | (1 << (cobolParser.SYSOUT - 298)))) !== 0)) {
				{
				this.state = 3301;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3294;
					this.special_names_content();
					this.state = 3298;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 3295;
						this.separator();
						}
						}
						this.state = 3300;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 3303;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (cobolParser.C01 - 36)) | (1 << (cobolParser.CARD_READER - 36)) | (1 << (cobolParser.CLASS - 36)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (cobolParser.CONSOLE - 69)) | (1 << (cobolParser.CRT - 69)) | (1 << (cobolParser.CURRENCY - 69)) | (1 << (cobolParser.CURSOR - 69)) | (1 << (cobolParser.DECIMAL_POINT - 69)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 298)) & ~0x1F) === 0 && ((1 << (_la - 298)) & ((1 << (cobolParser.SWITCH - 298)) | (1 << (cobolParser.SYMBOLIC - 298)) | (1 << (cobolParser.SYSERR - 298)) | (1 << (cobolParser.SYSIN - 298)) | (1 << (cobolParser.SYSOUT - 298)))) !== 0));
				this.state = 3305;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names_content(): Special_names_contentContext {
		let _localctx: Special_names_contentContext = new Special_names_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, cobolParser.RULE_special_names_content);
		let _la: number;
		try {
			this.state = 3416;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CARD_READER:
			case cobolParser.CONSOLE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3309;
				this.predefined_device();
				this.state = 3311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3310;
					this.separator();
					}
					}
					this.state = 3313;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3315;
					this.match(cobolParser.IS);
					this.state = 3317;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3316;
						this.separator();
						}
						}
						this.state = 3319;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 3323;
				this.device_name();
				}
				break;
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3325;
				this.arg_env();
				this.state = 3327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3326;
					this.separator();
					}
					}
					this.state = 3329;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3331;
					this.match(cobolParser.IS);
					this.state = 3333;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3332;
						this.separator();
						}
						}
						this.state = 3335;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 3339;
				this.arg_env_name();
				}
				break;
			case cobolParser.C01:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3341;
				this.match(cobolParser.C01);
				this.state = 3343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3342;
					this.separator();
					}
					}
					this.state = 3345;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3347;
					this.match(cobolParser.IS);
					this.state = 3349;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3348;
						this.separator();
						}
						}
						this.state = 3351;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 3355;
				this.top_of_page_name();
				}
				break;
			case cobolParser.SWITCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3357;
				this.switch_();
				}
				break;
			case cobolParser.ALPHABET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3358;
				this.alphabet();
				}
				break;
			case cobolParser.SYMBOLIC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3359;
				this.symbolic_chars();
				}
				break;
			case cobolParser.CLASS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3360;
				this.class_();
				}
				break;
			case cobolParser.CURRENCY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3361;
				this.currency();
				}
				break;
			case cobolParser.DECIMAL_POINT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3362;
				this.match(cobolParser.DECIMAL_POINT);
				this.state = 3364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3363;
					this.separator();
					}
					}
					this.state = 3366;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3374;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3368;
					this.match(cobolParser.IS);
					this.state = 3370;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3369;
						this.separator();
						}
						}
						this.state = 3372;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 3376;
				this.match(cobolParser.COMMA);
				}
				break;
			case cobolParser.CURSOR:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3378;
				this.match(cobolParser.CURSOR);
				this.state = 3380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3379;
					this.separator();
					}
					}
					this.state = 3382;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3384;
					this.match(cobolParser.IS);
					this.state = 3386;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3385;
						this.separator();
						}
						}
						this.state = 3388;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 3392;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CRT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3394;
				this.match(cobolParser.CRT);
				this.state = 3396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3395;
					this.separator();
					}
					}
					this.state = 3398;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3400;
				this.match(cobolParser.STATUS);
				this.state = 3402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3401;
					this.separator();
					}
					}
					this.state = 3404;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3406;
					this.match(cobolParser.IS);
					this.state = 3408;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3407;
						this.separator();
						}
						}
						this.state = 3410;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 3414;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_data_item(): Qualified_data_itemContext {
		let _localctx: Qualified_data_itemContext = new Qualified_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, cobolParser.RULE_qualified_data_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3418;
			this.match(cobolParser.USER_DEFINED_WORD);
			this.state = 3434;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3419;
						this.separator();
						}
						}
						this.state = 3422;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3424;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.IN || _la === cobolParser.OF)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3426;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3425;
						this.separator();
						}
						}
						this.state = 3428;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3430;
					this.match(cobolParser.USER_DEFINED_WORD);
					}
					}
				}
				this.state = 3436;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency(): CurrencyContext {
		let _localctx: CurrencyContext = new CurrencyContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, cobolParser.RULE_currency);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3437;
			this.match(cobolParser.CURRENCY);
			this.state = 3439;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3438;
				this.separator();
				}
				}
				this.state = 3441;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 3443;
				this.match(cobolParser.SIGN);
				this.state = 3445;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3444;
					this.separator();
					}
					}
					this.state = 3447;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3451;
				this.match(cobolParser.IS);
				this.state = 3453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3452;
					this.separator();
					}
					}
					this.state = 3455;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3459;
			this.currency_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency_definition(): Currency_definitionContext {
		let _localctx: Currency_definitionContext = new Currency_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, cobolParser.RULE_currency_definition);
		let _la: number;
		try {
			this.state = 3485;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 550, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3461;
				this.literal_7();
				this.state = 3468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3462;
					this.match(cobolParser.WITH);
					this.state = 3464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3463;
						this.separator();
						}
						}
						this.state = 3466;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 3470;
				this.match(cobolParser.PICTURE);
				this.state = 3472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3471;
					this.separator();
					}
					}
					this.state = 3474;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3476;
				this.match(cobolParser.SYMBOL);
				this.state = 3478;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3477;
					this.separator();
					}
					}
					this.state = 3480;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3482;
				this.literal_8();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3484;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_7(): Literal_7Context {
		let _localctx: Literal_7Context = new Literal_7Context(this._ctx, this.state);
		this.enterRule(_localctx, 260, cobolParser.RULE_literal_7);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3487;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_8(): Literal_8Context {
		let _localctx: Literal_8Context = new Literal_8Context(this._ctx, this.state);
		this.enterRule(_localctx, 262, cobolParser.RULE_literal_8);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3489;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_(): Class_Context {
		let _localctx: Class_Context = new Class_Context(this._ctx, this.state);
		this.enterRule(_localctx, 264, cobolParser.RULE_class_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3491;
			this.match(cobolParser.CLASS);
			this.state = 3493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3492;
				this.separator();
				}
				}
				this.state = 3495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3497;
			this.class_name();
			this.state = 3499;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3498;
				this.separator();
				}
				}
				this.state = 3501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3503;
				this.match(cobolParser.IS);
				this.state = 3505;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3504;
					this.separator();
					}
					}
					this.state = 3507;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3518;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3511;
				this.user_class();
				this.state = 3515;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3512;
						this.separator();
						}
						}
					}
					this.state = 3517;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
				}
				}
				}
				this.state = 3520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_name(): Class_nameContext {
		let _localctx: Class_nameContext = new Class_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, cobolParser.RULE_class_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3522;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_class(): User_classContext {
		let _localctx: User_classContext = new User_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, cobolParser.RULE_user_class);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3524;
			this.first_literal();
			this.state = 3538;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 559, this._ctx) ) {
			case 1:
				{
				this.state = 3526;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3525;
					this.separator();
					}
					}
					this.state = 3528;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3530;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3531;
					this.separator();
					}
					}
					this.state = 3534;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 3536;
				this.last_literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolic_chars(): Symbolic_charsContext {
		let _localctx: Symbolic_charsContext = new Symbolic_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, cobolParser.RULE_symbolic_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3540;
			this.match(cobolParser.SYMBOLIC);
			this.state = 3542;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3541;
				this.separator();
				}
				}
				this.state = 3544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3552;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTERS) {
				{
				this.state = 3546;
				this.match(cobolParser.CHARACTERS);
				this.state = 3548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3547;
					this.separator();
					}
					}
					this.state = 3550;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3554;
				this.symb_ch_definition();
				}
				}
				this.state = 3557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_definition(): Symb_ch_definitionContext {
		let _localctx: Symb_ch_definitionContext = new Symb_ch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, cobolParser.RULE_symb_ch_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3560;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3559;
					this.symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3562;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3565;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 3564;
				this.symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_clause(): Symb_ch_def_clauseContext {
		let _localctx: Symb_ch_def_clauseContext = new Symb_ch_def_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, cobolParser.RULE_symb_ch_def_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3573;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3567;
				this.symbol_char();
				this.state = 3569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3568;
					this.separator();
					}
					}
					this.state = 3571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				}
				this.state = 3575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 3583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARE || _la === cobolParser.IS) {
				{
				this.state = 3577;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ARE || _la === cobolParser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3578;
					this.separator();
					}
					}
					this.state = 3581;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3591;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3585;
				this.char_val();
				this.state = 3587;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3586;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3589;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 570, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				}
				this.state = 3593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext {
		let _localctx: Symb_ch_def_in_alphabetContext = new Symb_ch_def_in_alphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, cobolParser.RULE_symb_ch_def_in_alphabet);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3595;
			this.match(cobolParser.IN);
			this.state = 3597;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3596;
				this.separator();
				}
				}
				this.state = 3599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3601;
			this.alpha_name();
			this.state = 3605;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3602;
					this.separator();
					}
					}
				}
				this.state = 3607;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbol_char(): Symbol_charContext {
		let _localctx: Symbol_charContext = new Symbol_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, cobolParser.RULE_symbol_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3608;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_val(): Char_valContext {
		let _localctx: Char_valContext = new Char_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, cobolParser.RULE_char_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3610;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabet(): AlphabetContext {
		let _localctx: AlphabetContext = new AlphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, cobolParser.RULE_alphabet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3612;
			this.match(cobolParser.ALPHABET);
			this.state = 3614;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3613;
				this.separator();
				}
				}
				this.state = 3616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3618;
			this.alpha_name();
			this.state = 3620;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3619;
				this.separator();
				}
				}
				this.state = 3622;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3624;
				this.match(cobolParser.IS);
				this.state = 3626;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3625;
					this.separator();
					}
					}
					this.state = 3628;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3632;
			this.alpha_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_value(): Alpha_valueContext {
		let _localctx: Alpha_valueContext = new Alpha_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, cobolParser.RULE_alpha_value);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3650;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ASCII:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3634;
				this.match(cobolParser.ASCII);
				}
				break;
			case cobolParser.STANDARD_1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3635;
				this.match(cobolParser.STANDARD_1);
				}
				break;
			case cobolParser.STANDARD_2:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3636;
				this.match(cobolParser.STANDARD_2);
				}
				break;
			case cobolParser.NATIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3637;
				this.match(cobolParser.NATIVE);
				}
				break;
			case cobolParser.EBCDIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3638;
				this.match(cobolParser.EBCDIC);
				}
				break;
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3646;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3639;
					this.user_alpha();
					this.state = 3643;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3640;
							this.separator();
							}
							}
						}
						this.state = 3645;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
					}
					}
					}
					this.state = 3648;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_alpha(): User_alphaContext {
		let _localctx: User_alphaContext = new User_alphaContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, cobolParser.RULE_user_alpha);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3686;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 587, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3652;
				this.first_literal();
				this.state = 3666;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 583, this._ctx) ) {
				case 1:
					{
					this.state = 3654;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3653;
						this.separator();
						}
						}
						this.state = 3656;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3658;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3660;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3659;
						this.separator();
						}
						}
						this.state = 3662;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3664;
					this.last_literal();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3668;
				this.first_literal();
				this.state = 3682;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3670;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3669;
							this.separator();
							}
							}
							this.state = 3672;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 3674;
						this.match(cobolParser.ALSO);
						this.state = 3676;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3675;
							this.separator();
							}
							}
							this.state = 3678;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 3680;
						this.same_literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3684;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_literal(): First_literalContext {
		let _localctx: First_literalContext = new First_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, cobolParser.RULE_first_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3688;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_literal(): Last_literalContext {
		let _localctx: Last_literalContext = new Last_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, cobolParser.RULE_last_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3690;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_literal(): Same_literalContext {
		let _localctx: Same_literalContext = new Same_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, cobolParser.RULE_same_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3692;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_(): Switch_Context {
		let _localctx: Switch_Context = new Switch_Context(this._ctx, this.state);
		this.enterRule(_localctx, 294, cobolParser.RULE_switch_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3694;
			this.match(cobolParser.SWITCH);
			this.state = 3696;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3695;
				this.separator();
				}
				}
				this.state = 3698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3700;
			this.switch_num();
			this.state = 3704;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3701;
					this.separator();
					}
					}
				}
				this.state = 3706;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
			}
			this.state = 3719;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				{
				this.state = 3707;
				this.match(cobolParser.IS);
				this.state = 3709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3708;
					this.separator();
					}
					}
					this.state = 3711;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				this.state = 3713;
				this.switch_name();
				this.state = 3715;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3714;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3717;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 3741;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
				{
				this.state = 3721;
				this.switch_clause_on();
				this.state = 3729;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 594, this._ctx) ) {
				case 1:
					{
					this.state = 3723;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3722;
						this.separator();
						}
						}
						this.state = 3725;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3727;
					this.switch_clause_off();
					}
					break;
				}
				}
				break;
			case cobolParser.OFF:
				{
				this.state = 3731;
				this.switch_clause_off();
				this.state = 3739;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
				case 1:
					{
					this.state = 3733;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3732;
						this.separator();
						}
						}
						this.state = 3735;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 3737;
					this.switch_clause_on();
					}
					break;
				}
				}
				break;
			case cobolParser.ALPHABET:
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.C01:
			case cobolParser.CARD_READER:
			case cobolParser.CLASS:
			case cobolParser.CONSOLE:
			case cobolParser.CRT:
			case cobolParser.CURRENCY:
			case cobolParser.CURSOR:
			case cobolParser.DECIMAL_POINT:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SWITCH:
			case cobolParser.SYMBOLIC:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.DOT_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				break;
			default:
				break;
			}
			this.state = 3746;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3743;
					this.separator();
					}
					}
				}
				this.state = 3748;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_on(): Switch_clause_onContext {
		let _localctx: Switch_clause_onContext = new Switch_clause_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, cobolParser.RULE_switch_clause_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3749;
			this.match(cobolParser.ON);
			this.state = 3751;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3750;
				this.separator();
				}
				}
				this.state = 3753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 3755;
				this.match(cobolParser.STATUS);
				this.state = 3757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3756;
					this.separator();
					}
					}
					this.state = 3759;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3763;
				this.match(cobolParser.IS);
				this.state = 3765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3764;
					this.separator();
					}
					}
					this.state = 3767;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3771;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_off(): Switch_clause_offContext {
		let _localctx: Switch_clause_offContext = new Switch_clause_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, cobolParser.RULE_switch_clause_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3773;
			this.match(cobolParser.OFF);
			this.state = 3775;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3774;
				this.separator();
				}
				}
				this.state = 3777;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3785;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 3779;
				this.match(cobolParser.STATUS);
				this.state = 3781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3780;
					this.separator();
					}
					}
					this.state = 3783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3787;
				this.match(cobolParser.IS);
				this.state = 3789;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3788;
					this.separator();
					}
					}
					this.state = 3791;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3795;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_name(): Cond_nameContext {
		let _localctx: Cond_nameContext = new Cond_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, cobolParser.RULE_cond_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3797;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_name(): Switch_nameContext {
		let _localctx: Switch_nameContext = new Switch_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, cobolParser.RULE_switch_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3799;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_num(): Switch_numContext {
		let _localctx: Switch_numContext = new Switch_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, cobolParser.RULE_switch_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3801;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_of_page_name(): Top_of_page_nameContext {
		let _localctx: Top_of_page_nameContext = new Top_of_page_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, cobolParser.RULE_top_of_page_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3803;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predefined_device(): Predefined_deviceContext {
		let _localctx: Predefined_deviceContext = new Predefined_deviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, cobolParser.RULE_predefined_device);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3805;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CARD_READER || _la === cobolParser.CONSOLE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & ((1 << (cobolParser.SYSERR - 303)) | (1 << (cobolParser.SYSIN - 303)) | (1 << (cobolParser.SYSOUT - 303)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public device_name(): Device_nameContext {
		let _localctx: Device_nameContext = new Device_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, cobolParser.RULE_device_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3807;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env(): Arg_envContext {
		let _localctx: Arg_envContext = new Arg_envContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, cobolParser.RULE_arg_env);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3809;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ARGUMENT_NUMBER || _la === cobolParser.ARGUMENT_VALUE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env_name(): Arg_env_nameContext {
		let _localctx: Arg_env_nameContext = new Arg_env_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, cobolParser.RULE_arg_env_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3811;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_control(): File_controlContext {
		let _localctx: File_controlContext = new File_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, cobolParser.RULE_file_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3813;
			this.match(cobolParser.FILE_CONTROL);
			this.state = 3817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3814;
				this.separator();
				}
				}
				this.state = 3819;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3820;
			this.match(cobolParser.DOT_);
			this.state = 3824;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3821;
					this.separator();
					}
					}
				}
				this.state = 3826;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
			}
			this.state = 3836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SELECT) {
				{
				{
				this.state = 3827;
				this.select();
				this.state = 3831;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3828;
						this.separator();
						}
						}
					}
					this.state = 3833;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
				}
				}
				}
				this.state = 3838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select(): SelectContext {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, cobolParser.RULE_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3839;
			this.match(cobolParser.SELECT);
			this.state = 3841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3840;
				this.separator();
				}
				}
				this.state = 3843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONAL) {
				{
				this.state = 3845;
				this.match(cobolParser.OPTIONAL);
				this.state = 3847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3846;
					this.separator();
					}
					}
					this.state = 3849;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3853;
			this.file_name();
			this.state = 3857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3854;
				this.separator();
				}
				}
				this.state = 3859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3860;
			this.assign_to();
			this.state = 3864;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 3861;
				this.separator();
				}
				}
				this.state = 3866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RESERVE) {
				{
				this.state = 3867;
				this.reserve();
				this.state = 3871;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3868;
					this.separator();
					}
					}
					this.state = 3873;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3883;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 621, this._ctx) ) {
			case 1:
				{
				this.state = 3876;
				this.organization();
				this.state = 3880;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3877;
					this.separator();
					}
					}
					this.state = 3882;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 3892;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BLOCK) {
				{
				this.state = 3885;
				this.block_contains();
				this.state = 3889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3886;
					this.separator();
					}
					}
					this.state = 3891;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CODE_SET) {
				{
				this.state = 3894;
				this.code_set();
				this.state = 3898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3895;
					this.separator();
					}
					}
					this.state = 3900;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3910;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PADDING) {
				{
				this.state = 3903;
				this.padding();
				this.state = 3907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3904;
					this.separator();
					}
					}
					this.state = 3909;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3919;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 629, this._ctx) ) {
			case 1:
				{
				this.state = 3912;
				this.record_delimiter();
				this.state = 3916;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3913;
					this.separator();
					}
					}
					this.state = 3918;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 3928;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS || _la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL) {
				{
				this.state = 3921;
				this.access_mode();
				this.state = 3925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3922;
					this.separator();
					}
					}
					this.state = 3927;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ALTERNATE || _la === cobolParser.RECORD) {
				{
				{
				this.state = 3930;
				this.record_key();
				this.state = 3934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3931;
					this.separator();
					}
					}
					this.state = 3936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3949;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LOCK) {
				{
				this.state = 3942;
				this.lock_mode();
				this.state = 3946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3943;
					this.separator();
					}
					}
					this.state = 3948;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3958;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE || _la === cobolParser.STATUS) {
				{
				this.state = 3951;
				this.file_status();
				this.state = 3955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 3952;
					this.separator();
					}
					}
					this.state = 3957;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3960;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_status(): File_statusContext {
		let _localctx: File_statusContext = new File_statusContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, cobolParser.RULE_file_status);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 3962;
				this.match(cobolParser.FILE);
				this.state = 3964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3963;
					this.separator();
					}
					}
					this.state = 3966;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3970;
			this.match(cobolParser.STATUS);
			this.state = 3972;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3971;
				this.separator();
				}
				}
				this.state = 3974;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 3982;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3976;
				this.match(cobolParser.IS);
				this.state = 3978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3977;
					this.separator();
					}
					}
					this.state = 3980;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3984;
			this.file_stat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_stat(): File_statContext {
		let _localctx: File_statContext = new File_statContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, cobolParser.RULE_file_stat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3986;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key(): Record_keyContext {
		let _localctx: Record_keyContext = new Record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, cobolParser.RULE_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALTERNATE) {
				{
				this.state = 3988;
				this.match(cobolParser.ALTERNATE);
				this.state = 3990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3989;
					this.separator();
					}
					}
					this.state = 3992;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 3996;
			this.match(cobolParser.RECORD);
			this.state = 3998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3997;
				this.separator();
				}
				}
				this.state = 4000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4008;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 4002;
				this.match(cobolParser.KEY);
				this.state = 4004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4003;
					this.separator();
					}
					}
					this.state = 4006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4016;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4010;
				this.match(cobolParser.IS);
				this.state = 4012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4011;
					this.separator();
					}
					}
					this.state = 4014;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4018;
			this.record_key_definition();
			this.state = 4034;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 653, this._ctx) ) {
			case 1:
				{
				this.state = 4020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4019;
					this.separator();
					}
					}
					this.state = 4022;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4024;
					this.match(cobolParser.WITH);
					this.state = 4026;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4025;
						this.separator();
						}
						}
						this.state = 4028;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4032;
				this.match(cobolParser.DUPLICATES);
				}
				break;
			}
			this.state = 4043;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 655, this._ctx) ) {
			case 1:
				{
				this.state = 4037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4036;
					this.separator();
					}
					}
					this.state = 4039;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4041;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key_definition(): Record_key_definitionContext {
		let _localctx: Record_key_definitionContext = new Record_key_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, cobolParser.RULE_record_key_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4073;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 660, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4045;
				this.qualified_data_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4046;
				this.match(cobolParser.USER_DEFINED_WORD);
				this.state = 4050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 4047;
					this.separator();
					}
					}
					this.state = 4052;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4053;
				this.match(cobolParser.EQUAL_);
				this.state = 4057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 4054;
					this.separator();
					}
					}
					this.state = 4059;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4060;
				this.qualified_data_item();
				this.state = 4070;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4064;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
							{
							{
							this.state = 4061;
							this.separator();
							}
							}
							this.state = 4066;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 4067;
						this.qualified_data_item();
						}
						}
					}
					this.state = 4072;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public access_mode(): Access_modeContext {
		let _localctx: Access_modeContext = new Access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, cobolParser.RULE_access_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS) {
				{
				this.state = 4075;
				this.match(cobolParser.ACCESS);
				this.state = 4077;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4076;
					this.separator();
					}
					}
					this.state = 4079;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MODE) {
					{
					this.state = 4081;
					this.match(cobolParser.MODE);
					this.state = 4083;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4082;
						this.separator();
						}
						}
						this.state = 4085;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4095;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4089;
					this.match(cobolParser.IS);
					this.state = 4091;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4090;
						this.separator();
						}
						}
						this.state = 4093;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				}
			}

			this.state = 4099;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 673, this._ctx) ) {
			case 1:
				{
				this.state = 4101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4100;
					this.separator();
					}
					}
					this.state = 4103;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4105;
				this.match(cobolParser.RELATIVE);
				this.state = 4107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4106;
					this.separator();
					}
					}
					this.state = 4109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 4111;
					this.match(cobolParser.KEY);
					this.state = 4113;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4112;
						this.separator();
						}
						}
						this.state = 4115;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4125;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4119;
					this.match(cobolParser.IS);
					this.state = 4121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4120;
						this.separator();
						}
						}
						this.state = 4123;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4127;
				this.qualified_data_item();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve(): ReserveContext {
		let _localctx: ReserveContext = new ReserveContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, cobolParser.RULE_reserve);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4131;
			this.match(cobolParser.RESERVE);
			this.state = 4133;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4132;
				this.separator();
				}
				}
				this.state = 4135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4137;
			this.reserve_num();
			this.state = 4145;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 676, this._ctx) ) {
			case 1:
				{
				this.state = 4139;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4138;
					this.separator();
					}
					}
					this.state = 4141;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4143;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AREA || _la === cobolParser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve_num(): Reserve_numContext {
		let _localctx: Reserve_numContext = new Reserve_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, cobolParser.RULE_reserve_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4147;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_delimiter(): Record_delimiterContext {
		let _localctx: Record_delimiterContext = new Record_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, cobolParser.RULE_record_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4149;
			this.match(cobolParser.RECORD);
			this.state = 4151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4150;
				this.separator();
				}
				}
				this.state = 4153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4155;
			this.match(cobolParser.DELIMITER);
			this.state = 4157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4156;
				this.separator();
				}
				}
				this.state = 4159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4161;
				this.match(cobolParser.IS);
				this.state = 4163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4162;
					this.separator();
					}
					}
					this.state = 4165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4169;
			this.match(cobolParser.STANDARD_1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public padding(): PaddingContext {
		let _localctx: PaddingContext = new PaddingContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, cobolParser.RULE_padding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4171;
			this.match(cobolParser.PADDING);
			this.state = 4173;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4172;
				this.separator();
				}
				}
				this.state = 4175;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTER) {
				{
				this.state = 4177;
				this.match(cobolParser.CHARACTER);
				this.state = 4179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4178;
					this.separator();
					}
					}
					this.state = 4181;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4185;
				this.match(cobolParser.IS);
				this.state = 4187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4186;
					this.separator();
					}
					}
					this.state = 4189;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4193;
			this.pad_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pad_char(): Pad_charContext {
		let _localctx: Pad_charContext = new Pad_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, cobolParser.RULE_pad_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4195;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public organization(): OrganizationContext {
		let _localctx: OrganizationContext = new OrganizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, cobolParser.RULE_organization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4209;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ORGANIZATION) {
				{
				this.state = 4197;
				this.match(cobolParser.ORGANIZATION);
				this.state = 4199;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4198;
					this.separator();
					}
					}
					this.state = 4201;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				{
				this.state = 4203;
				this.match(cobolParser.IS);
				this.state = 4205;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4204;
					this.separator();
					}
					}
					this.state = 4207;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				}
			}

			this.state = 4222;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SEQUENTIAL:
				{
				this.state = 4211;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.LINE:
				{
				this.state = 4212;
				this.match(cobolParser.LINE);
				this.state = 4214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4213;
					this.separator();
					}
					}
					this.state = 4216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4218;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.RELATIVE:
				{
				this.state = 4220;
				this.match(cobolParser.RELATIVE);
				}
				break;
			case cobolParser.INDEXED:
				{
				this.state = 4221;
				this.match(cobolParser.INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode(): Lock_modeContext {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, cobolParser.RULE_lock_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4224;
			this.match(cobolParser.LOCK);
			this.state = 4226;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4225;
				this.separator();
				}
				}
				this.state = 4228;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.MODE) {
				{
				this.state = 4230;
				this.match(cobolParser.MODE);
				this.state = 4232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4231;
					this.separator();
					}
					}
					this.state = 4234;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4238;
				this.match(cobolParser.IS);
				this.state = 4240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4239;
					this.separator();
					}
					}
					this.state = 4242;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4246;
			this.lock_mode_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode_definition(): Lock_mode_definitionContext {
		let _localctx: Lock_mode_definitionContext = new Lock_mode_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, cobolParser.RULE_lock_mode_definition);
		let _la: number;
		try {
			this.state = 4316;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.MANUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4248;
				this.match(cobolParser.MANUAL);
				this.state = 4250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4249;
					this.separator();
					}
					}
					this.state = 4252;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4254;
					this.match(cobolParser.WITH);
					this.state = 4256;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4255;
						this.separator();
						}
						}
						this.state = 4258;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4262;
				this.match(cobolParser.LOCK);
				this.state = 4264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4263;
					this.separator();
					}
					}
					this.state = 4266;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4268;
				this.match(cobolParser.ON);
				this.state = 4270;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4269;
					this.separator();
					}
					}
					this.state = 4272;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4274;
				this.match(cobolParser.MULTIPLE);
				this.state = 4276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4275;
					this.separator();
					}
					}
					this.state = 4278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4280;
				this.match(cobolParser.RECORDS);
				}
				break;
			case cobolParser.AUTOMATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4282;
				this.match(cobolParser.AUTOMATIC);
				this.state = 4313;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 708, this._ctx) ) {
				case 1:
					{
					this.state = 4284;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4283;
						this.separator();
						}
						}
						this.state = 4286;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 4294;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 4288;
						this.match(cobolParser.WITH);
						this.state = 4290;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4289;
							this.separator();
							}
							}
							this.state = 4292;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					this.state = 4311;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.LOCK:
						{
						{
						this.state = 4296;
						this.match(cobolParser.LOCK);
						this.state = 4298;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4297;
							this.separator();
							}
							}
							this.state = 4300;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 4302;
						this.match(cobolParser.ON);
						this.state = 4304;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4303;
							this.separator();
							}
							}
							this.state = 4306;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						this.state = 4308;
						this.match(cobolParser.RECORD);
						}
						}
						break;
					case cobolParser.ROLLBACK:
						{
						this.state = 4310;
						this.match(cobolParser.ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.EXCLUSIVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4315;
				this.match(cobolParser.EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code_set(): Code_setContext {
		let _localctx: Code_setContext = new Code_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, cobolParser.RULE_code_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4318;
			this.match(cobolParser.CODE_SET);
			this.state = 4320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4319;
				this.separator();
				}
				}
				this.state = 4322;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4330;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4324;
				this.match(cobolParser.IS);
				this.state = 4326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4325;
					this.separator();
					}
					}
					this.state = 4328;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4332;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_contains(): Block_containsContext {
		let _localctx: Block_containsContext = new Block_containsContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, cobolParser.RULE_block_contains);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4334;
			this.match(cobolParser.BLOCK);
			this.state = 4336;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4335;
				this.separator();
				}
				}
				this.state = 4338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 4340;
				this.match(cobolParser.CONTAINS);
				this.state = 4342;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4341;
					this.separator();
					}
					}
					this.state = 4344;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4360;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 718, this._ctx) ) {
			case 1:
				{
				this.state = 4348;
				this.smallest_block();
				this.state = 4350;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4349;
					this.separator();
					}
					}
					this.state = 4352;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4354;
				this.match(cobolParser.TO);
				this.state = 4356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4355;
					this.separator();
					}
					}
					this.state = 4358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				break;
			}
			this.state = 4362;
			this.blocksize();
			this.state = 4364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4363;
				this.separator();
				}
				}
				this.state = 4366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4368;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.RECORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public smallest_block(): Smallest_blockContext {
		let _localctx: Smallest_blockContext = new Smallest_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, cobolParser.RULE_smallest_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4370;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocksize(): BlocksizeContext {
		let _localctx: BlocksizeContext = new BlocksizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, cobolParser.RULE_blocksize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4372;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to(): Assign_toContext {
		let _localctx: Assign_toContext = new Assign_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, cobolParser.RULE_assign_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4374;
			this.match(cobolParser.ASSIGN);
			this.state = 4376;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4375;
				this.separator();
				}
				}
				this.state = 4378;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4386;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TO) {
				{
				this.state = 4380;
				this.match(cobolParser.TO);
				this.state = 4382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4381;
					this.separator();
					}
					}
					this.state = 4384;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4388;
			this.assign_to_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to_definition(): Assign_to_definitionContext {
		let _localctx: Assign_to_definitionContext = new Assign_to_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, cobolParser.RULE_assign_to_definition);
		let _la: number;
		try {
			this.state = 4417;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DISK:
			case cobolParser.DYNAMIC:
			case cobolParser.EXTERNAL:
			case cobolParser.PRINTER:
			case cobolParser.STRING_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL) {
					{
					this.state = 4390;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4392;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4391;
						this.separator();
						}
						}
						this.state = 4394;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4398;
				this.file_spec();
				}
				break;
			case cobolParser.MULTIPLE:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4405;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MULTIPLE) {
					{
					this.state = 4399;
					this.match(cobolParser.MULTIPLE);
					this.state = 4401;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4400;
						this.separator();
						}
						}
						this.state = 4403;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4407;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4415;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 728, this._ctx) ) {
				case 1:
					{
					this.state = 4409;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4408;
						this.separator();
						}
						}
						this.state = 4411;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 4413;
					this.match(cobolParser.FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_spec(): File_specContext {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, cobolParser.RULE_file_spec);
		try {
			this.state = 4423;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4419;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4420;
				this.qualified_data_item();
				}
				break;
			case cobolParser.DISK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4421;
				this.match(cobolParser.DISK);
				}
				break;
			case cobolParser.PRINTER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4422;
				this.match(cobolParser.PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, cobolParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4425;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public i_o_control(): I_o_controlContext {
		let _localctx: I_o_controlContext = new I_o_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, cobolParser.RULE_i_o_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4427;
			this.match(cobolParser.I_O_CONTROL);
			this.state = 4431;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 4428;
				this.separator();
				}
				}
				this.state = 4433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4434;
			this.match(cobolParser.DOT_);
			this.state = 4438;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 732, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4435;
					this.separator();
					}
					}
				}
				this.state = 4440;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 732, this._ctx);
			}
			this.state = 4496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME || _la === cobolParser.DOT_) {
				{
				this.state = 4450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.APPLY) {
					{
					{
					this.state = 4441;
					this.apply();
					this.state = 4445;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4442;
						this.separator();
						}
						}
						this.state = 4447;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4452;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.SAME) {
					{
					{
					this.state = 4453;
					this.same();
					this.state = 4457;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4454;
						this.separator();
						}
						}
						this.state = 4459;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.RERUN) {
					{
					{
					this.state = 4465;
					this.rerun();
					this.state = 4469;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4466;
						this.separator();
						}
						}
						this.state = 4471;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4476;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.MULTIPLE) {
					{
					{
					this.state = 4477;
					this.multiple_file();
					this.state = 4481;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4478;
						this.separator();
						}
						}
						this.state = 4483;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4488;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4489;
				this.match(cobolParser.DOT_);
				this.state = 4493;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 741, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4490;
						this.separator();
						}
						}
					}
					this.state = 4495;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 741, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file(): Multiple_fileContext {
		let _localctx: Multiple_fileContext = new Multiple_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, cobolParser.RULE_multiple_file);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4498;
			this.match(cobolParser.MULTIPLE);
			this.state = 4500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4499;
				this.separator();
				}
				}
				this.state = 4502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4504;
			this.match(cobolParser.FILE);
			this.state = 4506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4505;
				this.separator();
				}
				}
				this.state = 4508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TAPE) {
				{
				this.state = 4510;
				this.match(cobolParser.TAPE);
				this.state = 4512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4511;
					this.separator();
					}
					}
					this.state = 4514;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 4518;
				this.match(cobolParser.CONTAINS);
				this.state = 4520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4519;
					this.separator();
					}
					}
					this.state = 4522;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4533;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4526;
				this.multiple_file_definition();
				this.state = 4530;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 749, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4527;
						this.separator();
						}
						}
					}
					this.state = 4532;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 749, this._ctx);
				}
				}
				}
				this.state = 4535;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_definition(): Multiple_file_definitionContext {
		let _localctx: Multiple_file_definitionContext = new Multiple_file_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, cobolParser.RULE_multiple_file_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4537;
			this.multiple_file_name();
			this.state = 4551;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 753, this._ctx) ) {
			case 1:
				{
				this.state = 4539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4538;
					this.separator();
					}
					}
					this.state = 4541;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4543;
				this.match(cobolParser.POSITION);
				this.state = 4545;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4544;
					this.separator();
					}
					}
					this.state = 4547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4549;
				this.pos_integer();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_name(): Multiple_file_nameContext {
		let _localctx: Multiple_file_nameContext = new Multiple_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, cobolParser.RULE_multiple_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4553;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos_integer(): Pos_integerContext {
		let _localctx: Pos_integerContext = new Pos_integerContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, cobolParser.RULE_pos_integer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4555;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun(): RerunContext {
		let _localctx: RerunContext = new RerunContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, cobolParser.RULE_rerun);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4557;
			this.match(cobolParser.RERUN);
			this.state = 4559;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4558;
				this.separator();
				}
				}
				this.state = 4561;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4575;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 4563;
				this.match(cobolParser.ON);
				this.state = 4565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4564;
					this.separator();
					}
					}
					this.state = 4567;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4569;
				this.file_name();
				this.state = 4571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4570;
					this.separator();
					}
					}
					this.state = 4573;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EVERY) {
				{
				this.state = 4577;
				this.match(cobolParser.EVERY);
				this.state = 4579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4578;
					this.separator();
					}
					}
					this.state = 4581;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4585;
			this.rerun_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_definition(): Rerun_definitionContext {
		let _localctx: Rerun_definitionContext = new Rerun_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, cobolParser.RULE_rerun_definition);
		let _la: number;
		try {
			this.state = 4612;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 764, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4587;
				this.rerun_def_file();
				this.state = 4589;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4588;
					this.separator();
					}
					}
					this.state = 4591;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 4593;
					this.match(cobolParser.OF);
					this.state = 4595;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4594;
						this.separator();
						}
						}
						this.state = 4597;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4601;
				this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4603;
				this.clock_count();
				this.state = 4605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4604;
					this.separator();
					}
					}
					this.state = 4607;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4609;
				this.match(cobolParser.CLOCK_UNITS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4611;
				this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clock_count(): Clock_countContext {
		let _localctx: Clock_countContext = new Clock_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, cobolParser.RULE_clock_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4614;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_name(): Condition_nameContext {
		let _localctx: Condition_nameContext = new Condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, cobolParser.RULE_condition_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4616;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_def_file(): Rerun_def_fileContext {
		let _localctx: Rerun_def_fileContext = new Rerun_def_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, cobolParser.RULE_rerun_def_file);
		let _la: number;
		try {
			this.state = 4643;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.END:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.END) {
					{
					this.state = 4618;
					this.match(cobolParser.END);
					this.state = 4620;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4619;
						this.separator();
						}
						}
						this.state = 4622;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 4630;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OF) {
						{
						this.state = 4624;
						this.match(cobolParser.OF);
						this.state = 4626;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4625;
							this.separator();
							}
							}
							this.state = 4628;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
						}
					}

					}
				}

				this.state = 4634;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4635;
				this.rec_count();
				this.state = 4637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4636;
					this.separator();
					}
					}
					this.state = 4639;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4641;
				this.match(cobolParser.RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_count(): Rec_countContext {
		let _localctx: Rec_countContext = new Rec_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, cobolParser.RULE_rec_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4645;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same(): SameContext {
		let _localctx: SameContext = new SameContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, cobolParser.RULE_same);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4647;
			this.match(cobolParser.SAME);
			this.state = 4649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4648;
				this.separator();
				}
				}
				this.state = 4651;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4659;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE) {
				{
				this.state = 4653;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4654;
					this.separator();
					}
					}
					this.state = 4657;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA) {
				{
				this.state = 4661;
				this.match(cobolParser.AREA);
				this.state = 4663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4662;
					this.separator();
					}
					}
					this.state = 4665;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4675;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOR) {
				{
				this.state = 4669;
				this.match(cobolParser.FOR);
				this.state = 4671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4670;
					this.separator();
					}
					}
					this.state = 4673;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
			}

			this.state = 4677;
			this.same_area_file();
			this.state = 4685;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4679;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4678;
						this.separator();
						}
						}
						this.state = 4681;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					this.state = 4683;
					this.same_area_file();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4687;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 779, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_area_file(): Same_area_fileContext {
		let _localctx: Same_area_fileContext = new Same_area_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, cobolParser.RULE_same_area_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4689;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply(): ApplyContext {
		let _localctx: ApplyContext = new ApplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, cobolParser.RULE_apply);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4691;
			this.match(cobolParser.APPLY);
			this.state = 4693;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4692;
				this.separator();
				}
				}
				this.state = 4695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4697;
				this.apply_definition();
				this.state = 4699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4698;
					this.separator();
					}
					}
					this.state = 4701;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				}
				}
				this.state = 4705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 71)) & ~0x1F) === 0 && ((1 << (_la - 71)) & ((1 << (cobolParser.CONTIGUOUS - 71)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 71)) | (1 << (cobolParser.DEFERRED_WRITE - 71)))) !== 0) || _la === cobolParser.EXTENSION || _la === cobolParser.FILL_SIZE || _la === cobolParser.LOCK_HOLDING || _la === cobolParser.MASS_INSERT || _la === cobolParser.PREALLOCATION || _la === cobolParser.PRINT_CONTROL || _la === cobolParser.WINDOW);
			this.state = 4707;
			this.match(cobolParser.ON);
			this.state = 4709;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4708;
				this.separator();
				}
				}
				this.state = 4711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
			this.state = 4720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4713;
				this.file_name();
				this.state = 4717;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 784, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4714;
						this.separator();
						}
						}
					}
					this.state = 4719;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 784, this._ctx);
				}
				}
				}
				this.state = 4722;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply_definition(): Apply_definitionContext {
		let _localctx: Apply_definitionContext = new Apply_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, cobolParser.RULE_apply_definition);
		let _la: number;
		try {
			this.state = 4761;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DEFERRED_WRITE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4724;
				this.match(cobolParser.DEFERRED_WRITE);
				}
				break;
			case cobolParser.EXTENSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4725;
				this.match(cobolParser.EXTENSION);
				this.state = 4727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4726;
					this.separator();
					}
					}
					this.state = 4729;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4731;
				this.extend_amt();
				}
				break;
			case cobolParser.FILL_SIZE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4733;
				this.match(cobolParser.FILL_SIZE);
				}
				break;
			case cobolParser.LOCK_HOLDING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4734;
				this.match(cobolParser.LOCK_HOLDING);
				}
				break;
			case cobolParser.MASS_INSERT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4735;
				this.match(cobolParser.MASS_INSERT);
				}
				break;
			case cobolParser.CONTIGUOUS:
			case cobolParser.CONTIGUOUS_BEST_TRY:
			case cobolParser.PREALLOCATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY) {
					{
					this.state = 4736;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4738;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4737;
						this.separator();
						}
						}
						this.state = 4740;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
					}
				}

				this.state = 4744;
				this.match(cobolParser.PREALLOCATION);
				this.state = 4746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4745;
					this.separator();
					}
					}
					this.state = 4748;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4750;
				this.preall_amt();
				}
				break;
			case cobolParser.PRINT_CONTROL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4752;
				this.match(cobolParser.PRINT_CONTROL);
				}
				break;
			case cobolParser.WINDOW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4753;
				this.match(cobolParser.WINDOW);
				this.state = 4755;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4754;
					this.separator();
					}
					}
					this.state = 4757;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0));
				this.state = 4759;
				this.window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_ptrs(): Window_ptrsContext {
		let _localctx: Window_ptrsContext = new Window_ptrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, cobolParser.RULE_window_ptrs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4763;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preall_amt(): Preall_amtContext {
		let _localctx: Preall_amtContext = new Preall_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, cobolParser.RULE_preall_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4765;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extend_amt(): Extend_amtContext {
		let _localctx: Extend_amtContext = new Extend_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, cobolParser.RULE_extend_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4767;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public arithmetic_expression(): Arithmetic_expressionContext;
	public arithmetic_expression(_p: number): Arithmetic_expressionContext;
	// @RuleVersion(0)
	public arithmetic_expression(_p?: number): Arithmetic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Arithmetic_expressionContext = new Arithmetic_expressionContext(this._ctx, _parentState);
		let _prevctx: Arithmetic_expressionContext = _localctx;
		let _startState: number = 398;
		this.enterRecursionRule(_localctx, 398, cobolParser.RULE_arithmetic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4800;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LPAREN_:
				{
				this.state = 4770;
				this.match(cobolParser.LPAREN_);
				this.state = 4774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 4771;
					this.arithmetic_separator();
					}
					}
					this.state = 4776;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4777;
				this.arithmetic_expression(0);
				this.state = 4781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 4778;
					this.arithmetic_separator();
					}
					}
					this.state = 4783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4784;
				this.match(cobolParser.RPAREN_);
				}
				break;
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
				{
				this.state = 4786;
				this.unary_arithmetic_operator();
				this.state = 4790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 4787;
					this.arithmetic_separator();
					}
					}
					this.state = 4792;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4793;
				this.arithmetic_expression(6);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 4795;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 4796;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.ZERO:
				{
				this.state = 4797;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.ZEROS:
				{
				this.state = 4798;
				this.match(cobolParser.ZEROS);
				}
				break;
			case cobolParser.ZEROES:
				{
				this.state = 4799;
				this.match(cobolParser.ZEROES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 4820;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 798, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_arithmetic_expression);
					this.state = 4802;
					if (!(this.precpred(this._ctx, 7))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 7)");
					}
					this.state = 4806;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4803;
						this.arithmetic_separator();
						}
						}
						this.state = 4808;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4809;
					this.binary_arithmetic_operator();
					this.state = 4813;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4810;
						this.arithmetic_separator();
						}
						}
						this.state = 4815;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4816;
					this.arithmetic_expression(8);
					}
					}
				}
				this.state = 4822;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 798, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext {
		let _localctx: Binary_arithmetic_operatorContext = new Binary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, cobolParser.RULE_binary_arithmetic_operator);
		try {
			this.state = 4829;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 799, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4823;
				this.match(cobolParser.PLUS_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4824;
				this.match(cobolParser.MINUS_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4825;
				this.match(cobolParser.STAR_);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4826;
				this.match(cobolParser.SLASH_);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4827;
				this.match(cobolParser.STAR_);
				this.state = 4828;
				this.match(cobolParser.STAR_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext {
		let _localctx: Unary_arithmetic_operatorContext = new Unary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, cobolParser.RULE_unary_arithmetic_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4831;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PLUS_ || _la === cobolParser.MINUS_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, cobolParser.RULE_identifier);
		let _la: number;
		try {
			this.state = 4878;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4833;
				this.qualified_data_item();
				this.state = 4841;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 801, this._ctx) ) {
				case 1:
					{
					this.state = 4837;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4834;
						this.arithmetic_separator();
						}
						}
						this.state = 4839;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4840;
					this.subscripting();
					}
					break;
				}
				this.state = 4850;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 803, this._ctx) ) {
				case 1:
					{
					this.state = 4846;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4843;
						this.arithmetic_separator();
						}
						}
						this.state = 4848;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4849;
					this.reference_modification();
					}
					break;
				}
				}
				break;
			case cobolParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4852;
				this.match(cobolParser.FUNCTION);
				this.state = 4856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 4853;
					this.arithmetic_separator();
					}
					}
					this.state = 4858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4859;
				this.function_name();
				this.state = 4867;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 806, this._ctx) ) {
				case 1:
					{
					this.state = 4863;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4860;
						this.arithmetic_separator();
						}
						}
						this.state = 4865;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4866;
					this.arguments();
					}
					break;
				}
				this.state = 4876;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 808, this._ctx) ) {
				case 1:
					{
					this.state = 4872;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4869;
						this.arithmetic_separator();
						}
						}
						this.state = 4874;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4875;
					this.reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arguments(): ArgumentsContext {
		let _localctx: ArgumentsContext = new ArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, cobolParser.RULE_arguments);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4880;
			this.subscripting();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subscripting(): SubscriptingContext {
		let _localctx: SubscriptingContext = new SubscriptingContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, cobolParser.RULE_subscripting);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4882;
			this.match(cobolParser.LPAREN_);
			this.state = 4886;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 4883;
				this.arithmetic_separator();
				}
				}
				this.state = 4888;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4891;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
			case cobolParser.LPAREN_:
			case cobolParser.NUMERIC_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 4889;
				this.arithmetic_expression(0);
				}
				break;
			case cobolParser.ALL:
				{
				this.state = 4890;
				this.match(cobolParser.ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4905;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 814, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.COMMA_ - 341)) | (1 << (cobolParser.SEMI_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
						{
						{
						this.state = 4893;
						this.separator();
						}
						}
						this.state = 4898;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4901;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.FUNCTION:
					case cobolParser.ZERO:
					case cobolParser.ZEROES:
					case cobolParser.ZEROS:
					case cobolParser.PLUS_:
					case cobolParser.MINUS_:
					case cobolParser.LPAREN_:
					case cobolParser.NUMERIC_LITERAL:
					case cobolParser.USER_DEFINED_WORD:
						{
						this.state = 4899;
						this.arithmetic_expression(0);
						}
						break;
					case cobolParser.ALL:
						{
						this.state = 4900;
						this.match(cobolParser.ALL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 4907;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 814, this._ctx);
			}
			this.state = 4911;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 4908;
				this.arithmetic_separator();
				}
				}
				this.state = 4913;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4914;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reference_modification(): Reference_modificationContext {
		let _localctx: Reference_modificationContext = new Reference_modificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, cobolParser.RULE_reference_modification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4916;
			this.match(cobolParser.LPAREN_);
			this.state = 4920;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 4917;
				this.arithmetic_separator();
				}
				}
				this.state = 4922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4923;
			this.leftmost_character_position();
			this.state = 4927;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 4924;
				this.arithmetic_separator();
				}
				}
				this.state = 4929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4930;
			this.match(cobolParser.COLON_);
			this.state = 4938;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 819, this._ctx) ) {
			case 1:
				{
				this.state = 4934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
					{
					{
					this.state = 4931;
					this.arithmetic_separator();
					}
					}
					this.state = 4936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4937;
				this.length();
				}
				break;
			}
			this.state = 4943;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (cobolParser.START_SLASH_ - 341)) | (1 << (cobolParser.START_STAR_ - 341)) | (1 << (cobolParser.START_FOUR_SPACES - 341)) | (1 << (cobolParser.WHITESPACE - 341)) | (1 << (cobolParser.NEWLINE - 341)))) !== 0)) {
				{
				{
				this.state = 4940;
				this.arithmetic_separator();
				}
				}
				this.state = 4945;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4946;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leftmost_character_position(): Leftmost_character_positionContext {
		let _localctx: Leftmost_character_positionContext = new Leftmost_character_positionContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, cobolParser.RULE_leftmost_character_position);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4948;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public length(): LengthContext {
		let _localctx: LengthContext = new LengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, cobolParser.RULE_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4950;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_name(): Function_nameContext {
		let _localctx: Function_nameContext = new Function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, cobolParser.RULE_function_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4952;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 199:
			return this.arithmetic_expression_sempred(_localctx as Arithmetic_expressionContext, predIndex);
		}
		return true;
	}
	private arithmetic_expression_sempred(_localctx: Arithmetic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 7);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 10;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0176\u135D\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x03\x02\x03\x02\x07\x02\u01A7\n\x02\f\x02\x0E\x02\u01AA" +
		"\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x05\x03\u01B4\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u01BA\n\x04" +
		"\x03\x05\x03\x05\x07\x05\u01BE\n\x05\f\x05\x0E\x05\u01C1\v\x05\x03\x05" +
		"\x03\x05\x03\x05\x07\x05\u01C6\n\x05\f\x05\x0E\x05\u01C9\v\x05\x03\x05" +
		"\x05\x05\u01CC\n\x05\x03\x06\x03\x06\x05\x06\u01D0\n\x06\x03\x06\x05\x06" +
		"\u01D3\n\x06\x03\x06\x05\x06\u01D6\n\x06\x03\x07\x03\x07\x06\x07\u01DA" +
		"\n\x07\r\x07\x0E\x07\u01DB\x03\x07\x03\x07\x07\x07\u01E0\n\x07\f\x07\x0E" +
		"\x07\u01E3\v\x07\x03\x07\x03\x07\x07\x07\u01E7\n\x07\f\x07\x0E\x07\u01EA" +
		"\v\x07\x03\x07\x03\x07\x07\x07\u01EE\n\x07\f\x07\x0E\x07\u01F1\v\x07\x03" +
		"\x07\x03\x07\x03\x07\x07\x07\u01F6\n\x07\f\x07\x0E\x07\u01F9\v\x07\x03" +
		"\b\x03\b\x06\b\u01FD\n\b\r\b\x0E\b\u01FE\x03\b\x03\b\x07\b\u0203\n\b\f" +
		"\b\x0E\b\u0206\v\b\x03\b\x03\b\x07\b\u020A\n\b\f\b\x0E\b\u020D\v\b\x03" +
		"\b\x03\b\x07\b\u0211\n\b\f\b\x0E\b\u0214\v\b\x05\b\u0216\n\b\x03\b\x03" +
		"\b\x07\b\u021A\n\b\f\b\x0E\b\u021D\v\b\x05\b\u021F\n\b\x03\b\x03\b\x07" +
		"\b\u0223\n\b\f\b\x0E\b\u0226\v\b\x05\b\u0228\n\b\x03\b\x03\b\x07\b\u022C" +
		"\n\b\f\b\x0E\b\u022F\v\b\x05\b\u0231\n\b\x03\b\x03\b\x07\b\u0235\n\b\f" +
		"\b\x0E\b\u0238\v\b\x05\b\u023A\n\b\x03\t\x03\t\x06\t\u023E\n\t\r\t\x0E" +
		"\t\u023F\x03\t\x03\t\x07\t\u0244\n\t\f\t\x0E\t\u0247\v\t\x03\t\x03\t\x07" +
		"\t\u024B\n\t\f\t\x0E\t\u024E\v\t\x03\t\x03\t\x07\t\u0252\n\t\f\t\x0E\t" +
		"\u0255\v\t\x03\t\x07\t\u0258\n\t\f\t\x0E\t\u025B\v\t\x03\t\x03\t\x03\t" +
		"\x07\t\u0260\n\t\f\t\x0E\t\u0263\v\t\x03\t\x07\t\u0266\n\t\f\t\x0E\t\u0269" +
		"\v\t\x05\t\u026B\n\t\x03\t\x07\t\u026E\n\t\f\t\x0E\t\u0271\v\t\x07\t\u0273" +
		"\n\t\f\t\x0E\t\u0276\v\t\x03\n\x03\n\x06\n\u027A\n\n\r\n\x0E\n\u027B\x03" +
		"\n\x03\n\x07\n\u0280\n\n\f\n\x0E\n\u0283\v\n\x03\n\x03\n\x07\n\u0287\n" +
		"\n\f\n\x0E\n\u028A\v\n\x03\n\x03\n\x07\n\u028E\n\n\f\n\x0E\n\u0291\v\n" +
		"\x07\n\u0293\n\n\f\n\x0E\n\u0296\v\n\x03\v\x03\v\x06\v\u029A\n\v\r\v\x0E" +
		"\v\u029B\x03\v\x03\v\x07\v\u02A0\n\v\f\v\x0E\v\u02A3\v\v\x03\v\x03\v\x07" +
		"\v\u02A7\n\v\f\v\x0E\v\u02AA\v\v\x03\v\x03\v\x07\v\u02AE\n\v\f\v\x0E\v" +
		"\u02B1\v\v\x07\v\u02B3\n\v\f\v\x0E\v\u02B6\v\v\x03\f\x03\f\x06\f\u02BA" +
		"\n\f\r\f\x0E\f\u02BB\x03\f\x03\f\x07\f\u02C0\n\f\f\f\x0E\f\u02C3\v\f\x03" +
		"\f\x03\f\x07\f\u02C7\n\f\f\f\x0E\f\u02CA\v\f\x03\f\x03\f\x07\f\u02CE\n" +
		"\f\f\f\x0E\f\u02D1\v\f\x03\f\x07\f\u02D4\n\f\f\f\x0E\f\u02D7\v\f\x03\f" +
		"\x07\f\u02DA\n\f\f\f\x0E\f\u02DD\v\f\x07\f\u02DF\n\f\f\f\x0E\f\u02E2\v" +
		"\f\x03\r\x03\r\x06\r\u02E6\n\r\r\r\x0E\r\u02E7\x03\r\x03\r\x07\r\u02EC" +
		"\n\r\f\r\x0E\r\u02EF\v\r\x03\r\x03\r\x07\r\u02F3\n\r\f\r\x0E\r\u02F6\v" +
		"\r\x03\r\x03\r\x07\r\u02FA\n\r\f\r\x0E\r\u02FD\v\r\x07\r\u02FF\n\r\f\r" +
		"\x0E\r\u0302\v\r\x03\x0E\x03\x0E\x06\x0E\u0306\n\x0E\r\x0E\x0E\x0E\u0307" +
		"\x03\x0E\x03\x0E\x07\x0E\u030C\n\x0E\f\x0E\x0E\x0E\u030F\v\x0E\x03\x0E" +
		"\x03\x0E\x07\x0E\u0313\n\x0E\f\x0E\x0E\x0E\u0316\v\x0E\x07\x0E\u0318\n" +
		"\x0E\f\x0E\x0E\x0E\u031B\v\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x06\x0F" +
		"\u0321\n\x0F\r\x0F\x0E\x0F\u0322\x03\x0F\x03\x0F\x07\x0F\u0327\n\x0F\f" +
		"\x0F\x0E\x0F\u032A\v\x0F\x03\x0F\x03\x0F\x07\x0F\u032E\n\x0F\f\x0F\x0E" +
		"\x0F\u0331\v\x0F\x07\x0F\u0333\n\x0F\f\x0F\x0E\x0F\u0336\v\x0F\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x06\x10\u033C\n\x10\r\x10\x0E\x10\u033D\x03\x10" +
		"\x03\x10\x07\x10\u0342\n\x10\f\x10\x0E\x10\u0345\v\x10\x03\x10\x03\x10" +
		"\x07\x10\u0349\n\x10\f\x10\x0E\x10\u034C\v\x10\x07\x10\u034E\n\x10\f\x10" +
		"\x0E\x10\u0351\v\x10\x03\x10\x03\x10\x03\x11\x03\x11\x06\x11\u0357\n\x11" +
		"\r\x11\x0E\x11\u0358\x05\x11\u035B\n\x11\x03\x11\x03\x11\x03\x11\x06\x11" +
		"\u0360\n\x11\r\x11\x0E\x11\u0361\x05\x11\u0364\n\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x05\x11\u0372\n\x11\x03\x12\x03\x12\x07\x12\u0376\n\x12\f\x12\x0E" +
		"\x12\u0379\v\x12\x03\x12\x07\x12\u037C\n\x12\f\x12\x0E\x12\u037F\v\x12" +
		"\x03\x13\x03\x13\x06\x13\u0383\n\x13\r\x13\x0E\x13\u0384\x03\x13\x03\x13" +
		"\x05\x13\u0389\n\x13\x05\x13\u038B\n\x13\x03\x13\x06\x13\u038E\n\x13\r" +
		"\x13\x0E\x13\u038F\x03\x13\x03\x13\x06\x13\u0394\n\x13\r\x13\x0E\x13\u0395" +
		"\x03\x13\x03\x13\x05\x13\u039A\n\x13\x03\x13\x06\x13\u039D\n\x13\r\x13" +
		"\x0E\x13\u039E\x03\x13\x03\x13\x07\x13\u03A3\n\x13\f\x13\x0E\x13\u03A6" +
		"\v\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x06\x15\u03AE\n" +
		"\x15\r\x15\x0E\x15\u03AF\x05\x15\u03B2\n\x15\x03\x15\x03\x15\x03\x15\x06" +
		"\x15\u03B7\n\x15\r\x15\x0E\x15\u03B8\x05\x15\u03BB\n\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x06\x15\u03C4\n\x15\r\x15\x0E" +
		"\x15\u03C5\x03\x15\x03\x15\x05\x15\u03CA\n\x15\x03\x15\x03\x15\x06\x15" +
		"\u03CE\n\x15\r\x15\x0E\x15\u03CF\x03\x15\x03\x15\x05\x15\u03D4\n\x15\x03" +
		"\x15\x03\x15\x06\x15\u03D8\n\x15\r\x15\x0E\x15\u03D9\x03\x15\x03\x15\x06" +
		"\x15\u03DE\n\x15\r\x15\x0E\x15\u03DF\x05\x15\u03E2\n\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x05\x15\u03E8\n\x15\x03\x16\x03\x16\x06\x16\u03EC\n\x16" +
		"\r\x16\x0E\x16\u03ED\x03\x16\x03\x16\x06\x16\u03F2\n\x16\r\x16\x0E\x16" +
		"\u03F3\x03\x16\x03\x16\x06\x16\u03F8\n\x16\r\x16\x0E\x16\u03F9\x03\x16" +
		"\x03\x16\x05\x16\u03FE\n\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03" +
		"\x19\x06\x19\u0406\n\x19\r\x19\x0E\x19\u0407\x03\x19\x03\x19\x06\x19\u040C" +
		"\n\x19\r\x19\x0E\x19\u040D\x05\x19\u0410\n\x19\x03\x19\x03\x19\x06\x19" +
		"\u0414\n\x19\r\x19\x0E\x19\u0415\x03\x19\x03\x19\x06\x19\u041A\n\x19\r" +
		"\x19\x0E\x19\u041B\x05\x19\u041E\n\x19\x03\x19\x03\x19\x06\x19\u0422\n" +
		"\x19\r\x19\x0E\x19\u0423\x03\x19\x03\x19\x07\x19\u0428\n\x19\f\x19\x0E" +
		"\x19\u042B\v\x19\x03\x1A\x03\x1A\x06\x1A\u042F\n\x1A\r\x1A\x0E\x1A\u0430" +
		"\x03\x1A\x03\x1A\x05\x1A\u0435\n\x1A\x03\x1B\x03\x1B\x03\x1B\x06\x1B\u043A" +
		"\n\x1B\r\x1B\x0E\x1B\u043B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x06\x1B\u0442" +
		"\n\x1B\r\x1B\x0E\x1B\u0443\x03\x1B\x03\x1B\x05\x1B\u0448\n\x1B\x03\x1C" +
		"\x03\x1C\x06\x1C\u044C\n\x1C\r\x1C\x0E\x1C\u044D\x03\x1C\x03\x1C\x03\x1D" +
		"\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x06 \u045A\n \r \x0E" +
		" \u045B\x03 \x03 \x06 \u0460\n \r \x0E \u0461\x03 \x03 \x07 \u0466\n " +
		"\f \x0E \u0469\v \x03 \x06 \u046C\n \r \x0E \u046D\x03 \x03 \x05 \u0472" +
		"\n \x03!\x03!\x06!\u0476\n!\r!\x0E!\u0477\x03!\x03!\x06!\u047C\n!\r!\x0E" +
		"!\u047D\x05!\u0480\n!\x03!\x03!\x06!\u0484\n!\r!\x0E!\u0485\x03!\x03!" +
		"\x07!\u048A\n!\f!\x0E!\u048D\v!\x03\"\x03\"\x03#\x03#\x06#\u0493\n#\r" +
		"#\x0E#\u0494\x03#\x03#\x06#\u0499\n#\r#\x0E#\u049A\x05#\u049D\n#\x03#" +
		"\x03#\x06#\u04A1\n#\r#\x0E#\u04A2\x05#\u04A5\n#\x03#\x03#\x06#\u04A9\n" +
		"#\r#\x0E#\u04AA\x03#\x03#\x07#\u04AF\n#\f#\x0E#\u04B2\v#\x03$\x03$\x03" +
		"%\x03%\x06%\u04B8\n%\r%\x0E%\u04B9\x03%\x03%\x03%\x03%\x06%\u04C0\n%\r" +
		"%\x0E%\u04C1\x03%\x03%\x06%\u04C6\n%\r%\x0E%\u04C7\x03%\x03%\x06%\u04CC" +
		"\n%\r%\x0E%\u04CD\x03%\x03%\x06%\u04D2\n%\r%\x0E%\u04D3\x03%\x03%\x06" +
		"%\u04D8\n%\r%\x0E%\u04D9\x03%\x03%\x06%\u04DE\n%\r%\x0E%\u04DF\x05%\u04E2" +
		"\n%\x03%\x03%\x05%\u04E6\n%\x03&\x03&\x03\'\x03\'\x03(\x03(\x03)\x03)" +
		"\x07)\u04F0\n)\f)\x0E)\u04F3\v)\x03)\x07)\u04F6\n)\f)\x0E)\u04F9\v)\x03" +
		"*\x03*\x06*\u04FD\n*\r*\x0E*\u04FE\x03*\x03*\x05*\u0503\n*\x03*\x06*\u0506" +
		"\n*\r*\x0E*\u0507\x03*\x03*\x07*\u050C\n*\f*\x0E*\u050F\v*\x03*\x03*\x03" +
		"+\x03+\x06+\u0515\n+\r+\x0E+\u0516\x03+\x03+\x06+\u051B\n+\r+\x0E+\u051C" +
		"\x05+\u051F\n+\x03+\x03+\x06+\u0523\n+\r+\x0E+\u0524\x05+\u0527\n+\x03" +
		"+\x03+\x03+\x03+\x06+\u052D\n+\r+\x0E+\u052E\x03+\x03+\x06+\u0533\n+\r" +
		"+\x0E+\u0534\x03+\x03+\x06+\u0539\n+\r+\x0E+\u053A\x05+\u053D\n+\x03+" +
		"\x03+\x03+\x03+\x06+\u0543\n+\r+\x0E+\u0544\x03+\x03+\x06+\u0549\n+\r" +
		"+\x0E+\u054A\x05+\u054D\n+\x03+\x03+\x03+\x03+\x06+\u0553\n+\r+\x0E+\u0554" +
		"\x03+\x03+\x06+\u0559\n+\r+\x0E+\u055A\x05+\u055D\n+\x05+\u055F\n+\x03" +
		"+\x03+\x03+\x06+\u0564\n+\r+\x0E+\u0565\x03+\x03+\x06+\u056A\n+\r+\x0E" +
		"+\u056B\x05+\u056E\n+\x03+\x03+\x03+\x03+\x06+\u0574\n+\r+\x0E+\u0575" +
		"\x03+\x03+\x06+\u057A\n+\r+\x0E+\u057B\x05+\u057E\n+\x03+\x03+\x06+\u0582" +
		"\n+\r+\x0E+\u0583\x05+\u0586\n+\x03+\x03+\x03+\x03+\x06+\u058C\n+\r+\x0E" +
		"+\u058D\x03+\x03+\x05+\u0592\n+\x03+\x03+\x06+\u0596\n+\r+\x0E+\u0597" +
		"\x03+\x03+\x05+\u059C\n+\x03+\x03+\x03+\x03+\x06+\u05A2\n+\r+\x0E+\u05A3" +
		"\x03+\x03+\x06+\u05A8\n+\r+\x0E+\u05A9\x05+\u05AC\n+\x03+\x03+\x03+\x03" +
		"+\x06+\u05B2\n+\r+\x0E+\u05B3\x03+\x03+\x06+\u05B8\n+\r+\x0E+\u05B9\x05" +
		"+\u05BC\n+\x03+\x03+\x03+\x05+\u05C1\n+\x03,\x03,\x06,\u05C5\n,\r,\x0E" +
		",\u05C6\x03,\x03,\x05,\u05CB\n,\x03,\x06,\u05CE\n,\r,\x0E,\u05CF\x05," +
		"\u05D2\n,\x03,\x03,\x06,\u05D6\n,\r,\x0E,\u05D7\x03,\x03,\x06,\u05DC\n" +
		",\r,\x0E,\u05DD\x03,\x03,\x05,\u05E2\n,\x03-\x03-\x06-\u05E6\n-\r-\x0E" +
		"-\u05E7\x03-\x03-\x06-\u05EC\n-\r-\x0E-\u05ED\x03-\x03-\x07-\u05F2\n-" +
		"\f-\x0E-\u05F5\v-\x03-\x06-\u05F8\n-\r-\x0E-\u05F9\x03-\x03-\x05-\u05FE" +
		"\n-\x03-\x06-\u0601\n-\r-\x0E-\u0602\x03-\x03-\x07-\u0607\n-\f-\x0E-\u060A" +
		"\v-\x06-\u060C\n-\r-\x0E-\u060D\x03-\x07-\u0611\n-\f-\x0E-\u0614\v-\x03" +
		"-\x03-\x06-\u0618\n-\r-\x0E-\u0619\x03-\x03-\x06-\u061E\n-\r-\x0E-\u061F" +
		"\x03-\x03-\x05-\u0624\n-\x03.\x03.\x03/\x03/\x030\x030\x031\x031\x032" +
		"\x032\x033\x033\x063\u0632\n3\r3\x0E3\u0633\x033\x033\x033\x033\x033\x06" +
		"3\u063B\n3\r3\x0E3\u063C\x033\x033\x033\x033\x033\x063\u0644\n3\r3\x0E" +
		"3\u0645\x033\x033\x033\x053\u064B\n3\x033\x063\u064E\n3\r3\x0E3\u064F" +
		"\x033\x033\x033\x033\x033\x033\x063\u0658\n3\r3\x0E3\u0659\x033\x033\x03" +
		"3\x053\u065F\n3\x033\x063\u0662\n3\r3\x0E3\u0663\x033\x033\x033\x033\x06" +
		"3\u066A\n3\r3\x0E3\u066B\x033\x033\x033\x033\x033\x063\u0673\n3\r3\x0E" +
		"3\u0674\x033\x033\x033\x053\u067A\n3\x034\x034\x035\x035\x035\x065\u0681" +
		"\n5\r5\x0E5\u0682\x035\x035\x035\x035\x065\u0689\n5\r5\x0E5\u068A\x03" +
		"5\x035\x055\u068F\n5\x036\x036\x066\u0693\n6\r6\x0E6\u0694\x036\x036\x06" +
		"6\u0699\n6\r6\x0E6\u069A\x056\u069D\n6\x036\x036\x066\u06A1\n6\r6\x0E" +
		"6\u06A2\x036\x036\x056\u06A7\n6\x036\x036\x066\u06AB\n6\r6\x0E6\u06AC" +
		"\x036\x036\x056\u06B1\n6\x037\x037\x038\x038\x068\u06B7\n8\r8\x0E8\u06B8" +
		"\x058\u06BB\n8\x038\x038\x038\x068\u06C0\n8\r8\x0E8\u06C1\x038\x038\x03" +
		"8\x038\x068\u06C8\n8\r8\x0E8\u06C9\x038\x038\x058\u06CE\n8\x038\x038\x06" +
		"8\u06D2\n8\r8\x0E8\u06D3\x038\x038\x058\u06D8\n8\x058\u06DA\n8\x038\x06" +
		"8\u06DD\n8\r8\x0E8\u06DE\x038\x038\x078\u06E3\n8\f8\x0E8\u06E6\v8\x03" +
		"8\x078\u06E9\n8\f8\x0E8\u06EC\v8\x038\x038\x078\u06F0\n8\f8\x0E8\u06F3" +
		"\v8\x038\x078\u06F6\n8\f8\x0E8\u06F9\v8\x058\u06FB\n8\x038\x038\x068\u06FF" +
		"\n8\r8\x0E8\u0700\x038\x038\x068\u0705\n8\r8\x0E8\u0706\x038\x038\x06" +
		"8\u070B\n8\r8\x0E8\u070C\x058\u070F\n8\x038\x038\x068\u0713\n8\r8\x0E" +
		"8\u0714\x038\x038\x068\u0719\n8\r8\x0E8\u071A\x058\u071D\n8\x058\u071F" +
		"\n8\x038\x038\x068\u0723\n8\r8\x0E8\u0724\x038\x038\x058\u0729\n8\x03" +
		"8\x068\u072C\n8\r8\x0E8\u072D\x038\x038\x068\u0732\n8\r8\x0E8\u0733\x03" +
		"8\x038\x058\u0738\n8\x038\x068\u073B\n8\r8\x0E8\u073C\x038\x038\x068\u0741" +
		"\n8\r8\x0E8\u0742\x038\x038\x068\u0747\n8\r8\x0E8\u0748\x038\x038\x05" +
		"8\u074D\n8\x038\x068\u0750\n8\r8\x0E8\u0751\x038\x038\x068\u0756\n8\r" +
		"8\x0E8\u0757\x038\x038\x068\u075C\n8\r8\x0E8\u075D\x038\x038\x058\u0762" +
		"\n8\x038\x068\u0765\n8\r8\x0E8\u0766\x038\x038\x068\u076B\n8\r8\x0E8\u076C" +
		"\x038\x038\x058\u0771\n8\x058\u0773\n8\x039\x039\x03:\x03:\x03;\x03;\x03" +
		"<\x03<\x03=\x03=\x03>\x03>\x03?\x03?\x03@\x03@\x06@\u0785\n@\r@\x0E@\u0786" +
		"\x03@\x03@\x05@\u078B\n@\x03@\x06@\u078E\n@\r@\x0E@\u078F\x05@\u0792\n" +
		"@\x03@\x03@\x03A\x03A\x03A\x06A\u0799\nA\rA\x0EA\u079A\x03A\x03A\x05A" +
		"\u079F\nA\x03A\x03A\x06A\u07A3\nA\rA\x0EA\u07A4\x03A\x03A\x05A\u07A9\n" +
		"A\x03A\x03A\x06A\u07AD\nA\rA\x0EA\u07AE\x03A\x03A\x05A\u07B3\nA\x03A\x03" +
		"A\x06A\u07B7\nA\rA\x0EA\u07B8\x03A\x03A\x05A\u07BD\nA\x03A\x03A\x03A\x03" +
		"A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03" +
		"A\x03A\x03A\x03A\x03A\x05A\u07D5\nA\x03B\x03B\x06B\u07D9\nB\rB\x0EB\u07DA" +
		"\x03B\x03B\x06B\u07DF\nB\rB\x0EB\u07E0\x05B\u07E3\nB\x03B\x03B\x03C\x06" +
		"C\u07E8\nC\rC\x0EC\u07E9\x03D\x03D\x03E\x03E\x03F\x03F\x03G\x03G\x05G" +
		"\u07F4\nG\x03H\x03H\x06H\u07F8\nH\rH\x0EH\u07F9\x03H\x03H\x05H\u07FE\n" +
		"H\x03H\x03H\x06H\u0802\nH\rH\x0EH\u0803\x03H\x03H\x05H\u0808\nH\x05H\u080A" +
		"\nH\x03H\x06H\u080D\nH\rH\x0EH\u080E\x03H\x03H\x07H\u0813\nH\fH\x0EH\u0816" +
		"\vH\x03H\x07H\u0819\nH\fH\x0EH\u081C\vH\x03I\x03I\x03J\x03J\x06J\u0822" +
		"\nJ\rJ\x0EJ\u0823\x03J\x03J\x06J\u0828\nJ\rJ\x0EJ\u0829\x05J\u082C\nJ" +
		"\x03J\x03J\x06J\u0830\nJ\rJ\x0EJ\u0831\x03J\x03J\x05J\u0836\nJ\x03J\x06" +
		"J\u0839\nJ\rJ\x0EJ\u083A\x03J\x03J\x06J\u083F\nJ\rJ\x0EJ\u0840\x05J\u0843" +
		"\nJ\x03J\x03J\x06J\u0847\nJ\rJ\x0EJ\u0848\x03J\x03J\x06J\u084D\nJ\rJ\x0E" +
		"J\u084E\x03J\x03J\x05J\u0853\nJ\x03J\x06J\u0856\nJ\rJ\x0EJ\u0857\x03J" +
		"\x03J\x06J\u085C\nJ\rJ\x0EJ\u085D\x05J\u0860\nJ\x03J\x03J\x06J\u0864\n" +
		"J\rJ\x0EJ\u0865\x05J\u0868\nJ\x03J\x03J\x06J\u086C\nJ\rJ\x0EJ\u086D\x03" +
		"J\x03J\x05J\u0872\nJ\x03J\x06J\u0875\nJ\rJ\x0EJ\u0876\x03J\x03J\x06J\u087B" +
		"\nJ\rJ\x0EJ\u087C\x05J\u087F\nJ\x03J\x03J\x06J\u0883\nJ\rJ\x0EJ\u0884" +
		"\x05J\u0887\nJ\x03J\x03J\x06J\u088B\nJ\rJ\x0EJ\u088C\x03J\x03J\x05J\u0891" +
		"\nJ\x03K\x03K\x05K\u0895\nK\x03L\x03L\x05L\u0899\nL\x03M\x03M\x05M\u089D" +
		"\nM\x03N\x03N\x05N\u08A1\nN\x03O\x03O\x06O\u08A5\nO\rO\x0EO\u08A6\x03" +
		"O\x03O\x06O\u08AB\nO\rO\x0EO\u08AC\x03O\x03O\x05O\u08B1\nO\x03O\x03";
	private static readonly _serializedATNSegment1: string =
		"O\x06O\u08B5\nO\rO\x0EO\u08B6\x03O\x03O\x05O\u08BB\nO\x05O\u08BD\nO\x03" +
		"O\x03O\x06O\u08C1\nO\rO\x0EO\u08C2\x03O\x03O\x07O\u08C7\nO\fO\x0EO\u08CA" +
		"\vO\x03P\x03P\x03Q\x03Q\x06Q\u08D0\nQ\rQ\x0EQ\u08D1\x03Q\x03Q\x06Q\u08D6" +
		"\nQ\rQ\x0EQ\u08D7\x03Q\x03Q\x06Q\u08DC\nQ\rQ\x0EQ\u08DD\x03Q\x03Q\x06" +
		"Q\u08E2\nQ\rQ\x0EQ\u08E3\x03Q\x03Q\x03R\x03R\x05R\u08EA\nR\x03S\x03S\x06" +
		"S\u08EE\nS\rS\x0ES\u08EF\x03S\x03S\x06S\u08F4\nS\rS\x0ES\u08F5\x03S\x03" +
		"S\x05S\u08FA\nS\x03S\x03S\x06S\u08FE\nS\rS\x0ES\u08FF\x03S\x03S\x05S\u0904" +
		"\nS\x05S\u0906\nS\x03S\x06S\u0909\nS\rS\x0ES\u090A\x03S\x03S\x03T\x03" +
		"T\x06T\u0911\nT\rT\x0ET\u0912\x03T\x03T\x03U\x03U\x06U\u0919\nU\rU\x0E" +
		"U\u091A\x05U\u091D\nU\x03U\x03U\x06U\u0921\nU\rU\x0EU\u0922\x03U\x03U" +
		"\x06U\u0927\nU\rU\x0EU\u0928\x05U\u092B\nU\x03U\x03U\x07U\u092F\nU\fU" +
		"\x0EU\u0932\vU\x03U\x03U\x07U\u0936\nU\fU\x0EU\u0939\vU\x05U\u093B\nU" +
		"\x03U\x03U\x06U\u093F\nU\rU\x0EU\u0940\x05U\u0943\nU\x03U\x03U\x06U\u0947" +
		"\nU\rU\x0EU\u0948\x03U\x03U\x06U\u094D\nU\rU\x0EU\u094E\x05U\u0951\nU" +
		"\x03U\x03U\x07U\u0955\nU\fU\x0EU\u0958\vU\x05U\u095A\nU\x03U\x03U\x06" +
		"U\u095E\nU\rU\x0EU\u095F\x05U\u0962\nU\x03U\x05U\u0965\nU\x03U\x03U\x06" +
		"U\u0969\nU\rU\x0EU\u096A\x03U\x03U\x05U\u096F\nU\x03U\x07U\u0972\nU\f" +
		"U\x0EU\u0975\vU\x03U\x03U\x07U\u0979\nU\fU\x0EU\u097C\vU\x05U\u097E\n" +
		"U\x03U\x03U\x06U\u0982\nU\rU\x0EU\u0983\x03U\x03U\x06U\u0988\nU\rU\x0E" +
		"U\u0989\x05U\u098C\nU\x03U\x03U\x05U\u0990\nU\x05U\u0992\nU\x03V\x03V" +
		"\x03W\x03W\x03X\x03X\x03Y\x03Y\x06Y\u099C\nY\rY\x0EY\u099D\x03Y\x03Y\x05" +
		"Y\u09A2\nY\x05Y\u09A4\nY\x03Y\x06Y\u09A7\nY\rY\x0EY\u09A8\x03Y\x03Y\x07" +
		"Y\u09AD\nY\fY\x0EY\u09B0\vY\x03Y\x03Y\x03Z\x03Z\x03[\x03[\x06[\u09B8\n" +
		"[\r[\x0E[\u09B9\x03[\x03[\x03[\x03[\x06[\u09C0\n[\r[\x0E[\u09C1\x03[\x03" +
		"[\x06[\u09C6\n[\r[\x0E[\u09C7\x05[\u09CA\n[\x03[\x03[\x03[\x03[\x06[\u09D0" +
		"\n[\r[\x0E[\u09D1\x03[\x03[\x06[\u09D6\n[\r[\x0E[\u09D7\x05[\u09DA\n[" +
		"\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x06[\u09E3\n[\r[\x0E[\u09E4\x03[\x03" +
		"[\x06[\u09E9\n[\r[\x0E[\u09EA\x05[\u09ED\n[\x05[\u09EF\n[\x03[\x03[\x03" +
		"[\x03[\x03[\x03[\x03[\x06[\u09F8\n[\r[\x0E[\u09F9\x03[\x03[\x03[\x03[" +
		"\x03[\x03[\x03[\x03[\x06[\u0A04\n[\r[\x0E[\u0A05\x03[\x03[\x06[\u0A0A" +
		"\n[\r[\x0E[\u0A0B\x05[\u0A0E\n[\x03[\x03[\x06[\u0A12\n[\r[\x0E[\u0A13" +
		"\x05[\u0A16\n[\x03[\x03[\x06[\u0A1A\n[\r[\x0E[\u0A1B\x05[\u0A1E\n[\x03" +
		"[\x03[\x03[\x03[\x06[\u0A24\n[\r[\x0E[\u0A25\x03[\x03[\x06[\u0A2A\n[\r" +
		"[\x0E[\u0A2B\x05[\u0A2E\n[\x03[\x03[\x06[\u0A32\n[\r[\x0E[\u0A33\x05[" +
		"\u0A36\n[\x03[\x03[\x06[\u0A3A\n[\r[\x0E[\u0A3B\x05[\u0A3E\n[\x03[\x03" +
		"[\x03[\x03[\x06[\u0A44\n[\r[\x0E[\u0A45\x03[\x03[\x06[\u0A4A\n[\r[\x0E" +
		"[\u0A4B\x05[\u0A4E\n[\x03[\x03[\x03[\x03[\x06[\u0A54\n[\r[\x0E[\u0A55" +
		"\x03[\x03[\x06[\u0A5A\n[\r[\x0E[\u0A5B\x05[\u0A5E\n[\x03[\x03[\x03[\x03" +
		"[\x06[\u0A64\n[\r[\x0E[\u0A65\x03[\x03[\x05[\u0A6A\n[\x03[\x03[\x06[\u0A6E" +
		"\n[\r[\x0E[\u0A6F\x03[\x03[\x03[\x06[\u0A75\n[\r[\x0E[\u0A76\x03[\x03" +
		"[\x05[\u0A7B\n[\x03[\x05[\u0A7E\n[\x05[\u0A80\n[\x03\\\x03\\\x06\\\u0A84" +
		"\n\\\r\\\x0E\\\u0A85\x03\\\x03\\\x03]\x03]\x06]\u0A8C\n]\r]\x0E]\u0A8D" +
		"\x03]\x03]\x05]\u0A92\n]\x03^\x03^\x06^\u0A96\n^\r^\x0E^\u0A97\x03^\x03" +
		"^\x03_\x03_\x03`\x03`\x05`\u0AA0\n`\x03a\x03a\x03b\x03b\x06b\u0AA6\nb" +
		"\rb\x0Eb\u0AA7\x03b\x03b\x07b\u0AAC\nb\fb\x0Eb\u0AAF\vb\x03b\x03b\x07" +
		"b\u0AB3\nb\fb\x0Eb\u0AB6\vb\x03b\x07b\u0AB9\nb\fb\x0Eb\u0ABC\vb\x03c\x03" +
		"c\x03c\x03c\x03c\x03c\x03c\x03c\x05c\u0AC6\nc\x03d\x03d\x07d\u0ACA\nd" +
		"\fd\x0Ed\u0ACD\vd\x03d\x03d\x07d\u0AD1\nd\fd\x0Ed\u0AD4\vd\x03d\x03d\x07" +
		"d\u0AD8\nd\fd\x0Ed\u0ADB\vd\x03d\x05d\u0ADE\nd\x03d\x07d\u0AE1\nd\fd\x0E" +
		"d\u0AE4\vd\x03d\x05d\u0AE7\nd\x03d\x07d\u0AEA\nd\fd\x0Ed\u0AED\vd\x03" +
		"d\x03d\x03e\x03e\x03f\x03f\x06f\u0AF5\nf\rf\x0Ef\u0AF6\x05f\u0AF9\nf\x03" +
		"f\x03f\x06f\u0AFD\nf\rf\x0Ef\u0AFE\x03f\x03f\x05f\u0B03\nf\x03g\x03g\x06" +
		"g\u0B07\ng\rg\x0Eg\u0B08\x05g\u0B0B\ng\x03g\x03g\x06g\u0B0F\ng\rg\x0E" +
		"g\u0B10\x03g\x03g\x03h\x03h\x03i\x03i\x07i\u0B19\ni\fi\x0Ei\u0B1C\vi\x03" +
		"i\x03i\x05i\u0B20\ni\x03j\x03j\x07j\u0B24\nj\fj\x0Ej\u0B27\vj\x03j\x03" +
		"j\x07j\u0B2B\nj\fj\x0Ej\u0B2E\vj\x03j\x03j\x07j\u0B32\nj\fj\x0Ej\u0B35" +
		"\vj\x03k\x03k\x07k\u0B39\nk\fk\x0Ek\u0B3C\vk\x03k\x03k\x07k\u0B40\nk\f" +
		"k\x0Ek\u0B43\vk\x03k\x03k\x07k\u0B47\nk\fk\x0Ek\u0B4A\vk\x03l\x03l\x07" +
		"l\u0B4E\nl\fl\x0El\u0B51\vl\x03l\x03l\x07l\u0B55\nl\fl\x0El\u0B58\vl\x03" +
		"l\x03l\x07l\u0B5C\nl\fl\x0El\u0B5F\vl\x03m\x03m\x07m\u0B63\nm\fm\x0Em" +
		"\u0B66\vm\x03m\x03m\x07m\u0B6A\nm\fm\x0Em\u0B6D\vm\x03m\x03m\x07m\u0B71" +
		"\nm\fm\x0Em\u0B74\vm\x03n\x03n\x07n\u0B78\nn\fn\x0En\u0B7B\vn\x03n\x03" +
		"n\x07n\u0B7F\nn\fn\x0En\u0B82\vn\x03n\x03n\x07n\u0B86\nn\fn\x0En\u0B89" +
		"\vn\x03o\x03o\x07o\u0B8D\no\fo\x0Eo\u0B90\vo\x03o\x03o\x07o\u0B94\no\f" +
		"o\x0Eo\u0B97\vo\x03o\x05o\u0B9A\no\x03o\x07o\u0B9D\no\fo\x0Eo\u0BA0\v" +
		"o\x03o\x05o\u0BA3\no\x03p\x03p\x06p\u0BA7\np\rp\x0Ep\u0BA8\x03p\x03p\x06" +
		"p\u0BAD\np\rp\x0Ep\u0BAE\x05p\u0BB1\np\x03p\x03p\x07p\u0BB5\np\fp\x0E" +
		"p\u0BB8\vp\x03p\x03p\x03q\x03q\x06q\u0BBE\nq\rq\x0Eq\u0BBF\x03q\x03q\x07" +
		"q\u0BC4\nq\fq\x0Eq\u0BC7\vq\x03q\x03q\x07q\u0BCB\nq\fq\x0Eq\u0BCE\vq\x03" +
		"q\x05q\u0BD1\nq\x03q\x05q\u0BD4\nq\x03r\x03r\x06r\u0BD8\nr\rr\x0Er\u0BD9" +
		"\x03r\x03r\x07r\u0BDE\nr\fr\x0Er\u0BE1\vr\x03r\x03r\x07r\u0BE5\nr\fr\x0E" +
		"r\u0BE8\vr\x03r\x05r\u0BEB\nr\x03r\x07r\u0BEE\nr\fr\x0Er\u0BF1\vr\x03" +
		"r\x05r\u0BF4\nr\x03r\x07r\u0BF7\nr\fr\x0Er\u0BFA\vr\x03r\x05r\u0BFD\n" +
		"r\x03r\x07r\u0C00\nr\fr\x0Er\u0C03\vr\x03s\x03s\x06s\u0C07\ns\rs\x0Es" +
		"\u0C08\x03s\x03s\x07s\u0C0D\ns\fs\x0Es\u0C10\vs\x03s\x03s\x07s\u0C14\n" +
		"s\fs\x0Es\u0C17\vs\x03s\x05s\u0C1A\ns\x03s\x05s\u0C1D\ns\x03t\x03t\x07" +
		"t\u0C21\nt\ft\x0Et\u0C24\vt\x03t\x03t\x07t\u0C28\nt\ft\x0Et\u0C2B\vt\x03" +
		"t\x03t\x06t\u0C2F\nt\rt\x0Et\u0C30\x03t\x03t\x05t\u0C35\nt\x03t\x07t\u0C38" +
		"\nt\ft\x0Et\u0C3B\vt\x03t\x03t\x05t\u0C3F\nt\x03u\x03u\x03v\x03v\x06v" +
		"\u0C45\nv\rv\x0Ev\u0C46\x05v\u0C49\nv\x03v\x03v\x06v\u0C4D\nv\rv\x0Ev" +
		"\u0C4E\x03v\x03v\x03w\x03w\x07w\u0C55\nw\fw\x0Ew\u0C58\vw\x03w\x03w\x07" +
		"w\u0C5C\nw\fw\x0Ew\u0C5F\vw\x03w\x03w\x06w\u0C63\nw\rw\x0Ew\u0C64\x03" +
		"w\x03w\x05w\u0C69\nw\x03w\x06w\u0C6C\nw\rw\x0Ew\u0C6D\x03w\x03w\x05w\u0C72" +
		"\nw\x03w\x06w\u0C75\nw\rw\x0Ew\u0C76\x03w\x03w\x05w\u0C7B\nw\x03w\x07" +
		"w\u0C7E\nw\fw\x0Ew\u0C81\vw\x03w\x03w\x05w\u0C85\nw\x03x\x03x\x06x\u0C89" +
		"\nx\rx\x0Ex\u0C8A\x03x\x03x\x05x\u0C8F\nx\x03x\x06x\u0C92\nx\rx\x0Ex\u0C93" +
		"\x03x\x03x\x06x\u0C98\nx\rx\x0Ex\u0C99\x03x\x03x\x03y\x03y\x03z\x03z\x03" +
		"{\x03{\x06{\u0CA4\n{\r{\x0E{\u0CA5\x05{\u0CA8\n{\x03{\x03{\x06{\u0CAC" +
		"\n{\r{\x0E{\u0CAD\x05{\u0CB0\n{\x03{\x03{\x06{\u0CB4\n{\r{\x0E{\u0CB5" +
		"\x03{\x03{\x05{\u0CBA\n{\x03{\x06{\u0CBD\n{\r{\x0E{\u0CBE\x03{\x03{\x03" +
		"|\x03|\x03}\x03}\x06}\u0CC7\n}\r}\x0E}\u0CC8\x03}\x03}\x05}\u0CCD\n}\x03" +
		"}\x03}\x03~\x03~\x03\x7F\x03\x7F\x07\x7F\u0CD5\n\x7F\f\x7F\x0E\x7F\u0CD8" +
		"\v\x7F\x03\x7F\x03\x7F\x07\x7F\u0CDC\n\x7F\f\x7F\x0E\x7F\u0CDF\v\x7F\x03" +
		"\x7F\x03\x7F\x07\x7F\u0CE3\n\x7F\f\x7F\x0E\x7F\u0CE6\v\x7F\x06\x7F\u0CE8" +
		"\n\x7F\r\x7F\x0E\x7F\u0CE9\x03\x7F\x03\x7F\x05\x7F\u0CEE\n\x7F\x03\x80" +
		"\x03\x80\x06\x80\u0CF2\n\x80\r\x80\x0E\x80\u0CF3\x03\x80\x03\x80\x06\x80" +
		"\u0CF8\n\x80\r\x80\x0E\x80\u0CF9\x05\x80\u0CFC\n\x80\x03\x80\x03\x80\x03" +
		"\x80\x03\x80\x06\x80\u0D02\n\x80\r\x80\x0E\x80\u0D03\x03\x80\x03\x80\x06" +
		"\x80\u0D08\n\x80\r\x80\x0E\x80\u0D09\x05\x80\u0D0C\n\x80\x03\x80\x03\x80" +
		"\x03\x80\x03\x80\x06\x80\u0D12\n\x80\r\x80\x0E\x80\u0D13\x03\x80\x03\x80" +
		"\x06\x80\u0D18\n\x80\r\x80\x0E\x80\u0D19\x05\x80\u0D1C\n\x80\x03\x80\x03" +
		"\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x06\x80\u0D27" +
		"\n\x80\r\x80\x0E\x80\u0D28\x03\x80\x03\x80\x06\x80\u0D2D\n\x80\r\x80\x0E" +
		"\x80\u0D2E\x05\x80\u0D31\n\x80\x03\x80\x03\x80\x03\x80\x03\x80\x06\x80" +
		"\u0D37\n\x80\r\x80\x0E\x80\u0D38\x03\x80\x03\x80\x06\x80\u0D3D\n\x80\r" +
		"\x80\x0E\x80\u0D3E\x05\x80\u0D41\n\x80\x03\x80\x03\x80\x03\x80\x03\x80" +
		"\x06\x80\u0D47\n\x80\r\x80\x0E\x80\u0D48\x03\x80\x03\x80\x06\x80\u0D4D" +
		"\n\x80\r\x80\x0E\x80\u0D4E\x03\x80\x03\x80\x06\x80\u0D53\n\x80\r\x80\x0E" +
		"\x80\u0D54\x05\x80\u0D57\n\x80\x03\x80\x03\x80\x05\x80\u0D5B\n\x80\x03" +
		"\x81\x03\x81\x06\x81\u0D5F\n\x81\r\x81\x0E\x81\u0D60\x03\x81\x03\x81\x06" +
		"\x81\u0D65\n\x81\r\x81\x0E\x81\u0D66\x03\x81\x03\x81\x07\x81\u0D6B\n\x81" +
		"\f\x81\x0E\x81\u0D6E\v\x81\x03\x82\x03\x82\x06\x82\u0D72\n\x82\r\x82\x0E" +
		"\x82\u0D73\x03\x82\x03\x82\x06\x82\u0D78\n\x82\r\x82\x0E\x82\u0D79\x05" +
		"\x82\u0D7C\n\x82\x03\x82\x03\x82\x06\x82\u0D80\n\x82\r\x82\x0E\x82\u0D81" +
		"\x05\x82\u0D84\n\x82\x03\x82\x03\x82\x03\x83\x03\x83\x03\x83\x06\x83\u0D8B" +
		"\n\x83\r\x83\x0E\x83\u0D8C\x05\x83\u0D8F\n\x83\x03\x83\x03\x83\x06\x83" +
		"\u0D93\n\x83\r\x83\x0E\x83\u0D94\x03\x83\x03\x83\x06\x83\u0D99\n\x83\r" +
		"\x83\x0E\x83\u0D9A\x03\x83\x03\x83\x03\x83\x05\x83\u0DA0\n\x83\x03\x84" +
		"\x03\x84\x03\x85\x03\x85\x03\x86\x03\x86\x06\x86\u0DA8\n\x86\r\x86\x0E" +
		"\x86\u0DA9\x03\x86\x03\x86\x06\x86\u0DAE\n\x86\r\x86\x0E\x86\u0DAF\x03" +
		"\x86\x03\x86\x06\x86\u0DB4\n\x86\r\x86\x0E\x86\u0DB5\x05\x86\u0DB8\n\x86" +
		"\x03\x86\x03\x86\x07\x86\u0DBC\n\x86\f\x86\x0E\x86\u0DBF\v\x86\x06\x86" +
		"\u0DC1\n\x86\r\x86\x0E\x86\u0DC2\x03\x87\x03\x87\x03\x88\x03\x88\x06\x88" +
		"\u0DC9\n\x88\r\x88\x0E\x88\u0DCA\x03\x88\x03\x88\x06\x88\u0DCF\n\x88\r" +
		"\x88\x0E\x88\u0DD0\x03\x88\x03\x88\x05\x88\u0DD5\n\x88\x03\x89\x03\x89" +
		"\x06\x89\u0DD9\n\x89\r\x89\x0E\x89\u0DDA\x03\x89\x03\x89\x06\x89\u0DDF" +
		"\n\x89\r\x89\x0E\x89\u0DE0\x05\x89\u0DE3\n\x89\x03\x89\x06\x89\u0DE6\n" +
		"\x89\r\x89\x0E\x89\u0DE7\x03\x8A\x06\x8A\u0DEB\n\x8A\r\x8A\x0E\x8A\u0DEC" +
		"\x03\x8A\x05\x8A\u0DF0\n\x8A\x03\x8B\x03\x8B\x06\x8B\u0DF4\n\x8B\r\x8B" +
		"\x0E\x8B\u0DF5\x06\x8B\u0DF8\n\x8B\r\x8B\x0E\x8B\u0DF9\x03\x8B\x03\x8B" +
		"\x06\x8B\u0DFE\n\x8B\r\x8B\x0E\x8B\u0DFF\x05\x8B\u0E02\n\x8B\x03\x8B\x03" +
		"\x8B\x06\x8B\u0E06\n\x8B\r\x8B\x0E\x8B\u0E07\x06\x8B\u0E0A\n\x8B\r\x8B" +
		"\x0E\x8B\u0E0B\x03\x8C\x03\x8C\x06\x8C\u0E10\n\x8C\r\x8C\x0E\x8C\u0E11" +
		"\x03\x8C\x03\x8C\x07\x8C\u0E16\n\x8C\f\x8C\x0E\x8C\u0E19\v\x8C\x03\x8D" +
		"\x03\x8D\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x06\x8F\u0E21\n\x8F\r\x8F\x0E" +
		"\x8F\u0E22\x03\x8F\x03\x8F\x06\x8F\u0E27\n\x8F\r\x8F\x0E\x8F\u0E28\x03" +
		"\x8F\x03\x8F\x06\x8F\u0E2D\n\x8F\r\x8F\x0E\x8F\u0E2E\x05\x8F\u0E31\n\x8F" +
		"\x03\x8F\x03\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90" +
		"\x07\x90\u0E3C\n\x90\f\x90\x0E\x90\u0E3F\v\x90\x06\x90\u0E41\n\x90\r\x90" +
		"\x0E\x90\u0E42\x05\x90\u0E45\n\x90\x03\x91\x03\x91\x06\x91\u0E49\n\x91" +
		"\r\x91\x0E\x91\u0E4A\x03\x91\x03\x91\x06\x91\u0E4F\n\x91\r\x91\x0E\x91" +
		"\u0E50\x03\x91\x03\x91\x05\x91\u0E55\n\x91\x03\x91\x03\x91\x06\x91\u0E59" +
		"\n\x91\r\x91\x0E\x91\u0E5A\x03\x91\x03\x91\x06\x91\u0E5F\n\x91\r\x91\x0E" +
		"\x91\u0E60\x03\x91\x03\x91\x06\x91\u0E65\n\x91\r\x91\x0E\x91\u0E66\x05" +
		"\x91\u0E69\n\x91\x03\x92\x03\x92\x03\x93\x03\x93\x03\x94\x03\x94\x03\x95" +
		"\x03\x95\x06\x95\u0E73\n\x95\r\x95\x0E\x95\u0E74\x03\x95\x03\x95\x07\x95" +
		"\u0E79\n\x95\f\x95\x0E\x95\u0E7C\v\x95\x03\x95\x03\x95\x06\x95\u0E80\n" +
		"\x95\r\x95\x0E\x95\u0E81\x03\x95\x03\x95\x06\x95\u0E86\n\x95\r\x95\x0E" +
		"\x95\u0E87\x05\x95\u0E8A\n\x95\x03\x95\x03\x95\x06\x95\u0E8E\n\x95\r\x95" +
		"\x0E\x95\u0E8F\x03\x95\x03\x95\x05\x95\u0E94\n\x95\x03\x95\x03\x95\x06" +
		"\x95\u0E98\n\x95\r\x95\x0E\x95\u0E99\x03\x95\x03\x95\x05\x95\u0E9E\n\x95" +
		"\x05\x95\u0EA0\n\x95\x03\x95\x07\x95\u0EA3\n\x95\f\x95\x0E\x95\u0EA6\v" +
		"\x95\x03\x96\x03\x96\x06\x96\u0EAA\n\x96\r\x96\x0E\x96\u0EAB\x03\x96\x03" +
		"\x96\x06\x96\u0EB0\n\x96\r\x96\x0E\x96\u0EB1\x05\x96\u0EB4\n\x96\x03\x96" +
		"\x03\x96\x06\x96\u0EB8\n\x96\r\x96\x0E\x96\u0EB9\x05\x96\u0EBC\n\x96\x03" +
		"\x96\x03\x96\x03\x97\x03\x97\x06\x97\u0EC2\n\x97\r\x97\x0E\x97\u0EC3\x03" +
		"\x97\x03\x97\x06\x97\u0EC8\n\x97\r\x97\x0E\x97\u0EC9\x05\x97\u0ECC\n\x97" +
		"\x03\x97\x03\x97\x06\x97\u0ED0\n\x97\r\x97\x0E\x97\u0ED1\x05\x97\u0ED4" +
		"\n\x97\x03\x97\x03\x97\x03\x98\x03\x98\x03\x99\x03\x99\x03\x9A\x03\x9A" +
		"\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03\x9F" +
		"\x03\x9F\x03\xA0\x03\xA0\x07\xA0\u0EEA\n\xA0\f\xA0\x0E\xA0\u0EED\v\xA0" +
		"\x03\xA0\x03\xA0\x07\xA0\u0EF1\n\xA0\f\xA0\x0E\xA0\u0EF4\v\xA0\x03\xA0" +
		"\x03\xA0\x07\xA0\u0EF8\n\xA0\f\xA0\x0E\xA0\u0EFB\v\xA0\x07\xA0\u0EFD\n" +
		"\xA0\f\xA0\x0E\xA0\u0F00\v\xA0\x03\xA1\x03\xA1\x06\xA1\u0F04\n\xA1\r\xA1" +
		"\x0E\xA1\u0F05\x03\xA1\x03\xA1\x06\xA1\u0F0A\n\xA1\r\xA1\x0E\xA1\u0F0B" +
		"\x05\xA1\u0F0E\n\xA1\x03\xA1\x03\xA1\x07\xA1\u0F12\n\xA1\f\xA1\x0E\xA1" +
		"\u0F15\v\xA1\x03\xA1\x03\xA1\x07\xA1\u0F19\n\xA1\f\xA1\x0E\xA1\u0F1C\v" +
		"\xA1\x03\xA1\x03\xA1\x07\xA1\u0F20\n\xA1\f\xA1\x0E\xA1\u0F23\v\xA1\x05" +
		"\xA1\u0F25\n\xA1\x03\xA1\x03\xA1\x07\xA1\u0F29\n\xA1\f\xA1\x0E\xA1\u0F2C" +
		"\v\xA1\x05\xA1\u0F2E\n\xA1\x03\xA1\x03\xA1\x07\xA1\u0F32\n\xA1\f\xA1\x0E" +
		"\xA1\u0F35\v\xA1\x05\xA1\u0F37\n\xA1\x03\xA1\x03\xA1\x07\xA1\u0F3B\n\xA1" +
		"\f\xA1\x0E\xA1\u0F3E\v\xA1\x05\xA1\u0F40\n\xA1\x03\xA1\x03\xA1\x07\xA1" +
		"\u0F44\n\xA1\f\xA1\x0E\xA1\u0F47\v\xA1\x05\xA1\u0F49\n\xA1\x03\xA1\x03" +
		"\xA1\x07\xA1\u0F4D\n\xA1\f\xA1\x0E\xA1\u0F50\v\xA1\x05\xA1\u0F52\n\xA1" +
		"\x03\xA1\x03\xA1\x07\xA1\u0F56\n\xA1\f\xA1\x0E\xA1\u0F59\v\xA1\x05\xA1" +
		"\u0F5B\n\xA1\x03\xA1\x03\xA1\x07\xA1\u0F5F\n\xA1\f\xA1\x0E\xA1\u0F62\v" +
		"\xA1\x07\xA1\u0F64\n\xA1\f\xA1\x0E\xA1\u0F67\v\xA1\x03\xA1\x03\xA1\x07" +
		"\xA1\u0F6B\n\xA1\f\xA1\x0E\xA1\u0F6E\v\xA1\x05\xA1\u0F70\n\xA1\x03\xA1" +
		"\x03\xA1\x07\xA1\u0F74\n\xA1\f\xA1\x0E\xA1\u0F77\v\xA1\x05\xA1\u0F79\n" +
		"\xA1\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x06\xA2\u0F7F\n\xA2\r\xA2\x0E\xA2" +
		"\u0F80\x05\xA2\u0F83\n\xA2\x03\xA2\x03\xA2\x06\xA2\u0F87\n\xA2\r\xA2\x0E" +
		"\xA2\u0F88\x03\xA2\x03\xA2\x06\xA2\u0F8D\n\xA2\r\xA2\x0E\xA2\u0F8E\x05" +
		"\xA2\u0F91\n\xA2\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x06\xA4" +
		"\u0F99\n\xA4\r\xA4\x0E\xA4\u0F9A\x05\xA4\u0F9D\n\xA4\x03\xA4\x03\xA4\x06" +
		"\xA4\u0FA1\n\xA4\r\xA4\x0E\xA4\u0FA2\x03\xA4\x03\xA4\x06\xA4\u0FA7\n\xA4" +
		"\r\xA4\x0E\xA4\u0FA8\x05\xA4\u0FAB\n\xA4\x03\xA4\x03\xA4\x06\xA4\u0FAF" +
		"\n\xA4\r\xA4\x0E\xA4\u0FB0\x05\xA4\u0FB3\n\xA4\x03\xA4\x03\xA4\x06\xA4" +
		"\u0FB7\n\xA4\r\xA4\x0E\xA4\u0FB8\x03\xA4\x03\xA4\x06\xA4\u0FBD\n\xA4\r" +
		"\xA4\x0E\xA4\u0FBE\x05\xA4\u0FC1\n\xA4\x03\xA4\x03\xA4\x05\xA4\u0FC5\n" +
		"\xA4\x03\xA4\x06\xA4\u0FC8\n\xA4\r\xA4\x0E\xA4\u0FC9\x03\xA4\x03\xA4\x05" +
		"\xA4\u0FCE\n\xA4\x03\xA5\x03\xA5\x03\xA5\x07\xA5\u0FD3\n\xA5\f\xA5\x0E" +
		"\xA5\u0FD6\v\xA5\x03\xA5\x03\xA5\x07\xA5\u0FDA\n\xA5\f\xA5\x0E\xA5\u0FDD" +
		"\v\xA5\x03\xA5\x03\xA5\x07\xA5\u0FE1\n\xA5\f\xA5\x0E\xA5\u0FE4\v\xA5\x03" +
		"\xA5\x07\xA5\u0FE7\n\xA5\f\xA5\x0E\xA5\u0FEA\v\xA5\x05\xA5\u0FEC\n\xA5" +
		"\x03\xA6\x03\xA6\x06\xA6\u0FF0\n\xA6\r\xA6\x0E\xA6\u0FF1\x03\xA6\x03\xA6" +
		"\x06\xA6\u0FF6\n\xA6\r\xA6\x0E\xA6\u0FF7\x05\xA6\u0FFA\n\xA6\x03\xA6\x03" +
		"\xA6\x06\xA6\u0FFE\n\xA6\r\xA6\x0E\xA6\u0FFF\x05\xA6\u1002\n\xA6\x05\xA6" +
		"\u1004\n\xA6\x03\xA6\x03\xA6\x06\xA6\u1008\n\xA6\r\xA6\x0E\xA6\u1009\x03" +
		"\xA6\x03\xA6\x06\xA6\u100E\n\xA6\r\xA6\x0E\xA6\u100F\x03\xA6\x03\xA6\x06" +
		"\xA6\u1014\n\xA6\r\xA6\x0E\xA6\u1015\x05\xA6\u1018\n\xA6\x03\xA6\x03\xA6" +
		"\x06\xA6\u101C\n\xA6\r\xA6\x0E\xA6\u101D\x05\xA6\u1020\n\xA6\x03\xA6\x03" +
		"\xA6\x05\xA6\u1024\n\xA6\x03\xA7\x03\xA7\x06\xA7\u1028\n\xA7\r\xA7\x0E" +
		"\xA7\u1029\x03\xA7\x03\xA7\x06\xA7\u102E\n\xA7\r\xA7\x0E\xA7\u102F\x03" +
		"\xA7\x03\xA7\x05\xA7\u1034\n\xA7\x03\xA8\x03\xA8\x03\xA9\x03\xA9\x06\xA9" +
		"\u103A\n\xA9\r\xA9\x0E\xA9\u103B\x03\xA9\x03\xA9\x06\xA9\u1040\n\xA9\r" +
		"\xA9\x0E\xA9\u1041\x03\xA9\x03\xA9\x06\xA9\u1046\n\xA9\r\xA9\x0E\xA9\u1047" +
		"\x05\xA9\u104A\n\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x06\xAA\u1050\n\xAA" +
		"\r\xAA\x0E\xAA\u1051\x03\xAA\x03\xAA\x06\xAA\u1056\n\xAA\r\xAA\x0E\xAA" +
		"\u1057\x05\xAA\u105A\n\xAA\x03\xAA\x03\xAA\x06\xAA\u105E\n\xAA\r\xAA\x0E" +
		"\xAA\u105F\x05\xAA\u1062\n\xAA\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAC" +
		"\x03\xAC\x06\xAC\u106A\n\xAC\r\xAC\x0E\xAC\u106B\x03\xAC\x03\xAC\x06\xAC" +
		"\u1070\n\xAC\r\xAC\x0E\xAC\u1071\x05\xAC\u1074\n\xAC\x03\xAC\x03\xAC\x03" +
		"\xAC\x06\xAC\u1079\n\xAC\r\xAC\x0E\xAC\u107A\x03\xAC\x03\xAC\x03\xAC\x03" +
		"\xAC\x05\xAC\u1081\n\xAC\x03\xAD\x03\xAD\x06\xAD\u1085\n\xAD\r\xAD\x0E" +
		"\xAD\u1086\x03\xAD\x03\xAD\x06\xAD\u108B\n\xAD\r\xAD\x0E\xAD\u108C\x05" +
		"\xAD\u108F\n\xAD\x03\xAD\x03\xAD\x06\xAD\u1093\n\xAD\r\xAD\x0E\xAD\u1094" +
		"\x05\xAD\u1097\n\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x06\xAE\u109D\n\xAE" +
		"\r\xAE\x0E\xAE\u109E\x03\xAE\x03\xAE\x06\xAE\u10A3\n\xAE\r\xAE\x0E\xAE" +
		"\u10A4\x05\xAE\u10A7\n\xAE\x03\xAE\x03\xAE\x06\xAE\u10AB\n\xAE\r\xAE\x0E" +
		"\xAE\u10AC\x03\xAE\x03\xAE\x06\xAE\u10B1\n\xAE\r\xAE\x0E\xAE\u10B2\x03" +
		"\xAE\x03\xAE\x06\xAE\u10B7\n\xAE\r\xAE\x0E\xAE\u10B8\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x06\xAE\u10BF\n\xAE\r\xAE\x0E\xAE\u10C0\x03\xAE\x03\xAE\x06" +
		"\xAE\u10C5\n\xAE\r\xAE\x0E\xAE\u10C6\x05\xAE\u10C9\n\xAE\x03\xAE\x03\xAE" +
		"\x06\xAE\u10CD\n\xAE\r\xAE\x0E\xAE\u10CE\x03\xAE\x03\xAE\x06\xAE\u10D3" +
		"\n\xAE\r\xAE\x0E\xAE\u10D4\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u10DA\n\xAE" +
		"\x05\xAE\u10DC\n\xAE\x03\xAE\x05\xAE\u10DF\n\xAE\x03\xAF\x03\xAF\x06\xAF" +
		"\u10E3\n\xAF\r\xAF\x0E\xAF\u10E4\x03\xAF\x03\xAF\x06\xAF\u10E9\n\xAF\r" +
		"\xAF\x0E\xAF\u10EA\x05\xAF\u10ED\n\xAF\x03\xAF\x03\xAF\x03\xB0\x03\xB0" +
		"\x06\xB0\u10F3\n\xB0\r\xB0\x0E\xB0\u10F4\x03\xB0\x03\xB0\x06\xB0\u10F9" +
		"\n\xB0\r\xB0\x0E\xB0\u10FA\x05\xB0\u10FD\n\xB0\x03\xB0\x03\xB0\x06\xB0" +
		"\u1101\n\xB0\r\xB0\x0E\xB0\u1102\x03\xB0\x03\xB0\x06\xB0\u1107\n\xB0\r" +
		"\xB0\x0E\xB0\u1108\x05\xB0\u110B\n\xB0\x03\xB0\x03\xB0\x06\xB0\u110F\n" +
		"\xB0\r\xB0\x0E\xB0\u1110\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2" +
		"\x03\xB3\x03\xB3\x06\xB3\u111B\n\xB3\r\xB3\x0E\xB3\u111C\x03\xB3\x03\xB3" +
		"\x06\xB3\u1121\n\xB3\r\xB3\x0E\xB3\u1122\x05\xB3\u1125\n\xB3\x03\xB3\x03" +
		"\xB3\x03\xB4\x03\xB4\x06\xB4\u112B\n";
	private static readonly _serializedATNSegment2: string =
		"\xB4\r\xB4\x0E\xB4\u112C\x05\xB4\u112F\n\xB4\x03\xB4\x03\xB4\x03\xB4\x06" +
		"\xB4\u1134\n\xB4\r\xB4\x0E\xB4\u1135\x05\xB4\u1138\n\xB4\x03\xB4\x03\xB4" +
		"\x06\xB4\u113C\n\xB4\r\xB4\x0E\xB4\u113D\x03\xB4\x03\xB4\x05\xB4\u1142" +
		"\n\xB4\x05\xB4\u1144\n\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u114A" +
		"\n\xB5\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x07\xB7\u1150\n\xB7\f\xB7\x0E\xB7" +
		"\u1153\v\xB7\x03\xB7\x03\xB7\x07\xB7\u1157\n\xB7\f\xB7\x0E\xB7\u115A\v" +
		"\xB7\x03\xB7\x03\xB7\x07\xB7\u115E\n\xB7\f\xB7\x0E\xB7\u1161\v\xB7\x07" +
		"\xB7\u1163\n\xB7\f\xB7\x0E\xB7\u1166\v\xB7\x03\xB7\x03\xB7\x07\xB7\u116A" +
		"\n\xB7\f\xB7\x0E\xB7\u116D\v\xB7\x07\xB7\u116F\n\xB7\f\xB7\x0E\xB7\u1172" +
		"\v\xB7\x03\xB7\x03\xB7\x07\xB7\u1176\n\xB7\f\xB7\x0E\xB7\u1179\v\xB7\x07" +
		"\xB7\u117B\n\xB7\f\xB7\x0E\xB7\u117E\v\xB7\x03\xB7\x03\xB7\x07\xB7\u1182" +
		"\n\xB7\f\xB7\x0E\xB7\u1185\v\xB7\x07\xB7\u1187\n\xB7\f\xB7\x0E\xB7\u118A" +
		"\v\xB7\x03\xB7\x03\xB7\x07\xB7\u118E\n\xB7\f\xB7\x0E\xB7\u1191\v\xB7\x05" +
		"\xB7\u1193\n\xB7\x03\xB8\x03\xB8\x06\xB8\u1197\n\xB8\r\xB8\x0E\xB8\u1198" +
		"\x03\xB8\x03\xB8\x06\xB8\u119D\n\xB8\r\xB8\x0E\xB8\u119E\x03\xB8\x03\xB8" +
		"\x06\xB8\u11A3\n\xB8\r\xB8\x0E\xB8\u11A4\x05\xB8\u11A7\n\xB8\x03\xB8\x03" +
		"\xB8\x06\xB8\u11AB\n\xB8\r\xB8\x0E\xB8\u11AC\x05\xB8\u11AF\n\xB8\x03\xB8" +
		"\x03\xB8\x07\xB8\u11B3\n\xB8\f\xB8\x0E\xB8\u11B6\v\xB8\x06\xB8\u11B8\n" +
		"\xB8\r\xB8\x0E\xB8\u11B9\x03\xB9\x03\xB9\x06\xB9\u11BE\n\xB9\r\xB9\x0E" +
		"\xB9\u11BF\x03\xB9\x03\xB9\x06\xB9\u11C4\n\xB9\r\xB9\x0E\xB9\u11C5\x03" +
		"\xB9\x03\xB9\x05\xB9\u11CA\n\xB9\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03\xBC" +
		"\x03\xBC\x06\xBC\u11D2\n\xBC\r\xBC\x0E\xBC\u11D3\x03\xBC\x03\xBC\x06\xBC" +
		"\u11D8\n\xBC\r\xBC\x0E\xBC\u11D9\x03\xBC\x03\xBC\x06\xBC\u11DE\n\xBC\r" +
		"\xBC\x0E\xBC\u11DF\x05\xBC\u11E2\n\xBC\x03\xBC\x03\xBC\x06\xBC\u11E6\n" +
		"\xBC\r\xBC\x0E\xBC\u11E7\x05\xBC\u11EA\n\xBC\x03\xBC\x03\xBC\x03\xBD\x03" +
		"\xBD\x06\xBD\u11F0\n\xBD\r\xBD\x0E\xBD\u11F1\x03\xBD\x03\xBD\x06\xBD\u11F6" +
		"\n\xBD\r\xBD\x0E\xBD\u11F7\x05\xBD\u11FA\n\xBD\x03\xBD\x03\xBD\x03\xBD" +
		"\x03\xBD\x06\xBD\u1200\n\xBD\r\xBD\x0E\xBD\u1201\x03\xBD\x03\xBD\x03\xBD" +
		"\x05\xBD\u1207\n\xBD\x03\xBE\x03\xBE\x03\xBF\x03\xBF\x03\xC0\x03\xC0\x06" +
		"\xC0\u120F\n\xC0\r\xC0\x0E\xC0\u1210\x03\xC0\x03\xC0\x06\xC0\u1215\n\xC0" +
		"\r\xC0\x0E\xC0\u1216\x05\xC0\u1219\n\xC0\x05\xC0\u121B\n\xC0\x03\xC0\x03" +
		"\xC0\x03\xC0\x06\xC0\u1220\n\xC0\r\xC0\x0E\xC0\u1221\x03\xC0\x03\xC0\x05" +
		"\xC0\u1226\n\xC0\x03\xC1\x03\xC1\x03\xC2\x03\xC2\x06\xC2\u122C\n\xC2\r" +
		"\xC2\x0E\xC2\u122D\x03\xC2\x03\xC2\x06\xC2\u1232\n\xC2\r\xC2\x0E\xC2\u1233" +
		"\x05\xC2\u1236\n\xC2\x03\xC2\x03\xC2\x06\xC2\u123A\n\xC2\r\xC2\x0E\xC2" +
		"\u123B\x05\xC2\u123E\n\xC2\x03\xC2\x03\xC2\x06\xC2\u1242\n\xC2\r\xC2\x0E" +
		"\xC2\u1243\x05\xC2\u1246\n\xC2\x03\xC2\x03\xC2\x06\xC2\u124A\n\xC2\r\xC2" +
		"\x0E\xC2\u124B\x03\xC2\x03\xC2\x06\xC2\u1250\n\xC2\r\xC2\x0E\xC2\u1251" +
		"\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x06\xC4\u1258\n\xC4\r\xC4\x0E\xC4\u1259" +
		"\x03\xC4\x03\xC4\x06\xC4\u125E\n\xC4\r\xC4\x0E\xC4\u125F\x06\xC4\u1262" +
		"\n\xC4\r\xC4\x0E\xC4\u1263\x03\xC4\x03\xC4\x06\xC4\u1268\n\xC4\r\xC4\x0E" +
		"\xC4\u1269\x03\xC4\x03\xC4\x07\xC4\u126E\n\xC4\f\xC4\x0E\xC4\u1271\v\xC4" +
		"\x06\xC4\u1273\n\xC4\r\xC4\x0E\xC4\u1274\x03\xC5\x03\xC5\x03\xC5\x06\xC5" +
		"\u127A\n\xC5\r\xC5\x0E\xC5\u127B\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5" +
		"\x03\xC5\x03\xC5\x06\xC5\u1285\n\xC5\r\xC5\x0E\xC5\u1286\x05\xC5\u1289" +
		"\n\xC5\x03\xC5\x03\xC5\x06\xC5\u128D\n\xC5\r\xC5\x0E\xC5\u128E\x03\xC5" +
		"\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x06\xC5\u1296\n\xC5\r\xC5\x0E\xC5\u1297" +
		"\x03\xC5\x03\xC5\x05\xC5\u129C\n\xC5\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03" +
		"\xC8\x03\xC8\x03\xC9\x03\xC9\x03\xC9\x07\xC9\u12A7\n\xC9\f\xC9\x0E\xC9" +
		"\u12AA\v\xC9\x03\xC9\x03\xC9\x07\xC9\u12AE\n\xC9\f\xC9\x0E\xC9\u12B1\v" +
		"\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x07\xC9\u12B7\n\xC9\f\xC9\x0E\xC9" +
		"\u12BA\v\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05" +
		"\xC9\u12C3\n\xC9\x03\xC9\x03\xC9\x07\xC9\u12C7\n\xC9\f\xC9\x0E\xC9\u12CA" +
		"\v\xC9\x03\xC9\x03\xC9\x07\xC9\u12CE\n\xC9\f\xC9\x0E\xC9\u12D1\v\xC9\x03" +
		"\xC9\x03\xC9\x07\xC9\u12D5\n\xC9\f\xC9\x0E\xC9\u12D8\v\xC9\x03\xCA\x03" +
		"\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u12E0\n\xCA\x03\xCB\x03\xCB" +
		"\x03\xCC\x03\xCC\x07\xCC\u12E6\n\xCC\f\xCC\x0E\xCC\u12E9\v\xCC\x03\xCC" +
		"\x05\xCC\u12EC\n\xCC\x03\xCC\x07\xCC\u12EF\n\xCC\f\xCC\x0E\xCC\u12F2\v" +
		"\xCC\x03\xCC\x05\xCC\u12F5\n\xCC\x03\xCC\x03\xCC\x07\xCC\u12F9\n\xCC\f" +
		"\xCC\x0E\xCC\u12FC\v\xCC\x03\xCC\x03\xCC\x07\xCC\u1300\n\xCC\f\xCC\x0E" +
		"\xCC\u1303\v\xCC\x03\xCC\x05\xCC\u1306\n\xCC\x03\xCC\x07\xCC\u1309\n\xCC" +
		"\f\xCC\x0E\xCC\u130C\v\xCC\x03\xCC\x05\xCC\u130F\n\xCC\x05\xCC\u1311\n" +
		"\xCC\x03\xCD\x03\xCD\x03\xCE\x03\xCE\x07\xCE\u1317\n\xCE\f\xCE\x0E\xCE" +
		"\u131A\v\xCE\x03\xCE\x03\xCE\x05\xCE\u131E\n\xCE\x03\xCE\x07\xCE\u1321" +
		"\n\xCE\f\xCE\x0E\xCE\u1324\v\xCE\x03\xCE\x03\xCE\x05\xCE\u1328\n\xCE\x07" +
		"\xCE\u132A\n\xCE\f\xCE\x0E\xCE\u132D\v\xCE\x03\xCE\x07\xCE\u1330\n\xCE" +
		"\f\xCE\x0E\xCE\u1333\v\xCE\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x07\xCF\u1339" +
		"\n\xCF\f\xCF\x0E\xCF\u133C\v\xCF\x03\xCF\x03\xCF\x07\xCF\u1340\n\xCF\f" +
		"\xCF\x0E\xCF\u1343\v\xCF\x03\xCF\x03\xCF\x07\xCF\u1347\n\xCF\f\xCF\x0E" +
		"\xCF\u134A\v\xCF\x03\xCF\x05\xCF\u134D\n\xCF\x03\xCF\x07\xCF\u1350\n\xCF" +
		"\f\xCF\x0E\xCF\u1353\v\xCF\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x03\xD1\x03" +
		"\xD1\x03\xD2\x03\xD2\x03\xD2\x02\x02\x03\u0190\xD3\x02\x02\x04\x02\x06" +
		"\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02" +
		"\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x02" +
		"2\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02" +
		"N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02" +
		"j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02" +
		"\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02" +
		"\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02" +
		"\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02" +
		"\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02" +
		"\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02" +
		"\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02" +
		"\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100" +
		"\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E" +
		"\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C" +
		"\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A" +
		"\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138" +
		"\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146" +
		"\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154" +
		"\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162" +
		"\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170" +
		"\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E" +
		"\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C" +
		"\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A" +
		"\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\x02#\x03\x02\u0176\u0176" +
		"\x03\x02\u012F\u0130\x04\x02\xBC\xBC\u010B\u010B\x03\x02\xB6\xB7\x03\x02" +
		"\u0137\u0138\x03\x02\u0170\u0171\x04\x02\x13\x13``\x04\x02\xBB\xBB\u013D" +
		"\u013D\x04\x02\x93\x93\u0173\u0173\x03\x02\xC0\xC1\x04\x02\u011B\u011B" +
		"\u0143\u0143\x03\x02\xE7\xE8\x07\x02\u015E\u015F\u0167\u0168\u016D\u016D" +
		"\u0171\u0171\u0173\u0173\x04\x02\x90\x90\xA5\xA5\x04\x02\xD8\xD8\u0122" +
		"\u0122\x04\x02\xC0\xC0\u010E\u010E\x03\x02\x82\x83\x04\x0266\xAD\xAD\x04" +
		"\x02\xD0\xD0\u0122\u0122\x06\x02\x07\x07\xA4\xA4\u014D\u014D\u0173\u0173" +
		"\x05\x02--\xCC\xCC\u0151\u0151\x04\x02\xA9\xA9\xD6\xD6\x04\x02\r\r\xB4" +
		"\xB4\x07\x02))GG\xC2\xC2\xE2\xE3\u0131\u0133\x04\x02\x10\x11\x80\x81\x05" +
		"\x02hh\xF3\xF3\u0118\u0118\x03\x02\x0E\x0F\x04\x02--\xF7\xF7\x04\x02h" +
		"h\x8C\x8C\x04\x02\xF9\xF9\u0141\u0141\x04\x02\xF6\xF6\u011D\u011E\x03" +
		"\x02IJ\x03\x02\u015B\u015C\x02\u164B\x02\u01A8\x03\x02\x02\x02\x04\u01B3" +
		"\x03\x02\x02\x02\x06\u01B9\x03\x02\x02\x02\b\u01CB\x03\x02\x02\x02\n\u01CD" +
		"\x03\x02\x02\x02\f\u01D7\x03\x02\x02\x02\x0E\u01FA\x03\x02\x02\x02\x10" +
		"\u023B\x03\x02\x02\x02\x12\u0277\x03\x02\x02\x02\x14\u0297\x03\x02\x02" +
		"\x02\x16\u02B7\x03\x02\x02\x02\x18\u02E3\x03\x02\x02\x02\x1A\u0303\x03" +
		"\x02\x02\x02\x1C\u031E\x03\x02\x02\x02\x1E\u0339\x03\x02\x02\x02 \u0371" +
		"\x03\x02\x02\x02\"\u0373\x03\x02\x02\x02$\u0380\x03\x02\x02\x02&\u03A9" +
		"\x03\x02\x02\x02(\u03E7\x03\x02\x02\x02*\u03E9\x03\x02\x02\x02,\u03FF" +
		"\x03\x02\x02\x02.\u0401\x03\x02\x02\x020\u041D\x03\x02\x02\x022\u042C" +
		"\x03\x02\x02\x024\u0447\x03\x02\x02\x026\u0449\x03\x02\x02\x028\u0451" +
		"\x03\x02\x02\x02:\u0453\x03\x02\x02\x02<\u0455\x03\x02\x02\x02>\u0457" +
		"\x03\x02\x02\x02@\u0473\x03\x02\x02\x02B\u048E\x03\x02\x02\x02D\u0490" +
		"\x03\x02\x02\x02F\u04B3\x03\x02\x02\x02H\u04E5\x03\x02\x02\x02J\u04E7" +
		"\x03\x02\x02\x02L\u04E9\x03\x02\x02\x02N\u04EB\x03\x02\x02\x02P\u04ED" +
		"\x03\x02\x02\x02R\u04FA\x03\x02\x02\x02T\u05C0\x03\x02\x02\x02V\u05D1" +
		"\x03\x02\x02\x02X\u060B\x03\x02\x02\x02Z\u0625\x03\x02\x02\x02\\\u0627" +
		"\x03\x02\x02\x02^\u0629\x03\x02\x02\x02`\u062B\x03\x02\x02\x02b\u062D" +
		"\x03\x02\x02\x02d\u0679\x03\x02\x02\x02f\u067B\x03\x02\x02\x02h\u068E" +
		"\x03\x02\x02\x02j\u06B0\x03\x02\x02\x02l\u06B2\x03\x02\x02\x02n\u0772" +
		"\x03\x02\x02\x02p\u0774\x03\x02\x02\x02r\u0776\x03\x02\x02\x02t\u0778" +
		"\x03\x02\x02\x02v\u077A\x03\x02\x02\x02x\u077C\x03\x02\x02\x02z\u077E" +
		"\x03\x02\x02\x02|\u0780\x03\x02\x02\x02~\u0791\x03\x02\x02\x02\x80\u07D4" +
		"\x03\x02\x02\x02\x82\u07D6\x03\x02\x02\x02\x84\u07E7\x03\x02\x02\x02\x86" +
		"\u07EB\x03\x02\x02\x02\x88\u07ED\x03\x02\x02\x02\x8A\u07EF\x03\x02\x02" +
		"\x02\x8C\u07F3\x03\x02\x02\x02\x8E\u0809\x03\x02\x02\x02\x90\u081D\x03" +
		"\x02\x02\x02\x92\u081F\x03\x02\x02\x02\x94\u0894\x03\x02\x02\x02\x96\u0898" +
		"\x03\x02\x02\x02\x98\u089C\x03\x02\x02\x02\x9A\u08A0\x03\x02\x02\x02\x9C" +
		"\u08A2\x03\x02\x02\x02\x9E\u08CB\x03\x02\x02\x02\xA0\u08CD\x03\x02\x02" +
		"\x02\xA2\u08E9\x03\x02\x02\x02\xA4\u08EB\x03\x02\x02\x02\xA6\u090E\x03" +
		"\x02\x02\x02\xA8\u0991\x03\x02\x02\x02\xAA\u0993\x03\x02\x02\x02\xAC\u0995" +
		"\x03\x02\x02\x02\xAE\u0997\x03\x02\x02\x02\xB0\u0999\x03\x02\x02\x02\xB2" +
		"\u09B3\x03\x02\x02\x02\xB4\u0A7F\x03\x02\x02\x02\xB6\u0A81\x03\x02\x02" +
		"\x02\xB8\u0A89\x03\x02\x02\x02\xBA\u0A93\x03\x02\x02\x02\xBC\u0A9B\x03" +
		"\x02\x02\x02\xBE\u0A9F\x03\x02\x02\x02\xC0\u0AA1\x03\x02\x02\x02\xC2\u0AA3" +
		"\x03\x02\x02\x02\xC4\u0AC5\x03\x02\x02\x02\xC6\u0AC7\x03\x02\x02\x02\xC8" +
		"\u0AF0\x03\x02\x02\x02\xCA\u0AF8\x03\x02\x02\x02\xCC\u0B0A\x03\x02\x02" +
		"\x02\xCE\u0B14\x03\x02\x02\x02\xD0\u0B1F\x03\x02\x02\x02\xD2\u0B21\x03" +
		"\x02\x02\x02\xD4\u0B36\x03\x02\x02\x02\xD6\u0B4B\x03\x02\x02\x02\xD8\u0B60" +
		"\x03\x02\x02\x02\xDA\u0B75\x03\x02\x02\x02\xDC\u0B8A\x03\x02\x02\x02\xDE" +
		"\u0BA4\x03\x02\x02\x02\xE0\u0BBB\x03\x02\x02\x02\xE2\u0BD5\x03\x02\x02" +
		"\x02\xE4\u0C04\x03\x02\x02\x02\xE6\u0C1E\x03\x02\x02\x02\xE8\u0C40\x03" +
		"\x02\x02\x02\xEA\u0C48\x03\x02\x02\x02\xEC\u0C52\x03\x02\x02\x02\xEE\u0C86" +
		"\x03\x02\x02\x02\xF0\u0C9D\x03\x02\x02\x02\xF2\u0C9F\x03\x02\x02\x02\xF4" +
		"\u0CA7\x03\x02\x02\x02\xF6\u0CC2\x03\x02\x02\x02\xF8\u0CC4\x03\x02\x02" +
		"\x02\xFA\u0CD0\x03\x02\x02\x02\xFC\u0CD2\x03\x02\x02\x02\xFE\u0D5A\x03" +
		"\x02\x02\x02\u0100\u0D5C\x03\x02\x02\x02\u0102\u0D6F\x03\x02\x02\x02\u0104" +
		"\u0D9F\x03\x02\x02\x02\u0106\u0DA1\x03\x02\x02\x02\u0108\u0DA3\x03\x02" +
		"\x02\x02\u010A\u0DA5\x03\x02\x02\x02\u010C\u0DC4\x03\x02\x02\x02\u010E" +
		"\u0DC6\x03\x02\x02\x02\u0110\u0DD6\x03\x02\x02\x02\u0112\u0DEA\x03\x02" +
		"\x02\x02\u0114\u0DF7\x03\x02\x02\x02\u0116\u0E0D\x03\x02\x02\x02\u0118" +
		"\u0E1A\x03\x02\x02\x02\u011A\u0E1C\x03\x02\x02\x02\u011C\u0E1E\x03\x02" +
		"\x02\x02\u011E\u0E44\x03\x02\x02\x02\u0120\u0E68\x03\x02\x02\x02\u0122" +
		"\u0E6A\x03\x02\x02\x02\u0124\u0E6C\x03\x02\x02\x02\u0126\u0E6E\x03\x02" +
		"\x02\x02\u0128\u0E70\x03\x02\x02\x02\u012A\u0EA7\x03\x02\x02\x02\u012C" +
		"\u0EBF\x03\x02\x02\x02\u012E\u0ED7\x03\x02\x02\x02\u0130\u0ED9\x03\x02" +
		"\x02\x02\u0132\u0EDB\x03\x02\x02\x02\u0134\u0EDD\x03\x02\x02\x02\u0136" +
		"\u0EDF\x03\x02\x02\x02\u0138\u0EE1\x03\x02\x02\x02\u013A\u0EE3\x03\x02" +
		"\x02\x02\u013C\u0EE5\x03\x02\x02\x02\u013E\u0EE7\x03\x02\x02\x02\u0140" +
		"\u0F01\x03\x02\x02\x02\u0142\u0F82\x03\x02\x02\x02\u0144\u0F94\x03\x02" +
		"\x02\x02\u0146\u0F9C\x03\x02\x02\x02\u0148\u0FEB\x03\x02\x02\x02\u014A" +
		"\u1003\x03\x02\x02\x02\u014C\u1025\x03\x02\x02\x02\u014E\u1035\x03\x02" +
		"\x02\x02\u0150\u1037\x03\x02\x02\x02\u0152\u104D\x03\x02\x02\x02\u0154" +
		"\u1065\x03\x02\x02\x02\u0156\u1073\x03\x02\x02\x02\u0158\u1082\x03\x02" +
		"\x02\x02\u015A\u10DE\x03\x02\x02\x02\u015C\u10E0\x03\x02\x02\x02\u015E" +
		"\u10F0\x03\x02\x02\x02\u0160\u1114\x03\x02\x02\x02\u0162\u1116\x03\x02" +
		"\x02\x02\u0164\u1118\x03\x02\x02\x02\u0166\u1143\x03\x02\x02\x02\u0168" +
		"\u1149\x03\x02\x02\x02\u016A\u114B\x03\x02\x02\x02\u016C\u114D\x03\x02" +
		"\x02\x02\u016E\u1194\x03\x02\x02\x02\u0170\u11BB\x03\x02\x02\x02\u0172" +
		"\u11CB\x03\x02\x02\x02\u0174\u11CD\x03\x02\x02\x02\u0176\u11CF\x03\x02" +
		"\x02\x02\u0178\u1206\x03\x02\x02\x02\u017A\u1208\x03\x02\x02\x02\u017C" +
		"\u120A\x03\x02\x02\x02\u017E\u1225\x03\x02\x02\x02\u0180\u1227\x03\x02" +
		"\x02\x02\u0182\u1229\x03\x02\x02\x02\u0184\u1253\x03\x02\x02\x02\u0186" +
		"\u1255\x03\x02\x02\x02\u0188\u129B\x03\x02\x02\x02\u018A\u129D\x03\x02" +
		"\x02\x02\u018C\u129F\x03\x02\x02\x02\u018E\u12A1\x03\x02\x02\x02\u0190" +
		"\u12C2\x03\x02\x02\x02\u0192\u12DF\x03\x02\x02\x02\u0194\u12E1\x03\x02" +
		"\x02\x02\u0196\u1310\x03\x02\x02\x02\u0198\u1312\x03\x02\x02\x02\u019A" +
		"\u1314\x03\x02\x02\x02\u019C\u1336\x03\x02\x02\x02\u019E\u1356\x03\x02" +
		"\x02\x02\u01A0\u1358\x03\x02\x02\x02\u01A2\u135A\x03\x02\x02\x02\u01A4" +
		"\u01A7\x05\n\x06\x02\u01A5\u01A7\x05\x04\x03\x02\u01A6\u01A4\x03\x02\x02" +
		"\x02\u01A6\u01A5\x03\x02\x02\x02\u01A7\u01AA\x03\x02\x02\x02\u01A8\u01A6" +
		"\x03\x02\x02\x02\u01A8\u01A9\x03\x02\x02\x02\u01A9\u01AB\x03\x02\x02\x02" +
		"\u01AA\u01A8\x03\x02\x02\x02\u01AB\u01AC\x07\x02\x02\x03\u01AC\x03\x03" +
		"\x02\x02\x02\u01AD\u01B4\x07\u0175\x02\x02\u01AE\u01B4\x07\u0176\x02\x02" +
		"\u01AF\u01B4\x07\u0174\x02\x02\u01B0\u01B4\x07\u015F\x02\x02\u01B1\u01B4" +
		"\x07\u0160\x02\x02\u01B2\u01B4\x05\b\x05\x02\u01B3\u01AD\x03\x02\x02\x02" +
		"\u01B3\u01AE\x03\x02\x02\x02\u01B3\u01AF\x03\x02\x02\x02\u01B3\u01B0\x03" +
		"\x02\x02\x02\u01B3\u01B1\x03\x02\x02\x02\u01B3\u01B2\x03\x02\x02\x02\u01B4" +
		"\x05\x03\x02\x02\x02\u01B5\u01BA\x07\u0175\x02\x02\u01B6\u01BA\x07\u0176" +
		"\x02\x02\u01B7\u01BA\x07\u0174\x02\x02\u01B8\u01BA\x05\b\x05\x02\u01B9" +
		"\u01B5\x03\x02\x02\x02\u01B9\u01B6\x03\x02\x02\x02\u01B9\u01B7\x03\x02" +
		"\x02\x02\u01B9\u01B8\x03\x02\x02\x02\u01BA\x07\x03\x02\x02\x02\u01BB\u01BF" +
		"\x07\u0157\x02\x02\u01BC\u01BE\n\x02\x02\x02\u01BD\u01BC\x03\x02\x02\x02" +
		"\u01BE\u01C1\x03\x02\x02\x02\u01BF\u01BD\x03\x02\x02\x02\u01BF\u01C0\x03" +
		"\x02\x02\x02\u01C0\u01C2\x03\x02\x02\x02\u01C1\u01BF\x03\x02\x02\x02\u01C2" +
		"\u01CC\x07\u0176\x02\x02\u01C3\u01C7\x07\u0158\x02\x02\u01C4\u01C6\n\x02" +
		"\x02\x02\u01C5\u01C4\x03\x02\x02\x02\u01C6\u01C9\x03\x02\x02\x02\u01C7" +
		"\u01C5\x03\x02\x02\x02\u01C7\u01C8\x03\x02\x02\x02\u01C8\u01CA\x03\x02" +
		"\x02\x02\u01C9\u01C7\x03\x02\x02\x02\u01CA\u01CC\x07\u0176\x02\x02\u01CB" +
		"\u01BB\x03\x02\x02\x02\u01CB\u01C3\x03\x02\x02\x02\u01CC\t\x03\x02\x02" +
		"\x02\u01CD\u01CF\x05\xC2b\x02\u01CE\u01D0\x05\xE0q\x02\u01CF\u01CE\x03" +
		"\x02\x02\x02\u01CF\u01D0\x03\x02\x02\x02\u01D0\u01D2\x03\x02\x02\x02\u01D1" +
		"\u01D3\x05\x0E\b\x02\u01D2\u01D1\x03\x02\x02\x02\u01D2\u01D3\x03\x02\x02" +
		"\x02\u01D3\u01D5\x03\x02\x02\x02\u01D4\u01D6\x05\f\x07\x02\u01D5\u01D4" +
		"\x03\x02\x02\x02\u01D5\u01D6\x03\x02\x02\x02\u01D6\v\x03\x02\x02\x02\u01D7" +
		"\u01D9\x07\xF0\x02\x02\u01D8\u01DA\x05\x04\x03\x02\u01D9\u01D8\x03\x02" +
		"\x02\x02\u01DA\u01DB\x03\x02\x02\x02\u01DB\u01D9\x03\x02\x02\x02\u01DB" +
		"\u01DC\x03\x02\x02\x02\u01DC\u01DD\x03\x02\x02\x02\u01DD\u01E1\x07e\x02" +
		"\x02\u01DE\u01E0\x05\x04\x03\x02\u01DF\u01DE\x03\x02\x02\x02\u01E0\u01E3" +
		"\x03\x02\x02\x02\u01E1\u01DF\x03\x02\x02\x02\u01E1\u01E2\x03\x02\x02\x02" +
		"\u01E2\u01E4\x03\x02\x02\x02\u01E3\u01E1\x03\x02\x02\x02\u01E4\u01E8\x07" +
		"\u016D\x02\x02\u01E5\u01E7\x05\x04\x03\x02\u01E6\u01E5\x03\x02\x02\x02" +
		"\u01E7\u01EA\x03\x02\x02\x02\u01E8\u01E6\x03\x02\x02\x02\u01E8\u01E9\x03" +
		"\x02\x02\x02\u01E9\u01F7\x03\x02\x02\x02\u01EA\u01E8\x03\x02\x02\x02\u01EB" +
		"\u01EF\x05\u0190\xC9\x02\u01EC\u01EE\x05\x04\x03\x02\u01ED\u01EC\x03\x02" +
		"\x02\x02\u01EE\u01F1\x03\x02\x02\x02\u01EF\u01ED\x03\x02\x02\x02\u01EF" +
		"\u01F0\x03\x02\x02\x02\u01F0\u01F2\x03\x02\x02\x02\u01F1\u01EF\x03\x02" +
		"\x02\x02\u01F2\u01F3\x07\u016D\x02\x02\u01F3\u01F6\x03\x02\x02\x02\u01F4" +
		"\u01F6\x05\x04\x03\x02\u01F5\u01EB\x03\x02\x02\x02\u01F5\u01F4\x03\x02" +
		"\x02\x02\u01F6\u01F9\x03\x02\x02\x02\u01F7\u01F5\x03\x02\x02\x02\u01F7" +
		"\u01F8\x03\x02\x02\x02\u01F8\r\x03\x02\x02\x02\u01F9\u01F7\x03\x02\x02" +
		"\x02\u01FA\u01FC\x07S\x02\x02\u01FB\u01FD\x05\x04\x03\x02\u01FC\u01FB" +
		"\x03\x02\x02\x02\u01FD\u01FE\x03\x02\x02\x02\u01FE\u01FC\x03\x02\x02\x02" +
		"\u01FE\u01FF\x03\x02\x02\x02\u01FF\u0200\x03\x02\x02\x02\u0200\u0204\x07" +
		"e\x02\x02\u0201\u0203\x05\x04\x03\x02\u0202\u0201\x03\x02\x02\x02\u0203" +
		"\u0206\x03\x02\x02\x02\u0204\u0202\x03\x02\x02\x02\u0204\u0205\x03\x02" +
		"\x02\x02\u0205\u0207\x03\x02\x02\x02\u0206\u0204\x03\x02\x02\x02\u0207" +
		"\u020B\x07\u016D\x02\x02\u0208\u020A\x05\x04\x03\x02\u0209\u0208\x03\x02" +
		"\x02\x02\u020A\u020D\x03\x02\x02\x02\u020B\u0209\x03\x02\x02\x02\u020B" +
		"\u020C\x03\x02\x02\x02\u020C\u0215\x03\x02\x02\x02\u020D\u020B\x03\x02" +
		"\x02\x02\u020E\u0212\x05\x10\t\x02\u020F\u0211\x05\x04\x03\x02\u0210\u020F" +
		"\x03\x02\x02\x02\u0211\u0214\x03\x02\x02\x02\u0212\u0210\x03\x02\x02\x02" +
		"\u0212\u0213\x03\x02\x02\x02\u0213\u0216\x03\x02\x02\x02\u0214\u0212\x03" +
		"\x02\x02\x02\u0215\u020E\x03\x02\x02\x02\u0215\u0216\x03\x02\x02\x02\u0216" +
		"\u021E\x03\x02\x02\x02\u0217\u021B\x05\x12\n\x02\u0218\u021A\x05\x04\x03" +
		"\x02\u0219\u0218\x03\x02\x02\x02\u021A\u021D\x03\x02\x02\x02\u021B\u0219" +
		"\x03\x02\x02\x02\u021B\u021C\x03\x02\x02\x02\u021C\u021F\x03\x02\x02\x02" +
		"\u021D\u021B\x03\x02\x02\x02\u021E\u0217\x03\x02\x02\x02\u021E\u021F\x03" +
		"\x02\x02\x02\u021F\u0227\x03\x02\x02\x02\u0220\u0224\x05\x14\v\x02\u0221" +
		"\u0223\x05\x04\x03\x02\u0222\u0221\x03\x02\x02\x02\u0223\u0226\x03\x02" +
		"\x02\x02\u0224\u0222\x03\x02\x02\x02\u0224\u0225\x03\x02\x02\x02\u0225" +
		"\u0228\x03\x02\x02\x02\u0226\u0224\x03\x02\x02\x02\u0227\u0220\x03\x02" +
		"\x02\x02\u0227\u0228\x03\x02\x02\x02\u0228\u0230\x03\x02\x02\x02\u0229" +
		"\u022D\x05\x16\f\x02\u022A\u022C\x05\x04\x03\x02\u022B\u022A\x03\x02\x02" +
		"\x02\u022C\u022F\x03\x02\x02\x02\u022D\u022B\x03\x02\x02\x02\u022D\u022E" +
		"\x03\x02\x02\x02\u022E\u0231\x03\x02\x02\x02\u022F\u022D\x03\x02\x02\x02" +
		"\u0230\u0229\x03\x02\x02\x02\u0230\u0231\x03\x02\x02\x02\u0231\u0239\x03" +
		"\x02\x02\x02\u0232\u0236\x05\x18\r\x02\u0233\u0235\x05\x04\x03\x02\u0234" +
		"\u0233\x03\x02\x02\x02\u0235\u0238\x03\x02\x02\x02\u0236\u0234\x03\x02" +
		"\x02\x02\u0236\u0237\x03\x02\x02\x02\u0237\u023A\x03\x02\x02\x02\u0238" +
		"\u0236\x03\x02\x02\x02\u0239\u0232\x03\x02\x02\x02\u0239\u023A\x03\x02" +
		"\x02\x02\u023A\x0F\x03\x02\x02\x02\u023B\u023D\x07\x8E\x02\x02\u023C\u023E" +
		"\x05\x04\x03\x02\u023D\u023C\x03\x02\x02\x02\u023E\u023F\x03\x02\x02\x02" +
		"\u023F\u023D\x03\x02\x02\x02\u023F\u0240\x03\x02\x02\x02\u0240\u0241\x03" +
		"\x02\x02\x02\u0241\u0245\x07\u0111\x02\x02\u0242\u0244\x05\x04\x03\x02" +
		"\u0243\u0242\x03\x02\x02\x02\u0244\u0247\x03\x02\x02\x02\u0245\u0243\x03" +
		"\x02\x02\x02\u0245\u0246\x03\x02\x02\x02\u0246\u0248\x03\x02\x02\x02\u0247" +
		"\u0245\x03\x02\x02\x02\u0248\u024C\x07\u016D\x02\x02\u0249\u024B\x05\x04" +
		"\x03\x02\u024A\u0249\x03\x02\x02\x02\u024B\u024E\x03\x02\x02\x02\u024C" +
		"\u024A\x03\x02\x02\x02\u024C\u024D\x03\x02\x02\x02\u024D\u0274\x03\x02" +
		"\x02\x02\u024E\u024C\x03\x02\x02\x02\u024F\u0259\x05\x1A\x0E\x02\u0250" +
		"\u0252\x05\x04\x03\x02\u0251\u0250\x03\x02\x02\x02\u0252\u0255\x03\x02" +
		"\x02\x02\u0253\u0251\x03\x02\x02\x02\u0253\u0254\x03\x02\x02\x02\u0254" +
		"\u0256\x03\x02\x02\x02\u0255\u0253\x03\x02\x02\x02\u0256\u0258\x05\"\x12" +
		"\x02\u0257\u0253\x03\x02\x02\x02\u0258\u025B\x03\x02\x02\x02\u0259\u0257" +
		"\x03\x02\x02\x02\u0259\u025A\x03\x02\x02\x02\u025A\u026B\x03\x02\x02\x02" +
		"\u025B\u0259\x03\x02\x02\x02\u025C\u026B\x05\x1E\x10\x02\u025D\u0267\x05" +
		"\x1C\x0F\x02\u025E\u0260\x05\x04\x03\x02\u025F\u025E\x03\x02\x02\x02\u0260" +
		"\u0263\x03\x02\x02\x02\u0261\u025F\x03\x02\x02\x02\u0261\u0262\x03\x02" +
		"\x02\x02\u0262\u0264\x03\x02\x02\x02\u0263\u0261\x03\x02\x02\x02\u0264" +
		"\u0266\x05\"\x12\x02\u0265\u0261\x03\x02\x02\x02\u0266\u0269\x03\x02\x02" +
		"\x02\u0267\u0265\x03\x02\x02\x02\u0267\u0268\x03\x02\x02\x02\u0268\u026B" +
		"\x03\x02\x02\x02\u0269\u0267\x03\x02\x02\x02\u026A\u024F\x03\x02\x02\x02" +
		"\u026A\u025C\x03\x02\x02\x02\u026A\u025D\x03\x02\x02\x02\u026B\u026F\x03" +
		"\x02\x02\x02\u026C\u026E\x05\x04\x03\x02\u026D\u026C\x03\x02\x02\x02\u026E" +
		"\u0271\x03\x02\x02\x02\u026F\u026D\x03\x02\x02\x02\u026F\u0270\x03\x02" +
		"\x02\x02\u0270\u0273\x03\x02\x02\x02\u0271\u026F\x03\x02\x02\x02\u0272" +
		"\u026A\x03\x02\x02\x02\u0273\u0276\x03\x02\x02\x02\u0274\u0272\x03\x02" +
		"\x02\x02\u0274\u0275\x03\x02\x02\x02\u0275\x11\x03\x02\x02\x02\u0276\u0274" +
		"\x03\x02\x02\x02\u0277\u0279\x07\u0152\x02\x02\u0278\u027A\x05\x04\x03" +
		"\x02\u0279\u0278\x03\x02\x02\x02\u027A\u027B\x03\x02\x02\x02\u027B\u0279" +
		"\x03\x02\x02\x02\u027B\u027C\x03\x02\x02\x02\u027C\u027D\x03\x02\x02\x02" +
		"\u027D\u0281\x07\u0111\x02\x02\u027E\u0280\x05\x04\x03\x02\u027F\u027E" +
		"\x03\x02\x02\x02\u0280\u0283\x03\x02\x02\x02\u0281\u027F\x03\x02\x02\x02" +
		"\u0281\u0282\x03\x02\x02\x02\u0282\u0284\x03\x02\x02\x02\u0283\u0281\x03" +
		"\x02\x02\x02\u0284\u0288\x07\u016D\x02\x02\u0285\u0287\x05\x04\x03\x02" +
		"\u0286\u0285\x03\x02\x02\x02\u0287\u028A\x03\x02\x02\x02\u0288\u0286\x03" +
		"\x02\x02\x02\u0288\u0289\x03\x02\x02\x02\u0289\u0294\x03\x02\x02\x02\u028A" +
		"\u0288\x03\x02\x02\x02\u028B\u028F\x05\"\x12\x02\u028C\u028E\x05\x04\x03" +
		"\x02\u028D\u028C\x03\x02\x02\x02\u028E\u0291\x03\x02\x02\x02\u028F\u028D" +
		"\x03\x02\x02\x02\u028F\u0290\x03\x02\x02\x02\u0290\u0293\x03\x02\x02\x02" +
		"\u0291\u028F\x03\x02\x02\x02\u0292\u028B\x03\x02\x02\x02\u0293\u0296\x03" +
		"\x02\x02\x02\u0294\u0292\x03\x02\x02\x02\u0294\u0295\x03\x02\x02\x02\u0295" +
		"\x13\x03\x02\x02\x02\u0296\u0294\x03\x02\x02\x02\u0297\u0299\x07\xC3\x02" +
		"\x02\u0298\u029A\x05\x04\x03\x02\u0299\u0298\x03\x02\x02\x02\u029A\u029B" +
		"\x03\x02\x02\x02\u029B\u0299\x03\x02\x02\x02\u029B\u029C\x03\x02\x02\x02" +
		"\u029C\u029D\x03\x02\x02\x02\u029D\u02A1\x07\u0111\x02\x02\u029E\u02A0" +
		"\x05\x04\x03\x02\u029F\u029E\x03\x02\x02\x02\u02A0\u02A3\x03\x02\x02\x02" +
		"\u02A1\u029F\x03\x02\x02\x02";
	private static readonly _serializedATNSegment3: string =
		"\u02A1\u02A2\x03\x02\x02\x02\u02A2\u02A4\x03\x02\x02\x02\u02A3\u02A1\x03" +
		"\x02\x02\x02\u02A4\u02A8\x07\u016D\x02\x02\u02A5\u02A7\x05\x04\x03\x02" +
		"\u02A6\u02A5\x03\x02\x02\x02\u02A7\u02AA\x03\x02\x02\x02\u02A8\u02A6\x03" +
		"\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9\u02B4\x03\x02\x02\x02\u02AA" +
		"\u02A8\x03\x02\x02\x02\u02AB\u02AF\x05\"\x12\x02\u02AC\u02AE\x05\x04\x03" +
		"\x02\u02AD\u02AC\x03\x02\x02\x02\u02AE\u02B1\x03\x02\x02\x02\u02AF\u02AD" +
		"\x03\x02\x02\x02\u02AF\u02B0\x03\x02\x02\x02\u02B0\u02B3\x03\x02\x02\x02" +
		"\u02B1\u02AF\x03\x02\x02\x02\u02B2\u02AB\x03\x02\x02\x02\u02B3\u02B6\x03" +
		"\x02\x02\x02\u02B4\u02B2\x03\x02\x02\x02\u02B4\u02B5\x03\x02\x02\x02\u02B5" +
		"\x15\x03\x02\x02\x02\u02B6\u02B4\x03\x02\x02\x02\u02B7\u02B9\x07\u0100" +
		"\x02\x02\u02B8\u02BA\x05\x04\x03\x02\u02B9\u02B8\x03\x02\x02\x02\u02BA" +
		"\u02BB\x03\x02\x02\x02\u02BB\u02B9\x03\x02\x02\x02\u02BB\u02BC\x03\x02" +
		"\x02\x02\u02BC\u02BD\x03\x02\x02\x02\u02BD\u02C1\x07\u0111\x02\x02\u02BE" +
		"\u02C0\x05\x04\x03\x02\u02BF\u02BE\x03\x02\x02\x02\u02C0\u02C3\x03\x02" +
		"\x02\x02\u02C1\u02BF\x03\x02\x02\x02\u02C1\u02C2\x03\x02\x02\x02\u02C2" +
		"\u02C4\x03\x02\x02\x02\u02C3\u02C1\x03\x02\x02\x02\u02C4\u02C8\x07\u016D" +
		"\x02\x02\u02C5\u02C7\x05\x04\x03\x02\u02C6\u02C5\x03\x02\x02\x02\u02C7" +
		"\u02CA\x03\x02\x02\x02\u02C8\u02C6\x03\x02\x02\x02\u02C8\u02C9\x03\x02" +
		"\x02\x02\u02C9\u02E0\x03\x02\x02\x02\u02CA\u02C8\x03\x02\x02\x02\u02CB" +
		"\u02D5\x05\x1E\x10\x02\u02CC\u02CE\x05\x04\x03\x02\u02CD\u02CC\x03\x02" +
		"\x02\x02\u02CE\u02D1\x03\x02\x02\x02\u02CF\u02CD\x03\x02\x02\x02\u02CF" +
		"\u02D0\x03\x02\x02\x02\u02D0\u02D2\x03\x02\x02\x02\u02D1\u02CF\x03\x02" +
		"\x02\x02\u02D2\u02D4\x05P)\x02\u02D3\u02CF\x03\x02\x02\x02\u02D4\u02D7" +
		"\x03\x02\x02\x02\u02D5\u02D3\x03\x02\x02\x02\u02D5\u02D6\x03\x02\x02\x02" +
		"\u02D6\u02DB\x03\x02\x02\x02\u02D7\u02D5\x03\x02\x02\x02\u02D8\u02DA\x05" +
		"\x04\x03\x02\u02D9\u02D8\x03\x02\x02\x02\u02DA\u02DD\x03\x02\x02\x02\u02DB" +
		"\u02D9\x03\x02\x02\x02\u02DB\u02DC\x03\x02\x02\x02\u02DC\u02DF\x03\x02" +
		"\x02\x02\u02DD\u02DB\x03\x02\x02\x02\u02DE\u02CB\x03\x02\x02\x02\u02DF" +
		"\u02E2\x03\x02\x02\x02\u02E0\u02DE\x03\x02\x02\x02\u02E0\u02E1\x03\x02" +
		"\x02\x02\u02E1\x17\x03\x02\x02\x02\u02E2\u02E0\x03\x02\x02\x02\u02E3\u02E5" +
		"\x07\u010E\x02\x02\u02E4\u02E6\x05\x04\x03\x02\u02E5\u02E4\x03\x02\x02" +
		"\x02\u02E6\u02E7\x03\x02\x02\x02\u02E7\u02E5\x03\x02\x02\x02\u02E7\u02E8" +
		"\x03\x02\x02\x02\u02E8\u02E9\x03\x02\x02\x02\u02E9\u02ED\x07\u0111\x02" +
		"\x02\u02EA\u02EC\x05\x04\x03\x02\u02EB\u02EA\x03\x02\x02\x02\u02EC\u02EF" +
		"\x03\x02\x02\x02\u02ED\u02EB\x03\x02\x02\x02\u02ED\u02EE\x03\x02\x02\x02" +
		"\u02EE\u02F0\x03\x02\x02\x02\u02EF\u02ED\x03\x02\x02\x02\u02F0\u02F4\x07" +
		"\u016D\x02\x02\u02F1\u02F3\x05\x04\x03\x02\u02F2\u02F1\x03\x02\x02\x02" +
		"\u02F3\u02F6\x03\x02\x02\x02\u02F4\u02F2\x03\x02\x02\x02\u02F4\u02F5\x03" +
		"\x02\x02\x02\u02F5\u0300\x03\x02\x02\x02\u02F6\u02F4\x03\x02\x02\x02\u02F7" +
		"\u02FB\x05\xB0Y\x02\u02F8\u02FA\x05\x04\x03\x02\u02F9\u02F8\x03\x02\x02" +
		"\x02\u02FA\u02FD\x03\x02\x02\x02\u02FB\u02F9\x03\x02\x02\x02\u02FB\u02FC" +
		"\x03\x02\x02\x02\u02FC\u02FF\x03\x02\x02\x02\u02FD\u02FB\x03\x02\x02\x02" +
		"\u02FE\u02F7\x03\x02\x02\x02\u02FF\u0302\x03\x02\x02\x02\u0300\u02FE\x03" +
		"\x02\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301\x19\x03\x02\x02\x02\u0302" +
		"\u0300\x03\x02\x02\x02\u0303\u0305\x07\x8D\x02\x02\u0304\u0306\x05\x04" +
		"\x03\x02\u0305\u0304\x03\x02\x02\x02\u0306\u0307\x03\x02\x02\x02\u0307" +
		"\u0305\x03\x02\x02\x02\u0307\u0308\x03\x02\x02\x02\u0308\u0309\x03\x02" +
		"\x02\x02\u0309\u030D\x05\u016A\xB6\x02\u030A\u030C\x05\x04\x03\x02\u030B" +
		"\u030A\x03\x02\x02\x02\u030C\u030F\x03\x02\x02\x02\u030D\u030B\x03\x02" +
		"\x02\x02\u030D\u030E\x03\x02\x02\x02\u030E\u0319\x03\x02\x02\x02\u030F" +
		"\u030D\x03\x02\x02\x02\u0310\u0314\x05 \x11\x02\u0311\u0313\x05\x04\x03" +
		"\x02\u0312\u0311\x03\x02\x02\x02\u0313\u0316\x03\x02\x02\x02\u0314\u0312" +
		"\x03\x02\x02\x02\u0314\u0315\x03\x02\x02\x02\u0315\u0318\x03\x02\x02\x02" +
		"\u0316\u0314\x03\x02\x02\x02\u0317\u0310\x03\x02\x02\x02\u0318\u031B\x03" +
		"\x02\x02\x02\u0319\u0317\x03\x02\x02\x02\u0319\u031A\x03\x02\x02\x02\u031A" +
		"\u031C\x03\x02\x02\x02\u031B\u0319\x03\x02\x02\x02\u031C\u031D\x07\u016D" +
		"\x02\x02\u031D\x1B\x03\x02\x02\x02\u031E\u0320\x07\u010F\x02\x02\u031F" +
		"\u0321\x05\x04\x03\x02\u0320\u031F\x03\x02\x02\x02\u0321\u0322\x03\x02" +
		"\x02\x02\u0322\u0320\x03\x02\x02\x02\u0322\u0323\x03\x02\x02\x02\u0323" +
		"\u0324\x03\x02\x02\x02\u0324\u0328\x05\u016A\xB6\x02\u0325\u0327\x05\x04" +
		"\x03\x02\u0326\u0325\x03\x02\x02\x02\u0327\u032A\x03\x02\x02\x02\u0328" +
		"\u0326\x03\x02\x02\x02\u0328\u0329\x03\x02\x02\x02\u0329\u0334\x03\x02" +
		"\x02\x02\u032A\u0328\x03\x02\x02\x02\u032B\u032F\x05\x8CG\x02\u032C\u032E" +
		"\x05\x04\x03\x02\u032D\u032C\x03\x02\x02\x02\u032E\u0331\x03\x02\x02\x02" +
		"\u032F\u032D\x03\x02\x02\x02\u032F\u0330\x03\x02\x02\x02\u0330\u0333\x03" +
		"\x02\x02\x02\u0331\u032F\x03\x02\x02\x02\u0332\u032B\x03\x02\x02\x02\u0333" +
		"\u0336\x03\x02\x02\x02\u0334\u0332\x03\x02\x02\x02\u0334\u0335\x03\x02" +
		"\x02\x02\u0335\u0337\x03\x02\x02\x02\u0336\u0334\x03\x02\x02\x02\u0337" +
		"\u0338\x07\u016D\x02\x02\u0338\x1D\x03\x02\x02\x02\u0339\u033B\x07\xF4" +
		"\x02\x02\u033A\u033C\x05\x04\x03\x02\u033B\u033A\x03\x02\x02\x02\u033C" +
		"\u033D\x03\x02\x02\x02\u033D\u033B\x03\x02\x02\x02\u033D\u033E\x03\x02" +
		"\x02\x02\u033E\u033F\x03\x02\x02\x02\u033F\u0343\x05\x90I\x02\u0340\u0342" +
		"\x05\x04\x03\x02\u0341\u0340\x03\x02\x02\x02\u0342\u0345\x03\x02\x02\x02" +
		"\u0343\u0341\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344\u034F\x03" +
		"\x02\x02\x02\u0345\u0343\x03\x02\x02\x02\u0346\u034A\x05n8\x02\u0347\u0349" +
		"\x05\x04\x03\x02\u0348\u0347\x03\x02\x02\x02\u0349\u034C\x03\x02\x02\x02" +
		"\u034A\u0348\x03\x02\x02\x02\u034A\u034B\x03\x02\x02\x02\u034B\u034E\x03" +
		"\x02\x02\x02\u034C\u034A\x03\x02\x02\x02\u034D\u0346\x03\x02\x02\x02\u034E" +
		"\u0351\x03\x02\x02\x02\u034F\u034D\x03\x02\x02\x02\u034F\u0350\x03\x02" +
		"\x02\x02\u0350\u0352\x03\x02\x02\x02\u0351\u034F\x03\x02\x02\x02\u0352" +
		"\u0353\x07\u016D\x02\x02\u0353\x1F\x03\x02\x02\x02\u0354\u0356\x07\xB4" +
		"\x02\x02\u0355\u0357\x05\x04\x03\x02\u0356\u0355\x03\x02\x02\x02\u0357" +
		"\u0358\x03\x02\x02\x02\u0358\u0356\x03\x02\x02\x02\u0358\u0359\x03\x02" +
		"\x02\x02\u0359\u035B\x03\x02\x02\x02\u035A\u0354\x03\x02\x02\x02\u035A" +
		"\u035B\x03\x02\x02\x02\u035B\u035C\x03\x02\x02\x02\u035C\u0372\x07\x8C" +
		"\x02\x02\u035D\u035F\x07\xB4\x02\x02\u035E\u0360\x05\x04\x03\x02\u035F" +
		"\u035E\x03\x02\x02\x02\u0360\u0361\x03\x02\x02\x02\u0361\u035F\x03\x02" +
		"\x02\x02\u0361\u0362\x03\x02\x02\x02\u0362\u0364\x03\x02\x02\x02\u0363" +
		"\u035D\x03\x02\x02\x02\u0363\u0364\x03\x02\x02\x02\u0364\u0365\x03\x02" +
		"\x02\x02\u0365\u0372\x07\x9F\x02\x02\u0366\u0372\x05\u015E\xB0\x02\u0367" +
		"\u0372\x05\xA6T\x02\u0368\u0372\x05\xA4S\x02\u0369\u0372\x05\xA0Q\x02" +
		"\u036A\u0372\x05\x9CO\x02\u036B\u0372\x05\x92J\x02\u036C\u0372\x05\x8E" +
		"H\x02\u036D\u0372\x05\u015C\xAF\x02\u036E\u0372\x05\u014A\xA6\x02\u036F" +
		"\u0372\x05\u0146\xA4\x02\u0370\u0372\x05\u0142\xA2\x02\u0371\u035A\x03" +
		"\x02\x02\x02\u0371\u0363\x03\x02\x02\x02\u0371\u0366\x03\x02\x02\x02\u0371" +
		"\u0367\x03\x02\x02\x02\u0371\u0368\x03\x02\x02\x02\u0371\u0369\x03\x02" +
		"\x02\x02\u0371\u036A\x03\x02\x02\x02\u0371\u036B\x03\x02\x02\x02\u0371" +
		"\u036C\x03\x02\x02\x02\u0371\u036D\x03\x02\x02\x02\u0371\u036E\x03\x02" +
		"\x02\x02\u0371\u036F\x03\x02\x02\x02\u0371\u0370\x03\x02\x02\x02\u0372" +
		"!\x03\x02\x02\x02\u0373\u037D\x05$\x13\x02\u0374\u0376\x05\x04\x03\x02" +
		"\u0375\u0374\x03\x02\x02\x02\u0376\u0379\x03\x02\x02\x02\u0377\u0375\x03" +
		"\x02\x02\x02\u0377\u0378\x03\x02\x02\x02\u0378\u037A\x03\x02\x02\x02\u0379" +
		"\u0377\x03\x02\x02\x02\u037A\u037C\x05$\x13\x02\u037B\u0377\x03\x02\x02" +
		"\x02\u037C\u037F\x03\x02\x02\x02\u037D\u037B\x03\x02\x02\x02\u037D\u037E" +
		"\x03\x02\x02\x02\u037E#\x03\x02\x02\x02\u037F\u037D\x03\x02\x02\x02\u0380" +
		"\u038A\x05&\x14\x02\u0381\u0383\x05\x04\x03\x02\u0382\u0381\x03\x02\x02" +
		"\x02\u0383\u0384\x03\x02\x02\x02\u0384\u0382\x03\x02\x02\x02\u0384\u0385" +
		"\x03\x02\x02\x02\u0385\u0388\x03\x02\x02\x02\u0386\u0389\x05\x8AF\x02" +
		"\u0387\u0389\x07\x91\x02\x02\u0388\u0386\x03\x02\x02\x02\u0388\u0387\x03" +
		"\x02\x02\x02\u0389\u038B\x03\x02\x02\x02\u038A\u0382\x03\x02\x02\x02\u038A" +
		"\u038B\x03\x02\x02\x02\u038B\u0399\x03\x02\x02\x02\u038C\u038E\x05\x04" +
		"\x03\x02\u038D\u038C\x03\x02\x02\x02\u038E\u038F\x03\x02\x02\x02\u038F" +
		"\u038D\x03\x02\x02\x02\u038F\u0390\x03\x02\x02\x02\u0390\u0391\x03\x02" +
		"\x02\x02\u0391\u0393\x07\xF8\x02\x02\u0392\u0394\x05\x04\x03\x02\u0393" +
		"\u0392\x03\x02\x02\x02\u0394\u0395\x03\x02\x02\x02\u0395\u0393\x03\x02" +
		"\x02\x02\u0395\u0396\x03\x02\x02\x02\u0396\u0397\x03\x02\x02\x02\u0397" +
		"\u0398\x05\x88E\x02\u0398\u039A\x03\x02\x02\x02\u0399\u038D\x03\x02\x02" +
		"\x02\u0399\u039A\x03\x02\x02\x02\u039A\u03A4\x03\x02\x02\x02\u039B\u039D" +
		"\x05\x04\x03\x02\u039C\u039B\x03\x02\x02\x02\u039D\u039E\x03\x02\x02\x02" +
		"\u039E\u039C\x03\x02\x02\x02\u039E\u039F\x03\x02\x02\x02\u039F\u03A0\x03" +
		"\x02\x02\x02\u03A0\u03A1\x05(\x15\x02\u03A1\u03A3\x03\x02\x02\x02\u03A2" +
		"\u039C\x03\x02\x02\x02\u03A3\u03A6\x03\x02\x02\x02\u03A4\u03A2\x03\x02" +
		"\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5\u03A7\x03\x02\x02\x02\u03A6" +
		"\u03A4\x03\x02\x02\x02\u03A7\u03A8\x07\u016D\x02\x02\u03A8%\x03\x02\x02" +
		"\x02\u03A9\u03AA\x07\u0171\x02\x02\u03AA\'\x03\x02\x02\x02\u03AB\u03AD" +
		"\x07\xB4\x02\x02\u03AC\u03AE\x05\x04\x03\x02\u03AD\u03AC\x03\x02\x02\x02" +
		"\u03AE\u03AF\x03\x02\x02\x02\u03AF\u03AD\x03\x02\x02\x02\u03AF\u03B0\x03" +
		"\x02\x02\x02\u03B0\u03B2\x03\x02\x02\x02\u03B1\u03AB\x03\x02\x02\x02\u03B1" +
		"\u03B2\x03\x02\x02\x02\u03B2\u03B3\x03\x02\x02\x02\u03B3\u03E8\x07\x8C" +
		"\x02\x02\u03B4\u03B6\x07\xB4\x02\x02\u03B5\u03B7\x05\x04\x03\x02\u03B6" +
		"\u03B5\x03\x02\x02\x02\u03B7\u03B8\x03\x02\x02\x02\u03B8\u03B6\x03\x02" +
		"\x02\x02\u03B8\u03B9\x03\x02\x02\x02\u03B9\u03BB\x03\x02\x02\x02\u03BA" +
		"\u03B4\x03\x02\x02\x02\u03BA\u03BB\x03\x02\x02\x02\u03BB\u03BC\x03\x02" +
		"\x02\x02\u03BC\u03E8\x07\x9F\x02\x02\u03BD\u03E8\x05\x82B\x02\u03BE\u03E8" +
		"\x05~@\x02\u03BF\u03E8\x05V,\x02\u03C0\u03E8\x05> \x02\u03C1\u03C9\t\x03" +
		"\x02\x02\u03C2\u03C4\x05\x04\x03\x02\u03C3\u03C2\x03\x02\x02\x02\u03C4" +
		"\u03C5\x03\x02\x02\x02\u03C5\u03C3\x03\x02\x02\x02\u03C5\u03C6\x03\x02" +
		"\x02\x02\u03C6\u03C7\x03\x02\x02\x02\u03C7\u03C8\t\x04\x02\x02\u03C8\u03CA" +
		"\x03\x02\x02\x02\u03C9\u03C3\x03\x02\x02\x02\u03C9\u03CA\x03\x02\x02\x02" +
		"\u03CA\u03E8\x03\x02\x02\x02\u03CB\u03D3\t\x05\x02\x02\u03CC\u03CE\x05" +
		"\x04\x03\x02\u03CD\u03CC\x03\x02\x02\x02\u03CE\u03CF\x03\x02\x02\x02\u03CF" +
		"\u03CD\x03\x02\x02\x02\u03CF\u03D0\x03\x02\x02\x02\u03D0\u03D1\x03\x02" +
		"\x02\x02\u03D1\u03D2\x07\u010B\x02\x02\u03D2\u03D4\x03\x02\x02\x02\u03D3" +
		"\u03CD\x03\x02\x02\x02\u03D3\u03D4\x03\x02\x02\x02\u03D4\u03E8\x03\x02" +
		"\x02\x02\u03D5\u03D7\x07!\x02\x02\u03D6\u03D8\x05\x04\x03\x02\u03D7\u03D6" +
		"\x03\x02\x02\x02\u03D8\u03D9\x03\x02\x02\x02\u03D9\u03D7\x03\x02\x02\x02" +
		"\u03D9\u03DA\x03\x02\x02\x02\u03DA\u03E1\x03\x02\x02\x02\u03DB\u03DD\x07" +
		"\u014E\x02\x02\u03DC\u03DE\x05\x04\x03\x02\u03DD\u03DC\x03\x02\x02\x02" +
		"\u03DE\u03DF\x03\x02\x02\x02\u03DF\u03DD\x03\x02\x02\x02\u03DF\u03E0\x03" +
		"\x02\x02\x02\u03E0\u03E2\x03\x02\x02\x02\u03E1\u03DB\x03\x02\x02\x02\u03E1" +
		"\u03E2\x03\x02\x02\x02\u03E2\u03E3\x03\x02\x02\x02\u03E3\u03E4\x07\u0154" +
		"\x02\x02\u03E4\u03E8\x03\x02\x02\x02\u03E5\u03E8\x050\x19\x02\u03E6\u03E8" +
		"\x05*\x16\x02\u03E7\u03B1\x03\x02\x02\x02\u03E7\u03BA\x03\x02\x02\x02" +
		"\u03E7\u03BD\x03\x02\x02\x02\u03E7\u03BE\x03\x02\x02\x02\u03E7\u03BF\x03" +
		"\x02\x02\x02\u03E7\u03C0\x03\x02\x02\x02\u03E7\u03C1\x03\x02\x02\x02\u03E7" +
		"\u03CB\x03\x02\x02\x02\u03E7\u03D5\x03\x02\x02\x02\u03E7\u03E5\x03\x02" +
		"\x02\x02\u03E7\u03E6\x03\x02\x02\x02\u03E8)\x03\x02\x02\x02\u03E9\u03EB" +
		"\x07\xFD\x02\x02\u03EA\u03EC\x05\x04\x03\x02\u03EB\u03EA\x03\x02\x02\x02" +
		"\u03EC\u03ED\x03\x02\x02\x02\u03ED\u03EB\x03\x02\x02\x02\u03ED\u03EE\x03" +
		"\x02\x02\x02\u03EE\u03EF\x03\x02\x02\x02\u03EF\u03FD\x05,\x17\x02\u03F0" +
		"\u03F2\x05\x04\x03\x02\u03F1\u03F0\x03\x02\x02\x02\u03F2\u03F3\x03\x02" +
		"\x02\x02\u03F3\u03F1\x03\x02\x02\x02\u03F3\u03F4\x03\x02\x02\x02\u03F4" +
		"\u03F5\x03\x02\x02\x02\u03F5\u03F7\t\x06\x02\x02\u03F6\u03F8\x05\x04\x03" +
		"\x02\u03F7\u03F6\x03\x02\x02\x02\u03F8\u03F9\x03\x02\x02\x02\u03F9\u03F7" +
		"\x03\x02\x02\x02\u03F9\u03FA\x03\x02\x02\x02\u03FA\u03FB\x03\x02\x02\x02" +
		"\u03FB\u03FC\x05.\x18\x02\u03FC\u03FE\x03\x02\x02\x02\u03FD\u03F1\x03" +
		"\x02\x02\x02\u03FD\u03FE\x03\x02\x02\x02\u03FE+\x03\x02\x02\x02\u03FF" +
		"\u0400\x05\u0100\x81\x02\u0400-\x03\x02\x02\x02\u0401\u0402\x05\u0100" +
		"\x81\x02\u0402/\x03\x02\x02\x02\u0403\u0405\x07\u014A\x02\x02\u0404\u0406" +
		"\x05\x04\x03\x02\u0405\u0404\x03\x02\x02\x02\u0406\u0407\x03\x02\x02\x02" +
		"\u0407\u0405\x03\x02\x02\x02\u0407\u0408\x03\x02\x02\x02\u0408\u040F\x03" +
		"\x02\x02\x02\u0409\u040B\x07\xB4\x02\x02\u040A\u040C\x05\x04\x03\x02\u040B" +
		"\u040A\x03\x02\x02\x02\u040C\u040D\x03\x02\x02\x02\u040D\u040B\x03\x02" +
		"\x02\x02\u040D\u040E\x03\x02\x02\x02\u040E\u0410\x03\x02\x02\x02\u040F" +
		"\u0409\x03\x02\x02\x02\u040F\u0410\x03\x02\x02\x02\u0410\u041E\x03\x02" +
		"\x02\x02\u0411\u0413\x07\u014B\x02\x02\u0412\u0414\x05\x04\x03\x02\u0413" +
		"\u0412\x03\x02\x02\x02\u0414\u0415\x03\x02\x02\x02\u0415\u0413\x03\x02" +
		"\x02\x02\u0415\u0416\x03\x02\x02\x02\u0416\u0417\x03\x02\x02\x02\u0417" +
		"\u0419\x07\r\x02\x02\u0418\u041A\x05\x04\x03\x02\u0419\u0418\x03\x02\x02" +
		"\x02\u041A\u041B\x03\x02\x02\x02\u041B\u0419\x03\x02\x02\x02\u041B\u041C" +
		"\x03\x02\x02\x02\u041C\u041E\x03\x02\x02\x02\u041D\u0403\x03\x02\x02\x02" +
		"\u041D\u0411\x03\x02\x02\x02\u041E\u041F\x03\x02\x02\x02\u041F\u0429\x05" +
		"2\x1A\x02\u0420\u0422\x05\x04\x03\x02\u0421\u0420\x03\x02\x02\x02\u0422" +
		"\u0423\x03\x02\x02\x02\u0423\u0421\x03\x02\x02\x02\u0423\u0424\x03\x02" +
		"\x02\x02\u0424\u0425\x03\x02\x02\x02\u0425\u0426\x052\x1A\x02\u0426\u0428" +
		"\x03\x02\x02\x02\u0427\u0421\x03\x02\x02\x02\u0428\u042B\x03\x02\x02\x02" +
		"\u0429\u0427\x03\x02\x02\x02\u0429\u042A\x03\x02\x02\x02\u042A1\x03\x02" +
		"\x02\x02\u042B\u0429\x03\x02\x02\x02\u042C\u0434\x054\x1B\x02\u042D\u042F" +
		"\x05\x04\x03\x02\u042E\u042D\x03\x02\x02\x02\u042F\u0430\x03\x02\x02\x02" +
		"\u0430\u042E\x03\x02\x02\x02\u0430\u0431\x03\x02\x02\x02\u0431\u0432\x03" +
		"\x02\x02\x02\u0432\u0433\x056\x1C\x02\u0433\u0435\x03\x02\x02\x02\u0434" +
		"\u042E\x03\x02\x02\x02\u0434\u0435\x03\x02\x02\x02\u04353\x03\x02\x02" +
		"\x02\u0436\u0448\x05<\x1F\x02\u0437\u0439\x07\xFA\x02\x02\u0438\u043A" +
		"\x05\x04\x03\x02\u0439\u0438\x03\x02\x02\x02\u043A\u043B\x03\x02\x02\x02" +
		"\u043B\u0439\x03\x02\x02\x02\u043B\u043C\x03\x02\x02\x02\u043C\u043D\x03" +
		"\x02\x02\x02\u043D\u043E\x05:\x1E\x02\u043E\u0448\x03\x02\x02\x02\u043F" +
		"\u0441\x07\x8C\x02\x02\u0440\u0442\x05\x04\x03\x02\u0441\u0440\x03\x02" +
		"\x02\x02\u0442\u0443\x03\x02\x02\x02\u0443\u0441\x03\x02\x02\x02\u0443" +
		"\u0444\x03\x02\x02\x02\u0444\u0445\x03\x02\x02\x02\u0445\u0446\x058\x1D" +
		"\x02\u0446\u0448\x03\x02\x02\x02\u0447\u0436\x03\x02\x02\x02\u0447\u0437" +
		"\x03\x02\x02\x02\u0447\u043F\x03\x02\x02\x02\u04485\x03\x02\x02\x02\u0449" +
		"\u044B\t\x06\x02\x02\u044A\u044C\x05\x04\x03\x02\u044B\u044A\x03\x02\x02" +
		"\x02\u044C\u044D\x03\x02\x02\x02\u044D\u044B\x03\x02\x02\x02\u044D\u044E" +
		"\x03\x02\x02\x02\u044E\u044F\x03\x02\x02\x02\u044F\u0450\x054\x1B\x02" +
		"\u04507\x03\x02\x02\x02\u0451\u0452\x07\u0173\x02\x02\u04529\x03\x02\x02" +
		"\x02\u0453\u0454\x05\u0100\x81\x02\u0454;\x03\x02\x02\x02\u0455\u0456" +
		"\t\x07\x02\x02\u0456=\x03\x02\x02\x02\u0457\u0459\x07\xD5\x02\x02\u0458" +
		"\u045A\x05\x04\x03\x02\u0459\u0458\x03\x02\x02\x02\u045A\u045B\x03\x02" +
		"\x02\x02\u045B\u0459\x03\x02\x02\x02\u045B\u045C\x03\x02\x02\x02\u045C" +
		"\u045D\x03\x02\x02\x02\u045D\u0467\x05H%\x02\u045E\u0460\x05\x04\x03\x02" +
		"\u045F\u045E\x03\x02\x02\x02\u0460\u0461\x03\x02\x02\x02\u0461\u045F\x03" +
		"\x02\x02\x02\u0461\u0462\x03\x02\x02\x02\u0462\u0463\x03\x02\x02\x02\u0463" +
		"\u0464\x05D#\x02\u0464\u0466\x03\x02\x02\x02\u0465\u045F\x03\x02\x02\x02" +
		"\u0466\u0469\x03\x02\x02\x02\u0467\u0465\x03\x02\x02\x02\u0467\u0468\x03" +
		"\x02\x02\x02\u0468\u0471\x03\x02\x02\x02\u0469\u0467\x03\x02\x02\x02\u046A" +
		"\u046C\x05\x04\x03\x02\u046B\u046A\x03\x02\x02\x02\u046C\u046D\x03\x02" +
		"\x02\x02\u046D\u046B\x03\x02\x02\x02\u046D\u046E\x03\x02\x02\x02\u046E" +
		"\u046F\x03\x02\x02\x02\u046F\u0470\x05@!\x02\u0470\u0472\x03\x02\x02\x02" +
		"\u0471\u046B\x03\x02\x02\x02\u0471\u0472\x03\x02\x02\x02\u0472?\x03\x02" +
		"\x02\x02\u0473\u0475\x07\xAB\x02\x02\u0474\u0476\x05\x04\x03\x02\u0475" +
		"\u0474\x03\x02\x02\x02\u0476\u0477\x03\x02\x02\x02\u0477\u0475\x03\x02" +
		"\x02\x02\u0477\u0478\x03\x02\x02\x02\u0478\u047F\x03\x02\x02\x02\u0479" +
		"\u047B\x07%\x02\x02\u047A\u047C\x05\x04\x03\x02\u047B\u047A\x03\x02\x02" +
		"\x02\u047C\u047D\x03\x02\x02\x02\u047D\u047B\x03\x02\x02\x02\u047D\u047E" +
		"\x03\x02\x02\x02\u047E\u0480\x03\x02\x02\x02\u047F\u0479\x03\x02\x02\x02" +
		"\u047F\u0480\x03\x02\x02\x02\u0480\u0481\x03\x02\x02\x02\u0481\u048B\x05" +
		"B\"\x02\u0482\u0484\x05\x04\x03\x02\u0483\u0482\x03\x02\x02\x02\u0484" +
		"\u0485\x03\x02\x02\x02\u0485\u0483\x03\x02\x02\x02\u0485\u0486\x03\x02" +
		"\x02\x02\u0486\u0487\x03\x02\x02\x02\u0487\u0488\x05B\"\x02\u0488\u048A" +
		"\x03\x02\x02\x02\u0489\u0483\x03\x02\x02\x02\u048A\u048D\x03\x02\x02\x02" +
		"\u048B\u0489\x03\x02\x02\x02\u048B\u048C\x03\x02\x02\x02\u048CA\x03\x02" +
		"\x02\x02\u048D\u048B\x03\x02\x02\x02\u048E\u048F\x07\u0173\x02\x02\u048F" +
		"C\x03\x02\x02\x02\u0490\u0492\t\b\x02\x02\u0491\u0493\x05\x04\x03\x02" +
		"\u0492\u0491\x03\x02\x02\x02\u0493\u0494\x03\x02\x02\x02\u0494\u0492\x03" +
		"\x02\x02\x02\u0494\u0495\x03\x02\x02\x02\u0495\u049C\x03\x02\x02\x02\u0496" +
		"\u0498\x07\xB8\x02\x02\u0497\u0499\x05\x04\x03\x02\u0498\u0497\x03\x02" +
		"\x02\x02\u0499\u049A\x03\x02\x02\x02\u049A\u0498\x03\x02\x02\x02\u049A" +
		"\u049B\x03\x02\x02\x02\u049B\u049D\x03\x02\x02\x02\u049C\u0496\x03\x02" +
		"\x02\x02\u049C\u049D\x03\x02\x02\x02\u049D\u04A4\x03\x02\x02\x02\u049E" +
		"\u04A0\x07\xB4\x02\x02\u049F\u04A1\x05\x04\x03\x02\u04A0\u049F\x03\x02" +
		"\x02\x02\u04A1\u04A2\x03\x02\x02\x02\u04A2\u04A0\x03\x02\x02\x02\u04A2" +
		"\u04A3\x03\x02\x02\x02\u04A3\u04A5\x03\x02\x02\x02\u04A4\u049E\x03\x02" +
		"\x02\x02\u04A4\u04A5\x03\x02\x02\x02\u04A5\u04A6\x03\x02\x02\x02\u04A6" +
		"\u04B0\x05F$\x02\u04A7\u04A9\x05\x04\x03\x02\u04A8\u04A7\x03\x02\x02\x02" +
		"\u04A9\u04AA\x03\x02\x02\x02\u04AA\u04A8\x03\x02\x02\x02\u04AA\u04AB\x03" +
		"\x02\x02\x02\u04AB\u04AC\x03\x02\x02\x02\u04AC\u04AD\x05F$\x02\u04AD\u04AF" +
		"\x03\x02\x02\x02\u04AE\u04A8\x03\x02\x02\x02\u04AF\u04B2\x03\x02\x02\x02" +
		"\u04B0\u04AE\x03\x02\x02\x02\u04B0\u04B1\x03\x02\x02\x02\u04B1E\x03\x02" +
		"\x02\x02\u04B2\u04B0\x03\x02\x02\x02\u04B3\u04B4\x05\u0100\x81\x02\u04B4" +
		"G\x03\x02\x02\x02\u04B5\u04B7\x05J&\x02\u04B6\u04B8\x05\x04\x03\x02\u04B7" +
		"\u04B6\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04B7\x03\x02" +
		"\x02\x02\u04B9\u04BA\x03\x02\x02\x02\u04BA\u04BB\x03\x02\x02\x02\u04BB" +
		"\u04BC\x07\u013A\x02\x02\u04BC\u04E6\x03\x02\x02\x02\u04BD\u04BF\x05L" +
		"\'\x02\u04BE\u04C0\x05\x04\x03\x02\u04BF\u04BE\x03\x02\x02\x02\u04C0\u04C1" +
		"\x03\x02\x02\x02\u04C1\u04BF\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02" +
		"\u04C2\u04C3\x03\x02\x02\x02\u04C3\u04C5\x07\u013B\x02\x02\u04C4\u04C6" +
		"\x05\x04\x03\x02\u04C5\u04C4\x03\x02\x02\x02\u04C6\u04C7\x03\x02\x02\x02" +
		"\u04C7\u04C5\x03\x02\x02\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8\u04C9\x03" +
		"\x02\x02\x02\u04C9\u04CB\x05N(\x02\u04CA\u04CC\x05\x04\x03\x02\u04CB\u04CA" +
		"\x03\x02\x02\x02\u04CC\u04CD\x03\x02\x02\x02\u04CD\u04CB\x03\x02\x02\x02" +
		"\u04CD\u04CE\x03\x02\x02\x02\u04CE\u04CF\x03\x02\x02\x02\u04CF\u04D1\x07" +
		"\u013A\x02\x02\u04D0\u04D2\x05\x04\x03\x02\u04D1\u04D0\x03\x02\x02\x02" +
		"\u04D2\u04D3\x03\x02\x02\x02\u04D3\u04D1\x03\x02\x02\x02\u04D3\u04D4\x03" +
		"\x02\x02\x02\u04D4\u04D5\x03\x02\x02\x02\u04D5\u04D7\x07_\x02\x02\u04D6" +
		"\u04D8\x05\x04\x03\x02\u04D7\u04D6\x03\x02\x02\x02\u04D8\u04D9\x03\x02" +
		"\x02\x02\u04D9\u04D7\x03\x02\x02\x02\u04D9\u04DA\x03\x02\x02\x02\u04DA" +
		"\u04E1\x03\x02\x02\x02\u04DB\u04DD\x07\xD9\x02\x02\u04DC\u04DE\x05\x04" +
		"\x03\x02\u04DD\u04DC\x03\x02\x02\x02\u04DE\u04DF\x03\x02\x02\x02\u04DF" +
		"\u04DD\x03\x02\x02\x02\u04DF\u04E0\x03\x02\x02\x02\u04E0\u04E2\x03\x02" +
		"\x02\x02\u04E1\u04DB\x03\x02\x02\x02\u04E1\u04E2\x03\x02\x02\x02\u04E2" +
		"\u04E3\x03\x02\x02\x02\u04E3\u04E4\x05\xAAV\x02\u04E4\u04E6\x03\x02\x02" +
		"\x02\u04E5\u04B5\x03\x02\x02\x02\u04E5\u04BD\x03\x02\x02\x02\u04E6I\x03" +
		"\x02\x02\x02\u04E7\u04E8\x07\u0171\x02\x02\u04E8K\x03\x02\x02\x02\u04E9" +
		"\u04EA\x07\u0171\x02\x02\u04EAM\x03\x02\x02\x02\u04EB\u04EC\x07\u0171" +
		"\x02\x02\u04ECO\x03\x02\x02\x02\u04ED\u04F7\x05R*\x02\u04EE\u04F0\x05" +
		"\x04\x03\x02\u04EF\u04EE\x03\x02\x02\x02\u04F0\u04F3\x03\x02\x02\x02\u04F1" +
		"\u04EF\x03\x02\x02\x02\u04F1\u04F2\x03\x02\x02\x02\u04F2\u04F4\x03\x02" +
		"\x02\x02\u04F3\u04F1\x03\x02\x02\x02\u04F4\u04F6\x05R*\x02\u04F5\u04F1" +
		"\x03\x02\x02\x02\u04F6\u04F9\x03\x02\x02\x02\u04F7\u04F5\x03\x02\x02\x02" +
		"\u04F7\u04F8\x03\x02\x02\x02\u04F8Q\x03\x02\x02\x02\u04F9\u04F7\x03\x02" +
		"\x02\x02\u04FA\u0502\x05&\x14\x02\u04FB\u04FD\x05\x04\x03\x02\u04FC\u04FB" +
		"\x03\x02\x02\x02\u04FD\u04FE\x03\x02\x02\x02\u04FE\u04FC\x03\x02\x02\x02" +
		"\u04FE\u04FF\x03\x02\x02\x02\u04FF\u0500\x03\x02\x02\x02\u0500\u0501\x05" +
		"\x8AF\x02\u0501\u0503\x03\x02\x02\x02\u0502\u04FC\x03\x02\x02\x02\u0502" +
		"\u0503\x03\x02\x02\x02\u0503\u050D\x03\x02\x02\x02\u0504\u0506\x05\x04" +
		"\x03\x02\u0505\u0504\x03\x02\x02\x02\u0506\u0507\x03\x02\x02\x02\u0507" +
		"\u0505\x03\x02\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508\u0509\x03\x02" +
		"\x02\x02\u0509\u050A\x05T+\x02\u050A\u050C\x03\x02\x02\x02\u050B\u0505" +
		"\x03\x02\x02\x02\u050C\u050F\x03\x02\x02\x02\u050D\u050B\x03\x02\x02\x02" +
		"\u050D\u050E\x03\x02\x02\x02\u050E\u0510\x03\x02\x02\x02\u050F\u050D\x03" +
		"\x02\x02\x02\u0510\u0511\x07\u016D\x02\x02\u0511S\x03\x02\x02\x02\u0512" +
		"\u0514\x07\xC0\x02\x02\u0513\u0515\x05\x04\x03\x02\u0514\u0513\x03\x02" +
		"\x02\x02\u0515\u0516\x03\x02\x02\x02\u0516\u0514\x03\x02\x02\x02\u0516" +
		"\u0517\x03\x02\x02\x02\u0517\u051E\x03\x02\x02\x02\u0518\u051A\x07\xD3" +
		"\x02\x02\u0519\u051B\x05\x04\x03\x02\u051A\u0519\x03\x02\x02\x02\u051B" +
		"\u051C\x03\x02\x02\x02\u051C\u051A\x03\x02\x02\x02\u051C\u051D\x03\x02" +
		"\x02\x02\u051D\u051F\x03\x02\x02\x02\u051E\u0518\x03\x02\x02\x02\u051E" +
		"\u051F\x03\x02\x02\x02\u051F\u0526\x03\x02\x02\x02\u0520\u0522\x07\xB4" +
		"\x02\x02\u0521\u0523\x05\x04\x03\x02\u0522\u0521\x03\x02\x02\x02\u0523" +
		"\u0524\x03\x02\x02\x02\u0524\u0522\x03\x02\x02\x02\u0524\u0525\x03\x02" +
		"\x02\x02\u0525\u0527\x03\x02\x02\x02\u0526\u0520\x03\x02\x02\x02\u0526" +
		"\u0527\x03\x02\x02\x02\u0527\u0528\x03\x02\x02\x02\u0528\u0529\x05j6\x02" +
		"\u0529\u05C1\x03\x02\x02\x02\u052A\u052C\x07\xD1\x02\x02\u052B\u052D\x05" +
		"\x04\x03\x02\u052C\u052B\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02\u052E" +
		"\u052C\x03\x02\x02\x02\u052E\u052F\x03\x02\x02\x02\u052F\u0530\x03\x02" +
		"\x02\x02\u0530\u0532\x07\xA1\x02\x02\u0531\u0533\x05\x04\x03\x02\u0532" +
		"\u0531\x03\x02\x02\x02\u0533\u0534\x03\x02\x02\x02\u0534\u0532\x03\x02" +
		"\x02\x02\u0534\u0535\x03\x02\x02\x02\u0535\u053C\x03\x02\x02\x02\u0536" +
		"\u0538\x07\xB4\x02\x02\u0537\u0539\x05\x04\x03\x02\u0538\u0537\x03\x02" +
		"\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A\u0538\x03\x02\x02\x02\u053A" +
		"\u053B\x03\x02\x02\x02\u053B\u053D\x03\x02\x02\x02\u053C\u0536\x03\x02" +
		"\x02\x02\u053C\u053D\x03\x02\x02\x02\u053D\u053E\x03\x02\x02\x02\u053E" +
		"\u053F\x05h5\x02\u053F\u05C1\x03\x02\x02\x02\u0540\u0542\x07\u013F\x02" +
		"\x02\u0541\u0543\x05\x04\x03\x02\u0542\u0541\x03\x02\x02\x02\u0543\u0544" +
		"\x03\x02\x02\x02\u0544\u0542\x03\x02\x02\x02\u0544\u0545\x03\x02\x02\x02" +
		"\u0545\u054C\x03\x02\x02\x02\u0546\u0548\x07\xB4\x02\x02\u0547\u0549\x05" +
		"\x04\x03\x02\u0548\u0547\x03\x02\x02\x02\u0549\u054A\x03\x02\x02\x02\u054A" +
		"\u0548\x03\x02\x02\x02\u054A\u054B\x03\x02\x02\x02\u054B\u054D\x03\x02" +
		"\x02\x02\u054C\u0546\x03\x02\x02\x02\u054C\u054D\x03\x02\x02\x02\u054D" +
		"\u054E\x03\x02\x02\x02\u054E\u054F\x05d3\x02\u054F\u05C1\x03\x02\x02\x02" +
		"\u0550\u0552\x07\u0147\x02\x02\u0551\u0553\x05\x04\x03\x02\u0552\u0551" +
		"\x03\x02\x02\x02\u0553\u0554\x03\x02\x02\x02\u0554\u0552\x03\x02\x02\x02" +
		"\u0554\u0555\x03\x02\x02\x02\u0555\u055C\x03\x02\x02\x02\u0556\u0558\x07" +
		"\xB4\x02\x02\u0557\u0559\x05\x04\x03\x02\u0558\u0557";
	private static readonly _serializedATNSegment4: string =
		"\x03\x02\x02\x02\u0559\u055A\x03\x02\x02\x02\u055A\u0558\x03\x02\x02\x02" +
		"\u055A\u055B\x03\x02\x02\x02\u055B\u055D\x03\x02\x02\x02\u055C\u0556\x03" +
		"\x02\x02\x02\u055C\u055D\x03\x02\x02\x02\u055D\u055F\x03\x02\x02\x02\u055E" +
		"\u0550\x03\x02\x02\x02\u055E\u055F\x03\x02\x02\x02\u055F\u0560\x03\x02" +
		"\x02\x02\u0560\u05C1\x07c\x02\x02\u0561\u0563\x07!\x02\x02\u0562\u0564" +
		"\x05\x04\x03\x02\u0563\u0562\x03\x02\x02\x02\u0564\u0565\x03\x02\x02\x02" +
		"\u0565\u0563\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566\u056D\x03" +
		"\x02\x02\x02\u0567\u0569\x07\u014E\x02\x02\u0568\u056A\x05\x04\x03\x02" +
		"\u0569\u0568\x03\x02\x02\x02\u056A\u056B\x03\x02\x02\x02\u056B\u0569\x03" +
		"\x02\x02\x02\u056B\u056C\x03\x02\x02\x02\u056C\u056E\x03\x02\x02\x02\u056D" +
		"\u0567\x03\x02\x02\x02\u056D\u056E\x03\x02\x02\x02\u056E\u056F\x03\x02" +
		"\x02\x02\u056F\u0570\x07\u0154\x02\x02\u0570\u05C1\x03\x02\x02\x02\u0571" +
		"\u0573\x074\x02\x02\u0572\u0574\x05\x04\x03\x02\u0573\u0572\x03\x02\x02" +
		"\x02\u0574\u0575\x03\x02\x02\x02\u0575\u0573\x03\x02\x02\x02\u0575\u0576" +
		"\x03\x02\x02\x02\u0576\u057D\x03\x02\x02\x02\u0577\u0579\x07\xD3\x02\x02" +
		"\u0578\u057A\x05\x04\x03\x02\u0579\u0578\x03\x02\x02\x02\u057A\u057B\x03" +
		"\x02\x02\x02\u057B\u0579\x03\x02\x02\x02\u057B\u057C\x03\x02\x02\x02\u057C" +
		"\u057E\x03\x02\x02\x02\u057D\u0577\x03\x02\x02\x02\u057D\u057E\x03\x02" +
		"\x02\x02\u057E\u0585\x03\x02\x02\x02\u057F\u0581\x07\xB4\x02\x02\u0580" +
		"\u0582\x05\x04\x03\x02\u0581\u0580\x03\x02\x02\x02\u0582\u0583\x03\x02" +
		"\x02\x02\u0583\u0581\x03\x02\x02\x02\u0583\u0584\x03\x02\x02\x02\u0584" +
		"\u0586\x03\x02\x02\x02\u0585\u057F\x03\x02\x02\x02\u0585\u0586\x03\x02" +
		"\x02\x02\u0586\u0587\x03\x02\x02\x02\u0587\u0588\x05b2\x02\u0588\u05C1" +
		"\x03\x02\x02\x02\u0589\u0591\x07\xA1\x02\x02\u058A\u058C\x05\x04\x03\x02" +
		"\u058B\u058A\x03\x02\x02\x02\u058C\u058D\x03\x02\x02\x02\u058D\u058B\x03" +
		"\x02\x02\x02\u058D\u058E\x03\x02\x02\x02\u058E\u058F\x03\x02\x02\x02\u058F" +
		"\u0590\x07\xAC\x02\x02\u0590\u0592\x03\x02\x02\x02\u0591\u058B\x03\x02" +
		"\x02\x02\u0591\u0592\x03\x02\x02\x02\u0592\u05C1\x03\x02\x02\x02\u0593" +
		"\u059B\t\x05\x02\x02\u0594\u0596\x05\x04\x03\x02\u0595\u0594\x03\x02\x02" +
		"\x02\u0596\u0597\x03\x02\x02\x02\u0597\u0595\x03\x02\x02\x02\u0597\u0598" +
		"\x03\x02\x02\x02\u0598\u0599\x03\x02\x02\x02\u0599\u059A\x07\u010B\x02" +
		"\x02\u059A\u059C\x03\x02\x02\x02\u059B\u0595\x03\x02\x02\x02\u059B\u059C" +
		"\x03\x02\x02\x02\u059C\u05C1\x03\x02\x02\x02\u059D\u05C1\x05\x82B\x02" +
		"\u059E\u05C1\x05V,\x02\u059F\u05A1\x07\u011F\x02\x02\u05A0\u05A2\x05\x04" +
		"\x03\x02\u05A1\u05A0\x03\x02\x02\x02\u05A2\u05A3\x03\x02\x02\x02\u05A3" +
		"\u05A1\x03\x02\x02\x02\u05A3\u05A4\x03\x02\x02\x02\u05A4\u05AB\x03\x02" +
		"\x02\x02\u05A5\u05A7\x07\xB4\x02\x02\u05A6\u05A8\x05\x04\x03\x02\u05A7" +
		"\u05A6\x03\x02\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9\u05A7\x03\x02" +
		"\x02\x02\u05A9\u05AA\x03\x02\x02\x02\u05AA\u05AC\x03\x02\x02\x02\u05AB" +
		"\u05A5\x03\x02\x02\x02\u05AB\u05AC\x03\x02\x02\x02\u05AC\u05AD\x03\x02" +
		"\x02\x02\u05AD\u05AE\x05`1\x02\u05AE\u05C1\x03\x02\x02\x02\u05AF\u05B1" +
		"\x07\u014A\x02\x02\u05B0\u05B2\x05\x04\x03\x02\u05B1\u05B0\x03\x02\x02" +
		"\x02\u05B2\u05B3\x03\x02\x02\x02\u05B3\u05B1\x03\x02\x02\x02\u05B3\u05B4" +
		"\x03\x02\x02\x02\u05B4\u05BB\x03\x02\x02\x02\u05B5\u05B7\x07\xB4\x02\x02" +
		"\u05B6\u05B8\x05\x04\x03\x02\u05B7\u05B6\x03\x02\x02\x02\u05B8\u05B9\x03" +
		"\x02\x02\x02\u05B9\u05B7\x03\x02\x02\x02\u05B9\u05BA\x03\x02\x02\x02\u05BA" +
		"\u05BC\x03\x02\x02\x02\u05BB\u05B5\x03\x02\x02\x02\u05BB\u05BC\x03\x02" +
		"\x02\x02\u05BC\u05BD\x03\x02\x02\x02\u05BD\u05BE\x05<\x1F\x02\u05BE\u05C1" +
		"\x03\x02\x02\x02\u05BF\u05C1\x05X-\x02\u05C0\u0512\x03\x02\x02\x02\u05C0" +
		"\u052A\x03\x02\x02\x02\u05C0\u0540\x03\x02\x02\x02\u05C0\u055E\x03\x02" +
		"\x02\x02\u05C0\u0561\x03\x02\x02\x02\u05C0\u0571\x03\x02\x02\x02\u05C0" +
		"\u0589\x03\x02\x02\x02\u05C0\u0593\x03\x02\x02\x02\u05C0\u059D\x03\x02" +
		"\x02\x02\u05C0\u059E\x03\x02\x02\x02\u05C0\u059F\x03\x02\x02\x02\u05C0" +
		"\u05AF\x03\x02\x02\x02\u05C0\u05BF\x03\x02\x02\x02\u05C1U\x03\x02\x02" +
		"\x02\u05C2\u05CA\x07\u011A\x02\x02\u05C3\u05C5\x05\x04\x03\x02\u05C4\u05C3" +
		"\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6\u05C4\x03\x02\x02\x02" +
		"\u05C6\u05C7\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02\u05C8\u05C9\x07" +
		"\xB4\x02\x02\u05C9\u05CB\x03\x02\x02\x02\u05CA\u05C4\x03\x02\x02\x02\u05CA" +
		"\u05CB\x03\x02\x02\x02\u05CB\u05CD\x03\x02\x02\x02\u05CC\u05CE\x05\x04" +
		"\x03\x02\u05CD\u05CC\x03\x02\x02\x02\u05CE\u05CF\x03\x02\x02\x02\u05CF" +
		"\u05CD\x03\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05D2\x03\x02" +
		"\x02\x02\u05D1\u05C2\x03\x02\x02\x02\u05D1\u05D2\x03\x02\x02\x02\u05D2" +
		"\u05D3\x03\x02\x02\x02\u05D3\u05E1\t\t\x02\x02\u05D4\u05D6\x05\x04\x03" +
		"\x02\u05D5\u05D4\x03\x02\x02\x02\u05D6\u05D7\x03\x02\x02\x02\u05D7\u05D5" +
		"\x03\x02\x02\x02\u05D7\u05D8\x03\x02\x02\x02\u05D8\u05D9\x03\x02\x02\x02" +
		"\u05D9\u05DB\x07\u0116\x02\x02\u05DA\u05DC\x05\x04\x03\x02\u05DB\u05DA" +
		"\x03\x02\x02\x02\u05DC\u05DD\x03\x02\x02\x02\u05DD\u05DB\x03\x02\x02\x02" +
		"\u05DD\u05DE\x03\x02\x02\x02\u05DE\u05DF\x03\x02\x02\x02\u05DF\u05E0\x07" +
		",\x02\x02\u05E0\u05E2\x03\x02\x02\x02\u05E1\u05D5\x03\x02\x02\x02\u05E1" +
		"\u05E2\x03\x02\x02\x02\u05E2W\x03\x02\x02\x02\u05E3\u05E5\x07\u012A\x02" +
		"\x02\u05E4\u05E6\x05\x04\x03\x02\u05E5\u05E4\x03\x02\x02\x02\u05E6\u05E7" +
		"\x03\x02\x02\x02\u05E7\u05E5\x03\x02\x02\x02\u05E7\u05E8\x03\x02\x02\x02" +
		"\u05E8\u05E9\x03\x02\x02\x02\u05E9\u05F3\x05^0\x02\u05EA\u05EC\x05\x04" +
		"\x03\x02\u05EB\u05EA\x03\x02\x02\x02\u05EC\u05ED\x03\x02\x02\x02\u05ED" +
		"\u05EB\x03\x02\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05EF\x03\x02" +
		"\x02\x02\u05EF\u05F0\x05^0\x02\u05F0\u05F2\x03\x02\x02\x02\u05F1\u05EB" +
		"\x03\x02\x02\x02\u05F2\u05F5\x03\x02\x02\x02\u05F3\u05F1\x03\x02\x02\x02" +
		"\u05F3\u05F4\x03\x02\x02\x02\u05F4\u05FD\x03\x02\x02\x02\u05F5\u05F3\x03" +
		"\x02\x02\x02\u05F6\u05F8\x05\x04\x03\x02\u05F7\u05F6\x03\x02\x02\x02\u05F8" +
		"\u05F9\x03\x02\x02\x02\u05F9\u05F7\x03\x02\x02\x02\u05F9\u05FA\x03\x02" +
		"\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FB\u05FC\x07\u0146\x02\x02\u05FC" +
		"\u05FE\x03\x02\x02\x02\u05FD\u05F7\x03\x02\x02\x02\u05FD\u05FE\x03\x02" +
		"\x02\x02\u05FE\u0608\x03\x02\x02\x02\u05FF\u0601\x05\x04\x03\x02\u0600" +
		"\u05FF\x03\x02\x02\x02\u0601\u0602\x03\x02\x02\x02\u0602\u0600\x03\x02" +
		"\x02\x02\u0602\u0603\x03\x02\x02\x02\u0603\u0604\x03\x02\x02\x02\u0604" +
		"\u0605\x05\\/\x02\u0605\u0607\x03\x02\x02\x02\u0606\u0600\x03\x02\x02" +
		"\x02\u0607\u060A\x03\x02\x02\x02\u0608\u0606\x03\x02\x02\x02\u0608\u0609" +
		"\x03\x02\x02\x02\u0609\u060C\x03\x02\x02\x02\u060A\u0608\x03\x02\x02\x02" +
		"\u060B\u05E3\x03\x02\x02\x02\u060C\u060D\x03\x02\x02\x02\u060D\u060B\x03" +
		"\x02\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E\u0623\x03\x02\x02\x02\u060F" +
		"\u0611\x05\x04\x03\x02\u0610\u060F\x03\x02\x02\x02\u0611\u0614\x03\x02" +
		"\x02\x02\u0612\u0610\x03\x02\x02\x02\u0612\u0613\x03\x02\x02\x02\u0613" +
		"\u0615\x03\x02\x02\x02\u0614\u0612\x03\x02\x02\x02\u0615\u0617\x07\u0105" +
		"\x02\x02\u0616\u0618\x05\x04\x03\x02\u0617\u0616\x03\x02\x02\x02\u0618" +
		"\u0619\x03\x02\x02\x02\u0619\u0617\x03\x02\x02\x02\u0619\u061A\x03\x02" +
		"\x02\x02\u061A\u061B\x03\x02\x02\x02\u061B\u061D\x07\xD9\x02\x02\u061C" +
		"\u061E\x05\x04\x03\x02\u061D\u061C\x03\x02\x02\x02\u061E\u061F\x03\x02" +
		"\x02\x02\u061F\u061D\x03\x02\x02\x02\u061F\u0620\x03\x02\x02\x02\u0620" +
		"\u0621\x03\x02\x02\x02\u0621\u0622\x05Z.\x02\u0622\u0624\x03\x02\x02\x02" +
		"\u0623\u0612\x03\x02\x02\x02\u0623\u0624\x03\x02\x02\x02\u0624Y\x03\x02" +
		"\x02\x02\u0625\u0626\t\n\x02\x02\u0626[\x03\x02\x02\x02\u0627\u0628\x07" +
		"\u0173\x02\x02\u0628]\x03\x02\x02\x02\u0629\u062A\x07\u0173\x02\x02\u062A" +
		"_\x03\x02\x02\x02\u062B\u062C\x05\u0100\x81\x02\u062Ca\x03\x02\x02\x02" +
		"\u062D\u062E\x07\u0171\x02\x02\u062Ec\x03\x02\x02\x02\u062F\u0631\x07" +
		"\u0100\x02\x02\u0630\u0632\x05\x04\x03\x02\u0631\u0630\x03\x02\x02\x02" +
		"\u0632\u0633\x03\x02\x02\x02\u0633\u0631\x03\x02\x02\x02\u0633\u0634\x03" +
		"\x02\x02\x02\u0634\u0635\x03\x02\x02\x02\u0635\u0636\x07\xA2\x02\x02\u0636" +
		"\u067A\x03\x02\x02\x02\u0637\u067A\x07\u010A\x02\x02\u0638\u063A\x07\xE1" +
		"\x02\x02\u0639\u063B\x05\x04\x03\x02\u063A\u0639\x03\x02\x02\x02\u063B" +
		"\u063C\x03\x02\x02\x02\u063C\u063A\x03\x02\x02\x02\u063C\u063D\x03\x02" +
		"\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u063F\x07\xA2\x02\x02\u063F" +
		"\u067A\x03\x02\x02\x02\u0640\u067A\x07\xE6\x02\x02\u0641\u0643\x07L\x02" +
		"\x02\u0642\u0644\x05\x04\x03\x02\u0643\u0642\x03\x02\x02\x02\u0644\u0645" +
		"\x03\x02\x02\x02\u0645\u0643\x03\x02\x02\x02\u0645\u0646\x03\x02\x02\x02" +
		"\u0646\u0647\x03\x02\x02\x02\u0647\u0648\x07\xA2\x02\x02\u0648\u064B\x03" +
		"\x02\x02\x02\u0649\u064B\x07+\x02\x02\u064A\u0641\x03\x02\x02\x02\u064A" +
		"\u0649\x03\x02\x02\x02\u064B\u064D\x03\x02\x02\x02\u064C\u064E\x05\x04" +
		"\x03\x02\u064D\u064C\x03\x02\x02\x02\u064E\u064F\x03\x02\x02\x02\u064F" +
		"\u064D\x03\x02\x02\x02\u064F\u0650\x03\x02\x02\x02\u0650\u0651\x03\x02" +
		"\x02\x02\u0651\u0652\x05f4\x02\u0652\u067A\x03\x02\x02\x02\u0653\u067A" +
		"\x07a\x02\x02\u0654\u067A\x07Y\x02\x02\u0655\u0657\x07L\x02\x02\u0656" +
		"\u0658\x05\x04\x03\x02\u0657\u0656\x03\x02\x02\x02\u0658\u0659\x03\x02" +
		"\x02\x02\u0659\u0657\x03\x02\x02\x02\u0659\u065A\x03\x02\x02\x02\u065A" +
		"\u065B\x03\x02\x02\x02\u065B\u065C\x07\x98\x02\x02\u065C\u065F\x03\x02" +
		"\x02\x02\u065D\u065F\x07*\x02\x02\u065E\u0655\x03\x02\x02\x02\u065E\u065D" +
		"\x03\x02\x02\x02\u065F\u0661\x03\x02\x02\x02\u0660\u0662\x05\x04\x03\x02" +
		"\u0661\u0660\x03\x02\x02\x02\u0662\u0663\x03\x02\x02\x02\u0663\u0661\x03" +
		"\x02\x02\x02\u0663\u0664\x03\x02\x02\x02\u0664\u0665\x03\x02\x02\x02\u0665" +
		"\u0666\x05f4\x02\u0666\u067A\x03\x02\x02\x02\u0667\u0669\x07\xE1\x02\x02" +
		"\u0668\u066A\x05\x04\x03\x02\u0669\u0668\x03\x02\x02\x02\u066A\u066B\x03" +
		"\x02\x02\x02\u066B\u0669\x03\x02\x02\x02\u066B\u066C\x03\x02\x02\x02\u066C" +
		"\u066D\x03\x02\x02\x02\u066D\u066E\x07\x98\x02\x02\u066E\u067A\x03\x02" +
		"\x02\x02\u066F\u067A\x07\xE5\x02\x02\u0670\u0672\x07\u0100\x02\x02\u0671" +
		"\u0673\x05\x04\x03\x02\u0672\u0671\x03\x02\x02\x02\u0673\u0674\x03\x02" +
		"\x02\x02\u0674\u0672\x03\x02\x02\x02\u0674\u0675\x03\x02\x02\x02\u0675" +
		"\u0676\x03\x02\x02\x02\u0676\u0677\x07\x98\x02\x02\u0677\u067A\x03\x02" +
		"\x02\x02\u0678\u067A\x07\u0109\x02\x02\u0679\u062F\x03\x02\x02\x02\u0679" +
		"\u0637\x03\x02\x02\x02\u0679\u0638\x03\x02\x02\x02\u0679\u0640\x03\x02" +
		"\x02\x02\u0679\u064A\x03\x02\x02\x02\u0679\u0653\x03\x02\x02\x02\u0679" +
		"\u0654\x03\x02\x02\x02\u0679\u065E\x03\x02\x02\x02\u0679\u0667\x03\x02" +
		"\x02\x02\u0679\u066F\x03\x02\x02\x02\u0679\u0670\x03\x02\x02\x02\u0679" +
		"\u0678\x03\x02\x02\x02\u067Ae\x03\x02\x02\x02\u067B\u067C\t\n\x02\x02" +
		"\u067Cg\x03\x02\x02\x02\u067D\u068F\x05l7\x02\u067E\u0680\x07\xE9\x02" +
		"\x02\u067F\u0681\x05\x04\x03\x02\u0680\u067F\x03\x02\x02\x02\u0681\u0682" +
		"\x03\x02\x02\x02\u0682\u0680\x03\x02\x02\x02\u0682\u0683\x03\x02\x02\x02" +
		"\u0683\u0684\x03\x02\x02\x02\u0684\u0685\x05l7\x02\u0685\u068F\x03\x02" +
		"\x02\x02\u0686\u0688\x07\xD1\x02\x02\u0687\u0689\x05\x04\x03\x02\u0688" +
		"\u0687\x03\x02\x02\x02\u0689\u068A\x03\x02\x02\x02\u068A\u0688\x03\x02" +
		"\x02\x02\u068A\u068B\x03\x02\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C" +
		"\u068D\x07\xE1\x02\x02\u068D\u068F\x03\x02\x02\x02\u068E\u067D\x03\x02" +
		"\x02\x02\u068E\u067E\x03\x02\x02\x02\u068E\u0686\x03\x02\x02\x02\u068F" +
		"i\x03\x02\x02\x02\u0690\u06A6\x05l7\x02\u0691\u0693\x05\x04\x03\x02\u0692" +
		"\u0691\x03\x02\x02\x02\u0693\u0694\x03\x02\x02\x02\u0694\u0692\x03\x02" +
		"\x02\x02\u0694\u0695\x03\x02\x02\x02\u0695\u069C\x03\x02\x02\x02\u0696" +
		"\u0698\x07\xD9\x02\x02\u0697\u0699\x05\x04\x03\x02\u0698\u0697\x03\x02" +
		"\x02\x02\u0699\u069A\x03\x02\x02\x02\u069A\u0698\x03\x02\x02\x02\u069A" +
		"\u069B\x03\x02\x02\x02\u069B\u069D\x03\x02\x02\x02\u069C\u0696\x03\x02" +
		"\x02\x02\u069C\u069D\x03\x02\x02\x02\u069D\u069E\x03\x02\x02\x02\u069E" +
		"\u06A0\x07\xD1\x02\x02\u069F\u06A1\x05\x04\x03\x02\u06A0\u069F\x03\x02" +
		"\x02\x02\u06A1\u06A2\x03\x02\x02\x02\u06A2\u06A0\x03\x02\x02\x02\u06A2" +
		"\u06A3\x03\x02\x02\x02\u06A3\u06A4\x03\x02\x02\x02\u06A4\u06A5\x07\xE1" +
		"\x02\x02\u06A5\u06A7\x03\x02\x02\x02\u06A6\u0692\x03\x02\x02\x02\u06A6" +
		"\u06A7\x03\x02\x02\x02\u06A7\u06B1\x03\x02\x02\x02\u06A8\u06AA\x07\xE9" +
		"\x02\x02\u06A9\u06AB\x05\x04\x03\x02\u06AA\u06A9\x03\x02\x02\x02\u06AB" +
		"\u06AC\x03\x02\x02\x02\u06AC\u06AA\x03\x02\x02\x02\u06AC\u06AD\x03\x02" +
		"\x02\x02\u06AD\u06AE\x03\x02\x02\x02\u06AE\u06AF\x05l7\x02\u06AF\u06B1" +
		"\x03\x02\x02\x02\u06B0\u0690\x03\x02\x02\x02\u06B0\u06A8\x03\x02\x02\x02" +
		"\u06B1k\x03\x02\x02\x02\u06B2\u06B3\x07\u0171\x02\x02\u06B3m\x03\x02\x02" +
		"\x02\u06B4\u06B6\x07\xB4\x02\x02\u06B5\u06B7\x05\x04\x03\x02\u06B6\u06B5" +
		"\x03\x02\x02\x02\u06B7\u06B8\x03\x02\x02\x02\u06B8\u06B6\x03\x02\x02\x02" +
		"\u06B8\u06B9\x03\x02\x02\x02\u06B9\u06BB\x03\x02\x02\x02\u06BA\u06B4\x03" +
		"\x02\x02\x02\u06BA\u06BB\x03\x02\x02\x02\u06BB\u06BC\x03\x02\x02\x02\u06BC" +
		"\u0773\x07\x9F\x02\x02\u06BD\u06BF\x071\x02\x02\u06BE\u06C0\x05\x04\x03" +
		"\x02\u06BF\u06BE\x03\x02\x02\x02\u06C0\u06C1\x03\x02\x02\x02\u06C1\u06BF" +
		"\x03\x02\x02\x02\u06C1\u06C2\x03\x02\x02\x02\u06C2\u06C3\x03\x02\x02\x02" +
		"\u06C3\u06C4\x05|?\x02\u06C4\u0773\x03\x02\x02\x02\u06C5\u06CD\x07L\x02" +
		"\x02\u06C6\u06C8\x05\x04\x03\x02\u06C7\u06C6\x03\x02\x02\x02\u06C8\u06C9" +
		"\x03\x02\x02\x02\u06C9\u06C7\x03\x02\x02\x02\u06C9\u06CA\x03\x02\x02\x02" +
		"\u06CA\u06CB\x03\x02\x02\x02\u06CB\u06CC\x07\xB4\x02\x02\u06CC\u06CE\x03" +
		"\x02\x02\x02\u06CD\u06C7\x03\x02\x02\x02\u06CD\u06CE\x03\x02\x02\x02\u06CE" +
		"\u06DA\x03\x02\x02\x02\u06CF\u06D7\x07M\x02\x02\u06D0\u06D2\x05\x04\x03" +
		"\x02\u06D1\u06D0\x03\x02\x02\x02\u06D2\u06D3\x03\x02\x02\x02\u06D3\u06D1" +
		"\x03\x02\x02\x02\u06D3\u06D4\x03\x02\x02\x02\u06D4\u06D5\x03\x02\x02\x02" +
		"\u06D5\u06D6\x07\r\x02\x02\u06D6\u06D8\x03\x02\x02\x02\u06D7\u06D1\x03" +
		"\x02\x02\x02\u06D7\u06D8\x03\x02\x02\x02\u06D8\u06DA\x03\x02\x02\x02\u06D9" +
		"\u06C5\x03\x02\x02\x02\u06D9\u06CF\x03\x02\x02\x02\u06DA\u06DC\x03\x02" +
		"\x02\x02\u06DB\u06DD\x05\x04\x03\x02\u06DC\u06DB\x03\x02\x02\x02\u06DD" +
		"\u06DE\x03\x02\x02\x02\u06DE\u06DC\x03\x02\x02\x02\u06DE\u06DF\x03\x02" +
		"\x02\x02\u06DF\u06FA\x03\x02\x02\x02\u06E0\u06EA\x05z>\x02\u06E1\u06E3" +
		"\x05\x04\x03\x02\u06E2\u06E1\x03\x02\x02\x02\u06E3\u06E6\x03\x02\x02\x02" +
		"\u06E4\u06E2\x03\x02\x02\x02\u06E4\u06E5\x03\x02\x02\x02\u06E5\u06E7\x03" +
		"\x02\x02\x02\u06E6\u06E4\x03\x02\x02\x02\u06E7\u06E9\x05z>\x02\u06E8\u06E4" +
		"\x03\x02\x02\x02\u06E9\u06EC\x03\x02\x02\x02\u06EA\u06E8\x03\x02\x02\x02" +
		"\u06EA\u06EB\x03\x02\x02\x02\u06EB\u06FB\x03\x02\x02\x02\u06EC\u06EA\x03" +
		"\x02\x02\x02\u06ED\u06F7\x07\x93\x02\x02\u06EE\u06F0\x05\x04\x03\x02\u06EF" +
		"\u06EE\x03\x02\x02\x02\u06F0\u06F3\x03\x02\x02\x02\u06F1\u06EF\x03\x02" +
		"\x02\x02\u06F1\u06F2\x03\x02\x02\x02\u06F2\u06F4\x03\x02\x02\x02\u06F3" +
		"\u06F1\x03\x02\x02\x02\u06F4\u06F6\x05z>\x02\u06F5\u06F1\x03\x02\x02\x02" +
		"\u06F6\u06F9\x03\x02\x02\x02\u06F7\u06F5\x03\x02\x02\x02\u06F7\u06F8\x03" +
		"\x02\x02\x02\u06F8\u06FB\x03\x02\x02\x02\u06F9\u06F7\x03\x02\x02\x02\u06FA" +
		"\u06E0\x03\x02\x02\x02\u06FA\u06ED\x03\x02\x02\x02\u06FB\u0773\x03\x02" +
		"\x02\x02\u06FC\u06FE\x07\xE1\x02\x02\u06FD\u06FF\x05\x04\x03\x02\u06FE" +
		"\u06FD\x03\x02\x02\x02\u06FF\u0700\x03\x02\x02\x02\u0700\u06FE\x03\x02" +
		"\x02\x02\u0700\u0701\x03\x02\x02\x02\u0701\u071E\x03\x02\x02\x02\u0702" +
		"\u0704\x07\xBD\x02\x02\u0703\u0705\x05\x04\x03\x02\u0704\u0703\x03\x02" +
		"\x02\x02\u0705\u0706\x03\x02\x02\x02\u0706\u0704\x03\x02\x02\x02\u0706" +
		"\u0707\x03\x02\x02\x02\u0707\u070E\x03\x02\x02\x02\u0708\u070A\x07\xB4" +
		"\x02\x02\u0709\u070B\x05\x04\x03\x02\u070A\u0709\x03\x02\x02\x02\u070B" +
		"\u070C\x03\x02\x02\x02\u070C\u070A\x03\x02\x02\x02\u070C\u070D\x03\x02" +
		"\x02\x02\u070D\u070F\x03\x02\x02\x02\u070E\u0708\x03\x02\x02\x02\u070E" +
		"\u070F\x03\x02\x02\x02\u070F\u071F\x03\x02\x02\x02\u0710\u0712\x07\xBE" +
		"\x02\x02\u0711\u0713\x05\x04\x03\x02\u0712\u0711\x03\x02\x02\x02\u0713" +
		"\u0714\x03\x02\x02\x02\u0714\u0712\x03\x02\x02\x02\u0714\u0715\x03\x02" +
		"\x02\x02\u0715\u071C\x03\x02\x02\x02\u0716\u0718\x07\r\x02\x02\u0717\u0719" +
		"\x05\x04\x03\x02\u0718\u0717\x03\x02\x02\x02\u0719\u071A\x03\x02\x02\x02" +
		"\u071A\u0718\x03\x02\x02\x02\u071A\u071B\x03\x02\x02\x02\u071B\u071D\x03" +
		"\x02\x02\x02\u071C\u0716\x03\x02\x02\x02\u071C\u071D\x03\x02\x02\x02\u071D" +
		"\u071F\x03\x02\x02\x02\u071E\u0702\x03\x02\x02\x02\u071E\u0710\x03\x02" +
		"\x02\x02\u071E\u071F\x03\x02\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720" +
		"\u0728\x05x=\x02\u0721\u0723\x05\x04\x03\x02\u0722\u0721\x03\x02\x02\x02" +
		"\u0723\u0724\x03\x02\x02\x02\u0724\u0722\x03\x02\x02\x02\u0724\u0725\x03" +
		"\x02\x02\x02\u0725\u0726\x03\x02\x02\x02\u0726\u0727\t\v\x02\x02\u0727" +
		"\u0729\x03\x02\x02\x02\u0728\u0722\x03\x02\x02\x02\u0728\u0729\x03\x02" +
		"\x02\x02\u0729\u0737\x03\x02\x02\x02\u072A\u072C\x05\x04\x03\x02\u072B" +
		"\u072A\x03\x02\x02\x02\u072C\u072D\x03\x02\x02\x02\u072D\u072B\x03\x02" +
		"\x02\x02\u072D\u072E\x03\x02\x02\x02\u072E\u072F\x03\x02\x02\x02\u072F" +
		"\u0731\x07\xA2\x02\x02\u0730\u0732\x05\x04\x03\x02\u0731\u0730\x03\x02" +
		"\x02\x02\u0732\u0733\x03\x02\x02\x02\u0733\u0731\x03\x02\x02\x02\u0733" +
		"\u0734\x03\x02\x02\x02\u0734\u0735\x03\x02\x02\x02\u0735\u0736\x05v<\x02" +
		"\u0736\u0738\x03\x02\x02\x02\u0737\u072B\x03\x02\x02\x02\u0737\u0738\x03" +
		"\x02\x02\x02\u0738\u074C\x03\x02\x02\x02\u0739\u073B\x05\x04\x03\x02\u073A" +
		"\u0739\x03\x02\x02\x02\u073B\u073C\x03\x02\x02\x02\u073C\u073A\x03\x02" +
		"\x02\x02\u073C\u073D\x03\x02\x02\x02\u073D\u073E\x03\x02\x02\x02\u073E" +
		"\u0740\x07\x94\x02\x02\u073F\u0741\x05\x04\x03\x02\u0740\u073F\x03\x02" +
		"\x02\x02\u0741\u0742\x03\x02\x02\x02\u0742\u0740\x03\x02\x02\x02\u0742" +
		"\u0743\x03\x02\x02\x02\u0743\u0744\x03\x02\x02\x02\u0744\u0746\x07a\x02" +
		"\x02\u0745\u0747\x05\x04\x03\x02\u0746\u0745\x03\x02\x02\x02\u0747\u0748" +
		"\x03\x02\x02\x02\u0748\u0746\x03\x02\x02\x02\u0748\u0749\x03\x02\x02\x02" +
		"\u0749\u074A\x03\x02\x02\x02\u074A\u074B\x05t;\x02\u074B\u074D\x03\x02" +
		"\x02\x02\u074C\u073A\x03\x02\x02\x02\u074C\u074D\x03\x02\x02\x02\u074D" +
		"\u0761\x03\x02\x02\x02\u074E\u0750\x05\x04\x03\x02\u074F\u074E\x03\x02" +
		"\x02\x02\u0750\u0751\x03\x02\x02\x02\u0751\u074F\x03\x02\x02\x02\u0751" +
		"\u0752\x03\x02\x02\x02\u0752\u0753\x03\x02\x02\x02\u0753\u0755\x07\xBA" +
		"\x02\x02\u0754\u0756\x05\x04\x03\x02\u0755\u0754\x03\x02\x02\x02\u0756" +
		"\u0757\x03\x02\x02\x02\u0757\u0755\x03\x02\x02\x02\u0757\u0758\x03\x02" +
		"\x02\x02\u0758\u0759\x03\x02\x02\x02\u0759\u075B\x07a\x02\x02\u075A\u075C" +
		"\x05\x04\x03\x02\u075B\u075A\x03\x02\x02\x02\u075C\u075D\x03\x02\x02\x02" +
		"\u075D\u075B\x03\x02\x02\x02\u075D\u075E\x03\x02\x02\x02\u075E\u075F\x03" +
		"\x02\x02\x02\u075F\u0760\x05r:\x02\u0760\u0762\x03\x02\x02\x02\u0761\u074F" +
		"\x03\x02\x02\x02\u0761\u0762\x03\x02\x02\x02\u0762\u0770\x03\x02\x02\x02" +
		"\u0763\u0765\x05\x04\x03\x02\u0764\u0763\x03\x02\x02\x02\u0765\u0766\x03" +
		"\x02\x02\x02\u0766\u0764\x03\x02\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767" +
		"\u0768\x03\x02\x02\x02\u0768\u076A\x07\x98\x02\x02\u0769\u076B\x05\x04" +
		"\x03\x02\u076A\u0769\x03\x02\x02\x02\u076B\u076C\x03\x02\x02\x02\u076C" +
		"\u076A\x03\x02\x02\x02\u076C\u076D\x03\x02\x02\x02\u076D\u076E\x03\x02" +
		"\x02\x02\u076E\u076F\x05p9\x02\u076F\u0771\x03\x02\x02\x02\u0770\u0764" +
		"\x03\x02\x02\x02\u0770\u0771\x03\x02\x02\x02\u0771\u0773\x03\x02\x02\x02" +
		"\u0772\u06BA\x03\x02\x02\x02\u0772\u06BD\x03\x02\x02\x02\u0772\u06D9\x03" +
		"\x02\x02\x02\u0772\u06FC\x03\x02\x02\x02\u0773o\x03\x02\x02\x02\u0774" +
		"\u0775\x07\u0171\x02\x02\u0775q\x03\x02\x02\x02\u0776\u0777\x07\u0171" +
		"\x02\x02\u0777s\x03\x02\x02\x02\u0778\u0779\x07\u0171\x02\x02\u0779u\x03" +
		"\x02\x02\x02\u077A\u077B\x07\u0171\x02\x02\u077Bw\x03\x02\x02\x02\u077C" +
		"\u077D\x07\u0171\x02\x02\u077Dy\x03\x02\x02\x02\u077E\u077F\x05\u0100" +
		"\x81\x02\u077F{\x03\x02\x02\x02\u0780\u0781\x07\u0170\x02\x02\u0781}\x03" +
		"\x02\x02\x02\u0782\u078A\x07\u0147\x02\x02\u0783\u0785\x05\x04\x03\x02" +
		"\u0784\u0783\x03\x02\x02\x02\u0785\u0786\x03\x02\x02\x02\u0786\u0784\x03" +
		"\x02\x02\x02\u0786\u0787\x03\x02\x02\x02\u0787\u0788\x03\x02\x02\x02\u0788" +
		"\u0789\x07\xB4\x02\x02\u0789\u078B\x03\x02\x02\x02\u078A\u0784\x03\x02" +
		"\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B\u078D\x03\x02\x02\x02\u078C" +
		"\u078E\x05\x04\x03\x02\u078D\u078C\x03\x02\x02\x02\u078E\u078F\x03\x02" +
		"\x02\x02\u078F\u078D\x03\x02\x02\x02\u078F\u0790\x03\x02\x02\x02\u0790" +
		"\u0792\x03\x02\x02\x02\u0791\u0782\x03\x02\x02\x02\u0791\u0792\x03\x02" +
		"\x02\x02\u0792\u0793\x03\x02\x02\x02\u0793\u0794\x05\x80A\x02\u0794\x7F" +
		"\x03\x02\x02\x02\u0795\u07D5\x07\x1C\x02\x02\u0796\u079E\x07\x1D\x02\x02" +
		"\u0797\u0799\x05\x04\x03\x02\u0798\u0797\x03\x02\x02\x02\u0799\u079A\x03" +
		"\x02\x02\x02\u079A\u0798\x03\x02\x02\x02\u079A\u079B\x03\x02\x02\x02\u079B" +
		"\u079C\x03\x02\x02\x02\u079C\u079D\t\f\x02\x02\u079D\u079F\x03\x02\x02" +
		"\x02\u079E\u0798\x03\x02\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F\u07D5" +
		"\x03\x02\x02\x02\u07A0\u07A8\x07 \x02\x02\u07A1\u07A3\x05\x04\x03\x02" +
		"\u07A2\u07A1\x03\x02\x02\x02\u07A3\u07A4\x03\x02\x02\x02\u07A4\u07A2\x03" +
		"\x02\x02\x02\u07A4\u07A5\x03\x02\x02\x02\u07A5\u07A6\x03\x02\x02\x02\u07A6" +
		"\u07A7\t\f\x02\x02\u07A7\u07A9\x03\x02\x02\x02\u07A8\u07A2\x03\x02\x02" +
		"\x02\u07A8\u07A9\x03\x02\x02\x02\u07A9\u07D5\x03\x02\x02\x02\u07AA\u07B2" +
		"\x07\x1F\x02\x02\u07AB\u07AD\x05\x04\x03\x02\u07AC\u07AB\x03\x02\x02\x02" +
		"\u07AD\u07AE\x03\x02\x02\x02\u07AE\u07AC\x03\x02\x02\x02\u07AE\u07AF\x03" +
		"\x02\x02\x02\u07AF\u07B0\x03\x02\x02\x02\u07B0\u07B1\t\f\x02\x02\u07B1" +
		"\u07B3\x03\x02\x02\x02\u07B2\u07AC\x03\x02\x02\x02\u07B2\u07B3\x03\x02" +
		"\x02\x02\u07B3\u07D5\x03\x02\x02\x02\u07B4\u07BC\x07\x1E\x02\x02\u07B5" +
		"\u07B7\x05\x04\x03\x02\u07B6\u07B5\x03\x02\x02\x02\u07B7\u07B8\x03\x02" +
		"\x02\x02\u07B8\u07B6\x03\x02\x02\x02\u07B8\u07B9\x03\x02\x02\x02\u07B9" +
		"\u07BA\x03\x02\x02\x02\u07BA\u07BB\t\f\x02\x02\u07BB\u07BD\x03\x02\x02" +
		"\x02\u07BC\u07B6\x03\x02\x02\x02\u07BC\u07BD\x03\x02\x02\x02\u07BD\u07D5" +
		"\x03\x02\x02\x02\u07BE\u07D5\x078\x02\x02\u07BF\u07D5\x079\x02\x02\u07C0" +
		"\u07D5\x07:\x02\x02\u07C1\u07D5\x07;\x02\x02\u07C2\u07D5\x07<\x02\x02" +
		"\u07C3\u07D5\x07=\x02\x02\u07C4\u07D5\x07>\x02\x02\u07C5\u07D5\x077\x02" +
		"\x02\u07C6\u07D5\x07@\x02\x02\u07C7\u07D5\x07A\x02\x02\u07C8\u07D5\x07" +
		"B\x02\x02\u07C9\u07D5\x07C\x02\x02\u07CA\u07D5\x07D\x02\x02\u07CB\u07D5" +
		"\x07E\x02\x02\u07CC\u07D5\x07c\x02\x02\u07CD\u07D5\x07\x97\x02\x02\u07CE" +
		"\u07D5\x07\x96\x02\x02\u07CF\u07D5\x07\x95\x02\x02\u07D0\u07D5\x07\xAA" +
		"\x02\x02\u07D1\u07D5\x07\xDF\x02\x02\u07D2\u07D5\x07\xEA\x02\x02\u07D3" +
		"\u07D5\x07\xEB\x02\x02\u07D4\u0795\x03\x02\x02\x02\u07D4\u0796\x03\x02" +
		"\x02\x02\u07D4\u07A0\x03\x02\x02\x02\u07D4\u07AA\x03\x02\x02\x02\u07D4" +
		"\u07B4\x03\x02\x02\x02\u07D4\u07BE\x03\x02\x02\x02\u07D4\u07BF\x03\x02" +
		"\x02\x02\u07D4\u07C0\x03\x02\x02\x02\u07D4\u07C1\x03\x02\x02\x02\u07D4" +
		"\u07C2\x03\x02\x02\x02\u07D4\u07C3\x03\x02\x02\x02\u07D4\u07C4\x03\x02" +
		"\x02\x02\u07D4\u07C5\x03\x02\x02\x02\u07D4\u07C6\x03\x02\x02\x02\u07D4" +
		"\u07C7\x03\x02\x02\x02\u07D4\u07C8\x03\x02\x02\x02\u07D4\u07C9\x03\x02" +
		"\x02\x02\u07D4\u07CA\x03\x02\x02\x02\u07D4\u07CB\x03\x02\x02\x02\u07D4" +
		"\u07CC\x03\x02\x02\x02\u07D4\u07CD\x03\x02\x02\x02\u07D4\u07CE\x03\x02" +
		"\x02\x02\u07D4\u07CF\x03\x02\x02\x02\u07D4\u07D0\x03\x02\x02\x02\u07D4" +
		"\u07D1\x03\x02\x02\x02\u07D4\u07D2\x03\x02\x02\x02\u07D4\u07D3\x03\x02" +
		"\x02\x02\u07D5\x81\x03\x02\x02\x02\u07D6\u07D8\t\r\x02\x02\u07D7\u07D9" +
		"\x05\x04\x03\x02\u07D8\u07D7\x03\x02\x02\x02\u07D9\u07DA\x03\x02\x02\x02" +
		"\u07DA\u07D8\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02\x02\u07DB\u07E2\x03" +
		"\x02\x02\x02\u07DC\u07DE\x07\xB4\x02\x02\u07DD\u07DF\x05\x04\x03\x02\u07DE" +
		"\u07DD\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02\u07E0\u07DE\x03\x02" +
		"\x02\x02\u07E0\u07E1\x03\x02\x02\x02\u07E1\u07E3\x03\x02\x02\x02\u07E2" +
		"\u07DC\x03\x02\x02\x02\u07E2\u07E3\x03\x02\x02\x02\u07E3\u07E4\x03\x02" +
		"\x02\x02\u07E4\u07E5\x05\x84C\x02\u07E5\x83\x03\x02\x02\x02\u07E6\u07E8" +
		"\x05\x86D\x02\u07E7\u07E6\x03\x02\x02\x02\u07E8\u07E9\x03\x02\x02\x02" +
		"\u07E9\u07E7\x03\x02\x02\x02\u07E9\u07EA\x03\x02\x02\x02\u07EA\x85\x03" +
		"\x02\x02\x02\u07EB\u07EC\t\x0E\x02\x02\u07EC\x87\x03\x02\x02\x02\u07ED" +
		"\u07EE\x07\u0173\x02\x02\u07EE\x89\x03\x02\x02\x02\u07EF\u07F0\x07\u0173" +
		"\x02\x02\u07F0\x8B\x03\x02\x02\x02\u07F1\u07F4\x05\xA6";
	private static readonly _serializedATNSegment5: string =
		"T\x02\u07F2\u07F4\x05\x9CO\x02\u07F3\u07F1\x03\x02\x02\x02\u07F3\u07F2" +
		"\x03\x02\x02\x02\u07F4\x8D\x03\x02\x02\x02\u07F5\u07FD\x07\u0100\x02\x02" +
		"\u07F6\u07F8\x05\x04\x03\x02\u07F7\u07F6\x03\x02\x02\x02\u07F8\u07F9\x03" +
		"\x02\x02\x02\u07F9\u07F7\x03\x02\x02\x02\u07F9\u07FA\x03\x02\x02\x02\u07FA" +
		"\u07FB\x03\x02\x02\x02\u07FB\u07FC\x07\xB4\x02\x02\u07FC\u07FE\x03\x02" +
		"\x02\x02\u07FD\u07F7\x03\x02\x02\x02\u07FD\u07FE\x03\x02\x02\x02\u07FE" +
		"\u080A\x03\x02\x02\x02\u07FF\u0807\x07\u0101\x02\x02\u0800\u0802\x05\x04" +
		"\x03\x02\u0801\u0800\x03\x02\x02\x02\u0802\u0803\x03\x02\x02\x02\u0803" +
		"\u0801\x03\x02\x02\x02\u0803\u0804\x03\x02\x02\x02\u0804\u0805\x03\x02" +
		"\x02\x02\u0805\u0806\x07\r\x02\x02\u0806\u0808\x03\x02\x02\x02\u0807\u0801" +
		"\x03\x02\x02\x02\u0807\u0808\x03\x02\x02\x02\u0808\u080A\x03\x02\x02\x02" +
		"\u0809\u07F5\x03\x02\x02\x02\u0809\u07FF\x03\x02\x02\x02\u080A\u080C\x03" +
		"\x02\x02\x02\u080B\u080D\x05\x04\x03\x02\u080C\u080B\x03\x02\x02\x02\u080D" +
		"\u080E\x03\x02\x02\x02\u080E\u080C\x03\x02\x02\x02\u080E\u080F\x03\x02" +
		"\x02\x02\u080F\u0810\x03\x02\x02\x02\u0810\u081A\x05\x90I\x02\u0811\u0813" +
		"\x05\x04\x03\x02\u0812\u0811\x03\x02\x02\x02\u0813\u0816\x03\x02\x02\x02" +
		"\u0814\u0812\x03\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815\u0817\x03" +
		"\x02\x02\x02\u0816\u0814\x03\x02\x02\x02\u0817\u0819\x05\x90I\x02\u0818" +
		"\u0814\x03\x02\x02\x02\u0819\u081C\x03\x02\x02\x02\u081A\u0818\x03\x02" +
		"\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\x8F\x03\x02\x02\x02\u081C\u081A" +
		"\x03\x02\x02\x02\u081D\u081E\x07\u0173\x02\x02\u081E\x91\x03\x02\x02\x02" +
		"\u081F\u0821\x07\xBF\x02\x02\u0820\u0822\x05\x04\x03\x02\u0821\u0820\x03" +
		"\x02\x02\x02\u0822\u0823\x03\x02\x02\x02\u0823\u0821\x03\x02\x02\x02\u0823" +
		"\u0824\x03\x02\x02\x02\u0824\u082B\x03\x02\x02\x02\u0825\u0827\x07\xB4" +
		"\x02\x02\u0826\u0828\x05\x04\x03\x02\u0827\u0826\x03\x02\x02\x02\u0828" +
		"\u0829\x03\x02\x02\x02\u0829\u0827\x03\x02\x02\x02\u0829\u082A\x03\x02" +
		"\x02\x02\u082A\u082C\x03\x02\x02\x02\u082B\u0825\x03\x02\x02\x02\u082B" +
		"\u082C\x03\x02\x02\x02\u082C\u082D\x03\x02\x02\x02\u082D\u0835\x05\x9A" +
		"N\x02\u082E\u0830\x05\x04\x03\x02\u082F\u082E\x03\x02\x02\x02\u0830\u0831" +
		"\x03\x02\x02\x02\u0831\u082F\x03\x02\x02\x02\u0831\u0832\x03\x02\x02\x02" +
		"\u0832\u0833\x03\x02\x02\x02\u0833\u0834\x07\xC1\x02\x02\u0834\u0836\x03" +
		"\x02\x02\x02\u0835\u082F\x03\x02\x02\x02\u0835\u0836\x03\x02\x02\x02\u0836" +
		"\u0852\x03\x02\x02\x02\u0837\u0839\x05\x04\x03\x02\u0838\u0837\x03\x02" +
		"\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u0838\x03\x02\x02\x02\u083A" +
		"\u083B\x03\x02\x02\x02\u083B\u0842\x03\x02\x02\x02\u083C\u083E\x07\u0150" +
		"\x02\x02\u083D\u083F\x05\x04\x03\x02\u083E\u083D\x03\x02\x02\x02\u083F" +
		"\u0840\x03\x02\x02\x02\u0840\u083E\x03\x02\x02\x02\u0840\u0841\x03\x02" +
		"\x02\x02\u0841\u0843\x03\x02\x02\x02\u0842\u083C\x03\x02\x02\x02\u0842" +
		"\u0843\x03\x02\x02\x02\u0843\u0844\x03\x02\x02\x02\u0844\u0846\x07\x98" +
		"\x02\x02\u0845\u0847\x05\x04\x03\x02\u0846\u0845\x03\x02\x02\x02\u0847" +
		"\u0848\x03\x02\x02\x02\u0848\u0846\x03\x02\x02\x02\u0848\u0849\x03\x02" +
		"\x02\x02\u0849\u084A\x03\x02\x02\x02\u084A\u084C\x07\x16\x02\x02\u084B" +
		"\u084D\x05\x04\x03\x02\u084C\u084B\x03\x02\x02\x02\u084D\u084E\x03\x02" +
		"\x02\x02\u084E\u084C\x03\x02\x02\x02\u084E\u084F\x03\x02\x02\x02\u084F" +
		"\u0850\x03\x02\x02\x02\u0850\u0851\x05\x98M\x02\u0851\u0853\x03\x02\x02" +
		"\x02\u0852\u0838\x03\x02\x02\x02\u0852\u0853\x03\x02\x02\x02\u0853\u0871" +
		"\x03\x02\x02\x02\u0854\u0856\x05\x04\x03\x02\u0855\u0854\x03\x02\x02\x02" +
		"\u0856\u0857\x03\x02\x02\x02\u0857\u0855\x03\x02\x02\x02\u0857\u0858\x03" +
		"\x02\x02\x02\u0858\u085F\x03\x02\x02\x02\u0859\u085B\x07\xC1\x02\x02\u085A" +
		"\u085C\x05\x04\x03\x02\u085B\u085A\x03\x02\x02\x02\u085C\u085D\x03\x02" +
		"\x02\x02\u085D\u085B\x03\x02\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E" +
		"\u0860\x03\x02\x02\x02\u085F\u0859\x03\x02\x02\x02\u085F\u0860\x03\x02" +
		"\x02\x02\u0860\u0867\x03\x02\x02\x02\u0861\u0863\x07\x16\x02\x02\u0862" +
		"\u0864\x05\x04\x03\x02\u0863\u0862\x03\x02\x02\x02\u0864\u0865\x03\x02" +
		"\x02\x02\u0865\u0863\x03\x02\x02\x02\u0865\u0866\x03\x02\x02\x02\u0866" +
		"\u0868\x03\x02\x02\x02\u0867\u0861\x03\x02\x02\x02\u0867\u0868\x03\x02" +
		"\x02\x02\u0868\u0869\x03\x02\x02\x02\u0869\u086B\x07\u013C\x02\x02\u086A" +
		"\u086C\x05\x04\x03\x02\u086B\u086A\x03\x02\x02\x02\u086C\u086D\x03\x02" +
		"\x02\x02\u086D\u086B\x03\x02\x02\x02\u086D\u086E\x03\x02\x02\x02\u086E" +
		"\u086F\x03\x02\x02\x02\u086F\u0870\x05\x96L\x02\u0870\u0872\x03\x02\x02" +
		"\x02\u0871\u0855\x03\x02\x02\x02\u0871\u0872\x03\x02\x02\x02\u0872\u0890" +
		"\x03\x02\x02\x02\u0873\u0875\x05\x04\x03\x02\u0874\u0873\x03\x02\x02\x02" +
		"\u0875\u0876\x03\x02\x02\x02\u0876\u0874\x03\x02\x02\x02\u0876\u0877\x03" +
		"\x02\x02\x02\u0877\u087E\x03\x02\x02\x02\u0878\u087A\x07\xC1\x02\x02\u0879" +
		"\u087B\x05\x04\x03\x02\u087A\u0879\x03\x02\x02\x02\u087B\u087C\x03\x02" +
		"\x02\x02\u087C\u087A\x03\x02\x02\x02\u087C\u087D\x03\x02\x02\x02\u087D" +
		"\u087F\x03\x02\x02\x02\u087E\u0878\x03\x02\x02\x02\u087E\u087F\x03\x02" +
		"\x02\x02\u087F\u0886\x03\x02\x02\x02\u0880\u0882\x07\x16\x02\x02\u0881" +
		"\u0883\x05\x04\x03\x02\u0882\u0881\x03\x02\x02\x02\u0883\u0884\x03\x02" +
		"\x02\x02\u0884\u0882\x03\x02\x02\x02\u0884\u0885\x03\x02\x02\x02\u0885" +
		"\u0887\x03\x02\x02\x02\u0886\u0880\x03\x02\x02\x02\u0886\u0887\x03\x02" +
		"\x02\x02\u0887\u0888\x03\x02\x02\x02\u0888\u088A\x07$\x02\x02\u0889\u088B" +
		"\x05\x04\x03\x02\u088A\u0889\x03\x02\x02\x02\u088B\u088C\x03\x02\x02\x02" +
		"\u088C\u088A\x03\x02\x02\x02\u088C\u088D\x03\x02\x02\x02\u088D\u088E\x03" +
		"\x02\x02\x02\u088E\u088F\x05\x94K\x02\u088F\u0891\x03\x02\x02\x02\u0890" +
		"\u0874\x03\x02\x02\x02\u0890\u0891\x03\x02\x02\x02\u0891\x93\x03\x02\x02" +
		"\x02\u0892\u0895\x07\u0171\x02\x02\u0893\u0895\x05\u0100\x81\x02\u0894" +
		"\u0892\x03\x02\x02\x02\u0894\u0893\x03\x02\x02\x02\u0895\x95\x03\x02\x02" +
		"\x02\u0896\u0899\x07\u0171\x02\x02\u0897\u0899\x05\u0100\x81\x02\u0898" +
		"\u0896\x03\x02\x02\x02\u0898\u0897\x03\x02\x02\x02\u0899\x97\x03\x02\x02" +
		"\x02\u089A\u089D\x07\u0171\x02\x02\u089B\u089D\x05\u0100\x81\x02\u089C" +
		"\u089A\x03\x02\x02\x02\u089C\u089B\x03\x02\x02\x02\u089D\x99\x03\x02\x02" +
		"\x02\u089E\u08A1\x07\u0171\x02\x02\u089F\u08A1\x05\u0100\x81\x02\u08A0" +
		"\u089E\x03\x02\x02\x02\u08A0\u089F\x03\x02\x02\x02\u08A1\x9B\x03\x02\x02" +
		"\x02\u08A2\u08A4\x07S\x02\x02\u08A3\u08A5\x05\x04\x03\x02\u08A4\u08A3" +
		"\x03\x02\x02\x02\u08A5\u08A6\x03\x02\x02\x02\u08A6\u08A4\x03\x02\x02\x02" +
		"\u08A6\u08A7\x03\x02\x02\x02\u08A7\u08BC\x03\x02\x02\x02\u08A8\u08B0\x07" +
		"\xF7\x02\x02\u08A9\u08AB\x05\x04\x03\x02\u08AA\u08A9\x03\x02\x02\x02\u08AB" +
		"\u08AC\x03\x02\x02\x02\u08AC\u08AA\x03\x02\x02\x02\u08AC\u08AD\x03\x02" +
		"\x02\x02\u08AD\u08AE\x03\x02\x02\x02\u08AE\u08AF\x07\r\x02\x02\u08AF\u08B1" +
		"\x03\x02\x02\x02\u08B0\u08AA\x03\x02\x02\x02\u08B0\u08B1\x03\x02\x02\x02" +
		"\u08B1\u08BD\x03\x02\x02\x02\u08B2\u08BA\x07\xF6\x02\x02\u08B3\u08B5\x05" +
		"\x04\x03\x02\u08B4\u08B3\x03\x02\x02\x02\u08B5\u08B6\x03\x02\x02\x02\u08B6" +
		"\u08B4\x03\x02\x02\x02\u08B6\u08B7\x03\x02\x02\x02\u08B7\u08B8\x03\x02" +
		"\x02\x02\u08B8\u08B9\x07\xB4\x02\x02\u08B9\u08BB\x03\x02\x02\x02\u08BA" +
		"\u08B4\x03\x02\x02\x02\u08BA\u08BB\x03\x02\x02\x02\u08BB\u08BD\x03\x02" +
		"\x02\x02\u08BC\u08A8\x03\x02\x02\x02\u08BC\u08B2\x03\x02\x02\x02\u08BD" +
		"\u08BE\x03\x02\x02\x02\u08BE\u08C8\x05\x9EP\x02\u08BF\u08C1\x05\x04\x03" +
		"\x02\u08C0\u08BF\x03\x02\x02\x02\u08C1\u08C2\x03\x02\x02\x02\u08C2\u08C0" +
		"\x03\x02\x02\x02\u08C2\u08C3\x03\x02\x02\x02\u08C3\u08C4\x03\x02\x02\x02" +
		"\u08C4\u08C5\x05\x9EP\x02\u08C5\u08C7\x03\x02\x02\x02\u08C6\u08C0\x03" +
		"\x02\x02\x02\u08C7\u08CA\x03\x02\x02\x02\u08C8\u08C6\x03\x02\x02\x02\u08C8" +
		"\u08C9\x03\x02\x02\x02\u08C9\x9D\x03\x02\x02\x02\u08CA\u08C8\x03\x02\x02" +
		"\x02\u08CB\u08CC\x07\u0173\x02\x02\u08CC\x9F\x03\x02\x02\x02\u08CD\u08CF" +
		"\x07\u014A\x02\x02\u08CE\u08D0\x05\x04\x03\x02\u08CF\u08CE\x03\x02\x02" +
		"\x02\u08D0\u08D1\x03\x02\x02\x02\u08D1\u08CF\x03\x02\x02\x02\u08D1\u08D2" +
		"\x03\x02\x02\x02\u08D2\u08D3\x03\x02\x02\x02\u08D3\u08D5\x07\xD6\x02\x02" +
		"\u08D4\u08D6\x05\x04\x03\x02\u08D5\u08D4\x03\x02\x02\x02\u08D6\u08D7\x03" +
		"\x02\x02\x02\u08D7\u08D5\x03\x02\x02\x02\u08D7\u08D8\x03\x02\x02\x02\u08D8" +
		"\u08D9\x03\x02\x02\x02\u08D9\u08DB\t\x0F\x02\x02\u08DA\u08DC\x05\x04\x03" +
		"\x02\u08DB\u08DA\x03\x02\x02\x02\u08DC\u08DD\x03\x02\x02\x02\u08DD\u08DB" +
		"\x03\x02\x02\x02\u08DD\u08DE\x03\x02\x02\x02\u08DE\u08DF\x03\x02\x02\x02" +
		"\u08DF\u08E1\x07\xB4\x02\x02\u08E0\u08E2\x05\x04\x03\x02\u08E1\u08E0\x03" +
		"\x02\x02\x02\u08E2\u08E3\x03\x02\x02\x02\u08E3\u08E1\x03\x02\x02\x02\u08E3" +
		"\u08E4\x03\x02\x02\x02\u08E4\u08E5\x03\x02\x02\x02\u08E5\u08E6\x05\xA2" +
		"R\x02\u08E6\xA1\x03\x02\x02\x02\u08E7\u08EA\x07\u0170\x02\x02\u08E8\u08EA" +
		"\x05\u0100\x81\x02\u08E9\u08E7\x03\x02\x02\x02\u08E9\u08E8\x03\x02\x02" +
		"\x02\u08EA\xA3\x03\x02\x02\x02\u08EB\u08ED\x07\xB9\x02\x02\u08EC\u08EE" +
		"\x05\x04\x03\x02\u08ED\u08EC\x03\x02\x02\x02\u08EE\u08EF\x03\x02\x02\x02" +
		"\u08EF\u08ED\x03\x02\x02\x02\u08EF\u08F0\x03\x02\x02\x02\u08F0\u0905\x03" +
		"\x02\x02\x02\u08F1\u08F9\x07\xF7\x02\x02\u08F2\u08F4\x05\x04\x03\x02\u08F3" +
		"\u08F2\x03\x02\x02\x02\u08F4\u08F5\x03\x02\x02\x02\u08F5\u08F3\x03\x02" +
		"\x02\x02\u08F5\u08F6\x03\x02\x02\x02\u08F6\u08F7\x03\x02\x02\x02\u08F7" +
		"\u08F8\x07\r\x02\x02\u08F8\u08FA\x03\x02\x02\x02\u08F9\u08F3\x03\x02\x02" +
		"\x02\u08F9\u08FA\x03\x02\x02\x02\u08FA\u0906\x03\x02\x02\x02\u08FB\u0903" +
		"\x07\xF6\x02\x02\u08FC\u08FE\x05\x04\x03\x02\u08FD\u08FC\x03\x02\x02\x02" +
		"\u08FE\u08FF\x03\x02\x02\x02\u08FF\u08FD\x03\x02\x02\x02\u08FF\u0900\x03" +
		"\x02\x02\x02\u0900\u0901\x03\x02\x02\x02\u0901\u0902\x07\xB4\x02\x02\u0902" +
		"\u0904\x03\x02\x02\x02\u0903\u08FD\x03\x02\x02\x02\u0903\u0904\x03\x02" +
		"\x02\x02\u0904\u0906\x03\x02\x02\x02\u0905\u08F1\x03\x02\x02\x02\u0905" +
		"\u08FB\x03\x02\x02\x02\u0906\u0908\x03\x02\x02\x02\u0907\u0909\x05\x04" +
		"\x03\x02\u0908\u0907\x03\x02\x02\x02\u0909\u090A\x03\x02\x02\x02\u090A" +
		"\u0908\x03\x02\x02\x02\u090A\u090B\x03\x02\x02\x02\u090B\u090C\x03\x02" +
		"\x02\x02\u090C\u090D\t\x10\x02\x02\u090D\xA5\x03\x02\x02\x02\u090E\u0910" +
		"\x07\xF6\x02\x02\u090F\u0911\x05\x04\x03\x02\u0910\u090F\x03\x02\x02\x02" +
		"\u0911\u0912\x03\x02\x02\x02\u0912\u0910\x03\x02\x02\x02\u0912\u0913\x03" +
		"\x02\x02\x02\u0913\u0914\x03\x02\x02\x02\u0914\u0915\x05\xA8U\x02\u0915" +
		"\xA7\x03\x02\x02\x02\u0916\u0918\x07H\x02\x02\u0917\u0919\x05\x04\x03" +
		"\x02\u0918\u0917\x03\x02\x02\x02\u0919\u091A\x03\x02\x02\x02\u091A\u0918" +
		"\x03\x02\x02\x02\u091A\u091B\x03\x02\x02\x02\u091B\u091D\x03\x02\x02\x02" +
		"\u091C\u0916\x03\x02\x02\x02\u091C\u091D\x03\x02\x02\x02\u091D\u092A\x03" +
		"\x02\x02\x02\u091E\u0920\x05\xACW\x02\u091F\u0921\x05\x04\x03\x02\u0920" +
		"\u091F\x03\x02\x02\x02\u0921\u0922\x03\x02\x02\x02\u0922\u0920\x03\x02" +
		"\x02\x02\u0922\u0923\x03\x02\x02\x02\u0923\u0924\x03\x02\x02\x02\u0924" +
		"\u0926\x07\u013B\x02\x02\u0925\u0927\x05\x04\x03\x02\u0926\u0925\x03\x02" +
		"\x02\x02\u0927\u0928\x03\x02\x02\x02\u0928\u0926\x03\x02\x02\x02\u0928" +
		"\u0929\x03\x02\x02\x02\u0929\u092B\x03\x02\x02\x02\u092A\u091E\x03\x02" +
		"\x02\x02\u092A\u092B\x03\x02\x02\x02\u092B\u092C\x03\x02\x02\x02\u092C" +
		"\u0930\x05\xAEX\x02\u092D\u092F\x05\x04\x03\x02\u092E\u092D\x03\x02\x02" +
		"\x02\u092F\u0932\x03\x02\x02\x02\u0930\u092E\x03\x02\x02\x02\u0930\u0931" +
		"\x03\x02\x02\x02\u0931\u093A\x03\x02\x02\x02\u0932\u0930\x03\x02\x02\x02" +
		"\u0933\u0937\x07-\x02\x02\u0934\u0936\x05\x04\x03\x02\u0935\u0934\x03" +
		"\x02\x02\x02\u0936\u0939\x03\x02\x02\x02\u0937\u0935\x03\x02\x02\x02\u0937" +
		"\u0938\x03\x02\x02\x02\u0938\u093B\x03\x02\x02\x02\u0939\u0937\x03\x02" +
		"\x02\x02\u093A\u0933\x03\x02\x02\x02\u093A\u093B\x03\x02\x02\x02\u093B" +
		"\u0992\x03\x02\x02\x02\u093C\u093E\x07\xB4\x02\x02\u093D\u093F\x05\x04" +
		"\x03\x02\u093E\u093D\x03\x02\x02\x02\u093F\u0940\x03\x02\x02\x02\u0940" +
		"\u093E\x03\x02\x02\x02\u0940\u0941\x03\x02\x02\x02\u0941\u0943\x03\x02" +
		"\x02\x02\u0942\u093C\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943" +
		"\u0944\x03\x02\x02\x02\u0944\u0946\x07\u014C\x02\x02\u0945\u0947\x05\x04" +
		"\x03\x02\u0946\u0945\x03\x02\x02\x02\u0947\u0948\x03\x02\x02\x02\u0948" +
		"\u0946\x03\x02\x02\x02\u0948\u0949\x03\x02\x02\x02\u0949\u0950\x03\x02" +
		"\x02\x02\u094A\u094C\x07\xA9\x02\x02\u094B\u094D\x05\x04\x03\x02\u094C" +
		"\u094B\x03\x02\x02\x02\u094D\u094E\x03\x02\x02\x02\u094E\u094C\x03\x02" +
		"\x02\x02\u094E\u094F\x03\x02\x02\x02\u094F\u0951\x03\x02\x02\x02\u0950" +
		"\u094A\x03\x02\x02\x02\u0950\u0951\x03\x02\x02\x02\u0951\u0959\x03\x02" +
		"\x02\x02\u0952\u0956\x07\u011C\x02\x02\u0953\u0955\x05\x04\x03\x02\u0954" +
		"\u0953\x03\x02\x02\x02\u0955\u0958\x03\x02\x02\x02\u0956\u0954\x03\x02" +
		"\x02\x02\u0956\u0957\x03\x02\x02\x02\u0957\u095A\x03\x02\x02\x02\u0958" +
		"\u0956\x03\x02\x02\x02\u0959\u0952\x03\x02\x02\x02\u0959\u095A\x03\x02" +
		"\x02\x02\u095A\u0964\x03\x02\x02\x02\u095B\u095D\x07\x9B\x02\x02\u095C" +
		"\u095E\x05\x04\x03\x02\u095D\u095C\x03\x02\x02\x02\u095E\u095F\x03\x02" +
		"\x02\x02\u095F\u095D\x03\x02\x02\x02\u095F\u0960\x03\x02\x02\x02\u0960" +
		"\u0962\x03\x02\x02\x02\u0961\u095B\x03\x02\x02\x02\u0961\u0962\x03\x02" +
		"\x02\x02\u0962\u0963\x03\x02\x02\x02\u0963\u0965\x05\xACW\x02\u0964\u0961" +
		"\x03\x02\x02\x02\u0964\u0965\x03\x02\x02\x02\u0965\u096E\x03\x02\x02\x02" +
		"\u0966\u0968\x07\u013B\x02\x02\u0967\u0969\x05\x04\x03\x02\u0968\u0967" +
		"\x03\x02\x02\x02\u0969\u096A\x03\x02\x02\x02\u096A\u0968\x03\x02\x02\x02" +
		"\u096A\u096B\x03\x02\x02\x02\u096B\u096C\x03\x02\x02\x02\u096C\u096D\x05" +
		"\xAEX\x02\u096D\u096F\x03\x02\x02\x02\u096E\u0966\x03\x02\x02\x02\u096E" +
		"\u096F\x03\x02\x02\x02\u096F\u097D\x03\x02\x02\x02\u0970\u0972\x05\x04" +
		"\x03\x02\u0971\u0970\x03\x02\x02\x02\u0972\u0975\x03\x02\x02\x02\u0973" +
		"\u0971\x03\x02\x02\x02\u0973\u0974\x03\x02\x02\x02\u0974\u0976\x03\x02" +
		"\x02\x02\u0975\u0973\x03\x02\x02\x02\u0976\u097A\x07-\x02\x02\u0977\u0979" +
		"\x05\x04\x03\x02\u0978\u0977\x03\x02\x02\x02\u0979\u097C\x03\x02\x02\x02" +
		"\u097A\u0978\x03\x02\x02\x02\u097A\u097B\x03\x02\x02\x02\u097B\u097E\x03" +
		"\x02\x02\x02\u097C\u097A\x03\x02\x02\x02\u097D\u0973\x03\x02\x02\x02\u097D" +
		"\u097E\x03\x02\x02\x02\u097E\u098F\x03\x02\x02\x02\u097F\u0981\x07_\x02" +
		"\x02\u0980\u0982\x05\x04\x03\x02\u0981\u0980\x03\x02\x02\x02\u0982\u0983" +
		"\x03\x02\x02\x02\u0983\u0981\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02" +
		"\u0984\u098B\x03\x02\x02\x02\u0985\u0987\x07\xD9\x02\x02\u0986\u0988\x05" +
		"\x04\x03\x02\u0987\u0986\x03\x02\x02\x02\u0988\u0989\x03\x02\x02\x02\u0989" +
		"\u0987\x03\x02\x02\x02\u0989\u098A\x03\x02\x02\x02\u098A\u098C\x03\x02" +
		"\x02\x02\u098B\u0985\x03\x02\x02\x02\u098B\u098C\x03\x02\x02\x02\u098C" +
		"\u098D\x03\x02\x02\x02\u098D\u098E\x05\xAAV\x02\u098E\u0990\x03\x02\x02" +
		"\x02\u098F\u097F\x03\x02\x02\x02\u098F\u0990\x03\x02\x02\x02\u0990\u0992" +
		"\x03\x02\x02\x02\u0991\u091C\x03\x02\x02\x02\u0991\u0942\x03\x02\x02\x02" +
		"\u0992\xA9\x03\x02\x02\x02\u0993\u0994\x05\u0100\x81\x02\u0994\xAB\x03" +
		"\x02\x02\x02\u0995\u0996\x07\u0171\x02\x02\u0996\xAD\x03\x02\x02\x02\u0997" +
		"\u0998\x07\u0171\x02\x02\u0998\xAF\x03\x02\x02\x02\u0999\u09A3\x05&\x14" +
		"\x02\u099A\u099C\x05\x04\x03\x02\u099B\u099A\x03\x02\x02\x02\u099C\u099D" +
		"\x03\x02\x02\x02\u099D\u099B\x03\x02\x02\x02\u099D\u099E\x03\x02\x02\x02" +
		"\u099E\u09A1\x03\x02\x02\x02\u099F\u09A2\x05\xB2Z\x02\u09A0\u09A2\x07" +
		"\x91\x02\x02\u09A1\u099F\x03\x02\x02\x02\u09A1\u09A0\x03\x02\x02\x02\u09A2" +
		"\u09A4\x03\x02\x02\x02\u09A3\u099B\x03\x02\x02\x02\u09A3\u09A4\x03\x02" +
		"\x02\x02\u09A4\u09AE\x03\x02\x02\x02\u09A5\u09A7\x05\x04\x03\x02\u09A6" +
		"\u09A5\x03\x02\x02\x02\u09A7\u09A8\x03\x02\x02\x02\u09A8\u09A6\x03\x02" +
		"\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9\u09AA\x03\x02\x02\x02\u09AA" +
		"\u09AB\x05\xB4[\x02\u09AB\u09AD\x03\x02\x02\x02\u09AC\u09A6\x03\x02\x02" +
		"\x02\u09AD\u09B0\x03\x02\x02\x02\u09AE\u09AC\x03\x02\x02\x02\u09AE\u09AF" +
		"\x03\x02\x02\x02\u09AF\u09B1\x03\x02\x02\x02\u09B0\u09AE\x03\x02\x02\x02" +
		"\u09B1\u09B2\x07\u016D\x02\x02\u09B2\xB1\x03\x02\x02\x02\u09B3\u09B4\x07" +
		"\u0173\x02\x02\u09B4\xB3\x03\x02\x02\x02\u09B5\u09B7\x07!\x02\x02\u09B6" +
		"\u09B8\x05\x04\x03\x02\u09B7\u09B6\x03\x02\x02\x02\u09B8\u09B9\x03\x02" +
		"\x02\x02\u09B9\u09B7\x03\x02\x02\x02\u09B9\u09BA\x03\x02\x02\x02\u09BA" +
		"\u09BB\x03\x02\x02\x02\u09BB\u09BC\t\x11\x02\x02\u09BC\u0A80\x03\x02\x02" +
		"\x02\u09BD\u09BF\x07\x9A\x02\x02\u09BE\u09C0\x05\x04\x03\x02\u09BF\u09BE" +
		"\x03\x02\x02\x02\u09C0\u09C1\x03\x02\x02\x02\u09C1\u09BF\x03\x02\x02\x02" +
		"\u09C1\u09C2\x03\x02\x02\x02\u09C2\u09C9\x03\x02\x02\x02\u09C3\u09C5\x07" +
		"\xB4\x02\x02\u09C4\u09C6\x05\x04\x03\x02\u09C5\u09C4\x03\x02\x02\x02\u09C6" +
		"\u09C7\x03\x02\x02\x02\u09C7\u09C5\x03\x02\x02\x02\u09C7\u09C8\x03\x02" +
		"\x02\x02\u09C8\u09CA\x03\x02\x02\x02\u09C9\u09C3\x03\x02\x02\x02\u09C9" +
		"\u09CA\x03\x02\x02\x02\u09CA\u09CB\x03\x02\x02\x02\u09CB\u09CC\x05\xC0" +
		"a\x02\u09CC\u0A80\x03\x02\x02\x02\u09CD\u09CF\x07\x1A\x02\x02\u09CE\u09D0" +
		"\x05\x04\x03\x02\u09CF\u09CE\x03\x02\x02\x02\u09D0\u09D1\x03\x02\x02\x02" +
		"\u09D1\u09CF\x03\x02\x02\x02\u09D1\u09D2\x03\x02\x02\x02\u09D2\u09D9\x03" +
		"\x02\x02\x02\u09D3\u09D5\x07\xB4\x02\x02\u09D4\u09D6\x05\x04\x03\x02\u09D5" +
		"\u09D4\x03\x02\x02\x02\u09D6\u09D7\x03\x02\x02\x02\u09D7\u09D5\x03\x02" +
		"\x02\x02\u09D7\u09D8\x03\x02\x02\x02\u09D8\u09DA\x03\x02\x02\x02\u09D9" +
		"\u09D3\x03\x02\x02\x02\u09D9\u09DA\x03\x02\x02\x02\u09DA\u09DB\x03\x02" +
		"\x02\x02\u09DB\u09DC\x05\xC0a\x02\u09DC\u0A80\x03\x02\x02\x02\u09DD\u0A80" +
		"\x07\x18\x02\x02\u09DE\u0A80\x07\u0112\x02\x02\u09DF\u0A80\x07\u0102\x02" +
		"\x02\u09E0\u09E2\x07\u0147\x02\x02\u09E1\u09E3\x05\x04\x03\x02\u09E2\u09E1" +
		"\x03\x02\x02\x02\u09E3\u09E4\x03\x02\x02\x02\u09E4\u09E2\x03\x02\x02\x02" +
		"\u09E4\u09E5\x03\x02\x02\x02\u09E5\u09EC\x03\x02\x02\x02\u09E6\u09E8\x07" +
		"\xB4\x02\x02\u09E7\u09E9\x05\x04\x03\x02\u09E8\u09E7\x03\x02\x02\x02\u09E9" +
		"\u09EA\x03\x02\x02\x02\u09EA\u09E8\x03\x02\x02\x02\u09EA\u09EB\x03\x02" +
		"\x02\x02\u09EB\u09ED\x03\x02\x02\x02\u09EC\u09E6\x03\x02\x02\x02\u09EC" +
		"\u09ED\x03\x02\x02\x02\u09ED\u09EF\x03\x02\x02\x02\u09EE\u09E0\x03\x02" +
		"\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09F0\x03\x02\x02\x02\u09F0" +
		"\u0A80\x07c\x02\x02\u09F1\u0A80\x05V,\x02\u09F2\u0A80\x07\x9C\x02\x02" +
		"\u09F3\u0A80\x07\x1B\x02\x02\u09F4\u0A80\x07\"\x02\x02\u09F5\u09F7\x07" +
		"\x84\x02\x02\u09F6\u09F8\x05\x04\x03\x02\u09F7\u09F6\x03\x02\x02\x02\u09F8" +
		"\u09F9\x03\x02\x02\x02\u09F9\u09F7\x03\x02\x02\x02\u09F9\u09FA\x03\x02" +
		"\x02\x02\u09FA\u09FB\x03\x02\x02\x02\u09FB\u09FC\t\x12\x02\x02\u09FC\u0A80" +
		"\x03\x02\x02\x02\u09FD\u0A80\x07\xA3\x02\x02\u09FE\u0A80\x07\xC6\x02\x02" +
		"\u09FF\u0A80\x07\u0107\x02\x02\u0A00\u0A80\x07\u0140\x02\x02\u0A01\u0A03" +
		"\x07\xC0\x02\x02\u0A02\u0A04\x05\x04\x03\x02\u0A03\u0A02\x03\x02\x02\x02" +
		"\u0A04\u0A05\x03\x02\x02\x02\u0A05\u0A03\x03\x02\x02\x02\u0A05\u0A06\x03" +
		"\x02\x02\x02\u0A06\u0A0D\x03\x02\x02\x02\u0A07\u0A09\x07\xD3\x02\x02\u0A08" +
		"\u0A0A\x05\x04\x03\x02\u0A09\u0A08\x03\x02\x02\x02\u0A0A\u0A0B\x03\x02" +
		"\x02\x02\u0A0B\u0A09\x03\x02\x02\x02\u0A0B\u0A0C\x03\x02\x02\x02\u0A0C" +
		"\u0A0E\x03\x02\x02\x02\u0A0D\u0A07\x03\x02\x02\x02\u0A0D\u0A0E\x03\x02" +
		"\x02\x02\u0A0E\u0A15\x03\x02\x02\x02\u0A0F\u0A11\x07\xB4\x02\x02\u0A10" +
		"\u0A12\x05\x04\x03\x02\u0A11\u0A10\x03\x02\x02\x02\u0A12\u0A13\x03\x02" +
		"\x02\x02\u0A13\u0A11\x03\x02\x02\x02\u0A13\u0A14\x03\x02\x02\x02\u0A14" +
		"\u0A16\x03\x02\x02\x02\u0A15\u0A0F\x03\x02\x02\x02\u0A15\u0A16\x03\x02" +
		"\x02\x02\u0A16\u0A1D\x03\x02\x02\x02\u0A17\u0A19\x07\xE9\x02\x02\u0A18" +
		"\u0A1A\x05\x04\x03\x02\u0A19\u0A18\x03\x02\x02\x02\u0A1A\u0A1B\x03\x02" +
		"\x02\x02\u0A1B\u0A19\x03\x02\x02\x02\u0A1B\u0A1C\x03\x02\x02\x02\u0A1C" +
		"\u0A1E\x03\x02\x02\x02\u0A1D\u0A17\x03\x02\x02\x02\u0A1D\u0A1E\x03\x02" +
		"\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F\u0A20\x05\xBE`\x02\u0A20\u0A80" +
		"\x03\x02\x02\x02\u0A21\u0A23\x074\x02\x02\u0A22\u0A24\x05\x04\x03\x02" +
		"\u0A23\u0A22\x03\x02\x02\x02\u0A24\u0A25\x03\x02\x02\x02\u0A25\u0A23\x03" +
		"\x02\x02\x02\u0A25\u0A26\x03\x02\x02\x02\u0A26\u0A2D\x03\x02\x02\x02\u0A27" +
		"\u0A29\x07\xD3\x02\x02\u0A28\u0A2A\x05\x04\x03\x02\u0A29\u0A28\x03\x02" +
		"\x02\x02\u0A2A\u0A2B\x03\x02\x02\x02\u0A2B\u0A29\x03\x02\x02\x02\u0A2B" +
		"\u0A2C\x03\x02\x02\x02\u0A2C\u0A2E\x03\x02\x02\x02\u0A2D\u0A27\x03\x02" +
		"\x02\x02\u0A2D\u0A2E\x03\x02\x02\x02\u0A2E\u0A35\x03\x02\x02\x02\u0A2F" +
		"\u0A31\x07\xB4\x02\x02\u0A30\u0A32\x05\x04\x03\x02\u0A31\u0A30\x03\x02" +
		"\x02\x02\u0A32\u0A33\x03\x02\x02\x02\u0A33\u0A31\x03\x02\x02\x02\u0A33" +
		"\u0A34\x03\x02\x02\x02\u0A34\u0A36\x03\x02\x02\x02\u0A35\u0A2F\x03\x02" +
		"\x02\x02\u0A35\u0A36\x03\x02\x02\x02\u0A36\u0A3D\x03\x02\x02\x02\u0A37" +
		"\u0A39\x07\xE9\x02\x02\u0A38\u0A3A\x05\x04\x03\x02\u0A39\u0A38\x03\x02" +
		"\x02\x02\u0A3A\u0A3B\x03\x02\x02\x02\u0A3B\u0A39\x03\x02\x02\x02\u0A3B" +
		"\u0A3C\x03\x02\x02\x02\u0A3C\u0A3E\x03\x02\x02\x02\u0A3D\u0A37\x03\x02" +
		"\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\u0A3F\x03\x02\x02\x02\u0A3F" +
		"\u0A40\x05\xBE`\x02\u0A40\u0A80\x03\x02\x02\x02\u0A41\u0A43\x07\u014A" +
		"\x02\x02\u0A42\u0A44\x05\x04\x03\x02\u0A43\u0A42\x03\x02\x02\x02\u0A44" +
		"\u0A45\x03\x02\x02\x02\u0A45\u0A43\x03\x02\x02\x02\u0A45\u0A46\x03\x02" +
		"\x02\x02\u0A46\u0A4D\x03\x02\x02\x02\u0A47\u0A49\x07\xB4\x02\x02\u0A48" +
		"\u0A4A\x05\x04\x03\x02\u0A49\u0A48\x03\x02\x02\x02\u0A4A\u0A4B\x03\x02" +
		"\x02\x02\u0A4B\u0A49\x03\x02\x02\x02\u0A4B\u0A4C\x03\x02\x02\x02\u0A4C" +
		"\u0A4E\x03\x02\x02\x02\u0A4D\u0A47\x03\x02\x02\x02\u0A4D\u0A4E\x03\x02" +
		"\x02\x02\u0A4E\u0A4F\x03\x02\x02\x02\u0A4F\u0A50\x05\xBC_\x02\u0A50\u0A80" +
		"\x03\x02\x02\x02\u0A51\u0A53\x07!\x02\x02\u0A52\u0A54\x05\x04\x03\x02" +
		"\u0A53\u0A52\x03\x02\x02\x02\u0A54\u0A55\x03\x02\x02\x02\u0A55\u0A53\x03" +
		"\x02\x02\x02\u0A55\u0A56\x03\x02\x02\x02\u0A56\u0A5D\x03\x02\x02\x02\u0A57" +
		"\u0A59\x07\u014E\x02\x02\u0A58\u0A5A\x05\x04\x03\x02\u0A59\u0A58\x03\x02" +
		"\x02\x02\u0A5A\u0A5B\x03\x02\x02\x02\u0A5B\u0A59\x03\x02\x02\x02\u0A5B" +
		"\u0A5C\x03\x02\x02\x02\u0A5C\u0A5E\x03\x02\x02\x02\u0A5D\u0A57\x03\x02" +
		"\x02\x02\u0A5D\u0A5E\x03\x02\x02\x02\u0A5E\u0A5F\x03\x02\x02\x02\u0A5F" +
		"\u0A60\x07\u0154\x02\x02\u0A60\u0A80\x03\x02\x02\x02\u0A61\u0A69\t\x05" +
		"\x02\x02\u0A62\u0A64\x05\x04\x03\x02\u0A63\u0A62\x03\x02\x02\x02\u0A64" +
		"\u0A65\x03\x02\x02\x02\u0A65\u0A63\x03\x02\x02\x02\u0A65\u0A66\x03\x02" +
		"\x02\x02\u0A66\u0A67\x03\x02\x02\x02\u0A67\u0A68\x07\u010B\x02\x02\u0A68" +
		"\u0A6A\x03\x02\x02\x02\u0A69\u0A63\x03\x02\x02\x02\u0A69\u0A6A\x03\x02" +
		"\x02\x02\u0A6A\u0A80\x03\x02\x02\x02\u0A6B\u0A6D\x05\x82B\x02\u0A6C\u0A6E" +
		"\x05\x04\x03\x02\u0A6D\u0A6C\x03\x02\x02\x02\u0A6E\u0A6F\x03\x02\x02\x02" +
		"\u0A6F\u0A6D\x03\x02\x02\x02\u0A6F\u0A70\x03\x02\x02\x02\u0A70\u0A7D\x03" +
		"\x02\x02\x02\u0A71\u0A7E\x05\xB6\\\x02\u0A72\u0A7A\x05\xB8]\x02\u0A73" +
		"\u0A75\x05\x04\x03\x02\u0A74\u0A73\x03\x02\x02\x02\u0A75\u0A76\x03\x02" +
		"\x02\x02\u0A76\u0A74\x03\x02\x02\x02\u0A76\u0A77\x03\x02\x02\x02\u0A77" +
		"\u0A78\x03\x02\x02\x02\u0A78\u0A79\x05\xBA^\x02\u0A79\u0A7B\x03\x02\x02" +
		"\x02\u0A7A\u0A74\x03\x02\x02\x02\u0A7A\u0A7B\x03\x02\x02\x02\u0A7B\u0A7E" +
		"\x03\x02\x02\x02\u0A7C\u0A7E\x05\xBA^\x02\u0A7D\u0A71\x03\x02\x02\x02" +
		"\u0A7D\u0A72\x03\x02\x02\x02\u0A7D\u0A7C\x03\x02\x02\x02\u0A7E\u0A80\x03" +
		"\x02\x02\x02\u0A7F\u09B5\x03\x02\x02\x02\u0A7F\u09BD\x03\x02\x02\x02\u0A7F" +
		"\u09CD\x03\x02\x02\x02\u0A7F\u09DD\x03\x02\x02\x02\u0A7F\u09DE\x03\x02" +
		"\x02\x02\u0A7F\u09DF\x03\x02\x02\x02\u0A7F\u09EE\x03\x02\x02\x02\u0A7F" +
		"\u09F1\x03\x02\x02\x02\u0A7F\u09F2\x03\x02\x02\x02\u0A7F\u09F3\x03\x02" +
		"\x02\x02\u0A7F\u09F4\x03\x02\x02\x02\u0A7F\u09F5\x03\x02\x02\x02\u0A7F" +
		"\u09FD\x03\x02\x02\x02\u0A7F\u09FE\x03\x02\x02\x02\u0A7F\u09FF\x03\x02" +
		"\x02\x02\u0A7F\u0A00\x03\x02\x02\x02\u0A7F\u0A01\x03\x02\x02\x02\u0A7F" +
		"\u0A21\x03\x02\x02\x02\u0A7F\u0A41\x03\x02\x02\x02\u0A7F\u0A51\x03\x02" +
		"\x02\x02\u0A7F\u0A61\x03\x02\x02\x02\u0A7F\u0A6B\x03\x02\x02\x02\u0A80" +
		"\xB5\x03\x02\x02\x02\u0A81\u0A83\x07\u0149\x02\x02\u0A82\u0A84\x05\x04" +
		"\x03\x02\u0A83\u0A82\x03\x02\x02\x02\u0A84\u0A85\x03\x02\x02\x02\u0A85" +
		"\u0A83\x03\x02\x02\x02\u0A85\u0A86\x03\x02\x02\x02\u0A86\u0A87\x03\x02" +
		"\x02\x02\u0A87\u0A88\x05\u0100\x81\x02\u0A88\xB7\x03\x02\x02\x02\u0A89" +
		"\u0A8B\x07\x9B\x02\x02\u0A8A\u0A8C\x05\x04\x03\x02\u0A8B\u0A8A\x03\x02" +
		"\x02\x02\u0A8C\u0A8D\x03\x02\x02\x02\u0A8D\u0A8B\x03\x02\x02\x02\u0A8D" +
		"\u0A8E\x03\x02\x02\x02\u0A8E\u0A91\x03\x02\x02\x02\u0A8F\u0A92\x05\u0100" +
		"\x81\x02\u0A90\u0A92\x05\xBC_\x02\u0A91\u0A8F\x03\x02\x02\x02\u0A91\u0A90" +
		"\x03\x02\x02\x02\u0A92\xB9\x03\x02\x02\x02\u0A93\u0A95\x07\u013B\x02\x02" +
		"\u0A94\u0A96\x05\x04\x03\x02\u0A95\u0A94\x03\x02\x02\x02\u0A96\u0A97\x03" +
		"\x02\x02\x02\u0A97\u0A95\x03\x02\x02\x02";
	private static readonly _serializedATNSegment6: string =
		"\u0A97\u0A98\x03\x02\x02\x02\u0A98\u0A99\x03\x02\x02\x02\u0A99\u0A9A\x05" +
		"\u0100\x81\x02\u0A9A\xBB\x03\x02\x02\x02\u0A9B\u0A9C\x07\u0170\x02\x02" +
		"\u0A9C\xBD\x03\x02\x02\x02\u0A9D\u0AA0\x05\u0100\x81\x02\u0A9E\u0AA0\x07" +
		"\u0171\x02\x02\u0A9F\u0A9D\x03\x02\x02\x02\u0A9F\u0A9E\x03\x02\x02\x02" +
		"\u0AA0\xBF\x03\x02\x02\x02\u0AA1\u0AA2\x07\u0171\x02\x02\u0AA2\xC1\x03" +
		"\x02\x02\x02\u0AA3\u0AA5\x07\xA7\x02\x02\u0AA4\u0AA6\x05\x04\x03\x02\u0AA5" +
		"\u0AA4\x03\x02\x02\x02\u0AA6\u0AA7\x03\x02\x02\x02\u0AA7\u0AA5\x03\x02" +
		"\x02\x02\u0AA7\u0AA8\x03\x02\x02\x02\u0AA8\u0AA9\x03\x02\x02\x02\u0AA9" +
		"\u0AAD\x07e\x02\x02\u0AAA\u0AAC\x05\x04\x03\x02\u0AAB\u0AAA\x03\x02\x02" +
		"\x02\u0AAC\u0AAF\x03\x02\x02\x02\u0AAD\u0AAB\x03\x02\x02\x02\u0AAD\u0AAE" +
		"\x03\x02\x02\x02\u0AAE\u0AB0\x03\x02\x02\x02\u0AAF\u0AAD\x03\x02\x02\x02" +
		"\u0AB0\u0AB4\x07\u016D\x02\x02\u0AB1\u0AB3\x05\x04\x03\x02\u0AB2\u0AB1" +
		"\x03\x02\x02\x02\u0AB3\u0AB6\x03\x02\x02\x02\u0AB4\u0AB2\x03\x02\x02\x02" +
		"\u0AB4\u0AB5\x03\x02\x02\x02\u0AB5\u0ABA\x03\x02\x02\x02\u0AB6\u0AB4\x03" +
		"\x02\x02\x02\u0AB7\u0AB9\x05\xC4c\x02\u0AB8\u0AB7\x03\x02\x02\x02\u0AB9" +
		"\u0ABC\x03\x02\x02\x02\u0ABA\u0AB8\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02" +
		"\x02\x02\u0ABB\xC3\x03\x02\x02\x02\u0ABC\u0ABA\x03\x02\x02\x02\u0ABD\u0AC6" +
		"\x05\xC6d\x02\u0ABE\u0AC6\x05\xD2j\x02\u0ABF\u0AC6\x05\xD4k\x02\u0AC0" +
		"\u0AC6\x05\xD6l\x02\u0AC1\u0AC6\x05\xD8m\x02\u0AC2\u0AC6\x05\xDAn\x02" +
		"\u0AC3\u0AC6\x05\xDCo\x02\u0AC4\u0AC6\x05\x04\x03\x02\u0AC5\u0ABD\x03" +
		"\x02\x02\x02\u0AC5\u0ABE\x03\x02\x02\x02\u0AC5\u0ABF\x03\x02\x02\x02\u0AC5" +
		"\u0AC0\x03\x02\x02\x02\u0AC5\u0AC1\x03\x02\x02\x02\u0AC5\u0AC2\x03\x02" +
		"\x02\x02\u0AC5\u0AC3\x03\x02\x02\x02\u0AC5\u0AC4\x03\x02\x02\x02\u0AC6" +
		"\xC5\x03\x02\x02\x02\u0AC7\u0ACB\x07\xF2\x02\x02\u0AC8\u0ACA\x05\x04\x03" +
		"\x02\u0AC9\u0AC8\x03\x02\x02\x02\u0ACA\u0ACD\x03\x02\x02\x02\u0ACB\u0AC9" +
		"\x03\x02\x02\x02\u0ACB\u0ACC\x03\x02\x02\x02\u0ACC\u0ACE\x03\x02\x02\x02" +
		"\u0ACD\u0ACB\x03\x02\x02\x02\u0ACE\u0AD2\x07\u016D\x02\x02\u0ACF\u0AD1" +
		"\x05\x04\x03\x02\u0AD0\u0ACF\x03\x02\x02\x02\u0AD1\u0AD4\x03\x02\x02\x02" +
		"\u0AD2\u0AD0\x03\x02\x02\x02\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3\u0AD5\x03" +
		"\x02\x02\x02\u0AD4\u0AD2\x03\x02\x02\x02\u0AD5\u0AD9\x05\xC8e\x02\u0AD6" +
		"\u0AD8\x05\x04\x03\x02\u0AD7\u0AD6\x03\x02\x02\x02\u0AD8\u0ADB\x03\x02" +
		"\x02\x02\u0AD9\u0AD7\x03\x02\x02\x02\u0AD9\u0ADA\x03\x02\x02\x02\u0ADA" +
		"\u0ADD\x03\x02\x02\x02\u0ADB\u0AD9\x03\x02\x02\x02\u0ADC\u0ADE\x05\xCA" +
		"f\x02\u0ADD\u0ADC\x03\x02\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0AE2" +
		"\x03\x02\x02\x02\u0ADF\u0AE1\x05\x04\x03\x02\u0AE0\u0ADF\x03\x02\x02\x02" +
		"\u0AE1\u0AE4\x03\x02\x02\x02\u0AE2\u0AE0\x03\x02\x02\x02\u0AE2\u0AE3\x03" +
		"\x02\x02\x02\u0AE3\u0AE6\x03\x02\x02\x02\u0AE4\u0AE2\x03\x02\x02\x02\u0AE5" +
		"\u0AE7\x05\xCCg\x02\u0AE6\u0AE5\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02" +
		"\x02\u0AE7\u0AEB\x03\x02\x02\x02\u0AE8\u0AEA\x05\x04\x03\x02\u0AE9\u0AE8" +
		"\x03\x02\x02\x02\u0AEA\u0AED\x03\x02\x02\x02\u0AEB\u0AE9\x03\x02\x02\x02" +
		"\u0AEB\u0AEC\x03\x02\x02\x02\u0AEC\u0AEE\x03\x02\x02\x02\u0AED\u0AEB\x03" +
		"\x02\x02\x02\u0AEE\u0AEF\x07\u016D\x02\x02\u0AEF\xC7\x03\x02\x02\x02\u0AF0" +
		"\u0AF1\x07\u0173\x02\x02\u0AF1\xC9\x03\x02\x02\x02\u0AF2\u0AF4\x07\xB4" +
		"\x02\x02\u0AF3\u0AF5\x05\x04\x03\x02\u0AF4\u0AF3\x03\x02\x02\x02\u0AF5" +
		"\u0AF6\x03\x02\x02\x02\u0AF6\u0AF4\x03\x02\x02\x02\u0AF6\u0AF7\x03\x02" +
		"\x02\x02\u0AF7\u0AF9\x03\x02\x02\x02\u0AF8\u0AF2\x03\x02\x02\x02\u0AF8" +
		"\u0AF9\x03\x02\x02\x02\u0AF9\u0AFA\x03\x02\x02\x02\u0AFA\u0B02\t\x13\x02" +
		"\x02\u0AFB\u0AFD\x05\x04\x03\x02\u0AFC\u0AFB\x03\x02\x02\x02\u0AFD\u0AFE" +
		"\x03\x02\x02\x02\u0AFE\u0AFC\x03\x02\x02\x02\u0AFE\u0AFF\x03\x02\x02\x02" +
		"\u0AFF\u0B00\x03\x02\x02\x02\u0B00\u0B01\x07\xF1\x02\x02\u0B01\u0B03\x03" +
		"\x02\x02\x02\u0B02\u0AFC\x03\x02\x02\x02\u0B02\u0B03\x03\x02\x02\x02\u0B03" +
		"\xCB\x03\x02\x02\x02\u0B04\u0B06\x07\u0150\x02\x02\u0B05\u0B07\x05\x04" +
		"\x03\x02\u0B06\u0B05\x03\x02\x02\x02\u0B07\u0B08\x03\x02\x02\x02\u0B08" +
		"\u0B06\x03\x02\x02\x02\u0B08\u0B09\x03\x02\x02\x02\u0B09\u0B0B\x03\x02" +
		"\x02\x02\u0B0A\u0B04\x03\x02\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B" +
		"\u0B0C\x03\x02\x02\x02\u0B0C\u0B0E\x07\xA6\x02\x02\u0B0D\u0B0F\x05\x04" +
		"\x03\x02\u0B0E\u0B0D\x03\x02\x02\x02\u0B0F\u0B10\x03\x02\x02\x02\u0B10" +
		"\u0B0E\x03\x02\x02\x02\u0B10\u0B11\x03\x02\x02\x02\u0B11\u0B12\x03\x02" +
		"\x02\x02\u0B12\u0B13\x05\xCEh\x02\u0B13\xCD\x03\x02\x02\x02\u0B14\u0B15" +
		"\x07\u0170\x02\x02\u0B15\xCF\x03\x02\x02\x02\u0B16\u0B1A\x07\u0174\x02" +
		"\x02\u0B17\u0B19\n\x02\x02\x02\u0B18\u0B17\x03\x02\x02\x02\u0B19\u0B1C" +
		"\x03\x02\x02\x02\u0B1A\u0B18\x03\x02\x02\x02\u0B1A\u0B1B\x03\x02\x02\x02" +
		"\u0B1B\u0B1D\x03\x02\x02\x02\u0B1C\u0B1A\x03\x02\x02\x02\u0B1D\u0B20\x07" +
		"\u0176\x02\x02\u0B1E\u0B20\x05\b\x05\x02\u0B1F\u0B16\x03\x02\x02\x02\u0B1F" +
		"\u0B1E\x03\x02\x02\x02\u0B20\xD1\x03\x02\x02\x02\u0B21\u0B25\x07\x17\x02" +
		"\x02\u0B22\u0B24\x05\x04\x03\x02\u0B23\u0B22\x03\x02\x02\x02\u0B24\u0B27" +
		"\x03\x02\x02\x02\u0B25\u0B23\x03\x02\x02\x02\u0B25\u0B26\x03\x02\x02\x02" +
		"\u0B26\u0B28\x03\x02\x02\x02\u0B27\u0B25\x03\x02\x02\x02\u0B28\u0B2C\x07" +
		"\u016D\x02\x02\u0B29\u0B2B\n\x02\x02\x02\u0B2A\u0B29\x03\x02\x02\x02\u0B2B" +
		"\u0B2E\x03\x02\x02\x02\u0B2C\u0B2A\x03\x02\x02\x02\u0B2C\u0B2D\x03\x02" +
		"\x02\x02\u0B2D\u0B2F\x03\x02\x02\x02\u0B2E\u0B2C\x03\x02\x02\x02\u0B2F" +
		"\u0B33\x07\u0176\x02\x02\u0B30\u0B32\x05\xD0i\x02\u0B31\u0B30\x03\x02" +
		"\x02\x02\u0B32\u0B35\x03\x02\x02\x02\u0B33\u0B31\x03\x02\x02\x02\u0B33" +
		"\u0B34\x03\x02\x02\x02\u0B34\xD3\x03\x02\x02\x02\u0B35\u0B33\x03\x02\x02" +
		"\x02\u0B36\u0B3A\x07\xB2\x02\x02\u0B37\u0B39\x05\x04\x03\x02\u0B38\u0B37" +
		"\x03\x02\x02\x02\u0B39\u0B3C\x03\x02\x02\x02\u0B3A\u0B38\x03\x02\x02\x02" +
		"\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u0B3D\x03\x02\x02\x02\u0B3C\u0B3A\x03" +
		"\x02\x02\x02\u0B3D\u0B41\x07\u016D\x02\x02\u0B3E\u0B40\n\x02\x02\x02\u0B3F" +
		"\u0B3E\x03\x02\x02\x02\u0B40\u0B43\x03\x02\x02\x02\u0B41\u0B3F\x03\x02" +
		"\x02\x02\u0B41\u0B42\x03\x02\x02\x02\u0B42\u0B44\x03\x02\x02\x02\u0B43" +
		"\u0B41\x03\x02\x02\x02\u0B44\u0B48\x07\u0176\x02\x02\u0B45\u0B47\x05\xD0" +
		"i\x02\u0B46\u0B45\x03\x02\x02\x02\u0B47\u0B4A\x03\x02\x02\x02\u0B48\u0B46" +
		"\x03\x02\x02\x02\u0B48\u0B49\x03\x02\x02\x02\u0B49\xD5\x03\x02\x02\x02" +
		"\u0B4A\u0B48\x03\x02\x02\x02\u0B4B\u0B4F\x07V\x02\x02\u0B4C\u0B4E\x05" +
		"\x04\x03\x02\u0B4D\u0B4C\x03\x02\x02\x02\u0B4E\u0B51\x03\x02\x02\x02\u0B4F" +
		"\u0B4D\x03\x02\x02\x02\u0B4F\u0B50\x03\x02\x02\x02\u0B50\u0B52\x03\x02" +
		"\x02\x02\u0B51\u0B4F\x03\x02\x02\x02\u0B52\u0B56\x07\u016D\x02\x02\u0B53" +
		"\u0B55\n\x02\x02\x02\u0B54\u0B53\x03\x02\x02\x02\u0B55\u0B58\x03\x02\x02" +
		"\x02\u0B56\u0B54\x03\x02\x02\x02\u0B56\u0B57\x03\x02\x02\x02\u0B57\u0B59" +
		"\x03\x02\x02\x02\u0B58\u0B56\x03\x02\x02\x02\u0B59\u0B5D\x07\u0176\x02" +
		"\x02\u0B5A\u0B5C\x05\xD0i\x02\u0B5B\u0B5A\x03\x02\x02\x02\u0B5C\u0B5F" +
		"\x03\x02\x02\x02\u0B5D\u0B5B\x03\x02\x02\x02\u0B5D\u0B5E\x03\x02\x02\x02" +
		"\u0B5E\xD7\x03\x02\x02\x02\u0B5F\u0B5D\x03\x02\x02\x02\u0B60\u0B64\x07" +
		"U\x02\x02\u0B61\u0B63\x05\x04\x03\x02\u0B62\u0B61\x03\x02\x02\x02\u0B63" +
		"\u0B66\x03\x02\x02\x02\u0B64\u0B62\x03\x02\x02\x02\u0B64\u0B65\x03\x02" +
		"\x02\x02\u0B65\u0B67\x03\x02\x02\x02\u0B66\u0B64\x03\x02\x02\x02\u0B67" +
		"\u0B6B\x07\u016D\x02\x02\u0B68\u0B6A\n\x02\x02\x02\u0B69\u0B68\x03\x02" +
		"\x02\x02\u0B6A\u0B6D\x03\x02\x02\x02\u0B6B\u0B69\x03\x02\x02\x02\u0B6B" +
		"\u0B6C\x03\x02\x02\x02\u0B6C\u0B6E\x03\x02\x02\x02\u0B6D\u0B6B\x03\x02" +
		"\x02\x02\u0B6E\u0B72\x07\u0176\x02\x02\u0B6F\u0B71\x05\xD0i\x02\u0B70" +
		"\u0B6F\x03\x02\x02\x02\u0B71\u0B74\x03\x02\x02\x02\u0B72\u0B70\x03\x02" +
		"\x02\x02\u0B72\u0B73\x03\x02\x02\x02\u0B73\xD9\x03\x02\x02\x02\u0B74\u0B72" +
		"\x03\x02\x02\x02\u0B75\u0B79\x07\u0113\x02\x02\u0B76\u0B78\x05\x04\x03" +
		"\x02\u0B77\u0B76\x03\x02\x02\x02\u0B78\u0B7B\x03\x02\x02\x02\u0B79\u0B77" +
		"\x03\x02\x02\x02\u0B79\u0B7A\x03\x02\x02\x02\u0B7A\u0B7C\x03\x02\x02\x02" +
		"\u0B7B\u0B79\x03\x02\x02\x02\u0B7C\u0B80\x07\u016D\x02\x02\u0B7D\u0B7F" +
		"\n\x02\x02\x02\u0B7E\u0B7D\x03\x02\x02\x02\u0B7F\u0B82\x03\x02\x02\x02" +
		"\u0B80\u0B7E\x03\x02\x02\x02\u0B80\u0B81\x03\x02\x02\x02\u0B81\u0B83\x03" +
		"\x02\x02\x02\u0B82\u0B80\x03\x02\x02\x02\u0B83\u0B87\x07\u0176\x02\x02" +
		"\u0B84\u0B86\x05\xD0i\x02\u0B85\u0B84\x03\x02\x02\x02\u0B86\u0B89\x03" +
		"\x02\x02\x02\u0B87\u0B85\x03\x02\x02\x02\u0B87\u0B88\x03\x02\x02\x02\u0B88" +
		"\xDB\x03\x02\x02\x02\u0B89\u0B87\x03\x02\x02\x02\u0B8A\u0B8E\x07\xDC\x02" +
		"\x02\u0B8B\u0B8D\x05\x04\x03\x02\u0B8C\u0B8B\x03\x02\x02\x02\u0B8D\u0B90" +
		"\x03\x02\x02\x02\u0B8E\u0B8C\x03\x02\x02\x02\u0B8E\u0B8F\x03\x02\x02\x02" +
		"\u0B8F\u0B91\x03\x02\x02\x02\u0B90\u0B8E\x03\x02\x02\x02\u0B91\u0B95\x07" +
		"\u016D\x02\x02\u0B92\u0B94\x05\x04\x03\x02\u0B93\u0B92\x03\x02\x02\x02" +
		"\u0B94\u0B97\x03\x02\x02\x02\u0B95\u0B93\x03\x02\x02\x02\u0B95\u0B96\x03" +
		"\x02\x02\x02\u0B96\u0B99\x03\x02\x02\x02\u0B97\u0B95\x03\x02\x02\x02\u0B98" +
		"\u0B9A\x05\xDEp\x02\u0B99\u0B98\x03\x02\x02\x02\u0B99\u0B9A\x03\x02\x02" +
		"\x02\u0B9A\u0B9E\x03\x02\x02\x02\u0B9B\u0B9D\x05\x04\x03\x02\u0B9C\u0B9B" +
		"\x03\x02\x02\x02\u0B9D\u0BA0\x03\x02\x02\x02\u0B9E\u0B9C\x03\x02\x02\x02" +
		"\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA2\x03\x02\x02\x02\u0BA0\u0B9E\x03" +
		"\x02\x02\x02\u0BA1\u0BA3\x07\u016D\x02\x02\u0BA2\u0BA1\x03\x02\x02\x02" +
		"\u0BA2\u0BA3\x03\x02\x02\x02\u0BA3\xDD\x03\x02\x02\x02\u0BA4\u0BA6\x07" +
		"\x12\x02\x02\u0BA5\u0BA7\x05\x04\x03\x02\u0BA6\u0BA5\x03\x02\x02\x02\u0BA7" +
		"\u0BA8\x03\x02\x02\x02\u0BA8\u0BA6\x03\x02\x02\x02\u0BA8\u0BA9\x03\x02" +
		"\x02\x02\u0BA9\u0BB0\x03\x02\x02\x02\u0BAA\u0BAC\x07\xB4\x02\x02\u0BAB" +
		"\u0BAD\x05\x04\x03\x02\u0BAC\u0BAB\x03\x02\x02\x02\u0BAD\u0BAE\x03\x02" +
		"\x02\x02\u0BAE\u0BAC\x03\x02\x02\x02\u0BAE\u0BAF\x03\x02\x02\x02\u0BAF" +
		"\u0BB1\x03\x02\x02\x02\u0BB0\u0BAA\x03\x02\x02\x02\u0BB0\u0BB1\x03\x02" +
		"\x02\x02\u0BB1\u0BB2\x03\x02\x02\x02\u0BB2\u0BB6\t\x14\x02\x02\u0BB3\u0BB5" +
		"\x05\x04\x03\x02\u0BB4\u0BB3\x03\x02\x02\x02\u0BB5\u0BB8\x03\x02\x02\x02" +
		"\u0BB6\u0BB4\x03\x02\x02\x02\u0BB6\u0BB7\x03\x02\x02\x02\u0BB7\u0BB9\x03" +
		"\x02\x02\x02\u0BB8\u0BB6\x03\x02\x02\x02\u0BB9\u0BBA\x07\u016D\x02\x02" +
		"\u0BBA\xDF\x03\x02\x02\x02\u0BBB\u0BBD\x07\x7F\x02\x02\u0BBC\u0BBE\x05" +
		"\x04\x03\x02\u0BBD\u0BBC\x03\x02\x02\x02\u0BBE\u0BBF\x03\x02\x02\x02\u0BBF" +
		"\u0BBD\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02\x02\x02\u0BC0\u0BC1\x03\x02" +
		"\x02\x02\u0BC1\u0BC5\x07e\x02\x02\u0BC2\u0BC4\x05\x04\x03\x02\u0BC3\u0BC2" +
		"\x03\x02\x02\x02\u0BC4\u0BC7\x03\x02\x02\x02\u0BC5\u0BC3\x03\x02\x02\x02" +
		"\u0BC5\u0BC6\x03\x02\x02\x02\u0BC6\u0BC8\x03\x02\x02\x02\u0BC7\u0BC5\x03" +
		"\x02\x02\x02\u0BC8\u0BCC\x07\u016D\x02\x02\u0BC9\u0BCB\x05\x04\x03\x02" +
		"\u0BCA\u0BC9\x03\x02\x02\x02\u0BCB\u0BCE\x03\x02\x02\x02\u0BCC\u0BCA\x03" +
		"\x02\x02\x02\u0BCC\u0BCD\x03\x02\x02\x02\u0BCD\u0BD0\x03\x02\x02\x02\u0BCE" +
		"\u0BCC\x03\x02\x02\x02\u0BCF\u0BD1\x05\xE2r\x02\u0BD0\u0BCF\x03\x02\x02" +
		"\x02\u0BD0\u0BD1\x03\x02\x02\x02\u0BD1\u0BD3\x03\x02\x02\x02\u0BD2\u0BD4" +
		"\x05\xE4s\x02\u0BD3\u0BD2\x03\x02\x02\x02\u0BD3\u0BD4\x03\x02\x02\x02" +
		"\u0BD4\xE1\x03\x02\x02\x02\u0BD5\u0BD7\x07F\x02\x02\u0BD6\u0BD8\x05\x04" +
		"\x03\x02\u0BD7\u0BD6\x03\x02\x02\x02\u0BD8\u0BD9\x03\x02\x02\x02\u0BD9" +
		"\u0BD7\x03\x02\x02\x02\u0BD9\u0BDA\x03\x02\x02\x02\u0BDA\u0BDB\x03\x02" +
		"\x02\x02\u0BDB\u0BDF\x07\u0111\x02\x02\u0BDC\u0BDE\x05\x04\x03\x02\u0BDD" +
		"\u0BDC\x03\x02\x02\x02\u0BDE\u0BE1\x03\x02\x02\x02\u0BDF\u0BDD\x03\x02" +
		"\x02\x02\u0BDF\u0BE0\x03\x02\x02\x02\u0BE0\u0BE2\x03\x02\x02\x02\u0BE1" +
		"\u0BDF\x03\x02\x02\x02\u0BE2\u0BE6\x07\u016D\x02\x02\u0BE3\u0BE5\x05\x04" +
		"\x03\x02\u0BE4\u0BE3\x03\x02\x02\x02\u0BE5\u0BE8\x03\x02\x02\x02\u0BE6" +
		"\u0BE4\x03\x02\x02\x02\u0BE6\u0BE7\x03\x02\x02\x02\u0BE7\u0BEA\x03\x02" +
		"\x02\x02\u0BE8\u0BE6\x03\x02\x02\x02\u0BE9\u0BEB\x05\xE6t\x02\u0BEA\u0BE9" +
		"\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB\u0BEF\x03\x02\x02\x02" +
		"\u0BEC\u0BEE\x05\x04\x03\x02\u0BED\u0BEC\x03\x02\x02\x02\u0BEE\u0BF1\x03" +
		"\x02\x02\x02\u0BEF\u0BED\x03\x02\x02\x02\u0BEF\u0BF0\x03\x02\x02\x02\u0BF0" +
		"\u0BF3\x03\x02\x02\x02\u0BF1\u0BEF\x03\x02\x02\x02\u0BF2\u0BF4\x05\xEC" +
		"w\x02\u0BF3\u0BF2\x03\x02\x02\x02\u0BF3\u0BF4\x03\x02\x02\x02\u0BF4\u0BF8" +
		"\x03\x02\x02\x02\u0BF5\u0BF7\x05\x04\x03\x02\u0BF6\u0BF5\x03\x02\x02\x02" +
		"\u0BF7\u0BFA\x03\x02\x02\x02\u0BF8\u0BF6\x03\x02\x02\x02\u0BF8\u0BF9\x03" +
		"\x02\x02\x02\u0BF9\u0BFC\x03\x02\x02\x02\u0BFA\u0BF8\x03\x02\x02\x02\u0BFB" +
		"\u0BFD\x05\xFC\x7F\x02\u0BFC\u0BFB\x03\x02\x02\x02\u0BFC\u0BFD\x03\x02" +
		"\x02\x02\u0BFD\u0C01\x03\x02\x02\x02\u0BFE\u0C00\x05\x04\x03\x02\u0BFF" +
		"\u0BFE\x03\x02\x02\x02\u0C00\u0C03\x03\x02\x02\x02\u0C01\u0BFF\x03\x02" +
		"\x02\x02\u0C01\u0C02\x03\x02\x02\x02\u0C02\xE3\x03\x02\x02\x02\u0C03\u0C01" +
		"\x03\x02\x02\x02\u0C04\u0C06\x07\xB0\x02\x02\u0C05\u0C07\x05\x04\x03\x02" +
		"\u0C06\u0C05\x03\x02\x02\x02\u0C07\u0C08\x03\x02\x02\x02\u0C08\u0C06\x03" +
		"\x02\x02\x02\u0C08\u0C09\x03\x02\x02\x02\u0C09\u0C0A\x03\x02\x02\x02\u0C0A" +
		"\u0C0E\x07\u0111\x02\x02\u0C0B\u0C0D\x05\x04\x03\x02\u0C0C\u0C0B\x03\x02" +
		"\x02\x02\u0C0D\u0C10\x03\x02\x02\x02\u0C0E\u0C0C\x03\x02\x02\x02\u0C0E" +
		"\u0C0F\x03\x02\x02\x02\u0C0F\u0C11\x03\x02\x02\x02\u0C10\u0C0E\x03\x02" +
		"\x02\x02\u0C11\u0C15\x07\u016D\x02\x02\u0C12\u0C14\x05\x04\x03\x02\u0C13" +
		"\u0C12\x03\x02\x02\x02\u0C14\u0C17\x03\x02\x02\x02\u0C15\u0C13\x03\x02" +
		"\x02\x02\u0C15\u0C16\x03\x02\x02\x02\u0C16\u0C19\x03\x02\x02\x02\u0C17" +
		"\u0C15\x03\x02\x02\x02\u0C18\u0C1A\x05\u013E\xA0\x02\u0C19\u0C18\x03\x02" +
		"\x02\x02\u0C19\u0C1A\x03\x02\x02\x02\u0C1A\u0C1C\x03\x02\x02\x02\u0C1B" +
		"\u0C1D\x05\u016C\xB7\x02\u0C1C\u0C1B\x03\x02\x02\x02\u0C1C\u0C1D\x03\x02" +
		"\x02\x02\u0C1D\xE5\x03\x02\x02\x02\u0C1E\u0C22\x07\u0120\x02\x02\u0C1F" +
		"\u0C21\x05\x04\x03\x02\u0C20\u0C1F\x03\x02\x02\x02\u0C21\u0C24\x03\x02" +
		"\x02\x02\u0C22\u0C20\x03\x02\x02\x02\u0C22\u0C23\x03\x02\x02\x02\u0C23" +
		"\u0C25\x03\x02\x02\x02\u0C24\u0C22\x03\x02\x02\x02\u0C25\u0C29\x07\u016D" +
		"\x02\x02\u0C26\u0C28\x05\x04\x03\x02\u0C27\u0C26\x03\x02\x02\x02\u0C28" +
		"\u0C2B\x03\x02\x02\x02\u0C29\u0C27\x03\x02\x02\x02\u0C29\u0C2A\x03\x02" +
		"\x02\x02\u0C2A\u0C3E\x03\x02\x02\x02\u0C2B\u0C29\x03\x02\x02\x02\u0C2C" +
		"\u0C34\x05\xE8u\x02\u0C2D\u0C2F\x05\x04\x03\x02\u0C2E\u0C2D\x03\x02\x02" +
		"\x02\u0C2F\u0C30\x03\x02\x02\x02\u0C30\u0C2E\x03\x02\x02\x02\u0C30\u0C31" +
		"\x03\x02\x02\x02\u0C31\u0C32\x03\x02\x02\x02\u0C32\u0C33\x05\xEAv\x02" +
		"\u0C33\u0C35\x03\x02\x02\x02\u0C34\u0C2E\x03\x02\x02\x02\u0C34\u0C35\x03" +
		"\x02\x02\x02\u0C35\u0C39\x03\x02\x02\x02\u0C36\u0C38\x05\x04\x03\x02\u0C37" +
		"\u0C36\x03\x02\x02\x02\u0C38\u0C3B\x03\x02\x02\x02\u0C39\u0C37\x03\x02" +
		"\x02\x02\u0C39\u0C3A\x03\x02\x02\x02\u0C3A\u0C3C\x03\x02\x02\x02\u0C3B" +
		"\u0C39\x03\x02\x02\x02\u0C3C\u0C3D\x07\u016D\x02\x02\u0C3D\u0C3F\x03\x02" +
		"\x02\x02\u0C3E\u0C2C\x03\x02\x02\x02\u0C3E\u0C3F\x03\x02\x02\x02\u0C3F" +
		"\xE7\x03\x02\x02\x02\u0C40\u0C41\t\x15\x02\x02\u0C41\xE9\x03\x02\x02\x02" +
		"\u0C42\u0C44\x07\u0150\x02\x02\u0C43\u0C45\x05\x04\x03\x02\u0C44\u0C43" +
		"\x03\x02\x02\x02\u0C45\u0C46\x03\x02\x02\x02\u0C46\u0C44\x03\x02\x02\x02" +
		"\u0C46\u0C47\x03\x02\x02\x02\u0C47\u0C49\x03\x02\x02\x02\u0C48\u0C42\x03" +
		"\x02\x02\x02\u0C48\u0C49\x03\x02\x02\x02\u0C49\u0C4A\x03\x02\x02\x02\u0C4A" +
		"\u0C4C\x07Z\x02\x02\u0C4B\u0C4D\x05\x04\x03\x02\u0C4C\u0C4B\x03\x02\x02" +
		"\x02\u0C4D\u0C4E\x03\x02\x02\x02\u0C4E\u0C4C\x03\x02\x02\x02\u0C4E\u0C4F" +
		"\x03\x02\x02\x02\u0C4F\u0C50\x03\x02\x02\x02\u0C50\u0C51\x07\xCB\x02\x02" +
		"\u0C51\xEB\x03\x02\x02\x02\u0C52\u0C56\x07\xD4\x02\x02\u0C53\u0C55\x05" +
		"\x04\x03\x02\u0C54\u0C53\x03\x02\x02\x02\u0C55\u0C58\x03\x02\x02\x02\u0C56" +
		"\u0C54\x03\x02\x02\x02\u0C56\u0C57\x03\x02\x02\x02\u0C57\u0C59\x03\x02" +
		"\x02\x02\u0C58\u0C56\x03\x02\x02\x02\u0C59\u0C5D\x07\u016D\x02\x02\u0C5A" +
		"\u0C5C\x05\x04\x03\x02\u0C5B\u0C5A\x03\x02\x02\x02\u0C5C\u0C5F\x03\x02" +
		"\x02\x02\u0C5D\u0C5B\x03\x02\x02\x02\u0C5D\u0C5E\x03\x02\x02\x02\u0C5E" +
		"\u0C84\x03\x02\x02\x02\u0C5F\u0C5D\x03\x02\x02\x02\u0C60\u0C68\x05\xE8" +
		"u\x02\u0C61\u0C63\x05\x04\x03\x02\u0C62\u0C61\x03\x02\x02\x02\u0C63\u0C64" +
		"\x03\x02\x02\x02\u0C64\u0C62\x03\x02\x02\x02\u0C64\u0C65\x03\x02\x02\x02" +
		"\u0C65\u0C66\x03\x02\x02\x02\u0C66\u0C67\x05\xEEx\x02\u0C67\u0C69\x03" +
		"\x02\x02\x02\u0C68\u0C62\x03\x02\x02\x02\u0C68\u0C69\x03\x02\x02\x02\u0C69" +
		"\u0C71\x03\x02\x02\x02\u0C6A\u0C6C\x05\x04\x03\x02\u0C6B\u0C6A\x03\x02" +
		"\x02\x02\u0C6C\u0C6D\x03\x02\x02\x02\u0C6D\u0C6B\x03\x02\x02\x02\u0C6D" +
		"\u0C6E\x03\x02\x02\x02\u0C6E\u0C6F\x03\x02\x02\x02\u0C6F\u0C70\x05\xF4" +
		"{\x02\u0C70\u0C72\x03\x02\x02\x02\u0C71\u0C6B\x03\x02\x02\x02\u0C71\u0C72" +
		"\x03\x02\x02\x02\u0C72\u0C7A\x03\x02\x02\x02\u0C73\u0C75\x05\x04\x03\x02" +
		"\u0C74\u0C73\x03\x02\x02\x02\u0C75\u0C76\x03\x02\x02\x02\u0C76\u0C74\x03" +
		"\x02\x02\x02\u0C76\u0C77\x03\x02\x02\x02\u0C77\u0C78\x03\x02\x02\x02\u0C78" +
		"\u0C79\x05\xF8}\x02\u0C79\u0C7B\x03\x02\x02\x02\u0C7A\u0C74\x03\x02\x02" +
		"\x02\u0C7A\u0C7B\x03\x02\x02\x02\u0C7B\u0C7F\x03\x02\x02\x02\u0C7C\u0C7E" +
		"\x05\x04\x03\x02\u0C7D\u0C7C\x03\x02\x02\x02\u0C7E\u0C81\x03\x02\x02\x02" +
		"\u0C7F\u0C7D\x03\x02\x02\x02\u0C7F\u0C80\x03\x02\x02\x02\u0C80\u0C82\x03" +
		"\x02\x02\x02\u0C81\u0C7F\x03\x02\x02\x02\u0C82\u0C83\x07\u016D\x02\x02" +
		"\u0C83\u0C85\x03\x02\x02\x02\u0C84\u0C60\x03\x02\x02\x02\u0C84\u0C85\x03" +
		"\x02\x02\x02\u0C85\xED\x03\x02\x02\x02\u0C86\u0C8E\x07\xC9\x02\x02\u0C87" +
		"\u0C89\x05\x04\x03\x02\u0C88\u0C87\x03\x02\x02\x02\u0C89\u0C8A\x03\x02" +
		"\x02\x02\u0C8A\u0C88\x03\x02\x02\x02\u0C8A\u0C8B\x03\x02\x02\x02\u0C8B" +
		"\u0C8C\x03\x02\x02\x02\u0C8C\u0C8D\x07\u011C\x02\x02\u0C8D\u0C8F\x03\x02" +
		"\x02\x02\u0C8E\u0C88\x03\x02\x02\x02\u0C8E\u0C8F\x03\x02\x02\x02\u0C8F" +
		"\u0C91\x03\x02\x02\x02\u0C90\u0C92\x05\x04\x03\x02\u0C91\u0C90\x03\x02" +
		"\x02\x02\u0C92\u0C93\x03\x02\x02\x02\u0C93\u0C91\x03\x02\x02\x02\u0C93" +
		"\u0C94\x03\x02\x02\x02\u0C94\u0C95\x03\x02\x02\x02\u0C95\u0C97\x05\xF0" +
		"y\x02\u0C96\u0C98\x05\x04\x03\x02\u0C97\u0C96\x03\x02\x02\x02\u0C98\u0C99" +
		"\x03\x02\x02\x02\u0C99\u0C97\x03\x02\x02\x02\u0C99\u0C9A\x03\x02\x02\x02" +
		"\u0C9A\u0C9B\x03\x02\x02\x02\u0C9B\u0C9C\x05\xF2z\x02\u0C9C\xEF\x03\x02" +
		"\x02\x02\u0C9D\u0C9E\x07\u0171\x02\x02\u0C9E\xF1\x03\x02\x02\x02\u0C9F" +
		"\u0CA0\t\x16\x02\x02\u0CA0\xF3\x03\x02\x02\x02\u0CA1\u0CA3\x07\xF1\x02" +
		"\x02\u0CA2\u0CA4\x05\x04\x03\x02\u0CA3\u0CA2\x03\x02\x02\x02\u0CA4\u0CA5" +
		"\x03\x02\x02\x02\u0CA5\u0CA3\x03\x02\x02\x02\u0CA5\u0CA6\x03\x02\x02\x02" +
		"\u0CA6\u0CA8\x03\x02\x02\x02\u0CA7\u0CA1\x03\x02\x02\x02\u0CA7\u0CA8\x03" +
		"\x02\x02\x02\u0CA8\u0CAF\x03\x02\x02\x02\u0CA9\u0CAB\x073\x02\x02\u0CAA" +
		"\u0CAC\x05\x04\x03\x02\u0CAB\u0CAA\x03\x02\x02\x02\u0CAC\u0CAD\x03\x02" +
		"\x02\x02\u0CAD\u0CAB\x03\x02\x02\x02\u0CAD\u0CAE\x03\x02\x02\x02\u0CAE" +
		"\u0CB0\x03\x02\x02\x02\u0CAF\u0CA9\x03\x02\x02\x02\u0CAF\u0CB0\x03\x02" +
		"\x02\x02\u0CB0\u0CB1\x03\x02\x02\x02\u0CB1\u0CB9\x07\u0117\x02\x02\u0CB2" +
		"\u0CB4\x05\x04\x03\x02\u0CB3\u0CB2\x03\x02\x02\x02\u0CB4\u0CB5\x03\x02" +
		"\x02\x02\u0CB5\u0CB3\x03\x02\x02\x02\u0CB5\u0CB6\x03\x02\x02\x02\u0CB6" +
		"\u0CB7\x03\x02\x02\x02\u0CB7\u0CB8\x07\xB4\x02\x02\u0CB8\u0CBA\x03\x02" +
		"\x02\x02\u0CB9\u0CB3\x03\x02\x02\x02\u0CB9\u0CBA\x03\x02\x02\x02\u0CBA" +
		"\u0CBC\x03\x02\x02\x02\u0CBB\u0CBD\x05\x04\x03\x02\u0CBC\u0CBB\x03\x02" +
		"\x02\x02\u0CBD\u0CBE\x03\x02\x02\x02\u0CBE\u0CBC\x03\x02\x02\x02\u0CBE" +
		"\u0CBF\x03\x02\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u0CC1\x05\xF6" +
		"|\x02\u0CC1\xF5\x03\x02\x02\x02\u0CC2\u0CC3\x07\u0173\x02\x02\u0CC3\xF7" +
		"\x03\x02\x02\x02\u0CC4\u0CCC\x07\u0114\x02\x02\u0CC5\u0CC7\x05\x04\x03" +
		"\x02\u0CC6\u0CC5\x03\x02\x02\x02\u0CC7\u0CC8\x03\x02\x02\x02\u0CC8\u0CC6" +
		"\x03\x02\x02\x02\u0CC8\u0CC9\x03\x02\x02\x02\u0CC9\u0CCA\x03\x02\x02\x02" +
		"\u0CCA\u0CCB\x07\xB4\x02\x02\u0CCB\u0CCD\x03\x02\x02\x02\u0CCC\u0CC6\x03" +
		"\x02\x02\x02\u0CCC\u0CCD\x03\x02\x02\x02\u0CCD\u0CCE\x03\x02\x02\x02\u0CCE" +
		"\u0CCF\x05\xFA~\x02\u0CCF\xF9\x03\x02\x02\x02\u0CD0\u0CD1\x07\u0171\x02" +
		"\x02\u0CD1\xFB\x03\x02\x02\x02\u0CD2\u0CD6\x07\u0121\x02\x02\u0CD3\u0CD5" +
		"\x05\x04\x03\x02\u0CD4\u0CD3\x03\x02\x02\x02\u0CD5\u0CD8\x03\x02\x02\x02" +
		"\u0CD6\u0CD4\x03\x02\x02\x02\u0CD6\u0CD7\x03\x02\x02\x02\u0CD7\u0CD9\x03" +
		"\x02\x02\x02\u0CD8\u0CD6\x03\x02\x02\x02\u0CD9\u0CDD\x07\u016D\x02\x02" +
		"\u0CDA\u0CDC\x05\x04\x03\x02\u0CDB\u0CDA\x03\x02\x02\x02\u0CDC\u0CDF\x03" +
		"\x02\x02\x02\u0CDD\u0CDB\x03\x02\x02\x02\u0CDD\u0CDE\x03\x02\x02\x02\u0CDE" +
		"\u0CED\x03\x02\x02\x02\u0CDF\u0CDD\x03\x02\x02\x02\u0CE0\u0CE4\x05\xFE" +
		"\x80\x02\u0CE1\u0CE3\x05\x04\x03\x02\u0CE2\u0CE1\x03\x02\x02\x02\u0CE3" +
		"\u0CE6\x03\x02\x02\x02\u0CE4\u0CE2\x03\x02\x02\x02\u0CE4\u0CE5\x03\x02" +
		"\x02\x02\u0CE5\u0CE8\x03\x02\x02\x02\u0CE6\u0CE4\x03\x02\x02\x02\u0CE7" +
		"\u0CE0\x03\x02\x02\x02\u0CE8\u0CE9\x03\x02\x02\x02\u0CE9\u0CE7\x03\x02" +
		"\x02\x02\u0CE9\u0CEA\x03\x02\x02\x02\u0CEA\u0CEB\x03\x02\x02\x02\u0CEB" +
		"\u0CEC\x07\u016D\x02\x02\u0CEC\u0CEE\x03\x02\x02\x02\u0CED\u0CE7\x03\x02" +
		"\x02\x02\u0CED\u0CEE\x03\x02\x02\x02\u0CEE\xFD\x03\x02\x02\x02\u0CEF\u0CF1" +
		"\x05\u0136\x9C\x02\u0CF0\u0CF2\x05\x04\x03\x02\u0CF1\u0CF0\x03\x02\x02" +
		"\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\u0CF1\x03\x02\x02\x02\u0CF3\u0CF4" +
		"\x03\x02\x02\x02\u0CF4\u0CFB\x03\x02\x02\x02\u0CF5\u0CF7\x07\xB4\x02\x02" +
		"\u0CF6\u0CF8\x05\x04\x03\x02\u0CF7\u0CF6\x03\x02\x02\x02\u0CF8\u0CF9\x03" +
		"\x02\x02\x02\u0CF9\u0CF7\x03\x02\x02\x02\u0CF9\u0CFA\x03\x02\x02\x02\u0CFA" +
		"\u0CFC\x03\x02\x02\x02\u0CFB\u0CF5\x03\x02\x02\x02\u0CFB\u0CFC\x03\x02" +
		"\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD\u0CFE\x05\u0138\x9D\x02\u0CFE" +
		"\u0D5B\x03\x02\x02\x02\u0CFF\u0D01\x05\u013A\x9E\x02\u0D00\u0D02\x05\x04" +
		"\x03\x02\u0D01\u0D00\x03\x02\x02\x02\u0D02\u0D03\x03\x02\x02\x02\u0D03" +
		"\u0D01\x03\x02\x02\x02\u0D03\u0D04\x03\x02\x02\x02\u0D04\u0D0B\x03\x02" +
		"\x02\x02\u0D05\u0D07\x07\xB4\x02\x02\u0D06\u0D08\x05\x04\x03\x02\u0D07" +
		"\u0D06\x03\x02\x02\x02\u0D08\u0D09\x03\x02\x02\x02\u0D09\u0D07\x03\x02" +
		"\x02\x02\u0D09\u0D0A\x03\x02\x02\x02\u0D0A\u0D0C\x03\x02\x02\x02\u0D0B" +
		"\u0D05\x03\x02\x02\x02\u0D0B\u0D0C\x03\x02\x02\x02\u0D0C\u0D0D\x03\x02" +
		"\x02\x02\u0D0D\u0D0E\x05\u013C\x9F\x02\u0D0E\u0D5B\x03\x02\x02\x02\u0D0F" +
		"\u0D11\x07&\x02\x02\u0D10\u0D12\x05\x04\x03\x02\u0D11\u0D10\x03\x02\x02" +
		"\x02\u0D12\u0D13\x03\x02\x02\x02\u0D13\u0D11\x03\x02\x02\x02\u0D13\u0D14" +
		"\x03\x02\x02\x02\u0D14\u0D1B\x03\x02\x02\x02\u0D15\u0D17\x07\xB4\x02\x02" +
		"\u0D16\u0D18\x05\x04\x03\x02\u0D17\u0D16\x03\x02\x02\x02\u0D18\u0D19\x03" +
		"\x02\x02\x02\u0D19\u0D17\x03\x02\x02\x02\u0D19\u0D1A\x03\x02\x02\x02\u0D1A" +
		"\u0D1C\x03\x02\x02\x02\u0D1B\u0D15\x03\x02\x02\x02\u0D1B\u0D1C\x03\x02" +
		"\x02\x02\u0D1C\u0D1D\x03\x02\x02\x02\u0D1D\u0D1E\x05\u0134\x9B\x02\u0D1E" +
		"\u0D5B\x03\x02\x02\x02\u0D1F\u0D5B\x05\u0128\x95\x02\u0D20\u0D5B\x05\u011C" +
		"\x8F\x02\u0D21\u0D5B\x05\u0110\x89\x02\u0D22\u0D5B\x05\u010A\x86\x02\u0D23" +
		"\u0D5B\x05\u0102\x82\x02\u0D24\u0D26\x07[\x02\x02\u0D25\u0D27\x05\x04" +
		"\x03\x02\u0D26\u0D25\x03\x02\x02\x02\u0D27\u0D28\x03\x02\x02\x02\u0D28" +
		"\u0D26\x03\x02\x02\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29\u0D30\x03\x02" +
		"\x02\x02\u0D2A\u0D2C\x07\xB4\x02\x02\u0D2B\u0D2D\x05\x04\x03\x02\u0D2C" +
		"\u0D2B\x03\x02\x02\x02\u0D2D\u0D2E\x03\x02\x02\x02\u0D2E\u0D2C\x03\x02" +
		"\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D31\x03\x02\x02\x02\u0D30" +
		"\u0D2A\x03\x02\x02\x02\u0D30\u0D31\x03\x02\x02\x02\u0D31\u0D32\x03\x02" +
		"\x02\x02\u0D32\u0D33\x075\x02\x02\u0D33\u0D5B\x03\x02\x02\x02\u0D34\u0D36" +
		"\x07R\x02\x02\u0D35\u0D37\x05\x04\x03\x02\u0D36\u0D35\x03\x02\x02\x02" +
		"\u0D37\u0D38\x03\x02\x02\x02\u0D38\u0D36\x03\x02\x02\x02\u0D38\u0D39\x03" +
		"\x02\x02\x02\u0D39\u0D40\x03\x02\x02\x02\u0D3A\u0D3C\x07\xB4\x02\x02\u0D3B" +
		"\u0D3D\x05\x04\x03\x02\u0D3C\u0D3B\x03\x02\x02\x02\u0D3D\u0D3E\x03\x02" +
		"\x02\x02\u0D3E\u0D3C\x03\x02\x02\x02\u0D3E\u0D3F\x03\x02\x02\x02\u0D3F" +
		"\u0D41\x03\x02\x02\x02\u0D40\u0D3A\x03\x02\x02\x02\u0D40\u0D41\x03\x02" +
		"\x02\x02\u0D41\u0D42\x03\x02\x02\x02\u0D42\u0D43\x05\u0100\x81\x02\u0D43" +
		"\u0D5B\x03\x02\x02\x02\u0D44\u0D46\x07P\x02\x02\u0D45\u0D47\x05\x04\x03" +
		"\x02\u0D46\u0D45\x03\x02\x02\x02\u0D47\u0D48\x03\x02\x02\x02\u0D48\u0D46" +
		"\x03\x02\x02\x02\u0D48\u0D49\x03\x02\x02\x02\u0D49\u0D4A\x03\x02\x02\x02" +
		"\u0D4A\u0D4C\x07\u0126\x02\x02\u0D4B\u0D4D\x05\x04\x03\x02\u0D4C\u0D4B" +
		"\x03\x02\x02\x02\u0D4D\u0D4E\x03\x02\x02\x02\u0D4E\u0D4C\x03\x02\x02\x02" +
		"\u0D4E\u0D4F\x03\x02\x02\x02\u0D4F\u0D56\x03\x02\x02\x02\u0D50\u0D52\x07" +
		"\xB4\x02\x02\u0D51\u0D53\x05\x04\x03\x02\u0D52\u0D51\x03\x02\x02\x02\u0D53" +
		"\u0D54\x03\x02\x02\x02\u0D54\u0D52\x03\x02\x02\x02\u0D54\u0D55\x03\x02" +
		"\x02\x02\u0D55\u0D57\x03\x02\x02\x02\u0D56\u0D50\x03\x02\x02\x02\u0D56" +
		"\u0D57\x03\x02\x02\x02\u0D57\u0D58\x03\x02\x02\x02\u0D58\u0D59\x05\u0100" +
		"\x81\x02\u0D59\u0D5B";
	private static readonly _serializedATNSegment7: string =
		"\x03\x02\x02\x02\u0D5A\u0CEF\x03\x02\x02\x02\u0D5A\u0CFF\x03\x02\x02\x02" +
		"\u0D5A\u0D0F\x03\x02\x02\x02\u0D5A\u0D1F\x03\x02\x02\x02\u0D5A\u0D20\x03" +
		"\x02\x02\x02\u0D5A\u0D21\x03\x02\x02\x02\u0D5A\u0D22\x03\x02\x02\x02\u0D5A" +
		"\u0D23\x03\x02\x02\x02\u0D5A\u0D24\x03\x02\x02\x02\u0D5A\u0D34\x03\x02" +
		"\x02\x02\u0D5A\u0D44\x03\x02\x02\x02\u0D5B\xFF\x03\x02\x02\x02\u0D5C\u0D6C" +
		"\x07\u0173\x02\x02\u0D5D\u0D5F\x05\x04\x03\x02\u0D5E\u0D5D\x03\x02\x02" +
		"\x02\u0D5F\u0D60\x03\x02\x02\x02\u0D60\u0D5E\x03\x02\x02\x02\u0D60\u0D61" +
		"\x03\x02\x02\x02\u0D61\u0D62\x03\x02\x02\x02\u0D62\u0D64\t\x17\x02\x02" +
		"\u0D63\u0D65\x05\x04\x03\x02\u0D64\u0D63\x03\x02\x02\x02\u0D65\u0D66\x03" +
		"\x02\x02\x02\u0D66\u0D64\x03\x02\x02\x02\u0D66\u0D67\x03\x02\x02\x02\u0D67" +
		"\u0D68\x03\x02\x02\x02\u0D68\u0D69\x07\u0173\x02\x02\u0D69\u0D6B\x03\x02" +
		"\x02\x02\u0D6A\u0D5E\x03\x02\x02\x02\u0D6B\u0D6E\x03\x02\x02\x02\u0D6C" +
		"\u0D6A\x03\x02\x02\x02\u0D6C\u0D6D\x03\x02\x02\x02\u0D6D\u0101\x03\x02" +
		"\x02\x02\u0D6E\u0D6C\x03\x02\x02\x02\u0D6F\u0D71\x07Q\x02\x02\u0D70\u0D72" +
		"\x05\x04\x03\x02\u0D71\u0D70\x03\x02\x02\x02\u0D72\u0D73\x03\x02\x02\x02" +
		"\u0D73\u0D71\x03\x02\x02\x02\u0D73\u0D74\x03\x02\x02\x02\u0D74\u0D7B\x03" +
		"\x02\x02\x02\u0D75\u0D77\x07\u011A\x02\x02\u0D76\u0D78\x05\x04\x03\x02" +
		"\u0D77\u0D76\x03\x02\x02\x02\u0D78\u0D79\x03\x02\x02\x02\u0D79\u0D77\x03" +
		"\x02\x02\x02\u0D79\u0D7A\x03\x02\x02\x02\u0D7A\u0D7C\x03\x02\x02\x02\u0D7B" +
		"\u0D75\x03\x02\x02\x02\u0D7B\u0D7C\x03\x02\x02\x02\u0D7C\u0D83\x03\x02" +
		"\x02\x02\u0D7D\u0D7F\x07\xB4\x02\x02\u0D7E\u0D80\x05\x04\x03\x02\u0D7F" +
		"\u0D7E\x03\x02\x02\x02\u0D80\u0D81\x03\x02\x02\x02\u0D81\u0D7F\x03\x02" +
		"\x02\x02\u0D81\u0D82\x03\x02\x02\x02\u0D82\u0D84\x03\x02\x02\x02\u0D83" +
		"\u0D7D\x03\x02\x02\x02\u0D83\u0D84\x03\x02\x02\x02\u0D84\u0D85\x03\x02" +
		"\x02\x02\u0D85\u0D86\x05\u0104\x83\x02\u0D86\u0103\x03\x02\x02\x02\u0D87" +
		"\u0D8E\x05\u0106\x84\x02\u0D88\u0D8A\x07\u0150\x02\x02\u0D89\u0D8B\x05" +
		"\x04\x03\x02\u0D8A\u0D89\x03\x02\x02\x02\u0D8B\u0D8C\x03\x02\x02\x02\u0D8C" +
		"\u0D8A\x03\x02\x02\x02\u0D8C\u0D8D\x03\x02\x02\x02\u0D8D\u0D8F\x03\x02" +
		"\x02\x02\u0D8E\u0D88\x03\x02\x02\x02\u0D8E\u0D8F\x03\x02\x02\x02\u0D8F" +
		"\u0D90\x03\x02\x02\x02\u0D90\u0D92\x07\xE8\x02\x02\u0D91\u0D93\x05\x04" +
		"\x03\x02\u0D92\u0D91\x03\x02\x02\x02\u0D93\u0D94\x03\x02\x02\x02\u0D94" +
		"\u0D92\x03\x02\x02\x02\u0D94\u0D95\x03\x02\x02\x02\u0D95\u0D96\x03\x02" +
		"\x02\x02\u0D96\u0D98\x07\u012D\x02\x02\u0D97\u0D99\x05\x04\x03\x02\u0D98" +
		"\u0D97\x03\x02\x02\x02\u0D99\u0D9A\x03\x02\x02\x02\u0D9A\u0D98\x03\x02" +
		"\x02\x02\u0D9A\u0D9B\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C" +
		"\u0D9D\x05\u0108\x85\x02\u0D9D\u0DA0\x03\x02\x02\x02\u0D9E\u0DA0\x07\u0170" +
		"\x02\x02\u0D9F\u0D87\x03\x02\x02\x02\u0D9F\u0D9E\x03\x02\x02\x02\u0DA0" +
		"\u0105\x03\x02\x02\x02\u0DA1\u0DA2\x07\u0170\x02\x02\u0DA2\u0107\x03\x02" +
		"\x02\x02\u0DA3\u0DA4\x07\u0170\x02\x02\u0DA4\u0109\x03\x02\x02\x02\u0DA5" +
		"\u0DA7\x07.\x02\x02\u0DA6\u0DA8\x05\x04\x03\x02\u0DA7\u0DA6\x03\x02\x02" +
		"\x02\u0DA8\u0DA9\x03\x02\x02\x02\u0DA9\u0DA7\x03\x02\x02\x02\u0DA9\u0DAA" +
		"\x03\x02\x02\x02\u0DAA\u0DAB\x03\x02\x02\x02\u0DAB\u0DAD\x05\u010C\x87" +
		"\x02\u0DAC\u0DAE\x05\x04\x03\x02\u0DAD\u0DAC\x03\x02\x02\x02\u0DAE\u0DAF" +
		"\x03\x02\x02\x02\u0DAF\u0DAD\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02" +
		"\u0DB0\u0DB7\x03\x02\x02\x02\u0DB1\u0DB3\x07\xB4\x02\x02\u0DB2\u0DB4\x05" +
		"\x04\x03\x02\u0DB3\u0DB2\x03\x02\x02\x02\u0DB4\u0DB5\x03\x02\x02\x02\u0DB5" +
		"\u0DB3\x03\x02\x02\x02\u0DB5\u0DB6\x03\x02\x02\x02\u0DB6\u0DB8\x03\x02" +
		"\x02\x02\u0DB7\u0DB1\x03\x02\x02\x02\u0DB7\u0DB8\x03\x02\x02\x02\u0DB8" +
		"\u0DC0\x03\x02\x02\x02\u0DB9\u0DBD\x05\u010E\x88\x02\u0DBA\u0DBC\x05\x04" +
		"\x03\x02\u0DBB\u0DBA\x03\x02\x02\x02\u0DBC\u0DBF\x03\x02\x02\x02\u0DBD" +
		"\u0DBB\x03\x02\x02\x02\u0DBD\u0DBE\x03\x02\x02\x02\u0DBE\u0DC1\x03\x02" +
		"\x02\x02\u0DBF\u0DBD\x03\x02\x02\x02\u0DC0\u0DB9\x03\x02\x02\x02\u0DC1" +
		"\u0DC2\x03\x02\x02\x02\u0DC2\u0DC0\x03\x02\x02\x02\u0DC2\u0DC3\x03\x02" +
		"\x02\x02\u0DC3\u010B\x03\x02\x02\x02\u0DC4\u0DC5\x07\u0173\x02\x02\u0DC5" +
		"\u010D\x03\x02\x02\x02\u0DC6\u0DD4\x05\u0122\x92\x02\u0DC7\u0DC9\x05\x04" +
		"\x03\x02\u0DC8\u0DC7\x03\x02\x02\x02\u0DC9\u0DCA\x03\x02\x02\x02\u0DCA" +
		"\u0DC8\x03\x02\x02\x02\u0DCA\u0DCB\x03\x02\x02\x02\u0DCB\u0DCC\x03\x02" +
		"\x02\x02\u0DCC\u0DCE\t\x06\x02\x02\u0DCD\u0DCF\x05\x04\x03\x02\u0DCE\u0DCD" +
		"\x03\x02\x02\x02\u0DCF\u0DD0\x03\x02\x02\x02\u0DD0\u0DCE\x03\x02\x02\x02" +
		"\u0DD0\u0DD1\x03\x02\x02\x02\u0DD1\u0DD2\x03\x02\x02\x02\u0DD2\u0DD3\x05" +
		"\u0124\x93\x02\u0DD3\u0DD5\x03\x02\x02\x02\u0DD4\u0DC8\x03\x02\x02\x02" +
		"\u0DD4\u0DD5\x03\x02\x02\x02\u0DD5\u010F\x03\x02\x02\x02\u0DD6\u0DD8\x07" +
		"\u012E\x02\x02\u0DD7\u0DD9\x05\x04\x03\x02\u0DD8\u0DD7\x03\x02\x02\x02" +
		"\u0DD9\u0DDA\x03\x02\x02\x02\u0DDA\u0DD8\x03\x02\x02\x02\u0DDA\u0DDB\x03" +
		"\x02\x02\x02\u0DDB\u0DE2\x03\x02\x02\x02\u0DDC\u0DDE\x07-\x02\x02\u0DDD" +
		"\u0DDF\x05\x04\x03\x02\u0DDE\u0DDD\x03\x02\x02\x02\u0DDF\u0DE0\x03\x02" +
		"\x02\x02\u0DE0\u0DDE\x03\x02\x02\x02\u0DE0\u0DE1\x03\x02\x02\x02\u0DE1" +
		"\u0DE3\x03\x02\x02\x02\u0DE2\u0DDC\x03\x02\x02\x02\u0DE2\u0DE3\x03\x02" +
		"\x02\x02\u0DE3\u0DE5\x03\x02\x02\x02\u0DE4\u0DE6\x05\u0112\x8A\x02\u0DE5" +
		"\u0DE4\x03\x02\x02\x02\u0DE6\u0DE7\x03\x02\x02\x02\u0DE7\u0DE5\x03\x02" +
		"\x02\x02\u0DE7\u0DE8\x03\x02\x02\x02\u0DE8\u0111\x03\x02\x02\x02\u0DE9" +
		"\u0DEB\x05\u0114\x8B\x02\u0DEA\u0DE9\x03\x02\x02\x02\u0DEB\u0DEC\x03\x02" +
		"\x02\x02\u0DEC\u0DEA\x03\x02\x02\x02\u0DEC\u0DED\x03\x02\x02\x02\u0DED" +
		"\u0DEF\x03\x02\x02\x02\u0DEE\u0DF0\x05\u0116\x8C\x02\u0DEF\u0DEE\x03\x02" +
		"\x02\x02\u0DEF\u0DF0\x03\x02\x02\x02\u0DF0\u0113\x03\x02\x02\x02\u0DF1" +
		"\u0DF3\x05\u0118\x8D\x02\u0DF2\u0DF4\x05\x04\x03\x02\u0DF3\u0DF2\x03\x02" +
		"\x02\x02\u0DF4\u0DF5\x03\x02\x02\x02\u0DF5\u0DF3\x03\x02\x02\x02\u0DF5" +
		"\u0DF6\x03\x02\x02\x02\u0DF6\u0DF8\x03\x02\x02\x02\u0DF7\u0DF1\x03\x02" +
		"\x02\x02\u0DF8\u0DF9\x03\x02\x02\x02\u0DF9\u0DF7\x03\x02\x02\x02\u0DF9" +
		"\u0DFA\x03\x02\x02\x02\u0DFA\u0E01\x03\x02\x02\x02\u0DFB\u0DFD\t\x18\x02" +
		"\x02\u0DFC\u0DFE\x05\x04\x03\x02\u0DFD\u0DFC\x03\x02\x02\x02\u0DFE\u0DFF" +
		"\x03\x02\x02\x02\u0DFF\u0DFD\x03\x02\x02\x02\u0DFF\u0E00\x03\x02\x02\x02" +
		"\u0E00\u0E02\x03\x02\x02\x02\u0E01\u0DFB\x03\x02\x02\x02\u0E01\u0E02\x03" +
		"\x02\x02\x02\u0E02\u0E09\x03\x02\x02\x02\u0E03\u0E05\x05\u011A\x8E\x02" +
		"\u0E04\u0E06\x05\x04\x03\x02\u0E05\u0E04\x03\x02\x02\x02\u0E06\u0E07\x03" +
		"\x02\x02\x02\u0E07\u0E05\x03\x02\x02\x02\u0E07\u0E08\x03\x02\x02\x02\u0E08" +
		"\u0E0A\x03\x02\x02\x02\u0E09\u0E03\x03\x02\x02\x02\u0E0A\u0E0B\x03\x02" +
		"\x02\x02\u0E0B\u0E09\x03\x02\x02\x02\u0E0B\u0E0C\x03\x02\x02\x02\u0E0C" +
		"\u0115\x03\x02\x02\x02\u0E0D\u0E0F\x07\xA9\x02\x02\u0E0E\u0E10\x05\x04" +
		"\x03\x02\u0E0F\u0E0E\x03\x02\x02\x02\u0E10\u0E11\x03\x02\x02\x02\u0E11" +
		"\u0E0F\x03\x02\x02\x02\u0E11\u0E12\x03\x02\x02\x02\u0E12\u0E13\x03\x02" +
		"\x02\x02\u0E13\u0E17\x05\xF6|\x02\u0E14\u0E16\x05\x04\x03\x02\u0E15\u0E14" +
		"\x03\x02\x02\x02\u0E16\u0E19\x03\x02\x02\x02\u0E17\u0E15\x03\x02\x02\x02" +
		"\u0E17\u0E18\x03\x02\x02\x02\u0E18\u0117\x03\x02\x02\x02\u0E19\u0E17\x03" +
		"\x02\x02\x02\u0E1A\u0E1B\x07\u0173\x02\x02\u0E1B\u0119\x03\x02\x02\x02" +
		"\u0E1C\u0E1D\x07\u0171\x02\x02\u0E1D\u011B\x03\x02\x02\x02\u0E1E\u0E20" +
		"\x07\b\x02\x02\u0E1F\u0E21\x05\x04\x03\x02\u0E20\u0E1F\x03\x02\x02\x02" +
		"\u0E21\u0E22\x03\x02\x02\x02\u0E22\u0E20\x03\x02\x02\x02\u0E22\u0E23\x03" +
		"\x02\x02\x02\u0E23\u0E24\x03\x02\x02\x02\u0E24\u0E26\x05\xF6|\x02\u0E25" +
		"\u0E27\x05\x04\x03\x02\u0E26\u0E25\x03\x02\x02\x02\u0E27\u0E28\x03\x02" +
		"\x02\x02\u0E28\u0E26\x03\x02\x02\x02\u0E28\u0E29\x03\x02\x02\x02\u0E29" +
		"\u0E30\x03\x02\x02\x02\u0E2A\u0E2C\x07\xB4\x02\x02\u0E2B\u0E2D\x05\x04" +
		"\x03\x02\u0E2C\u0E2B\x03\x02\x02\x02\u0E2D\u0E2E\x03\x02\x02\x02\u0E2E" +
		"\u0E2C\x03\x02\x02\x02\u0E2E\u0E2F\x03\x02\x02\x02\u0E2F\u0E31\x03\x02" +
		"\x02\x02\u0E30\u0E2A\x03\x02\x02\x02\u0E30\u0E31\x03\x02\x02\x02\u0E31" +
		"\u0E32\x03\x02\x02\x02\u0E32\u0E33\x05\u011E\x90\x02\u0E33\u011D\x03\x02" +
		"\x02\x02\u0E34\u0E45\x07\x14\x02\x02\u0E35\u0E45\x07\u0123\x02\x02\u0E36" +
		"\u0E45\x07\u0124\x02\x02\u0E37\u0E45\x07\xD0\x02\x02\u0E38\u0E45\x07i" +
		"\x02\x02\u0E39\u0E3D\x05\u0120\x91\x02\u0E3A\u0E3C\x05\x04\x03\x02\u0E3B" +
		"\u0E3A\x03\x02\x02\x02\u0E3C\u0E3F\x03\x02\x02\x02\u0E3D\u0E3B\x03\x02" +
		"\x02\x02\u0E3D\u0E3E\x03\x02\x02\x02\u0E3E\u0E41\x03\x02\x02\x02\u0E3F" +
		"\u0E3D\x03\x02\x02\x02\u0E40\u0E39\x03\x02\x02\x02\u0E41\u0E42\x03\x02" +
		"\x02\x02\u0E42\u0E40\x03\x02\x02\x02\u0E42\u0E43\x03\x02\x02\x02\u0E43" +
		"\u0E45\x03\x02\x02\x02\u0E44\u0E34\x03\x02\x02\x02\u0E44\u0E35\x03\x02" +
		"\x02\x02\u0E44\u0E36\x03\x02\x02\x02\u0E44\u0E37\x03\x02\x02\x02\u0E44" +
		"\u0E38\x03\x02\x02\x02\u0E44\u0E40\x03\x02\x02\x02\u0E45\u011F\x03\x02" +
		"\x02\x02\u0E46\u0E54\x05\u0122\x92\x02\u0E47\u0E49\x05\x04\x03\x02\u0E48" +
		"\u0E47\x03\x02\x02\x02\u0E49\u0E4A\x03\x02\x02\x02\u0E4A\u0E48\x03\x02" +
		"\x02\x02\u0E4A\u0E4B\x03\x02\x02\x02\u0E4B\u0E4C\x03\x02\x02\x02\u0E4C" +
		"\u0E4E\t\x06\x02\x02\u0E4D\u0E4F\x05\x04\x03\x02\u0E4E\u0E4D\x03\x02\x02" +
		"\x02\u0E4F\u0E50\x03\x02\x02\x02\u0E50\u0E4E\x03\x02\x02\x02\u0E50\u0E51" +
		"\x03\x02\x02\x02\u0E51\u0E52\x03\x02\x02\x02\u0E52\u0E53\x05\u0124\x93" +
		"\x02\u0E53\u0E55\x03\x02\x02\x02\u0E54\u0E48\x03\x02\x02\x02\u0E54\u0E55" +
		"\x03\x02\x02\x02\u0E55\u0E69\x03\x02\x02\x02\u0E56\u0E64\x05\u0122\x92" +
		"\x02\u0E57\u0E59\x05\x04\x03\x02\u0E58\u0E57\x03\x02\x02\x02\u0E59\u0E5A" +
		"\x03\x02\x02\x02\u0E5A\u0E58\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02\x02\x02" +
		"\u0E5B\u0E5C\x03\x02\x02\x02\u0E5C\u0E5E\x07\t\x02\x02\u0E5D\u0E5F\x05" +
		"\x04\x03\x02\u0E5E\u0E5D\x03\x02\x02\x02\u0E5F\u0E60\x03\x02\x02\x02\u0E60" +
		"\u0E5E\x03\x02\x02\x02\u0E60\u0E61\x03\x02\x02\x02\u0E61\u0E62\x03\x02" +
		"\x02\x02\u0E62\u0E63\x05\u0126\x94\x02\u0E63\u0E65\x03\x02\x02\x02\u0E64" +
		"\u0E58\x03\x02\x02\x02\u0E65\u0E66\x03\x02\x02\x02\u0E66\u0E64\x03\x02" +
		"\x02\x02\u0E66\u0E67\x03\x02\x02\x02\u0E67\u0E69\x03\x02\x02\x02\u0E68" +
		"\u0E46\x03\x02\x02\x02\u0E68\u0E56\x03\x02\x02\x02\u0E69\u0121\x03\x02" +
		"\x02\x02\u0E6A\u0E6B\t\x07\x02\x02\u0E6B\u0123\x03\x02\x02\x02\u0E6C\u0E6D" +
		"\t\x07\x02\x02\u0E6D\u0125\x03\x02\x02\x02\u0E6E\u0E6F\t\x07\x02\x02\u0E6F" +
		"\u0127\x03\x02\x02\x02\u0E70\u0E72\x07\u012C\x02\x02\u0E71\u0E73\x05\x04" +
		"\x03\x02\u0E72\u0E71\x03\x02\x02\x02\u0E73\u0E74\x03\x02\x02\x02\u0E74" +
		"\u0E72\x03\x02\x02\x02\u0E74\u0E75\x03\x02\x02\x02\u0E75\u0E76\x03\x02" +
		"\x02\x02\u0E76\u0E7A\x05\u0132\x9A\x02\u0E77\u0E79\x05\x04\x03\x02\u0E78" +
		"\u0E77\x03\x02\x02\x02\u0E79\u0E7C\x03\x02\x02\x02\u0E7A\u0E78\x03\x02" +
		"\x02\x02\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0E89\x03\x02\x02\x02\u0E7C" +
		"\u0E7A\x03\x02\x02\x02\u0E7D\u0E7F\x07\xB4\x02\x02\u0E7E\u0E80\x05\x04" +
		"\x03\x02\u0E7F\u0E7E\x03\x02\x02\x02\u0E80\u0E81\x03\x02\x02\x02\u0E81" +
		"\u0E7F\x03\x02\x02\x02\u0E81\u0E82\x03\x02\x02\x02\u0E82\u0E83\x03\x02" +
		"\x02\x02\u0E83\u0E85\x05\u0130\x99\x02\u0E84\u0E86\x05\x04\x03\x02\u0E85" +
		"\u0E84\x03\x02\x02\x02\u0E86\u0E87\x03\x02\x02\x02\u0E87\u0E85\x03\x02" +
		"\x02\x02\u0E87\u0E88\x03\x02\x02\x02\u0E88\u0E8A\x03\x02\x02\x02\u0E89" +
		"\u0E7D\x03\x02\x02\x02\u0E89\u0E8A\x03\x02\x02\x02\u0E8A\u0E9F\x03\x02" +
		"\x02\x02\u0E8B\u0E93\x05\u012A\x96\x02\u0E8C\u0E8E\x05\x04\x03\x02\u0E8D" +
		"\u0E8C\x03\x02\x02\x02\u0E8E\u0E8F\x03\x02\x02\x02\u0E8F\u0E8D\x03\x02" +
		"\x02\x02\u0E8F\u0E90\x03\x02\x02\x02\u0E90\u0E91\x03\x02\x02\x02\u0E91" +
		"\u0E92\x05\u012C\x97\x02\u0E92\u0E94\x03\x02\x02\x02\u0E93\u0E8D\x03\x02" +
		"\x02\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u0EA0\x03\x02\x02\x02\u0E95" +
		"\u0E9D\x05\u012C\x97\x02\u0E96\u0E98\x05\x04\x03\x02\u0E97\u0E96\x03\x02" +
		"\x02\x02\u0E98\u0E99\x03\x02\x02\x02\u0E99\u0E97\x03\x02\x02\x02\u0E99" +
		"\u0E9A\x03\x02\x02\x02\u0E9A\u0E9B\x03\x02\x02\x02\u0E9B\u0E9C\x05\u012A" +
		"\x96\x02\u0E9C\u0E9E\x03\x02\x02\x02\u0E9D\u0E97\x03\x02\x02\x02\u0E9D" +
		"\u0E9E\x03\x02\x02\x02\u0E9E\u0EA0\x03\x02\x02\x02\u0E9F\u0E8B\x03\x02" +
		"\x02\x02\u0E9F\u0E95\x03\x02\x02\x02\u0E9F\u0EA0\x03\x02\x02\x02\u0EA0" +
		"\u0EA4\x03\x02\x02\x02\u0EA1\u0EA3\x05\x04\x03\x02\u0EA2\u0EA1\x03\x02" +
		"\x02\x02\u0EA3\u0EA6\x03\x02\x02\x02\u0EA4\u0EA2\x03\x02\x02\x02\u0EA4" +
		"\u0EA5\x03\x02\x02\x02\u0EA5\u0129\x03\x02\x02\x02\u0EA6\u0EA4\x03\x02" +
		"\x02\x02\u0EA7\u0EA9\x07\xD9\x02\x02\u0EA8\u0EAA\x05\x04\x03\x02\u0EA9" +
		"\u0EA8\x03\x02\x02\x02\u0EAA\u0EAB\x03\x02\x02\x02\u0EAB\u0EA9\x03\x02" +
		"\x02\x02\u0EAB\u0EAC\x03\x02\x02\x02\u0EAC\u0EB3\x03\x02\x02\x02\u0EAD" +
		"\u0EAF\x07\u0126\x02\x02\u0EAE\u0EB0\x05\x04\x03\x02\u0EAF\u0EAE\x03\x02" +
		"\x02\x02\u0EB0\u0EB1\x03\x02\x02\x02\u0EB1\u0EAF\x03\x02\x02\x02\u0EB1" +
		"\u0EB2\x03\x02\x02\x02\u0EB2\u0EB4\x03\x02\x02\x02\u0EB3\u0EAD\x03\x02" +
		"\x02\x02\u0EB3\u0EB4\x03\x02\x02\x02\u0EB4\u0EBB\x03\x02\x02\x02\u0EB5" +
		"\u0EB7\x07\xB4\x02\x02\u0EB6\u0EB8\x05\x04\x03\x02\u0EB7\u0EB6\x03\x02" +
		"\x02\x02\u0EB8\u0EB9\x03\x02\x02\x02\u0EB9\u0EB7\x03\x02\x02\x02\u0EB9" +
		"\u0EBA\x03\x02\x02\x02\u0EBA\u0EBC\x03\x02\x02\x02\u0EBB\u0EB5\x03\x02" +
		"\x02\x02\u0EBB\u0EBC\x03\x02\x02\x02\u0EBC\u0EBD\x03\x02\x02\x02\u0EBD" +
		"\u0EBE\x05\u012E\x98\x02\u0EBE\u012B\x03\x02\x02\x02\u0EBF\u0EC1\x07\xD7" +
		"\x02\x02\u0EC0\u0EC2\x05\x04\x03\x02\u0EC1\u0EC0\x03\x02\x02\x02\u0EC2" +
		"\u0EC3\x03\x02\x02\x02\u0EC3\u0EC1\x03\x02\x02\x02\u0EC3\u0EC4\x03\x02" +
		"\x02\x02\u0EC4\u0ECB\x03\x02\x02\x02\u0EC5\u0EC7\x07\u0126\x02\x02\u0EC6" +
		"\u0EC8\x05\x04\x03\x02\u0EC7\u0EC6\x03\x02\x02\x02\u0EC8\u0EC9\x03\x02" +
		"\x02\x02\u0EC9\u0EC7\x03\x02\x02\x02\u0EC9\u0ECA\x03\x02\x02\x02\u0ECA" +
		"\u0ECC\x03\x02\x02\x02\u0ECB\u0EC5\x03\x02\x02\x02\u0ECB\u0ECC\x03\x02" +
		"\x02\x02\u0ECC\u0ED3\x03\x02\x02\x02\u0ECD\u0ECF\x07\xB4\x02\x02\u0ECE" +
		"\u0ED0\x05\x04\x03\x02\u0ECF\u0ECE\x03\x02\x02\x02\u0ED0\u0ED1\x03\x02" +
		"\x02\x02\u0ED1\u0ECF\x03\x02\x02\x02\u0ED1\u0ED2\x03\x02\x02\x02\u0ED2" +
		"\u0ED4\x03\x02\x02\x02\u0ED3\u0ECD\x03\x02\x02\x02\u0ED3\u0ED4\x03\x02" +
		"\x02\x02\u0ED4\u0ED5\x03\x02\x02\x02\u0ED5\u0ED6\x05\u012E\x98\x02\u0ED6" +
		"\u012D\x03\x02\x02\x02\u0ED7\u0ED8\x07\u0173\x02\x02\u0ED8\u012F\x03\x02" +
		"\x02\x02\u0ED9\u0EDA\x07\u0173\x02\x02\u0EDA\u0131\x03\x02\x02\x02\u0EDB" +
		"\u0EDC\x07\u0171\x02\x02\u0EDC\u0133\x03\x02\x02\x02\u0EDD\u0EDE\x07\u0173" +
		"\x02\x02\u0EDE\u0135\x03\x02\x02\x02\u0EDF\u0EE0\t\x19\x02\x02\u0EE0\u0137" +
		"\x03\x02\x02\x02\u0EE1\u0EE2\x07\u0173\x02\x02\u0EE2\u0139\x03\x02\x02" +
		"\x02\u0EE3\u0EE4\t\x1A\x02\x02\u0EE4\u013B\x03\x02\x02\x02\u0EE5\u0EE6" +
		"\x07\u0173\x02\x02\u0EE6\u013D\x03\x02\x02\x02\u0EE7\u0EEB\x07\x8F\x02" +
		"\x02\u0EE8\u0EEA\x05\x04\x03\x02\u0EE9\u0EE8\x03\x02\x02\x02\u0EEA\u0EED" +
		"\x03\x02\x02\x02\u0EEB\u0EE9\x03\x02\x02\x02\u0EEB\u0EEC\x03\x02\x02\x02" +
		"\u0EEC\u0EEE\x03\x02\x02\x02\u0EED\u0EEB\x03\x02\x02\x02\u0EEE\u0EF2\x07" +
		"\u016D\x02\x02\u0EEF\u0EF1\x05\x04\x03\x02\u0EF0\u0EEF\x03\x02\x02\x02" +
		"\u0EF1\u0EF4\x03\x02\x02\x02\u0EF2\u0EF0\x03\x02\x02\x02\u0EF2\u0EF3\x03" +
		"\x02\x02\x02\u0EF3\u0EFE\x03\x02\x02\x02\u0EF4\u0EF2\x03\x02\x02\x02\u0EF5" +
		"\u0EF9\x05\u0140\xA1\x02\u0EF6\u0EF8\x05\x04\x03\x02\u0EF7\u0EF6\x03\x02" +
		"\x02\x02\u0EF8\u0EFB\x03\x02\x02\x02\u0EF9\u0EF7\x03\x02\x02\x02\u0EF9" +
		"\u0EFA\x03\x02\x02\x02\u0EFA\u0EFD\x03\x02\x02\x02\u0EFB\u0EF9\x03\x02" +
		"\x02\x02\u0EFC\u0EF5\x03\x02\x02\x02\u0EFD\u0F00\x03\x02\x02\x02\u0EFE" +
		"\u0EFC\x03\x02\x02\x02\u0EFE\u0EFF\x03\x02\x02\x02\u0EFF\u013F\x03\x02" +
		"\x02\x02\u0F00\u0EFE\x03\x02\x02\x02\u0F01\u0F03\x07\u0115\x02\x02\u0F02" +
		"\u0F04\x05\x04\x03\x02\u0F03\u0F02\x03\x02\x02\x02\u0F04\u0F05\x03\x02" +
		"\x02\x02\u0F05\u0F03\x03\x02\x02\x02\u0F05\u0F06\x03\x02\x02\x02\u0F06" +
		"\u0F0D\x03\x02\x02\x02\u0F07\u0F09\x07\xDB\x02\x02\u0F08\u0F0A\x05\x04" +
		"\x03\x02\u0F09\u0F08\x03\x02\x02\x02\u0F0A\u0F0B\x03\x02\x02\x02\u0F0B" +
		"\u0F09\x03\x02\x02\x02\u0F0B\u0F0C\x03\x02\x02\x02\u0F0C\u0F0E\x03\x02" +
		"\x02\x02\u0F0D\u0F07\x03\x02\x02\x02\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E" +
		"\u0F0F\x03\x02\x02\x02\u0F0F\u0F13\x05\u016A\xB6\x02\u0F10\u0F12\x05\x04" +
		"\x03\x02\u0F11\u0F10\x03\x02\x02\x02\u0F12\u0F15\x03\x02\x02\x02\u0F13" +
		"\u0F11\x03\x02\x02\x02\u0F13\u0F14\x03\x02\x02\x02\u0F14\u0F16\x03\x02" +
		"\x02\x02\u0F15\u0F13\x03\x02\x02\x02\u0F16\u0F1A\x05\u0164\xB3\x02\u0F17" +
		"\u0F19\x05\x04\x03\x02\u0F18\u0F17\x03\x02\x02\x02\u0F19\u0F1C\x03\x02" +
		"\x02\x02\u0F1A\u0F18\x03\x02\x02\x02\u0F1A\u0F1B\x03\x02\x02\x02\u0F1B" +
		"\u0F24\x03\x02\x02\x02\u0F1C\u0F1A\x03\x02\x02\x02\u0F1D\u0F21\x05\u014C" +
		"\xA7\x02\u0F1E\u0F20\x05\x04\x03\x02\u0F1F\u0F1E\x03\x02\x02\x02\u0F20" +
		"\u0F23\x03\x02\x02\x02\u0F21\u0F1F\x03\x02\x02\x02\u0F21\u0F22\x03\x02" +
		"\x02\x02\u0F22\u0F25\x03\x02\x02\x02\u0F23\u0F21\x03\x02\x02\x02\u0F24" +
		"\u0F1D\x03\x02\x02\x02\u0F24\u0F25\x03\x02\x02\x02\u0F25\u0F2D\x03\x02" +
		"\x02\x02\u0F26\u0F2A\x05\u0156\xAC\x02\u0F27\u0F29\x05\x04\x03\x02\u0F28" +
		"\u0F27\x03\x02\x02\x02\u0F29\u0F2C\x03\x02\x02\x02\u0F2A\u0F28\x03\x02" +
		"\x02\x02\u0F2A\u0F2B\x03\x02\x02\x02\u0F2B\u0F2E\x03\x02\x02\x02\u0F2C" +
		"\u0F2A\x03\x02\x02\x02\u0F2D\u0F26\x03\x02\x02\x02\u0F2D\u0F2E\x03\x02" +
		"\x02\x02\u0F2E\u0F36\x03\x02\x02\x02\u0F2F\u0F33\x05\u015E\xB0\x02\u0F30" +
		"\u0F32\x05\x04\x03\x02\u0F31\u0F30\x03\x02\x02\x02\u0F32\u0F35\x03\x02" +
		"\x02\x02\u0F33\u0F31\x03\x02\x02\x02\u0F33\u0F34\x03\x02\x02\x02\u0F34" +
		"\u0F37\x03\x02\x02\x02\u0F35\u0F33\x03\x02\x02\x02\u0F36\u0F2F\x03\x02" +
		"\x02\x02\u0F36\u0F37\x03\x02\x02\x02\u0F37\u0F3F\x03\x02\x02\x02\u0F38" +
		"\u0F3C\x05\u015C\xAF\x02\u0F39\u0F3B\x05\x04\x03\x02\u0F3A\u0F39\x03\x02" +
		"\x02\x02\u0F3B\u0F3E\x03\x02\x02\x02\u0F3C\u0F3A\x03\x02\x02\x02\u0F3C" +
		"\u0F3D\x03\x02\x02\x02\u0F3D\u0F40\x03\x02\x02\x02\u0F3E\u0F3C\x03\x02" +
		"\x02\x02\u0F3F\u0F38\x03\x02\x02\x02\u0F3F\u0F40\x03\x02\x02\x02\u0F40" +
		"\u0F48\x03\x02\x02\x02\u0F41\u0F45\x05\u0152\xAA\x02\u0F42\u0F44\x05\x04" +
		"\x03\x02\u0F43\u0F42\x03\x02\x02\x02\u0F44\u0F47\x03\x02\x02\x02\u0F45" +
		"\u0F43\x03\x02\x02\x02\u0F45\u0F46\x03\x02\x02\x02\u0F46\u0F49\x03\x02" +
		"\x02\x02\u0F47\u0F45\x03\x02\x02\x02\u0F48\u0F41\x03\x02\x02\x02\u0F48" +
		"\u0F49\x03\x02\x02\x02\u0F49\u0F51\x03\x02\x02\x02\u0F4A\u0F4E\x05\u0150" +
		"\xA9\x02\u0F4B\u0F4D\x05\x04\x03\x02\u0F4C\u0F4B\x03\x02\x02\x02\u0F4D" +
		"\u0F50\x03\x02\x02\x02\u0F4E\u0F4C\x03\x02\x02\x02\u0F4E\u0F4F\x03\x02" +
		"\x02\x02\u0F4F\u0F52\x03\x02\x02\x02\u0F50\u0F4E\x03\x02\x02\x02\u0F51" +
		"\u0F4A\x03\x02\x02\x02\u0F51\u0F52\x03\x02\x02\x02\u0F52\u0F5A\x03\x02" +
		"\x02\x02\u0F53\u0F57\x05\u014A\xA6\x02\u0F54\u0F56\x05\x04\x03\x02\u0F55" +
		"\u0F54\x03\x02\x02\x02\u0F56\u0F59\x03\x02\x02\x02\u0F57\u0F55\x03\x02" +
		"\x02\x02\u0F57\u0F58\x03\x02\x02\x02\u0F58\u0F5B\x03\x02\x02\x02\u0F59" +
		"\u0F57\x03\x02\x02\x02\u0F5A\u0F53\x03\x02\x02\x02\u0F5A\u0F5B\x03\x02" +
		"\x02\x02\u0F5B\u0F65\x03\x02\x02\x02\u0F5C\u0F60\x05\u0146\xA4\x02\u0F5D" +
		"\u0F5F\x05\x04\x03\x02\u0F5E\u0F5D\x03\x02\x02\x02\u0F5F\u0F62\x03\x02" +
		"\x02\x02\u0F60\u0F5E\x03\x02\x02\x02\u0F60\u0F61\x03\x02\x02\x02\u0F61" +
		"\u0F64\x03\x02\x02\x02\u0F62\u0F60\x03\x02\x02\x02\u0F63\u0F5C\x03\x02" +
		"\x02\x02\u0F64\u0F67\x03\x02\x02\x02\u0F65\u0F63\x03\x02\x02\x02\u0F65" +
		"\u0F66\x03\x02\x02\x02\u0F66\u0F6F\x03\x02\x02\x02\u0F67\u0F65\x03\x02" +
		"\x02\x02\u0F68\u0F6C\x05\u0158\xAD\x02\u0F69\u0F6B\x05\x04\x03\x02\u0F6A" +
		"\u0F69\x03\x02\x02\x02\u0F6B\u0F6E\x03\x02\x02\x02\u0F6C\u0F6A\x03\x02" +
		"\x02\x02\u0F6C\u0F6D\x03\x02\x02\x02\u0F6D\u0F70\x03\x02\x02\x02\u0F6E" +
		"\u0F6C\x03\x02\x02\x02\u0F6F\u0F68\x03\x02\x02\x02\u0F6F\u0F70\x03\x02" +
		"\x02\x02\u0F70\u0F78\x03\x02\x02\x02\u0F71\u0F75\x05\u0142\xA2\x02\u0F72" +
		"\u0F74\x05\x04\x03\x02\u0F73\u0F72\x03\x02\x02\x02\u0F74\u0F77\x03\x02" +
		"\x02\x02\u0F75\u0F73\x03\x02\x02\x02\u0F75\u0F76\x03\x02\x02\x02\u0F76" +
		"\u0F79\x03\x02\x02\x02\u0F77\u0F75\x03\x02\x02\x02\u0F78\u0F71\x03\x02" +
		"\x02\x02\u0F78\u0F79\x03\x02\x02\x02\u0F79\u0F7A\x03\x02\x02\x02\u0F7A" +
		"\u0F7B\x07\u016D\x02\x02\u0F7B\u0141\x03\x02\x02\x02\u0F7C\u0F7E\x07\x8E" +
		"\x02\x02\u0F7D\u0F7F\x05\x04\x03\x02\u0F7E\u0F7D\x03\x02\x02\x02\u0F7F" +
		"\u0F80\x03\x02\x02\x02\u0F80\u0F7E\x03\x02\x02\x02\u0F80\u0F81\x03\x02" +
		"\x02\x02\u0F81\u0F83\x03\x02\x02\x02\u0F82\u0F7C\x03\x02\x02\x02\u0F82" +
		"\u0F83\x03\x02\x02\x02\u0F83\u0F84\x03\x02\x02\x02\u0F84\u0F86\x07\u0126" +
		"\x02\x02\u0F85\u0F87\x05\x04\x03\x02\u0F86\u0F85\x03\x02\x02\x02\u0F87" +
		"\u0F88\x03\x02\x02\x02\u0F88\u0F86\x03\x02\x02\x02\u0F88\u0F89\x03\x02" +
		"\x02\x02\u0F89\u0F90\x03\x02\x02\x02\u0F8A\u0F8C\x07\xB4\x02\x02\u0F8B" +
		"\u0F8D\x05\x04\x03\x02\u0F8C\u0F8B\x03\x02\x02\x02\u0F8D\u0F8E\x03\x02" +
		"\x02\x02\u0F8E\u0F8C\x03\x02\x02\x02\u0F8E\u0F8F\x03\x02\x02\x02\u0F8F" +
		"\u0F91\x03\x02\x02\x02\u0F90\u0F8A\x03\x02\x02\x02\u0F90\u0F91\x03\x02" +
		"\x02\x02\u0F91\u0F92\x03\x02\x02\x02\u0F92\u0F93\x05\u0144\xA3\x02\u0F93" +
		"\u0143\x03\x02\x02\x02\u0F94\u0F95\x05\u0100\x81\x02\u0F95\u0145\x03\x02" +
		"\x02\x02\u0F96\u0F98\x07\v\x02\x02\u0F97\u0F99\x05\x04\x03\x02\u0F98\u0F97" +
		"\x03\x02\x02\x02\u0F99\u0F9A\x03\x02\x02\x02\u0F9A\u0F98\x03\x02\x02\x02" +
		"\u0F9A\u0F9B\x03\x02\x02\x02\u0F9B\u0F9D\x03\x02\x02\x02\u0F9C\u0F96\x03" +
		"\x02\x02\x02\u0F9C\u0F9D\x03\x02\x02\x02\u0F9D\u0F9E\x03\x02\x02\x02\u0F9E" +
		"\u0FA0\x07\xF6\x02\x02\u0F9F\u0FA1\x05\x04\x03\x02\u0FA0\u0F9F\x03\x02" +
		"\x02\x02\u0FA1\u0FA2\x03\x02\x02\x02\u0FA2\u0FA0\x03\x02\x02\x02\u0FA2" +
		"\u0FA3\x03\x02\x02\x02\u0FA3\u0FAA\x03\x02\x02\x02\u0FA4\u0FA6\x07\xB8" +
		"\x02\x02\u0FA5\u0FA7\x05\x04\x03\x02\u0FA6\u0FA5\x03\x02\x02\x02\u0FA7" +
		"\u0FA8\x03\x02\x02\x02\u0FA8\u0FA6\x03\x02\x02\x02\u0FA8\u0FA9\x03\x02" +
		"\x02\x02\u0FA9\u0FAB\x03\x02\x02\x02\u0FAA\u0FA4\x03\x02\x02\x02\u0FAA" +
		"\u0FAB\x03\x02\x02\x02\u0FAB\u0FB2\x03\x02\x02\x02\u0FAC\u0FAE\x07\xB4" +
		"\x02\x02\u0FAD\u0FAF\x05\x04\x03\x02\u0FAE\u0FAD\x03\x02\x02\x02\u0FAF" +
		"\u0FB0\x03\x02\x02\x02\u0FB0\u0FAE\x03\x02\x02\x02\u0FB0\u0FB1\x03\x02" +
		"\x02\x02\u0FB1\u0FB3\x03\x02\x02\x02\u0FB2\u0FAC\x03\x02\x02\x02\u0FB2" +
		"\u0FB3\x03\x02\x02\x02\u0FB3\u0FB4\x03\x02\x02\x02\u0FB4\u0FC4\x05\u0148" +
		"\xA5\x02\u0FB5\u0FB7\x05\x04\x03\x02\u0FB6\u0FB5\x03\x02\x02\x02\u0FB7" +
		"\u0FB8\x03\x02\x02\x02\u0FB8\u0FB6\x03\x02\x02\x02\u0FB8\u0FB9\x03\x02" +
		"\x02\x02\u0FB9\u0FC0\x03\x02\x02\x02\u0FBA\u0FBC\x07\u0150\x02\x02\u0FBB" +
		"\u0FBD\x05\x04\x03\x02\u0FBC\u0FBB\x03\x02\x02\x02\u0FBD\u0FBE\x03\x02" +
		"\x02\x02\u0FBE\u0FBC\x03\x02\x02\x02\u0FBE\u0FBF\x03\x02\x02\x02\u0FBF" +
		"\u0FC1\x03\x02\x02\x02\u0FC0\u0FBA\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02" +
		"\x02\x02\u0FC1\u0FC2\x03\x02\x02\x02\u0FC2\u0FC3\x07g\x02\x02\u0FC3\u0FC5" +
		"\x03\x02\x02\x02\u0FC4\u0FB6\x03\x02\x02\x02\u0FC4\u0FC5\x03\x02\x02\x02" +
		"\u0FC5\u0FCD\x03\x02\x02\x02\u0FC6\u0FC8\x05\x04\x03\x02\u0FC7\u0FC6\x03" +
		"\x02\x02\x02\u0FC8\u0FC9\x03\x02\x02\x02\u0FC9\u0FC7\x03\x02\x02\x02\u0FC9" +
		"\u0FCA\x03\x02\x02\x02\u0FCA\u0FCB\x03\x02\x02\x02\u0FCB\u0FCC\t\b\x02" +
		"\x02\u0FCC\u0FCE\x03\x02\x02\x02\u0FCD\u0FC7\x03\x02\x02\x02\u0FCD\u0FCE" +
		"\x03\x02\x02\x02\u0FCE\u0147\x03\x02\x02\x02\u0FCF\u0FEC\x05\u0100\x81" +
		"\x02\u0FD0\u0FD4\x07\u0173\x02\x02\u0FD1\u0FD3\x05\x04\x03\x02\u0FD2\u0FD1" +
		"\x03\x02\x02\x02\u0FD3\u0FD6\x03\x02\x02\x02\u0FD4\u0FD2\x03\x02\x02\x02" +
		"\u0FD4\u0FD5\x03\x02\x02\x02\u0FD5\u0FD7\x03\x02\x02\x02\u0FD6\u0FD4\x03" +
		"\x02\x02\x02\u0FD7\u0FDB\x07\u0162\x02\x02\u0FD8\u0FDA\x05\x04\x03\x02" +
		"\u0FD9\u0FD8\x03\x02\x02\x02\u0FDA\u0FDD\x03\x02\x02\x02\u0FDB\u0FD9\x03" +
		"\x02\x02\x02\u0FDB\u0FDC\x03\x02\x02\x02\u0FDC\u0FDE\x03\x02\x02\x02\u0FDD" +
		"\u0FDB\x03\x02\x02\x02\u0FDE\u0FE8\x05\u0100\x81\x02\u0FDF\u0FE1\x05\x04" +
		"\x03\x02\u0FE0\u0FDF\x03\x02\x02\x02\u0FE1\u0FE4\x03\x02\x02\x02\u0FE2" +
		"\u0FE0\x03\x02\x02\x02\u0FE2\u0FE3\x03\x02\x02\x02\u0FE3\u0FE5\x03\x02" +
		"\x02\x02\u0FE4\u0FE2\x03\x02\x02\x02\u0FE5\u0FE7\x05\u0100\x81\x02\u0FE6" +
		"\u0FE2\x03\x02\x02\x02\u0FE7\u0FEA\x03\x02\x02\x02\u0FE8\u0FE6\x03\x02" +
		"\x02\x02\u0FE8\u0FE9\x03\x02\x02\x02\u0FE9\u0FEC\x03\x02\x02\x02\u0FEA" +
		"\u0FE8\x03\x02\x02\x02\u0FEB\u0FCF\x03\x02\x02\x02\u0FEB\u0FD0\x03\x02" +
		"\x02\x02\u0FEC\u0149\x03\x02\x02\x02\u0FED\u0FEF\x07\x04\x02\x02\u0FEE" +
		"\u0FF0\x05\x04\x03\x02\u0FEF\u0FEE\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02" +
		"\x02\x02\u0FF1\u0FEF\x03\x02\x02\x02\u0FF1\u0FF2\x03\x02\x02\x02\u0FF2" +
		"\u0FF9\x03\x02\x02\x02\u0FF3\u0FF5\x07\xCB\x02\x02\u0FF4\u0FF6\x05\x04" +
		"\x03\x02\u0FF5\u0FF4\x03\x02\x02\x02\u0FF6\u0FF7\x03\x02\x02\x02\u0FF7" +
		"\u0FF5\x03\x02\x02\x02\u0FF7\u0FF8\x03\x02\x02\x02\u0FF8\u0FFA\x03\x02" +
		"\x02\x02\u0FF9\u0FF3\x03\x02\x02\x02\u0FF9\u0FFA\x03\x02\x02\x02\u0FFA" +
		"\u1001\x03\x02\x02\x02\u0FFB\u0FFD\x07\xB4\x02\x02\u0FFC\u0FFE\x05\x04" +
		"\x03\x02\u0FFD\u0FFC\x03\x02\x02\x02\u0FFE\u0FFF\x03\x02\x02\x02\u0FFF" +
		"\u0FFD\x03\x02\x02\x02\u0FFF\u1000\x03\x02\x02\x02\u1000\u1002\x03\x02" +
		"\x02\x02\u1001\u0FFB\x03\x02\x02\x02\u1001\u1002\x03\x02\x02\x02\u1002" +
		"\u1004\x03\x02\x02\x02\u1003\u0FED\x03\x02\x02\x02\u1003\u1004\x03\x02" +
		"\x02\x02\u1004\u1005\x03\x02\x02\x02\u1005\u1023\t\x1B\x02\x02\u1006\u1008" +
		"\x05\x04\x03\x02\u1007\u1006\x03\x02\x02\x02\u1008\u1009\x03\x02\x02\x02" +
		"\u1009\u1007\x03\x02\x02\x02\u1009\u100A\x03\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\x02\u100A\u100B\x03\x02\x02\x02\u100B\u100D\x07\xFB\x02\x02\u100C" +
		"\u100E\x05\x04\x03\x02\u100D\u100C\x03\x02\x02\x02\u100E\u100F\x03\x02" +
		"\x02\x02\u100F\u100D\x03\x02\x02\x02\u100F\u1010\x03\x02\x02\x02\u1010" +
		"\u1017\x03\x02\x02\x02\u1011\u1013\x07\xB8\x02\x02\u1012\u1014\x05\x04" +
		"\x03\x02\u1013\u1012\x03\x02\x02\x02\u1014\u1015\x03\x02\x02\x02\u1015" +
		"\u1013\x03\x02\x02\x02\u1015\u1016\x03\x02\x02\x02\u1016\u1018\x03\x02" +
		"\x02\x02\u1017\u1011\x03\x02\x02\x02\u1017\u1018\x03\x02\x02\x02\u1018" +
		"\u101F\x03\x02\x02\x02\u1019\u101B\x07\xB4\x02\x02\u101A\u101C\x05\x04" +
		"\x03\x02\u101B\u101A\x03\x02\x02\x02\u101C\u101D\x03\x02\x02\x02\u101D" +
		"\u101B\x03\x02\x02\x02\u101D\u101E\x03\x02\x02\x02\u101E\u1020\x03\x02" +
		"\x02\x02\u101F\u1019\x03\x02\x02\x02\u101F\u1020\x03\x02\x02\x02\u1020" +
		"\u1021\x03\x02\x02\x02\u1021\u1022\x05\u0100\x81\x02\u1022\u1024\x03\x02" +
		"\x02\x02\u1023\u1007\x03\x02\x02\x02\u1023\u1024\x03\x02\x02\x02\u1024" +
		"\u014B\x03\x02\x02\x02\u1025\u1027\x07\u0104\x02\x02\u1026\u1028\x05\x04" +
		"\x03\x02\u1027\u1026\x03\x02\x02\x02\u1028\u1029\x03\x02\x02\x02\u1029" +
		"\u1027\x03\x02\x02\x02\u1029\u102A\x03\x02\x02\x02\u102A\u102B\x03\x02" +
		"\x02\x02\u102B\u1033\x05\u014E\xA8\x02\u102C\u102E\x05\x04\x03\x02\u102D" +
		"\u102C\x03\x02\x02\x02\u102E\u102F\x03\x02\x02\x02\u102F\u102D\x03\x02" +
		"\x02\x02\u102F\u1030\x03\x02\x02\x02\u1030\u1031\x03\x02\x02\x02\u1031" +
		"\u1032\t\x1C\x02\x02\u1032\u1034\x03\x02\x02\x02\u1033\u102D\x03\x02\x02" +
		"\x02\u1033\u1034\x03\x02\x02\x02\u1034\u014D\x03\x02\x02\x02\u1035\u1036" +
		"\x07\u0171\x02\x02\u1036\u014F\x03\x02\x02\x02\u1037\u1039\x07\xF6\x02" +
		"\x02\u1038\u103A\x05\x04\x03\x02\u1039\u1038\x03\x02\x02\x02\u103A\u103B" +
		"\x03\x02\x02\x02\u103B\u1039\x03\x02\x02\x02\u103B\u103C\x03\x02\x02\x02" +
		"\u103C\u103D\x03\x02\x02\x02\u103D\u103F\x07^\x02\x02\u103E\u1040\x05" +
		"\x04\x03\x02\u103F\u103E\x03\x02\x02\x02\u1040\u1041\x03\x02\x02\x02\u1041" +
		"\u103F\x03\x02\x02\x02\u1041\u1042\x03\x02\x02\x02\u1042\u1049\x03\x02" +
		"\x02\x02\u1043\u1045\x07\xB4\x02\x02\u1044\u1046\x05\x04\x03\x02\u1045" +
		"\u1044\x03\x02\x02\x02\u1046\u1047\x03\x02\x02\x02\u1047\u1045\x03\x02" +
		"\x02\x02\u1047\u1048\x03\x02\x02\x02\u1048\u104A\x03\x02\x02\x02\u1049" +
		"\u1043\x03\x02\x02\x02\u1049\u104A\x03\x02\x02\x02\u104A\u104B\x03\x02" +
		"\x02\x02\u104B\u104C\x07\u0123\x02\x02\u104C\u0151\x03\x02\x02\x02\u104D" +
		"\u104F\x07\xE0\x02\x02\u104E\u1050\x05\x04\x03\x02\u104F\u104E\x03\x02" +
		"\x02\x02\u1050\u1051\x03\x02\x02\x02\u1051\u104F\x03\x02\x02\x02\u1051" +
		"\u1052\x03\x02\x02\x02\u1052\u1059\x03\x02\x02\x02\u1053\u1055\x07,\x02" +
		"\x02\u1054\u1056\x05\x04\x03\x02\u1055\u1054\x03\x02\x02\x02\u1056\u1057" +
		"\x03\x02\x02\x02\u1057\u1055\x03\x02\x02\x02\u1057\u1058\x03\x02\x02\x02" +
		"\u1058\u105A\x03\x02\x02\x02\u1059\u1053\x03\x02\x02\x02\u1059\u105A\x03" +
		"\x02\x02\x02\u105A\u1061\x03\x02\x02\x02\u105B\u105D\x07\xB4\x02\x02\u105C" +
		"\u105E\x05\x04\x03\x02\u105D\u105C\x03\x02\x02\x02\u105E\u105F\x03\x02" +
		"\x02\x02\u105F\u105D\x03\x02\x02\x02\u105F\u1060\x03\x02\x02\x02\u1060" +
		"\u1062\x03\x02\x02\x02\u1061\u105B\x03\x02\x02\x02\u1061\u1062\x03\x02" +
		"\x02\x02\u1062\u1063\x03\x02\x02\x02\u1063\u1064\x05\u0154\xAB\x02\u1064" +
		"\u0153\x03\x02\x02\x02\u1065\u1066\x07\u0170\x02\x02\u1066\u0155\x03\x02" +
		"\x02\x02\u1067\u1069\x07\xDD\x02\x02\u1068\u106A\x05\x04\x03\x02\u1069" +
		"\u1068\x03\x02\x02\x02\u106A\u106B\x03\x02\x02\x02\u106B\u1069\x03\x02" +
		"\x02\x02\u106B\u106C\x03\x02\x02\x02\u106C\u106D\x03\x02\x02\x02\u106D" +
		"\u106F\x07\xB4\x02\x02\u106E\u1070\x05\x04\x03\x02\u106F\u106E\x03\x02" +
		"\x02\x02\u1070\u1071\x03\x02\x02\x02\u1071\u106F\x03\x02\x02\x02\u1071" +
		"\u1072\x03\x02\x02\x02\u1072\u1074\x03\x02\x02\x02\u1073\u1067\x03\x02" +
		"\x02\x02\u1073\u1074\x03\x02\x02\x02\u1074\u1080\x03\x02\x02\x02\u1075" +
		"\u1081\x07\u0118\x02\x02\u1076\u1078\x07\xC0\x02\x02\u1077\u1079\x05\x04" +
		"\x03\x02\u1078\u1077\x03\x02\x02\x02\u1079\u107A\x03\x02\x02\x02\u107A" +
		"\u1078\x03\x02\x02\x02\u107A\u107B\x03\x02\x02\x02\u107B\u107C\x03\x02" +
		"\x02\x02\u107C\u107D\x07\u0118\x02\x02\u107D\u1081\x03\x02\x02\x02\u107E" +
		"\u1081\x07\xFB\x02\x02\u107F\u1081\x07\xAB\x02\x02\u1080\u1075\x03\x02" +
		"\x02\x02\u1080\u1076\x03\x02\x02\x02\u1080\u107E\x03\x02\x02\x02\u1080" +
		"\u107F\x03\x02\x02\x02\u1081\u0157\x03\x02\x02\x02\u1082\u1084\x07\xC4" +
		"\x02\x02\u1083\u1085\x05\x04\x03\x02\u1084\u1083\x03\x02\x02\x02\u1085" +
		"\u1086\x03\x02\x02\x02\u1086\u1084\x03\x02\x02\x02\u1086\u1087\x03\x02" +
		"\x02\x02\u1087\u108E\x03\x02\x02\x02\u1088\u108A\x07\xCB\x02\x02\u1089" +
		"\u108B\x05\x04\x03\x02\u108A\u1089\x03\x02\x02\x02\u108B\u108C\x03\x02" +
		"\x02\x02\u108C\u108A\x03\x02\x02\x02\u108C\u108D\x03\x02\x02\x02\u108D" +
		"\u108F\x03\x02\x02\x02\u108E\u1088\x03\x02\x02\x02\u108E\u108F\x03\x02" +
		"\x02\x02\u108F\u1096\x03\x02\x02\x02\u1090\u1092\x07\xB4\x02\x02\u1091" +
		"\u1093\x05\x04\x03\x02\u1092\u1091\x03\x02\x02\x02\u1093\u1094\x03\x02" +
		"\x02\x02\u1094\u1092\x03\x02\x02\x02\u1094\u1095\x03\x02\x02\x02\u1095" +
		"\u1097\x03\x02\x02\x02\u1096\u1090\x03\x02\x02\x02\u1096\u1097\x03\x02" +
		"\x02\x02\u1097\u1098\x03\x02\x02\x02\u1098\u1099\x05\u015A\xAE\x02\u1099" +
		"\u0159\x03\x02\x02\x02\u109A\u109C\x07\xC7\x02\x02\u109B\u109D\x05\x04" +
		"\x03\x02\u109C\u109B\x03\x02\x02\x02\u109D\u109E\x03\x02\x02\x02\u109E" +
		"\u109C\x03\x02\x02\x02\u109E\u109F\x03\x02\x02\x02\u109F\u10A6\x03\x02" +
		"\x02\x02\u10A0\u10A2\x07\u0150\x02\x02\u10A1\u10A3\x05\x04\x03\x02\u10A2" +
		"\u10A1\x03\x02\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4\u10A2\x03\x02" +
		"\x02\x02\u10A4\u10A5\x03\x02\x02\x02\u10A5\u10A7\x03\x02\x02\x02\u10A6" +
		"\u10A0\x03\x02\x02\x02\u10A6\u10A7\x03\x02\x02\x02\u10A7\u10A8\x03\x02" +
		"\x02\x02\u10A8\u10AA\x07\xC4\x02\x02\u10A9\u10AB\x05\x04\x03\x02\u10AA" +
		"\u10A9\x03\x02\x02\x02\u10AB\u10AC\x03\x02\x02\x02\u10AC\u10AA\x03\x02" +
		"\x02\x02\u10AC\u10AD\x03\x02\x02\x02\u10AD\u10AE\x03\x02\x02\x02\u10AE" +
		"\u10B0\x07\xD9\x02\x02\u10AF\u10B1\x05\x04\x03\x02\u10B0\u10AF\x03\x02" +
		"\x02\x02\u10B1\u10B2\x03\x02\x02\x02\u10B2\u10B0\x03\x02\x02\x02\u10B2" +
		"\u10B3\x03\x02\x02\x02\u10B3\u10B4\x03\x02\x02\x02\u10B4\u10B6\x07\xCE" +
		"\x02\x02\u10B5\u10B7\x05\x04\x03\x02\u10B6\u10B5\x03\x02\x02\x02\u10B7" +
		"\u10B8\x03\x02\x02\x02\u10B8\u10B6\x03\x02\x02\x02\u10B8\u10B9\x03\x02" +
		"\x02\x02\u10B9\u10BA\x03\x02\x02\x02\u10BA\u10BB\x07\xF7\x02\x02\u10BB" +
		"\u10DF\x03\x02\x02\x02\u10BC\u10DB\x07\x19\x02\x02\u10BD\u10BF\x05\x04" +
		"\x03\x02\u10BE\u10BD\x03\x02\x02\x02\u10BF\u10C0\x03\x02\x02\x02\u10C0" +
		"\u10BE\x03\x02\x02\x02\u10C0\u10C1\x03\x02\x02\x02\u10C1\u10C8\x03\x02" +
		"\x02\x02\u10C2\u10C4\x07\u0150\x02\x02\u10C3\u10C5\x05\x04\x03\x02\u10C4" +
		"\u10C3\x03\x02\x02\x02\u10C5\u10C6\x03\x02\x02\x02\u10C6\u10C4\x03\x02" +
		"\x02\x02\u10C6\u10C7\x03\x02\x02\x02\u10C7\u10C9\x03\x02\x02\x02\u10C8" +
		"\u10C2\x03\x02\x02\x02\u10C8\u10C9\x03\x02\x02\x02\u10C9\u10D9\x03\x02" +
		"\x02\x02\u10CA\u10CC\x07\xC4\x02\x02\u10CB\u10CD\x05\x04\x03\x02\u10CC" +
		"\u10CB\x03\x02\x02\x02\u10CD\u10CE\x03\x02\x02\x02\u10CE\u10CC\x03\x02" +
		"\x02\x02\u10CE\u10CF\x03\x02\x02\x02\u10CF\u10D0\x03\x02\x02\x02\u10D0" +
		"\u10D2\x07\xD9\x02\x02\u10D1\u10D3\x05\x04\x03\x02\u10D2\u10D1\x03\x02" +
		"\x02\x02\u10D3\u10D4\x03\x02\x02\x02\u10D4\u10D2\x03\x02\x02\x02\u10D4" +
		"\u10D5\x03\x02\x02\x02\u10D5\u10D6\x03\x02\x02\x02\u10D6\u10D7\x07\xF6" +
		"\x02\x02\u10D7\u10DA\x03\x02\x02\x02\u10D8\u10DA\x07\u010C\x02\x02\u10D9" +
		"\u10CA\x03\x02\x02\x02\u10D9\u10D8\x03\x02\x02\x02\u10DA\u10DC\x03\x02" +
		"\x02\x02\u10DB\u10BE\x03\x02\x02\x02\u10DB\u10DC\x03\x02\x02\x02\u10DC" +
		"\u10DF\x03\x02\x02\x02\u10DD\u10DF\x07\x89\x02\x02\u10DE\u109A\x03\x02" +
		"\x02\x02\u10DE\u10BC\x03\x02\x02\x02\u10DE\u10DD\x03\x02\x02\x02\u10DF" +
		"\u015B\x03\x02\x02\x02\u10E0\u10E2\x072\x02\x02\u10E1\u10E3\x05\x04\x03" +
		"\x02\u10E2\u10E1\x03\x02\x02\x02\u10E3\u10E4\x03\x02\x02\x02\u10E4\u10E2" +
		"\x03\x02\x02\x02\u10E4\u10E5\x03\x02\x02\x02\u10E5\u10EC\x03\x02\x02\x02" +
		"\u10E6\u10E8\x07\xB4\x02\x02\u10E7\u10E9\x05\x04\x03\x02\u10E8\u10E7\x03" +
		"\x02\x02\x02\u10E9\u10EA\x03\x02\x02\x02\u10EA\u10E8\x03\x02\x02\x02\u10EA" +
		"\u10EB\x03\x02\x02\x02\u10EB\u10ED\x03\x02\x02\x02\u10EC\u10E6\x03\x02" +
		"\x02\x02\u10EC\u10ED\x03\x02\x02\x02\u10ED\u10EE\x03\x02\x02\x02\u10EE" +
		"\u10EF\x05\xF6|\x02\u10EF\u015D\x03\x02\x02\x02\u10F0\u10F2\x07#\x02\x02" +
		"\u10F1\u10F3\x05\x04\x03\x02\u10F2\u10F1\x03\x02\x02\x02\u10F3\u10F4\x03" +
		"\x02\x02\x02\u10F4\u10F2\x03\x02\x02\x02\u10F4\u10F5\x03\x02\x02\x02\u10F5" +
		"\u10FC\x03\x02\x02\x02\u10F6\u10F8\x07H\x02\x02\u10F7\u10F9\x05\x04\x03" +
		"\x02\u10F8\u10F7\x03\x02\x02\x02\u10F9\u10FA\x03\x02\x02\x02\u10FA\u10F8" +
		"\x03\x02\x02\x02\u10FA\u10FB\x03\x02\x02\x02\u10FB\u10FD\x03\x02\x02\x02" +
		"\u10FC\u10F6\x03\x02\x02\x02\u10FC\u10FD\x03\x02\x02\x02\u10FD\u110A\x03" +
		"\x02\x02\x02\u10FE\u1100\x05\u0160\xB1\x02\u10FF\u1101\x05\x04\x03\x02" +
		"\u1100\u10FF\x03\x02\x02\x02\u1101\u1102\x03\x02\x02\x02\u1102\u1100\x03" +
		"\x02\x02\x02\u1102\u1103\x03\x02\x02\x02\u1103\u1104\x03\x02\x02\x02\u1104" +
		"\u1106\x07\u013B\x02\x02\u1105\u1107\x05\x04\x03\x02\u1106\u1105\x03\x02" +
		"\x02\x02\u1107\u1108\x03\x02\x02\x02\u1108\u1106\x03\x02\x02\x02\u1108" +
		"\u1109\x03\x02\x02\x02\u1109\u110B\x03\x02\x02\x02\u110A\u10FE\x03\x02" +
		"\x02\x02\u110A\u110B\x03\x02\x02\x02\u110B\u110C\x03\x02\x02\x02\u110C" +
		"\u110E\x05\u0162\xB2\x02\u110D\u110F\x05\x04\x03\x02\u110E\u110D\x03\x02" +
		"\x02\x02\u110F\u1110\x03\x02\x02\x02\u1110\u110E\x03\x02\x02\x02\u1110" +
		"\u1111\x03\x02\x02\x02\u1111\u1112\x03\x02\x02\x02\u1112\u1113\t\x1D\x02" +
		"\x02\u1113\u015F\x03\x02\x02\x02\u1114\u1115\x07\u0171\x02\x02\u1115\u0161" +
		"\x03\x02\x02\x02\u1116\u1117\x07\u0171\x02\x02\u1117\u0163\x03\x02\x02" +
		"\x02\u1118\u111A\x07\x15\x02\x02\u1119\u111B\x05\x04\x03\x02\u111A\u1119" +
		"\x03\x02\x02\x02\u111B\u111C\x03\x02\x02\x02\u111C\u111A\x03\x02\x02\x02" +
		"\u111C\u111D\x03\x02\x02\x02\u111D\u1124\x03\x02\x02\x02\u111E\u1120\x07" +
		"\u013B\x02\x02\u111F\u1121\x05\x04\x03\x02\u1120\u111F\x03\x02\x02\x02" +
		"\u1121\u1122\x03\x02\x02\x02\u1122\u1120\x03\x02\x02\x02\u1122\u1123\x03" +
		"\x02\x02\x02\u1123\u1125\x03\x02\x02\x02\u1124\u111E\x03\x02\x02\x02\u1124" +
		"\u1125\x03\x02\x02\x02\u1125\u1126\x03\x02\x02\x02\u1126\u1127\x05\u0166" +
		"\xB4\x02\u1127\u0165\x03\x02\x02\x02\u1128\u112A\t\x1E\x02\x02\u1129\u112B" +
		"\x05\x04\x03\x02\u112A\u1129\x03\x02\x02\x02\u112B\u112C\x03\x02\x02\x02" +
		"\u112C\u112A\x03\x02\x02\x02\u112C\u112D\x03\x02\x02\x02\u112D\u112F\x03" +
		"\x02\x02\x02\u112E\u1128\x03\x02\x02\x02\u112E\u112F\x03\x02\x02\x02\u112F" +
		"\u1130\x03\x02\x02\x02\u1130\u1144\x05\u0168\xB5\x02\u1131\u1133\x07\xCE" +
		"\x02\x02\u1132\u1134\x05\x04\x03\x02\u1133\u1132\x03\x02\x02\x02\u1134" +
		"\u1135\x03\x02\x02\x02\u1135\u1133\x03\x02\x02\x02\u1135\u1136\x03\x02" +
		"\x02\x02\u1136\u1138\x03\x02\x02\x02\u1137\u1131\x03\x02\x02\x02\u1137" +
		"\u1138\x03\x02\x02\x02\u1138\u1139\x03\x02\x02\x02\u1139\u1141\t\x1F\x02" +
		"\x02\u113A\u113C\x05\x04\x03\x02\u113B\u113A\x03\x02\x02\x02\u113C\u113D" +
		"\x03\x02\x02\x02\u113D\u113B\x03\x02\x02\x02\u113D\u113E\x03\x02\x02\x02" +
		"\u113E\u113F\x03\x02\x02\x02\u113F\u1140\x07\x8E\x02\x02\u1140\u1142\x03" +
		"\x02\x02\x02\u1141\u113B\x03\x02\x02\x02\u1141\u1142\x03\x02\x02\x02\u1142" +
		"\u1144\x03\x02\x02\x02\u1143\u112E\x03\x02\x02\x02\u1143\u1137\x03\x02" +
		"\x02\x02\u1144\u0167\x03\x02\x02\x02\u1145\u114A\x07\u0170\x02\x02\u1146" +
		"\u114A\x05\u0100\x81\x02\u1147\u114A\x07b\x02\x02\u1148\u114A\x07\xEE" +
		"\x02\x02\u1149\u1145\x03\x02\x02\x02\u1149\u1146\x03\x02\x02\x02\u1149" +
		"\u1147\x03\x02\x02\x02\u1149\u1148\x03\x02\x02\x02\u114A\u0169\x03\x02" +
		"\x02\x02\u114B\u114C\x07\u0173\x02\x02\u114C\u016B\x03\x02\x02\x02\u114D" +
		"\u1151\x07\xB5\x02\x02\u114E\u1150\x05\x04\x03\x02\u114F\u114E\x03\x02" +
		"\x02\x02\u1150\u1153\x03\x02\x02\x02\u1151\u114F\x03\x02\x02\x02\u1151" +
		"\u1152\x03\x02\x02\x02\u1152\u1154\x03\x02\x02\x02\u1153\u1151\x03\x02" +
		"\x02\x02\u1154\u1158\x07\u016D\x02\x02\u1155\u1157\x05\x04\x03\x02\u1156" +
		"\u1155\x03\x02\x02\x02\u1157\u115A\x03\x02\x02\x02\u1158\u1156\x03\x02" +
		"\x02\x02\u1158\u1159\x03\x02\x02\x02\u1159\u1192\x03\x02\x02\x02\u115A" +
		"\u1158\x03\x02\x02\x02\u115B\u115F\x05\u0186\xC4\x02\u115C\u115E\x05\x04" +
		"\x03\x02\u115D\u115C\x03\x02\x02\x02\u115E\u1161\x03\x02\x02\x02\u115F" +
		"\u115D\x03\x02\x02\x02\u115F\u1160\x03\x02\x02\x02\u1160\u1163\x03\x02" +
		"\x02\x02\u1161\u115F\x03\x02\x02\x02\u1162\u115B\x03\x02\x02\x02\u1163" +
		"\u1166\x03\x02\x02\x02\u1164\u1162\x03\x02\x02\x02\u1164\u1165\x03\x02" +
		"\x02\x02\u1165\u1170\x03\x02\x02\x02\u1166\u1164\x03\x02\x02\x02\u1167" +
		"\u116B\x05\u0182\xC2\x02\u1168\u116A\x05\x04\x03\x02\u1169\u1168\x03\x02" +
		"\x02\x02\u116A\u116D\x03\x02\x02\x02\u116B\u1169\x03\x02\x02\x02\u116B" +
		"\u116C\x03\x02\x02\x02\u116C\u116F\x03\x02\x02\x02\u116D\u116B\x03\x02" +
		"\x02\x02\u116E\u1167\x03\x02\x02\x02\u116F\u1172\x03\x02\x02\x02\u1170" +
		"\u116E\x03\x02\x02\x02\u1170\u1171\x03\x02\x02\x02\u1171\u117C\x03\x02" +
		"\x02\x02\u1172\u1170\x03\x02\x02\x02\u1173\u1177\x05\u0176\xBC\x02\u1174" +
		"\u1176\x05\x04\x03\x02\u1175\u1174\x03\x02\x02\x02\u1176\u1179\x03\x02" +
		"\x02\x02\u1177\u1175\x03\x02\x02\x02\u1177\u1178\x03\x02\x02\x02\u1178" +
		"\u117B\x03\x02\x02\x02\u1179\u1177\x03\x02\x02\x02\u117A\u1173\x03\x02" +
		"\x02\x02\u117B\u117E\x03\x02\x02\x02\u117C\u117A\x03\x02\x02\x02\u117C" +
		"\u117D\x03\x02\x02\x02\u117D\u1188\x03\x02\x02\x02\u117E\u117C\x03\x02" +
		"\x02\x02\u117F\u1183\x05\u016E\xB8\x02\u1180\u1182\x05\x04\x03\x02\u1181" +
		"\u1180\x03\x02\x02\x02\u1182\u1185\x03\x02\x02\x02\u1183\u1181\x03\x02" +
		"\x02\x02\u1183\u1184\x03\x02\x02\x02\u1184\u1187\x03\x02\x02\x02\u1185" +
		"\u1183\x03\x02\x02\x02\u1186\u117F\x03\x02\x02\x02\u1187\u118A\x03\x02" +
		"\x02\x02\u1188\u1186\x03\x02\x02\x02\u1188\u1189\x03\x02\x02\x02\u1189" +
		"\u118B\x03\x02\x02\x02\u118A\u1188\x03\x02\x02\x02\u118B\u118F\x07\u016D" +
		"\x02\x02\u118C\u118E\x05\x04\x03\x02\u118D\u118C\x03\x02\x02\x02\u118E" +
		"\u1191\x03\x02\x02\x02\u118F\u118D\x03\x02\x02\x02\u118F\u1190\x03\x02" +
		"\x02\x02\u1190\u1193\x03\x02\x02\x02\u1191\u118F\x03\x02\x02\x02\u1192" +
		"\u1164\x03\x02\x02\x02\u1192\u1193\x03\x02\x02\x02\u1193\u016D\x03\x02" +
		"\x02\x02\u1194\u1196\x07\xCE\x02\x02\u1195\u1197\x05\x04\x03\x02\u1196" +
		"\u1195\x03\x02\x02\x02\u1197\u1198\x03\x02\x02\x02\u1198\u1196\x03\x02" +
		"\x02\x02\u1198\u1199\x03\x02\x02\x02\u1199\u119A\x03\x02\x02\x02\u119A" +
		"\u119C\x07\x8E\x02\x02\u119B\u119D\x05\x04\x03\x02\u119C\u119B\x03\x02" +
		"\x02\x02\u119D\u119E\x03\x02\x02\x02\u119E\u119C\x03\x02\x02\x02\u119E" +
		"\u119F\x03\x02\x02\x02\u119F\u11A6\x03\x02\x02\x02\u11A0\u11A2\x07\u0135" +
		"\x02\x02\u11A1\u11A3\x05\x04\x03\x02\u11A2\u11A1\x03\x02\x02\x02\u11A3" +
		"\u11A4\x03\x02\x02\x02\u11A4\u11A2\x03\x02\x02\x02\u11A4\u11A5\x03\x02" +
		"\x02\x02\u11A5\u11A7\x03\x02\x02\x02\u11A6\u11A0\x03\x02\x02\x02\u11A6" +
		"\u11A7\x03\x02\x02\x02\u11A7\u11AE\x03\x02\x02\x02\u11A8\u11AA\x07H\x02" +
		"\x02\u11A9\u11AB\x05\x04\x03\x02\u11AA\u11A9\x03\x02\x02\x02\u11AB\u11AC" +
		"\x03\x02\x02\x02\u11AC\u11AA\x03\x02\x02\x02\u11AC\u11AD\x03\x02\x02\x02" +
		"\u11AD\u11AF\x03\x02\x02\x02\u11AE\u11A8\x03\x02\x02\x02\u11AE\u11AF\x03" +
		"\x02\x02\x02\u11AF\u11B7\x03\x02\x02\x02\u11B0\u11B4\x05\u0170\xB9\x02" +
		"\u11B1\u11B3\x05\x04\x03\x02\u11B2\u11B1\x03\x02\x02\x02\u11B3\u11B6\x03" +
		"\x02\x02\x02\u11B4\u11B2\x03\x02\x02\x02\u11B4\u11B5\x03\x02\x02\x02\u11B5" +
		"\u11B8\x03\x02\x02\x02\u11B6\u11B4\x03\x02\x02\x02\u11B7\u11B0\x03\x02" +
		"\x02\x02\u11B8\u11B9\x03\x02\x02\x02\u11B9\u11B7\x03\x02\x02\x02\u11B9" +
		"\u11BA\x03\x02\x02\x02\u11BA\u016F\x03\x02\x02\x02\u11BB\u11C9\x05\u0172" +
		"\xBA\x02\u11BC\u11BE\x05\x04\x03\x02\u11BD\u11BC\x03\x02\x02\x02\u11BE" +
		"\u11BF\x03\x02\x02\x02\u11BF\u11BD\x03\x02\x02\x02\u11BF\u11C0\x03\x02" +
		"\x02\x02\u11C0\u11C1\x03\x02\x02\x02\u11C1\u11C3\x07\xEC\x02\x02\u11C2" +
		"\u11C4\x05\x04\x03\x02\u11C3\u11C2\x03\x02\x02\x02\u11C4\u11C5\x03\x02" +
		"\x02\x02\u11C5\u11C3\x03\x02\x02\x02\u11C5\u11C6\x03\x02\x02\x02\u11C6" +
		"\u11C7\x03\x02\x02\x02\u11C7\u11C8\x05\u0174\xBB\x02\u11C8\u11CA\x03\x02" +
		"\x02\x02\u11C9\u11BD\x03\x02\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA" +
		"\u0171\x03\x02\x02\x02\u11CB\u11CC\x07\u0173\x02\x02\u11CC\u0173\x03\x02" +
		"\x02\x02\u11CD\u11CE\x07\u0171\x02\x02\u11CE\u0175\x03\x02\x02\x02\u11CF" +
		"\u11D1\x07\u0103\x02\x02\u11D0\u11D2\x05\x04\x03\x02\u11D1\u11D0\x03\x02" +
		"\x02\x02\u11D2\u11D3\x03\x02\x02\x02\u11D3\u11D1\x03\x02\x02\x02\u11D3" +
		"\u11D4\x03\x02\x02\x02\u11D4\u11E1\x03\x02\x02\x02\u11D5\u11D7\x07\xD9" +
		"\x02\x02\u11D6\u11D8\x05\x04\x03\x02\u11D7\u11D6\x03\x02\x02\x02\u11D8" +
		"\u11D9\x03\x02\x02\x02\u11D9\u11D7\x03\x02\x02\x02\u11D9\u11DA\x03\x02" +
		"\x02\x02\u11DA\u11DB\x03\x02\x02\x02\u11DB\u11DD\x05\u016A\xB6\x02\u11DC" +
		"\u11DE\x05\x04\x03\x02\u11DD\u11DC\x03\x02\x02\x02\u11DE\u11DF\x03\x02" +
		"\x02\x02\u11DF\u11DD\x03\x02\x02\x02\u11DF\u11E0\x03\x02\x02\x02\u11E0" +
		"\u11E2\x03\x02\x02\x02\u11E1\u11D5\x03\x02\x02\x02\u11E1\u11E2\x03\x02" +
		"\x02\x02\u11E2\u11E9\x03\x02\x02\x02\u11E3\u11E5\x07\x87\x02\x02\u11E4" +
		"\u11E6\x05\x04\x03\x02\u11E5\u11E4\x03\x02\x02\x02\u11E6\u11E7\x03\x02" +
		"\x02\x02\u11E7\u11E5\x03\x02\x02\x02\u11E7\u11E8\x03\x02\x02\x02\u11E8" +
		"\u11EA\x03\x02\x02\x02\u11E9\u11E3\x03\x02\x02\x02\u11E9\u11EA\x03\x02" +
		"\x02\x02\u11EA\u11EB\x03\x02\x02\x02\u11EB\u11EC\x05\u0178\xBD\x02\u11EC" +
		"\u0177\x03\x02\x02\x02\u11ED\u11EF\x05\u017E\xC0\x02\u11EE\u11F0\x05\x04" +
		"\x03\x02\u11EF\u11EE\x03\x02\x02\x02\u11F0\u11F1\x03\x02\x02\x02\u11F1" +
		"\u11EF\x03\x02\x02\x02\u11F1\u11F2\x03\x02\x02\x02\u11F2\u11F9\x03\x02" +
		"\x02\x02\u11F3\u11F5\x07\xD6\x02\x02\u11F4\u11F6\x05\x04\x03\x02\u11F5" +
		"\u11F4\x03\x02\x02\x02\u11F6\u11F7\x03\x02\x02\x02\u11F7\u11F5\x03\x02" +
		"\x02\x02\u11F7\u11F8\x03\x02\x02\x02\u11F8\u11FA\x03\x02\x02\x02\u11F9" +
		"\u11F3\x03\x02\x02\x02\u11F9\u11FA\x03\x02\x02\x02\u11FA\u11FB\x03\x02" +
		"\x02\x02\u11FB\u11FC\x05\u016A\xB6\x02\u11FC\u1207\x03\x02\x02\x02\u11FD" +
		"\u11FF\x05\u017A\xBE\x02\u11FE\u1200\x05\x04\x03\x02\u11FF\u11FE\x03\x02" +
		"\x02\x02\u1200\u1201\x03\x02\x02\x02\u1201\u11FF\x03\x02\x02\x02\u1201" +
		"\u1202\x03\x02\x02\x02\u1202\u1203\x03\x02\x02\x02\u1203\u1204\x07/\x02" +
		"\x02\u1204\u1207\x03\x02\x02\x02\u1205\u1207\x05\u017C\xBF\x02\u1206\u11ED" +
		"\x03\x02\x02\x02\u1206\u11FD\x03\x02\x02\x02\u1206\u1205\x03\x02\x02\x02" +
		"\u1207\u0179\x03\x02\x02\x02\u1208\u1209\x07\u0171\x02\x02\u1209\u017B" +
		"\x03\x02\x02\x02\u120A\u120B\x07\u0173\x02\x02\u120B\u017D\x03\x02\x02" +
		"\x02\u120C\u120E\x07j\x02\x02\u120D\u120F\x05\x04\x03\x02\u120E\u120D" +
		"\x03\x02\x02\x02\u120F\u1210\x03\x02\x02\x02\u1210\u120E\x03\x02\x02\x02" +
		"\u1210\u1211\x03\x02\x02\x02\u1211\u1218\x03\x02\x02\x02\u1212\u1214\x07" +
		"\xD6\x02\x02\u1213\u1215\x05\x04\x03\x02\u1214\u1213\x03\x02\x02\x02\u1215" +
		"\u1216\x03\x02\x02\x02\u1216\u1214\x03\x02\x02\x02\u1216\u1217\x03\x02" +
		"\x02\x02\u1217\u1219\x03\x02\x02\x02\u1218\u1212\x03\x02\x02\x02\u1218" +
		"\u1219\x03\x02\x02\x02\u1219\u121B\x03\x02\x02\x02\u121A\u120C\x03\x02" +
		"\x02\x02\u121A\u121B\x03\x02\x02\x02\u121B\u121C\x03\x02\x02\x02\u121C" +
		"\u1226\t\x1F\x02\x02\u121D\u121F\x05\u0180\xC1\x02\u121E\u1220\x05\x04" +
		"\x03\x02\u121F\u121E\x03\x02\x02\x02\u1220\u1221\x03\x02\x02\x02\u1221" +
		"\u121F\x03\x02\x02\x02\u1221\u1222\x03\x02\x02\x02\u1222\u1223\x03\x02" +
		"\x02\x02\u1223\u1224\x07\xF7\x02\x02\u1224\u1226\x03\x02\x02\x02\u1225" +
		"\u121A\x03\x02\x02\x02\u1225\u121D\x03\x02\x02\x02\u1226\u017F\x03\x02" +
		"\x02\x02\u1227\u1228\x07\u0171\x02\x02\u1228\u0181\x03\x02\x02\x02\u1229" +
		"\u122B\x07\u010D\x02\x02\u122A\u122C\x05\x04\x03\x02\u122B\u122A\x03\x02" +
		"\x02\x02\u122C\u122D\x03\x02\x02\x02\u122D\u122B\x03\x02\x02\x02\u122D" +
		"\u122E\x03\x02\x02\x02\u122E\u1235\x03\x02\x02\x02\u122F\u1231\t \x02" +
		"\x02\u1230\u1232\x05\x04\x03\x02\u1231\u1230\x03\x02\x02\x02\u1232\u1233" +
		"\x03\x02\x02\x02\u1233\u1231\x03\x02\x02\x02\u1233\u1234\x03\x02\x02\x02" +
		"\u1234\u1236\x03\x02\x02\x02\u1235\u122F\x03\x02\x02\x02\u1235\u1236\x03" +
		"\x02\x02\x02\u1236\u123D\x03\x02\x02\x02\u1237\u1239\x07\x0E\x02\x02\u1238" +
		"\u123A\x05\x04\x03\x02\u1239\u1238\x03\x02\x02\x02\u123A\u123B\x03\x02" +
		"\x02\x02\u123B\u1239\x03\x02\x02\x02\u123B\u123C\x03\x02\x02\x02\u123C" +
		"\u123E\x03\x02\x02\x02\u123D\u1237\x03\x02\x02\x02\u123D\u123E\x03\x02" +
		"\x02\x02\u123E\u1245\x03\x02\x02\x02\u123F\u1241\x07\x99\x02\x02\u1240" +
		"\u1242\x05\x04\x03\x02\u1241\u1240\x03\x02\x02\x02\u1242\u1243\x03\x02" +
		"\x02\x02\u1243\u1241\x03\x02\x02\x02\u1243\u1244\x03\x02\x02\x02\u1244" +
		"\u1246\x03\x02\x02\x02\u1245\u123F\x03\x02\x02\x02\u1245\u1246\x03\x02" +
		"\x02\x02\u1246\u1247\x03\x02\x02\x02\u1247\u124F\x05\u0184\xC3\x02\u1248" +
		"\u124A\x05\x04\x03\x02\u1249\u1248\x03\x02\x02\x02\u124A\u124B\x03\x02" +
		"\x02\x02\u124B\u1249\x03\x02\x02\x02\u124B\u124C\x03\x02\x02\x02\u124C" +
		"\u124D\x03\x02\x02\x02\u124D\u124E\x05\u0184\xC3\x02\u124E\u1250\x03\x02" +
		"\x02\x02\u124F\u1249\x03\x02\x02\x02\u1250\u1251\x03\x02\x02\x02\u1251" +
		"\u124F\x03\x02\x02\x02\u1251\u1252\x03\x02\x02\x02\u1252\u0183\x03\x02" +
		"\x02\x02\u1253\u1254\x07\u0173\x02\x02\u1254\u0185\x03\x02\x02\x02\u1255" +
		"\u1257\x07\f\x02\x02\u1256\u1258\x05\x04\x03\x02\u1257\u1256\x03\x02\x02" +
		"\x02\u1258\u1259\x03\x02\x02\x02\u1259\u1257\x03\x02\x02\x02\u1259\u125A" +
		"\x03\x02\x02\x02\u125A\u1261\x03\x02\x02\x02\u125B\u125D\x05\u0188\xC5" +
		"\x02\u125C\u125E\x05\x04\x03\x02\u125D\u125C\x03\x02\x02\x02\u125E\u125F" +
		"\x03\x02\x02\x02\u125F\u125D\x03\x02\x02\x02\u125F\u1260\x03\x02\x02\x02" +
		"\u1260\u1262\x03\x02\x02\x02\u1261\u125B\x03\x02\x02\x02\u1262\u1263\x03" +
		"\x02\x02\x02\u1263\u1261\x03\x02\x02\x02\u1263\u1264\x03\x02\x02\x02\u1264" +
		"\u1265\x03\x02\x02\x02\u1265\u1267\x07\xD9\x02\x02\u1266\u1268\x05\x04" +
		"\x03\x02\u1267\u1266\x03\x02\x02\x02\u1268\u1269\x03\x02\x02\x02\u1269" +
		"\u1267\x03\x02\x02\x02\u1269\u126A\x03\x02\x02\x02\u126A\u1272\x03\x02" +
		"\x02\x02\u126B\u126F\x05\u016A\xB6\x02\u126C\u126E\x05\x04\x03\x02\u126D" +
		"\u126C\x03\x02\x02\x02\u126E\u1271\x03\x02\x02\x02\u126F\u126D\x03\x02" +
		"\x02\x02\u126F\u1270\x03\x02\x02\x02\u1270\u1273\x03\x02\x02\x02\u1271" +
		"\u126F\x03\x02\x02\x02\u1272\u126B\x03\x02\x02\x02\u1273\u1274\x03\x02" +
		"\x02\x02\u1274\u1272\x03\x02\x02\x02\u1274\u1275\x03\x02\x02\x02\u1275" +
		"\u0187\x03\x02\x02\x02\u1276\u129C\x07\\\x02\x02\u1277\u1279\x07\x8B\x02" +
		"\x02\u1278\u127A\x05\x04\x03\x02\u1279\u1278\x03\x02\x02\x02\u127A\u127B" +
		"\x03\x02\x02\x02\u127B\u1279\x03\x02\x02\x02\u127B\u127C\x03\x02\x02\x02" +
		"\u127C\u127D\x03\x02\x02\x02\u127D\u127E\x05\u018E\xC8\x02\u127E\u129C" +
		"\x03\x02\x02\x02\u127F\u129C\x07\x92\x02\x02\u1280\u129C\x07\xC5\x02\x02" +
		"\u1281\u129C\x07\xC8\x02\x02\u1282\u1284\t!\x02\x02\u1283\u1285\x05\x04" +
		"\x03\x02\u1284\u1283\x03\x02\x02\x02\u1285\u1286\x03\x02\x02\x02\u1286" +
		"\u1284\x03\x02\x02\x02\u1286\u1287\x03\x02\x02\x02\u1287\u1289\x03\x02" +
		"\x02\x02\u1288\u1282\x03\x02\x02\x02\u1288\u1289\x03\x02\x02\x02\u1289" +
		"\u128A\x03\x02\x02\x02\u128A\u128C\x07\xED\x02\x02\u128B\u128D\x05\x04" +
		"\x03\x02\u128C\u128B\x03\x02\x02\x02\u128D\u128E\x03\x02\x02\x02\u128E" +
		"\u128C\x03\x02\x02\x02\u128E\u128F\x03\x02\x02\x02\u128F\u1290\x03\x02" +
		"\x02\x02\u1290\u1291\x05\u018C\xC7\x02\u1291\u129C\x03\x02\x02\x02\u1292" +
		"\u129C\x07\xEF\x02\x02\u1293\u1295\x07\u014F\x02\x02\u1294\u1296\x05\x04" +
		"\x03\x02\u1295\u1294\x03\x02\x02\x02\u1296\u1297\x03\x02\x02\x02\u1297" +
		"\u1295\x03\x02\x02\x02\u1297\u1298\x03\x02\x02\x02\u1298\u1299\x03\x02" +
		"\x02\x02\u1299\u129A\x05\u018A\xC6\x02\u129A\u129C\x03\x02\x02\x02\u129B" +
		"\u1276\x03\x02\x02\x02\u129B\u1277\x03\x02\x02\x02\u129B\u127F\x03\x02" +
		"\x02\x02\u129B\u1280\x03\x02\x02\x02\u129B\u1281\x03\x02\x02\x02\u129B" +
		"\u1288\x03\x02\x02\x02\u129B\u1292\x03\x02\x02\x02\u129B\u1293\x03\x02" +
		"\x02\x02\u129C\u0189\x03\x02\x02\x02\u129D\u129E\x07\u0171\x02\x02\u129E" +
		"\u018B\x03\x02\x02\x02\u129F\u12A0\x07\u0171\x02\x02\u12A0\u018D\x03\x02" +
		"\x02\x02\u12A1\u12A2\x07\u0171\x02\x02\u12A2\u018F\x03\x02\x02\x02\u12A3" +
		"\u12A4\b\xC9\x01\x02\u12A4\u12A8\x07\u0167\x02\x02\u12A5\u12A7\x05\x06" +
		"\x04\x02\u12A6\u12A5\x03\x02\x02\x02\u12A7\u12AA\x03\x02\x02\x02\u12A8" +
		"\u12A6\x03\x02\x02\x02\u12A8\u12A9\x03\x02\x02\x02\u12A9\u12AB\x03\x02" +
		"\x02\x02\u12AA\u12A8\x03\x02\x02\x02\u12AB\u12AF\x05\u0190\xC9\x02\u12AC" +
		"\u12AE\x05\x06\x04\x02\u12AD\u12AC\x03\x02\x02\x02\u12AE\u12B1\x03\x02" +
		"\x02\x02\u12AF\u12AD\x03\x02\x02\x02\u12AF\u12B0\x03\x02\x02\x02\u12B0" +
		"\u12B2\x03\x02\x02\x02\u12B1\u12AF\x03\x02\x02\x02\u12B2\u12B3\x07\u0168" +
		"\x02\x02\u12B3\u12C3\x03\x02\x02\x02\u12B4\u12B8\x05\u0194\xCB\x02\u12B5" +
		"\u12B7\x05\x06\x04\x02\u12B6\u12B5\x03\x02\x02\x02\u12B7\u12BA\x03\x02" +
		"\x02\x02\u12B8\u12B6\x03\x02\x02\x02\u12B8\u12B9\x03\x02\x02\x02\u12B9" +
		"\u12BB\x03\x02\x02\x02\u12BA\u12B8\x03\x02\x02\x02\u12BB\u12BC\x05\u0190" +
		"\xC9\b\u12BC\u12C3\x03\x02\x02\x02\u12BD\u12C3\x05\u0196\xCC\x02\u12BE" +
		"\u12C3\x07\u0171\x02\x02\u12BF\u12C3\x07\u0154\x02\x02";
	private static readonly _serializedATNSegment9: string =
		"\u12C0\u12C3\x07\u0156\x02\x02\u12C1\u12C3\x07\u0155\x02\x02\u12C2\u12A3" +
		"\x03\x02\x02\x02\u12C2\u12B4\x03\x02\x02\x02\u12C2\u12BD\x03\x02\x02\x02" +
		"\u12C2\u12BE\x03\x02\x02\x02\u12C2\u12BF\x03\x02\x02\x02\u12C2\u12C0\x03" +
		"\x02\x02\x02\u12C2\u12C1\x03\x02\x02\x02\u12C3\u12D6\x03\x02\x02\x02\u12C4" +
		"\u12C8\f\t\x02\x02\u12C5\u12C7\x05\x06\x04\x02\u12C6\u12C5\x03\x02\x02" +
		"\x02\u12C7\u12CA\x03\x02\x02\x02\u12C8\u12C6\x03\x02\x02\x02\u12C8\u12C9" +
		"\x03\x02\x02\x02\u12C9\u12CB\x03\x02\x02\x02\u12CA\u12C8\x03\x02\x02\x02" +
		"\u12CB\u12CF\x05\u0192\xCA\x02\u12CC\u12CE\x05\x06\x04\x02\u12CD\u12CC" +
		"\x03\x02\x02\x02\u12CE\u12D1\x03\x02\x02\x02\u12CF\u12CD\x03\x02\x02\x02" +
		"\u12CF\u12D0\x03\x02\x02\x02\u12D0\u12D2\x03\x02\x02\x02\u12D1\u12CF\x03" +
		"\x02\x02\x02\u12D2\u12D3\x05\u0190\xC9\n\u12D3\u12D5\x03\x02\x02\x02\u12D4" +
		"\u12C4\x03\x02\x02\x02\u12D5\u12D8\x03\x02\x02\x02\u12D6\u12D4\x03\x02" +
		"\x02\x02\u12D6\u12D7\x03\x02\x02\x02\u12D7\u0191\x03\x02\x02\x02\u12D8" +
		"\u12D6\x03\x02\x02\x02\u12D9\u12E0\x07\u015B\x02\x02\u12DA\u12E0\x07\u015C" +
		"\x02\x02\u12DB\u12E0\x07\u015D\x02\x02\u12DC\u12E0\x07\u015E\x02\x02\u12DD" +
		"\u12DE\x07\u015D\x02\x02\u12DE\u12E0\x07\u015D\x02\x02\u12DF\u12D9\x03" +
		"\x02\x02\x02\u12DF\u12DA\x03\x02\x02\x02\u12DF\u12DB\x03\x02\x02\x02\u12DF" +
		"\u12DC\x03\x02\x02\x02\u12DF\u12DD\x03\x02\x02\x02\u12E0\u0193\x03\x02" +
		"\x02\x02\u12E1\u12E2\t\"\x02\x02\u12E2\u0195\x03\x02\x02\x02\u12E3\u12EB" +
		"\x05\u0100\x81\x02\u12E4\u12E6\x05\x06\x04\x02\u12E5\u12E4\x03\x02\x02" +
		"\x02\u12E6\u12E9\x03\x02\x02\x02\u12E7\u12E5\x03\x02\x02\x02\u12E7\u12E8" +
		"\x03\x02\x02\x02\u12E8\u12EA\x03\x02\x02\x02\u12E9\u12E7\x03\x02\x02\x02" +
		"\u12EA\u12EC\x05\u019A\xCE\x02\u12EB\u12E7\x03\x02\x02\x02\u12EB\u12EC" +
		"\x03\x02\x02\x02\u12EC\u12F4\x03\x02\x02\x02\u12ED\u12EF\x05\x06\x04\x02" +
		"\u12EE\u12ED\x03\x02\x02\x02\u12EF\u12F2\x03\x02\x02\x02\u12F0\u12EE\x03" +
		"\x02\x02\x02\u12F0\u12F1\x03\x02\x02\x02\u12F1\u12F3\x03\x02\x02\x02\u12F2" +
		"\u12F0\x03\x02\x02\x02\u12F3\u12F5\x05\u019C\xCF\x02\u12F4\u12F0\x03\x02" +
		"\x02\x02\u12F4\u12F5\x03\x02\x02\x02\u12F5\u1311\x03\x02\x02\x02\u12F6" +
		"\u12FA\x07\x9D\x02\x02\u12F7\u12F9\x05\x06\x04\x02\u12F8\u12F7\x03\x02" +
		"\x02\x02\u12F9\u12FC\x03\x02\x02\x02\u12FA\u12F8\x03\x02\x02\x02\u12FA" +
		"\u12FB\x03\x02\x02\x02\u12FB\u12FD\x03\x02\x02\x02\u12FC\u12FA\x03\x02" +
		"\x02\x02\u12FD\u1305\x05\u01A2\xD2\x02\u12FE\u1300\x05\x06\x04\x02\u12FF" +
		"\u12FE\x03\x02\x02\x02\u1300\u1303\x03\x02\x02\x02\u1301\u12FF\x03\x02" +
		"\x02\x02\u1301\u1302\x03\x02\x02\x02\u1302\u1304\x03\x02\x02\x02\u1303" +
		"\u1301\x03\x02\x02\x02\u1304\u1306\x05\u0198\xCD\x02\u1305\u1301\x03\x02" +
		"\x02\x02\u1305\u1306\x03\x02\x02\x02\u1306\u130E\x03\x02\x02\x02\u1307" +
		"\u1309\x05\x06\x04\x02\u1308\u1307\x03\x02\x02\x02\u1309\u130C\x03\x02" +
		"\x02\x02\u130A\u1308\x03\x02\x02\x02\u130A\u130B\x03\x02\x02\x02\u130B" +
		"\u130D\x03\x02\x02\x02\u130C\u130A\x03\x02\x02\x02\u130D\u130F\x05\u019C" +
		"\xCF\x02\u130E\u130A\x03\x02\x02\x02\u130E\u130F\x03\x02\x02\x02\u130F" +
		"\u1311\x03\x02\x02\x02\u1310\u12E3\x03\x02\x02\x02\u1310\u12F6\x03\x02" +
		"\x02\x02\u1311\u0197\x03\x02\x02\x02\u1312\u1313\x05\u019A\xCE\x02\u1313" +
		"\u0199\x03\x02\x02\x02\u1314\u1318\x07\u0167\x02\x02\u1315\u1317\x05\x06" +
		"\x04\x02\u1316\u1315\x03\x02\x02\x02\u1317\u131A\x03\x02\x02\x02\u1318" +
		"\u1316\x03\x02\x02\x02\u1318\u1319\x03\x02\x02\x02\u1319\u131D\x03\x02" +
		"\x02\x02\u131A\u1318\x03\x02\x02\x02\u131B\u131E\x05\u0190\xC9\x02\u131C" +
		"\u131E\x07\x06\x02\x02\u131D\u131B\x03\x02\x02\x02\u131D\u131C\x03\x02" +
		"\x02\x02\u131E\u132B\x03\x02\x02\x02\u131F\u1321\x05\x04\x03\x02\u1320" +
		"\u131F\x03\x02\x02\x02\u1321\u1324\x03\x02\x02\x02\u1322\u1320\x03\x02" +
		"\x02\x02\u1322\u1323\x03\x02\x02\x02\u1323\u1327\x03\x02\x02\x02\u1324" +
		"\u1322\x03\x02\x02\x02\u1325\u1328\x05\u0190\xC9\x02\u1326\u1328\x07\x06" +
		"\x02\x02\u1327\u1325\x03\x02\x02\x02\u1327\u1326\x03\x02\x02\x02\u1328" +
		"\u132A\x03\x02\x02\x02\u1329\u1322\x03\x02\x02\x02\u132A\u132D\x03\x02" +
		"\x02\x02\u132B\u1329\x03\x02\x02\x02\u132B\u132C\x03\x02\x02\x02\u132C" +
		"\u1331\x03\x02\x02\x02\u132D\u132B\x03\x02\x02\x02\u132E\u1330\x05\x06" +
		"\x04\x02\u132F\u132E\x03\x02\x02\x02\u1330\u1333\x03\x02\x02\x02\u1331" +
		"\u132F\x03\x02\x02\x02\u1331\u1332\x03\x02\x02\x02\u1332\u1334\x03\x02" +
		"\x02\x02\u1333\u1331\x03\x02\x02\x02\u1334\u1335\x07\u0168\x02\x02\u1335" +
		"\u019B\x03\x02\x02\x02\u1336\u133A\x07\u0167\x02\x02\u1337\u1339\x05\x06" +
		"\x04\x02\u1338\u1337\x03\x02\x02\x02\u1339\u133C\x03\x02\x02\x02\u133A" +
		"\u1338\x03\x02\x02\x02\u133A\u133B\x03\x02\x02\x02\u133B\u133D\x03\x02" +
		"\x02\x02\u133C\u133A\x03\x02\x02\x02\u133D\u1341\x05\u019E\xD0\x02\u133E" +
		"\u1340\x05\x06\x04\x02\u133F\u133E\x03\x02\x02\x02\u1340\u1343\x03\x02" +
		"\x02\x02\u1341\u133F\x03\x02\x02\x02\u1341\u1342\x03\x02\x02\x02\u1342" +
		"\u1344\x03\x02\x02\x02\u1343\u1341\x03\x02\x02\x02\u1344\u134C\x07\u0161" +
		"\x02\x02\u1345\u1347\x05\x06\x04\x02\u1346\u1345\x03\x02\x02\x02\u1347" +
		"\u134A\x03\x02\x02\x02\u1348\u1346\x03\x02\x02\x02\u1348\u1349\x03\x02" +
		"\x02\x02\u1349\u134B\x03\x02\x02\x02\u134A\u1348\x03\x02\x02\x02\u134B" +
		"\u134D\x05\u01A0\xD1\x02\u134C\u1348\x03\x02\x02\x02\u134C\u134D\x03\x02" +
		"\x02\x02\u134D\u1351\x03\x02\x02\x02\u134E\u1350\x05\x06\x04\x02\u134F" +
		"\u134E\x03\x02\x02\x02\u1350\u1353\x03\x02\x02\x02\u1351\u134F\x03\x02" +
		"\x02\x02\u1351\u1352\x03\x02\x02\x02\u1352\u1354\x03\x02\x02\x02\u1353" +
		"\u1351\x03\x02\x02\x02\u1354\u1355\x07\u0168\x02\x02\u1355\u019D\x03\x02" +
		"\x02\x02\u1356\u1357\x05\u0190\xC9\x02\u1357\u019F\x03\x02\x02\x02\u1358" +
		"\u1359\x05\u0190\xC9\x02\u1359\u01A1\x03\x02\x02\x02\u135A\u135B\x07\u0173" +
		"\x02\x02\u135B\u01A3\x03\x02\x02\x02\u0337\u01A6\u01A8\u01B3\u01B9\u01BF" +
		"\u01C7\u01CB\u01CF\u01D2\u01D5\u01DB\u01E1\u01E8\u01EF\u01F5\u01F7\u01FE" +
		"\u0204\u020B\u0212\u0215\u021B\u021E\u0224\u0227\u022D\u0230\u0236\u0239" +
		"\u023F\u0245\u024C\u0253\u0259\u0261\u0267\u026A\u026F\u0274\u027B\u0281" +
		"\u0288\u028F\u0294\u029B\u02A1\u02A8\u02AF\u02B4\u02BB\u02C1\u02C8\u02CF" +
		"\u02D5\u02DB\u02E0\u02E7\u02ED\u02F4\u02FB\u0300\u0307\u030D\u0314\u0319" +
		"\u0322\u0328\u032F\u0334\u033D\u0343\u034A\u034F\u0358\u035A\u0361\u0363" +
		"\u0371\u0377\u037D\u0384\u0388\u038A\u038F\u0395\u0399\u039E\u03A4\u03AF" +
		"\u03B1\u03B8\u03BA\u03C5\u03C9\u03CF\u03D3\u03D9\u03DF\u03E1\u03E7\u03ED" +
		"\u03F3\u03F9\u03FD\u0407\u040D\u040F\u0415\u041B\u041D\u0423\u0429\u0430" +
		"\u0434\u043B\u0443\u0447\u044D\u045B\u0461\u0467\u046D\u0471\u0477\u047D" +
		"\u047F\u0485\u048B\u0494\u049A\u049C\u04A2\u04A4\u04AA\u04B0\u04B9\u04C1" +
		"\u04C7\u04CD\u04D3\u04D9\u04DF\u04E1\u04E5\u04F1\u04F7\u04FE\u0502\u0507" +
		"\u050D\u0516\u051C\u051E\u0524\u0526\u052E\u0534\u053A\u053C\u0544\u054A" +
		"\u054C\u0554\u055A\u055C\u055E\u0565\u056B\u056D\u0575\u057B\u057D\u0583" +
		"\u0585\u058D\u0591\u0597\u059B\u05A3\u05A9\u05AB\u05B3\u05B9\u05BB\u05C0" +
		"\u05C6\u05CA\u05CF\u05D1\u05D7\u05DD\u05E1\u05E7\u05ED\u05F3\u05F9\u05FD" +
		"\u0602\u0608\u060D\u0612\u0619\u061F\u0623\u0633\u063C\u0645\u064A\u064F" +
		"\u0659\u065E\u0663\u066B\u0674\u0679\u0682\u068A\u068E\u0694\u069A\u069C" +
		"\u06A2\u06A6\u06AC\u06B0\u06B8\u06BA\u06C1\u06C9\u06CD\u06D3\u06D7\u06D9" +
		"\u06DE\u06E4\u06EA\u06F1\u06F7\u06FA\u0700\u0706\u070C\u070E\u0714\u071A" +
		"\u071C\u071E\u0724\u0728\u072D\u0733\u0737\u073C\u0742\u0748\u074C\u0751" +
		"\u0757\u075D\u0761\u0766\u076C\u0770\u0772\u0786\u078A\u078F\u0791\u079A" +
		"\u079E\u07A4\u07A8\u07AE\u07B2\u07B8\u07BC\u07D4\u07DA\u07E0\u07E2\u07E9" +
		"\u07F3\u07F9\u07FD\u0803\u0807\u0809\u080E\u0814\u081A\u0823\u0829\u082B" +
		"\u0831\u0835\u083A\u0840\u0842\u0848\u084E\u0852\u0857\u085D\u085F\u0865" +
		"\u0867\u086D\u0871\u0876\u087C\u087E\u0884\u0886\u088C\u0890\u0894\u0898" +
		"\u089C\u08A0\u08A6\u08AC\u08B0\u08B6\u08BA\u08BC\u08C2\u08C8\u08D1\u08D7" +
		"\u08DD\u08E3\u08E9\u08EF\u08F5\u08F9\u08FF\u0903\u0905\u090A\u0912\u091A" +
		"\u091C\u0922\u0928\u092A\u0930\u0937\u093A\u0940\u0942\u0948\u094E\u0950" +
		"\u0956\u0959\u095F\u0961\u0964\u096A\u096E\u0973\u097A\u097D\u0983\u0989" +
		"\u098B\u098F\u0991\u099D\u09A1\u09A3\u09A8\u09AE\u09B9\u09C1\u09C7\u09C9" +
		"\u09D1\u09D7\u09D9\u09E4\u09EA\u09EC\u09EE\u09F9\u0A05\u0A0B\u0A0D\u0A13" +
		"\u0A15\u0A1B\u0A1D\u0A25\u0A2B\u0A2D\u0A33\u0A35\u0A3B\u0A3D\u0A45\u0A4B" +
		"\u0A4D\u0A55\u0A5B\u0A5D\u0A65\u0A69\u0A6F\u0A76\u0A7A\u0A7D\u0A7F\u0A85" +
		"\u0A8D\u0A91\u0A97\u0A9F\u0AA7\u0AAD\u0AB4\u0ABA\u0AC5\u0ACB\u0AD2\u0AD9" +
		"\u0ADD\u0AE2\u0AE6\u0AEB\u0AF6\u0AF8\u0AFE\u0B02\u0B08\u0B0A\u0B10\u0B1A" +
		"\u0B1F\u0B25\u0B2C\u0B33\u0B3A\u0B41\u0B48\u0B4F\u0B56\u0B5D\u0B64\u0B6B" +
		"\u0B72\u0B79\u0B80\u0B87\u0B8E\u0B95\u0B99\u0B9E\u0BA2\u0BA8\u0BAE\u0BB0" +
		"\u0BB6\u0BBF\u0BC5\u0BCC\u0BD0\u0BD3\u0BD9\u0BDF\u0BE6\u0BEA\u0BEF\u0BF3" +
		"\u0BF8\u0BFC\u0C01\u0C08\u0C0E\u0C15\u0C19\u0C1C\u0C22\u0C29\u0C30\u0C34" +
		"\u0C39\u0C3E\u0C46\u0C48\u0C4E\u0C56\u0C5D\u0C64\u0C68\u0C6D\u0C71\u0C76" +
		"\u0C7A\u0C7F\u0C84\u0C8A\u0C8E\u0C93\u0C99\u0CA5\u0CA7\u0CAD\u0CAF\u0CB5" +
		"\u0CB9\u0CBE\u0CC8\u0CCC\u0CD6\u0CDD\u0CE4\u0CE9\u0CED\u0CF3\u0CF9\u0CFB" +
		"\u0D03\u0D09\u0D0B\u0D13\u0D19\u0D1B\u0D28\u0D2E\u0D30\u0D38\u0D3E\u0D40" +
		"\u0D48\u0D4E\u0D54\u0D56\u0D5A\u0D60\u0D66\u0D6C\u0D73\u0D79\u0D7B\u0D81" +
		"\u0D83\u0D8C\u0D8E\u0D94\u0D9A\u0D9F\u0DA9\u0DAF\u0DB5\u0DB7\u0DBD\u0DC2" +
		"\u0DCA\u0DD0\u0DD4\u0DDA\u0DE0\u0DE2\u0DE7\u0DEC\u0DEF\u0DF5\u0DF9\u0DFF" +
		"\u0E01\u0E07\u0E0B\u0E11\u0E17\u0E22\u0E28\u0E2E\u0E30\u0E3D\u0E42\u0E44" +
		"\u0E4A\u0E50\u0E54\u0E5A\u0E60\u0E66\u0E68\u0E74\u0E7A\u0E81\u0E87\u0E89" +
		"\u0E8F\u0E93\u0E99\u0E9D\u0E9F\u0EA4\u0EAB\u0EB1\u0EB3\u0EB9\u0EBB\u0EC3" +
		"\u0EC9\u0ECB\u0ED1\u0ED3\u0EEB\u0EF2\u0EF9\u0EFE\u0F05\u0F0B\u0F0D\u0F13" +
		"\u0F1A\u0F21\u0F24\u0F2A\u0F2D\u0F33\u0F36\u0F3C\u0F3F\u0F45\u0F48\u0F4E" +
		"\u0F51\u0F57\u0F5A\u0F60\u0F65\u0F6C\u0F6F\u0F75\u0F78\u0F80\u0F82\u0F88" +
		"\u0F8E\u0F90\u0F9A\u0F9C\u0FA2\u0FA8\u0FAA\u0FB0\u0FB2\u0FB8\u0FBE\u0FC0" +
		"\u0FC4\u0FC9\u0FCD\u0FD4\u0FDB\u0FE2\u0FE8\u0FEB\u0FF1\u0FF7\u0FF9\u0FFF" +
		"\u1001\u1003\u1009\u100F\u1015\u1017\u101D\u101F\u1023\u1029\u102F\u1033" +
		"\u103B\u1041\u1047\u1049\u1051\u1057\u1059\u105F\u1061\u106B\u1071\u1073" +
		"\u107A\u1080\u1086\u108C\u108E\u1094\u1096\u109E\u10A4\u10A6\u10AC\u10B2" +
		"\u10B8\u10C0\u10C6\u10C8\u10CE\u10D4\u10D9\u10DB\u10DE\u10E4\u10EA\u10EC" +
		"\u10F4\u10FA\u10FC\u1102\u1108\u110A\u1110\u111C\u1122\u1124\u112C\u112E" +
		"\u1135\u1137\u113D\u1141\u1143\u1149\u1151\u1158\u115F\u1164\u116B\u1170" +
		"\u1177\u117C\u1183\u1188\u118F\u1192\u1198\u119E\u11A4\u11A6\u11AC\u11AE" +
		"\u11B4\u11B9\u11BF\u11C5\u11C9\u11D3\u11D9\u11DF\u11E1\u11E7\u11E9\u11F1" +
		"\u11F7\u11F9\u1201\u1206\u1210\u1216\u1218\u121A\u1221\u1225\u122D\u1233" +
		"\u1235\u123B\u123D\u1243\u1245\u124B\u1251\u1259\u125F\u1263\u1269\u126F" +
		"\u1274\u127B\u1286\u1288\u128E\u1297\u129B\u12A8\u12AF\u12B8\u12C2\u12C8" +
		"\u12CF\u12D6\u12DF\u12E7\u12EB\u12F0\u12F4\u12FA\u1301\u1305\u130A\u130E" +
		"\u1310\u1318\u131D\u1322\u1327\u132B\u1331\u133A\u1341\u1348\u134C\u1351";
	public static readonly _serializedATN: string = Utils.join(
		[
			cobolParser._serializedATNSegment0,
			cobolParser._serializedATNSegment1,
			cobolParser._serializedATNSegment2,
			cobolParser._serializedATNSegment3,
			cobolParser._serializedATNSegment4,
			cobolParser._serializedATNSegment5,
			cobolParser._serializedATNSegment6,
			cobolParser._serializedATNSegment7,
			cobolParser._serializedATNSegment8,
			cobolParser._serializedATNSegment9,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!cobolParser.__ATN) {
			cobolParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(cobolParser._serializedATN));
		}

		return cobolParser.__ATN;
	}

}

export class Cobol_sourceContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(cobolParser.EOF, 0); }
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cobol_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCobol_source) {
			listener.enterCobol_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCobol_source) {
			listener.exitCobol_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCobol_source) {
			return visitor.visitCobol_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeparatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SEMI_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEMI_, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSeparator) {
			listener.enterSeparator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSeparator) {
			listener.exitSeparator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSeparator) {
			return visitor.visitSeparator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_separatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_separator) {
			listener.enterArithmetic_separator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_separator) {
			listener.exitArithmetic_separator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_separator) {
			return visitor.visitArithmetic_separator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_commentContext extends ParserRuleContext {
	public START_SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_SLASH_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public START_STAR_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_STAR_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_comment; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_comment) {
			listener.enterLine_comment(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_comment) {
			listener.exitLine_comment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_comment) {
			return visitor.visitLine_comment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramContext extends ParserRuleContext {
	public identification_division(): Identification_divisionContext {
		return this.getRuleContext(0, Identification_divisionContext);
	}
	public environment_division(): Environment_divisionContext | undefined {
		return this.tryGetRuleContext(0, Environment_divisionContext);
	}
	public data_division(): Data_divisionContext | undefined {
		return this.tryGetRuleContext(0, Data_divisionContext);
	}
	public procedure_division(): Procedure_divisionContext | undefined {
		return this.tryGetRuleContext(0, Procedure_divisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_divisionContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division) {
			listener.enterProcedure_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division) {
			listener.exitProcedure_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division) {
			return visitor.visitProcedure_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_divisionContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_section(): File_sectionContext | undefined {
		return this.tryGetRuleContext(0, File_sectionContext);
	}
	public working_storage_section(): Working_storage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Working_storage_sectionContext);
	}
	public linkage_section(): Linkage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Linkage_sectionContext);
	}
	public report_section(): Report_sectionContext | undefined {
		return this.tryGetRuleContext(0, Report_sectionContext);
	}
	public screen_section(): Screen_sectionContext | undefined {
		return this.tryGetRuleContext(0, Screen_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division) {
			listener.enterData_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division) {
			listener.exitData_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division) {
			return visitor.visitData_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_description_entry(): File_description_entryContext[];
	public file_description_entry(i: number): File_description_entryContext;
	public file_description_entry(i?: number): File_description_entryContext | File_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_description_entryContext);
		} else {
			return this.getRuleContext(i, File_description_entryContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext[];
	public sort_merge_file_description_entry(i: number): Sort_merge_file_description_entryContext;
	public sort_merge_file_description_entry(i?: number): Sort_merge_file_description_entryContext | Sort_merge_file_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_description_entryContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_description_entryContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_section) {
			listener.enterFile_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_section) {
			listener.exitFile_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_section) {
			return visitor.visitFile_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_sectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(cobolParser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_section) {
			listener.enterWorking_storage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_section) {
			listener.exitWorking_storage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_section) {
			return visitor.visitWorking_storage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Linkage_sectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(cobolParser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linkage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinkage_section) {
			listener.enterLinkage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinkage_section) {
			listener.exitLinkage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinkage_section) {
			return visitor.visitLinkage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_sectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(cobolParser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public report_group_description_entry(): Report_group_description_entryContext[];
	public report_group_description_entry(i: number): Report_group_description_entryContext;
	public report_group_description_entry(i?: number): Report_group_description_entryContext | Report_group_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_group_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_section) {
			listener.enterReport_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_section) {
			listener.exitReport_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_section) {
			return visitor.visitReport_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_sectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(cobolParser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public screen_description_entry(): Screen_description_entryContext[];
	public screen_description_entry(i: number): Screen_description_entryContext;
	public screen_description_entry(i?: number): Screen_description_entryContext | Screen_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_entryContext);
		} else {
			return this.getRuleContext(i, Screen_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_section) {
			listener.enterScreen_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_section) {
			listener.exitScreen_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_section) {
			return visitor.visitScreen_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_description_entryContext extends ParserRuleContext {
	public FD(): TerminalNode { return this.getToken(cobolParser.FD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public fd_clause(): Fd_clauseContext[];
	public fd_clause(i: number): Fd_clauseContext;
	public fd_clause(i?: number): Fd_clauseContext | Fd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fd_clauseContext);
		} else {
			return this.getRuleContext(i, Fd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description_entry) {
			listener.enterFile_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description_entry) {
			listener.exitFile_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description_entry) {
			return visitor.visitFile_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_description_entryContext extends ParserRuleContext {
	public SD(): TerminalNode { return this.getToken(cobolParser.SD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sd_clause(): Sd_clauseContext[];
	public sd_clause(i: number): Sd_clauseContext;
	public sd_clause(i?: number): Sd_clauseContext | Sd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sd_clauseContext);
		} else {
			return this.getRuleContext(i, Sd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description_entry) {
			listener.enterSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description_entry) {
			listener.exitSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description_entry) {
			return visitor.visitSort_merge_file_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_description_entryContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(cobolParser.RD, 0); }
	public report_name(): Report_nameContext {
		return this.getRuleContext(0, Report_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rd_clause(): Rd_clauseContext[];
	public rd_clause(i: number): Rd_clauseContext;
	public rd_clause(i?: number): Rd_clauseContext | Rd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rd_clauseContext);
		} else {
			return this.getRuleContext(i, Rd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description_entry) {
			listener.enterReport_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description_entry) {
			listener.exitReport_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description_entry) {
			return visitor.visitReport_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fd_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public value_of_id(): Value_of_idContext | undefined {
		return this.tryGetRuleContext(0, Value_of_idContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	public linage(): LinageContext | undefined {
		return this.tryGetRuleContext(0, LinageContext);
	}
	public report_is(): Report_isContext | undefined {
		return this.tryGetRuleContext(0, Report_isContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFd_clause) {
			listener.enterFd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFd_clause) {
			listener.exitFd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFd_clause) {
			return visitor.visitFd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_description_entryContext extends ParserRuleContext {
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_description_entry) {
			listener.enterRecord_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_description_entry) {
			listener.exitRecord_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_description_entry) {
			return visitor.visitRecord_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public REDEFINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REDEFINES, 0); }
	public other_data_item(): Other_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Other_data_itemContext);
	}
	public data_description_clause(): Data_description_clauseContext[];
	public data_description_clause(i: number): Data_description_clauseContext;
	public data_description_clause(i?: number): Data_description_clauseContext | Data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Data_description_clauseContext);
		}
	}
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_entry) {
			listener.enterData_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_entry) {
			listener.exitData_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_entry) {
			return visitor.visitData_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Level_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_level_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLevel_number) {
			listener.enterLevel_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLevel_number) {
			listener.exitLevel_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLevel_number) {
			return visitor.visitLevel_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public usage(): UsageContext | undefined {
		return this.tryGetRuleContext(0, UsageContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public occurs(): OccursContext | undefined {
		return this.tryGetRuleContext(0, OccursContext);
	}
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public value_is(): Value_isContext | undefined {
		return this.tryGetRuleContext(0, Value_isContext);
	}
	public renames(): RenamesContext | undefined {
		return this.tryGetRuleContext(0, RenamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_clause) {
			listener.enterData_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_clause) {
			listener.exitData_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_clause) {
			return visitor.visitData_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenamesContext extends ParserRuleContext {
	public RENAMES(): TerminalNode { return this.getToken(cobolParser.RENAMES, 0); }
	public rename_start(): Rename_startContext {
		return this.getRuleContext(0, Rename_startContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rename_end(): Rename_endContext | undefined {
		return this.tryGetRuleContext(0, Rename_endContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_renames; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRenames) {
			listener.enterRenames(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRenames) {
			listener.exitRenames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRenames) {
			return visitor.visitRenames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_startContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_start; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_start) {
			listener.enterRename_start(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_start) {
			listener.exitRename_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_start) {
			return visitor.visitRename_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_endContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_end) {
			listener.enterRename_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_end) {
			listener.exitRename_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_end) {
			return visitor.visitRename_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_isContext extends ParserRuleContext {
	public value_is_definition(): Value_is_definitionContext[];
	public value_is_definition(i: number): Value_is_definitionContext;
	public value_is_definition(i?: number): Value_is_definitionContext | Value_is_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Value_is_definitionContext);
		} else {
			return this.getRuleContext(i, Value_is_definitionContext);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUES, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is) {
			listener.enterValue_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is) {
			listener.exitValue_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is) {
			return visitor.visitValue_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definitionContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public value_is_definition_thru(): Value_is_definition_thruContext | undefined {
		return this.tryGetRuleContext(0, Value_is_definition_thruContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition) {
			listener.enterValue_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition) {
			listener.exitValue_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition) {
			return visitor.visitValue_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_partContext extends ParserRuleContext {
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public ref_data_name(): Ref_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Ref_data_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public external_name(): External_nameContext | undefined {
		return this.tryGetRuleContext(0, External_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_part) {
			listener.enterValue_is_definition_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_part) {
			listener.exitValue_is_definition_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_part) {
			return visitor.visitValue_is_definition_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_thruContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_thru; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_thru) {
			listener.enterValue_is_definition_thru(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_thru) {
			listener.exitValue_is_definition_thru(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_thru) {
			return visitor.visitValue_is_definition_thru(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_external_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExternal_name) {
			listener.enterExternal_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExternal_name) {
			listener.exitExternal_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExternal_name) {
			return visitor.visitExternal_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ref_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ref_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRef_data_name) {
			listener.enterRef_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRef_data_name) {
			listener.exitRef_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRef_data_name) {
			return visitor.visitRef_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_literal) {
			listener.enterValue_is_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_literal) {
			listener.exitValue_is_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_literal) {
			return visitor.visitValue_is_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OccursContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(cobolParser.OCCURS, 0); }
	public times_definition(): Times_definitionContext {
		return this.getRuleContext(0, Times_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public key_is(): Key_isContext[];
	public key_is(i: number): Key_isContext;
	public key_is(i?: number): Key_isContext | Key_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_isContext);
		} else {
			return this.getRuleContext(i, Key_isContext);
		}
	}
	public indexed_by(): Indexed_byContext | undefined {
		return this.tryGetRuleContext(0, Indexed_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_occurs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOccurs) {
			listener.enterOccurs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOccurs) {
			listener.exitOccurs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOccurs) {
			return visitor.visitOccurs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indexed_byContext extends ParserRuleContext {
	public INDEXED(): TerminalNode { return this.getToken(cobolParser.INDEXED, 0); }
	public ind_name(): Ind_nameContext[];
	public ind_name(i: number): Ind_nameContext;
	public ind_name(i?: number): Ind_nameContext | Ind_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ind_nameContext);
		} else {
			return this.getRuleContext(i, Ind_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_indexed_by; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIndexed_by) {
			listener.enterIndexed_by(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIndexed_by) {
			listener.exitIndexed_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIndexed_by) {
			return visitor.visitIndexed_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ind_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ind_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInd_name) {
			listener.enterInd_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInd_name) {
			listener.exitInd_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInd_name) {
			return visitor.visitInd_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_isContext extends ParserRuleContext {
	public key_name(): Key_nameContext[];
	public key_name(i: number): Key_nameContext;
	public key_name(i?: number): Key_nameContext | Key_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_nameContext);
		} else {
			return this.getRuleContext(i, Key_nameContext);
		}
	}
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_is) {
			listener.enterKey_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_is) {
			listener.exitKey_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_is) {
			return visitor.visitKey_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_name) {
			listener.enterKey_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_name) {
			listener.exitKey_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_name) {
			return visitor.visitKey_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Times_definitionContext extends ParserRuleContext {
	public table_size(): Table_sizeContext | undefined {
		return this.tryGetRuleContext(0, Table_sizeContext);
	}
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public min_times(): Min_timesContext | undefined {
		return this.tryGetRuleContext(0, Min_timesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public max_times(): Max_timesContext | undefined {
		return this.tryGetRuleContext(0, Max_timesContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_times_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTimes_definition) {
			listener.enterTimes_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTimes_definition) {
			listener.exitTimes_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTimes_definition) {
			return visitor.visitTimes_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_table_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTable_size) {
			listener.enterTable_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTable_size) {
			listener.exitTable_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTable_size) {
			return visitor.visitTable_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Min_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_min_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMin_times) {
			listener.enterMin_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMin_times) {
			listener.exitMin_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMin_times) {
			return visitor.visitMin_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Max_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_max_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMax_times) {
			listener.enterMax_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMax_times) {
			listener.exitMax_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMax_times) {
			return visitor.visitMax_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_description_entryContext extends ParserRuleContext {
	public report_group_data_description(): Report_group_data_descriptionContext[];
	public report_group_data_description(i: number): Report_group_data_descriptionContext;
	public report_group_data_description(i?: number): Report_group_data_descriptionContext | Report_group_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_group_data_descriptionContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_description_entry) {
			listener.enterReport_group_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_description_entry) {
			listener.exitReport_group_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_description_entry) {
			return visitor.visitReport_group_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_descriptionContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public report_group_data_description_clause(): Report_group_data_description_clauseContext[];
	public report_group_data_description_clause(i: number): Report_group_data_description_clauseContext;
	public report_group_data_description_clause(i?: number): Report_group_data_description_clauseContext | Report_group_data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Report_group_data_description_clauseContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description) {
			listener.enterReport_group_data_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description) {
			listener.exitReport_group_data_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description) {
			return visitor.visitReport_group_data_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_description_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public line_num_definition(): Line_num_definitionContext | undefined {
		return this.tryGetRuleContext(0, Line_num_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GROUP, 0); }
	public next_group_definition(): Next_group_definitionContext | undefined {
		return this.tryGetRuleContext(0, Next_group_definitionContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public type_is_definition(): Type_is_definitionContext | undefined {
		return this.tryGetRuleContext(0, Type_is_definitionContext);
	}
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public column_number(): Column_numberContext | undefined {
		return this.tryGetRuleContext(0, Column_numberContext);
	}
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDICATE, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SOURCE, 0); }
	public source_name(): Source_nameContext | undefined {
		return this.tryGetRuleContext(0, Source_nameContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public sum(): SumContext | undefined {
		return this.tryGetRuleContext(0, SumContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description_clause) {
			listener.enterReport_group_data_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description_clause) {
			listener.exitReport_group_data_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description_clause) {
			return visitor.visitReport_group_data_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_isContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_is) {
			listener.enterSign_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_is) {
			listener.exitSign_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_is) {
			return visitor.visitSign_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SumContext extends ParserRuleContext {
	public SUM(): TerminalNode[];
	public SUM(i: number): TerminalNode;
	public SUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SUM);
		} else {
			return this.getToken(cobolParser.SUM, i);
		}
	}
	public sum_name(): Sum_nameContext[];
	public sum_name(i: number): Sum_nameContext;
	public sum_name(i?: number): Sum_nameContext | Sum_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sum_nameContext);
		} else {
			return this.getRuleContext(i, Sum_nameContext);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RESET, 0); }
	public control_foot_name(): Control_foot_nameContext | undefined {
		return this.tryGetRuleContext(0, Control_foot_nameContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode[];
	public UPON(i: number): TerminalNode;
	public UPON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UPON);
		} else {
			return this.getToken(cobolParser.UPON, i);
		}
	}
	public detail_report_group_name(): Detail_report_group_nameContext[];
	public detail_report_group_name(i: number): Detail_report_group_nameContext;
	public detail_report_group_name(i?: number): Detail_report_group_nameContext | Detail_report_group_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Detail_report_group_nameContext);
		} else {
			return this.getRuleContext(i, Detail_report_group_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum) {
			listener.enterSum(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum) {
			listener.exitSum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum) {
			return visitor.visitSum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_foot_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_foot_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_foot_name) {
			listener.enterControl_foot_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_foot_name) {
			listener.exitControl_foot_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_foot_name) {
			return visitor.visitControl_foot_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Detail_report_group_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_detail_report_group_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDetail_report_group_name) {
			listener.enterDetail_report_group_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDetail_report_group_name) {
			listener.exitDetail_report_group_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDetail_report_group_name) {
			return visitor.visitDetail_report_group_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sum_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum_name) {
			listener.enterSum_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum_name) {
			listener.exitSum_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum_name) {
			return visitor.visitSum_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_name) {
			listener.enterSource_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_name) {
			listener.exitSource_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_name) {
			return visitor.visitSource_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColumn_number) {
			listener.enterColumn_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColumn_number) {
			listener.exitColumn_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColumn_number) {
			return visitor.visitColumn_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_is_definitionContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RH, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PH, 0); }
	public type_control_name(): Type_control_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CH, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CF, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PF, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_is_definition) {
			listener.enterType_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_is_definition) {
			listener.exitType_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_is_definition) {
			return visitor.visitType_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_control_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_control_name) {
			listener.enterType_control_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_control_name) {
			listener.exitType_control_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_control_name) {
			return visitor.visitType_control_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Next_group_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_next_group_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNext_group_definition) {
			listener.enterNext_group_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNext_group_definition) {
			listener.exitNext_group_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNext_group_definition) {
			return visitor.visitNext_group_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_num_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext {
		return this.getRuleContext(0, Line_numContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num_definition) {
			listener.enterLine_num_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num_definition) {
			listener.exitLine_num_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num_definition) {
			return visitor.visitLine_num_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num) {
			listener.enterLine_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num) {
			listener.exitLine_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num) {
			return visitor.visitLine_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rd_clauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CODE, 0); }
	public report_code(): Report_codeContext | undefined {
		return this.tryGetRuleContext(0, Report_codeContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CONTROLS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROLS, 0); }
	public control_name(): Control_nameContext[];
	public control_name(i: number): Control_nameContext;
	public control_name(i?: number): Control_nameContext | Control_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Control_nameContext);
		} else {
			return this.getRuleContext(i, Control_nameContext);
		}
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public page_size_rd(): Page_size_rdContext | undefined {
		return this.tryGetRuleContext(0, Page_size_rdContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMITS, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public heading_line(): Heading_lineContext | undefined {
		return this.tryGetRuleContext(0, Heading_lineContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public DETAIL(): TerminalNode[];
	public DETAIL(i: number): TerminalNode;
	public DETAIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DETAIL);
		} else {
			return this.getToken(cobolParser.DETAIL, i);
		}
	}
	public first_detail_line(): First_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, First_detail_lineContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LAST, 0); }
	public last_detail_line(): Last_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, Last_detail_lineContext);
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line_rd(): Footing_line_rdContext | undefined {
		return this.tryGetRuleContext(0, Footing_line_rdContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRd_clause) {
			listener.enterRd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRd_clause) {
			listener.exitRd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRd_clause) {
			return visitor.visitRd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_line_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line_rd) {
			listener.enterFooting_line_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line_rd) {
			listener.exitFooting_line_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line_rd) {
			return visitor.visitFooting_line_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_detail_line) {
			listener.enterLast_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_detail_line) {
			listener.exitLast_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_detail_line) {
			return visitor.visitLast_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_detail_line) {
			listener.enterFirst_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_detail_line) {
			listener.exitFirst_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_detail_line) {
			return visitor.visitFirst_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Heading_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_heading_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterHeading_line) {
			listener.enterHeading_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitHeading_line) {
			listener.exitHeading_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitHeading_line) {
			return visitor.visitHeading_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_size_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size_rd) {
			listener.enterPage_size_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size_rd) {
			listener.exitPage_size_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size_rd) {
			return visitor.visitPage_size_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_name) {
			listener.enterControl_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_name) {
			listener.exitControl_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_name) {
			return visitor.visitControl_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_codeContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_code; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_code) {
			listener.enterReport_code(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_code) {
			listener.exitReport_code(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_code) {
			return visitor.visitReport_code(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsageContext extends ParserRuleContext {
	public usage_definition(): Usage_definitionContext {
		return this.getRuleContext(0, Usage_definitionContext);
	}
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage) {
			listener.enterUsage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage) {
			listener.exitUsage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage) {
			return visitor.visitUsage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_definitionContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY, 0); }
	public BINARY_CHAR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_CHAR, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNSIGNED, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BINARY_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_SHORT, 0); }
	public BINARY_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_LONG, 0); }
	public BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_DOUBLE, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_5, 0); }
	public COMPUTATIONAL_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_X, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_5, 0); }
	public COMP_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_X, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public FLOAT_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_SHORT, 0); }
	public FLOAT_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_LONG, 0); }
	public FLOAT_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_EXTENDED, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEX, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public POINTER_64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER_64, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_definition) {
			listener.enterUsage_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_definition) {
			listener.exitUsage_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_definition) {
			return visitor.visitUsage_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureContext extends ParserRuleContext {
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPicture) {
			listener.enterPicture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPicture) {
			listener.exitPicture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPicture) {
			return visitor.visitPicture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public char_str_part(): Char_str_partContext[];
	public char_str_part(i: number): Char_str_partContext;
	public char_str_part(i?: number): Char_str_partContext | Char_str_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_str_partContext);
		} else {
			return this.getRuleContext(i, Char_str_partContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_character_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCharacter_string) {
			return visitor.visitCharacter_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_str_partContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_str_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_str_part) {
			listener.enterChar_str_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_str_part) {
			listener.exitChar_str_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_str_part) {
			return visitor.visitChar_str_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Other_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_other_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOther_data_item) {
			listener.enterOther_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOther_data_item) {
			listener.exitOther_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOther_data_item) {
			return visitor.visitOther_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_name) {
			listener.enterData_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_name) {
			listener.exitData_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_name) {
			return visitor.visitData_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sd_clauseContext extends ParserRuleContext {
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSd_clause) {
			listener.enterSd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSd_clause) {
			listener.exitSd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSd_clause) {
			return visitor.visitSd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_isContext extends ParserRuleContext {
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_is) {
			listener.enterReport_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_is) {
			listener.exitReport_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_is) {
			return visitor.visitReport_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_name) {
			listener.enterReport_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_name) {
			listener.exitReport_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_name) {
			return visitor.visitReport_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(cobolParser.LINAGE, 0); }
	public page_size(): Page_sizeContext {
		return this.getRuleContext(0, Page_sizeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.LINES);
		} else {
			return this.getToken(cobolParser.LINES, i);
		}
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line(): Footing_lineContext | undefined {
		return this.tryGetRuleContext(0, Footing_lineContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TOP, 0); }
	public top_lines(): Top_linesContext | undefined {
		return this.tryGetRuleContext(0, Top_linesContext);
	}
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOTTOM, 0); }
	public bottom_lines(): Bottom_linesContext | undefined {
		return this.tryGetRuleContext(0, Bottom_linesContext);
	}
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AT);
		} else {
			return this.getToken(cobolParser.AT, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinage) {
			listener.enterLinage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinage) {
			listener.exitLinage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinage) {
			return visitor.visitLinage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bottom_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bottom_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBottom_lines) {
			listener.enterBottom_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBottom_lines) {
			listener.exitBottom_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBottom_lines) {
			return visitor.visitBottom_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_lines) {
			listener.enterTop_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_lines) {
			listener.exitTop_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_lines) {
			return visitor.visitTop_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line) {
			listener.enterFooting_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line) {
			listener.exitFooting_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line) {
			return visitor.visitFooting_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size) {
			listener.enterPage_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size) {
			listener.exitPage_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size) {
			return visitor.visitPage_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_recContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public rec_name(): Rec_nameContext[];
	public rec_name(i: number): Rec_nameContext;
	public rec_name(i?: number): Rec_nameContext | Rec_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_nameContext);
		} else {
			return this.getRuleContext(i, Rec_nameContext);
		}
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_rec) {
			listener.enterData_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_rec) {
			listener.exitData_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_rec) {
			return visitor.visitData_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_name) {
			listener.enterRec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_name) {
			listener.exitRec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_name) {
			return visitor.visitRec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_idContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(cobolParser.OF, 0); }
	public value_of_id_definition(): Value_of_id_definitionContext {
		return this.getRuleContext(0, Value_of_id_definitionContext);
	}
	public ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ID, 0); }
	public FILE_ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE_ID, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id) {
			listener.enterValue_of_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id) {
			listener.exitValue_of_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id) {
			return visitor.visitValue_of_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_id_definitionContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id_definition) {
			listener.enterValue_of_id_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id_definition) {
			listener.exitValue_of_id_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id_definition) {
			return visitor.visitValue_of_id_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(cobolParser.LABEL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_label; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_definition(): Record_definitionContext {
		return this.getRuleContext(0, Record_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord) {
			listener.enterRecord(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord) {
			listener.exitRecord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord) {
			return visitor.visitRecord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_definitionContext extends ParserRuleContext {
	public longest_rec(): Longest_recContext | undefined {
		return this.tryGetRuleContext(0, Longest_recContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public shortest_rec(): Shortest_recContext | undefined {
		return this.tryGetRuleContext(0, Shortest_recContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_definition) {
			listener.enterRecord_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_definition) {
			listener.exitRecord_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_definition) {
			return visitor.visitRecord_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Depending_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_depending_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDepending_item) {
			listener.enterDepending_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDepending_item) {
			listener.exitDepending_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDepending_item) {
			return visitor.visitDepending_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Shortest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_shortest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterShortest_rec) {
			listener.enterShortest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitShortest_rec) {
			listener.exitShortest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitShortest_rec) {
			return visitor.visitShortest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Longest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_longest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLongest_rec) {
			listener.enterLongest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLongest_rec) {
			listener.exitLongest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLongest_rec) {
			return visitor.visitLongest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public screen_description_clause(): Screen_description_clauseContext[];
	public screen_description_clause(i: number): Screen_description_clauseContext;
	public screen_description_clause(i?: number): Screen_description_clauseContext | Screen_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_clauseContext);
		} else {
			return this.getRuleContext(i, Screen_description_clauseContext);
		}
	}
	public screen_name(): Screen_nameContext | undefined {
		return this.tryGetRuleContext(0, Screen_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_entry) {
			listener.enterScreen_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_entry) {
			listener.exitScreen_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_entry) {
			return visitor.visitScreen_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_name) {
			listener.enterScreen_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_name) {
			listener.exitScreen_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_name) {
			return visitor.visitScreen_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_clauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOREGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOREGROUND_COLOR, 0); }
	public color_num(): Color_numContext | undefined {
		return this.tryGetRuleContext(0, Color_numContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public BACKGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BACKGROUND_COLOR, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTO, 0); }
	public SECURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SECURE, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REQUIRED, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FULL, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public BLINK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINK, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOS, 0); }
	public HIGHLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGHLIGHT, 0); }
	public LOWLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOWLIGHT, 0); }
	public REVERSE_VIDEO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSE_VIDEO, 0); }
	public UNDERLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINE, 0); }
	public src_number(): Src_numberContext | undefined {
		return this.tryGetRuleContext(0, Src_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public scr_pic_using(): Scr_pic_usingContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_usingContext);
	}
	public scr_pic_from(): Scr_pic_fromContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_fromContext);
	}
	public scr_pic_to(): Scr_pic_toContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_clause) {
			listener.enterScreen_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_clause) {
			listener.exitScreen_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_clause) {
			return visitor.visitScreen_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_using) {
			listener.enterScr_pic_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_using) {
			listener.exitScr_pic_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_using) {
			return visitor.visitScr_pic_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_fromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_from; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_from) {
			listener.enterScr_pic_from(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_from) {
			listener.exitScr_pic_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_from) {
			return visitor.visitScr_pic_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_toContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_to) {
			listener.enterScr_pic_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_to) {
			listener.exitScr_pic_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_to) {
			return visitor.visitScr_pic_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nonnumeric_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_nonnumeric_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNonnumeric_literal) {
			listener.enterNonnumeric_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNonnumeric_literal) {
			listener.exitNonnumeric_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNonnumeric_literal) {
			return visitor.visitNonnumeric_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_numberContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_number) {
			listener.enterSrc_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_number) {
			listener.exitSrc_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_number) {
			return visitor.visitSrc_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Color_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_color_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColor_num) {
			listener.enterColor_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColor_num) {
			listener.exitColor_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColor_num) {
			return visitor.visitColor_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_divisionContext extends ParserRuleContext {
	public IDENTIFICATION_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.IDENTIFICATION_IN_A_AREA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identification_division_paragraph(): Identification_division_paragraphContext[];
	public identification_division_paragraph(i: number): Identification_division_paragraphContext;
	public identification_division_paragraph(i?: number): Identification_division_paragraphContext | Identification_division_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identification_division_paragraphContext);
		} else {
			return this.getRuleContext(i, Identification_division_paragraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division) {
			listener.enterIdentification_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division) {
			listener.exitIdentification_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division) {
			return visitor.visitIdentification_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_division_paragraphContext extends ParserRuleContext {
	public program_id(): Program_idContext | undefined {
		return this.tryGetRuleContext(0, Program_idContext);
	}
	public author(): AuthorContext | undefined {
		return this.tryGetRuleContext(0, AuthorContext);
	}
	public installation(): InstallationContext | undefined {
		return this.tryGetRuleContext(0, InstallationContext);
	}
	public date_written(): Date_writtenContext | undefined {
		return this.tryGetRuleContext(0, Date_writtenContext);
	}
	public date_compiled(): Date_compiledContext | undefined {
		return this.tryGetRuleContext(0, Date_compiledContext);
	}
	public security(): SecurityContext | undefined {
		return this.tryGetRuleContext(0, SecurityContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public separator(): SeparatorContext | undefined {
		return this.tryGetRuleContext(0, SeparatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division_paragraph) {
			listener.enterIdentification_division_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division_paragraph) {
			listener.exitIdentification_division_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division_paragraph) {
			return visitor.visitIdentification_division_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_idContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(cobolParser.PROGRAM_ID, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public is_program(): Is_programContext | undefined {
		return this.tryGetRuleContext(0, Is_programContext);
	}
	public with_ident(): With_identContext | undefined {
		return this.tryGetRuleContext(0, With_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_id) {
			listener.enterProgram_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_id) {
			listener.exitProgram_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_id) {
			return visitor.visitProgram_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_name) {
			listener.enterProgram_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_name) {
			listener.exitProgram_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_name) {
			return visitor.visitProgram_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_programContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_program) {
			listener.enterIs_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_program) {
			listener.exitIs_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_program) {
			return visitor.visitIs_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_identContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(cobolParser.IDENT, 0); }
	public ident_string(): Ident_stringContext {
		return this.getRuleContext(0, Ident_stringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_ident; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_ident) {
			listener.enterWith_ident(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_ident) {
			listener.exitWith_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_ident) {
			return visitor.visitWith_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ident_stringContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ident_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdent_string) {
			listener.enterIdent_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdent_string) {
			listener.exitIdent_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdent_string) {
			return visitor.visitIdent_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_entryContext extends ParserRuleContext {
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_comment_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComment_entry) {
			listener.enterComment_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComment_entry) {
			listener.exitComment_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComment_entry) {
			return visitor.visitComment_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(cobolParser.AUTHOR, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor) {
			listener.enterAuthor(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor) {
			listener.exitAuthor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor) {
			return visitor.visitAuthor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(cobolParser.INSTALLATION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_installation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInstallation) {
			listener.enterInstallation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInstallation) {
			listener.exitInstallation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInstallation) {
			return visitor.visitInstallation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_writtenContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(cobolParser.DATE_WRITTEN, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_written; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_written) {
			listener.enterDate_written(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_written) {
			listener.exitDate_written(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_written) {
			return visitor.visitDate_written(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_compiledContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(cobolParser.DATE_COMPILED, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_compiled; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_compiled) {
			listener.enterDate_compiled(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_compiled) {
			listener.exitDate_compiled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_compiled) {
			return visitor.visitDate_compiled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(cobolParser.SECURITY, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_security; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSecurity) {
			listener.enterSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSecurity) {
			listener.exitSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSecurity) {
			return visitor.visitSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(cobolParser.OPTIONS, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public arithmetic(): ArithmeticContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_options_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticContext extends ParserRuleContext {
	public ARITHMETIC(): TerminalNode { return this.getToken(cobolParser.ARITHMETIC, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic) {
			listener.enterArithmetic(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic) {
			listener.exitArithmetic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic) {
			return visitor.visitArithmetic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_divisionContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(cobolParser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public configuration_section(): Configuration_sectionContext | undefined {
		return this.tryGetRuleContext(0, Configuration_sectionContext);
	}
	public input_output_section(): Input_output_sectionContext | undefined {
		return this.tryGetRuleContext(0, Input_output_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division) {
			listener.enterEnvironment_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division) {
			listener.exitEnvironment_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division) {
			return visitor.visitEnvironment_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Configuration_sectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(cobolParser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public source_computer(): Source_computerContext | undefined {
		return this.tryGetRuleContext(0, Source_computerContext);
	}
	public object_computer(): Object_computerContext | undefined {
		return this.tryGetRuleContext(0, Object_computerContext);
	}
	public special_names(): Special_namesContext | undefined {
		return this.tryGetRuleContext(0, Special_namesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_configuration_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConfiguration_section) {
			listener.enterConfiguration_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConfiguration_section) {
			listener.exitConfiguration_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConfiguration_section) {
			return visitor.visitConfiguration_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_output_sectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(cobolParser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_control(): File_controlContext | undefined {
		return this.tryGetRuleContext(0, File_controlContext);
	}
	public i_o_control(): I_o_controlContext | undefined {
		return this.tryGetRuleContext(0, I_o_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_output_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_output_section) {
			listener.enterInput_output_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_output_section) {
			listener.exitInput_output_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_output_section) {
			return visitor.visitInput_output_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_computerContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(cobolParser.SOURCE_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public with_debugging(): With_debuggingContext | undefined {
		return this.tryGetRuleContext(0, With_debuggingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_computer) {
			listener.enterSource_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_computer) {
			listener.exitSource_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_computer) {
			return visitor.visitSource_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Computer_typeContext extends ParserRuleContext {
	public ALPHA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHA, 0); }
	public I64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I64, 0); }
	public VAX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VAX, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_computer_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComputer_type) {
			listener.enterComputer_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComputer_type) {
			listener.exitComputer_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComputer_type) {
			return visitor.visitComputer_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_debuggingContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(cobolParser.DEBUGGING, 0); }
	public MODE(): TerminalNode { return this.getToken(cobolParser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_debugging; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_debugging) {
			listener.enterWith_debugging(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_debugging) {
			listener.exitWith_debugging(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_debugging) {
			return visitor.visitWith_debugging(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_computerContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(cobolParser.OBJECT_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public memory_size(): Memory_sizeContext | undefined {
		return this.tryGetRuleContext(0, Memory_sizeContext);
	}
	public program_collating(): Program_collatingContext | undefined {
		return this.tryGetRuleContext(0, Program_collatingContext);
	}
	public segment_limit(): Segment_limitContext | undefined {
		return this.tryGetRuleContext(0, Segment_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_object_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterObject_computer) {
			listener.enterObject_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitObject_computer) {
			listener.exitObject_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitObject_computer) {
			return visitor.visitObject_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_sizeContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(cobolParser.MEMORY, 0); }
	public memory_size_amount(): Memory_size_amountContext {
		return this.getRuleContext(0, Memory_size_amountContext);
	}
	public memory_size_unit(): Memory_size_unitContext {
		return this.getRuleContext(0, Memory_size_unitContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size) {
			listener.enterMemory_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size) {
			listener.exitMemory_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size) {
			return visitor.visitMemory_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_amountContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_amount; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_amount) {
			listener.enterMemory_size_amount(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_amount) {
			listener.exitMemory_size_amount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_amount) {
			return visitor.visitMemory_size_amount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_unitContext extends ParserRuleContext {
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_unit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_unit) {
			listener.enterMemory_size_unit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_unit) {
			listener.exitMemory_size_unit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_unit) {
			return visitor.visitMemory_size_unit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_collatingContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_collating; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_collating) {
			listener.enterProgram_collating(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_collating) {
			listener.exitProgram_collating(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_collating) {
			return visitor.visitProgram_collating(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_name) {
			listener.enterAlpha_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_name) {
			listener.exitAlpha_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_name) {
			return visitor.visitAlpha_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_limitContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(cobolParser.SEGMENT_LIMIT, 0); }
	public segment_number(): Segment_numberContext {
		return this.getRuleContext(0, Segment_numberContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_limit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_limit) {
			listener.enterSegment_limit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_limit) {
			listener.exitSegment_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_limit) {
			return visitor.visitSegment_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_number) {
			listener.enterSegment_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_number) {
			listener.exitSegment_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_number) {
			return visitor.visitSegment_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_namesContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(cobolParser.SPECIAL_NAMES, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public special_names_content(): Special_names_contentContext[];
	public special_names_content(i: number): Special_names_contentContext;
	public special_names_content(i?: number): Special_names_contentContext | Special_names_contentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Special_names_contentContext);
		} else {
			return this.getRuleContext(i, Special_names_contentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names) {
			listener.enterSpecial_names(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names) {
			listener.exitSpecial_names(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names) {
			return visitor.visitSpecial_names(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_names_contentContext extends ParserRuleContext {
	public predefined_device(): Predefined_deviceContext | undefined {
		return this.tryGetRuleContext(0, Predefined_deviceContext);
	}
	public device_name(): Device_nameContext | undefined {
		return this.tryGetRuleContext(0, Device_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arg_env(): Arg_envContext | undefined {
		return this.tryGetRuleContext(0, Arg_envContext);
	}
	public arg_env_name(): Arg_env_nameContext | undefined {
		return this.tryGetRuleContext(0, Arg_env_nameContext);
	}
	public C01(): TerminalNode | undefined { return this.tryGetToken(cobolParser.C01, 0); }
	public top_of_page_name(): Top_of_page_nameContext | undefined {
		return this.tryGetRuleContext(0, Top_of_page_nameContext);
	}
	public switch_(): Switch_Context | undefined {
		return this.tryGetRuleContext(0, Switch_Context);
	}
	public alphabet(): AlphabetContext | undefined {
		return this.tryGetRuleContext(0, AlphabetContext);
	}
	public symbolic_chars(): Symbolic_charsContext | undefined {
		return this.tryGetRuleContext(0, Symbolic_charsContext);
	}
	public class_(): Class_Context | undefined {
		return this.tryGetRuleContext(0, Class_Context);
	}
	public currency(): CurrencyContext | undefined {
		return this.tryGetRuleContext(0, CurrencyContext);
	}
	public DECIMAL_POINT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURSOR, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CRT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CRT, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names_content; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names_content) {
			listener.enterSpecial_names_content(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names_content) {
			listener.exitSpecial_names_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names_content) {
			return visitor.visitSpecial_names_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode[];
	public USER_DEFINED_WORD(i: number): TerminalNode;
	public USER_DEFINED_WORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.USER_DEFINED_WORD);
		} else {
			return this.getToken(cobolParser.USER_DEFINED_WORD, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OF);
		} else {
			return this.getToken(cobolParser.OF, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_qualified_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterQualified_data_item) {
			listener.enterQualified_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitQualified_data_item) {
			listener.exitQualified_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitQualified_data_item) {
			return visitor.visitQualified_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencyContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(cobolParser.CURRENCY, 0); }
	public currency_definition(): Currency_definitionContext {
		return this.getRuleContext(0, Currency_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency) {
			listener.enterCurrency(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency) {
			listener.exitCurrency(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency) {
			return visitor.visitCurrency(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_definitionContext extends ParserRuleContext {
	public literal_7(): Literal_7Context | undefined {
		return this.tryGetRuleContext(0, Literal_7Context);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL, 0); }
	public literal_8(): Literal_8Context | undefined {
		return this.tryGetRuleContext(0, Literal_8Context);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_definition) {
			listener.enterCurrency_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_definition) {
			listener.exitCurrency_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_definition) {
			return visitor.visitCurrency_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_7Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_7; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_7) {
			listener.enterLiteral_7(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_7) {
			listener.exitLiteral_7(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_7) {
			return visitor.visitLiteral_7(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_8Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_8; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_8) {
			listener.enterLiteral_8(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_8) {
			listener.exitLiteral_8(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_8) {
			return visitor.visitLiteral_8(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_Context extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(cobolParser.CLASS, 0); }
	public class_name(): Class_nameContext {
		return this.getRuleContext(0, Class_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public user_class(): User_classContext[];
	public user_class(i: number): User_classContext;
	public user_class(i?: number): User_classContext | User_classContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_classContext);
		} else {
			return this.getRuleContext(i, User_classContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_) {
			listener.enterClass_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_) {
			listener.exitClass_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_) {
			return visitor.visitClass_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_name) {
			listener.enterClass_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_name) {
			listener.exitClass_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_name) {
			return visitor.visitClass_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_classContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_class; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_class) {
			listener.enterUser_class(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_class) {
			listener.exitUser_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_class) {
			return visitor.visitUser_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbolic_charsContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(cobolParser.SYMBOLIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public symb_ch_definition(): Symb_ch_definitionContext[];
	public symb_ch_definition(i: number): Symb_ch_definitionContext;
	public symb_ch_definition(i?: number): Symb_ch_definitionContext | Symb_ch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_definitionContext);
		} else {
			return this.getRuleContext(i, Symb_ch_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbolic_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbolic_chars) {
			listener.enterSymbolic_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbolic_chars) {
			listener.exitSymbolic_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbolic_chars) {
			return visitor.visitSymbolic_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_definitionContext extends ParserRuleContext {
	public symb_ch_def_clause(): Symb_ch_def_clauseContext[];
	public symb_ch_def_clause(i: number): Symb_ch_def_clauseContext;
	public symb_ch_def_clause(i?: number): Symb_ch_def_clauseContext | Symb_ch_def_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_def_clauseContext);
		} else {
			return this.getRuleContext(i, Symb_ch_def_clauseContext);
		}
	}
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext | undefined {
		return this.tryGetRuleContext(0, Symb_ch_def_in_alphabetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_definition) {
			listener.enterSymb_ch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_definition) {
			listener.exitSymb_ch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_definition) {
			return visitor.visitSymb_ch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_clauseContext extends ParserRuleContext {
	public symbol_char(): Symbol_charContext[];
	public symbol_char(i: number): Symbol_charContext;
	public symbol_char(i?: number): Symbol_charContext | Symbol_charContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbol_charContext);
		} else {
			return this.getRuleContext(i, Symbol_charContext);
		}
	}
	public char_val(): Char_valContext[];
	public char_val(i: number): Char_valContext;
	public char_val(i?: number): Char_valContext | Char_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_valContext);
		} else {
			return this.getRuleContext(i, Char_valContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_clause) {
			listener.enterSymb_ch_def_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_clause) {
			listener.exitSymb_ch_def_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_clause) {
			return visitor.visitSymb_ch_def_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(cobolParser.IN, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_in_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_in_alphabet) {
			listener.enterSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_in_alphabet) {
			listener.exitSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_in_alphabet) {
			return visitor.visitSymb_ch_def_in_alphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbol_charContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbol_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbol_char) {
			listener.enterSymbol_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbol_char) {
			listener.exitSymbol_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbol_char) {
			return visitor.visitSymbol_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_valContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_val) {
			listener.enterChar_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_val) {
			listener.exitChar_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_val) {
			return visitor.visitChar_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetContext extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(cobolParser.ALPHABET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public alpha_value(): Alpha_valueContext {
		return this.getRuleContext(0, Alpha_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlphabet) {
			listener.enterAlphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlphabet) {
			listener.exitAlphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlphabet) {
			return visitor.visitAlphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_valueContext extends ParserRuleContext {
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EBCDIC, 0); }
	public user_alpha(): User_alphaContext[];
	public user_alpha(i: number): User_alphaContext;
	public user_alpha(i?: number): User_alphaContext | User_alphaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_alphaContext);
		} else {
			return this.getRuleContext(i, User_alphaContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_value) {
			listener.enterAlpha_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_value) {
			listener.exitAlpha_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_value) {
			return visitor.visitAlpha_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_alphaContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public same_literal(): Same_literalContext[];
	public same_literal(i: number): Same_literalContext;
	public same_literal(i?: number): Same_literalContext | Same_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_literalContext);
		} else {
			return this.getRuleContext(i, Same_literalContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_alpha; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_alpha) {
			listener.enterUser_alpha(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_alpha) {
			listener.exitUser_alpha(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_alpha) {
			return visitor.visitUser_alpha(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_literal) {
			listener.enterFirst_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_literal) {
			listener.exitFirst_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_literal) {
			return visitor.visitFirst_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_literal) {
			listener.enterLast_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_literal) {
			listener.exitLast_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_literal) {
			return visitor.visitLast_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_literal) {
			listener.enterSame_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_literal) {
			listener.exitSame_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_literal) {
			return visitor.visitSame_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_Context extends ParserRuleContext {
	public SWITCH(): TerminalNode { return this.getToken(cobolParser.SWITCH, 0); }
	public switch_num(): Switch_numContext {
		return this.getRuleContext(0, Switch_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public switch_name(): Switch_nameContext | undefined {
		return this.tryGetRuleContext(0, Switch_nameContext);
	}
	public switch_clause_on(): Switch_clause_onContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_onContext);
	}
	public switch_clause_off(): Switch_clause_offContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_offContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_) {
			listener.enterSwitch_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_) {
			listener.exitSwitch_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_) {
			return visitor.visitSwitch_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_onContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_on) {
			listener.enterSwitch_clause_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_on) {
			listener.exitSwitch_clause_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_on) {
			return visitor.visitSwitch_clause_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_offContext extends ParserRuleContext {
	public OFF(): TerminalNode { return this.getToken(cobolParser.OFF, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_off; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_off) {
			listener.enterSwitch_clause_off(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_off) {
			listener.exitSwitch_clause_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_off) {
			return visitor.visitSwitch_clause_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cond_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cond_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCond_name) {
			listener.enterCond_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCond_name) {
			listener.exitCond_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCond_name) {
			return visitor.visitCond_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_name) {
			listener.enterSwitch_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_name) {
			listener.exitSwitch_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_name) {
			return visitor.visitSwitch_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_num) {
			listener.enterSwitch_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_num) {
			listener.exitSwitch_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_num) {
			return visitor.visitSwitch_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_of_page_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_of_page_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_of_page_name) {
			listener.enterTop_of_page_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_of_page_name) {
			listener.exitTop_of_page_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_of_page_name) {
			return visitor.visitTop_of_page_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_deviceContext extends ParserRuleContext {
	public CARD_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CARD_READER, 0); }
	public PAPER_TAPE_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_READER, 0); }
	public CONSOLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONSOLE, 0); }
	public LINE_PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE_PRINTER, 0); }
	public PAPER_TAPE_PUNCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
	public SYSIN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSIN, 0); }
	public SYSOUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSOUT, 0); }
	public SYSERR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSERR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_device; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_device) {
			listener.enterPredefined_device(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_device) {
			listener.exitPredefined_device(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_device) {
			return visitor.visitPredefined_device(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Device_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_device_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDevice_name) {
			listener.enterDevice_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDevice_name) {
			listener.exitDevice_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDevice_name) {
			return visitor.visitDevice_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_envContext extends ParserRuleContext {
	public ARGUMENT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_NUMBER, 0); }
	public ARGUMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_VALUE, 0); }
	public ENVIRONMENT_NAME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_NAME, 0); }
	public ENVIRONMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env) {
			listener.enterArg_env(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env) {
			listener.exitArg_env(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env) {
			return visitor.visitArg_env(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_env_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env_name) {
			listener.enterArg_env_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env_name) {
			listener.exitArg_env_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env_name) {
			return visitor.visitArg_env_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_controlContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(cobolParser.FILE_CONTROL, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public select(): SelectContext[];
	public select(i: number): SelectContext;
	public select(i?: number): SelectContext | SelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectContext);
		} else {
			return this.getRuleContext(i, SelectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_control) {
			listener.enterFile_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_control) {
			listener.exitFile_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_control) {
			return visitor.visitFile_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(cobolParser.SELECT, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public assign_to(): Assign_toContext {
		return this.getRuleContext(0, Assign_toContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OPTIONAL, 0); }
	public reserve(): ReserveContext | undefined {
		return this.tryGetRuleContext(0, ReserveContext);
	}
	public organization(): OrganizationContext | undefined {
		return this.tryGetRuleContext(0, OrganizationContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public padding(): PaddingContext | undefined {
		return this.tryGetRuleContext(0, PaddingContext);
	}
	public record_delimiter(): Record_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Record_delimiterContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext[];
	public record_key(i: number): Record_keyContext;
	public record_key(i?: number): Record_keyContext | Record_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_keyContext);
		} else {
			return this.getRuleContext(i, Record_keyContext);
		}
	}
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect) {
			return visitor.visitSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public file_stat(): File_statContext {
		return this.getRuleContext(0, File_statContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_status; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_status) {
			listener.enterFile_status(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_status) {
			listener.exitFile_status(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_status) {
			return visitor.visitFile_status(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_stat; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_stat) {
			listener.enterFile_stat(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_stat) {
			listener.exitFile_stat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_stat) {
			return visitor.visitFile_stat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_keyContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_definition(): Record_key_definitionContext {
		return this.getRuleContext(0, Record_key_definitionContext);
	}
	public ALTERNATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALTERNATE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key) {
			listener.enterRecord_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key) {
			listener.exitRecord_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key) {
			return visitor.visitRecord_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_key_definitionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key_definition) {
			listener.enterRecord_key_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key_definition) {
			listener.exitRecord_key_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key_definition) {
			return visitor.visitRecord_key_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_modeContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ACCESS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IS);
		} else {
			return this.getToken(cobolParser.IS, i);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_access_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccess_mode) {
			listener.enterAccess_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccess_mode) {
			listener.exitAccess_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccess_mode) {
			return visitor.visitAccess_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(cobolParser.RESERVE, 0); }
	public reserve_num(): Reserve_numContext {
		return this.getRuleContext(0, Reserve_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve) {
			listener.enterReserve(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve) {
			listener.exitReserve(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve) {
			return visitor.visitReserve(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserve_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve_num) {
			listener.enterReserve_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve_num) {
			listener.exitReserve_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve_num) {
			return visitor.visitReserve_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_delimiterContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(cobolParser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode { return this.getToken(cobolParser.STANDARD_1, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_delimiter; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_delimiter) {
			listener.enterRecord_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_delimiter) {
			listener.exitRecord_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_delimiter) {
			return visitor.visitRecord_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(cobolParser.PADDING, 0); }
	public pad_char(): Pad_charContext {
		return this.getRuleContext(0, Pad_charContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_padding; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPadding) {
			listener.enterPadding(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPadding) {
			listener.exitPadding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPadding) {
			return visitor.visitPadding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pad_charContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pad_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPad_char) {
			listener.enterPad_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPad_char) {
			listener.exitPad_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPad_char) {
			return visitor.visitPad_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORGANIZATION, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_organization; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOrganization) {
			listener.enterOrganization(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOrganization) {
			listener.exitOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOrganization) {
			return visitor.visitOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(cobolParser.LOCK, 0); }
	public lock_mode_definition(): Lock_mode_definitionContext {
		return this.getRuleContext(0, Lock_mode_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode) {
			return visitor.visitLock_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_mode_definitionContext extends ParserRuleContext {
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MANUAL, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOMATIC, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROLLBACK, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode_definition) {
			listener.enterLock_mode_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode_definition) {
			listener.exitLock_mode_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode_definition) {
			return visitor.visitLock_mode_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Code_setContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(cobolParser.CODE_SET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_code_set; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCode_set) {
			listener.enterCode_set(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCode_set) {
			listener.exitCode_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCode_set) {
			return visitor.visitCode_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_containsContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(cobolParser.BLOCK, 0); }
	public blocksize(): BlocksizeContext {
		return this.getRuleContext(0, BlocksizeContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public smallest_block(): Smallest_blockContext | undefined {
		return this.tryGetRuleContext(0, Smallest_blockContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_block_contains; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlock_contains) {
			listener.enterBlock_contains(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlock_contains) {
			listener.exitBlock_contains(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlock_contains) {
			return visitor.visitBlock_contains(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smallest_blockContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smallest_block; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmallest_block) {
			listener.enterSmallest_block(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmallest_block) {
			listener.exitSmallest_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmallest_block) {
			return visitor.visitSmallest_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlocksizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_blocksize; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlocksize) {
			listener.enterBlocksize(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlocksize) {
			listener.exitBlocksize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlocksize) {
			return visitor.visitBlocksize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_toContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(cobolParser.ASSIGN, 0); }
	public assign_to_definition(): Assign_to_definitionContext {
		return this.getRuleContext(0, Assign_to_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to) {
			listener.enterAssign_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to) {
			listener.exitAssign_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to) {
			return visitor.visitAssign_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_to_definitionContext extends ParserRuleContext {
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to_definition) {
			listener.enterAssign_to_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to_definition) {
			listener.exitAssign_to_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to_definition) {
			return visitor.visitAssign_to_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public DISK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISK, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_controlContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(cobolParser.I_O_CONTROL, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply(): ApplyContext[];
	public apply(i: number): ApplyContext;
	public apply(i?: number): ApplyContext | ApplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ApplyContext);
		} else {
			return this.getRuleContext(i, ApplyContext);
		}
	}
	public same(): SameContext[];
	public same(i: number): SameContext;
	public same(i?: number): SameContext | SameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SameContext);
		} else {
			return this.getRuleContext(i, SameContext);
		}
	}
	public rerun(): RerunContext[];
	public rerun(i: number): RerunContext;
	public rerun(i?: number): RerunContext | RerunContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RerunContext);
		} else {
			return this.getRuleContext(i, RerunContext);
		}
	}
	public multiple_file(): Multiple_fileContext[];
	public multiple_file(i: number): Multiple_fileContext;
	public multiple_file(i?: number): Multiple_fileContext | Multiple_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_fileContext);
		} else {
			return this.getRuleContext(i, Multiple_fileContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control) {
			listener.enterI_o_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control) {
			listener.exitI_o_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control) {
			return visitor.visitI_o_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_fileContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public multiple_file_definition(): Multiple_file_definitionContext[];
	public multiple_file_definition(i: number): Multiple_file_definitionContext;
	public multiple_file_definition(i?: number): Multiple_file_definitionContext | Multiple_file_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_file_definitionContext);
		} else {
			return this.getRuleContext(i, Multiple_file_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file) {
			listener.enterMultiple_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file) {
			listener.exitMultiple_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file) {
			return visitor.visitMultiple_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_definitionContext extends ParserRuleContext {
	public multiple_file_name(): Multiple_file_nameContext {
		return this.getRuleContext(0, Multiple_file_nameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITION, 0); }
	public pos_integer(): Pos_integerContext | undefined {
		return this.tryGetRuleContext(0, Pos_integerContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_definition) {
			listener.enterMultiple_file_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_definition) {
			listener.exitMultiple_file_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_definition) {
			return visitor.visitMultiple_file_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_name) {
			listener.enterMultiple_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_name) {
			listener.exitMultiple_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_name) {
			return visitor.visitMultiple_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos_integerContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pos_integer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPos_integer) {
			listener.enterPos_integer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPos_integer) {
			listener.exitPos_integer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPos_integer) {
			return visitor.visitPos_integer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(cobolParser.RERUN, 0); }
	public rerun_definition(): Rerun_definitionContext {
		return this.getRuleContext(0, Rerun_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EVERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun) {
			listener.enterRerun(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun) {
			listener.exitRerun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun) {
			return visitor.visitRerun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_definitionContext extends ParserRuleContext {
	public rerun_def_file(): Rerun_def_fileContext | undefined {
		return this.tryGetRuleContext(0, Rerun_def_fileContext);
	}
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public clock_count(): Clock_countContext | undefined {
		return this.tryGetRuleContext(0, Clock_countContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CLOCK_UNITS, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_definition) {
			listener.enterRerun_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_definition) {
			listener.exitRerun_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_definition) {
			return visitor.visitRerun_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Clock_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_clock_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClock_count) {
			listener.enterClock_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClock_count) {
			listener.exitClock_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClock_count) {
			return visitor.visitClock_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_name) {
			listener.enterCondition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_name) {
			listener.exitCondition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_name) {
			return visitor.visitCondition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_def_fileContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public rec_count(): Rec_countContext | undefined {
		return this.tryGetRuleContext(0, Rec_countContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def_file) {
			listener.enterRerun_def_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def_file) {
			listener.exitRerun_def_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def_file) {
			return visitor.visitRerun_def_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_count) {
			listener.enterRec_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_count) {
			listener.exitRec_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_count) {
			return visitor.visitRec_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(cobolParser.SAME, 0); }
	public same_area_file(): Same_area_fileContext[];
	public same_area_file(i: number): Same_area_fileContext;
	public same_area_file(i?: number): Same_area_fileContext | Same_area_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_area_fileContext);
		} else {
			return this.getRuleContext(i, Same_area_fileContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame) {
			listener.enterSame(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame) {
			listener.exitSame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame) {
			return visitor.visitSame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_area_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_area_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_area_file) {
			listener.enterSame_area_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_area_file) {
			listener.exitSame_area_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_area_file) {
			return visitor.visitSame_area_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyContext extends ParserRuleContext {
	public APPLY(): TerminalNode { return this.getToken(cobolParser.APPLY, 0); }
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply_definition(): Apply_definitionContext[];
	public apply_definition(i: number): Apply_definitionContext;
	public apply_definition(i?: number): Apply_definitionContext | Apply_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Apply_definitionContext);
		} else {
			return this.getRuleContext(i, Apply_definitionContext);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply) {
			listener.enterApply(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply) {
			listener.exitApply(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply) {
			return visitor.visitApply(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Apply_definitionContext extends ParserRuleContext {
	public DEFERRED_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFERRED_WRITE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTENSION, 0); }
	public extend_amt(): Extend_amtContext | undefined {
		return this.tryGetRuleContext(0, Extend_amtContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FILL_SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILL_SIZE, 0); }
	public LOCK_HOLDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK_HOLDING, 0); }
	public MASS_INSERT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MASS_INSERT, 0); }
	public PREALLOCATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREALLOCATION, 0); }
	public preall_amt(): Preall_amtContext | undefined {
		return this.tryGetRuleContext(0, Preall_amtContext);
	}
	public CONTIGUOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS, 0); }
	public CONTIGUOUS_BEST_TRY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
	public PRINT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINT_CONTROL, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WINDOW, 0); }
	public window_ptrs(): Window_ptrsContext | undefined {
		return this.tryGetRuleContext(0, Window_ptrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply_definition) {
			listener.enterApply_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply_definition) {
			listener.exitApply_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply_definition) {
			return visitor.visitApply_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_ptrsContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_window_ptrs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWindow_ptrs) {
			listener.enterWindow_ptrs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWindow_ptrs) {
			listener.exitWindow_ptrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWindow_ptrs) {
			return visitor.visitWindow_ptrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Preall_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_preall_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPreall_amt) {
			listener.enterPreall_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPreall_amt) {
			listener.exitPreall_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPreall_amt) {
			return visitor.visitPreall_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extend_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_extend_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExtend_amt) {
			listener.enterExtend_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExtend_amt) {
			listener.exitExtend_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExtend_amt) {
			return visitor.visitExtend_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_arithmetic_operatorContext);
	}
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_arithmetic_operatorContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public ZEROS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZEROS, 0); }
	public ZEROES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZEROES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_expression) {
			listener.enterArithmetic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_expression) {
			listener.exitArithmetic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_expression) {
			return visitor.visitArithmetic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Binary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	public STAR_(): TerminalNode[];
	public STAR_(i: number): TerminalNode;
	public STAR_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.STAR_);
		} else {
			return this.getToken(cobolParser.STAR_, i);
		}
	}
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_binary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBinary_arithmetic_operator) {
			listener.enterBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBinary_arithmetic_operator) {
			listener.exitBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBinary_arithmetic_operator) {
			return visitor.visitBinary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnary_arithmetic_operator) {
			listener.enterUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnary_arithmetic_operator) {
			listener.exitUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnary_arithmetic_operator) {
			return visitor.visitUnary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public subscripting(): SubscriptingContext | undefined {
		return this.tryGetRuleContext(0, SubscriptingContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FUNCTION, 0); }
	public function_name(): Function_nameContext | undefined {
		return this.tryGetRuleContext(0, Function_nameContext);
	}
	public arguments(): ArgumentsContext | undefined {
		return this.tryGetRuleContext(0, ArgumentsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentsContext extends ParserRuleContext {
	public subscripting(): SubscriptingContext {
		return this.getRuleContext(0, SubscriptingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arguments; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArguments) {
			listener.enterArguments(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArguments) {
			listener.exitArguments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArguments) {
			return visitor.visitArguments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubscriptingContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALL);
		} else {
			return this.getToken(cobolParser.ALL, i);
		}
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subscripting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubscripting) {
			listener.enterSubscripting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubscripting) {
			listener.exitSubscripting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubscripting) {
			return visitor.visitSubscripting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reference_modificationContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public leftmost_character_position(): Leftmost_character_positionContext {
		return this.getRuleContext(0, Leftmost_character_positionContext);
	}
	public COLON_(): TerminalNode { return this.getToken(cobolParser.COLON_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public length(): LengthContext | undefined {
		return this.tryGetRuleContext(0, LengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reference_modification; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReference_modification) {
			listener.enterReference_modification(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReference_modification) {
			listener.exitReference_modification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReference_modification) {
			return visitor.visitReference_modification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Leftmost_character_positionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_leftmost_character_position; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLeftmost_character_position) {
			listener.enterLeftmost_character_position(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLeftmost_character_position) {
			listener.exitLeftmost_character_position(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLeftmost_character_position) {
			return visitor.visitLeftmost_character_position(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_length; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLength) {
			listener.enterLength(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLength) {
			listener.exitLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLength) {
			return visitor.visitLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_function_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFunction_name) {
			listener.enterFunction_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFunction_name) {
			listener.exitFunction_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFunction_name) {
			return visitor.visitFunction_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


