// Generated from src/vms_cobol/parser/cobol.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { cobolListener } from "./cobolListener";
import { cobolVisitor } from "./cobolVisitor";


export class cobolParser extends Parser {
	public static readonly DECLARATIVES_IN_A_AREA = 1;
	public static readonly END_IN_A_AREA = 2;
	public static readonly IDENTIFICATION_IN_A_AREA = 3;
	public static readonly ACCEPT = 4;
	public static readonly ACCESS = 5;
	public static readonly ADD = 6;
	public static readonly ADVANCING = 7;
	public static readonly AFTER = 8;
	public static readonly ALL = 9;
	public static readonly ALPHA = 10;
	public static readonly ALPHABET = 11;
	public static readonly ALPHABETIC = 12;
	public static readonly ALPHABETIC_LOWER = 13;
	public static readonly ALPHABETIC_UPPER = 14;
	public static readonly ALSO = 15;
	public static readonly ALTER = 16;
	public static readonly ALTERNATE = 17;
	public static readonly AND = 18;
	public static readonly APPLY = 19;
	public static readonly ARE = 20;
	public static readonly AREA = 21;
	public static readonly AREAS = 22;
	public static readonly ARGUMENT_NUMBER = 23;
	public static readonly ARGUMENT_VALUE = 24;
	public static readonly ARITHMETIC = 25;
	public static readonly ASCENDING = 26;
	public static readonly ASCII = 27;
	public static readonly ASSIGN = 28;
	public static readonly AT = 29;
	public static readonly AUTHOR = 30;
	public static readonly AUTO = 31;
	public static readonly AUTOMATIC = 32;
	public static readonly AUTOTERMINATE = 33;
	public static readonly BACKGROUND_COLOR = 34;
	public static readonly BEFORE = 35;
	public static readonly BELL = 36;
	public static readonly BINARY = 37;
	public static readonly BINARY_CHAR = 38;
	public static readonly BINARY_DOUBLE = 39;
	public static readonly BINARY_LONG = 40;
	public static readonly BINARY_SHORT = 41;
	public static readonly BLANK = 42;
	public static readonly BLINK = 43;
	public static readonly BLINKING = 44;
	public static readonly BLOCK = 45;
	public static readonly BOLD = 46;
	public static readonly BOTTOM = 47;
	public static readonly BY = 48;
	public static readonly C01 = 49;
	public static readonly CALL = 50;
	public static readonly CANCEL = 51;
	public static readonly CARD_READER = 52;
	public static readonly CF = 53;
	public static readonly CH = 54;
	public static readonly CHARACTER = 55;
	public static readonly CHARACTERS = 56;
	public static readonly CLASS = 57;
	public static readonly CLOCK_UNITS = 58;
	public static readonly CLOSE = 59;
	public static readonly CODE = 60;
	public static readonly CODE_SET = 61;
	public static readonly COLLATING = 62;
	public static readonly COLUMN = 63;
	public static readonly COMMA = 64;
	public static readonly COMMON = 65;
	public static readonly COMP = 66;
	public static readonly COMPUTATIONAL = 67;
	public static readonly COMPUTATIONAL_1 = 68;
	public static readonly COMPUTATIONAL_2 = 69;
	public static readonly COMPUTATIONAL_3 = 70;
	public static readonly COMPUTATIONAL_4 = 71;
	public static readonly COMPUTATIONAL_5 = 72;
	public static readonly COMPUTATIONAL_X = 73;
	public static readonly COMPUTE = 74;
	public static readonly COMP_1 = 75;
	public static readonly COMP_2 = 76;
	public static readonly COMP_3 = 77;
	public static readonly COMP_4 = 78;
	public static readonly COMP_5 = 79;
	public static readonly COMP_X = 80;
	public static readonly CONFIGURATION = 81;
	public static readonly CONSOLE = 82;
	public static readonly CONTAINS = 83;
	public static readonly CONTENT = 84;
	public static readonly CONTIGUOUS = 85;
	public static readonly CONTIGUOUS_BEST_TRY = 86;
	public static readonly CONTINUE = 87;
	public static readonly CONTROL = 88;
	public static readonly CONTROLS = 89;
	public static readonly CONVERSION = 90;
	public static readonly CONVERTING = 91;
	public static readonly COPY = 92;
	public static readonly CORR = 93;
	public static readonly CORRESPONDING = 94;
	public static readonly CRT = 95;
	public static readonly CURRENCY = 96;
	public static readonly CURRENT = 97;
	public static readonly CURSOR = 98;
	public static readonly DATA = 99;
	public static readonly DATE = 100;
	public static readonly DATE_COMPILED = 101;
	public static readonly DATE_WRITTEN = 102;
	public static readonly DAY = 103;
	public static readonly DAY_OF_WEEK = 104;
	public static readonly DE = 105;
	public static readonly DEBUGGING = 106;
	public static readonly DECIMAL_POINT = 107;
	public static readonly DECLARATIVES = 108;
	public static readonly DEFAULT = 109;
	public static readonly DEFERRED_WRITE = 110;
	public static readonly DELETE = 111;
	public static readonly DELIMITER = 112;
	public static readonly DEPENDING = 113;
	public static readonly DESCENDING = 114;
	public static readonly DESCRIPTOR = 115;
	public static readonly DETAIL = 116;
	public static readonly DISK = 117;
	public static readonly DISPLAY = 118;
	public static readonly DIVIDE = 119;
	public static readonly DIVISION = 120;
	public static readonly DOWN = 121;
	public static readonly DUPLICATES = 122;
	public static readonly DYNAMIC = 123;
	public static readonly EBCDIC = 124;
	public static readonly ECHO = 125;
	public static readonly EDITING = 126;
	public static readonly END = 127;
	public static readonly END_ACCEPT = 128;
	public static readonly END_ADD = 129;
	public static readonly END_CALL = 130;
	public static readonly END_COMPUTE = 131;
	public static readonly END_DELETE = 132;
	public static readonly END_DISPLAY = 133;
	public static readonly END_DIVIDE = 134;
	public static readonly END_EVALUATE = 135;
	public static readonly END_IF = 136;
	public static readonly END_MULTIPLY = 137;
	public static readonly END_OF_PAGE = 138;
	public static readonly END_PERFORM = 139;
	public static readonly END_READ = 140;
	public static readonly END_RETURN = 141;
	public static readonly END_REWRITE = 142;
	public static readonly END_SEARCH = 143;
	public static readonly END_START = 144;
	public static readonly END_STRING = 145;
	public static readonly END_SUBTRACT = 146;
	public static readonly END_UNSTRING = 147;
	public static readonly END_WRITE = 148;
	public static readonly ENVIRONMENT = 149;
	public static readonly ENVIRONMENT_NAME = 150;
	public static readonly ENVIRONMENT_VALUE = 151;
	public static readonly EOL = 152;
	public static readonly EOS = 153;
	public static readonly EQUAL = 154;
	public static readonly ERASE = 155;
	public static readonly ERROR = 156;
	public static readonly EVALUATE = 157;
	public static readonly EVERY = 158;
	public static readonly EXCEPTION = 159;
	public static readonly EXCLUSIVE = 160;
	public static readonly EXIT = 161;
	public static readonly EXTEND = 162;
	public static readonly EXTENSION = 163;
	public static readonly EXTERNAL = 164;
	public static readonly FAILURE = 165;
	public static readonly FALSE = 166;
	public static readonly FD = 167;
	public static readonly FILE = 168;
	public static readonly FILE_CONTROL = 169;
	public static readonly FILE_ID = 170;
	public static readonly FILLER = 171;
	public static readonly FILL_SIZE = 172;
	public static readonly FINAL = 173;
	public static readonly FIRST = 174;
	public static readonly FLOAT_EXTENDED = 175;
	public static readonly FLOAT_LONG = 176;
	public static readonly FLOAT_SHORT = 177;
	public static readonly FOOTING = 178;
	public static readonly FOR = 179;
	public static readonly FOREGROUND_COLOR = 180;
	public static readonly FROM = 181;
	public static readonly FULL = 182;
	public static readonly FUNCTION = 183;
	public static readonly GENERATE = 184;
	public static readonly GIVING = 185;
	public static readonly GLOBAL = 186;
	public static readonly GO = 187;
	public static readonly GREATER = 188;
	public static readonly GROUP = 189;
	public static readonly HEADING = 190;
	public static readonly HIGHLIGHT = 191;
	public static readonly HIGH_VALUE = 192;
	public static readonly HIGH_VALUES = 193;
	public static readonly I64 = 194;
	public static readonly ID = 195;
	public static readonly IDENT = 196;
	public static readonly IDENTIFICATION = 197;
	public static readonly IF = 198;
	public static readonly IN = 199;
	public static readonly INDEX = 200;
	public static readonly INDEXED = 201;
	public static readonly INDICATE = 202;
	public static readonly INITIAL = 203;
	public static readonly INITIALIZE = 204;
	public static readonly INITIATE = 205;
	public static readonly INPUT = 206;
	public static readonly INPUT_OUTPUT = 207;
	public static readonly INSPECT = 208;
	public static readonly INSTALLATION = 209;
	public static readonly INTO = 210;
	public static readonly INVALID = 211;
	public static readonly IS = 212;
	public static readonly I_O = 213;
	public static readonly I_O_CONTROL = 214;
	public static readonly JUST = 215;
	public static readonly JUSTIFIED = 216;
	public static readonly KEY = 217;
	public static readonly LABEL = 218;
	public static readonly LAST = 219;
	public static readonly LEADING = 220;
	public static readonly LEFT = 221;
	public static readonly LESS = 222;
	public static readonly LIMIT = 223;
	public static readonly LIMITS = 224;
	public static readonly LINAGE = 225;
	public static readonly LINE = 226;
	public static readonly LINES = 227;
	public static readonly LINE_PRINTER = 228;
	public static readonly LINKAGE = 229;
	public static readonly LOCK = 230;
	public static readonly LOCK_HOLDING = 231;
	public static readonly LOWLIGHT = 232;
	public static readonly LOW_VALUE = 233;
	public static readonly LOW_VALUES = 234;
	public static readonly MANUAL = 235;
	public static readonly MASS_INSERT = 236;
	public static readonly MEMORY = 237;
	public static readonly MERGE = 238;
	public static readonly MODE = 239;
	public static readonly MODULES = 240;
	public static readonly MOVE = 241;
	public static readonly MULTIPLE = 242;
	public static readonly MULTIPLY = 243;
	public static readonly NATIVE = 244;
	public static readonly NEGATIVE = 245;
	public static readonly NEXT = 246;
	public static readonly NO = 247;
	public static readonly NOT = 248;
	public static readonly NUMBER = 249;
	public static readonly NUMERIC = 250;
	public static readonly OBJECT_COMPUTER = 251;
	public static readonly OCCURS = 252;
	public static readonly OF = 253;
	public static readonly OFF = 254;
	public static readonly OMITTED = 255;
	public static readonly ON = 256;
	public static readonly OPEN = 257;
	public static readonly OPTIONAL = 258;
	public static readonly OPTIONS = 259;
	public static readonly OR = 260;
	public static readonly ORGANIZATION = 261;
	public static readonly OUTPUT = 262;
	public static readonly OVERFLOW = 263;
	public static readonly PACKED_DECIMAL = 264;
	public static readonly PADDING = 265;
	public static readonly PAGE = 266;
	public static readonly PAPER_TAPE_PUNCH = 267;
	public static readonly PAPER_TAPE_READER = 268;
	public static readonly PERFORM = 269;
	public static readonly PF = 270;
	public static readonly PH = 271;
	public static readonly PIC = 272;
	public static readonly PICTURE = 273;
	public static readonly PLUS = 274;
	public static readonly POINTER = 275;
	public static readonly POINTER_64 = 276;
	public static readonly POSITION = 277;
	public static readonly POSITIVE = 278;
	public static readonly PREALLOCATION = 279;
	public static readonly PRINTER = 280;
	public static readonly PRINT_CONTROL = 281;
	public static readonly PROCEDURE = 282;
	public static readonly PROCEED = 283;
	public static readonly PROGRAM = 284;
	public static readonly PROGRAM_ID = 285;
	public static readonly PROTECTED = 286;
	public static readonly QUOTE = 287;
	public static readonly QUOTES = 288;
	public static readonly RANDOM = 289;
	public static readonly RD = 290;
	public static readonly READ = 291;
	public static readonly RECORD = 292;
	public static readonly RECORDS = 293;
	public static readonly REDEFINES = 294;
	public static readonly REEL = 295;
	public static readonly REFERENCE = 296;
	public static readonly RELATIVE = 297;
	public static readonly RELEASE = 298;
	public static readonly REMAINDER = 299;
	public static readonly REMOVAL = 300;
	public static readonly RENAMES = 301;
	public static readonly REPLACE = 302;
	public static readonly REPLACING = 303;
	public static readonly REPORT = 304;
	public static readonly REPORTING = 305;
	public static readonly REPORTS = 306;
	public static readonly REQUIRED = 307;
	public static readonly RERUN = 308;
	public static readonly RESERVE = 309;
	public static readonly RESET = 310;
	public static readonly RETURN = 311;
	public static readonly REVERSED = 312;
	public static readonly REVERSE_VIDEO = 313;
	public static readonly REWIND = 314;
	public static readonly REWRITE = 315;
	public static readonly RF = 316;
	public static readonly RH = 317;
	public static readonly RIGHT = 318;
	public static readonly ROLLBACK = 319;
	public static readonly ROUNDED = 320;
	public static readonly SAME = 321;
	public static readonly SCREEN = 322;
	public static readonly SD = 323;
	public static readonly SEARCH = 324;
	public static readonly SECTION = 325;
	public static readonly SECURE = 326;
	public static readonly SECURITY = 327;
	public static readonly SEGMENT_LIMIT = 328;
	public static readonly SELECT = 329;
	public static readonly SEPARATE = 330;
	public static readonly SEQUENCE = 331;
	public static readonly SEQUENTIAL = 332;
	public static readonly SET = 333;
	public static readonly SIGN = 334;
	public static readonly SIGNED = 335;
	public static readonly SIZE = 336;
	public static readonly SORT = 337;
	public static readonly SORT_MERGE = 338;
	public static readonly SOURCE = 339;
	public static readonly SOURCE_COMPUTER = 340;
	public static readonly SPACE = 341;
	public static readonly SPACES = 342;
	public static readonly SPECIAL_NAMES = 343;
	public static readonly STANDARD = 344;
	public static readonly STANDARD_1 = 345;
	public static readonly STANDARD_2 = 346;
	public static readonly START = 347;
	public static readonly STATUS = 348;
	public static readonly STOP = 349;
	public static readonly STRING = 350;
	public static readonly SUBTRACT = 351;
	public static readonly SUCCESS = 352;
	public static readonly SUM = 353;
	public static readonly SUPPRESS = 354;
	public static readonly SWITCH = 355;
	public static readonly SYMBOL = 356;
	public static readonly SYMBOLIC = 357;
	public static readonly SYNC = 358;
	public static readonly SYNCHRONIZED = 359;
	public static readonly SYSERR = 360;
	public static readonly SYSIN = 361;
	public static readonly SYSOUT = 362;
	public static readonly TALLYING = 363;
	public static readonly TAPE = 364;
	public static readonly TERMINATE = 365;
	public static readonly THAN = 366;
	public static readonly THROUGH = 367;
	public static readonly THRU = 368;
	public static readonly TIME = 369;
	public static readonly TIMES = 370;
	public static readonly TO = 371;
	public static readonly TOP = 372;
	public static readonly TRAILING = 373;
	public static readonly TRUE = 374;
	public static readonly TYPE = 375;
	public static readonly UNDERLINE = 376;
	public static readonly UNDERLINED = 377;
	public static readonly UNIT = 378;
	public static readonly UNLOCK = 379;
	public static readonly UNSIGNED = 380;
	public static readonly UNSTRING = 381;
	public static readonly UP = 382;
	public static readonly UPON = 383;
	public static readonly USAGE = 384;
	public static readonly USE = 385;
	public static readonly USING = 386;
	public static readonly VALUE = 387;
	public static readonly VALUES = 388;
	public static readonly VARYING = 389;
	public static readonly VAX = 390;
	public static readonly WHEN = 391;
	public static readonly WINDOW = 392;
	public static readonly WITH = 393;
	public static readonly WORDS = 394;
	public static readonly WORKING_STORAGE = 395;
	public static readonly WRITE = 396;
	public static readonly YYYYDDD = 397;
	public static readonly YYYYMMDD = 398;
	public static readonly ZERO = 399;
	public static readonly ZEROES = 400;
	public static readonly ZEROS = 401;
	public static readonly OTHER = 402;
	public static readonly ANY = 403;
	public static readonly THEN = 404;
	public static readonly SENTENCE = 405;
	public static readonly ELSE = 406;
	public static readonly ALPHANUMERIC = 407;
	public static readonly NUMERIC_EDITED = 408;
	public static readonly ALPHANUMERIC_EDITED = 409;
	public static readonly ALLOWING = 410;
	public static readonly OTHERS = 411;
	public static readonly READERS = 412;
	public static readonly WRITERS = 413;
	public static readonly UPDATERS = 414;
	public static readonly UNTIL = 415;
	public static readonly TEST = 416;
	public static readonly PREVIOUS = 417;
	public static readonly PRIOR = 418;
	public static readonly REGARDLESS = 419;
	public static readonly DEPENDENCY = 420;
	public static readonly DICTIONARY = 421;
	public static readonly START_SLASH_ = 422;
	public static readonly START_STAR_ = 423;
	public static readonly EXCLAM_ = 424;
	public static readonly UNDER_ = 425;
	public static readonly PLUS_ = 426;
	public static readonly MINUS_ = 427;
	public static readonly STAR_ = 428;
	public static readonly SLASH_ = 429;
	public static readonly COMMA_ = 430;
	public static readonly SEMI_ = 431;
	public static readonly COLON_ = 432;
	public static readonly EQUAL_ = 433;
	public static readonly LT_ = 434;
	public static readonly LE_ = 435;
	public static readonly GE_ = 436;
	public static readonly GT_ = 437;
	public static readonly LPAREN_ = 438;
	public static readonly RPAREN_ = 439;
	public static readonly LBRACK_ = 440;
	public static readonly RBRACK_ = 441;
	public static readonly POINTER_ = 442;
	public static readonly ATP_ = 443;
	public static readonly DOT_ = 444;
	public static readonly LCURLY_ = 445;
	public static readonly RCURLY_ = 446;
	public static readonly STRING_LITERAL = 447;
	public static readonly NUMERIC_LITERAL = 448;
	public static readonly HEX_LITERAL = 449;
	public static readonly USER_DEFINED_WORD = 450;
	public static readonly START_FOUR_SPACES = 451;
	public static readonly WHITESPACE = 452;
	public static readonly NEWLINE = 453;
	public static readonly RULE_cobol_source = 0;
	public static readonly RULE_figurative_constant_witout_all_zero = 1;
	public static readonly RULE_figurative_constant_witout_all = 2;
	public static readonly RULE_figurative_constant_witout_zero = 3;
	public static readonly RULE_figurative_constant = 4;
	public static readonly RULE_separator = 5;
	public static readonly RULE_arithmetic_separator = 6;
	public static readonly RULE_line_comment = 7;
	public static readonly RULE_program = 8;
	public static readonly RULE_procedure_division = 9;
	public static readonly RULE_end_program = 10;
	public static readonly RULE_procedure_division_header = 11;
	public static readonly RULE_section = 12;
	public static readonly RULE_declaratives = 13;
	public static readonly RULE_declaratives_section = 14;
	public static readonly RULE_declarative_paragraph = 15;
	public static readonly RULE_paragraph = 16;
	public static readonly RULE_sentense = 17;
	public static readonly RULE_use_statement = 18;
	public static readonly RULE_group_data_name = 19;
	public static readonly RULE_use_on = 20;
	public static readonly RULE_section_header = 21;
	public static readonly RULE_paragraph_name = 22;
	public static readonly RULE_section_name = 23;
	public static readonly RULE_using = 24;
	public static readonly RULE_giving = 25;
	public static readonly RULE_procedure_test_line = 26;
	public static readonly RULE_statement = 27;
	public static readonly RULE_rewrite_statement = 28;
	public static readonly RULE_rewrite_rec_name = 29;
	public static readonly RULE_return_statement = 30;
	public static readonly RULE_smrg_file = 31;
	public static readonly RULE_release_statement = 32;
	public static readonly RULE_release_src_area = 33;
	public static readonly RULE_release_rec = 34;
	public static readonly RULE_record_statement = 35;
	public static readonly RULE_relation_type = 36;
	public static readonly RULE_path_name = 37;
	public static readonly RULE_read_statement = 38;
	public static readonly RULE_read_options = 39;
	public static readonly RULE_perform_statement = 40;
	public static readonly RULE_perform_times = 41;
	public static readonly RULE_with_test = 42;
	public static readonly RULE_perform_until = 43;
	public static readonly RULE_perform_varying = 44;
	public static readonly RULE_perform_range = 45;
	public static readonly RULE_perform_increm = 46;
	public static readonly RULE_perform_init = 47;
	public static readonly RULE_perform_var = 48;
	public static readonly RULE_open_statement = 49;
	public static readonly RULE_open_definition = 50;
	public static readonly RULE_open_file_attributes = 51;
	public static readonly RULE_multiply_statement = 52;
	public static readonly RULE_mult_num = 53;
	public static readonly RULE_merge_statement = 54;
	public static readonly RULE_output_proc = 55;
	public static readonly RULE_first_proc = 56;
	public static readonly RULE_end_proc = 57;
	public static readonly RULE_giving_file = 58;
	public static readonly RULE_infile = 59;
	public static readonly RULE_merge_on = 60;
	public static readonly RULE_mergefile = 61;
	public static readonly RULE_mergekey = 62;
	public static readonly RULE_inspect_statement = 63;
	public static readonly RULE_inspect_converting = 64;
	public static readonly RULE_convert_chars = 65;
	public static readonly RULE_compare_chars = 66;
	public static readonly RULE_inspect_replacing = 67;
	public static readonly RULE_replacing_all = 68;
	public static readonly RULE_replace_val = 69;
	public static readonly RULE_replacing_characters = 70;
	public static readonly RULE_replace_char = 71;
	public static readonly RULE_inspect_tallying = 72;
	public static readonly RULE_tallying_for = 73;
	public static readonly RULE_tallying_for_characters = 74;
	public static readonly RULE_delim_definition = 75;
	public static readonly RULE_tallying_for_all = 76;
	public static readonly RULE_compare_val = 77;
	public static readonly RULE_delim_val = 78;
	public static readonly RULE_tally_ctr = 79;
	public static readonly RULE_src_string = 80;
	public static readonly RULE_initiate_statement = 81;
	public static readonly RULE_initialize_statement = 82;
	public static readonly RULE_replacing = 83;
	public static readonly RULE_init_value = 84;
	public static readonly RULE_fld_name = 85;
	public static readonly RULE_move_statement = 86;
	public static readonly RULE_if_statement = 87;
	public static readonly RULE_generate_statement = 88;
	public static readonly RULE_report_item = 89;
	public static readonly RULE_exit_statement = 90;
	public static readonly RULE_exit_program_statement = 91;
	public static readonly RULE_go_to_statement = 92;
	public static readonly RULE_proc_name = 93;
	public static readonly RULE_evaluate_statement = 94;
	public static readonly RULE_when_condition = 95;
	public static readonly RULE_subj_item = 96;
	public static readonly RULE_divide_statement = 97;
	public static readonly RULE_divide_statement_form1 = 98;
	public static readonly RULE_divide_statement_form2 = 99;
	public static readonly RULE_remaind = 100;
	public static readonly RULE_divide_num = 101;
	public static readonly RULE_display_statement = 102;
	public static readonly RULE_display_statement_form1 = 103;
	public static readonly RULE_display_statement_form2 = 104;
	public static readonly RULE_display_statement_form3 = 105;
	public static readonly RULE_display_statement_form4 = 106;
	public static readonly RULE_src_item = 107;
	public static readonly RULE_display_upon = 108;
	public static readonly RULE_disp_f3_line = 109;
	public static readonly RULE_disp_f3_column = 110;
	public static readonly RULE_display_form1_clause = 111;
	public static readonly RULE_display_form2_clause = 112;
	public static readonly RULE_at_line_number = 113;
	public static readonly RULE_at_column_number = 114;
	public static readonly RULE_out_dest = 115;
	public static readonly RULE_delete_statement = 116;
	public static readonly RULE_continue_statement = 117;
	public static readonly RULE_compute_statement = 118;
	public static readonly RULE_close_statement = 119;
	public static readonly RULE_close_params = 120;
	public static readonly RULE_cancel_statement = 121;
	public static readonly RULE_call_statement = 122;
	public static readonly RULE_call_giving = 123;
	public static readonly RULE_call_using = 124;
	public static readonly RULE_using_arg = 125;
	public static readonly RULE_using_prefix = 126;
	public static readonly RULE_argument = 127;
	public static readonly RULE_prog_name = 128;
	public static readonly RULE_alter_statement = 129;
	public static readonly RULE_alter_new_proc = 130;
	public static readonly RULE_alter_proc = 131;
	public static readonly RULE_add_statement = 132;
	public static readonly RULE_add_grp = 133;
	public static readonly RULE_add_num = 134;
	public static readonly RULE_accept_statement = 135;
	public static readonly RULE_on_exception_variants = 136;
	public static readonly RULE_at_end_variants = 137;
	public static readonly RULE_on_size_variants = 138;
	public static readonly RULE_invalid_key_variants = 139;
	public static readonly RULE_accept_form6 = 140;
	public static readonly RULE_accept6_item = 141;
	public static readonly RULE_accept_form1 = 142;
	public static readonly RULE_accept_form2 = 143;
	public static readonly RULE_accept_form3 = 144;
	public static readonly RULE_accept_form4 = 145;
	public static readonly RULE_accept_form5 = 146;
	public static readonly RULE_accept_at = 147;
	public static readonly RULE_accept_at_line = 148;
	public static readonly RULE_accept_at_column = 149;
	public static readonly RULE_accept_form4_clause = 150;
	public static readonly RULE_accept_form3_clause = 151;
	public static readonly RULE_key_dest_item = 152;
	public static readonly RULE_def_value = 153;
	public static readonly RULE_protected_value = 154;
	public static readonly RULE_prot_fill_lit = 155;
	public static readonly RULE_prot_size_value = 156;
	public static readonly RULE_number_value = 157;
	public static readonly RULE_date_time = 158;
	public static readonly RULE_dest_item = 159;
	public static readonly RULE_input_source = 160;
	public static readonly RULE_at_end = 161;
	public static readonly RULE_on_exception = 162;
	public static readonly RULE_on_size = 163;
	public static readonly RULE_invalid_key = 164;
	public static readonly RULE_data_division = 165;
	public static readonly RULE_file_section = 166;
	public static readonly RULE_working_storage_section = 167;
	public static readonly RULE_linkage_section = 168;
	public static readonly RULE_report_section = 169;
	public static readonly RULE_screen_section = 170;
	public static readonly RULE_file_description_entry = 171;
	public static readonly RULE_sort_merge_file_description_entry = 172;
	public static readonly RULE_report_description_entry = 173;
	public static readonly RULE_fd_clause = 174;
	public static readonly RULE_record_description_entry = 175;
	public static readonly RULE_data_description_entry = 176;
	public static readonly RULE_level_number = 177;
	public static readonly RULE_data_description_clause = 178;
	public static readonly RULE_renames = 179;
	public static readonly RULE_rename_start = 180;
	public static readonly RULE_rename_end = 181;
	public static readonly RULE_value_is = 182;
	public static readonly RULE_value_is_definition = 183;
	public static readonly RULE_value_is_definition_part = 184;
	public static readonly RULE_value_is_definition_thru = 185;
	public static readonly RULE_external_name = 186;
	public static readonly RULE_ref_data_name = 187;
	public static readonly RULE_value_is_literal = 188;
	public static readonly RULE_occurs = 189;
	public static readonly RULE_indexed_by = 190;
	public static readonly RULE_ind_name = 191;
	public static readonly RULE_key_is = 192;
	public static readonly RULE_key_name = 193;
	public static readonly RULE_times_definition = 194;
	public static readonly RULE_table_size = 195;
	public static readonly RULE_min_times = 196;
	public static readonly RULE_max_times = 197;
	public static readonly RULE_report_group_description_entry = 198;
	public static readonly RULE_report_group_data_description = 199;
	public static readonly RULE_report_group_data_description_clause = 200;
	public static readonly RULE_sign_is = 201;
	public static readonly RULE_sum = 202;
	public static readonly RULE_control_foot_name = 203;
	public static readonly RULE_detail_report_group_name = 204;
	public static readonly RULE_sum_name = 205;
	public static readonly RULE_source_name = 206;
	public static readonly RULE_column_number = 207;
	public static readonly RULE_type_is_definition = 208;
	public static readonly RULE_type_control_name = 209;
	public static readonly RULE_next_group_definition = 210;
	public static readonly RULE_line_num_definition = 211;
	public static readonly RULE_line_num = 212;
	public static readonly RULE_rd_clause = 213;
	public static readonly RULE_footing_line_rd = 214;
	public static readonly RULE_last_detail_line = 215;
	public static readonly RULE_first_detail_line = 216;
	public static readonly RULE_heading_line = 217;
	public static readonly RULE_page_size_rd = 218;
	public static readonly RULE_control_name = 219;
	public static readonly RULE_report_code = 220;
	public static readonly RULE_usage = 221;
	public static readonly RULE_usage_definition = 222;
	public static readonly RULE_picture = 223;
	public static readonly RULE_character_string = 224;
	public static readonly RULE_char_str_part = 225;
	public static readonly RULE_other_data_item = 226;
	public static readonly RULE_data_name = 227;
	public static readonly RULE_sd_clause = 228;
	public static readonly RULE_report_is = 229;
	public static readonly RULE_report_name = 230;
	public static readonly RULE_linage = 231;
	public static readonly RULE_bottom_lines = 232;
	public static readonly RULE_top_lines = 233;
	public static readonly RULE_footing_line = 234;
	public static readonly RULE_page_size = 235;
	public static readonly RULE_data_rec = 236;
	public static readonly RULE_rec_name = 237;
	public static readonly RULE_value_of_id = 238;
	public static readonly RULE_value_of_id_definition = 239;
	public static readonly RULE_label = 240;
	public static readonly RULE_record = 241;
	public static readonly RULE_record_definition = 242;
	public static readonly RULE_depending_item = 243;
	public static readonly RULE_shortest_rec = 244;
	public static readonly RULE_longest_rec = 245;
	public static readonly RULE_screen_description_entry = 246;
	public static readonly RULE_screen_name = 247;
	public static readonly RULE_screen_description_clause = 248;
	public static readonly RULE_scr_pic_using = 249;
	public static readonly RULE_scr_pic_from = 250;
	public static readonly RULE_scr_pic_to = 251;
	public static readonly RULE_nonnumeric_literal = 252;
	public static readonly RULE_src_number = 253;
	public static readonly RULE_color_num = 254;
	public static readonly RULE_identification_division = 255;
	public static readonly RULE_identification_division_paragraph = 256;
	public static readonly RULE_program_id = 257;
	public static readonly RULE_program_name = 258;
	public static readonly RULE_is_program = 259;
	public static readonly RULE_with_ident = 260;
	public static readonly RULE_ident_string = 261;
	public static readonly RULE_comment_entry = 262;
	public static readonly RULE_author = 263;
	public static readonly RULE_installation = 264;
	public static readonly RULE_date_written = 265;
	public static readonly RULE_date_compiled = 266;
	public static readonly RULE_security = 267;
	public static readonly RULE_options_ = 268;
	public static readonly RULE_arithmetic = 269;
	public static readonly RULE_environment_division = 270;
	public static readonly RULE_configuration_section = 271;
	public static readonly RULE_input_output_section = 272;
	public static readonly RULE_source_computer = 273;
	public static readonly RULE_computer_type = 274;
	public static readonly RULE_with_debugging = 275;
	public static readonly RULE_object_computer = 276;
	public static readonly RULE_memory_size = 277;
	public static readonly RULE_memory_size_amount = 278;
	public static readonly RULE_memory_size_unit = 279;
	public static readonly RULE_program_collating = 280;
	public static readonly RULE_alpha_name = 281;
	public static readonly RULE_segment_limit = 282;
	public static readonly RULE_segment_number = 283;
	public static readonly RULE_special_names = 284;
	public static readonly RULE_special_names_content = 285;
	public static readonly RULE_qualified_data_item = 286;
	public static readonly RULE_currency = 287;
	public static readonly RULE_currency_definition = 288;
	public static readonly RULE_literal_7 = 289;
	public static readonly RULE_literal_8 = 290;
	public static readonly RULE_class_ = 291;
	public static readonly RULE_class_name = 292;
	public static readonly RULE_user_class = 293;
	public static readonly RULE_symbolic_chars = 294;
	public static readonly RULE_symb_ch_definition = 295;
	public static readonly RULE_symb_ch_def_clause = 296;
	public static readonly RULE_symb_ch_def_in_alphabet = 297;
	public static readonly RULE_symbol_char = 298;
	public static readonly RULE_char_val = 299;
	public static readonly RULE_alphabet = 300;
	public static readonly RULE_alpha_value = 301;
	public static readonly RULE_user_alpha = 302;
	public static readonly RULE_first_literal = 303;
	public static readonly RULE_last_literal = 304;
	public static readonly RULE_same_literal = 305;
	public static readonly RULE_switch_ = 306;
	public static readonly RULE_switch_clause_on = 307;
	public static readonly RULE_switch_clause_off = 308;
	public static readonly RULE_cond_name = 309;
	public static readonly RULE_switch_name = 310;
	public static readonly RULE_switch_num = 311;
	public static readonly RULE_top_of_page_name = 312;
	public static readonly RULE_predefined_device = 313;
	public static readonly RULE_device_name = 314;
	public static readonly RULE_arg_env = 315;
	public static readonly RULE_arg_env_name = 316;
	public static readonly RULE_file_control = 317;
	public static readonly RULE_select = 318;
	public static readonly RULE_file_status = 319;
	public static readonly RULE_file_stat = 320;
	public static readonly RULE_record_key = 321;
	public static readonly RULE_record_key_definition = 322;
	public static readonly RULE_access_mode = 323;
	public static readonly RULE_reserve = 324;
	public static readonly RULE_reserve_num = 325;
	public static readonly RULE_record_delimiter = 326;
	public static readonly RULE_padding = 327;
	public static readonly RULE_pad_char = 328;
	public static readonly RULE_organization = 329;
	public static readonly RULE_lock_mode = 330;
	public static readonly RULE_lock_mode_definition = 331;
	public static readonly RULE_code_set = 332;
	public static readonly RULE_block_contains = 333;
	public static readonly RULE_smallest_block = 334;
	public static readonly RULE_blocksize = 335;
	public static readonly RULE_assign_to = 336;
	public static readonly RULE_assign_to_definition = 337;
	public static readonly RULE_file_spec = 338;
	public static readonly RULE_file_name = 339;
	public static readonly RULE_i_o_control = 340;
	public static readonly RULE_multiple_file = 341;
	public static readonly RULE_multiple_file_definition = 342;
	public static readonly RULE_multiple_file_name = 343;
	public static readonly RULE_pos_integer = 344;
	public static readonly RULE_rerun = 345;
	public static readonly RULE_rerun_definition = 346;
	public static readonly RULE_clock_count = 347;
	public static readonly RULE_condition_name = 348;
	public static readonly RULE_rerun_def_file = 349;
	public static readonly RULE_rec_count = 350;
	public static readonly RULE_same = 351;
	public static readonly RULE_same_area_file = 352;
	public static readonly RULE_apply = 353;
	public static readonly RULE_apply_definition = 354;
	public static readonly RULE_window_ptrs = 355;
	public static readonly RULE_preall_amt = 356;
	public static readonly RULE_extend_amt = 357;
	public static readonly RULE_arithmetic_expression = 358;
	public static readonly RULE_constant = 359;
	public static readonly RULE_binary_arithmetic_operator = 360;
	public static readonly RULE_unary_arithmetic_operator = 361;
	public static readonly RULE_logic_expression = 362;
	public static readonly RULE_success_failure_condition = 363;
	public static readonly RULE_logic_condition = 364;
	public static readonly RULE_logic_operation = 365;
	public static readonly RULE_sign_condition = 366;
	public static readonly RULE_sign_condition_name = 367;
	public static readonly RULE_class_condition = 368;
	public static readonly RULE_class_condition_name = 369;
	public static readonly RULE_condition_operator = 370;
	public static readonly RULE_identifier_result = 371;
	public static readonly RULE_identifier = 372;
	public static readonly RULE_arguments = 373;
	public static readonly RULE_subscripting = 374;
	public static readonly RULE_reference_modification = 375;
	public static readonly RULE_leftmost_character_position = 376;
	public static readonly RULE_length = 377;
	public static readonly RULE_function_name = 378;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"cobol_source", "figurative_constant_witout_all_zero", "figurative_constant_witout_all", 
		"figurative_constant_witout_zero", "figurative_constant", "separator", 
		"arithmetic_separator", "line_comment", "program", "procedure_division", 
		"end_program", "procedure_division_header", "section", "declaratives", 
		"declaratives_section", "declarative_paragraph", "paragraph", "sentense", 
		"use_statement", "group_data_name", "use_on", "section_header", "paragraph_name", 
		"section_name", "using", "giving", "procedure_test_line", "statement", 
		"rewrite_statement", "rewrite_rec_name", "return_statement", "smrg_file", 
		"release_statement", "release_src_area", "release_rec", "record_statement", 
		"relation_type", "path_name", "read_statement", "read_options", "perform_statement", 
		"perform_times", "with_test", "perform_until", "perform_varying", "perform_range", 
		"perform_increm", "perform_init", "perform_var", "open_statement", "open_definition", 
		"open_file_attributes", "multiply_statement", "mult_num", "merge_statement", 
		"output_proc", "first_proc", "end_proc", "giving_file", "infile", "merge_on", 
		"mergefile", "mergekey", "inspect_statement", "inspect_converting", "convert_chars", 
		"compare_chars", "inspect_replacing", "replacing_all", "replace_val", 
		"replacing_characters", "replace_char", "inspect_tallying", "tallying_for", 
		"tallying_for_characters", "delim_definition", "tallying_for_all", "compare_val", 
		"delim_val", "tally_ctr", "src_string", "initiate_statement", "initialize_statement", 
		"replacing", "init_value", "fld_name", "move_statement", "if_statement", 
		"generate_statement", "report_item", "exit_statement", "exit_program_statement", 
		"go_to_statement", "proc_name", "evaluate_statement", "when_condition", 
		"subj_item", "divide_statement", "divide_statement_form1", "divide_statement_form2", 
		"remaind", "divide_num", "display_statement", "display_statement_form1", 
		"display_statement_form2", "display_statement_form3", "display_statement_form4", 
		"src_item", "display_upon", "disp_f3_line", "disp_f3_column", "display_form1_clause", 
		"display_form2_clause", "at_line_number", "at_column_number", "out_dest", 
		"delete_statement", "continue_statement", "compute_statement", "close_statement", 
		"close_params", "cancel_statement", "call_statement", "call_giving", "call_using", 
		"using_arg", "using_prefix", "argument", "prog_name", "alter_statement", 
		"alter_new_proc", "alter_proc", "add_statement", "add_grp", "add_num", 
		"accept_statement", "on_exception_variants", "at_end_variants", "on_size_variants", 
		"invalid_key_variants", "accept_form6", "accept6_item", "accept_form1", 
		"accept_form2", "accept_form3", "accept_form4", "accept_form5", "accept_at", 
		"accept_at_line", "accept_at_column", "accept_form4_clause", "accept_form3_clause", 
		"key_dest_item", "def_value", "protected_value", "prot_fill_lit", "prot_size_value", 
		"number_value", "date_time", "dest_item", "input_source", "at_end", "on_exception", 
		"on_size", "invalid_key", "data_division", "file_section", "working_storage_section", 
		"linkage_section", "report_section", "screen_section", "file_description_entry", 
		"sort_merge_file_description_entry", "report_description_entry", "fd_clause", 
		"record_description_entry", "data_description_entry", "level_number", 
		"data_description_clause", "renames", "rename_start", "rename_end", "value_is", 
		"value_is_definition", "value_is_definition_part", "value_is_definition_thru", 
		"external_name", "ref_data_name", "value_is_literal", "occurs", "indexed_by", 
		"ind_name", "key_is", "key_name", "times_definition", "table_size", "min_times", 
		"max_times", "report_group_description_entry", "report_group_data_description", 
		"report_group_data_description_clause", "sign_is", "sum", "control_foot_name", 
		"detail_report_group_name", "sum_name", "source_name", "column_number", 
		"type_is_definition", "type_control_name", "next_group_definition", "line_num_definition", 
		"line_num", "rd_clause", "footing_line_rd", "last_detail_line", "first_detail_line", 
		"heading_line", "page_size_rd", "control_name", "report_code", "usage", 
		"usage_definition", "picture", "character_string", "char_str_part", "other_data_item", 
		"data_name", "sd_clause", "report_is", "report_name", "linage", "bottom_lines", 
		"top_lines", "footing_line", "page_size", "data_rec", "rec_name", "value_of_id", 
		"value_of_id_definition", "label", "record", "record_definition", "depending_item", 
		"shortest_rec", "longest_rec", "screen_description_entry", "screen_name", 
		"screen_description_clause", "scr_pic_using", "scr_pic_from", "scr_pic_to", 
		"nonnumeric_literal", "src_number", "color_num", "identification_division", 
		"identification_division_paragraph", "program_id", "program_name", "is_program", 
		"with_ident", "ident_string", "comment_entry", "author", "installation", 
		"date_written", "date_compiled", "security", "options_", "arithmetic", 
		"environment_division", "configuration_section", "input_output_section", 
		"source_computer", "computer_type", "with_debugging", "object_computer", 
		"memory_size", "memory_size_amount", "memory_size_unit", "program_collating", 
		"alpha_name", "segment_limit", "segment_number", "special_names", "special_names_content", 
		"qualified_data_item", "currency", "currency_definition", "literal_7", 
		"literal_8", "class_", "class_name", "user_class", "symbolic_chars", "symb_ch_definition", 
		"symb_ch_def_clause", "symb_ch_def_in_alphabet", "symbol_char", "char_val", 
		"alphabet", "alpha_value", "user_alpha", "first_literal", "last_literal", 
		"same_literal", "switch_", "switch_clause_on", "switch_clause_off", "cond_name", 
		"switch_name", "switch_num", "top_of_page_name", "predefined_device", 
		"device_name", "arg_env", "arg_env_name", "file_control", "select", "file_status", 
		"file_stat", "record_key", "record_key_definition", "access_mode", "reserve", 
		"reserve_num", "record_delimiter", "padding", "pad_char", "organization", 
		"lock_mode", "lock_mode_definition", "code_set", "block_contains", "smallest_block", 
		"blocksize", "assign_to", "assign_to_definition", "file_spec", "file_name", 
		"i_o_control", "multiple_file", "multiple_file_definition", "multiple_file_name", 
		"pos_integer", "rerun", "rerun_definition", "clock_count", "condition_name", 
		"rerun_def_file", "rec_count", "same", "same_area_file", "apply", "apply_definition", 
		"window_ptrs", "preall_amt", "extend_amt", "arithmetic_expression", "constant", 
		"binary_arithmetic_operator", "unary_arithmetic_operator", "logic_expression", 
		"success_failure_condition", "logic_condition", "logic_operation", "sign_condition", 
		"sign_condition_name", "class_condition", "class_condition_name", "condition_operator", 
		"identifier_result", "identifier", "arguments", "subscripting", "reference_modification", 
		"leftmost_character_position", "length", "function_name",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'!'", "'_'", "'+'", "'-'", 
		undefined, undefined, "','", "';'", "':'", "'='", "'<'", "'<='", "'>='", 
		"'>'", "'('", "')'", "'['", "']'", "'^'", "'@'", "'.'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "DECLARATIVES_IN_A_AREA", "END_IN_A_AREA", "IDENTIFICATION_IN_A_AREA", 
		"ACCEPT", "ACCESS", "ADD", "ADVANCING", "AFTER", "ALL", "ALPHA", "ALPHABET", 
		"ALPHABETIC", "ALPHABETIC_LOWER", "ALPHABETIC_UPPER", "ALSO", "ALTER", 
		"ALTERNATE", "AND", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", 
		"ARGUMENT_VALUE", "ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", 
		"AUTHOR", "AUTO", "AUTOMATIC", "AUTOTERMINATE", "BACKGROUND_COLOR", "BEFORE", 
		"BELL", "BINARY", "BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", 
		"BLANK", "BLINK", "BLINKING", "BLOCK", "BOLD", "BOTTOM", "BY", "C01", 
		"CALL", "CANCEL", "CARD_READER", "CF", "CH", "CHARACTER", "CHARACTERS", 
		"CLASS", "CLOCK_UNITS", "CLOSE", "CODE", "CODE_SET", "COLLATING", "COLUMN", 
		"COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", 
		"COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTATIONAL_X", 
		"COMPUTE", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", 
		"CONFIGURATION", "CONSOLE", "CONTAINS", "CONTENT", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", 
		"CONTINUE", "CONTROL", "CONTROLS", "CONVERSION", "CONVERTING", "COPY", 
		"CORR", "CORRESPONDING", "CRT", "CURRENCY", "CURRENT", "CURSOR", "DATA", 
		"DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", "DE", "DEBUGGING", 
		"DECIMAL_POINT", "DECLARATIVES", "DEFAULT", "DEFERRED_WRITE", "DELETE", 
		"DELIMITER", "DEPENDING", "DESCENDING", "DESCRIPTOR", "DETAIL", "DISK", 
		"DISPLAY", "DIVIDE", "DIVISION", "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", 
		"ECHO", "EDITING", "END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", 
		"END_DELETE", "END_DISPLAY", "END_DIVIDE", "END_EVALUATE", "END_IF", "END_MULTIPLY", 
		"END_OF_PAGE", "END_PERFORM", "END_READ", "END_RETURN", "END_REWRITE", 
		"END_SEARCH", "END_START", "END_STRING", "END_SUBTRACT", "END_UNSTRING", 
		"END_WRITE", "ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", "EOL", 
		"EOS", "EQUAL", "ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", "EXCLUSIVE", 
		"EXIT", "EXTEND", "EXTENSION", "EXTERNAL", "FAILURE", "FALSE", "FD", "FILE", 
		"FILE_CONTROL", "FILE_ID", "FILLER", "FILL_SIZE", "FINAL", "FIRST", "FLOAT_EXTENDED", 
		"FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", "FOREGROUND_COLOR", "FROM", 
		"FULL", "FUNCTION", "GENERATE", "GIVING", "GLOBAL", "GO", "GREATER", "GROUP", 
		"HEADING", "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES", "I64", "ID", "IDENT", 
		"IDENTIFICATION", "IF", "IN", "INDEX", "INDEXED", "INDICATE", "INITIAL", 
		"INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", "INSPECT", "INSTALLATION", 
		"INTO", "INVALID", "IS", "I_O", "I_O_CONTROL", "JUST", "JUSTIFIED", "KEY", 
		"LABEL", "LAST", "LEADING", "LEFT", "LESS", "LIMIT", "LIMITS", "LINAGE", 
		"LINE", "LINES", "LINE_PRINTER", "LINKAGE", "LOCK", "LOCK_HOLDING", "LOWLIGHT", 
		"LOW_VALUE", "LOW_VALUES", "MANUAL", "MASS_INSERT", "MEMORY", "MERGE", 
		"MODE", "MODULES", "MOVE", "MULTIPLE", "MULTIPLY", "NATIVE", "NEGATIVE", 
		"NEXT", "NO", "NOT", "NUMBER", "NUMERIC", "OBJECT_COMPUTER", "OCCURS", 
		"OF", "OFF", "OMITTED", "ON", "OPEN", "OPTIONAL", "OPTIONS", "OR", "ORGANIZATION", 
		"OUTPUT", "OVERFLOW", "PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", 
		"PAPER_TAPE_READER", "PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", 
		"POINTER", "POINTER_64", "POSITION", "POSITIVE", "PREALLOCATION", "PRINTER", 
		"PRINT_CONTROL", "PROCEDURE", "PROCEED", "PROGRAM", "PROGRAM_ID", "PROTECTED", 
		"QUOTE", "QUOTES", "RANDOM", "RD", "READ", "RECORD", "RECORDS", "REDEFINES", 
		"REEL", "REFERENCE", "RELATIVE", "RELEASE", "REMAINDER", "REMOVAL", "RENAMES", 
		"REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS", "REQUIRED", 
		"RERUN", "RESERVE", "RESET", "RETURN", "REVERSED", "REVERSE_VIDEO", "REWIND", 
		"REWRITE", "RF", "RH", "RIGHT", "ROLLBACK", "ROUNDED", "SAME", "SCREEN", 
		"SD", "SEARCH", "SECTION", "SECURE", "SECURITY", "SEGMENT_LIMIT", "SELECT", 
		"SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SIGN", "SIGNED", "SIZE", 
		"SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", "SPACE", "SPACES", 
		"SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", "START", "STATUS", 
		"STOP", "STRING", "SUBTRACT", "SUCCESS", "SUM", "SUPPRESS", "SWITCH", 
		"SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", "SYSOUT", 
		"TALLYING", "TAPE", "TERMINATE", "THAN", "THROUGH", "THRU", "TIME", "TIMES", 
		"TO", "TOP", "TRAILING", "TRUE", "TYPE", "UNDERLINE", "UNDERLINED", "UNIT", 
		"UNLOCK", "UNSIGNED", "UNSTRING", "UP", "UPON", "USAGE", "USE", "USING", 
		"VALUE", "VALUES", "VARYING", "VAX", "WHEN", "WINDOW", "WITH", "WORDS", 
		"WORKING_STORAGE", "WRITE", "YYYYDDD", "YYYYMMDD", "ZERO", "ZEROES", "ZEROS", 
		"OTHER", "ANY", "THEN", "SENTENCE", "ELSE", "ALPHANUMERIC", "NUMERIC_EDITED", 
		"ALPHANUMERIC_EDITED", "ALLOWING", "OTHERS", "READERS", "WRITERS", "UPDATERS", 
		"UNTIL", "TEST", "PREVIOUS", "PRIOR", "REGARDLESS", "DEPENDENCY", "DICTIONARY", 
		"START_SLASH_", "START_STAR_", "EXCLAM_", "UNDER_", "PLUS_", "MINUS_", 
		"STAR_", "SLASH_", "COMMA_", "SEMI_", "COLON_", "EQUAL_", "LT_", "LE_", 
		"GE_", "GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", "POINTER_", 
		"ATP_", "DOT_", "LCURLY_", "RCURLY_", "STRING_LITERAL", "NUMERIC_LITERAL", 
		"HEX_LITERAL", "USER_DEFINED_WORD", "START_FOUR_SPACES", "WHITESPACE", 
		"NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(cobolParser._LITERAL_NAMES, cobolParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return cobolParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "cobol.g4"; }

	// @Override
	public get ruleNames(): string[] { return cobolParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return cobolParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(cobolParser._ATN, this);
	}
	// @RuleVersion(0)
	public cobol_source(): Cobol_sourceContext {
		let _localctx: Cobol_sourceContext = new Cobol_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, cobolParser.RULE_cobol_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 762;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IDENTIFICATION_IN_A_AREA || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				this.state = 760;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.IDENTIFICATION_IN_A_AREA:
					{
					this.state = 758;
					this.program();
					}
					break;
				case cobolParser.START_SLASH_:
				case cobolParser.START_STAR_:
				case cobolParser.COMMA_:
				case cobolParser.SEMI_:
				case cobolParser.START_FOUR_SPACES:
				case cobolParser.WHITESPACE:
				case cobolParser.NEWLINE:
					{
					this.state = 759;
					this.separator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 765;
			this.match(cobolParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant_witout_all_zero(): Figurative_constant_witout_all_zeroContext {
		let _localctx: Figurative_constant_witout_all_zeroContext = new Figurative_constant_witout_all_zeroContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, cobolParser.RULE_figurative_constant_witout_all_zero);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 767;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.HIGH_VALUE || _la === cobolParser.HIGH_VALUES || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant_witout_all(): Figurative_constant_witout_allContext {
		let _localctx: Figurative_constant_witout_allContext = new Figurative_constant_witout_allContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, cobolParser.RULE_figurative_constant_witout_all);
		try {
			this.state = 771;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 769;
				this.figurative_constant_witout_all_zero();
				}
				break;
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 770;
				this.match(cobolParser.ZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant_witout_zero(): Figurative_constant_witout_zeroContext {
		let _localctx: Figurative_constant_witout_zeroContext = new Figurative_constant_witout_zeroContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, cobolParser.RULE_figurative_constant_witout_zero);
		try {
			this.state = 777;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 773;
				this.figurative_constant_witout_all_zero();
				}
				break;
			case cobolParser.ALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 774;
				this.match(cobolParser.ALL);
				this.state = 775;
				this.match(cobolParser.WHITESPACE);
				this.state = 776;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant(): Figurative_constantContext {
		let _localctx: Figurative_constantContext = new Figurative_constantContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, cobolParser.RULE_figurative_constant);
		try {
			this.state = 781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 779;
				this.figurative_constant_witout_zero();
				}
				break;
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 780;
				this.match(cobolParser.ZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public separator(): SeparatorContext {
		let _localctx: SeparatorContext = new SeparatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, cobolParser.RULE_separator);
		try {
			this.state = 789;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 783;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 784;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 785;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.COMMA_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 786;
				this.match(cobolParser.COMMA_);
				}
				break;
			case cobolParser.SEMI_:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 787;
				this.match(cobolParser.SEMI_);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 788;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic_separator(): Arithmetic_separatorContext {
		let _localctx: Arithmetic_separatorContext = new Arithmetic_separatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, cobolParser.RULE_arithmetic_separator);
		try {
			this.state = 795;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 791;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 792;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 793;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 794;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_comment(): Line_commentContext {
		let _localctx: Line_commentContext = new Line_commentContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, cobolParser.RULE_line_comment);
		let _la: number;
		try {
			this.state = 813;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_SLASH_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 797;
				this.match(cobolParser.START_SLASH_);
				this.state = 801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
					{
					{
					this.state = 798;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 803;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 804;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 805;
				this.match(cobolParser.START_STAR_);
				this.state = 809;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
					{
					{
					this.state = 806;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 811;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 812;
				this.match(cobolParser.NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, cobolParser.RULE_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 815;
			this.identification_division();
			this.state = 817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ENVIRONMENT) {
				{
				this.state = 816;
				this.environment_division();
				}
			}

			this.state = 820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATA) {
				{
				this.state = 819;
				this.data_division();
				}
			}

			this.state = 823;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROCEDURE) {
				{
				this.state = 822;
				this.procedure_division();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division(): Procedure_divisionContext {
		let _localctx: Procedure_divisionContext = new Procedure_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, cobolParser.RULE_procedure_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 825;
			this.procedure_division_header();
			this.state = 827;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DECLARATIVES_IN_A_AREA) {
				{
				this.state = 826;
				this.declaratives();
				}
			}

			this.state = 853;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 18, this._ctx) ) {
			case 1:
				{
				this.state = 838;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 829;
						this.section();
						this.state = 833;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 830;
								this.separator();
								}
								}
							}
							this.state = 835;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
						}
						}
						}
					}
					this.state = 840;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				}
				}
				break;

			case 2:
				{
				this.state = 850;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 841;
						this.paragraph();
						this.state = 845;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 842;
								this.separator();
								}
								}
							}
							this.state = 847;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
						}
						}
						}
					}
					this.state = 852;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
				}
				}
				break;
			}
			this.state = 862;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 20, this._ctx) ) {
			case 1:
				{
				this.state = 858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 855;
					this.separator();
					}
					}
					this.state = 860;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 861;
				this.end_program();
				}
				break;
			}
			this.state = 879;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 867;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 864;
							this.separator();
							}
							}
						}
						this.state = 869;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
					}
					this.state = 870;
					this.procedure_test_line();
					this.state = 874;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 871;
							this.separator();
							}
							}
						}
						this.state = 876;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
					}
					}
					}
				}
				this.state = 881;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public end_program(): End_programContext {
		let _localctx: End_programContext = new End_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, cobolParser.RULE_end_program);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 882;
			this.match(cobolParser.END_IN_A_AREA);
			this.state = 884;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 883;
				this.separator();
				}
				}
				this.state = 886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 888;
			this.match(cobolParser.PROGRAM);
			this.state = 896;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 26, this._ctx) ) {
			case 1:
				{
				this.state = 890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 889;
					this.separator();
					}
					}
					this.state = 892;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 894;
				this.program_name();
				}
				break;
			}
			this.state = 901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 898;
				this.separator();
				}
				}
				this.state = 903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 904;
			this.match(cobolParser.DOT_);
			this.state = 908;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 28, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 905;
					this.separator();
					}
					}
				}
				this.state = 910;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 28, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division_header(): Procedure_division_headerContext {
		let _localctx: Procedure_division_headerContext = new Procedure_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, cobolParser.RULE_procedure_division_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 911;
			this.match(cobolParser.PROCEDURE);
			this.state = 913;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 912;
				this.separator();
				}
				}
				this.state = 915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 917;
			this.match(cobolParser.DIVISION);
			this.state = 925;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 31, this._ctx) ) {
			case 1:
				{
				this.state = 919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 918;
					this.separator();
					}
					}
					this.state = 921;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 923;
				this.using();
				}
				break;
			}
			this.state = 934;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 33, this._ctx) ) {
			case 1:
				{
				this.state = 928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 927;
					this.separator();
					}
					}
					this.state = 930;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 932;
				this.giving();
				}
				break;
			}
			this.state = 939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 936;
				this.separator();
				}
				}
				this.state = 941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 942;
			this.match(cobolParser.DOT_);
			this.state = 946;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 943;
					this.separator();
					}
					}
				}
				this.state = 948;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section(): SectionContext {
		let _localctx: SectionContext = new SectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, cobolParser.RULE_section);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 949;
			this.section_header();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives(): DeclarativesContext {
		let _localctx: DeclarativesContext = new DeclarativesContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, cobolParser.RULE_declaratives);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 951;
			this.match(cobolParser.DECLARATIVES_IN_A_AREA);
			this.state = 955;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 952;
				this.separator();
				}
				}
				this.state = 957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 958;
			this.match(cobolParser.DOT_);
			this.state = 962;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 959;
				this.separator();
				}
				}
				this.state = 964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 972;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 965;
				this.declaratives_section();
				this.state = 969;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 966;
					this.separator();
					}
					}
					this.state = 971;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 974;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 976;
			this.match(cobolParser.END_IN_A_AREA);
			this.state = 978;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 977;
				this.separator();
				}
				}
				this.state = 980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 982;
			this.match(cobolParser.DECLARATIVES);
			this.state = 986;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 983;
				this.separator();
				}
				}
				this.state = 988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 989;
			this.match(cobolParser.DOT_);
			this.state = 993;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 990;
					this.separator();
					}
					}
				}
				this.state = 995;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives_section(): Declaratives_sectionContext {
		let _localctx: Declaratives_sectionContext = new Declaratives_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, cobolParser.RULE_declaratives_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 996;
			this.section_header();
			this.state = 997;
			this.use_statement();
			this.state = 1007;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 999;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 998;
						this.separator();
						}
						}
						this.state = 1001;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1003;
					this.declarative_paragraph();
					}
					}
				}
				this.state = 1009;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declarative_paragraph(): Declarative_paragraphContext {
		let _localctx: Declarative_paragraphContext = new Declarative_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, cobolParser.RULE_declarative_paragraph);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1010;
			this.paragraph();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph(): ParagraphContext {
		let _localctx: ParagraphContext = new ParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, cobolParser.RULE_paragraph);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1012;
			this.paragraph_name();
			this.state = 1016;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 1013;
				this.separator();
				}
				}
				this.state = 1018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1019;
			this.match(cobolParser.DOT_);
			this.state = 1023;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1020;
					this.separator();
					}
					}
				}
				this.state = 1025;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
			}
			this.state = 1035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ADD) | (1 << cobolParser.ALTER))) !== 0) || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (cobolParser.CALL - 50)) | (1 << (cobolParser.CANCEL - 50)) | (1 << (cobolParser.CLOSE - 50)) | (1 << (cobolParser.COMPUTE - 50)))) !== 0) || ((((_la - 87)) & ~0x1F) === 0 && ((1 << (_la - 87)) & ((1 << (cobolParser.CONTINUE - 87)) | (1 << (cobolParser.DELETE - 87)) | (1 << (cobolParser.DISPLAY - 87)))) !== 0) || _la === cobolParser.DIVIDE || ((((_la - 157)) & ~0x1F) === 0 && ((1 << (_la - 157)) & ((1 << (cobolParser.EVALUATE - 157)) | (1 << (cobolParser.EXIT - 157)) | (1 << (cobolParser.GENERATE - 157)) | (1 << (cobolParser.GO - 157)))) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & ((1 << (cobolParser.IF - 198)) | (1 << (cobolParser.INITIALIZE - 198)) | (1 << (cobolParser.INITIATE - 198)) | (1 << (cobolParser.INSPECT - 198)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (cobolParser.MERGE - 238)) | (1 << (cobolParser.MOVE - 238)) | (1 << (cobolParser.MULTIPLY - 238)) | (1 << (cobolParser.OPEN - 238)) | (1 << (cobolParser.PERFORM - 238)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (cobolParser.READ - 291)) | (1 << (cobolParser.RECORD - 291)) | (1 << (cobolParser.RELEASE - 291)) | (1 << (cobolParser.RETURN - 291)) | (1 << (cobolParser.REWRITE - 291)))) !== 0)) {
				{
				{
				this.state = 1026;
				this.sentense();
				this.state = 1030;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1027;
						this.separator();
						}
						}
					}
					this.state = 1032;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
				}
				}
				}
				this.state = 1037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sentense(): SentenseContext {
		let _localctx: SentenseContext = new SentenseContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, cobolParser.RULE_sentense);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1045;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1038;
					this.statement();
					this.state = 1042;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1039;
							this.separator();
							}
							}
						}
						this.state = 1044;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1047;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1062;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
			case 1:
				{
				this.state = 1052;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 1049;
					this.separator();
					}
					}
					this.state = 1054;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1055;
				this.match(cobolParser.DOT_);
				this.state = 1059;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1056;
						this.separator();
						}
						}
					}
					this.state = 1061;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_statement(): Use_statementContext {
		let _localctx: Use_statementContext = new Use_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, cobolParser.RULE_use_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1064;
			this.match(cobolParser.USE);
			this.state = 1072;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 55, this._ctx) ) {
			case 1:
				{
				this.state = 1066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1065;
					this.separator();
					}
					}
					this.state = 1068;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1070;
				this.match(cobolParser.GLOBAL);
				}
				break;
			}
			this.state = 1075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1074;
				this.separator();
				}
				}
				this.state = 1077;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1143;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AFTER:
				{
				this.state = 1079;
				this.match(cobolParser.AFTER);
				this.state = 1087;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
				case 1:
					{
					this.state = 1081;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1080;
						this.separator();
						}
						}
						this.state = 1083;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1085;
					this.match(cobolParser.STANDARD);
					}
					break;
				}
				this.state = 1090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1089;
					this.separator();
					}
					}
					this.state = 1092;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1094;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ERROR || _la === cobolParser.EXCEPTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1095;
					this.separator();
					}
					}
					this.state = 1098;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1100;
				this.match(cobolParser.PROCEDURE);
				this.state = 1108;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 62, this._ctx) ) {
				case 1:
					{
					this.state = 1102;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1101;
						this.separator();
						}
						}
						this.state = 1104;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1106;
					this.match(cobolParser.ON);
					}
					break;
				}
				this.state = 1111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1110;
					this.separator();
					}
					}
					this.state = 1113;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1115;
				this.use_on();
				this.state = 1119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 1116;
					this.separator();
					}
					}
					this.state = 1121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1122;
				this.match(cobolParser.DOT_);
				this.state = 1126;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1123;
						this.separator();
						}
						}
					}
					this.state = 1128;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
				}
				}
				break;
			case cobolParser.BEFORE:
				{
				this.state = 1129;
				this.match(cobolParser.BEFORE);
				this.state = 1131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1130;
					this.separator();
					}
					}
					this.state = 1133;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1135;
				this.match(cobolParser.REPORTING);
				this.state = 1137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1136;
					this.separator();
					}
					}
					this.state = 1139;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1141;
				this.group_data_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1148;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 1145;
				this.separator();
				}
				}
				this.state = 1150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1151;
			this.match(cobolParser.DOT_);
			this.state = 1155;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1152;
					this.separator();
					}
					}
				}
				this.state = 1157;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_data_name(): Group_data_nameContext {
		let _localctx: Group_data_nameContext = new Group_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, cobolParser.RULE_group_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1158;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_on(): Use_onContext {
		let _localctx: Use_onContext = new Use_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, cobolParser.RULE_use_on);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1177;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1160;
				this.file_name();
				this.state = 1170;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 72, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1162;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1161;
							this.separator();
							}
							}
							this.state = 1164;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1166;
						this.file_name();
						}
						}
					}
					this.state = 1172;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 72, this._ctx);
				}
				}
				break;
			case cobolParser.INPUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1173;
				this.match(cobolParser.INPUT);
				}
				break;
			case cobolParser.OUTPUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1174;
				this.match(cobolParser.OUTPUT);
				}
				break;
			case cobolParser.I_O:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1175;
				this.match(cobolParser.I_O);
				}
				break;
			case cobolParser.EXTEND:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1176;
				this.match(cobolParser.EXTEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_header(): Section_headerContext {
		let _localctx: Section_headerContext = new Section_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, cobolParser.RULE_section_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1179;
			this.section_name();
			this.state = 1181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1180;
				this.separator();
				}
				}
				this.state = 1183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1185;
			this.match(cobolParser.SECTION);
			this.state = 1193;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 76, this._ctx) ) {
			case 1:
				{
				this.state = 1187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1186;
					this.separator();
					}
					}
					this.state = 1189;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1191;
				this.segment_number();
				}
				break;
			}
			this.state = 1198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 1195;
				this.separator();
				}
				}
				this.state = 1200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1201;
			this.match(cobolParser.DOT_);
			this.state = 1205;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 78, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1202;
					this.separator();
					}
					}
				}
				this.state = 1207;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 78, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph_name(): Paragraph_nameContext {
		let _localctx: Paragraph_nameContext = new Paragraph_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, cobolParser.RULE_paragraph_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1208;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_name(): Section_nameContext {
		let _localctx: Section_nameContext = new Section_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, cobolParser.RULE_section_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1210;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using(): UsingContext {
		let _localctx: UsingContext = new UsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, cobolParser.RULE_using);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1212;
			this.match(cobolParser.USING);
			this.state = 1214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1213;
				this.separator();
				}
				}
				this.state = 1216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1218;
			this.qualified_data_item();
			this.state = 1228;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 81, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1220;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1219;
						this.separator();
						}
						}
						this.state = 1222;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1224;
					this.qualified_data_item();
					}
					}
				}
				this.state = 1230;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 81, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public giving(): GivingContext {
		let _localctx: GivingContext = new GivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, cobolParser.RULE_giving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1231;
			this.match(cobolParser.GIVING);
			this.state = 1233;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1232;
				this.separator();
				}
				}
				this.state = 1235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1237;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_test_line(): Procedure_test_lineContext {
		let _localctx: Procedure_test_lineContext = new Procedure_test_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, cobolParser.RULE_procedure_test_line);
		let _la: number;
		try {
			this.state = 1258;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 85, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1239;
				this.arithmetic_expression(0);
				this.state = 1243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 1240;
					this.separator();
					}
					}
					this.state = 1245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1246;
				this.match(cobolParser.DOT_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1248;
				this.logic_expression(0);
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 1249;
					this.separator();
					}
					}
					this.state = 1254;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1255;
				this.match(cobolParser.DOT_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1257;
				this.separator();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, cobolParser.RULE_statement);
		try {
			this.state = 1290;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 86, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1260;
				this.accept_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1261;
				this.add_statement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1262;
				this.alter_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1263;
				this.call_statement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1264;
				this.cancel_statement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1265;
				this.close_statement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1266;
				this.compute_statement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1267;
				this.continue_statement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1268;
				this.delete_statement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1269;
				this.display_statement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1270;
				this.divide_statement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1271;
				this.evaluate_statement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1272;
				this.exit_statement();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1273;
				this.exit_program_statement();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1274;
				this.generate_statement();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1275;
				this.go_to_statement();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1276;
				this.if_statement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1277;
				this.initialize_statement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1278;
				this.initiate_statement();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1279;
				this.inspect_statement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1280;
				this.merge_statement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1281;
				this.move_statement();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1282;
				this.multiply_statement();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1283;
				this.open_statement();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1284;
				this.perform_statement();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1285;
				this.read_statement();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1286;
				this.record_statement();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1287;
				this.release_statement();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1288;
				this.return_statement();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1289;
				this.rewrite_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rewrite_statement(): Rewrite_statementContext {
		let _localctx: Rewrite_statementContext = new Rewrite_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, cobolParser.RULE_rewrite_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1292;
			this.match(cobolParser.REWRITE);
			this.state = 1294;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1293;
				this.separator();
				}
				}
				this.state = 1296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1298;
			this.rewrite_rec_name();
			this.state = 1312;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 90, this._ctx) ) {
			case 1:
				{
				this.state = 1300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1299;
					this.separator();
					}
					}
					this.state = 1302;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1304;
				this.match(cobolParser.FROM);
				this.state = 1306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1305;
					this.separator();
					}
					}
					this.state = 1308;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1310;
				this.src_item();
				}
				break;
			}
			this.state = 1335;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
			case 1:
				{
				this.state = 1315;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1314;
					this.separator();
					}
					}
					this.state = 1317;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1319;
				this.match(cobolParser.ALLOWING);
				this.state = 1321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1320;
					this.separator();
					}
					}
					this.state = 1323;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1325;
				this.match(cobolParser.NO);
				this.state = 1333;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
				case 1:
					{
					this.state = 1327;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1326;
						this.separator();
						}
						}
						this.state = 1329;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1331;
					this.match(cobolParser.OTHERS);
					}
					break;
				}
				}
				break;
			}
			this.state = 1344;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 97, this._ctx) ) {
			case 1:
				{
				this.state = 1338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1337;
					this.separator();
					}
					}
					this.state = 1340;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1342;
				this.invalid_key_variants();
				}
				break;
			}
			this.state = 1353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 99, this._ctx) ) {
			case 1:
				{
				this.state = 1347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1346;
					this.separator();
					}
					}
					this.state = 1349;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1351;
				this.match(cobolParser.END_REWRITE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rewrite_rec_name(): Rewrite_rec_nameContext {
		let _localctx: Rewrite_rec_nameContext = new Rewrite_rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, cobolParser.RULE_rewrite_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1355;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public return_statement(): Return_statementContext {
		let _localctx: Return_statementContext = new Return_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, cobolParser.RULE_return_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1357;
			this.match(cobolParser.RETURN);
			this.state = 1359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1358;
				this.separator();
				}
				}
				this.state = 1361;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1363;
			this.smrg_file();
			this.state = 1371;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 102, this._ctx) ) {
			case 1:
				{
				this.state = 1365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1364;
					this.separator();
					}
					}
					this.state = 1367;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1369;
				this.match(cobolParser.RECORD);
				}
				break;
			}
			this.state = 1386;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
			case 1:
				{
				this.state = 1374;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1373;
					this.separator();
					}
					}
					this.state = 1376;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1378;
				this.match(cobolParser.INTO);
				this.state = 1380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1379;
					this.separator();
					}
					}
					this.state = 1382;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1384;
				this.dest_item();
				}
				break;
			}
			this.state = 1389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1388;
				this.separator();
				}
				}
				this.state = 1391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1393;
			this.at_end();
			this.state = 1407;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 109, this._ctx) ) {
			case 1:
				{
				this.state = 1395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1394;
					this.separator();
					}
					}
					this.state = 1397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1399;
				this.match(cobolParser.NOT);
				this.state = 1401;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1400;
					this.separator();
					}
					}
					this.state = 1403;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1405;
				this.at_end();
				}
				break;
			}
			this.state = 1416;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 111, this._ctx) ) {
			case 1:
				{
				this.state = 1410;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1409;
					this.separator();
					}
					}
					this.state = 1412;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1414;
				this.match(cobolParser.END_RETURN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public smrg_file(): Smrg_fileContext {
		let _localctx: Smrg_fileContext = new Smrg_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, cobolParser.RULE_smrg_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1418;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public release_statement(): Release_statementContext {
		let _localctx: Release_statementContext = new Release_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, cobolParser.RULE_release_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1420;
			this.match(cobolParser.RELEASE);
			this.state = 1422;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1421;
				this.separator();
				}
				}
				this.state = 1424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1426;
			this.release_rec();
			this.state = 1440;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				{
				this.state = 1428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1427;
					this.separator();
					}
					}
					this.state = 1430;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1432;
				this.match(cobolParser.FROM);
				this.state = 1434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1433;
					this.separator();
					}
					}
					this.state = 1436;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1438;
				this.release_src_area();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public release_src_area(): Release_src_areaContext {
		let _localctx: Release_src_areaContext = new Release_src_areaContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, cobolParser.RULE_release_src_area);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1442;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public release_rec(): Release_recContext {
		let _localctx: Release_recContext = new Release_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, cobolParser.RULE_release_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1444;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_statement(): Record_statementContext {
		let _localctx: Record_statementContext = new Record_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, cobolParser.RULE_record_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1446;
			this.match(cobolParser.RECORD);
			this.state = 1448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1447;
				this.separator();
				}
				}
				this.state = 1450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1452;
			this.match(cobolParser.DEPENDENCY);
			this.state = 1454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1453;
				this.separator();
				}
				}
				this.state = 1456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1458;
			this.path_name();
			this.state = 1481;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				{
				this.state = 1460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1459;
					this.separator();
					}
					}
					this.state = 1462;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1464;
				this.match(cobolParser.TYPE);
				this.state = 1472;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
				case 1:
					{
					this.state = 1466;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1465;
						this.separator();
						}
						}
						this.state = 1468;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1470;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 1475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1474;
					this.separator();
					}
					}
					this.state = 1477;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1479;
				this.relation_type();
				}
				break;
			}
			this.state = 1498;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 126, this._ctx) ) {
			case 1:
				{
				this.state = 1484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1483;
					this.separator();
					}
					}
					this.state = 1486;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1494;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 1488;
					this.match(cobolParser.IN);
					this.state = 1490;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1489;
						this.separator();
						}
						}
						this.state = 1492;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 1496;
				this.match(cobolParser.DICTIONARY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relation_type(): Relation_typeContext {
		let _localctx: Relation_typeContext = new Relation_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, cobolParser.RULE_relation_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1500;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public path_name(): Path_nameContext {
		let _localctx: Path_nameContext = new Path_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, cobolParser.RULE_path_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1502;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public read_statement(): Read_statementContext {
		let _localctx: Read_statementContext = new Read_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, cobolParser.RULE_read_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1504;
			this.match(cobolParser.READ);
			this.state = 1506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1505;
				this.separator();
				}
				}
				this.state = 1508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1510;
			this.file_name();
			this.state = 1518;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 129, this._ctx) ) {
			case 1:
				{
				this.state = 1512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1511;
					this.separator();
					}
					}
					this.state = 1514;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1516;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.NEXT || _la === cobolParser.PREVIOUS || _la === cobolParser.PRIOR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1527;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 131, this._ctx) ) {
			case 1:
				{
				this.state = 1521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1520;
					this.separator();
					}
					}
					this.state = 1523;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1525;
				this.match(cobolParser.RECORD);
				}
				break;
			}
			this.state = 1542;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 134, this._ctx) ) {
			case 1:
				{
				this.state = 1530;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1529;
					this.separator();
					}
					}
					this.state = 1532;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1534;
				this.match(cobolParser.INTO);
				this.state = 1536;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1535;
					this.separator();
					}
					}
					this.state = 1538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1540;
				this.dest_item();
				}
				break;
			}
			this.state = 1604;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 147, this._ctx) ) {
			case 1:
				{
				this.state = 1545;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1544;
					this.separator();
					}
					}
					this.state = 1547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1549;
				this.read_options();
				this.state = 1572;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 140, this._ctx) ) {
				case 1:
					{
					this.state = 1551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1550;
						this.separator();
						}
						}
						this.state = 1553;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1555;
					this.match(cobolParser.KEY);
					this.state = 1563;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
					case 1:
						{
						this.state = 1557;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1556;
							this.separator();
							}
							}
							this.state = 1559;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1561;
						this.match(cobolParser.IS);
						}
						break;
					}
					this.state = 1566;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1565;
						this.separator();
						}
						}
						this.state = 1568;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1570;
					this.key_name();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 1575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1574;
					this.separator();
					}
					}
					this.state = 1577;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1579;
				this.match(cobolParser.KEY);
				this.state = 1587;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
				case 1:
					{
					this.state = 1581;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1580;
						this.separator();
						}
						}
						this.state = 1583;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1585;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 1590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1589;
					this.separator();
					}
					}
					this.state = 1592;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1594;
				this.key_name();
				this.state = 1602;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
				case 1:
					{
					this.state = 1596;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1595;
						this.separator();
						}
						}
						this.state = 1598;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1600;
					this.read_options();
					}
					break;
				}
				}
				break;
			}
			this.state = 1615;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 150, this._ctx) ) {
			case 1:
				{
				this.state = 1607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1606;
					this.separator();
					}
					}
					this.state = 1609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1613;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 149, this._ctx) ) {
				case 1:
					{
					this.state = 1611;
					this.at_end_variants();
					}
					break;

				case 2:
					{
					this.state = 1612;
					this.invalid_key_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 1624;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				{
				this.state = 1618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1617;
					this.separator();
					}
					}
					this.state = 1620;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1622;
				this.match(cobolParser.END_READ);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public read_options(): Read_optionsContext {
		let _localctx: Read_optionsContext = new Read_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, cobolParser.RULE_read_options);
		let _la: number;
		try {
			this.state = 1682;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LOCK:
			case cobolParser.NO:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1626;
					this.match(cobolParser.WITH);
					this.state = 1628;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1627;
						this.separator();
						}
						}
						this.state = 1630;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 1640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NO) {
					{
					this.state = 1634;
					this.match(cobolParser.NO);
					this.state = 1636;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1635;
						this.separator();
						}
						}
						this.state = 1638;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 1642;
				this.match(cobolParser.LOCK);
				}
				break;
			case cobolParser.REGARDLESS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1643;
				this.match(cobolParser.REGARDLESS);
				this.state = 1651;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 158, this._ctx) ) {
				case 1:
					{
					this.state = 1645;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1644;
						this.separator();
						}
						}
						this.state = 1647;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1649;
					this.match(cobolParser.OF);
					}
					break;
				}
				this.state = 1660;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 160, this._ctx) ) {
				case 1:
					{
					this.state = 1654;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1653;
						this.separator();
						}
						}
						this.state = 1656;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1658;
					this.match(cobolParser.LOCK);
					}
					break;
				}
				}
				break;
			case cobolParser.ALLOWING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1662;
				this.match(cobolParser.ALLOWING);
				this.state = 1664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1663;
					this.separator();
					}
					}
					this.state = 1666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1680;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.UPDATERS:
					{
					this.state = 1668;
					this.match(cobolParser.UPDATERS);
					}
					break;
				case cobolParser.READERS:
					{
					this.state = 1669;
					this.match(cobolParser.READERS);
					}
					break;
				case cobolParser.NO:
					{
					this.state = 1670;
					this.match(cobolParser.NO);
					this.state = 1678;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
					case 1:
						{
						this.state = 1672;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1671;
							this.separator();
							}
							}
							this.state = 1674;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1676;
						this.match(cobolParser.OTHERS);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_statement(): Perform_statementContext {
		let _localctx: Perform_statementContext = new Perform_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, cobolParser.RULE_perform_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1684;
			this.match(cobolParser.PERFORM);
			this.state = 1706;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				{
				this.state = 1686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1685;
					this.separator();
					}
					}
					this.state = 1688;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1690;
				this.first_proc();
				this.state = 1704;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
				case 1:
					{
					this.state = 1692;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1691;
						this.separator();
						}
						}
						this.state = 1694;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1696;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1698;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1697;
						this.separator();
						}
						}
						this.state = 1700;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1702;
					this.end_proc();
					}
					break;
				}
				}
				break;
			}
			this.state = 1718;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 173, this._ctx) ) {
			case 1:
				{
				this.state = 1709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1708;
					this.separator();
					}
					}
					this.state = 1711;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1716;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 172, this._ctx) ) {
				case 1:
					{
					this.state = 1713;
					this.perform_times();
					}
					break;

				case 2:
					{
					this.state = 1714;
					this.perform_until();
					}
					break;

				case 3:
					{
					this.state = 1715;
					this.perform_varying();
					}
					break;
				}
				}
				break;
			}
			this.state = 1738;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 177, this._ctx) ) {
			case 1:
				{
				this.state = 1727;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1721;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1720;
							this.separator();
							}
							}
							this.state = 1723;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1725;
						this.statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1729;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 1732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1731;
					this.separator();
					}
					}
					this.state = 1734;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 1736;
				this.match(cobolParser.END_PERFORM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_times(): Perform_timesContext {
		let _localctx: Perform_timesContext = new Perform_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, cobolParser.RULE_perform_times);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1742;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 1740;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 1741;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1744;
				this.separator();
				}
				}
				this.state = 1747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1749;
			this.match(cobolParser.TIMES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_test(): With_testContext {
		let _localctx: With_testContext = new With_testContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, cobolParser.RULE_with_test);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1757;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 1751;
				this.match(cobolParser.WITH);
				this.state = 1753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1752;
					this.separator();
					}
					}
					this.state = 1755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 1759;
			this.match(cobolParser.TEST);
			this.state = 1761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1760;
				this.separator();
				}
				}
				this.state = 1763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1765;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AFTER || _la === cobolParser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_until(): Perform_untilContext {
		let _localctx: Perform_untilContext = new Perform_untilContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, cobolParser.RULE_perform_until);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH || _la === cobolParser.TEST) {
				{
				this.state = 1767;
				this.with_test();
				this.state = 1769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1768;
					this.separator();
					}
					}
					this.state = 1771;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 1775;
			this.match(cobolParser.UNTIL);
			this.state = 1777;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1776;
				this.separator();
				}
				}
				this.state = 1779;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1781;
			this.logic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_varying(): Perform_varyingContext {
		let _localctx: Perform_varyingContext = new Perform_varyingContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, cobolParser.RULE_perform_varying);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1789;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH || _la === cobolParser.TEST) {
				{
				this.state = 1783;
				this.with_test();
				this.state = 1785;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1784;
					this.separator();
					}
					}
					this.state = 1787;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 1791;
			this.match(cobolParser.VARYING);
			this.state = 1793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1792;
				this.separator();
				}
				}
				this.state = 1795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1797;
			this.perform_range();
			this.state = 1799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1798;
				this.separator();
				}
				}
				this.state = 1801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1803;
			this.match(cobolParser.UNTIL);
			this.state = 1805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1804;
				this.separator();
				}
				}
				this.state = 1807;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1809;
			this.logic_expression(0);
			this.state = 1837;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1811;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1810;
						this.separator();
						}
						}
						this.state = 1813;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1815;
					this.match(cobolParser.AFTER);
					this.state = 1817;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1816;
						this.separator();
						}
						}
						this.state = 1819;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1821;
					this.perform_range();
					this.state = 1823;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1822;
						this.separator();
						}
						}
						this.state = 1825;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1827;
					this.match(cobolParser.UNTIL);
					this.state = 1829;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1828;
						this.separator();
						}
						}
						this.state = 1831;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1833;
					this.logic_expression(0);
					}
					}
				}
				this.state = 1839;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_range(): Perform_rangeContext {
		let _localctx: Perform_rangeContext = new Perform_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, cobolParser.RULE_perform_range);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1840;
			this.perform_var();
			this.state = 1842;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1841;
				this.separator();
				}
				}
				this.state = 1844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1846;
			this.match(cobolParser.FROM);
			this.state = 1848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1847;
				this.separator();
				}
				}
				this.state = 1850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1852;
			this.perform_init();
			this.state = 1854;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1853;
				this.separator();
				}
				}
				this.state = 1856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1858;
			this.match(cobolParser.BY);
			this.state = 1860;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1859;
				this.separator();
				}
				}
				this.state = 1862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 1864;
			this.perform_increm();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_increm(): Perform_incremContext {
		let _localctx: Perform_incremContext = new Perform_incremContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, cobolParser.RULE_perform_increm);
		try {
			this.state = 1868;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1866;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1867;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_init(): Perform_initContext {
		let _localctx: Perform_initContext = new Perform_initContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, cobolParser.RULE_perform_init);
		try {
			this.state = 1872;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1870;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1871;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_var(): Perform_varContext {
		let _localctx: Perform_varContext = new Perform_varContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, cobolParser.RULE_perform_var);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1874;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_statement(): Open_statementContext {
		let _localctx: Open_statementContext = new Open_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, cobolParser.RULE_open_statement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1932;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 213, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1876;
				this.match(cobolParser.OPEN);
				this.state = 1884;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1878;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1877;
							this.separator();
							}
							}
							this.state = 1880;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1882;
						this.open_definition();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1886;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1888;
				this.match(cobolParser.OPEN);
				this.state = 1928;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1890;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1889;
							this.separator();
							}
							}
							this.state = 1892;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1894;
						_la = this._input.LA(1);
						if (!(_la === cobolParser.EXTEND || _la === cobolParser.OUTPUT)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 1924;
						this._errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								this.state = 1896;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								do {
									{
									{
									this.state = 1895;
									this.separator();
									}
									}
									this.state = 1898;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
								} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
								this.state = 1900;
								this.file_name();
								this.state = 1922;
								this._errHandler.sync(this);
								switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
								case 1:
									{
									this.state = 1902;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									do {
										{
										{
										this.state = 1901;
										this.separator();
										}
										}
										this.state = 1904;
										this._errHandler.sync(this);
										_la = this._input.LA(1);
									} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
									this.state = 1912;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (_la === cobolParser.WITH) {
										{
										this.state = 1906;
										this.match(cobolParser.WITH);
										this.state = 1908;
										this._errHandler.sync(this);
										_la = this._input.LA(1);
										do {
											{
											{
											this.state = 1907;
											this.separator();
											}
											}
											this.state = 1910;
											this._errHandler.sync(this);
											_la = this._input.LA(1);
										} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
										}
									}

									this.state = 1914;
									this.match(cobolParser.NO);
									this.state = 1916;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									do {
										{
										{
										this.state = 1915;
										this.separator();
										}
										}
										this.state = 1918;
										this._errHandler.sync(this);
										_la = this._input.LA(1);
									} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
									this.state = 1920;
									this.match(cobolParser.REWIND);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							this.state = 1926;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
						} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1930;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_definition(): Open_definitionContext {
		let _localctx: Open_definitionContext = new Open_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, cobolParser.RULE_open_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1934;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.EXTEND || _la === cobolParser.INPUT || _la === cobolParser.I_O || _la === cobolParser.OUTPUT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1973;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1935;
						this.separator();
						}
						}
						this.state = 1938;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 1940;
					this.file_name();
					this.state = 1962;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 219, this._ctx) ) {
					case 1:
						{
						this.state = 1942;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1941;
							this.separator();
							}
							}
							this.state = 1944;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1952;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.WITH) {
							{
							this.state = 1946;
							this.match(cobolParser.WITH);
							this.state = 1948;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1947;
								this.separator();
								}
								}
								this.state = 1950;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							}
						}

						this.state = 1954;
						this.match(cobolParser.NO);
						this.state = 1956;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1955;
							this.separator();
							}
							}
							this.state = 1958;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1960;
						this.match(cobolParser.REWIND);
						}
						break;
					}
					this.state = 1971;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 221, this._ctx) ) {
					case 1:
						{
						this.state = 1965;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1964;
							this.separator();
							}
							}
							this.state = 1967;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1969;
						this.open_file_attributes();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1975;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_file_attributes(): Open_file_attributesContext {
		let _localctx: Open_file_attributesContext = new Open_file_attributesContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, cobolParser.RULE_open_file_attributes);
		let _la: number;
		try {
			this.state = 2106;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LOCK:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1977;
					this.match(cobolParser.WITH);
					this.state = 1979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1978;
						this.separator();
						}
						}
						this.state = 1981;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 1985;
				this.match(cobolParser.LOCK);
				}
				break;
			case cobolParser.ALLOWING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1986;
				this.match(cobolParser.ALLOWING);
				this.state = 1988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1987;
					this.separator();
					}
					}
					this.state = 1990;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2104;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.NO:
					{
					this.state = 1992;
					this.match(cobolParser.NO);
					this.state = 2000;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 227, this._ctx) ) {
					case 1:
						{
						this.state = 1994;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1993;
							this.separator();
							}
							}
							this.state = 1996;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 1998;
						this.match(cobolParser.OTHERS);
						}
						break;
					}
					}
					break;
				case cobolParser.ALL:
					{
					this.state = 2002;
					this.match(cobolParser.ALL);
					}
					break;
				case cobolParser.READERS:
				case cobolParser.WRITERS:
				case cobolParser.UPDATERS:
					{
					this.state = 2102;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 246, this._ctx) ) {
					case 1:
						{
						this.state = 2003;
						this.match(cobolParser.READERS);
						this.state = 2011;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
						case 1:
							{
							this.state = 2005;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2004;
								this.separator();
								}
								}
								this.state = 2007;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2009;
							this.match(cobolParser.WRITERS);
							}
							break;
						}
						this.state = 2020;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
						case 1:
							{
							this.state = 2014;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2013;
								this.separator();
								}
								}
								this.state = 2016;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2018;
							this.match(cobolParser.UPDATERS);
							}
							break;
						}
						}
						break;

					case 2:
						{
						this.state = 2022;
						this.match(cobolParser.READERS);
						this.state = 2024;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2023;
							this.separator();
							}
							}
							this.state = 2026;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2028;
						this.match(cobolParser.UPDATERS);
						this.state = 2030;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2029;
							this.separator();
							}
							}
							this.state = 2032;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2034;
						this.match(cobolParser.WRITERS);
						}
						break;

					case 3:
						{
						this.state = 2036;
						this.match(cobolParser.WRITERS);
						this.state = 2044;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
						case 1:
							{
							this.state = 2038;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2037;
								this.separator();
								}
								}
								this.state = 2040;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2042;
							this.match(cobolParser.READERS);
							}
							break;
						}
						this.state = 2053;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 237, this._ctx) ) {
						case 1:
							{
							this.state = 2047;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2046;
								this.separator();
								}
								}
								this.state = 2049;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2051;
							this.match(cobolParser.UPDATERS);
							}
							break;
						}
						}
						break;

					case 4:
						{
						this.state = 2055;
						this.match(cobolParser.WRITERS);
						this.state = 2057;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2056;
							this.separator();
							}
							}
							this.state = 2059;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2061;
						this.match(cobolParser.UPDATERS);
						this.state = 2063;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2062;
							this.separator();
							}
							}
							this.state = 2065;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2067;
						this.match(cobolParser.READERS);
						}
						break;

					case 5:
						{
						this.state = 2069;
						this.match(cobolParser.UPDATERS);
						this.state = 2077;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 241, this._ctx) ) {
						case 1:
							{
							this.state = 2071;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2070;
								this.separator();
								}
								}
								this.state = 2073;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2075;
							this.match(cobolParser.READERS);
							}
							break;
						}
						this.state = 2086;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 243, this._ctx) ) {
						case 1:
							{
							this.state = 2080;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2079;
								this.separator();
								}
								}
								this.state = 2082;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2084;
							this.match(cobolParser.WRITERS);
							}
							break;
						}
						}
						break;

					case 6:
						{
						this.state = 2088;
						this.match(cobolParser.UPDATERS);
						this.state = 2090;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2089;
							this.separator();
							}
							}
							this.state = 2092;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2094;
						this.match(cobolParser.WRITERS);
						this.state = 2096;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2095;
							this.separator();
							}
							}
							this.state = 2098;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2100;
						this.match(cobolParser.READERS);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiply_statement(): Multiply_statementContext {
		let _localctx: Multiply_statementContext = new Multiply_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, cobolParser.RULE_multiply_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2108;
			this.match(cobolParser.MULTIPLY);
			this.state = 2110;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2109;
				this.separator();
				}
				}
				this.state = 2112;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2114;
			this.mult_num();
			this.state = 2116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2115;
				this.separator();
				}
				}
				this.state = 2118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2120;
			this.match(cobolParser.BY);
			this.state = 2134;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 253, this._ctx) ) {
			case 1:
				{
				this.state = 2122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2121;
					this.separator();
					}
					}
					this.state = 2124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2126;
				this.mult_num();
				this.state = 2128;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2127;
					this.separator();
					}
					}
					this.state = 2130;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2132;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 2151;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2137;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2136;
						this.separator();
						}
						}
						this.state = 2139;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2141;
					this.identifier_result();
					this.state = 2149;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 256, this._ctx) ) {
					case 1:
						{
						this.state = 2143;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2142;
							this.separator();
							}
							}
							this.state = 2145;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2147;
						this.match(cobolParser.ROUNDED);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2153;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2162;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
			case 1:
				{
				this.state = 2156;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2155;
					this.separator();
					}
					}
					this.state = 2158;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2160;
				this.on_size_variants();
				}
				break;
			}
			this.state = 2171;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 261, this._ctx) ) {
			case 1:
				{
				this.state = 2165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2164;
					this.separator();
					}
					}
					this.state = 2167;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2169;
				this.match(cobolParser.END_MULTIPLY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mult_num(): Mult_numContext {
		let _localctx: Mult_numContext = new Mult_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, cobolParser.RULE_mult_num);
		try {
			this.state = 2175;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2173;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2174;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_statement(): Merge_statementContext {
		let _localctx: Merge_statementContext = new Merge_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, cobolParser.RULE_merge_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2177;
			this.match(cobolParser.MERGE);
			this.state = 2179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2178;
				this.separator();
				}
				}
				this.state = 2181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2183;
			this.mergefile();
			this.state = 2191;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2185;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2184;
						this.separator();
						}
						}
						this.state = 2187;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2189;
					this.merge_on();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2193;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2224;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 272, this._ctx) ) {
			case 1:
				{
				this.state = 2196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2195;
					this.separator();
					}
					}
					this.state = 2198;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.COLLATING) {
					{
					this.state = 2200;
					this.match(cobolParser.COLLATING);
					this.state = 2202;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2201;
						this.separator();
						}
						}
						this.state = 2204;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 2208;
				this.match(cobolParser.SEQUENCE);
				this.state = 2210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2209;
					this.separator();
					}
					}
					this.state = 2212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2220;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2214;
					this.match(cobolParser.IS);
					this.state = 2216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2215;
						this.separator();
						}
						}
						this.state = 2218;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 2222;
				this.alpha_name();
				}
				break;
			}
			this.state = 2227;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2226;
				this.separator();
				}
				}
				this.state = 2229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2231;
			this.match(cobolParser.USING);
			this.state = 2239;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2233;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2232;
						this.separator();
						}
						}
						this.state = 2235;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2237;
					this.infile();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2241;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2243;
				this.separator();
				}
				}
				this.state = 2246;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2250;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.OUTPUT:
				{
				this.state = 2248;
				this.output_proc();
				}
				break;
			case cobolParser.GIVING:
				{
				this.state = 2249;
				this.giving_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public output_proc(): Output_procContext {
		let _localctx: Output_procContext = new Output_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, cobolParser.RULE_output_proc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2252;
			this.match(cobolParser.OUTPUT);
			this.state = 2254;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2253;
				this.separator();
				}
				}
				this.state = 2256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2258;
			this.match(cobolParser.PROCEDURE);
			this.state = 2260;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2259;
				this.separator();
				}
				}
				this.state = 2262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2270;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2264;
				this.match(cobolParser.IS);
				this.state = 2266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2265;
					this.separator();
					}
					}
					this.state = 2268;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 2272;
			this.first_proc();
			this.state = 2286;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 284, this._ctx) ) {
			case 1:
				{
				this.state = 2274;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2273;
					this.separator();
					}
					}
					this.state = 2276;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2278;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2279;
					this.separator();
					}
					}
					this.state = 2282;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2284;
				this.end_proc();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_proc(): First_procContext {
		let _localctx: First_procContext = new First_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, cobolParser.RULE_first_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2288;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public end_proc(): End_procContext {
		let _localctx: End_procContext = new End_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, cobolParser.RULE_end_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2290;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public giving_file(): Giving_fileContext {
		let _localctx: Giving_fileContext = new Giving_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, cobolParser.RULE_giving_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2292;
			this.match(cobolParser.GIVING);
			this.state = 2293;
			this.file_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public infile(): InfileContext {
		let _localctx: InfileContext = new InfileContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, cobolParser.RULE_infile);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2295;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_on(): Merge_onContext {
		let _localctx: Merge_onContext = new Merge_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, cobolParser.RULE_merge_on);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2303;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 2297;
				this.match(cobolParser.ON);
				this.state = 2299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2298;
					this.separator();
					}
					}
					this.state = 2301;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 2305;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2313;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 288, this._ctx) ) {
			case 1:
				{
				this.state = 2307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2306;
					this.separator();
					}
					}
					this.state = 2309;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2311;
				this.match(cobolParser.KEY);
				}
				break;
			}
			this.state = 2322;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2316;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2315;
						this.separator();
						}
						}
						this.state = 2318;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2320;
					this.mergekey();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2324;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergefile(): MergefileContext {
		let _localctx: MergefileContext = new MergefileContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, cobolParser.RULE_mergefile);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2326;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergekey(): MergekeyContext {
		let _localctx: MergekeyContext = new MergekeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, cobolParser.RULE_mergekey);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2328;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspect_statement(): Inspect_statementContext {
		let _localctx: Inspect_statementContext = new Inspect_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, cobolParser.RULE_inspect_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2330;
			this.match(cobolParser.INSPECT);
			this.state = 2332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2331;
				this.separator();
				}
				}
				this.state = 2334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2336;
			this.src_string();
			this.state = 2338;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2337;
				this.separator();
				}
				}
				this.state = 2340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2354;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.TALLYING:
				{
				this.state = 2342;
				this.inspect_tallying();
				this.state = 2350;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 294, this._ctx) ) {
				case 1:
					{
					this.state = 2344;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2343;
						this.separator();
						}
						}
						this.state = 2346;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2348;
					this.inspect_replacing();
					}
					break;
				}
				}
				break;
			case cobolParser.REPLACING:
				{
				this.state = 2352;
				this.inspect_replacing();
				}
				break;
			case cobolParser.CONVERTING:
				{
				this.state = 2353;
				this.inspect_converting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspect_converting(): Inspect_convertingContext {
		let _localctx: Inspect_convertingContext = new Inspect_convertingContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, cobolParser.RULE_inspect_converting);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2356;
			this.match(cobolParser.CONVERTING);
			this.state = 2358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2357;
				this.separator();
				}
				}
				this.state = 2360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2362;
			this.compare_chars();
			this.state = 2364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2363;
				this.separator();
				}
				}
				this.state = 2366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2368;
			this.match(cobolParser.TO);
			this.state = 2370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2369;
				this.separator();
				}
				}
				this.state = 2372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2374;
			this.convert_chars();
			this.state = 2384;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2376;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2375;
						this.separator();
						}
						}
						this.state = 2378;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2380;
					this.delim_definition();
					}
					}
				}
				this.state = 2386;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public convert_chars(): Convert_charsContext {
		let _localctx: Convert_charsContext = new Convert_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, cobolParser.RULE_convert_chars);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2387;
			this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compare_chars(): Compare_charsContext {
		let _localctx: Compare_charsContext = new Compare_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, cobolParser.RULE_compare_chars);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2389;
			this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspect_replacing(): Inspect_replacingContext {
		let _localctx: Inspect_replacingContext = new Inspect_replacingContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, cobolParser.RULE_inspect_replacing);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2391;
			this.match(cobolParser.REPLACING);
			this.state = 2401;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2393;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2392;
						this.separator();
						}
						}
						this.state = 2395;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2399;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.CHARACTERS:
						{
						this.state = 2397;
						this.replacing_characters();
						}
						break;
					case cobolParser.ALL:
					case cobolParser.FIRST:
					case cobolParser.LEADING:
						{
						this.state = 2398;
						this.replacing_all();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2403;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replacing_all(): Replacing_allContext {
		let _localctx: Replacing_allContext = new Replacing_allContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, cobolParser.RULE_replacing_all);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2405;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALL || _la === cobolParser.FIRST || _la === cobolParser.LEADING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2436;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2406;
						this.separator();
						}
						}
						this.state = 2409;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2411;
					this.compare_val();
					this.state = 2413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2412;
						this.separator();
						}
						}
						this.state = 2415;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2417;
					this.match(cobolParser.BY);
					this.state = 2419;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2418;
						this.separator();
						}
						}
						this.state = 2421;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2423;
					this.replace_val();
					this.state = 2433;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2425;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2424;
								this.separator();
								}
								}
								this.state = 2427;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2429;
							this.delim_definition();
							}
							}
						}
						this.state = 2435;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2438;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replace_val(): Replace_valContext {
		let _localctx: Replace_valContext = new Replace_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, cobolParser.RULE_replace_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2440;
			this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replacing_characters(): Replacing_charactersContext {
		let _localctx: Replacing_charactersContext = new Replacing_charactersContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, cobolParser.RULE_replacing_characters);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2442;
			this.match(cobolParser.CHARACTERS);
			this.state = 2444;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2443;
				this.separator();
				}
				}
				this.state = 2446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2448;
			this.match(cobolParser.BY);
			this.state = 2450;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2449;
				this.separator();
				}
				}
				this.state = 2452;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2454;
			this.replace_char();
			this.state = 2464;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2456;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2455;
						this.separator();
						}
						}
						this.state = 2458;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2460;
					this.delim_definition();
					}
					}
				}
				this.state = 2466;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replace_char(): Replace_charContext {
		let _localctx: Replace_charContext = new Replace_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, cobolParser.RULE_replace_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2467;
			this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspect_tallying(): Inspect_tallyingContext {
		let _localctx: Inspect_tallyingContext = new Inspect_tallyingContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, cobolParser.RULE_inspect_tallying);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2469;
			this.match(cobolParser.TALLYING);
			this.state = 2477;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2471;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2470;
						this.separator();
						}
						}
						this.state = 2473;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2475;
					this.tallying_for();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2479;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tallying_for(): Tallying_forContext {
		let _localctx: Tallying_forContext = new Tallying_forContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, cobolParser.RULE_tallying_for);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2481;
			this.tally_ctr();
			this.state = 2483;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2482;
				this.separator();
				}
				}
				this.state = 2485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2487;
			this.match(cobolParser.FOR);
			this.state = 2497;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2489;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2488;
						this.separator();
						}
						}
						this.state = 2491;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2495;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.CHARACTERS:
						{
						this.state = 2493;
						this.tallying_for_characters();
						}
						break;
					case cobolParser.ALL:
					case cobolParser.LEADING:
						{
						this.state = 2494;
						this.tallying_for_all();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2499;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tallying_for_characters(): Tallying_for_charactersContext {
		let _localctx: Tallying_for_charactersContext = new Tallying_for_charactersContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, cobolParser.RULE_tallying_for_characters);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2501;
			this.match(cobolParser.CHARACTERS);
			this.state = 2511;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2503;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2502;
						this.separator();
						}
						}
						this.state = 2505;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2507;
					this.delim_definition();
					}
					}
				}
				this.state = 2513;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delim_definition(): Delim_definitionContext {
		let _localctx: Delim_definitionContext = new Delim_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, cobolParser.RULE_delim_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2514;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AFTER || _la === cobolParser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2522;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 323, this._ctx) ) {
			case 1:
				{
				this.state = 2516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2515;
					this.separator();
					}
					}
					this.state = 2518;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2520;
				this.match(cobolParser.INITIAL);
				}
				break;
			}
			this.state = 2525;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2524;
				this.separator();
				}
				}
				this.state = 2527;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2529;
			this.delim_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tallying_for_all(): Tallying_for_allContext {
		let _localctx: Tallying_for_allContext = new Tallying_for_allContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, cobolParser.RULE_tallying_for_all);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2531;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALL || _la === cobolParser.LEADING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2550;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2533;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2532;
						this.separator();
						}
						}
						this.state = 2535;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2537;
					this.compare_val();
					this.state = 2547;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2539;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2538;
								this.separator();
								}
								}
								this.state = 2541;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2543;
							this.delim_definition();
							}
							}
						}
						this.state = 2549;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2552;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compare_val(): Compare_valContext {
		let _localctx: Compare_valContext = new Compare_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, cobolParser.RULE_compare_val);
		try {
			this.state = 2557;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2554;
				this.qualified_data_item();
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2555;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2556;
				this.figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delim_val(): Delim_valContext {
		let _localctx: Delim_valContext = new Delim_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, cobolParser.RULE_delim_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2559;
			this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tally_ctr(): Tally_ctrContext {
		let _localctx: Tally_ctrContext = new Tally_ctrContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, cobolParser.RULE_tally_ctr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2561;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_string(): Src_stringContext {
		let _localctx: Src_stringContext = new Src_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, cobolParser.RULE_src_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2563;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initiate_statement(): Initiate_statementContext {
		let _localctx: Initiate_statementContext = new Initiate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, cobolParser.RULE_initiate_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2565;
			this.match(cobolParser.INITIATE);
			this.state = 2573;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2567;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2566;
						this.separator();
						}
						}
						this.state = 2569;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2571;
					this.report_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2575;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initialize_statement(): Initialize_statementContext {
		let _localctx: Initialize_statementContext = new Initialize_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, cobolParser.RULE_initialize_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2577;
			this.match(cobolParser.INITIALIZE);
			this.state = 2585;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2579;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2578;
						this.separator();
						}
						}
						this.state = 2581;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2583;
					this.fld_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2587;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2598;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2590;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2589;
						this.separator();
						}
						}
						this.state = 2592;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2594;
					this.replacing();
					}
					}
				}
				this.state = 2600;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replacing(): ReplacingContext {
		let _localctx: ReplacingContext = new ReplacingContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, cobolParser.RULE_replacing);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2601;
			this.match(cobolParser.REPLACING);
			this.state = 2629;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2603;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2602;
						this.separator();
						}
						}
						this.state = 2605;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2607;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.ALPHABETIC || _la === cobolParser.NUMERIC || ((((_la - 407)) & ~0x1F) === 0 && ((1 << (_la - 407)) & ((1 << (cobolParser.ALPHANUMERIC - 407)) | (1 << (cobolParser.NUMERIC_EDITED - 407)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 407)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2608;
						this.separator();
						}
						}
						this.state = 2611;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2619;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.DATA) {
						{
						this.state = 2613;
						this.match(cobolParser.DATA);
						this.state = 2615;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2614;
							this.separator();
							}
							}
							this.state = 2617;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 2621;
					this.match(cobolParser.BY);
					this.state = 2623;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2622;
						this.separator();
						}
						}
						this.state = 2625;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2627;
					this.init_value();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2631;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public init_value(): Init_valueContext {
		let _localctx: Init_valueContext = new Init_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, cobolParser.RULE_init_value);
		try {
			this.state = 2635;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2633;
				this.qualified_data_item();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2634;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fld_name(): Fld_nameContext {
		let _localctx: Fld_nameContext = new Fld_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, cobolParser.RULE_fld_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2637;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public move_statement(): Move_statementContext {
		let _localctx: Move_statementContext = new Move_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, cobolParser.RULE_move_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2639;
			this.match(cobolParser.MOVE);
			this.state = 2641;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2640;
				this.separator();
				}
				}
				this.state = 2643;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING) {
				{
				this.state = 2645;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2646;
					this.separator();
					}
					}
					this.state = 2649;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 2653;
			this.src_item();
			this.state = 2655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2654;
				this.separator();
				}
				}
				this.state = 2657;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2659;
			this.match(cobolParser.TO);
			this.state = 2661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2660;
				this.separator();
				}
				}
				this.state = 2663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2665;
			this.dest_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_statement(): If_statementContext {
		let _localctx: If_statementContext = new If_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, cobolParser.RULE_if_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2667;
			this.match(cobolParser.IF);
			this.state = 2669;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2668;
				this.separator();
				}
				}
				this.state = 2671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2673;
			this.logic_expression(0);
			this.state = 2681;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 350, this._ctx) ) {
			case 1:
				{
				this.state = 2675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2674;
					this.separator();
					}
					}
					this.state = 2677;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2679;
				this.match(cobolParser.THEN);
				}
				break;
			}
			this.state = 2684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2683;
				this.separator();
				}
				}
				this.state = 2686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2697;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ACCEPT:
			case cobolParser.ADD:
			case cobolParser.ALTER:
			case cobolParser.CALL:
			case cobolParser.CANCEL:
			case cobolParser.CLOSE:
			case cobolParser.COMPUTE:
			case cobolParser.CONTINUE:
			case cobolParser.DELETE:
			case cobolParser.DISPLAY:
			case cobolParser.DIVIDE:
			case cobolParser.EVALUATE:
			case cobolParser.EXIT:
			case cobolParser.GENERATE:
			case cobolParser.GO:
			case cobolParser.IF:
			case cobolParser.INITIALIZE:
			case cobolParser.INITIATE:
			case cobolParser.INSPECT:
			case cobolParser.MERGE:
			case cobolParser.MOVE:
			case cobolParser.MULTIPLY:
			case cobolParser.OPEN:
			case cobolParser.PERFORM:
			case cobolParser.READ:
			case cobolParser.RECORD:
			case cobolParser.RELEASE:
			case cobolParser.RETURN:
			case cobolParser.REWRITE:
				{
				this.state = 2688;
				this.sentense();
				}
				break;
			case cobolParser.NEXT:
				{
				this.state = 2689;
				this.match(cobolParser.NEXT);
				this.state = 2691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2690;
					this.separator();
					}
					}
					this.state = 2693;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2695;
				this.match(cobolParser.SENTENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2721;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 358, this._ctx) ) {
			case 1:
				{
				this.state = 2700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2699;
					this.separator();
					}
					}
					this.state = 2702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2704;
				this.match(cobolParser.ELSE);
				this.state = 2706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2705;
					this.separator();
					}
					}
					this.state = 2708;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2719;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.ACCEPT:
				case cobolParser.ADD:
				case cobolParser.ALTER:
				case cobolParser.CALL:
				case cobolParser.CANCEL:
				case cobolParser.CLOSE:
				case cobolParser.COMPUTE:
				case cobolParser.CONTINUE:
				case cobolParser.DELETE:
				case cobolParser.DISPLAY:
				case cobolParser.DIVIDE:
				case cobolParser.EVALUATE:
				case cobolParser.EXIT:
				case cobolParser.GENERATE:
				case cobolParser.GO:
				case cobolParser.IF:
				case cobolParser.INITIALIZE:
				case cobolParser.INITIATE:
				case cobolParser.INSPECT:
				case cobolParser.MERGE:
				case cobolParser.MOVE:
				case cobolParser.MULTIPLY:
				case cobolParser.OPEN:
				case cobolParser.PERFORM:
				case cobolParser.READ:
				case cobolParser.RECORD:
				case cobolParser.RELEASE:
				case cobolParser.RETURN:
				case cobolParser.REWRITE:
					{
					this.state = 2710;
					this.sentense();
					}
					break;
				case cobolParser.NEXT:
					{
					this.state = 2711;
					this.match(cobolParser.NEXT);
					this.state = 2713;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2712;
						this.separator();
						}
						}
						this.state = 2715;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2717;
					this.match(cobolParser.SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 2730;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 360, this._ctx) ) {
			case 1:
				{
				this.state = 2724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2723;
					this.separator();
					}
					}
					this.state = 2726;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2728;
				this.match(cobolParser.END_IF);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generate_statement(): Generate_statementContext {
		let _localctx: Generate_statementContext = new Generate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, cobolParser.RULE_generate_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2732;
			this.match(cobolParser.GENERATE);
			this.state = 2734;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2733;
				this.separator();
				}
				}
				this.state = 2736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2738;
			this.report_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_item(): Report_itemContext {
		let _localctx: Report_itemContext = new Report_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, cobolParser.RULE_report_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2740;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exit_statement(): Exit_statementContext {
		let _localctx: Exit_statementContext = new Exit_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, cobolParser.RULE_exit_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2742;
			this.match(cobolParser.EXIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exit_program_statement(): Exit_program_statementContext {
		let _localctx: Exit_program_statementContext = new Exit_program_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, cobolParser.RULE_exit_program_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2744;
			this.match(cobolParser.EXIT);
			this.state = 2746;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2745;
				this.separator();
				}
				}
				this.state = 2748;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2750;
			this.match(cobolParser.PROGRAM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public go_to_statement(): Go_to_statementContext {
		let _localctx: Go_to_statementContext = new Go_to_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, cobolParser.RULE_go_to_statement);
		let _la: number;
		try {
			this.state = 2809;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2752;
				this.match(cobolParser.GO);
				this.state = 2760;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
				case 1:
					{
					this.state = 2754;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2753;
						this.separator();
						}
						}
						this.state = 2756;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2758;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 2769;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 366, this._ctx) ) {
				case 1:
					{
					this.state = 2763;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2762;
						this.separator();
						}
						}
						this.state = 2765;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2767;
					this.proc_name();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2771;
				this.match(cobolParser.GO);
				this.state = 2779;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 368, this._ctx) ) {
				case 1:
					{
					this.state = 2773;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2772;
						this.separator();
						}
						}
						this.state = 2775;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2777;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 2788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2782;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2781;
						this.separator();
						}
						}
						this.state = 2784;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2786;
					this.proc_name();
					}
					}
					this.state = 2790;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2792;
				this.match(cobolParser.DEPENDING);
				this.state = 2800;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 372, this._ctx) ) {
				case 1:
					{
					this.state = 2794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2793;
						this.separator();
						}
						}
						this.state = 2796;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2798;
					this.match(cobolParser.ON);
					}
					break;
				}
				this.state = 2803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2802;
					this.separator();
					}
					}
					this.state = 2805;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2807;
				this.qualified_data_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_name(): Proc_nameContext {
		let _localctx: Proc_nameContext = new Proc_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, cobolParser.RULE_proc_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2811;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluate_statement(): Evaluate_statementContext {
		let _localctx: Evaluate_statementContext = new Evaluate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, cobolParser.RULE_evaluate_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2813;
			this.match(cobolParser.EVALUATE);
			this.state = 2815;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2814;
				this.separator();
				}
				}
				this.state = 2817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2819;
			this.subj_item();
			this.state = 2838;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2827;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
					case 1:
						{
						this.state = 2821;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2820;
							this.separator();
							}
							}
							this.state = 2823;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2825;
						this.match(cobolParser.ALSO);
						}
						break;
					}
					this.state = 2830;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2829;
						this.separator();
						}
						}
						this.state = 2832;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2834;
					this.subj_item();
					}
					}
				}
				this.state = 2840;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
			}
			this.state = 2881;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2842;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2841;
						this.separator();
						}
						}
						this.state = 2844;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2846;
					this.match(cobolParser.WHEN);
					this.state = 2848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2847;
						this.separator();
						}
						}
						this.state = 2850;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2852;
					this.when_condition();
					this.state = 2871;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2860;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 383, this._ctx) ) {
							case 1:
								{
								this.state = 2854;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								do {
									{
									{
									this.state = 2853;
									this.separator();
									}
									}
									this.state = 2856;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
								} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
								this.state = 2858;
								this.match(cobolParser.ALSO);
								}
								break;
							}
							this.state = 2863;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2862;
								this.separator();
								}
								}
								this.state = 2865;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 2867;
							this.when_condition();
							}
							}
						}
						this.state = 2873;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
					}
					this.state = 2875;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2874;
						this.separator();
						}
						}
						this.state = 2877;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2879;
					this.sentense();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2883;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2904;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				{
				this.state = 2886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2885;
					this.separator();
					}
					}
					this.state = 2888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2890;
				this.match(cobolParser.WHEN);
				this.state = 2892;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2891;
					this.separator();
					}
					}
					this.state = 2894;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2896;
				this.match(cobolParser.OTHER);
				this.state = 2898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2897;
					this.separator();
					}
					}
					this.state = 2900;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2902;
				this.sentense();
				}
				break;
			}
			this.state = 2913;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 393, this._ctx) ) {
			case 1:
				{
				this.state = 2907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2906;
					this.separator();
					}
					}
					this.state = 2909;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2911;
				this.match(cobolParser.END_EVALUATE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public when_condition(): When_conditionContext {
		let _localctx: When_conditionContext = new When_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, cobolParser.RULE_when_condition);
		let _la: number;
		try {
			this.state = 2943;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 399, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2915;
				this.logic_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 2916;
					this.match(cobolParser.NOT);
					this.state = 2918;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2917;
						this.separator();
						}
						}
						this.state = 2920;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 2924;
				this.arithmetic_expression(0);
				this.state = 2938;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
				case 1:
					{
					this.state = 2926;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2925;
						this.separator();
						}
						}
						this.state = 2928;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2930;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2932;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2931;
						this.separator();
						}
						}
						this.state = 2934;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2936;
					this.arithmetic_expression(0);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2940;
				this.match(cobolParser.ANY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2941;
				this.match(cobolParser.TRUE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2942;
				this.match(cobolParser.FALSE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subj_item(): Subj_itemContext {
		let _localctx: Subj_itemContext = new Subj_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, cobolParser.RULE_subj_item);
		try {
			this.state = 2949;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 400, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2945;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2946;
				this.logic_expression(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2947;
				this.match(cobolParser.TRUE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2948;
				this.match(cobolParser.FALSE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement(): Divide_statementContext {
		let _localctx: Divide_statementContext = new Divide_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, cobolParser.RULE_divide_statement);
		try {
			this.state = 2953;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 401, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2951;
				this.divide_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2952;
				this.divide_statement_form2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement_form1(): Divide_statement_form1Context {
		let _localctx: Divide_statement_form1Context = new Divide_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 196, cobolParser.RULE_divide_statement_form1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2955;
			this.match(cobolParser.DIVIDE);
			this.state = 2957;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2956;
				this.separator();
				}
				}
				this.state = 2959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2961;
			this.divide_num();
			this.state = 2963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2962;
				this.separator();
				}
				}
				this.state = 2965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 2967;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2981;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
			case 1:
				{
				this.state = 2969;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2968;
					this.separator();
					}
					}
					this.state = 2971;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2973;
				this.divide_num();
				this.state = 2975;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2974;
					this.separator();
					}
					}
					this.state = 2977;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 2979;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 2998;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2984;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2983;
						this.separator();
						}
						}
						this.state = 2986;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 2988;
					this.identifier_result();
					this.state = 2996;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
					case 1:
						{
						this.state = 2990;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2989;
							this.separator();
							}
							}
							this.state = 2992;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 2994;
						this.match(cobolParser.ROUNDED);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3000;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3009;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 412, this._ctx) ) {
			case 1:
				{
				this.state = 3003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3002;
					this.separator();
					}
					}
					this.state = 3005;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3007;
				this.on_size_variants();
				}
				break;
			}
			this.state = 3018;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				{
				this.state = 3012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3011;
					this.separator();
					}
					}
					this.state = 3014;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3016;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement_form2(): Divide_statement_form2Context {
		let _localctx: Divide_statement_form2Context = new Divide_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 198, cobolParser.RULE_divide_statement_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3020;
			this.match(cobolParser.DIVIDE);
			this.state = 3022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3021;
				this.separator();
				}
				}
				this.state = 3024;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3026;
			this.divide_num();
			this.state = 3028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3027;
				this.separator();
				}
				}
				this.state = 3030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3032;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3046;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				{
				this.state = 3034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3033;
					this.separator();
					}
					}
					this.state = 3036;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3038;
				this.divide_num();
				this.state = 3040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3039;
					this.separator();
					}
					}
					this.state = 3042;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3044;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 3049;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3048;
				this.separator();
				}
				}
				this.state = 3051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3053;
			this.identifier_result();
			this.state = 3061;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
			case 1:
				{
				this.state = 3055;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3054;
					this.separator();
					}
					}
					this.state = 3057;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3059;
				this.match(cobolParser.ROUNDED);
				}
				break;
			}
			this.state = 3064;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3063;
				this.separator();
				}
				}
				this.state = 3066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3068;
			this.match(cobolParser.REMAINDER);
			this.state = 3070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3069;
				this.separator();
				}
				}
				this.state = 3072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3074;
			this.remaind();
			this.state = 3082;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				{
				this.state = 3076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3075;
					this.separator();
					}
					}
					this.state = 3078;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3080;
				this.on_size_variants();
				}
				break;
			}
			this.state = 3091;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 428, this._ctx) ) {
			case 1:
				{
				this.state = 3085;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3084;
					this.separator();
					}
					}
					this.state = 3087;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3089;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public remaind(): RemaindContext {
		let _localctx: RemaindContext = new RemaindContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, cobolParser.RULE_remaind);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3093;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_num(): Divide_numContext {
		let _localctx: Divide_numContext = new Divide_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, cobolParser.RULE_divide_num);
		try {
			this.state = 3097;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3095;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3096;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement(): Display_statementContext {
		let _localctx: Display_statementContext = new Display_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, cobolParser.RULE_display_statement);
		try {
			this.state = 3103;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 430, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3099;
				this.display_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3100;
				this.display_statement_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3101;
				this.display_statement_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3102;
				this.display_statement_form4();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form1(): Display_statement_form1Context {
		let _localctx: Display_statement_form1Context = new Display_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 206, cobolParser.RULE_display_statement_form1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3105;
			this.match(cobolParser.DISPLAY);
			this.state = 3124;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3106;
						this.separator();
						}
						}
						this.state = 3109;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3111;
					this.src_item();
					this.state = 3121;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3113;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 3112;
								this.separator();
								}
								}
								this.state = 3115;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 3117;
							this.display_form1_clause();
							}
							}
						}
						this.state = 3123;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3126;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3135;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 436, this._ctx) ) {
			case 1:
				{
				this.state = 3129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3128;
					this.separator();
					}
					}
					this.state = 3131;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3133;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form2(): Display_statement_form2Context {
		let _localctx: Display_statement_form2Context = new Display_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 208, cobolParser.RULE_display_statement_form2);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3137;
			this.match(cobolParser.DISPLAY);
			this.state = 3156;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3139;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3138;
						this.separator();
						}
						}
						this.state = 3141;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3143;
					this.src_item();
					this.state = 3153;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3145;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 3144;
								this.separator();
								}
								}
								this.state = 3147;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 3149;
							this.display_form2_clause();
							}
							}
						}
						this.state = 3155;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3158;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3167;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
			case 1:
				{
				this.state = 3161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3160;
					this.separator();
					}
					}
					this.state = 3163;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3165;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form3(): Display_statement_form3Context {
		let _localctx: Display_statement_form3Context = new Display_statement_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 210, cobolParser.RULE_display_statement_form3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3169;
			this.match(cobolParser.DISPLAY);
			this.state = 3171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3170;
				this.separator();
				}
				}
				this.state = 3173;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3175;
			this.qualified_data_item();
			this.state = 3211;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 452, this._ctx) ) {
			case 1:
				{
				this.state = 3177;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3176;
					this.separator();
					}
					}
					this.state = 3179;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 3181;
					this.match(cobolParser.AT);
					this.state = 3183;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3182;
						this.separator();
						}
						}
						this.state = 3185;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3209;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LINE:
					{
					this.state = 3189;
					this.disp_f3_line();
					this.state = 3197;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 448, this._ctx) ) {
					case 1:
						{
						this.state = 3191;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3190;
							this.separator();
							}
							}
							this.state = 3193;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3195;
						this.disp_f3_column();
						}
						break;
					}
					}
					break;
				case cobolParser.COLUMN:
					{
					this.state = 3199;
					this.disp_f3_column();
					this.state = 3207;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 450, this._ctx) ) {
					case 1:
						{
						this.state = 3201;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3200;
							this.separator();
							}
							}
							this.state = 3203;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3205;
						this.disp_f3_line();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 3220;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 454, this._ctx) ) {
			case 1:
				{
				this.state = 3214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3213;
					this.separator();
					}
					}
					this.state = 3216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3218;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form4(): Display_statement_form4Context {
		let _localctx: Display_statement_form4Context = new Display_statement_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 212, cobolParser.RULE_display_statement_form4);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3222;
			this.match(cobolParser.DISPLAY);
			this.state = 3224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3223;
				this.separator();
				}
				}
				this.state = 3226;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3228;
			this.src_item();
			this.state = 3230;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3229;
				this.separator();
				}
				}
				this.state = 3232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3234;
			this.match(cobolParser.UPON);
			this.state = 3236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3235;
				this.separator();
				}
				}
				this.state = 3238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3240;
			this.display_upon();
			this.state = 3248;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 459, this._ctx) ) {
			case 1:
				{
				this.state = 3242;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3241;
					this.separator();
					}
					}
					this.state = 3244;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3246;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 3257;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 461, this._ctx) ) {
			case 1:
				{
				this.state = 3251;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3250;
					this.separator();
					}
					}
					this.state = 3253;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3255;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_item(): Src_itemContext {
		let _localctx: Src_itemContext = new Src_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, cobolParser.RULE_src_item);
		try {
			this.state = 3261;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3259;
				this.identifier();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3260;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_upon(): Display_uponContext {
		let _localctx: Display_uponContext = new Display_uponContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, cobolParser.RULE_display_upon);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3263;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disp_f3_line(): Disp_f3_lineContext {
		let _localctx: Disp_f3_lineContext = new Disp_f3_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, cobolParser.RULE_disp_f3_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3265;
			this.match(cobolParser.LINE);
			this.state = 3273;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 464, this._ctx) ) {
			case 1:
				{
				this.state = 3267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3266;
					this.separator();
					}
					}
					this.state = 3269;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3271;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 3276;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3275;
				this.separator();
				}
				}
				this.state = 3278;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3282;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 3280;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 3281;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disp_f3_column(): Disp_f3_columnContext {
		let _localctx: Disp_f3_columnContext = new Disp_f3_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, cobolParser.RULE_disp_f3_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3284;
			this.match(cobolParser.COLUMN);
			this.state = 3292;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				{
				this.state = 3286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3285;
					this.separator();
					}
					}
					this.state = 3288;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3290;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 3295;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3294;
				this.separator();
				}
				}
				this.state = 3297;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3301;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 3299;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 3300;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_form1_clause(): Display_form1_clauseContext {
		let _localctx: Display_form1_clauseContext = new Display_form1_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, cobolParser.RULE_display_form1_clause);
		let _la: number;
		try {
			this.state = 3338;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 478, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3309;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3303;
					this.match(cobolParser.WITH);
					this.state = 3305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3304;
						this.separator();
						}
						}
						this.state = 3307;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3311;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3312;
				this.match(cobolParser.UPON);
				this.state = 3314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3313;
					this.separator();
					}
					}
					this.state = 3316;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3318;
				this.out_dest();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3320;
					this.match(cobolParser.WITH);
					this.state = 3322;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3321;
						this.separator();
						}
						}
						this.state = 3324;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3328;
				this.match(cobolParser.NO);
				this.state = 3336;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 477, this._ctx) ) {
				case 1:
					{
					this.state = 3330;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3329;
						this.separator();
						}
						}
						this.state = 3332;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3334;
					this.match(cobolParser.ADVANCING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_form2_clause(): Display_form2_clauseContext {
		let _localctx: Display_form2_clauseContext = new Display_form2_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, cobolParser.RULE_display_form2_clause);
		let _la: number;
		try {
			this.state = 3424;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 496, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3340;
				this.display_form1_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3341;
				this.at_line_number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3342;
				this.at_column_number();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3343;
				this.match(cobolParser.ERASE);
				this.state = 3367;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
				case 1:
					{
					this.state = 3345;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3344;
						this.separator();
						}
						}
						this.state = 3347;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3355;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 3349;
						this.match(cobolParser.TO);
						this.state = 3351;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3350;
							this.separator();
							}
							}
							this.state = 3353;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 3357;
					this.match(cobolParser.END);
					this.state = 3365;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 483, this._ctx) ) {
					case 1:
						{
						this.state = 3359;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3358;
							this.separator();
							}
							}
							this.state = 3361;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3363;
						this.match(cobolParser.OF);
						}
						break;
					}
					}
					break;
				}
				this.state = 3370;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3369;
					this.separator();
					}
					}
					this.state = 3372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3374;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3376;
					this.match(cobolParser.WITH);
					this.state = 3378;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3377;
						this.separator();
						}
						}
						this.state = 3380;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3384;
				this.match(cobolParser.BELL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3385;
				this.match(cobolParser.UNDERLINED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3386;
				this.match(cobolParser.BOLD);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3387;
					this.match(cobolParser.WITH);
					this.state = 3389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3388;
						this.separator();
						}
						}
						this.state = 3391;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3395;
				this.match(cobolParser.BLINKING);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3396;
				this.match(cobolParser.REVERSED);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3397;
					this.match(cobolParser.WITH);
					this.state = 3399;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3398;
						this.separator();
						}
						}
						this.state = 3401;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3405;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3406;
					this.match(cobolParser.WITH);
					this.state = 3408;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3407;
						this.separator();
						}
						}
						this.state = 3410;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3414;
				this.match(cobolParser.NO);
				this.state = 3422;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 495, this._ctx) ) {
				case 1:
					{
					this.state = 3416;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3415;
						this.separator();
						}
						}
						this.state = 3418;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3420;
					this.match(cobolParser.ADVANCING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_line_number(): At_line_numberContext {
		let _localctx: At_line_numberContext = new At_line_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, cobolParser.RULE_at_line_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 3426;
				this.match(cobolParser.AT);
				this.state = 3428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3427;
					this.separator();
					}
					}
					this.state = 3430;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 3434;
			this.match(cobolParser.LINE);
			this.state = 3442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 500, this._ctx) ) {
			case 1:
				{
				this.state = 3436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3435;
					this.separator();
					}
					}
					this.state = 3438;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3440;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 3445;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3444;
				this.separator();
				}
				}
				this.state = 3447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3449;
			this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_column_number(): At_column_numberContext {
		let _localctx: At_column_numberContext = new At_column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, cobolParser.RULE_at_column_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 3451;
				this.match(cobolParser.AT);
				this.state = 3453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3452;
					this.separator();
					}
					}
					this.state = 3455;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 3459;
			this.match(cobolParser.COLUMN);
			this.state = 3467;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 505, this._ctx) ) {
			case 1:
				{
				this.state = 3461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3460;
					this.separator();
					}
					}
					this.state = 3463;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3465;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 3470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3469;
				this.separator();
				}
				}
				this.state = 3472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3474;
			this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public out_dest(): Out_destContext {
		let _localctx: Out_destContext = new Out_destContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, cobolParser.RULE_out_dest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3476;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_statement(): Delete_statementContext {
		let _localctx: Delete_statementContext = new Delete_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, cobolParser.RULE_delete_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3478;
			this.match(cobolParser.DELETE);
			this.state = 3480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3479;
				this.separator();
				}
				}
				this.state = 3482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3484;
			this.file_name();
			this.state = 3492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 509, this._ctx) ) {
			case 1:
				{
				this.state = 3486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3485;
					this.separator();
					}
					}
					this.state = 3488;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3490;
				this.match(cobolParser.RECORD);
				}
				break;
			}
			this.state = 3501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 511, this._ctx) ) {
			case 1:
				{
				this.state = 3495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3494;
					this.separator();
					}
					}
					this.state = 3497;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3499;
				this.invalid_key_variants();
				}
				break;
			}
			this.state = 3510;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 513, this._ctx) ) {
			case 1:
				{
				this.state = 3504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3503;
					this.separator();
					}
					}
					this.state = 3506;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3508;
				this.match(cobolParser.END_DELETE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public continue_statement(): Continue_statementContext {
		let _localctx: Continue_statementContext = new Continue_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, cobolParser.RULE_continue_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3512;
			this.match(cobolParser.CONTINUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compute_statement(): Compute_statementContext {
		let _localctx: Compute_statementContext = new Compute_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, cobolParser.RULE_compute_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3514;
			this.match(cobolParser.COMPUTE);
			this.state = 3530;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3516;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3515;
						this.separator();
						}
						}
						this.state = 3518;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3520;
					this.identifier_result();
					this.state = 3528;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 516, this._ctx) ) {
					case 1:
						{
						this.state = 3522;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3521;
							this.separator();
							}
							}
							this.state = 3524;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3526;
						this.match(cobolParser.ROUNDED);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3532;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 517, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3558;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 522, this._ctx) ) {
			case 1:
				{
				this.state = 3535;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3534;
					this.separator();
					}
					}
					this.state = 3537;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3539;
				this.match(cobolParser.EQUAL);
				this.state = 3541;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3540;
					this.separator();
					}
					}
					this.state = 3543;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
				break;

			case 2:
				{
				this.state = 3548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 3545;
					this.separator();
					}
					}
					this.state = 3550;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3551;
				this.match(cobolParser.EQUAL_);
				this.state = 3555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 3552;
					this.separator();
					}
					}
					this.state = 3557;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 3560;
			this.arithmetic_expression(0);
			this.state = 3568;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 524, this._ctx) ) {
			case 1:
				{
				this.state = 3562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3561;
					this.separator();
					}
					}
					this.state = 3564;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3566;
				this.on_size_variants();
				}
				break;
			}
			this.state = 3577;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 526, this._ctx) ) {
			case 1:
				{
				this.state = 3571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3570;
					this.separator();
					}
					}
					this.state = 3573;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3575;
				this.match(cobolParser.END_COMPUTE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_statement(): Close_statementContext {
		let _localctx: Close_statementContext = new Close_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, cobolParser.RULE_close_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3579;
			this.match(cobolParser.CLOSE);
			this.state = 3595;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3581;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3580;
						this.separator();
						}
						}
						this.state = 3583;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3585;
					this.file_name();
					this.state = 3593;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 529, this._ctx) ) {
					case 1:
						{
						this.state = 3587;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3586;
							this.separator();
							}
							}
							this.state = 3589;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3591;
						this.close_params();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3597;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_params(): Close_paramsContext {
		let _localctx: Close_paramsContext = new Close_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, cobolParser.RULE_close_params);
		let _la: number;
		try {
			this.state = 3653;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3599;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3632;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 538, this._ctx) ) {
				case 1:
					{
					this.state = 3601;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3600;
						this.separator();
						}
						}
						this.state = 3603;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3630;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.FOR:
					case cobolParser.REMOVAL:
						{
						this.state = 3611;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.FOR) {
							{
							this.state = 3605;
							this.match(cobolParser.FOR);
							this.state = 3607;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 3606;
								this.separator();
								}
								}
								this.state = 3609;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							}
						}

						this.state = 3613;
						this.match(cobolParser.REMOVAL);
						}
						break;
					case cobolParser.NO:
					case cobolParser.WITH:
						{
						this.state = 3620;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.WITH) {
							{
							this.state = 3614;
							this.match(cobolParser.WITH);
							this.state = 3616;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 3615;
								this.separator();
								}
								}
								this.state = 3618;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							}
						}

						this.state = 3622;
						this.match(cobolParser.NO);
						this.state = 3624;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3623;
							this.separator();
							}
							}
							this.state = 3626;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3628;
						this.match(cobolParser.REWIND);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.LOCK:
			case cobolParser.NO:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3634;
					this.match(cobolParser.WITH);
					this.state = 3636;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3635;
						this.separator();
						}
						}
						this.state = 3638;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3651;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.NO:
					{
					this.state = 3642;
					this.match(cobolParser.NO);
					this.state = 3644;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3643;
						this.separator();
						}
						}
						this.state = 3646;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3648;
					this.match(cobolParser.REWIND);
					}
					break;
				case cobolParser.LOCK:
					{
					this.state = 3650;
					this.match(cobolParser.LOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancel_statement(): Cancel_statementContext {
		let _localctx: Cancel_statementContext = new Cancel_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, cobolParser.RULE_cancel_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3655;
			this.match(cobolParser.CANCEL);
			this.state = 3663;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3657;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3656;
						this.separator();
						}
						}
						this.state = 3659;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3661;
					this.prog_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3665;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_statement(): Call_statementContext {
		let _localctx: Call_statementContext = new Call_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, cobolParser.RULE_call_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3667;
			this.match(cobolParser.CALL);
			this.state = 3669;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3668;
				this.separator();
				}
				}
				this.state = 3671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3673;
			this.prog_name();
			this.state = 3681;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 548, this._ctx) ) {
			case 1:
				{
				this.state = 3675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3674;
					this.separator();
					}
					}
					this.state = 3677;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3679;
				this.call_using();
				}
				break;
			}
			this.state = 3690;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 550, this._ctx) ) {
			case 1:
				{
				this.state = 3684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3683;
					this.separator();
					}
					}
					this.state = 3686;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3688;
				this.call_giving();
				}
				break;
			}
			this.state = 3699;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 552, this._ctx) ) {
			case 1:
				{
				this.state = 3693;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3692;
					this.separator();
					}
					}
					this.state = 3695;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3697;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 3708;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 554, this._ctx) ) {
			case 1:
				{
				this.state = 3702;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3701;
					this.separator();
					}
					}
					this.state = 3704;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3706;
				this.match(cobolParser.END_CALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_giving(): Call_givingContext {
		let _localctx: Call_givingContext = new Call_givingContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, cobolParser.RULE_call_giving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3710;
			this.match(cobolParser.GIVING);
			this.state = 3712;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3711;
				this.separator();
				}
				}
				this.state = 3714;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 3716;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_using(): Call_usingContext {
		let _localctx: Call_usingContext = new Call_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, cobolParser.RULE_call_using);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3718;
			this.match(cobolParser.USING);
			this.state = 3726;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3720;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3719;
						this.separator();
						}
						}
						this.state = 3722;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3724;
					this.using_arg();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3728;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_arg(): Using_argContext {
		let _localctx: Using_argContext = new Using_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, cobolParser.RULE_using_arg);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3752;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.OMITTED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3730;
				this.match(cobolParser.OMITTED);
				}
				break;
			case cobolParser.BY:
			case cobolParser.CONTENT:
			case cobolParser.DESCRIPTOR:
			case cobolParser.REFERENCE:
			case cobolParser.VALUE:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY || _la === cobolParser.CONTENT || _la === cobolParser.DESCRIPTOR || _la === cobolParser.REFERENCE || _la === cobolParser.VALUE) {
					{
					this.state = 3731;
					this.using_prefix();
					this.state = 3733;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3732;
						this.separator();
						}
						}
						this.state = 3735;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3739;
				this.argument();
				this.state = 3749;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3741;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3740;
							this.separator();
							}
							}
							this.state = 3743;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3745;
						this.argument();
						}
						}
					}
					this.state = 3751;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_prefix(): Using_prefixContext {
		let _localctx: Using_prefixContext = new Using_prefixContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, cobolParser.RULE_using_prefix);
		let _la: number;
		try {
			this.state = 3790;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 571, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3760;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 3754;
					this.match(cobolParser.BY);
					this.state = 3756;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3755;
						this.separator();
						}
						}
						this.state = 3758;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3762;
				this.match(cobolParser.REFERENCE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 3763;
					this.match(cobolParser.BY);
					this.state = 3765;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3764;
						this.separator();
						}
						}
						this.state = 3767;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3771;
				this.match(cobolParser.CONTENT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3778;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 3772;
					this.match(cobolParser.BY);
					this.state = 3774;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3773;
						this.separator();
						}
						}
						this.state = 3776;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3780;
				this.match(cobolParser.DESCRIPTOR);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3787;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 3781;
					this.match(cobolParser.BY);
					this.state = 3783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3782;
						this.separator();
						}
						}
						this.state = 3785;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 3789;
				this.match(cobolParser.VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public argument(): ArgumentContext {
		let _localctx: ArgumentContext = new ArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, cobolParser.RULE_argument);
		try {
			this.state = 3795;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3792;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3793;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3794;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prog_name(): Prog_nameContext {
		let _localctx: Prog_nameContext = new Prog_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, cobolParser.RULE_prog_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3797;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_statement(): Alter_statementContext {
		let _localctx: Alter_statementContext = new Alter_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, cobolParser.RULE_alter_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3799;
			this.match(cobolParser.ALTER);
			this.state = 3833;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3801;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3800;
						this.separator();
						}
						}
						this.state = 3803;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3805;
					this.alter_proc();
					this.state = 3807;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3806;
						this.separator();
						}
						}
						this.state = 3809;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3811;
					this.match(cobolParser.TO);
					this.state = 3813;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3812;
						this.separator();
						}
						}
						this.state = 3815;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3829;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.PROCEED) {
						{
						this.state = 3817;
						this.match(cobolParser.PROCEED);
						this.state = 3819;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3818;
							this.separator();
							}
							}
							this.state = 3821;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3823;
						this.match(cobolParser.TO);
						this.state = 3825;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3824;
							this.separator();
							}
							}
							this.state = 3827;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 3831;
					this.alter_new_proc();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3835;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_new_proc(): Alter_new_procContext {
		let _localctx: Alter_new_procContext = new Alter_new_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, cobolParser.RULE_alter_new_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3837;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_proc(): Alter_procContext {
		let _localctx: Alter_procContext = new Alter_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, cobolParser.RULE_alter_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3839;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_statement(): Add_statementContext {
		let _localctx: Add_statementContext = new Add_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, cobolParser.RULE_add_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3970;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 604, this._ctx) ) {
			case 1:
				{
				this.state = 3841;
				this.match(cobolParser.ADD);
				this.state = 3849;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3843;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3842;
							this.separator();
							}
							}
							this.state = 3845;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3847;
						this.add_num();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3851;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 581, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3853;
					this.separator();
					}
					}
					this.state = 3856;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3858;
				this.match(cobolParser.TO);
				this.state = 3874;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3860;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3859;
							this.separator();
							}
							}
							this.state = 3862;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3864;
						this.identifier_result();
						this.state = 3872;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 585, this._ctx) ) {
						case 1:
							{
							this.state = 3866;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 3865;
								this.separator();
								}
								}
								this.state = 3868;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 3870;
							this.match(cobolParser.ROUNDED);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3876;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				{
				this.state = 3878;
				this.match(cobolParser.ADD);
				this.state = 3888;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3880;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3879;
							this.separator();
							}
							}
							this.state = 3882;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3884;
						this.add_num();
						}
						}
					}
					this.state = 3890;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
				}
				this.state = 3898;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 590, this._ctx) ) {
				case 1:
					{
					this.state = 3892;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3891;
						this.separator();
						}
						}
						this.state = 3894;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3896;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 3907;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3901;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3900;
							this.separator();
							}
							}
							this.state = 3903;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3905;
						this.add_num();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3909;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 592, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3911;
					this.separator();
					}
					}
					this.state = 3914;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3916;
				this.match(cobolParser.GIVING);
				this.state = 3932;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3918;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3917;
							this.separator();
							}
							}
							this.state = 3920;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 3922;
						this.identifier_result();
						this.state = 3930;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
						case 1:
							{
							this.state = 3924;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 3923;
								this.separator();
								}
								}
								this.state = 3926;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
							this.state = 3928;
							this.match(cobolParser.ROUNDED);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3934;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 597, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 3:
				{
				this.state = 3936;
				this.match(cobolParser.ADD);
				this.state = 3938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3937;
					this.separator();
					}
					}
					this.state = 3940;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3942;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3943;
					this.separator();
					}
					}
					this.state = 3946;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3948;
				this.add_grp();
				this.state = 3950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3949;
					this.separator();
					}
					}
					this.state = 3952;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3954;
				this.match(cobolParser.TO);
				this.state = 3956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3955;
					this.separator();
					}
					}
					this.state = 3958;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3960;
				this.add_grp();
				this.state = 3968;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 603, this._ctx) ) {
				case 1:
					{
					this.state = 3962;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3961;
						this.separator();
						}
						}
						this.state = 3964;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 3966;
					this.match(cobolParser.ROUNDED);
					}
					break;
				}
				}
				break;
			}
			this.state = 3979;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 606, this._ctx) ) {
			case 1:
				{
				this.state = 3973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3972;
					this.separator();
					}
					}
					this.state = 3975;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3977;
				this.on_size_variants();
				}
				break;
			}
			this.state = 3988;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 608, this._ctx) ) {
			case 1:
				{
				this.state = 3982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3981;
					this.separator();
					}
					}
					this.state = 3984;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 3986;
				this.match(cobolParser.END_ADD);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_grp(): Add_grpContext {
		let _localctx: Add_grpContext = new Add_grpContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, cobolParser.RULE_add_grp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3990;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_num(): Add_numContext {
		let _localctx: Add_numContext = new Add_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, cobolParser.RULE_add_num);
		try {
			this.state = 3994;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3992;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3993;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_statement(): Accept_statementContext {
		let _localctx: Accept_statementContext = new Accept_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, cobolParser.RULE_accept_statement);
		try {
			this.state = 4002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 610, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3996;
				this.accept_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3997;
				this.accept_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3998;
				this.accept_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3999;
				this.accept_form4();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4000;
				this.accept_form5();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4001;
				this.accept_form6();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception_variants(): On_exception_variantsContext {
		let _localctx: On_exception_variantsContext = new On_exception_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, cobolParser.RULE_on_exception_variants);
		let _la: number;
		try {
			this.state = 4036;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.EXCEPTION:
			case cobolParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 4004;
				this.on_exception();
				this.state = 4018;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 613, this._ctx) ) {
				case 1:
					{
					this.state = 4006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4005;
						this.separator();
						}
						}
						this.state = 4008;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4010;
					this.match(cobolParser.NOT);
					this.state = 4012;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4011;
						this.separator();
						}
						}
						this.state = 4014;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4016;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 4020;
				this.match(cobolParser.NOT);
				this.state = 4022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4021;
					this.separator();
					}
					}
					this.state = 4024;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4026;
				this.on_exception();
				this.state = 4034;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 616, this._ctx) ) {
				case 1:
					{
					this.state = 4028;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4027;
						this.separator();
						}
						}
						this.state = 4030;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4032;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end_variants(): At_end_variantsContext {
		let _localctx: At_end_variantsContext = new At_end_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, cobolParser.RULE_at_end_variants);
		let _la: number;
		try {
			this.state = 4070;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AT:
			case cobolParser.END:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 4038;
				this.at_end();
				this.state = 4052;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 620, this._ctx) ) {
				case 1:
					{
					this.state = 4040;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4039;
						this.separator();
						}
						}
						this.state = 4042;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4044;
					this.match(cobolParser.NOT);
					this.state = 4046;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4045;
						this.separator();
						}
						}
						this.state = 4048;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4050;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 4054;
				this.match(cobolParser.NOT);
				this.state = 4056;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4055;
					this.separator();
					}
					}
					this.state = 4058;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4060;
				this.at_end();
				this.state = 4068;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 623, this._ctx) ) {
				case 1:
					{
					this.state = 4062;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4061;
						this.separator();
						}
						}
						this.state = 4064;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4066;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_size_variants(): On_size_variantsContext {
		let _localctx: On_size_variantsContext = new On_size_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, cobolParser.RULE_on_size_variants);
		let _la: number;
		try {
			this.state = 4104;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
			case cobolParser.SIZE:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 4072;
				this.on_size();
				this.state = 4086;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 627, this._ctx) ) {
				case 1:
					{
					this.state = 4074;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4073;
						this.separator();
						}
						}
						this.state = 4076;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4078;
					this.match(cobolParser.NOT);
					this.state = 4080;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4079;
						this.separator();
						}
						}
						this.state = 4082;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4084;
					this.on_size();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 4088;
				this.match(cobolParser.NOT);
				this.state = 4090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4089;
					this.separator();
					}
					}
					this.state = 4092;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4094;
				this.on_size();
				this.state = 4102;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 630, this._ctx) ) {
				case 1:
					{
					this.state = 4096;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4095;
						this.separator();
						}
						}
						this.state = 4098;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4100;
					this.on_size();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public invalid_key_variants(): Invalid_key_variantsContext {
		let _localctx: Invalid_key_variantsContext = new Invalid_key_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, cobolParser.RULE_invalid_key_variants);
		let _la: number;
		try {
			this.state = 4138;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INVALID:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 4106;
				this.invalid_key();
				this.state = 4120;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 634, this._ctx) ) {
				case 1:
					{
					this.state = 4108;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4107;
						this.separator();
						}
						}
						this.state = 4110;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4112;
					this.match(cobolParser.NOT);
					this.state = 4114;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4113;
						this.separator();
						}
						}
						this.state = 4116;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4118;
					this.invalid_key();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 4122;
				this.match(cobolParser.NOT);
				this.state = 4124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4123;
					this.separator();
					}
					}
					this.state = 4126;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4128;
				this.invalid_key();
				this.state = 4136;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 637, this._ctx) ) {
				case 1:
					{
					this.state = 4130;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4129;
						this.separator();
						}
						}
						this.state = 4132;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4134;
					this.invalid_key();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form6(): Accept_form6Context {
		let _localctx: Accept_form6Context = new Accept_form6Context(this._ctx, this.state);
		this.enterRule(_localctx, 280, cobolParser.RULE_accept_form6);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4140;
			this.match(cobolParser.ACCEPT);
			this.state = 4142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4141;
				this.separator();
				}
				}
				this.state = 4144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4146;
			this.dest_item();
			this.state = 4148;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4147;
				this.separator();
				}
				}
				this.state = 4150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 4152;
				this.match(cobolParser.FROM);
				this.state = 4154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4153;
					this.separator();
					}
					}
					this.state = 4156;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4160;
			this.accept6_item();
			this.state = 4168;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 644, this._ctx) ) {
			case 1:
				{
				this.state = 4162;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4161;
					this.separator();
					}
					}
					this.state = 4164;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4166;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 4177;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 646, this._ctx) ) {
			case 1:
				{
				this.state = 4171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4170;
					this.separator();
					}
					}
					this.state = 4173;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4175;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept6_item(): Accept6_itemContext {
		let _localctx: Accept6_itemContext = new Accept6_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, cobolParser.RULE_accept6_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4179;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form1(): Accept_form1Context {
		let _localctx: Accept_form1Context = new Accept_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 284, cobolParser.RULE_accept_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4181;
			this.match(cobolParser.ACCEPT);
			this.state = 4183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4182;
				this.separator();
				}
				}
				this.state = 4185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4187;
			this.dest_item();
			this.state = 4201;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 650, this._ctx) ) {
			case 1:
				{
				this.state = 4189;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4188;
					this.separator();
					}
					}
					this.state = 4191;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4193;
				this.match(cobolParser.FROM);
				this.state = 4195;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4194;
					this.separator();
					}
					}
					this.state = 4197;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4199;
				this.input_source();
				}
				break;
			}
			this.state = 4216;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 653, this._ctx) ) {
			case 1:
				{
				this.state = 4204;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4203;
					this.separator();
					}
					}
					this.state = 4206;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4208;
				this.match(cobolParser.WITH);
				this.state = 4210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4209;
					this.separator();
					}
					}
					this.state = 4212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4214;
				this.match(cobolParser.CONVERSION);
				}
				break;
			}
			this.state = 4225;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 655, this._ctx) ) {
			case 1:
				{
				this.state = 4219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4218;
					this.separator();
					}
					}
					this.state = 4221;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4223;
				this.at_end_variants();
				}
				break;
			}
			this.state = 4234;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 657, this._ctx) ) {
			case 1:
				{
				this.state = 4228;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4227;
					this.separator();
					}
					}
					this.state = 4230;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4232;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form2(): Accept_form2Context {
		let _localctx: Accept_form2Context = new Accept_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 286, cobolParser.RULE_accept_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4236;
			this.match(cobolParser.ACCEPT);
			this.state = 4238;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4237;
				this.separator();
				}
				}
				this.state = 4240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4242;
			this.dest_item();
			this.state = 4244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4243;
				this.separator();
				}
				}
				this.state = 4246;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4248;
			this.match(cobolParser.FROM);
			this.state = 4250;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4249;
				this.separator();
				}
				}
				this.state = 4252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4254;
			this.date_time();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3(): Accept_form3Context {
		let _localctx: Accept_form3Context = new Accept_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 288, cobolParser.RULE_accept_form3);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4256;
			this.match(cobolParser.ACCEPT);
			this.state = 4258;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4257;
				this.separator();
				}
				}
				this.state = 4260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4262;
			this.dest_item();
			this.state = 4270;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4264;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4263;
						this.separator();
						}
						}
						this.state = 4266;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4268;
					this.accept_form3_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4272;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 663, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4283;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
			case 1:
				{
				this.state = 4275;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4274;
					this.separator();
					}
					}
					this.state = 4277;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4281;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 665, this._ctx) ) {
				case 1:
					{
					this.state = 4279;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 4280;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 4292;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 668, this._ctx) ) {
			case 1:
				{
				this.state = 4286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4285;
					this.separator();
					}
					}
					this.state = 4288;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4290;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4(): Accept_form4Context {
		let _localctx: Accept_form4Context = new Accept_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 290, cobolParser.RULE_accept_form4);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4294;
			this.match(cobolParser.ACCEPT);
			this.state = 4296;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4295;
				this.separator();
				}
				}
				this.state = 4298;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4306;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTROL) {
				{
				this.state = 4300;
				this.match(cobolParser.CONTROL);
				this.state = 4302;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4301;
					this.separator();
					}
					}
					this.state = 4304;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4308;
			this.match(cobolParser.KEY);
			this.state = 4310;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4309;
				this.separator();
				}
				}
				this.state = 4312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 4314;
				this.match(cobolParser.IN);
				this.state = 4316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4315;
					this.separator();
					}
					}
					this.state = 4318;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4322;
			this.key_dest_item();
			this.state = 4330;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4324;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4323;
						this.separator();
						}
						}
						this.state = 4326;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4328;
					this.accept_form4_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4332;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 676, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4343;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 679, this._ctx) ) {
			case 1:
				{
				this.state = 4335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4334;
					this.separator();
					}
					}
					this.state = 4337;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4341;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 678, this._ctx) ) {
				case 1:
					{
					this.state = 4339;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 4340;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 4352;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 681, this._ctx) ) {
			case 1:
				{
				this.state = 4346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4345;
					this.separator();
					}
					}
					this.state = 4348;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4350;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form5(): Accept_form5Context {
		let _localctx: Accept_form5Context = new Accept_form5Context(this._ctx, this.state);
		this.enterRule(_localctx, 292, cobolParser.RULE_accept_form5);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4354;
			this.match(cobolParser.ACCEPT);
			this.state = 4356;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4355;
				this.separator();
				}
				}
				this.state = 4358;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4360;
			this.screen_name();
			this.state = 4368;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 684, this._ctx) ) {
			case 1:
				{
				this.state = 4362;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4361;
					this.separator();
					}
					}
					this.state = 4364;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4366;
				this.accept_at();
				}
				break;
			}
			this.state = 4377;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 686, this._ctx) ) {
			case 1:
				{
				this.state = 4371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4370;
					this.separator();
					}
					}
					this.state = 4373;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4375;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 4386;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 688, this._ctx) ) {
			case 1:
				{
				this.state = 4380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4379;
					this.separator();
					}
					}
					this.state = 4382;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4384;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at(): Accept_atContext {
		let _localctx: Accept_atContext = new Accept_atContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, cobolParser.RULE_accept_at);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4394;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 4388;
				this.match(cobolParser.AT);
				this.state = 4390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4389;
					this.separator();
					}
					}
					this.state = 4392;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4416;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				{
				this.state = 4396;
				this.accept_at_line();
				this.state = 4404;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 692, this._ctx) ) {
				case 1:
					{
					this.state = 4398;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4397;
						this.separator();
						}
						}
						this.state = 4400;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4402;
					this.accept_at_column();
					}
					break;
				}
				}
				break;
			case cobolParser.COLUMN:
				{
				this.state = 4406;
				this.accept_at_column();
				this.state = 4414;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 694, this._ctx) ) {
				case 1:
					{
					this.state = 4408;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4407;
						this.separator();
						}
						}
						this.state = 4410;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4412;
					this.accept_at_line();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_line(): Accept_at_lineContext {
		let _localctx: Accept_at_lineContext = new Accept_at_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, cobolParser.RULE_accept_at_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4418;
			this.match(cobolParser.LINE);
			this.state = 4420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4419;
				this.separator();
				}
				}
				this.state = 4422;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 4424;
				this.match(cobolParser.NUMBER);
				this.state = 4426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4425;
					this.separator();
					}
					}
					this.state = 4428;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4434;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 4432;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 4433;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_column(): Accept_at_columnContext {
		let _localctx: Accept_at_columnContext = new Accept_at_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, cobolParser.RULE_accept_at_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4436;
			this.match(cobolParser.COLUMN);
			this.state = 4438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4437;
				this.separator();
				}
				}
				this.state = 4440;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 4442;
				this.match(cobolParser.NUMBER);
				this.state = 4444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4443;
					this.separator();
					}
					}
					this.state = 4446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4452;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 4450;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 4451;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4_clause(): Accept_form4_clauseContext {
		let _localctx: Accept_form4_clauseContext = new Accept_form4_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, cobolParser.RULE_accept_form4_clause);
		let _la: number;
		try {
			this.state = 4546;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 723, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 4454;
					this.match(cobolParser.FROM);
					this.state = 4456;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4455;
						this.separator();
						}
						}
						this.state = 4458;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4462;
				this.match(cobolParser.LINE);
				this.state = 4470;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 707, this._ctx) ) {
				case 1:
					{
					this.state = 4464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4463;
						this.separator();
						}
						}
						this.state = 4466;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4468;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 4473;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4472;
					this.separator();
					}
					}
					this.state = 4475;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4477;
				this.number_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 4479;
					this.match(cobolParser.FROM);
					this.state = 4481;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4480;
						this.separator();
						}
						}
						this.state = 4483;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4487;
				this.match(cobolParser.COLUMN);
				this.state = 4495;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 712, this._ctx) ) {
				case 1:
					{
					this.state = 4489;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4488;
						this.separator();
						}
						}
						this.state = 4491;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4493;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 4498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4497;
					this.separator();
					}
					}
					this.state = 4500;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4502;
				this.number_value();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4504;
				this.match(cobolParser.ERASE);
				this.state = 4528;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 719, this._ctx) ) {
				case 1:
					{
					this.state = 4506;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4505;
						this.separator();
						}
						}
						this.state = 4508;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4516;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 4510;
						this.match(cobolParser.TO);
						this.state = 4512;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4511;
							this.separator();
							}
							}
							this.state = 4514;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 4518;
					this.match(cobolParser.END);
					this.state = 4526;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 718, this._ctx) ) {
					case 1:
						{
						this.state = 4520;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4519;
							this.separator();
							}
							}
							this.state = 4522;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 4524;
						this.match(cobolParser.OF);
						}
						break;
					}
					}
					break;
				}
				this.state = 4531;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4530;
					this.separator();
					}
					}
					this.state = 4533;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4535;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4537;
					this.match(cobolParser.WITH);
					this.state = 4539;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4538;
						this.separator();
						}
						}
						this.state = 4541;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4545;
				this.match(cobolParser.BELL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3_clause(): Accept_form3_clauseContext {
		let _localctx: Accept_form3_clauseContext = new Accept_form3_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, cobolParser.RULE_accept_form3_clause);
		let _la: number;
		try {
			this.state = 4637;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 741, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4548;
				this.accept_form4_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4549;
				this.match(cobolParser.UNDERLINED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4550;
				this.match(cobolParser.BOLD);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4551;
					this.match(cobolParser.WITH);
					this.state = 4553;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4552;
						this.separator();
						}
						}
						this.state = 4555;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4559;
				this.match(cobolParser.BLINKING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4560;
				this.match(cobolParser.PROTECTED);
				this.state = 4568;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 727, this._ctx) ) {
				case 1:
					{
					this.state = 4562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4561;
						this.separator();
						}
						}
						this.state = 4564;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4566;
					this.protected_value();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4570;
					this.match(cobolParser.WITH);
					this.state = 4572;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4571;
						this.separator();
						}
						}
						this.state = 4574;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4578;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4579;
				this.match(cobolParser.REVERSED);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4580;
					this.match(cobolParser.WITH);
					this.state = 4582;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4581;
						this.separator();
						}
						}
						this.state = 4584;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4588;
				this.match(cobolParser.NO);
				this.state = 4590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4589;
					this.separator();
					}
					}
					this.state = 4592;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4594;
				this.match(cobolParser.ECHO);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4596;
				this.match(cobolParser.DEFAULT);
				this.state = 4598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4597;
					this.separator();
					}
					}
					this.state = 4600;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4602;
					this.match(cobolParser.IS);
					this.state = 4604;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4603;
						this.separator();
						}
						}
						this.state = 4606;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4610;
				this.def_value();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTROL) {
					{
					this.state = 4612;
					this.match(cobolParser.CONTROL);
					this.state = 4614;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4613;
						this.separator();
						}
						}
						this.state = 4616;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4620;
				this.match(cobolParser.KEY);
				this.state = 4628;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 739, this._ctx) ) {
				case 1:
					{
					this.state = 4622;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4621;
						this.separator();
						}
						}
						this.state = 4624;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4626;
					this.match(cobolParser.IN);
					}
					break;
				}
				this.state = 4631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4630;
					this.separator();
					}
					}
					this.state = 4633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4635;
				this.key_dest_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_dest_item(): Key_dest_itemContext {
		let _localctx: Key_dest_itemContext = new Key_dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, cobolParser.RULE_key_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4639;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public def_value(): Def_valueContext {
		let _localctx: Def_valueContext = new Def_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, cobolParser.RULE_def_value);
		let _la: number;
		try {
			this.state = 4654;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4641;
				this.figurative_constant();
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4642;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4643;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CURRENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4644;
				this.match(cobolParser.CURRENT);
				this.state = 4652;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 743, this._ctx) ) {
				case 1:
					{
					this.state = 4646;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4645;
						this.separator();
						}
						}
						this.state = 4648;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4650;
					this.match(cobolParser.VALUE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public protected_value(): Protected_valueContext {
		let _localctx: Protected_valueContext = new Protected_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, cobolParser.RULE_protected_value);
		let _la: number;
		try {
			this.state = 4714;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 756, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4656;
				this.match(cobolParser.SIZE);
				this.state = 4658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4657;
					this.separator();
					}
					}
					this.state = 4660;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4662;
				this.prot_size_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4664;
					this.match(cobolParser.WITH);
					this.state = 4666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4665;
						this.separator();
						}
						}
						this.state = 4668;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4672;
				this.match(cobolParser.AUTOTERMINATE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4679;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4673;
					this.match(cobolParser.WITH);
					this.state = 4675;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4674;
						this.separator();
						}
						}
						this.state = 4677;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4681;
				this.match(cobolParser.NO);
				this.state = 4683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4682;
					this.separator();
					}
					}
					this.state = 4685;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4687;
				this.match(cobolParser.BLANK);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4689;
					this.match(cobolParser.WITH);
					this.state = 4691;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4690;
						this.separator();
						}
						}
						this.state = 4693;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4697;
				this.match(cobolParser.EDITING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4698;
					this.match(cobolParser.WITH);
					this.state = 4700;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4699;
						this.separator();
						}
						}
						this.state = 4702;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 4706;
				this.match(cobolParser.FILLER);
				this.state = 4708;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4707;
					this.separator();
					}
					}
					this.state = 4710;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4712;
				this.prot_fill_lit();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_fill_lit(): Prot_fill_litContext {
		let _localctx: Prot_fill_litContext = new Prot_fill_litContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, cobolParser.RULE_prot_fill_lit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4716;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_size_value(): Prot_size_valueContext {
		let _localctx: Prot_size_valueContext = new Prot_size_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, cobolParser.RULE_prot_size_value);
		try {
			this.state = 4720;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4718;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4719;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number_value(): Number_valueContext {
		let _localctx: Number_valueContext = new Number_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, cobolParser.RULE_number_value);
		let _la: number;
		try {
			this.state = 4751;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4722;
				this.line_num();
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4723;
				this.qualified_data_item();
				this.state = 4739;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 761, this._ctx) ) {
				case 1:
					{
					this.state = 4725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4724;
						this.separator();
						}
						}
						this.state = 4727;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4729;
					this.match(cobolParser.PLUS);
					this.state = 4737;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 760, this._ctx) ) {
					case 1:
						{
						this.state = 4731;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4730;
							this.separator();
							}
							}
							this.state = 4733;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 4735;
						this.line_num();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4741;
				this.match(cobolParser.PLUS);
				this.state = 4749;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 763, this._ctx) ) {
				case 1:
					{
					this.state = 4743;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4742;
						this.separator();
						}
						}
						this.state = 4745;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4747;
					this.line_num();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_time(): Date_timeContext {
		let _localctx: Date_timeContext = new Date_timeContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, cobolParser.RULE_date_time);
		let _la: number;
		try {
			this.state = 4775;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4753;
				this.match(cobolParser.DATE);
				this.state = 4761;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 766, this._ctx) ) {
				case 1:
					{
					this.state = 4755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4754;
						this.separator();
						}
						}
						this.state = 4757;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4759;
					this.match(cobolParser.YYYYMMDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4763;
				this.match(cobolParser.DAY);
				this.state = 4771;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 768, this._ctx) ) {
				case 1:
					{
					this.state = 4765;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4764;
						this.separator();
						}
						}
						this.state = 4767;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 4769;
					this.match(cobolParser.YYYYDDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY_OF_WEEK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4773;
				this.match(cobolParser.DAY_OF_WEEK);
				}
				break;
			case cobolParser.TIME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4774;
				this.match(cobolParser.TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dest_item(): Dest_itemContext {
		let _localctx: Dest_itemContext = new Dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, cobolParser.RULE_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4777;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_source(): Input_sourceContext {
		let _localctx: Input_sourceContext = new Input_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, cobolParser.RULE_input_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4779;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end(): At_endContext {
		let _localctx: At_endContext = new At_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, cobolParser.RULE_at_end);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4787;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 4781;
				this.match(cobolParser.AT);
				this.state = 4783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4782;
					this.separator();
					}
					}
					this.state = 4785;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4789;
			this.match(cobolParser.END);
			this.state = 4797;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 773, this._ctx) ) {
			case 1:
				{
				this.state = 4791;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4790;
					this.separator();
					}
					}
					this.state = 4793;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4795;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception(): On_exceptionContext {
		let _localctx: On_exceptionContext = new On_exceptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, cobolParser.RULE_on_exception);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 4799;
				this.match(cobolParser.ON);
				this.state = 4801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4800;
					this.separator();
					}
					}
					this.state = 4803;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4807;
			this.match(cobolParser.EXCEPTION);
			this.state = 4815;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 777, this._ctx) ) {
			case 1:
				{
				this.state = 4809;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4808;
					this.separator();
					}
					}
					this.state = 4811;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4813;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_size(): On_sizeContext {
		let _localctx: On_sizeContext = new On_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, cobolParser.RULE_on_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4823;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 4817;
				this.match(cobolParser.ON);
				this.state = 4819;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4818;
					this.separator();
					}
					}
					this.state = 4821;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 4825;
			this.match(cobolParser.SIZE);
			this.state = 4827;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4826;
				this.separator();
				}
				}
				this.state = 4829;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4831;
			this.match(cobolParser.ERROR);
			this.state = 4839;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 782, this._ctx) ) {
			case 1:
				{
				this.state = 4833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4832;
					this.separator();
					}
					}
					this.state = 4835;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4837;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public invalid_key(): Invalid_keyContext {
		let _localctx: Invalid_keyContext = new Invalid_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, cobolParser.RULE_invalid_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4841;
			this.match(cobolParser.INVALID);
			this.state = 4849;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 784, this._ctx) ) {
			case 1:
				{
				this.state = 4843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4842;
					this.separator();
					}
					}
					this.state = 4845;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4847;
				this.match(cobolParser.KEY);
				}
				break;
			}
			this.state = 4858;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 786, this._ctx) ) {
			case 1:
				{
				this.state = 4852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4851;
					this.separator();
					}
					}
					this.state = 4854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 4856;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_division(): Data_divisionContext {
		let _localctx: Data_divisionContext = new Data_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, cobolParser.RULE_data_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4860;
			this.match(cobolParser.DATA);
			this.state = 4862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4861;
				this.separator();
				}
				}
				this.state = 4864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4866;
			this.match(cobolParser.DIVISION);
			this.state = 4870;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 4867;
				this.separator();
				}
				}
				this.state = 4872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4873;
			this.match(cobolParser.DOT_);
			this.state = 4877;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 789, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4874;
					this.separator();
					}
					}
				}
				this.state = 4879;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 789, this._ctx);
			}
			this.state = 4887;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 4880;
				this.file_section();
				this.state = 4884;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 790, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4881;
						this.separator();
						}
						}
					}
					this.state = 4886;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 790, this._ctx);
				}
				}
			}

			this.state = 4896;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WORKING_STORAGE) {
				{
				this.state = 4889;
				this.working_storage_section();
				this.state = 4893;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 792, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4890;
						this.separator();
						}
						}
					}
					this.state = 4895;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 792, this._ctx);
				}
				}
			}

			this.state = 4905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINKAGE) {
				{
				this.state = 4898;
				this.linkage_section();
				this.state = 4902;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 794, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4899;
						this.separator();
						}
						}
					}
					this.state = 4904;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 794, this._ctx);
				}
				}
			}

			this.state = 4914;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REPORT) {
				{
				this.state = 4907;
				this.report_section();
				this.state = 4911;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 796, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4908;
						this.separator();
						}
						}
					}
					this.state = 4913;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 796, this._ctx);
				}
				}
			}

			this.state = 4923;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SCREEN) {
				{
				this.state = 4916;
				this.screen_section();
				this.state = 4920;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 798, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4917;
						this.separator();
						}
						}
					}
					this.state = 4922;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 798, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_section(): File_sectionContext {
		let _localctx: File_sectionContext = new File_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, cobolParser.RULE_file_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4925;
			this.match(cobolParser.FILE);
			this.state = 4927;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4926;
				this.separator();
				}
				}
				this.state = 4929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4931;
			this.match(cobolParser.SECTION);
			this.state = 4935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 4932;
				this.separator();
				}
				}
				this.state = 4937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4938;
			this.match(cobolParser.DOT_);
			this.state = 4942;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 802, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4939;
					this.separator();
					}
					}
				}
				this.state = 4944;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 802, this._ctx);
			}
			this.state = 4982;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.FD || _la === cobolParser.RD || _la === cobolParser.SD) {
				{
				{
				this.state = 4972;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FD:
					{
					this.state = 4945;
					this.file_description_entry();
					this.state = 4955;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 804, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4949;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
								{
								{
								this.state = 4946;
								this.separator();
								}
								}
								this.state = 4951;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4952;
							this.record_description_entry();
							}
							}
						}
						this.state = 4957;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 804, this._ctx);
					}
					}
					break;
				case cobolParser.RD:
					{
					this.state = 4958;
					this.report_description_entry();
					}
					break;
				case cobolParser.SD:
					{
					this.state = 4959;
					this.sort_merge_file_description_entry();
					this.state = 4969;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 806, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4963;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
								{
								{
								this.state = 4960;
								this.separator();
								}
								}
								this.state = 4965;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4966;
							this.record_description_entry();
							}
							}
						}
						this.state = 4971;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 806, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4977;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 808, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4974;
						this.separator();
						}
						}
					}
					this.state = 4979;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 808, this._ctx);
				}
				}
				}
				this.state = 4984;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public working_storage_section(): Working_storage_sectionContext {
		let _localctx: Working_storage_sectionContext = new Working_storage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, cobolParser.RULE_working_storage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4985;
			this.match(cobolParser.WORKING_STORAGE);
			this.state = 4987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4986;
				this.separator();
				}
				}
				this.state = 4989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 4991;
			this.match(cobolParser.SECTION);
			this.state = 4995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 4992;
				this.separator();
				}
				}
				this.state = 4997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4998;
			this.match(cobolParser.DOT_);
			this.state = 5002;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 812, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4999;
					this.separator();
					}
					}
				}
				this.state = 5004;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 812, this._ctx);
			}
			this.state = 5014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 5005;
				this.record_description_entry();
				this.state = 5009;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 813, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5006;
						this.separator();
						}
						}
					}
					this.state = 5011;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 813, this._ctx);
				}
				}
				}
				this.state = 5016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linkage_section(): Linkage_sectionContext {
		let _localctx: Linkage_sectionContext = new Linkage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, cobolParser.RULE_linkage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5017;
			this.match(cobolParser.LINKAGE);
			this.state = 5019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5018;
				this.separator();
				}
				}
				this.state = 5021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5023;
			this.match(cobolParser.SECTION);
			this.state = 5027;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5024;
				this.separator();
				}
				}
				this.state = 5029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5030;
			this.match(cobolParser.DOT_);
			this.state = 5034;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 817, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5031;
					this.separator();
					}
					}
				}
				this.state = 5036;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 817, this._ctx);
			}
			this.state = 5046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 5037;
				this.record_description_entry();
				this.state = 5041;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 818, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5038;
						this.separator();
						}
						}
					}
					this.state = 5043;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 818, this._ctx);
				}
				}
				}
				this.state = 5048;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_section(): Report_sectionContext {
		let _localctx: Report_sectionContext = new Report_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, cobolParser.RULE_report_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5049;
			this.match(cobolParser.REPORT);
			this.state = 5051;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5050;
				this.separator();
				}
				}
				this.state = 5053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5055;
			this.match(cobolParser.SECTION);
			this.state = 5059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5056;
				this.separator();
				}
				}
				this.state = 5061;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5062;
			this.match(cobolParser.DOT_);
			this.state = 5066;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 822, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5063;
					this.separator();
					}
					}
				}
				this.state = 5068;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 822, this._ctx);
			}
			this.state = 5090;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.RD) {
				{
				{
				this.state = 5069;
				this.report_description_entry();
				this.state = 5079;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 824, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5073;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
							{
							{
							this.state = 5070;
							this.separator();
							}
							}
							this.state = 5075;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 5076;
						this.report_group_description_entry();
						}
						}
					}
					this.state = 5081;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 824, this._ctx);
				}
				this.state = 5085;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 825, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5082;
						this.separator();
						}
						}
					}
					this.state = 5087;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 825, this._ctx);
				}
				}
				}
				this.state = 5092;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_section(): Screen_sectionContext {
		let _localctx: Screen_sectionContext = new Screen_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, cobolParser.RULE_screen_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5093;
			this.match(cobolParser.SCREEN);
			this.state = 5095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5094;
				this.separator();
				}
				}
				this.state = 5097;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5099;
			this.match(cobolParser.SECTION);
			this.state = 5103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5100;
				this.separator();
				}
				}
				this.state = 5105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5106;
			this.match(cobolParser.DOT_);
			this.state = 5110;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 829, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5107;
					this.separator();
					}
					}
				}
				this.state = 5112;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 829, this._ctx);
			}
			this.state = 5122;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 5113;
				this.screen_description_entry();
				this.state = 5117;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 830, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5114;
						this.separator();
						}
						}
					}
					this.state = 5119;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 830, this._ctx);
				}
				}
				}
				this.state = 5124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_description_entry(): File_description_entryContext {
		let _localctx: File_description_entryContext = new File_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, cobolParser.RULE_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5125;
			this.match(cobolParser.FD);
			this.state = 5127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5126;
				this.separator();
				}
				}
				this.state = 5129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5131;
			this.file_name();
			this.state = 5135;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5132;
				this.separator();
				}
				}
				this.state = 5137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5147;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ACCESS || _la === cobolParser.ALTERNATE || _la === cobolParser.BLOCK || _la === cobolParser.CODE_SET || _la === cobolParser.DATA || _la === cobolParser.DYNAMIC || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & ((1 << (cobolParser.EXTERNAL - 164)) | (1 << (cobolParser.FILE - 164)) | (1 << (cobolParser.GLOBAL - 164)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (cobolParser.IS - 212)) | (1 << (cobolParser.LABEL - 212)) | (1 << (cobolParser.LINAGE - 212)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (cobolParser.RANDOM - 289)) | (1 << (cobolParser.RECORD - 289)) | (1 << (cobolParser.REPORT - 289)) | (1 << (cobolParser.REPORTS - 289)))) !== 0) || _la === cobolParser.SEQUENTIAL || _la === cobolParser.STATUS || _la === cobolParser.VALUE) {
				{
				{
				this.state = 5138;
				this.fd_clause();
				this.state = 5142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 5139;
					this.separator();
					}
					}
					this.state = 5144;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 5149;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5150;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext {
		let _localctx: Sort_merge_file_description_entryContext = new Sort_merge_file_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, cobolParser.RULE_sort_merge_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5152;
			this.match(cobolParser.SD);
			this.state = 5154;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5153;
				this.separator();
				}
				}
				this.state = 5156;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5158;
			this.file_name();
			this.state = 5162;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5159;
				this.separator();
				}
				}
				this.state = 5164;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5174;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.DATA || _la === cobolParser.RECORD) {
				{
				{
				this.state = 5165;
				this.sd_clause();
				this.state = 5169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 5166;
					this.separator();
					}
					}
					this.state = 5171;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 5176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5177;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_description_entry(): Report_description_entryContext {
		let _localctx: Report_description_entryContext = new Report_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, cobolParser.RULE_report_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5179;
			this.match(cobolParser.RD);
			this.state = 5181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5180;
				this.separator();
				}
				}
				this.state = 5183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5185;
			this.report_name();
			this.state = 5189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5186;
				this.separator();
				}
				}
				this.state = 5191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 60)) & ~0x1F) === 0 && ((1 << (_la - 60)) & ((1 << (cobolParser.CODE - 60)) | (1 << (cobolParser.CONTROL - 60)) | (1 << (cobolParser.CONTROLS - 60)))) !== 0) || _la === cobolParser.GLOBAL || _la === cobolParser.IS || _la === cobolParser.PAGE) {
				{
				{
				this.state = 5192;
				this.rd_clause();
				this.state = 5196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 5193;
					this.separator();
					}
					}
					this.state = 5198;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 5203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5204;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fd_clause(): Fd_clauseContext {
		let _localctx: Fd_clauseContext = new Fd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, cobolParser.RULE_fd_clause);
		let _la: number;
		try {
			this.state = 5235;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 848, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5206;
					this.match(cobolParser.IS);
					this.state = 5208;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5207;
						this.separator();
						}
						}
						this.state = 5210;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5214;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5221;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5215;
					this.match(cobolParser.IS);
					this.state = 5217;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5216;
						this.separator();
						}
						}
						this.state = 5219;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5223;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5224;
				this.block_contains();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5225;
				this.record();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5226;
				this.label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5227;
				this.value_of_id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5228;
				this.data_rec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5229;
				this.linage();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5230;
				this.report_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5231;
				this.code_set();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5232;
				this.access_mode();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5233;
				this.record_key();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5234;
				this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_description_entry(): Record_description_entryContext {
		let _localctx: Record_description_entryContext = new Record_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, cobolParser.RULE_record_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5237;
			this.data_description_entry();
			this.state = 5247;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 850, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5241;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 5238;
						this.separator();
						}
						}
						this.state = 5243;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5244;
					this.data_description_entry();
					}
					}
				}
				this.state = 5249;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 850, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_entry(): Data_description_entryContext {
		let _localctx: Data_description_entryContext = new Data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, cobolParser.RULE_data_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5250;
			this.level_number();
			this.state = 5260;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 853, this._ctx) ) {
			case 1:
				{
				this.state = 5252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5251;
					this.separator();
					}
					}
					this.state = 5254;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5258;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 5256;
					this.data_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 5257;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 5275;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 856, this._ctx) ) {
			case 1:
				{
				this.state = 5263;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5262;
					this.separator();
					}
					}
					this.state = 5265;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5267;
				this.match(cobolParser.REDEFINES);
				this.state = 5269;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5268;
					this.separator();
					}
					}
					this.state = 5271;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5273;
				this.other_data_item();
				}
				break;
			}
			this.state = 5286;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5278;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5277;
					this.separator();
					}
					}
					this.state = 5280;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5282;
				this.data_description_clause();
				}
				}
				this.state = 5288;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5289;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public level_number(): Level_numberContext {
		let _localctx: Level_numberContext = new Level_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, cobolParser.RULE_level_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5291;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_clause(): Data_description_clauseContext {
		let _localctx: Data_description_clauseContext = new Data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, cobolParser.RULE_data_description_clause);
		let _la: number;
		try {
			this.state = 5353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 870, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5293;
					this.match(cobolParser.IS);
					this.state = 5295;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5294;
						this.separator();
						}
						}
						this.state = 5297;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5301;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5302;
					this.match(cobolParser.IS);
					this.state = 5304;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5303;
						this.separator();
						}
						}
						this.state = 5306;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5310;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5311;
				this.picture();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5312;
				this.usage();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5313;
				this.sign_is();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5314;
				this.occurs();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5315;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.SYNC || _la === cobolParser.SYNCHRONIZED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5323;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 864, this._ctx) ) {
				case 1:
					{
					this.state = 5317;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5316;
						this.separator();
						}
						}
						this.state = 5319;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5321;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LEFT || _la === cobolParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5325;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5333;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 866, this._ctx) ) {
				case 1:
					{
					this.state = 5327;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5326;
						this.separator();
						}
						}
						this.state = 5329;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5331;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5335;
				this.match(cobolParser.BLANK);
				this.state = 5337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5336;
					this.separator();
					}
					}
					this.state = 5339;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 5341;
					this.match(cobolParser.WHEN);
					this.state = 5343;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5342;
						this.separator();
						}
						}
						this.state = 5345;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5349;
				this.match(cobolParser.ZERO);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5351;
				this.value_is();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5352;
				this.renames();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renames(): RenamesContext {
		let _localctx: RenamesContext = new RenamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, cobolParser.RULE_renames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5355;
			this.match(cobolParser.RENAMES);
			this.state = 5357;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5356;
				this.separator();
				}
				}
				this.state = 5359;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5361;
			this.rename_start();
			this.state = 5375;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 874, this._ctx) ) {
			case 1:
				{
				this.state = 5363;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5362;
					this.separator();
					}
					}
					this.state = 5365;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5367;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5368;
					this.separator();
					}
					}
					this.state = 5371;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5373;
				this.rename_end();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_start(): Rename_startContext {
		let _localctx: Rename_startContext = new Rename_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, cobolParser.RULE_rename_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5377;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_end(): Rename_endContext {
		let _localctx: Rename_endContext = new Rename_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, cobolParser.RULE_rename_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5379;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is(): Value_isContext {
		let _localctx: Value_isContext = new Value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, cobolParser.RULE_value_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5401;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.VALUE:
				{
				this.state = 5381;
				this.match(cobolParser.VALUE);
				this.state = 5389;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 876, this._ctx) ) {
				case 1:
					{
					this.state = 5383;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5382;
						this.separator();
						}
						}
						this.state = 5385;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5387;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.VALUES:
				{
				this.state = 5391;
				this.match(cobolParser.VALUES);
				this.state = 5399;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 878, this._ctx) ) {
				case 1:
					{
					this.state = 5393;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5392;
						this.separator();
						}
						}
						this.state = 5395;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5397;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5404;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5403;
				this.separator();
				}
				}
				this.state = 5406;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5408;
			this.value_is_definition();
			this.state = 5418;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 882, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5410;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5409;
						this.separator();
						}
						}
						this.state = 5412;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5414;
					this.value_is_definition();
					}
					}
				}
				this.state = 5420;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 882, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition(): Value_is_definitionContext {
		let _localctx: Value_is_definitionContext = new Value_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, cobolParser.RULE_value_is_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5421;
			this.value_is_definition_part();
			this.state = 5429;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 884, this._ctx) ) {
			case 1:
				{
				this.state = 5423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5422;
					this.separator();
					}
					}
					this.state = 5425;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5427;
				this.value_is_definition_thru();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_part(): Value_is_definition_partContext {
		let _localctx: Value_is_definition_partContext = new Value_is_definition_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, cobolParser.RULE_value_is_definition_part);
		let _la: number;
		try {
			this.state = 5448;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5431;
				this.value_is_literal();
				}
				break;
			case cobolParser.REFERENCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5432;
				this.match(cobolParser.REFERENCE);
				this.state = 5434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5433;
					this.separator();
					}
					}
					this.state = 5436;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5438;
				this.ref_data_name();
				}
				break;
			case cobolParser.EXTERNAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5440;
				this.match(cobolParser.EXTERNAL);
				this.state = 5442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5441;
					this.separator();
					}
					}
					this.state = 5444;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5446;
				this.external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_thru(): Value_is_definition_thruContext {
		let _localctx: Value_is_definition_thruContext = new Value_is_definition_thruContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, cobolParser.RULE_value_is_definition_thru);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5450;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5452;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5451;
				this.separator();
				}
				}
				this.state = 5454;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5456;
			this.value_is_definition_part();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public external_name(): External_nameContext {
		let _localctx: External_nameContext = new External_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, cobolParser.RULE_external_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5458;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ref_data_name(): Ref_data_nameContext {
		let _localctx: Ref_data_nameContext = new Ref_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, cobolParser.RULE_ref_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5460;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_literal(): Value_is_literalContext {
		let _localctx: Value_is_literalContext = new Value_is_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, cobolParser.RULE_value_is_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5462;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public occurs(): OccursContext {
		let _localctx: OccursContext = new OccursContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, cobolParser.RULE_occurs);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5464;
			this.match(cobolParser.OCCURS);
			this.state = 5466;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5465;
				this.separator();
				}
				}
				this.state = 5468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5470;
			this.times_definition();
			this.state = 5480;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 891, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5472;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5471;
						this.separator();
						}
						}
						this.state = 5474;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5476;
					this.key_is();
					}
					}
				}
				this.state = 5482;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 891, this._ctx);
			}
			this.state = 5490;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 893, this._ctx) ) {
			case 1:
				{
				this.state = 5484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5483;
					this.separator();
					}
					}
					this.state = 5486;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5488;
				this.indexed_by();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexed_by(): Indexed_byContext {
		let _localctx: Indexed_byContext = new Indexed_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, cobolParser.RULE_indexed_by);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5492;
			this.match(cobolParser.INDEXED);
			this.state = 5494;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5493;
				this.separator();
				}
				}
				this.state = 5496;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BY) {
				{
				this.state = 5498;
				this.match(cobolParser.BY);
				this.state = 5500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5499;
					this.separator();
					}
					}
					this.state = 5502;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 5506;
			this.ind_name();
			this.state = 5516;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 898, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5508;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5507;
						this.separator();
						}
						}
						this.state = 5510;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5512;
					this.ind_name();
					}
					}
				}
				this.state = 5518;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 898, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ind_name(): Ind_nameContext {
		let _localctx: Ind_nameContext = new Ind_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, cobolParser.RULE_ind_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5519;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_is(): Key_isContext {
		let _localctx: Key_isContext = new Key_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, cobolParser.RULE_key_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5521;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5523;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5522;
				this.separator();
				}
				}
				this.state = 5525;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 5533;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 5527;
				this.match(cobolParser.KEY);
				this.state = 5529;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5528;
					this.separator();
					}
					}
					this.state = 5531;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 5541;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5535;
				this.match(cobolParser.IS);
				this.state = 5537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5536;
					this.separator();
					}
					}
					this.state = 5539;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 5543;
			this.key_name();
			this.state = 5553;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 905, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5544;
						this.separator();
						}
						}
						this.state = 5547;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5549;
					this.key_name();
					}
					}
				}
				this.state = 5555;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 905, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_name(): Key_nameContext {
		let _localctx: Key_nameContext = new Key_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, cobolParser.RULE_key_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5556;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public times_definition(): Times_definitionContext {
		let _localctx: Times_definitionContext = new Times_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, cobolParser.RULE_times_definition);
		let _la: number;
		try {
			this.state = 5606;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 914, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5558;
				this.table_size();
				this.state = 5560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5559;
					this.separator();
					}
					}
					this.state = 5562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5564;
				this.match(cobolParser.TIMES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5566;
				this.min_times();
				this.state = 5568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5567;
					this.separator();
					}
					}
					this.state = 5570;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5572;
				this.match(cobolParser.TO);
				this.state = 5574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5573;
					this.separator();
					}
					}
					this.state = 5576;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5578;
				this.max_times();
				this.state = 5580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5579;
					this.separator();
					}
					}
					this.state = 5582;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5584;
				this.match(cobolParser.TIMES);
				this.state = 5586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5585;
					this.separator();
					}
					}
					this.state = 5588;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5590;
				this.match(cobolParser.DEPENDING);
				this.state = 5592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5591;
					this.separator();
					}
					}
					this.state = 5594;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5602;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 5596;
					this.match(cobolParser.ON);
					this.state = 5598;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5597;
						this.separator();
						}
						}
						this.state = 5600;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5604;
				this.depending_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_size(): Table_sizeContext {
		let _localctx: Table_sizeContext = new Table_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, cobolParser.RULE_table_size);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5608;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public min_times(): Min_timesContext {
		let _localctx: Min_timesContext = new Min_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, cobolParser.RULE_min_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5610;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public max_times(): Max_timesContext {
		let _localctx: Max_timesContext = new Max_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, cobolParser.RULE_max_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5612;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_description_entry(): Report_group_description_entryContext {
		let _localctx: Report_group_description_entryContext = new Report_group_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, cobolParser.RULE_report_group_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5614;
			this.report_group_data_description();
			this.state = 5624;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 916, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5618;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 5615;
						this.separator();
						}
						}
						this.state = 5620;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5621;
					this.report_group_data_description();
					}
					}
				}
				this.state = 5626;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 916, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description(): Report_group_data_descriptionContext {
		let _localctx: Report_group_data_descriptionContext = new Report_group_data_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, cobolParser.RULE_report_group_data_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5627;
			this.level_number();
			this.state = 5635;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 918, this._ctx) ) {
			case 1:
				{
				this.state = 5629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5628;
					this.separator();
					}
					}
					this.state = 5631;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5633;
				this.data_name();
				}
				break;
			}
			this.state = 5646;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 5638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5637;
					this.separator();
					}
					}
					this.state = 5640;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5642;
				this.report_group_data_description_clause();
				}
				}
				this.state = 5648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5649;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description_clause(): Report_group_data_description_clauseContext {
		let _localctx: Report_group_data_description_clauseContext = new Report_group_data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, cobolParser.RULE_report_group_data_description_clause);
		let _la: number;
		try {
			this.state = 5825;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5651;
				this.match(cobolParser.LINE);
				this.state = 5653;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5652;
					this.separator();
					}
					}
					this.state = 5655;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 5657;
					this.match(cobolParser.NUMBER);
					this.state = 5659;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5658;
						this.separator();
						}
						}
						this.state = 5661;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5665;
					this.match(cobolParser.IS);
					this.state = 5667;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5666;
						this.separator();
						}
						}
						this.state = 5669;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5673;
				this.line_num_definition();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5675;
				this.match(cobolParser.NEXT);
				this.state = 5677;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5676;
					this.separator();
					}
					}
					this.state = 5679;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5681;
				this.match(cobolParser.GROUP);
				this.state = 5683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5682;
					this.separator();
					}
					}
					this.state = 5685;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5693;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5687;
					this.match(cobolParser.IS);
					this.state = 5689;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5688;
						this.separator();
						}
						}
						this.state = 5691;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5695;
				this.next_group_definition();
				}
				break;
			case cobolParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5697;
				this.match(cobolParser.TYPE);
				this.state = 5699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5698;
					this.separator();
					}
					}
					this.state = 5701;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5703;
					this.match(cobolParser.IS);
					this.state = 5705;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5704;
						this.separator();
						}
						}
						this.state = 5707;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5711;
				this.type_is_definition();
				}
				break;
			case cobolParser.DISPLAY:
			case cobolParser.USAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 5713;
					this.match(cobolParser.USAGE);
					this.state = 5715;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5714;
						this.separator();
						}
						}
						this.state = 5717;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 5719;
						this.match(cobolParser.IS);
						this.state = 5721;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5720;
							this.separator();
							}
							}
							this.state = 5723;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					}
				}

				this.state = 5729;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.BLANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5730;
				this.match(cobolParser.BLANK);
				this.state = 5732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5731;
					this.separator();
					}
					}
					this.state = 5734;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 5736;
					this.match(cobolParser.WHEN);
					this.state = 5738;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5737;
						this.separator();
						}
						}
						this.state = 5740;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5744;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.COLUMN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5746;
				this.match(cobolParser.COLUMN);
				this.state = 5748;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5747;
					this.separator();
					}
					}
					this.state = 5750;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 5752;
					this.match(cobolParser.NUMBER);
					this.state = 5754;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5753;
						this.separator();
						}
						}
						this.state = 5756;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5766;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5760;
					this.match(cobolParser.IS);
					this.state = 5762;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5761;
						this.separator();
						}
						}
						this.state = 5764;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5768;
				this.column_number();
				}
				break;
			case cobolParser.GROUP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5770;
				this.match(cobolParser.GROUP);
				this.state = 5778;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 946, this._ctx) ) {
				case 1:
					{
					this.state = 5772;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5771;
						this.separator();
						}
						}
						this.state = 5774;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5776;
					this.match(cobolParser.INDICATE);
					}
					break;
				}
				}
				break;
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5780;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5788;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 948, this._ctx) ) {
				case 1:
					{
					this.state = 5782;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5781;
						this.separator();
						}
						}
						this.state = 5784;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5786;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;
			case cobolParser.PIC:
			case cobolParser.PICTURE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5790;
				this.picture();
				}
				break;
			case cobolParser.LEADING:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5791;
				this.sign_is();
				}
				break;
			case cobolParser.SOURCE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5792;
				this.match(cobolParser.SOURCE);
				this.state = 5794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5793;
					this.separator();
					}
					}
					this.state = 5796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5804;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5798;
					this.match(cobolParser.IS);
					this.state = 5800;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5799;
						this.separator();
						}
						}
						this.state = 5802;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5806;
				this.source_name();
				}
				break;
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5808;
				this.match(cobolParser.VALUE);
				this.state = 5810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5809;
					this.separator();
					}
					}
					this.state = 5812;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5814;
					this.match(cobolParser.IS);
					this.state = 5816;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5815;
						this.separator();
						}
						}
						this.state = 5818;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5822;
				this.value_is_literal();
				}
				break;
			case cobolParser.SUM:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5824;
				this.sum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_is(): Sign_isContext {
		let _localctx: Sign_isContext = new Sign_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, cobolParser.RULE_sign_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5842;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 5827;
				this.match(cobolParser.SIGN);
				this.state = 5835;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 957, this._ctx) ) {
				case 1:
					{
					this.state = 5829;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5828;
						this.separator();
						}
						}
						this.state = 5831;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5833;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 5838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5837;
					this.separator();
					}
					}
					this.state = 5840;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 5844;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5860;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 963, this._ctx) ) {
			case 1:
				{
				this.state = 5846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5845;
					this.separator();
					}
					}
					this.state = 5848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5850;
				this.match(cobolParser.SEPARATE);
				this.state = 5858;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 962, this._ctx) ) {
				case 1:
					{
					this.state = 5852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5851;
						this.separator();
						}
						}
						this.state = 5854;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5856;
					this.match(cobolParser.CHARACTER);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum(): SumContext {
		let _localctx: SumContext = new SumContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, cobolParser.RULE_sum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5902;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5862;
				this.match(cobolParser.SUM);
				this.state = 5864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5863;
					this.separator();
					}
					}
					this.state = 5866;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5868;
				this.sum_name();
				this.state = 5878;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 966, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5870;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5869;
							this.separator();
							}
							}
							this.state = 5872;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 5874;
						this.sum_name();
						}
						}
					}
					this.state = 5880;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 966, this._ctx);
				}
				this.state = 5888;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 968, this._ctx) ) {
				case 1:
					{
					this.state = 5882;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5881;
						this.separator();
						}
						}
						this.state = 5884;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5886;
					this.match(cobolParser.UPON);
					}
					break;
				}
				this.state = 5899;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 970, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5891;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5890;
							this.separator();
							}
							}
							this.state = 5893;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 5895;
						this.detail_report_group_name();
						}
						}
					}
					this.state = 5901;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 970, this._ctx);
				}
				}
				}
				this.state = 5904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.SUM);
			this.state = 5928;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 976, this._ctx) ) {
			case 1:
				{
				this.state = 5909;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 5906;
					this.separator();
					}
					}
					this.state = 5911;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5912;
				this.match(cobolParser.RESET);
				this.state = 5914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5913;
					this.separator();
					}
					}
					this.state = 5916;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5924;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 5918;
					this.match(cobolParser.ON);
					this.state = 5920;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5919;
						this.separator();
						}
						}
						this.state = 5922;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 5926;
				this.control_foot_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_foot_name(): Control_foot_nameContext {
		let _localctx: Control_foot_nameContext = new Control_foot_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, cobolParser.RULE_control_foot_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5930;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public detail_report_group_name(): Detail_report_group_nameContext {
		let _localctx: Detail_report_group_nameContext = new Detail_report_group_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, cobolParser.RULE_detail_report_group_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5932;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum_name(): Sum_nameContext {
		let _localctx: Sum_nameContext = new Sum_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, cobolParser.RULE_sum_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5934;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_name(): Source_nameContext {
		let _localctx: Source_nameContext = new Source_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, cobolParser.RULE_source_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5936;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_number(): Column_numberContext {
		let _localctx: Column_numberContext = new Column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, cobolParser.RULE_column_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5938;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_is_definition(): Type_is_definitionContext {
		let _localctx: Type_is_definitionContext = new Type_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, cobolParser.RULE_type_is_definition);
		let _la: number;
		try {
			this.state = 6014;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 987, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5940;
				this.match(cobolParser.REPORT);
				this.state = 5942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5941;
					this.separator();
					}
					}
					this.state = 5944;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5946;
				this.match(cobolParser.HEADING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5948;
				this.match(cobolParser.RH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5949;
				this.match(cobolParser.PAGE);
				this.state = 5951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5950;
					this.separator();
					}
					}
					this.state = 5953;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5955;
				this.match(cobolParser.HEADING);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5957;
				this.match(cobolParser.PH);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5967;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 5958;
					this.match(cobolParser.CONTROL);
					this.state = 5960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5959;
						this.separator();
						}
						}
						this.state = 5962;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5964;
					this.match(cobolParser.HEADING);
					}
					break;
				case cobolParser.CH:
					{
					this.state = 5966;
					this.match(cobolParser.CH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5970;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5969;
					this.separator();
					}
					}
					this.state = 5972;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5974;
				this.type_control_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5976;
				this.match(cobolParser.DETAIL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5977;
				this.match(cobolParser.DE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5987;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 5978;
					this.match(cobolParser.CONTROL);
					this.state = 5980;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5979;
						this.separator();
						}
						}
						this.state = 5982;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 5984;
					this.match(cobolParser.FOOTING);
					}
					break;
				case cobolParser.CF:
					{
					this.state = 5986;
					this.match(cobolParser.CF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5989;
					this.separator();
					}
					}
					this.state = 5992;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 5994;
				this.type_control_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5996;
				this.match(cobolParser.PAGE);
				this.state = 5998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5997;
					this.separator();
					}
					}
					this.state = 6000;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6002;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6004;
				this.match(cobolParser.PF);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6005;
				this.match(cobolParser.REPORT);
				this.state = 6007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6006;
					this.separator();
					}
					}
					this.state = 6009;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6011;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6013;
				this.match(cobolParser.RF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_control_name(): Type_control_nameContext {
		let _localctx: Type_control_nameContext = new Type_control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, cobolParser.RULE_type_control_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6016;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public next_group_definition(): Next_group_definitionContext {
		let _localctx: Next_group_definitionContext = new Next_group_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, cobolParser.RULE_next_group_definition);
		let _la: number;
		try {
			this.state = 6035;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6018;
				this.line_num();
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6019;
				this.match(cobolParser.PLUS);
				this.state = 6021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6020;
					this.separator();
					}
					}
					this.state = 6023;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6025;
				this.line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6027;
				this.match(cobolParser.NEXT);
				this.state = 6029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6028;
					this.separator();
					}
					}
					this.state = 6031;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6033;
				this.match(cobolParser.PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num_definition(): Line_num_definitionContext {
		let _localctx: Line_num_definitionContext = new Line_num_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, cobolParser.RULE_line_num_definition);
		let _la: number;
		try {
			this.state = 6069;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6037;
				this.line_num();
				this.state = 6059;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 995, this._ctx) ) {
				case 1:
					{
					this.state = 6039;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6038;
						this.separator();
						}
						}
						this.state = 6041;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6049;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 6043;
						this.match(cobolParser.ON);
						this.state = 6045;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6044;
							this.separator();
							}
							}
							this.state = 6047;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 6051;
					this.match(cobolParser.NEXT);
					this.state = 6053;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6052;
						this.separator();
						}
						}
						this.state = 6055;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6057;
					this.match(cobolParser.PAGE);
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6061;
				this.match(cobolParser.PLUS);
				this.state = 6063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6062;
					this.separator();
					}
					}
					this.state = 6065;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6067;
				this.line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num(): Line_numContext {
		let _localctx: Line_numContext = new Line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, cobolParser.RULE_line_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6071;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rd_clause(): Rd_clauseContext {
		let _localctx: Rd_clauseContext = new Rd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, cobolParser.RULE_rd_clause);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6263;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.GLOBAL:
			case cobolParser.IS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6079;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6073;
					this.match(cobolParser.IS);
					this.state = 6075;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6074;
						this.separator();
						}
						}
						this.state = 6077;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6081;
				this.match(cobolParser.GLOBAL);
				}
				break;
			case cobolParser.CODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6082;
				this.match(cobolParser.CODE);
				this.state = 6084;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6083;
					this.separator();
					}
					}
					this.state = 6086;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6088;
				this.report_code();
				}
				break;
			case cobolParser.CONTROL:
			case cobolParser.CONTROLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6110;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 6090;
					this.match(cobolParser.CONTROL);
					this.state = 6098;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1002, this._ctx) ) {
					case 1:
						{
						this.state = 6092;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6091;
							this.separator();
							}
							}
							this.state = 6094;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 6096;
						this.match(cobolParser.IS);
						}
						break;
					}
					}
					break;
				case cobolParser.CONTROLS:
					{
					this.state = 6100;
					this.match(cobolParser.CONTROLS);
					this.state = 6108;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1004, this._ctx) ) {
					case 1:
						{
						this.state = 6102;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6101;
							this.separator();
							}
							}
							this.state = 6104;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 6106;
						this.match(cobolParser.ARE);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6112;
					this.separator();
					}
					}
					this.state = 6115;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6143;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 6117;
					this.control_name();
					this.state = 6127;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1008, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6121;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
								{
								{
								this.state = 6118;
								this.separator();
								}
								}
								this.state = 6123;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 6124;
							this.control_name();
							}
							}
						}
						this.state = 6129;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1008, this._ctx);
					}
					}
					break;
				case cobolParser.FINAL:
					{
					this.state = 6130;
					this.match(cobolParser.FINAL);
					this.state = 6140;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1010, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6134;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
								{
								{
								this.state = 6131;
								this.separator();
								}
								}
								this.state = 6136;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 6137;
							this.control_name();
							}
							}
						}
						this.state = 6142;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1010, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6145;
				this.match(cobolParser.PAGE);
				this.state = 6147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6146;
					this.separator();
					}
					}
					this.state = 6149;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6179;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LIMIT:
					{
					this.state = 6151;
					this.match(cobolParser.LIMIT);
					this.state = 6153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6152;
						this.separator();
						}
						}
						this.state = 6155;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6163;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 6157;
						this.match(cobolParser.IS);
						this.state = 6159;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6158;
							this.separator();
							}
							}
							this.state = 6161;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.LIMITS:
					{
					this.state = 6165;
					this.match(cobolParser.LIMITS);
					this.state = 6167;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6166;
						this.separator();
						}
						}
						this.state = 6169;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6177;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ARE) {
						{
						this.state = 6171;
						this.match(cobolParser.ARE);
						this.state = 6173;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6172;
							this.separator();
							}
							}
							this.state = 6175;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.NUMERIC_LITERAL:
					break;
				default:
					break;
				}
				this.state = 6181;
				this.page_size_rd();
				this.state = 6189;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1021, this._ctx) ) {
				case 1:
					{
					this.state = 6183;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6182;
						this.separator();
						}
						}
						this.state = 6185;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6187;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 6204;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1024, this._ctx) ) {
				case 1:
					{
					this.state = 6192;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6191;
						this.separator();
						}
						}
						this.state = 6194;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6196;
					this.match(cobolParser.HEADING);
					this.state = 6198;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6197;
						this.separator();
						}
						}
						this.state = 6200;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6202;
					this.heading_line();
					}
					break;
				}
				this.state = 6225;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1028, this._ctx) ) {
				case 1:
					{
					this.state = 6207;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6206;
						this.separator();
						}
						}
						this.state = 6209;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6211;
					this.match(cobolParser.FIRST);
					this.state = 6213;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6212;
						this.separator();
						}
						}
						this.state = 6215;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6217;
					this.match(cobolParser.DETAIL);
					this.state = 6219;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6218;
						this.separator();
						}
						}
						this.state = 6221;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6223;
					this.first_detail_line();
					}
					break;
				}
				this.state = 6246;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1032, this._ctx) ) {
				case 1:
					{
					this.state = 6228;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6227;
						this.separator();
						}
						}
						this.state = 6230;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6232;
					this.match(cobolParser.LAST);
					this.state = 6234;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6233;
						this.separator();
						}
						}
						this.state = 6236;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6238;
					this.match(cobolParser.DETAIL);
					this.state = 6240;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6239;
						this.separator();
						}
						}
						this.state = 6242;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6244;
					this.last_detail_line();
					}
					break;
				}
				this.state = 6261;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1035, this._ctx) ) {
				case 1:
					{
					this.state = 6249;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6248;
						this.separator();
						}
						}
						this.state = 6251;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6253;
					this.match(cobolParser.FOOTING);
					this.state = 6255;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6254;
						this.separator();
						}
						}
						this.state = 6257;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6259;
					this.footing_line_rd();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line_rd(): Footing_line_rdContext {
		let _localctx: Footing_line_rdContext = new Footing_line_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, cobolParser.RULE_footing_line_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6265;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_detail_line(): Last_detail_lineContext {
		let _localctx: Last_detail_lineContext = new Last_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, cobolParser.RULE_last_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6267;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_detail_line(): First_detail_lineContext {
		let _localctx: First_detail_lineContext = new First_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, cobolParser.RULE_first_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6269;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public heading_line(): Heading_lineContext {
		let _localctx: Heading_lineContext = new Heading_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, cobolParser.RULE_heading_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6271;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size_rd(): Page_size_rdContext {
		let _localctx: Page_size_rdContext = new Page_size_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, cobolParser.RULE_page_size_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6273;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_name(): Control_nameContext {
		let _localctx: Control_nameContext = new Control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, cobolParser.RULE_control_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6275;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_code(): Report_codeContext {
		let _localctx: Report_codeContext = new Report_codeContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, cobolParser.RULE_report_code);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6277;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage(): UsageContext {
		let _localctx: UsageContext = new UsageContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, cobolParser.RULE_usage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6294;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 6279;
				this.match(cobolParser.USAGE);
				this.state = 6287;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1038, this._ctx) ) {
				case 1:
					{
					this.state = 6281;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6280;
						this.separator();
						}
						}
						this.state = 6283;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6285;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 6290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6289;
					this.separator();
					}
					}
					this.state = 6292;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 6296;
			this.usage_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage_definition(): Usage_definitionContext {
		let _localctx: Usage_definitionContext = new Usage_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, cobolParser.RULE_usage_definition);
		let _la: number;
		try {
			this.state = 6361;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6298;
				this.match(cobolParser.BINARY);
				}
				break;
			case cobolParser.BINARY_CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6299;
				this.match(cobolParser.BINARY_CHAR);
				this.state = 6307;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1042, this._ctx) ) {
				case 1:
					{
					this.state = 6301;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6300;
						this.separator();
						}
						}
						this.state = 6303;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6305;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_SHORT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6309;
				this.match(cobolParser.BINARY_SHORT);
				this.state = 6317;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1044, this._ctx) ) {
				case 1:
					{
					this.state = 6311;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6310;
						this.separator();
						}
						}
						this.state = 6313;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6315;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_LONG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6319;
				this.match(cobolParser.BINARY_LONG);
				this.state = 6327;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1046, this._ctx) ) {
				case 1:
					{
					this.state = 6321;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6320;
						this.separator();
						}
						}
						this.state = 6323;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6325;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_DOUBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6329;
				this.match(cobolParser.BINARY_DOUBLE);
				this.state = 6337;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1048, this._ctx) ) {
				case 1:
					{
					this.state = 6331;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6330;
						this.separator();
						}
						}
						this.state = 6333;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6335;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.COMPUTATIONAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6339;
				this.match(cobolParser.COMPUTATIONAL);
				}
				break;
			case cobolParser.COMPUTATIONAL_1:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6340;
				this.match(cobolParser.COMPUTATIONAL_1);
				}
				break;
			case cobolParser.COMPUTATIONAL_2:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6341;
				this.match(cobolParser.COMPUTATIONAL_2);
				}
				break;
			case cobolParser.COMPUTATIONAL_3:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6342;
				this.match(cobolParser.COMPUTATIONAL_3);
				}
				break;
			case cobolParser.COMPUTATIONAL_4:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6343;
				this.match(cobolParser.COMPUTATIONAL_4);
				}
				break;
			case cobolParser.COMPUTATIONAL_5:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6344;
				this.match(cobolParser.COMPUTATIONAL_5);
				}
				break;
			case cobolParser.COMPUTATIONAL_X:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6345;
				this.match(cobolParser.COMPUTATIONAL_X);
				}
				break;
			case cobolParser.COMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6346;
				this.match(cobolParser.COMP);
				}
				break;
			case cobolParser.COMP_1:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6347;
				this.match(cobolParser.COMP_1);
				}
				break;
			case cobolParser.COMP_2:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6348;
				this.match(cobolParser.COMP_2);
				}
				break;
			case cobolParser.COMP_3:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6349;
				this.match(cobolParser.COMP_3);
				}
				break;
			case cobolParser.COMP_4:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6350;
				this.match(cobolParser.COMP_4);
				}
				break;
			case cobolParser.COMP_5:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6351;
				this.match(cobolParser.COMP_5);
				}
				break;
			case cobolParser.COMP_X:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6352;
				this.match(cobolParser.COMP_X);
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6353;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.FLOAT_SHORT:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 6354;
				this.match(cobolParser.FLOAT_SHORT);
				}
				break;
			case cobolParser.FLOAT_LONG:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 6355;
				this.match(cobolParser.FLOAT_LONG);
				}
				break;
			case cobolParser.FLOAT_EXTENDED:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 6356;
				this.match(cobolParser.FLOAT_EXTENDED);
				}
				break;
			case cobolParser.INDEX:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 6357;
				this.match(cobolParser.INDEX);
				}
				break;
			case cobolParser.PACKED_DECIMAL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 6358;
				this.match(cobolParser.PACKED_DECIMAL);
				}
				break;
			case cobolParser.POINTER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 6359;
				this.match(cobolParser.POINTER);
				}
				break;
			case cobolParser.POINTER_64:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 6360;
				this.match(cobolParser.POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public picture(): PictureContext {
		let _localctx: PictureContext = new PictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, cobolParser.RULE_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6363;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PIC || _la === cobolParser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6365;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6364;
					this.separator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6367;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1050, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 6375;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6369;
				this.match(cobolParser.IS);
				this.state = 6371;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6370;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6373;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1051, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 6377;
			this.character_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_string(): Character_stringContext {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, cobolParser.RULE_character_string);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6380;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6379;
					this.char_str_part();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6382;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1053, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_str_part(): Char_str_partContext {
		let _localctx: Char_str_partContext = new Char_str_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, cobolParser.RULE_char_str_part);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6384;
			_la = this._input.LA(1);
			if (!(((((_la - 429)) & ~0x1F) === 0 && ((1 << (_la - 429)) & ((1 << (cobolParser.SLASH_ - 429)) | (1 << (cobolParser.COMMA_ - 429)) | (1 << (cobolParser.LPAREN_ - 429)) | (1 << (cobolParser.RPAREN_ - 429)) | (1 << (cobolParser.DOT_ - 429)) | (1 << (cobolParser.NUMERIC_LITERAL - 429)) | (1 << (cobolParser.USER_DEFINED_WORD - 429)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public other_data_item(): Other_data_itemContext {
		let _localctx: Other_data_itemContext = new Other_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, cobolParser.RULE_other_data_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6386;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_name(): Data_nameContext {
		let _localctx: Data_nameContext = new Data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, cobolParser.RULE_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6388;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sd_clause(): Sd_clauseContext {
		let _localctx: Sd_clauseContext = new Sd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, cobolParser.RULE_sd_clause);
		try {
			this.state = 6392;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6390;
				this.record();
				}
				break;
			case cobolParser.DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6391;
				this.data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_is(): Report_isContext {
		let _localctx: Report_isContext = new Report_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, cobolParser.RULE_report_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6414;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				{
				this.state = 6394;
				this.match(cobolParser.REPORT);
				this.state = 6402;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1056, this._ctx) ) {
				case 1:
					{
					this.state = 6396;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6395;
						this.separator();
						}
						}
						this.state = 6398;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6400;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.REPORTS:
				{
				this.state = 6404;
				this.match(cobolParser.REPORTS);
				this.state = 6412;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1058, this._ctx) ) {
				case 1:
					{
					this.state = 6406;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6405;
						this.separator();
						}
						}
						this.state = 6408;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6410;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6417;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6416;
				this.separator();
				}
				}
				this.state = 6419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6421;
			this.report_name();
			this.state = 6431;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1062, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6425;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 6422;
						this.separator();
						}
						}
						this.state = 6427;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6428;
					this.report_name();
					}
					}
				}
				this.state = 6433;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1062, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_name(): Report_nameContext {
		let _localctx: Report_nameContext = new Report_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, cobolParser.RULE_report_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6434;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linage(): LinageContext {
		let _localctx: LinageContext = new LinageContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, cobolParser.RULE_linage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6436;
			this.match(cobolParser.LINAGE);
			this.state = 6438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6437;
				this.separator();
				}
				}
				this.state = 6440;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6442;
				this.match(cobolParser.IS);
				this.state = 6444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6443;
					this.separator();
					}
					}
					this.state = 6446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 6450;
			this.page_size();
			this.state = 6458;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1067, this._ctx) ) {
			case 1:
				{
				this.state = 6452;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6451;
					this.separator();
					}
					}
					this.state = 6454;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6456;
				this.match(cobolParser.LINES);
				}
				break;
			}
			this.state = 6489;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1074, this._ctx) ) {
			case 1:
				{
				this.state = 6461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6460;
					this.separator();
					}
					}
					this.state = 6463;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 6465;
					this.match(cobolParser.WITH);
					this.state = 6467;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6466;
						this.separator();
						}
						}
						this.state = 6469;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6473;
				this.match(cobolParser.FOOTING);
				this.state = 6475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6474;
					this.separator();
					}
					}
					this.state = 6477;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 6479;
					this.match(cobolParser.AT);
					this.state = 6481;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6480;
						this.separator();
						}
						}
						this.state = 6483;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6487;
				this.footing_line();
				}
				break;
			}
			this.state = 6520;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1081, this._ctx) ) {
			case 1:
				{
				this.state = 6492;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6491;
					this.separator();
					}
					}
					this.state = 6494;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 6496;
					this.match(cobolParser.LINES);
					this.state = 6498;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6497;
						this.separator();
						}
						}
						this.state = 6500;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 6504;
					this.match(cobolParser.AT);
					this.state = 6506;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6505;
						this.separator();
						}
						}
						this.state = 6508;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6512;
				this.match(cobolParser.TOP);
				this.state = 6514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6513;
					this.separator();
					}
					}
					this.state = 6516;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6518;
				this.top_lines();
				}
				break;
			}
			this.state = 6551;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1088, this._ctx) ) {
			case 1:
				{
				this.state = 6523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6522;
					this.separator();
					}
					}
					this.state = 6525;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 6527;
					this.match(cobolParser.LINES);
					this.state = 6529;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6528;
						this.separator();
						}
						}
						this.state = 6531;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6541;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 6535;
					this.match(cobolParser.AT);
					this.state = 6537;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6536;
						this.separator();
						}
						}
						this.state = 6539;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6543;
				this.match(cobolParser.BOTTOM);
				this.state = 6545;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6544;
					this.separator();
					}
					}
					this.state = 6547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6549;
				this.bottom_lines();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bottom_lines(): Bottom_linesContext {
		let _localctx: Bottom_linesContext = new Bottom_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, cobolParser.RULE_bottom_lines);
		try {
			this.state = 6555;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6553;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6554;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_lines(): Top_linesContext {
		let _localctx: Top_linesContext = new Top_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, cobolParser.RULE_top_lines);
		try {
			this.state = 6559;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6557;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6558;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line(): Footing_lineContext {
		let _localctx: Footing_lineContext = new Footing_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, cobolParser.RULE_footing_line);
		try {
			this.state = 6563;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6561;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6562;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size(): Page_sizeContext {
		let _localctx: Page_sizeContext = new Page_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, cobolParser.RULE_page_size);
		try {
			this.state = 6567;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6565;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6566;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_rec(): Data_recContext {
		let _localctx: Data_recContext = new Data_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, cobolParser.RULE_data_rec);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6569;
			this.match(cobolParser.DATA);
			this.state = 6571;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6570;
				this.separator();
				}
				}
				this.state = 6573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6595;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 6575;
				this.match(cobolParser.RECORDS);
				this.state = 6583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					this.state = 6577;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6576;
						this.separator();
						}
						}
						this.state = 6579;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6581;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 6585;
				this.match(cobolParser.RECORD);
				this.state = 6593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					this.state = 6587;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6586;
						this.separator();
						}
						}
						this.state = 6589;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6591;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6597;
			this.rec_name();
			this.state = 6607;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1100, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6599;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6598;
						this.separator();
						}
						}
						this.state = 6601;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6603;
					this.rec_name();
					}
					}
				}
				this.state = 6609;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1100, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_name(): Rec_nameContext {
		let _localctx: Rec_nameContext = new Rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, cobolParser.RULE_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6610;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id(): Value_of_idContext {
		let _localctx: Value_of_idContext = new Value_of_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, cobolParser.RULE_value_of_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6612;
			this.match(cobolParser.VALUE);
			this.state = 6614;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6613;
				this.separator();
				}
				}
				this.state = 6616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6618;
			this.match(cobolParser.OF);
			this.state = 6620;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6619;
				this.separator();
				}
				}
				this.state = 6622;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6624;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FILE_ID || _la === cobolParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6626;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6625;
				this.separator();
				}
				}
				this.state = 6628;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6636;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6630;
				this.match(cobolParser.IS);
				this.state = 6632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6631;
					this.separator();
					}
					}
					this.state = 6634;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 6638;
			this.value_of_id_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id_definition(): Value_of_id_definitionContext {
		let _localctx: Value_of_id_definitionContext = new Value_of_id_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, cobolParser.RULE_value_of_id_definition);
		try {
			this.state = 6642;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6640;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6641;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, cobolParser.RULE_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6644;
			this.match(cobolParser.LABEL);
			this.state = 6646;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6645;
				this.separator();
				}
				}
				this.state = 6648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6670;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 6650;
				this.match(cobolParser.RECORDS);
				this.state = 6658;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1109, this._ctx) ) {
				case 1:
					{
					this.state = 6652;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6651;
						this.separator();
						}
						}
						this.state = 6654;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6656;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 6660;
				this.match(cobolParser.RECORD);
				this.state = 6668;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1111, this._ctx) ) {
				case 1:
					{
					this.state = 6662;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6661;
						this.separator();
						}
						}
						this.state = 6664;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6666;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6673;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6672;
				this.separator();
				}
				}
				this.state = 6675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6677;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.OMITTED || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record(): RecordContext {
		let _localctx: RecordContext = new RecordContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, cobolParser.RULE_record);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6679;
			this.match(cobolParser.RECORD);
			this.state = 6681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6680;
				this.separator();
				}
				}
				this.state = 6683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 6685;
			this.record_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_definition(): Record_definitionContext {
		let _localctx: Record_definitionContext = new Record_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, cobolParser.RULE_record_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6810;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTAINS:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6693;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTAINS) {
					{
					this.state = 6687;
					this.match(cobolParser.CONTAINS);
					this.state = 6689;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6688;
						this.separator();
						}
						}
						this.state = 6691;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6707;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1119, this._ctx) ) {
				case 1:
					{
					this.state = 6695;
					this.shortest_rec();
					this.state = 6697;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6696;
						this.separator();
						}
						}
						this.state = 6699;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6701;
					this.match(cobolParser.TO);
					this.state = 6703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6702;
						this.separator();
						}
						}
						this.state = 6705;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
					break;
				}
				this.state = 6709;
				this.longest_rec();
				this.state = 6713;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1120, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6710;
						this.separator();
						}
						}
					}
					this.state = 6715;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1120, this._ctx);
				}
				this.state = 6723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 6716;
					this.match(cobolParser.CHARACTERS);
					this.state = 6720;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1121, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6717;
							this.separator();
							}
							}
						}
						this.state = 6722;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1121, this._ctx);
					}
					}
				}

				}
				break;
			case cobolParser.IS:
			case cobolParser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6731;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6725;
					this.match(cobolParser.IS);
					this.state = 6727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6726;
						this.separator();
						}
						}
						this.state = 6729;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6733;
				this.match(cobolParser.VARYING);
				this.state = 6735;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6734;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6737;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1125, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 6745;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 6739;
					this.match(cobolParser.IN);
					this.state = 6741;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 6740;
							this.separator();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 6743;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1126, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 6754;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIZE) {
					{
					this.state = 6747;
					this.match(cobolParser.SIZE);
					this.state = 6751;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1128, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6748;
							this.separator();
							}
							}
						}
						this.state = 6753;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1128, this._ctx);
					}
					}
				}

				this.state = 6765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM || _la === cobolParser.NUMERIC_LITERAL) {
					{
					this.state = 6762;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FROM) {
						{
						this.state = 6756;
						this.match(cobolParser.FROM);
						this.state = 6758;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6757;
							this.separator();
							}
							}
							this.state = 6760;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 6764;
					this.shortest_rec();
					}
				}

				this.state = 6775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 6767;
					this.match(cobolParser.TO);
					this.state = 6769;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6768;
						this.separator();
						}
						}
						this.state = 6771;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6773;
					this.longest_rec();
					}
				}

				this.state = 6790;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1137, this._ctx) ) {
				case 1:
					{
					this.state = 6780;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 6777;
						this.separator();
						}
						}
						this.state = 6782;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6783;
					this.match(cobolParser.CHARACTERS);
					this.state = 6787;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1136, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6784;
							this.separator();
							}
							}
						}
						this.state = 6789;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1136, this._ctx);
					}
					}
					break;
				}
				this.state = 6808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEPENDING) {
					{
					this.state = 6792;
					this.match(cobolParser.DEPENDING);
					this.state = 6794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6793;
						this.separator();
						}
						}
						this.state = 6796;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 6798;
						this.match(cobolParser.ON);
						this.state = 6800;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6799;
							this.separator();
							}
							}
							this.state = 6802;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 6806;
					this.depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public depending_item(): Depending_itemContext {
		let _localctx: Depending_itemContext = new Depending_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, cobolParser.RULE_depending_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6812;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortest_rec(): Shortest_recContext {
		let _localctx: Shortest_recContext = new Shortest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, cobolParser.RULE_shortest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6814;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public longest_rec(): Longest_recContext {
		let _localctx: Longest_recContext = new Longest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, cobolParser.RULE_longest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6816;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_entry(): Screen_description_entryContext {
		let _localctx: Screen_description_entryContext = new Screen_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, cobolParser.RULE_screen_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6818;
			this.level_number();
			this.state = 6828;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1145, this._ctx) ) {
			case 1:
				{
				this.state = 6820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6819;
					this.separator();
					}
					}
					this.state = 6822;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6826;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 6824;
					this.screen_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 6825;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 6839;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 6831;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6830;
					this.separator();
					}
					}
					this.state = 6833;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6835;
				this.screen_description_clause();
				}
				}
				this.state = 6841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6842;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_name(): Screen_nameContext {
		let _localctx: Screen_nameContext = new Screen_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, cobolParser.RULE_screen_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6844;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_clause(): Screen_description_clauseContext {
		let _localctx: Screen_description_clauseContext = new Screen_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, cobolParser.RULE_screen_description_clause);
		let _la: number;
		try {
			this.state = 7048;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1186, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6846;
				this.match(cobolParser.BLANK);
				this.state = 6848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6847;
					this.separator();
					}
					}
					this.state = 6850;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6852;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6854;
				this.match(cobolParser.FOREGROUND_COLOR);
				this.state = 6856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6855;
					this.separator();
					}
					}
					this.state = 6858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6860;
					this.match(cobolParser.IS);
					this.state = 6862;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6861;
						this.separator();
						}
						}
						this.state = 6864;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6868;
				this.color_num();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6870;
				this.match(cobolParser.BACKGROUND_COLOR);
				this.state = 6872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6871;
					this.separator();
					}
					}
					this.state = 6874;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6876;
					this.match(cobolParser.IS);
					this.state = 6878;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6877;
						this.separator();
						}
						}
						this.state = 6880;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6884;
				this.color_num();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6886;
				this.match(cobolParser.AUTO);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6887;
				this.match(cobolParser.SECURE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6888;
				this.match(cobolParser.REQUIRED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 6889;
					this.match(cobolParser.USAGE);
					this.state = 6891;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6890;
						this.separator();
						}
						}
						this.state = 6893;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 6901;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 6895;
						this.match(cobolParser.IS);
						this.state = 6897;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6896;
							this.separator();
							}
							}
							this.state = 6899;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					}
				}

				this.state = 6905;
				this.match(cobolParser.DISPLAY);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6906;
				this.sign_is();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6907;
				this.match(cobolParser.FULL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6908;
				this.match(cobolParser.BELL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6909;
				this.match(cobolParser.BLINK);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6910;
				this.match(cobolParser.ERASE);
				this.state = 6912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6911;
					this.separator();
					}
					}
					this.state = 6914;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6916;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.EOL || _la === cobolParser.EOS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6918;
				this.match(cobolParser.HIGHLIGHT);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6919;
				this.match(cobolParser.LOWLIGHT);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6920;
				this.match(cobolParser.REVERSE_VIDEO);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6921;
				this.match(cobolParser.UNDERLINE);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6922;
				this.match(cobolParser.LINE);
				this.state = 6924;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6923;
					this.separator();
					}
					}
					this.state = 6926;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 6928;
					this.match(cobolParser.NUMBER);
					this.state = 6930;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6929;
						this.separator();
						}
						}
						this.state = 6932;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6936;
					this.match(cobolParser.IS);
					this.state = 6938;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6937;
						this.separator();
						}
						}
						this.state = 6940;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 6944;
					this.match(cobolParser.PLUS);
					this.state = 6946;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6945;
						this.separator();
						}
						}
						this.state = 6948;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6952;
				this.src_number();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6954;
				this.match(cobolParser.COLUMN);
				this.state = 6956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6955;
					this.separator();
					}
					}
					this.state = 6958;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 6960;
					this.match(cobolParser.NUMBER);
					this.state = 6962;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6961;
						this.separator();
						}
						}
						this.state = 6964;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6974;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6968;
					this.match(cobolParser.IS);
					this.state = 6970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6969;
						this.separator();
						}
						}
						this.state = 6972;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 6976;
					this.match(cobolParser.PLUS);
					this.state = 6978;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6977;
						this.separator();
						}
						}
						this.state = 6980;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 6984;
				this.src_number();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6986;
				this.match(cobolParser.VALUE);
				this.state = 6988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6987;
					this.separator();
					}
					}
					this.state = 6990;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 6998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6992;
					this.match(cobolParser.IS);
					this.state = 6994;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6993;
						this.separator();
						}
						}
						this.state = 6996;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7000;
				this.nonnumeric_literal();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 7002;
				this.match(cobolParser.BLANK);
				this.state = 7004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7003;
					this.separator();
					}
					}
					this.state = 7006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 7008;
					this.match(cobolParser.WHEN);
					this.state = 7010;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7009;
						this.separator();
						}
						}
						this.state = 7012;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7016;
				this.match(cobolParser.ZERO);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 7018;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7026;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1181, this._ctx) ) {
				case 1:
					{
					this.state = 7020;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7019;
						this.separator();
						}
						}
						this.state = 7022;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 7024;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 7028;
				this.picture();
				this.state = 7030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7029;
					this.separator();
					}
					}
					this.state = 7032;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7046;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USING:
					{
					this.state = 7034;
					this.scr_pic_using();
					}
					break;
				case cobolParser.FROM:
					{
					this.state = 7035;
					this.scr_pic_from();
					this.state = 7043;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1184, this._ctx) ) {
					case 1:
						{
						this.state = 7037;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7036;
							this.separator();
							}
							}
							this.state = 7039;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 7041;
						this.scr_pic_to();
						}
						break;
					}
					}
					break;
				case cobolParser.TO:
					{
					this.state = 7045;
					this.scr_pic_to();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_using(): Scr_pic_usingContext {
		let _localctx: Scr_pic_usingContext = new Scr_pic_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, cobolParser.RULE_scr_pic_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7050;
			this.match(cobolParser.USING);
			this.state = 7052;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7051;
				this.separator();
				}
				}
				this.state = 7054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7056;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_from(): Scr_pic_fromContext {
		let _localctx: Scr_pic_fromContext = new Scr_pic_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, cobolParser.RULE_scr_pic_from);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7058;
			this.match(cobolParser.FROM);
			this.state = 7060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7059;
				this.separator();
				}
				}
				this.state = 7062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7066;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 7064;
				this.qualified_data_item();
				}
				break;
			case cobolParser.STRING_LITERAL:
				{
				this.state = 7065;
				this.nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_to(): Scr_pic_toContext {
		let _localctx: Scr_pic_toContext = new Scr_pic_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, cobolParser.RULE_scr_pic_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7068;
			this.match(cobolParser.TO);
			this.state = 7070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7069;
				this.separator();
				}
				}
				this.state = 7072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7074;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonnumeric_literal(): Nonnumeric_literalContext {
		let _localctx: Nonnumeric_literalContext = new Nonnumeric_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, cobolParser.RULE_nonnumeric_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7076;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_number(): Src_numberContext {
		let _localctx: Src_numberContext = new Src_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, cobolParser.RULE_src_number);
		try {
			this.state = 7080;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7078;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7079;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public color_num(): Color_numContext {
		let _localctx: Color_numContext = new Color_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, cobolParser.RULE_color_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7082;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division(): Identification_divisionContext {
		let _localctx: Identification_divisionContext = new Identification_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, cobolParser.RULE_identification_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7084;
			this.match(cobolParser.IDENTIFICATION_IN_A_AREA);
			this.state = 7086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7085;
				this.separator();
				}
				}
				this.state = 7088;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7090;
			this.match(cobolParser.DIVISION);
			this.state = 7094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7091;
				this.separator();
				}
				}
				this.state = 7096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7097;
			this.match(cobolParser.DOT_);
			this.state = 7101;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1194, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7098;
					this.separator();
					}
					}
				}
				this.state = 7103;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1194, this._ctx);
			}
			this.state = 7107;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1195, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7104;
					this.identification_division_paragraph();
					}
					}
				}
				this.state = 7109;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1195, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division_paragraph(): Identification_division_paragraphContext {
		let _localctx: Identification_division_paragraphContext = new Identification_division_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, cobolParser.RULE_identification_division_paragraph);
		try {
			this.state = 7118;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PROGRAM_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7110;
				this.program_id();
				}
				break;
			case cobolParser.AUTHOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7111;
				this.author();
				}
				break;
			case cobolParser.INSTALLATION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7112;
				this.installation();
				}
				break;
			case cobolParser.DATE_WRITTEN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7113;
				this.date_written();
				}
				break;
			case cobolParser.DATE_COMPILED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7114;
				this.date_compiled();
				}
				break;
			case cobolParser.SECURITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7115;
				this.security();
				}
				break;
			case cobolParser.OPTIONS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7116;
				this.options_();
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7117;
				this.separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_id(): Program_idContext {
		let _localctx: Program_idContext = new Program_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, cobolParser.RULE_program_id);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7120;
			this.match(cobolParser.PROGRAM_ID);
			this.state = 7124;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7121;
				this.separator();
				}
				}
				this.state = 7126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7127;
			this.match(cobolParser.DOT_);
			this.state = 7131;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7128;
				this.separator();
				}
				}
				this.state = 7133;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7134;
			this.program_name();
			this.state = 7138;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1199, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7135;
					this.separator();
					}
					}
				}
				this.state = 7140;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1199, this._ctx);
			}
			this.state = 7142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COMMON || _la === cobolParser.INITIAL || _la === cobolParser.IS) {
				{
				this.state = 7141;
				this.is_program();
				}
			}

			this.state = 7147;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1201, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7144;
					this.separator();
					}
					}
				}
				this.state = 7149;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1201, this._ctx);
			}
			this.state = 7151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IDENT || _la === cobolParser.WITH) {
				{
				this.state = 7150;
				this.with_ident();
				}
			}

			this.state = 7156;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7153;
				this.separator();
				}
				}
				this.state = 7158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7159;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_name(): Program_nameContext {
		let _localctx: Program_nameContext = new Program_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, cobolParser.RULE_program_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7161;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public is_program(): Is_programContext {
		let _localctx: Is_programContext = new Is_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, cobolParser.RULE_is_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7169;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7163;
				this.match(cobolParser.IS);
				this.state = 7165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7164;
					this.separator();
					}
					}
					this.state = 7167;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7171;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.COMMON || _la === cobolParser.INITIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7179;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1207, this._ctx) ) {
			case 1:
				{
				this.state = 7173;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7172;
					this.separator();
					}
					}
					this.state = 7175;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7177;
				this.match(cobolParser.PROGRAM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_ident(): With_identContext {
		let _localctx: With_identContext = new With_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, cobolParser.RULE_with_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7187;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 7181;
				this.match(cobolParser.WITH);
				this.state = 7183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7182;
					this.separator();
					}
					}
					this.state = 7185;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7189;
			this.match(cobolParser.IDENT);
			this.state = 7191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7190;
				this.separator();
				}
				}
				this.state = 7193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7195;
			this.ident_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident_string(): Ident_stringContext {
		let _localctx: Ident_stringContext = new Ident_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, cobolParser.RULE_ident_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7197;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_entry(): Comment_entryContext {
		let _localctx: Comment_entryContext = new Comment_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, cobolParser.RULE_comment_entry);
		let _la: number;
		try {
			this.state = 7208;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7199;
				this.match(cobolParser.START_FOUR_SPACES);
				this.state = 7203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
					{
					{
					this.state = 7200;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 7205;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7206;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7207;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public author(): AuthorContext {
		let _localctx: AuthorContext = new AuthorContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, cobolParser.RULE_author);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7210;
			this.match(cobolParser.AUTHOR);
			this.state = 7214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7211;
				this.separator();
				}
				}
				this.state = 7216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7217;
			this.match(cobolParser.DOT_);
			this.state = 7221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
				{
				{
				this.state = 7218;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 7223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7224;
			this.match(cobolParser.NEWLINE);
			this.state = 7228;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1215, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7225;
					this.comment_entry();
					}
					}
				}
				this.state = 7230;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1215, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installation(): InstallationContext {
		let _localctx: InstallationContext = new InstallationContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, cobolParser.RULE_installation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7231;
			this.match(cobolParser.INSTALLATION);
			this.state = 7235;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7232;
				this.separator();
				}
				}
				this.state = 7237;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7238;
			this.match(cobolParser.DOT_);
			this.state = 7242;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
				{
				{
				this.state = 7239;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 7244;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7245;
			this.match(cobolParser.NEWLINE);
			this.state = 7249;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1218, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7246;
					this.comment_entry();
					}
					}
				}
				this.state = 7251;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1218, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_written(): Date_writtenContext {
		let _localctx: Date_writtenContext = new Date_writtenContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, cobolParser.RULE_date_written);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7252;
			this.match(cobolParser.DATE_WRITTEN);
			this.state = 7256;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7253;
				this.separator();
				}
				}
				this.state = 7258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7259;
			this.match(cobolParser.DOT_);
			this.state = 7263;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
				{
				{
				this.state = 7260;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 7265;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7266;
			this.match(cobolParser.NEWLINE);
			this.state = 7270;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1221, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7267;
					this.comment_entry();
					}
					}
				}
				this.state = 7272;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1221, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_compiled(): Date_compiledContext {
		let _localctx: Date_compiledContext = new Date_compiledContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, cobolParser.RULE_date_compiled);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7273;
			this.match(cobolParser.DATE_COMPILED);
			this.state = 7277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7274;
				this.separator();
				}
				}
				this.state = 7279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7280;
			this.match(cobolParser.DOT_);
			this.state = 7284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
				{
				{
				this.state = 7281;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 7286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7287;
			this.match(cobolParser.NEWLINE);
			this.state = 7291;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1224, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7288;
					this.comment_entry();
					}
					}
				}
				this.state = 7293;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1224, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security(): SecurityContext {
		let _localctx: SecurityContext = new SecurityContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, cobolParser.RULE_security);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7294;
			this.match(cobolParser.SECURITY);
			this.state = 7298;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7295;
				this.separator();
				}
				}
				this.state = 7300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7301;
			this.match(cobolParser.DOT_);
			this.state = 7305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.ALLOWING - 384)) | (1 << (cobolParser.OTHERS - 384)) | (1 << (cobolParser.READERS - 384)) | (1 << (cobolParser.WRITERS - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UNTIL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.TEST - 416)) | (1 << (cobolParser.PREVIOUS - 416)) | (1 << (cobolParser.PRIOR - 416)) | (1 << (cobolParser.REGARDLESS - 416)) | (1 << (cobolParser.DEPENDENCY - 416)) | (1 << (cobolParser.DICTIONARY - 416)) | (1 << (cobolParser.START_SLASH_ - 416)) | (1 << (cobolParser.START_STAR_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.NUMERIC_LITERAL - 448)) | (1 << (cobolParser.HEX_LITERAL - 448)) | (1 << (cobolParser.USER_DEFINED_WORD - 448)) | (1 << (cobolParser.START_FOUR_SPACES - 448)) | (1 << (cobolParser.WHITESPACE - 448)))) !== 0)) {
				{
				{
				this.state = 7302;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 7307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7308;
			this.match(cobolParser.NEWLINE);
			this.state = 7312;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1227, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7309;
					this.comment_entry();
					}
					}
				}
				this.state = 7314;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1227, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public options_(): Options_Context {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 536, cobolParser.RULE_options_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7315;
			this.match(cobolParser.OPTIONS);
			this.state = 7319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7316;
				this.separator();
				}
				}
				this.state = 7321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7322;
			this.match(cobolParser.DOT_);
			this.state = 7326;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1229, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7323;
					this.separator();
					}
					}
				}
				this.state = 7328;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1229, this._ctx);
			}
			this.state = 7330;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARITHMETIC) {
				{
				this.state = 7329;
				this.arithmetic();
				}
			}

			this.state = 7335;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1231, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7332;
					this.separator();
					}
					}
				}
				this.state = 7337;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1231, this._ctx);
			}
			this.state = 7339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DOT_) {
				{
				this.state = 7338;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic(): ArithmeticContext {
		let _localctx: ArithmeticContext = new ArithmeticContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, cobolParser.RULE_arithmetic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7341;
			this.match(cobolParser.ARITHMETIC);
			this.state = 7343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7342;
				this.separator();
				}
				}
				this.state = 7345;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7353;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7347;
				this.match(cobolParser.IS);
				this.state = 7349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7348;
					this.separator();
					}
					}
					this.state = 7351;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7355;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NATIVE || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7356;
				this.separator();
				}
				}
				this.state = 7361;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7362;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environment_division(): Environment_divisionContext {
		let _localctx: Environment_divisionContext = new Environment_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, cobolParser.RULE_environment_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7364;
			this.match(cobolParser.ENVIRONMENT);
			this.state = 7366;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7365;
				this.separator();
				}
				}
				this.state = 7368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7370;
			this.match(cobolParser.DIVISION);
			this.state = 7374;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7371;
				this.separator();
				}
				}
				this.state = 7376;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7377;
			this.match(cobolParser.DOT_);
			this.state = 7381;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1239, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7378;
					this.separator();
					}
					}
				}
				this.state = 7383;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1239, this._ctx);
			}
			this.state = 7385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONFIGURATION) {
				{
				this.state = 7384;
				this.configuration_section();
				}
			}

			this.state = 7388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INPUT_OUTPUT) {
				{
				this.state = 7387;
				this.input_output_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configuration_section(): Configuration_sectionContext {
		let _localctx: Configuration_sectionContext = new Configuration_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, cobolParser.RULE_configuration_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7390;
			this.match(cobolParser.CONFIGURATION);
			this.state = 7392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7391;
				this.separator();
				}
				}
				this.state = 7394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7396;
			this.match(cobolParser.SECTION);
			this.state = 7400;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7397;
				this.separator();
				}
				}
				this.state = 7402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7403;
			this.match(cobolParser.DOT_);
			this.state = 7407;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1244, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7404;
					this.separator();
					}
					}
				}
				this.state = 7409;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1244, this._ctx);
			}
			this.state = 7411;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SOURCE_COMPUTER) {
				{
				this.state = 7410;
				this.source_computer();
				}
			}

			this.state = 7416;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1246, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7413;
					this.separator();
					}
					}
				}
				this.state = 7418;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1246, this._ctx);
			}
			this.state = 7420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OBJECT_COMPUTER) {
				{
				this.state = 7419;
				this.object_computer();
				}
			}

			this.state = 7425;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1248, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7422;
					this.separator();
					}
					}
				}
				this.state = 7427;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1248, this._ctx);
			}
			this.state = 7429;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SPECIAL_NAMES) {
				{
				this.state = 7428;
				this.special_names();
				}
			}

			this.state = 7434;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1250, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7431;
					this.separator();
					}
					}
				}
				this.state = 7436;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1250, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_output_section(): Input_output_sectionContext {
		let _localctx: Input_output_sectionContext = new Input_output_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, cobolParser.RULE_input_output_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7437;
			this.match(cobolParser.INPUT_OUTPUT);
			this.state = 7439;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7438;
				this.separator();
				}
				}
				this.state = 7441;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7443;
			this.match(cobolParser.SECTION);
			this.state = 7447;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7444;
				this.separator();
				}
				}
				this.state = 7449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7450;
			this.match(cobolParser.DOT_);
			this.state = 7454;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1253, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7451;
					this.separator();
					}
					}
				}
				this.state = 7456;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1253, this._ctx);
			}
			this.state = 7458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE_CONTROL) {
				{
				this.state = 7457;
				this.file_control();
				}
			}

			this.state = 7461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.I_O_CONTROL) {
				{
				this.state = 7460;
				this.i_o_control();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_computer(): Source_computerContext {
		let _localctx: Source_computerContext = new Source_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, cobolParser.RULE_source_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7463;
			this.match(cobolParser.SOURCE_COMPUTER);
			this.state = 7467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7464;
				this.separator();
				}
				}
				this.state = 7469;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7470;
			this.match(cobolParser.DOT_);
			this.state = 7474;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1257, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7471;
					this.separator();
					}
					}
				}
				this.state = 7476;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1257, this._ctx);
			}
			this.state = 7495;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 7477;
				this.computer_type();
				this.state = 7485;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1259, this._ctx) ) {
				case 1:
					{
					this.state = 7479;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7478;
						this.separator();
						}
						}
						this.state = 7481;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 7483;
					this.with_debugging();
					}
					break;
				}
				this.state = 7490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 7487;
					this.separator();
					}
					}
					this.state = 7492;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7493;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computer_type(): Computer_typeContext {
		let _localctx: Computer_typeContext = new Computer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, cobolParser.RULE_computer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7497;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_debugging(): With_debuggingContext {
		let _localctx: With_debuggingContext = new With_debuggingContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, cobolParser.RULE_with_debugging);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7505;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 7499;
				this.match(cobolParser.WITH);
				this.state = 7501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7500;
					this.separator();
					}
					}
					this.state = 7503;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7507;
			this.match(cobolParser.DEBUGGING);
			this.state = 7509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7508;
				this.separator();
				}
				}
				this.state = 7511;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7513;
			this.match(cobolParser.MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_computer(): Object_computerContext {
		let _localctx: Object_computerContext = new Object_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, cobolParser.RULE_object_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7515;
			this.match(cobolParser.OBJECT_COMPUTER);
			this.state = 7519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7516;
				this.separator();
				}
				}
				this.state = 7521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7522;
			this.match(cobolParser.DOT_);
			this.state = 7526;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1266, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7523;
					this.separator();
					}
					}
				}
				this.state = 7528;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1266, this._ctx);
			}
			this.state = 7565;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 7529;
				this.computer_type();
				this.state = 7537;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1268, this._ctx) ) {
				case 1:
					{
					this.state = 7531;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7530;
						this.separator();
						}
						}
						this.state = 7533;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 7535;
					this.memory_size();
					}
					break;
				}
				this.state = 7546;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1270, this._ctx) ) {
				case 1:
					{
					this.state = 7540;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7539;
						this.separator();
						}
						}
						this.state = 7542;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 7544;
					this.program_collating();
					}
					break;
				}
				this.state = 7555;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1272, this._ctx) ) {
				case 1:
					{
					this.state = 7549;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7548;
						this.separator();
						}
						}
						this.state = 7551;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 7553;
					this.segment_limit();
					}
					break;
				}
				this.state = 7560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 7557;
					this.separator();
					}
					}
					this.state = 7562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7563;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size(): Memory_sizeContext {
		let _localctx: Memory_sizeContext = new Memory_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, cobolParser.RULE_memory_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7567;
			this.match(cobolParser.MEMORY);
			this.state = 7575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1276, this._ctx) ) {
			case 1:
				{
				this.state = 7569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7568;
					this.separator();
					}
					}
					this.state = 7571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7573;
				this.match(cobolParser.SIZE);
				}
				break;
			}
			this.state = 7578;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7577;
				this.separator();
				}
				}
				this.state = 7580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7582;
			this.memory_size_amount();
			this.state = 7584;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7583;
				this.separator();
				}
				}
				this.state = 7586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7588;
			this.memory_size_unit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_amount(): Memory_size_amountContext {
		let _localctx: Memory_size_amountContext = new Memory_size_amountContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, cobolParser.RULE_memory_size_amount);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7590;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_unit(): Memory_size_unitContext {
		let _localctx: Memory_size_unitContext = new Memory_size_unitContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, cobolParser.RULE_memory_size_unit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7592;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.MODULES || _la === cobolParser.WORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_collating(): Program_collatingContext {
		let _localctx: Program_collatingContext = new Program_collatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, cobolParser.RULE_program_collating);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7600;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 7594;
				this.match(cobolParser.PROGRAM);
				this.state = 7596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7595;
					this.separator();
					}
					}
					this.state = 7598;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7608;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING) {
				{
				this.state = 7602;
				this.match(cobolParser.COLLATING);
				this.state = 7604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7603;
					this.separator();
					}
					}
					this.state = 7606;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7610;
			this.match(cobolParser.SEQUENCE);
			this.state = 7618;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1284, this._ctx) ) {
			case 1:
				{
				this.state = 7612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7611;
					this.separator();
					}
					}
					this.state = 7614;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7616;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 7621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7620;
				this.separator();
				}
				}
				this.state = 7623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7625;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_name(): Alpha_nameContext {
		let _localctx: Alpha_nameContext = new Alpha_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, cobolParser.RULE_alpha_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7627;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_limit(): Segment_limitContext {
		let _localctx: Segment_limitContext = new Segment_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, cobolParser.RULE_segment_limit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7629;
			this.match(cobolParser.SEGMENT_LIMIT);
			this.state = 7637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				this.state = 7631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7630;
					this.separator();
					}
					}
					this.state = 7633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7635;
				this.match(cobolParser.IS);
				}
			}

			this.state = 7639;
			this.segment_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_number(): Segment_numberContext {
		let _localctx: Segment_numberContext = new Segment_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, cobolParser.RULE_segment_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7641;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names(): Special_namesContext {
		let _localctx: Special_namesContext = new Special_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, cobolParser.RULE_special_names);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7643;
			this.match(cobolParser.SPECIAL_NAMES);
			this.state = 7647;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 7644;
				this.separator();
				}
				}
				this.state = 7649;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7650;
			this.match(cobolParser.DOT_);
			this.state = 7654;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1289, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7651;
					this.separator();
					}
					}
				}
				this.state = 7656;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1289, this._ctx);
			}
			this.state = 7670;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (cobolParser.C01 - 49)) | (1 << (cobolParser.CARD_READER - 49)) | (1 << (cobolParser.CLASS - 49)))) !== 0) || ((((_la - 82)) & ~0x1F) === 0 && ((1 << (_la - 82)) & ((1 << (cobolParser.CONSOLE - 82)) | (1 << (cobolParser.CRT - 82)) | (1 << (cobolParser.CURRENCY - 82)) | (1 << (cobolParser.CURSOR - 82)) | (1 << (cobolParser.DECIMAL_POINT - 82)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (cobolParser.SWITCH - 355)) | (1 << (cobolParser.SYMBOLIC - 355)) | (1 << (cobolParser.SYSERR - 355)) | (1 << (cobolParser.SYSIN - 355)) | (1 << (cobolParser.SYSOUT - 355)))) !== 0)) {
				{
				this.state = 7664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7657;
					this.special_names_content();
					this.state = 7661;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 7658;
						this.separator();
						}
						}
						this.state = 7663;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 7666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (cobolParser.C01 - 49)) | (1 << (cobolParser.CARD_READER - 49)) | (1 << (cobolParser.CLASS - 49)))) !== 0) || ((((_la - 82)) & ~0x1F) === 0 && ((1 << (_la - 82)) & ((1 << (cobolParser.CONSOLE - 82)) | (1 << (cobolParser.CRT - 82)) | (1 << (cobolParser.CURRENCY - 82)) | (1 << (cobolParser.CURSOR - 82)) | (1 << (cobolParser.DECIMAL_POINT - 82)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (cobolParser.SWITCH - 355)) | (1 << (cobolParser.SYMBOLIC - 355)) | (1 << (cobolParser.SYSERR - 355)) | (1 << (cobolParser.SYSIN - 355)) | (1 << (cobolParser.SYSOUT - 355)))) !== 0));
				this.state = 7668;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names_content(): Special_names_contentContext {
		let _localctx: Special_names_contentContext = new Special_names_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, cobolParser.RULE_special_names_content);
		let _la: number;
		try {
			this.state = 7779;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CARD_READER:
			case cobolParser.CONSOLE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7672;
				this.predefined_device();
				this.state = 7674;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7673;
					this.separator();
					}
					}
					this.state = 7676;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7678;
					this.match(cobolParser.IS);
					this.state = 7680;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7679;
						this.separator();
						}
						}
						this.state = 7682;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7686;
				this.device_name();
				}
				break;
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7688;
				this.arg_env();
				this.state = 7690;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7689;
					this.separator();
					}
					}
					this.state = 7692;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7694;
					this.match(cobolParser.IS);
					this.state = 7696;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7695;
						this.separator();
						}
						}
						this.state = 7698;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7702;
				this.arg_env_name();
				}
				break;
			case cobolParser.C01:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7704;
				this.match(cobolParser.C01);
				this.state = 7706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7705;
					this.separator();
					}
					}
					this.state = 7708;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7716;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7710;
					this.match(cobolParser.IS);
					this.state = 7712;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7711;
						this.separator();
						}
						}
						this.state = 7714;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7718;
				this.top_of_page_name();
				}
				break;
			case cobolParser.SWITCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7720;
				this.switch_();
				}
				break;
			case cobolParser.ALPHABET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7721;
				this.alphabet();
				}
				break;
			case cobolParser.SYMBOLIC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7722;
				this.symbolic_chars();
				}
				break;
			case cobolParser.CLASS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7723;
				this.class_();
				}
				break;
			case cobolParser.CURRENCY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7724;
				this.currency();
				}
				break;
			case cobolParser.DECIMAL_POINT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7725;
				this.match(cobolParser.DECIMAL_POINT);
				this.state = 7727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7726;
					this.separator();
					}
					}
					this.state = 7729;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7731;
					this.match(cobolParser.IS);
					this.state = 7733;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7732;
						this.separator();
						}
						}
						this.state = 7735;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7739;
				this.match(cobolParser.COMMA);
				}
				break;
			case cobolParser.CURSOR:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7741;
				this.match(cobolParser.CURSOR);
				this.state = 7743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7742;
					this.separator();
					}
					}
					this.state = 7745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7747;
					this.match(cobolParser.IS);
					this.state = 7749;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7748;
						this.separator();
						}
						}
						this.state = 7751;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7755;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CRT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 7757;
				this.match(cobolParser.CRT);
				this.state = 7759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7758;
					this.separator();
					}
					}
					this.state = 7761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7763;
				this.match(cobolParser.STATUS);
				this.state = 7765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7764;
					this.separator();
					}
					}
					this.state = 7767;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7769;
					this.match(cobolParser.IS);
					this.state = 7771;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7770;
						this.separator();
						}
						}
						this.state = 7773;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7777;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_data_item(): Qualified_data_itemContext {
		let _localctx: Qualified_data_itemContext = new Qualified_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, cobolParser.RULE_qualified_data_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7781;
			this.match(cobolParser.USER_DEFINED_WORD);
			this.state = 7797;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1315, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7782;
						this.separator();
						}
						}
						this.state = 7785;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 7787;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.IN || _la === cobolParser.OF)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7789;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7788;
						this.separator();
						}
						}
						this.state = 7791;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 7793;
					this.match(cobolParser.USER_DEFINED_WORD);
					}
					}
				}
				this.state = 7799;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1315, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency(): CurrencyContext {
		let _localctx: CurrencyContext = new CurrencyContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, cobolParser.RULE_currency);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7800;
			this.match(cobolParser.CURRENCY);
			this.state = 7802;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7801;
				this.separator();
				}
				}
				this.state = 7804;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 7806;
				this.match(cobolParser.SIGN);
				this.state = 7808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7807;
					this.separator();
					}
					}
					this.state = 7810;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7814;
				this.match(cobolParser.IS);
				this.state = 7816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7815;
					this.separator();
					}
					}
					this.state = 7818;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7822;
			this.currency_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency_definition(): Currency_definitionContext {
		let _localctx: Currency_definitionContext = new Currency_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, cobolParser.RULE_currency_definition);
		let _la: number;
		try {
			this.state = 7848;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1325, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7824;
				this.literal_7();
				this.state = 7831;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 7825;
					this.match(cobolParser.WITH);
					this.state = 7827;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7826;
						this.separator();
						}
						}
						this.state = 7829;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 7833;
				this.match(cobolParser.PICTURE);
				this.state = 7835;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7834;
					this.separator();
					}
					}
					this.state = 7837;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7839;
				this.match(cobolParser.SYMBOL);
				this.state = 7841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7840;
					this.separator();
					}
					}
					this.state = 7843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7845;
				this.literal_8();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7847;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_7(): Literal_7Context {
		let _localctx: Literal_7Context = new Literal_7Context(this._ctx, this.state);
		this.enterRule(_localctx, 578, cobolParser.RULE_literal_7);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7850;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_8(): Literal_8Context {
		let _localctx: Literal_8Context = new Literal_8Context(this._ctx, this.state);
		this.enterRule(_localctx, 580, cobolParser.RULE_literal_8);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7852;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_(): Class_Context {
		let _localctx: Class_Context = new Class_Context(this._ctx, this.state);
		this.enterRule(_localctx, 582, cobolParser.RULE_class_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7854;
			this.match(cobolParser.CLASS);
			this.state = 7856;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7855;
				this.separator();
				}
				}
				this.state = 7858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7860;
			this.class_name();
			this.state = 7862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7861;
				this.separator();
				}
				}
				this.state = 7864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7872;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7866;
				this.match(cobolParser.IS);
				this.state = 7868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7867;
					this.separator();
					}
					}
					this.state = 7870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7881;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7874;
				this.user_class();
				this.state = 7878;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1330, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7875;
						this.separator();
						}
						}
					}
					this.state = 7880;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1330, this._ctx);
				}
				}
				}
				this.state = 7883;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_name(): Class_nameContext {
		let _localctx: Class_nameContext = new Class_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, cobolParser.RULE_class_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7885;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_class(): User_classContext {
		let _localctx: User_classContext = new User_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, cobolParser.RULE_user_class);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7887;
			this.first_literal();
			this.state = 7901;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1334, this._ctx) ) {
			case 1:
				{
				this.state = 7889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7888;
					this.separator();
					}
					}
					this.state = 7891;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7893;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7894;
					this.separator();
					}
					}
					this.state = 7897;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 7899;
				this.last_literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolic_chars(): Symbolic_charsContext {
		let _localctx: Symbolic_charsContext = new Symbolic_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, cobolParser.RULE_symbolic_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7903;
			this.match(cobolParser.SYMBOLIC);
			this.state = 7905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7904;
				this.separator();
				}
				}
				this.state = 7907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTERS) {
				{
				this.state = 7909;
				this.match(cobolParser.CHARACTERS);
				this.state = 7911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7910;
					this.separator();
					}
					}
					this.state = 7913;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7918;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7917;
				this.symb_ch_definition();
				}
				}
				this.state = 7920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_definition(): Symb_ch_definitionContext {
		let _localctx: Symb_ch_definitionContext = new Symb_ch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, cobolParser.RULE_symb_ch_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7923;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7922;
					this.symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7925;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1339, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 7928;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 7927;
				this.symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_clause(): Symb_ch_def_clauseContext {
		let _localctx: Symb_ch_def_clauseContext = new Symb_ch_def_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, cobolParser.RULE_symb_ch_def_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7936;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7930;
				this.symbol_char();
				this.state = 7932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7931;
					this.separator();
					}
					}
					this.state = 7934;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
				}
				this.state = 7938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 7946;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARE || _la === cobolParser.IS) {
				{
				this.state = 7940;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ARE || _la === cobolParser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7941;
					this.separator();
					}
					}
					this.state = 7944;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7954;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7948;
				this.char_val();
				this.state = 7950;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 7949;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 7952;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1345, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				}
				this.state = 7956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext {
		let _localctx: Symb_ch_def_in_alphabetContext = new Symb_ch_def_in_alphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, cobolParser.RULE_symb_ch_def_in_alphabet);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7958;
			this.match(cobolParser.IN);
			this.state = 7960;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7959;
				this.separator();
				}
				}
				this.state = 7962;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7964;
			this.alpha_name();
			this.state = 7968;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1348, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7965;
					this.separator();
					}
					}
				}
				this.state = 7970;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1348, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbol_char(): Symbol_charContext {
		let _localctx: Symbol_charContext = new Symbol_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, cobolParser.RULE_symbol_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7971;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_val(): Char_valContext {
		let _localctx: Char_valContext = new Char_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, cobolParser.RULE_char_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7973;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabet(): AlphabetContext {
		let _localctx: AlphabetContext = new AlphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, cobolParser.RULE_alphabet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7975;
			this.match(cobolParser.ALPHABET);
			this.state = 7977;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7976;
				this.separator();
				}
				}
				this.state = 7979;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7981;
			this.alpha_name();
			this.state = 7983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7982;
				this.separator();
				}
				}
				this.state = 7985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 7993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7987;
				this.match(cobolParser.IS);
				this.state = 7989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7988;
					this.separator();
					}
					}
					this.state = 7991;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 7995;
			this.alpha_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_value(): Alpha_valueContext {
		let _localctx: Alpha_valueContext = new Alpha_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, cobolParser.RULE_alpha_value);
		let _la: number;
		try {
			let _alt: number;
			this.state = 8013;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ASCII:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7997;
				this.match(cobolParser.ASCII);
				}
				break;
			case cobolParser.STANDARD_1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7998;
				this.match(cobolParser.STANDARD_1);
				}
				break;
			case cobolParser.STANDARD_2:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7999;
				this.match(cobolParser.STANDARD_2);
				}
				break;
			case cobolParser.NATIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8000;
				this.match(cobolParser.NATIVE);
				}
				break;
			case cobolParser.EBCDIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8001;
				this.match(cobolParser.EBCDIC);
				}
				break;
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 8009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8002;
					this.user_alpha();
					this.state = 8006;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1353, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 8003;
							this.separator();
							}
							}
						}
						this.state = 8008;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1353, this._ctx);
					}
					}
					}
					this.state = 8011;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_alpha(): User_alphaContext {
		let _localctx: User_alphaContext = new User_alphaContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, cobolParser.RULE_user_alpha);
		let _la: number;
		try {
			let _alt: number;
			this.state = 8049;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1362, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8015;
				this.first_literal();
				this.state = 8029;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1358, this._ctx) ) {
				case 1:
					{
					this.state = 8017;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8016;
						this.separator();
						}
						}
						this.state = 8019;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 8021;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 8023;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8022;
						this.separator();
						}
						}
						this.state = 8025;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 8027;
					this.last_literal();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8031;
				this.first_literal();
				this.state = 8045;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 8033;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8032;
							this.separator();
							}
							}
							this.state = 8035;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 8037;
						this.match(cobolParser.ALSO);
						this.state = 8039;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8038;
							this.separator();
							}
							}
							this.state = 8041;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 8043;
						this.same_literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 8047;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1361, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_literal(): First_literalContext {
		let _localctx: First_literalContext = new First_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, cobolParser.RULE_first_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8051;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_literal(): Last_literalContext {
		let _localctx: Last_literalContext = new Last_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, cobolParser.RULE_last_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8053;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_literal(): Same_literalContext {
		let _localctx: Same_literalContext = new Same_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, cobolParser.RULE_same_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8055;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_(): Switch_Context {
		let _localctx: Switch_Context = new Switch_Context(this._ctx, this.state);
		this.enterRule(_localctx, 612, cobolParser.RULE_switch_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8057;
			this.match(cobolParser.SWITCH);
			this.state = 8059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8058;
				this.separator();
				}
				}
				this.state = 8061;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8063;
			this.switch_num();
			this.state = 8067;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1364, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8064;
					this.separator();
					}
					}
				}
				this.state = 8069;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1364, this._ctx);
			}
			this.state = 8084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 8076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 8070;
					this.match(cobolParser.IS);
					this.state = 8072;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8071;
						this.separator();
						}
						}
						this.state = 8074;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8078;
				this.switch_name();
				this.state = 8080;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 8079;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 8082;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1367, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 8106;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
				{
				this.state = 8086;
				this.switch_clause_on();
				this.state = 8094;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1370, this._ctx) ) {
				case 1:
					{
					this.state = 8088;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8087;
						this.separator();
						}
						}
						this.state = 8090;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 8092;
					this.switch_clause_off();
					}
					break;
				}
				}
				break;
			case cobolParser.OFF:
				{
				this.state = 8096;
				this.switch_clause_off();
				this.state = 8104;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1372, this._ctx) ) {
				case 1:
					{
					this.state = 8098;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8097;
						this.separator();
						}
						}
						this.state = 8100;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 8102;
					this.switch_clause_on();
					}
					break;
				}
				}
				break;
			case cobolParser.ALPHABET:
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.C01:
			case cobolParser.CARD_READER:
			case cobolParser.CLASS:
			case cobolParser.CONSOLE:
			case cobolParser.CRT:
			case cobolParser.CURRENCY:
			case cobolParser.CURSOR:
			case cobolParser.DECIMAL_POINT:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SWITCH:
			case cobolParser.SYMBOLIC:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.DOT_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				break;
			default:
				break;
			}
			this.state = 8111;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1374, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8108;
					this.separator();
					}
					}
				}
				this.state = 8113;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1374, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_on(): Switch_clause_onContext {
		let _localctx: Switch_clause_onContext = new Switch_clause_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, cobolParser.RULE_switch_clause_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8114;
			this.match(cobolParser.ON);
			this.state = 8116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8115;
				this.separator();
				}
				}
				this.state = 8118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8126;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 8120;
				this.match(cobolParser.STATUS);
				this.state = 8122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8121;
					this.separator();
					}
					}
					this.state = 8124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8128;
				this.match(cobolParser.IS);
				this.state = 8130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8129;
					this.separator();
					}
					}
					this.state = 8132;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8136;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_off(): Switch_clause_offContext {
		let _localctx: Switch_clause_offContext = new Switch_clause_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, cobolParser.RULE_switch_clause_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8138;
			this.match(cobolParser.OFF);
			this.state = 8140;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8139;
				this.separator();
				}
				}
				this.state = 8142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8150;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 8144;
				this.match(cobolParser.STATUS);
				this.state = 8146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8145;
					this.separator();
					}
					}
					this.state = 8148;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8152;
				this.match(cobolParser.IS);
				this.state = 8154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8153;
					this.separator();
					}
					}
					this.state = 8156;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8160;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_name(): Cond_nameContext {
		let _localctx: Cond_nameContext = new Cond_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, cobolParser.RULE_cond_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8162;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_name(): Switch_nameContext {
		let _localctx: Switch_nameContext = new Switch_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, cobolParser.RULE_switch_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8164;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_num(): Switch_numContext {
		let _localctx: Switch_numContext = new Switch_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, cobolParser.RULE_switch_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8166;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_of_page_name(): Top_of_page_nameContext {
		let _localctx: Top_of_page_nameContext = new Top_of_page_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, cobolParser.RULE_top_of_page_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8168;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predefined_device(): Predefined_deviceContext {
		let _localctx: Predefined_deviceContext = new Predefined_deviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, cobolParser.RULE_predefined_device);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8170;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CARD_READER || _la === cobolParser.CONSOLE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & ((1 << (cobolParser.SYSERR - 360)) | (1 << (cobolParser.SYSIN - 360)) | (1 << (cobolParser.SYSOUT - 360)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public device_name(): Device_nameContext {
		let _localctx: Device_nameContext = new Device_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, cobolParser.RULE_device_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8172;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env(): Arg_envContext {
		let _localctx: Arg_envContext = new Arg_envContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, cobolParser.RULE_arg_env);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8174;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ARGUMENT_NUMBER || _la === cobolParser.ARGUMENT_VALUE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env_name(): Arg_env_nameContext {
		let _localctx: Arg_env_nameContext = new Arg_env_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, cobolParser.RULE_arg_env_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8176;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_control(): File_controlContext {
		let _localctx: File_controlContext = new File_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, cobolParser.RULE_file_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8178;
			this.match(cobolParser.FILE_CONTROL);
			this.state = 8182;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 8179;
				this.separator();
				}
				}
				this.state = 8184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8185;
			this.match(cobolParser.DOT_);
			this.state = 8189;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1386, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8186;
					this.separator();
					}
					}
				}
				this.state = 8191;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1386, this._ctx);
			}
			this.state = 8201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SELECT) {
				{
				{
				this.state = 8192;
				this.select();
				this.state = 8196;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1387, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 8193;
						this.separator();
						}
						}
					}
					this.state = 8198;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1387, this._ctx);
				}
				}
				}
				this.state = 8203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select(): SelectContext {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, cobolParser.RULE_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8204;
			this.match(cobolParser.SELECT);
			this.state = 8206;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8205;
				this.separator();
				}
				}
				this.state = 8208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONAL) {
				{
				this.state = 8210;
				this.match(cobolParser.OPTIONAL);
				this.state = 8212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8211;
					this.separator();
					}
					}
					this.state = 8214;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8218;
			this.file_name();
			this.state = 8222;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 8219;
				this.separator();
				}
				}
				this.state = 8224;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8225;
			this.assign_to();
			this.state = 8229;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 8226;
				this.separator();
				}
				}
				this.state = 8231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8239;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RESERVE) {
				{
				this.state = 8232;
				this.reserve();
				this.state = 8236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8233;
					this.separator();
					}
					}
					this.state = 8238;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8248;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1397, this._ctx) ) {
			case 1:
				{
				this.state = 8241;
				this.organization();
				this.state = 8245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8242;
					this.separator();
					}
					}
					this.state = 8247;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 8257;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BLOCK) {
				{
				this.state = 8250;
				this.block_contains();
				this.state = 8254;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8251;
					this.separator();
					}
					}
					this.state = 8256;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8266;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CODE_SET) {
				{
				this.state = 8259;
				this.code_set();
				this.state = 8263;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8260;
					this.separator();
					}
					}
					this.state = 8265;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8275;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PADDING) {
				{
				this.state = 8268;
				this.padding();
				this.state = 8272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8269;
					this.separator();
					}
					}
					this.state = 8274;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8284;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1405, this._ctx) ) {
			case 1:
				{
				this.state = 8277;
				this.record_delimiter();
				this.state = 8281;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8278;
					this.separator();
					}
					}
					this.state = 8283;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 8293;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS || _la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL) {
				{
				this.state = 8286;
				this.access_mode();
				this.state = 8290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8287;
					this.separator();
					}
					}
					this.state = 8292;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8304;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ALTERNATE || _la === cobolParser.RECORD) {
				{
				{
				this.state = 8295;
				this.record_key();
				this.state = 8299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8296;
					this.separator();
					}
					}
					this.state = 8301;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 8306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LOCK) {
				{
				this.state = 8307;
				this.lock_mode();
				this.state = 8311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8308;
					this.separator();
					}
					}
					this.state = 8313;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8323;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE || _la === cobolParser.STATUS) {
				{
				this.state = 8316;
				this.file_status();
				this.state = 8320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8317;
					this.separator();
					}
					}
					this.state = 8322;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8325;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_status(): File_statusContext {
		let _localctx: File_statusContext = new File_statusContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, cobolParser.RULE_file_status);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 8327;
				this.match(cobolParser.FILE);
				this.state = 8329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8328;
					this.separator();
					}
					}
					this.state = 8331;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8335;
			this.match(cobolParser.STATUS);
			this.state = 8337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8336;
				this.separator();
				}
				}
				this.state = 8339;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8341;
				this.match(cobolParser.IS);
				this.state = 8343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8342;
					this.separator();
					}
					}
					this.state = 8345;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8349;
			this.file_stat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_stat(): File_statContext {
		let _localctx: File_statContext = new File_statContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, cobolParser.RULE_file_stat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8351;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key(): Record_keyContext {
		let _localctx: Record_keyContext = new Record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, cobolParser.RULE_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALTERNATE) {
				{
				this.state = 8353;
				this.match(cobolParser.ALTERNATE);
				this.state = 8355;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8354;
					this.separator();
					}
					}
					this.state = 8357;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8361;
			this.match(cobolParser.RECORD);
			this.state = 8363;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8362;
				this.separator();
				}
				}
				this.state = 8365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8373;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 8367;
				this.match(cobolParser.KEY);
				this.state = 8369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8368;
					this.separator();
					}
					}
					this.state = 8371;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8381;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8375;
				this.match(cobolParser.IS);
				this.state = 8377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8376;
					this.separator();
					}
					}
					this.state = 8379;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8383;
			this.record_key_definition();
			this.state = 8399;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1429, this._ctx) ) {
			case 1:
				{
				this.state = 8385;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8384;
					this.separator();
					}
					}
					this.state = 8387;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 8389;
					this.match(cobolParser.WITH);
					this.state = 8391;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8390;
						this.separator();
						}
						}
						this.state = 8393;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8397;
				this.match(cobolParser.DUPLICATES);
				}
				break;
			}
			this.state = 8408;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1431, this._ctx) ) {
			case 1:
				{
				this.state = 8402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8401;
					this.separator();
					}
					}
					this.state = 8404;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8406;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key_definition(): Record_key_definitionContext {
		let _localctx: Record_key_definitionContext = new Record_key_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, cobolParser.RULE_record_key_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 8438;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1436, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8410;
				this.qualified_data_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8411;
				this.match(cobolParser.USER_DEFINED_WORD);
				this.state = 8415;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8412;
					this.separator();
					}
					}
					this.state = 8417;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8418;
				this.match(cobolParser.EQUAL_);
				this.state = 8422;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 8419;
					this.separator();
					}
					}
					this.state = 8424;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8425;
				this.qualified_data_item();
				this.state = 8435;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1435, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 8429;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
							{
							{
							this.state = 8426;
							this.separator();
							}
							}
							this.state = 8431;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 8432;
						this.qualified_data_item();
						}
						}
					}
					this.state = 8437;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1435, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public access_mode(): Access_modeContext {
		let _localctx: Access_modeContext = new Access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, cobolParser.RULE_access_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS) {
				{
				this.state = 8440;
				this.match(cobolParser.ACCESS);
				this.state = 8442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8441;
					this.separator();
					}
					}
					this.state = 8444;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8452;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MODE) {
					{
					this.state = 8446;
					this.match(cobolParser.MODE);
					this.state = 8448;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8447;
						this.separator();
						}
						}
						this.state = 8450;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 8454;
					this.match(cobolParser.IS);
					this.state = 8456;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8455;
						this.separator();
						}
						}
						this.state = 8458;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				}
			}

			this.state = 8464;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 8494;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1449, this._ctx) ) {
			case 1:
				{
				this.state = 8466;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8465;
					this.separator();
					}
					}
					this.state = 8468;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8470;
				this.match(cobolParser.RELATIVE);
				this.state = 8472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8471;
					this.separator();
					}
					}
					this.state = 8474;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 8476;
					this.match(cobolParser.KEY);
					this.state = 8478;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8477;
						this.separator();
						}
						}
						this.state = 8480;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 8484;
					this.match(cobolParser.IS);
					this.state = 8486;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8485;
						this.separator();
						}
						}
						this.state = 8488;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8492;
				this.qualified_data_item();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve(): ReserveContext {
		let _localctx: ReserveContext = new ReserveContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, cobolParser.RULE_reserve);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8496;
			this.match(cobolParser.RESERVE);
			this.state = 8498;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8497;
				this.separator();
				}
				}
				this.state = 8500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8502;
			this.reserve_num();
			this.state = 8510;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1452, this._ctx) ) {
			case 1:
				{
				this.state = 8504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8503;
					this.separator();
					}
					}
					this.state = 8506;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8508;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AREA || _la === cobolParser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve_num(): Reserve_numContext {
		let _localctx: Reserve_numContext = new Reserve_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, cobolParser.RULE_reserve_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8512;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_delimiter(): Record_delimiterContext {
		let _localctx: Record_delimiterContext = new Record_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, cobolParser.RULE_record_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8514;
			this.match(cobolParser.RECORD);
			this.state = 8516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8515;
				this.separator();
				}
				}
				this.state = 8518;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8520;
			this.match(cobolParser.DELIMITER);
			this.state = 8522;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8521;
				this.separator();
				}
				}
				this.state = 8524;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8526;
				this.match(cobolParser.IS);
				this.state = 8528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8527;
					this.separator();
					}
					}
					this.state = 8530;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8534;
			this.match(cobolParser.STANDARD_1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public padding(): PaddingContext {
		let _localctx: PaddingContext = new PaddingContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, cobolParser.RULE_padding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8536;
			this.match(cobolParser.PADDING);
			this.state = 8538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8537;
				this.separator();
				}
				}
				this.state = 8540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8548;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTER) {
				{
				this.state = 8542;
				this.match(cobolParser.CHARACTER);
				this.state = 8544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8543;
					this.separator();
					}
					}
					this.state = 8546;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8556;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8550;
				this.match(cobolParser.IS);
				this.state = 8552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8551;
					this.separator();
					}
					}
					this.state = 8554;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8558;
			this.pad_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pad_char(): Pad_charContext {
		let _localctx: Pad_charContext = new Pad_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, cobolParser.RULE_pad_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8560;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public organization(): OrganizationContext {
		let _localctx: OrganizationContext = new OrganizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, cobolParser.RULE_organization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8576;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ORGANIZATION) {
				{
				this.state = 8562;
				this.match(cobolParser.ORGANIZATION);
				this.state = 8564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8563;
					this.separator();
					}
					}
					this.state = 8566;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 8568;
					this.match(cobolParser.IS);
					this.state = 8570;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8569;
						this.separator();
						}
						}
						this.state = 8572;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				}
			}

			this.state = 8589;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SEQUENTIAL:
				{
				this.state = 8578;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.LINE:
				{
				this.state = 8579;
				this.match(cobolParser.LINE);
				this.state = 8581;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8580;
					this.separator();
					}
					}
					this.state = 8583;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8585;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.RELATIVE:
				{
				this.state = 8587;
				this.match(cobolParser.RELATIVE);
				}
				break;
			case cobolParser.INDEXED:
				{
				this.state = 8588;
				this.match(cobolParser.INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode(): Lock_modeContext {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, cobolParser.RULE_lock_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8591;
			this.match(cobolParser.LOCK);
			this.state = 8593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8592;
				this.separator();
				}
				}
				this.state = 8595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8603;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.MODE) {
				{
				this.state = 8597;
				this.match(cobolParser.MODE);
				this.state = 8599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8598;
					this.separator();
					}
					}
					this.state = 8601;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8611;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8605;
				this.match(cobolParser.IS);
				this.state = 8607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8606;
					this.separator();
					}
					}
					this.state = 8609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8613;
			this.lock_mode_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode_definition(): Lock_mode_definitionContext {
		let _localctx: Lock_mode_definitionContext = new Lock_mode_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, cobolParser.RULE_lock_mode_definition);
		let _la: number;
		try {
			this.state = 8683;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.MANUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8615;
				this.match(cobolParser.MANUAL);
				this.state = 8617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8616;
					this.separator();
					}
					}
					this.state = 8619;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8627;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 8621;
					this.match(cobolParser.WITH);
					this.state = 8623;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8622;
						this.separator();
						}
						}
						this.state = 8625;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8629;
				this.match(cobolParser.LOCK);
				this.state = 8631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8630;
					this.separator();
					}
					}
					this.state = 8633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8635;
				this.match(cobolParser.ON);
				this.state = 8637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8636;
					this.separator();
					}
					}
					this.state = 8639;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8641;
				this.match(cobolParser.MULTIPLE);
				this.state = 8643;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8642;
					this.separator();
					}
					}
					this.state = 8645;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8647;
				this.match(cobolParser.RECORDS);
				}
				break;
			case cobolParser.AUTOMATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8649;
				this.match(cobolParser.AUTOMATIC);
				this.state = 8680;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1485, this._ctx) ) {
				case 1:
					{
					this.state = 8651;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8650;
						this.separator();
						}
						}
						this.state = 8653;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 8661;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 8655;
						this.match(cobolParser.WITH);
						this.state = 8657;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8656;
							this.separator();
							}
							}
							this.state = 8659;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					this.state = 8678;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.LOCK:
						{
						{
						this.state = 8663;
						this.match(cobolParser.LOCK);
						this.state = 8665;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8664;
							this.separator();
							}
							}
							this.state = 8667;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 8669;
						this.match(cobolParser.ON);
						this.state = 8671;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8670;
							this.separator();
							}
							}
							this.state = 8673;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 8675;
						this.match(cobolParser.RECORD);
						}
						}
						break;
					case cobolParser.ROLLBACK:
						{
						this.state = 8677;
						this.match(cobolParser.ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.EXCLUSIVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8682;
				this.match(cobolParser.EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code_set(): Code_setContext {
		let _localctx: Code_setContext = new Code_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, cobolParser.RULE_code_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8685;
			this.match(cobolParser.CODE_SET);
			this.state = 8687;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8686;
				this.separator();
				}
				}
				this.state = 8689;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 8691;
				this.match(cobolParser.IS);
				this.state = 8693;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8692;
					this.separator();
					}
					}
					this.state = 8695;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8699;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_contains(): Block_containsContext {
		let _localctx: Block_containsContext = new Block_containsContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, cobolParser.RULE_block_contains);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8701;
			this.match(cobolParser.BLOCK);
			this.state = 8703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8702;
				this.separator();
				}
				}
				this.state = 8705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8713;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 8707;
				this.match(cobolParser.CONTAINS);
				this.state = 8709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8708;
					this.separator();
					}
					}
					this.state = 8711;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8727;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1495, this._ctx) ) {
			case 1:
				{
				this.state = 8715;
				this.smallest_block();
				this.state = 8717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8716;
					this.separator();
					}
					}
					this.state = 8719;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8721;
				this.match(cobolParser.TO);
				this.state = 8723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8722;
					this.separator();
					}
					}
					this.state = 8725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
				break;
			}
			this.state = 8729;
			this.blocksize();
			this.state = 8731;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8730;
				this.separator();
				}
				}
				this.state = 8733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8735;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.RECORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public smallest_block(): Smallest_blockContext {
		let _localctx: Smallest_blockContext = new Smallest_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, cobolParser.RULE_smallest_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8737;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocksize(): BlocksizeContext {
		let _localctx: BlocksizeContext = new BlocksizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, cobolParser.RULE_blocksize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8739;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to(): Assign_toContext {
		let _localctx: Assign_toContext = new Assign_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, cobolParser.RULE_assign_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8741;
			this.match(cobolParser.ASSIGN);
			this.state = 8743;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8742;
				this.separator();
				}
				}
				this.state = 8745;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8753;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TO) {
				{
				this.state = 8747;
				this.match(cobolParser.TO);
				this.state = 8749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8748;
					this.separator();
					}
					}
					this.state = 8751;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8755;
			this.assign_to_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to_definition(): Assign_to_definitionContext {
		let _localctx: Assign_to_definitionContext = new Assign_to_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, cobolParser.RULE_assign_to_definition);
		let _la: number;
		try {
			this.state = 8784;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DISK:
			case cobolParser.DYNAMIC:
			case cobolParser.EXTERNAL:
			case cobolParser.PRINTER:
			case cobolParser.STRING_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL) {
					{
					this.state = 8757;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 8759;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8758;
						this.separator();
						}
						}
						this.state = 8761;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8765;
				this.file_spec();
				}
				break;
			case cobolParser.MULTIPLE:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MULTIPLE) {
					{
					this.state = 8766;
					this.match(cobolParser.MULTIPLE);
					this.state = 8768;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8767;
						this.separator();
						}
						}
						this.state = 8770;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8774;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8782;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1505, this._ctx) ) {
				case 1:
					{
					this.state = 8776;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8775;
						this.separator();
						}
						}
						this.state = 8778;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 8780;
					this.match(cobolParser.FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_spec(): File_specContext {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, cobolParser.RULE_file_spec);
		try {
			this.state = 8790;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8786;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8787;
				this.qualified_data_item();
				}
				break;
			case cobolParser.DISK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8788;
				this.match(cobolParser.DISK);
				}
				break;
			case cobolParser.PRINTER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8789;
				this.match(cobolParser.PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, cobolParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8792;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public i_o_control(): I_o_controlContext {
		let _localctx: I_o_controlContext = new I_o_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, cobolParser.RULE_i_o_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8794;
			this.match(cobolParser.I_O_CONTROL);
			this.state = 8798;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 8795;
				this.separator();
				}
				}
				this.state = 8800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8801;
			this.match(cobolParser.DOT_);
			this.state = 8805;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1509, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8802;
					this.separator();
					}
					}
				}
				this.state = 8807;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1509, this._ctx);
			}
			this.state = 8863;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME || _la === cobolParser.DOT_) {
				{
				this.state = 8817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.APPLY) {
					{
					{
					this.state = 8808;
					this.apply();
					this.state = 8812;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 8809;
						this.separator();
						}
						}
						this.state = 8814;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 8819;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8829;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.SAME) {
					{
					{
					this.state = 8820;
					this.same();
					this.state = 8824;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 8821;
						this.separator();
						}
						}
						this.state = 8826;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 8831;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.RERUN) {
					{
					{
					this.state = 8832;
					this.rerun();
					this.state = 8836;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 8833;
						this.separator();
						}
						}
						this.state = 8838;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 8843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.MULTIPLE) {
					{
					{
					this.state = 8844;
					this.multiple_file();
					this.state = 8848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 8845;
						this.separator();
						}
						}
						this.state = 8850;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 8855;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8856;
				this.match(cobolParser.DOT_);
				this.state = 8860;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1518, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 8857;
						this.separator();
						}
						}
					}
					this.state = 8862;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1518, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file(): Multiple_fileContext {
		let _localctx: Multiple_fileContext = new Multiple_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, cobolParser.RULE_multiple_file);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8865;
			this.match(cobolParser.MULTIPLE);
			this.state = 8867;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8866;
				this.separator();
				}
				}
				this.state = 8869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8871;
			this.match(cobolParser.FILE);
			this.state = 8873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8872;
				this.separator();
				}
				}
				this.state = 8875;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TAPE) {
				{
				this.state = 8877;
				this.match(cobolParser.TAPE);
				this.state = 8879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8878;
					this.separator();
					}
					}
					this.state = 8881;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8891;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 8885;
				this.match(cobolParser.CONTAINS);
				this.state = 8887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8886;
					this.separator();
					}
					}
					this.state = 8889;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8900;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8893;
				this.multiple_file_definition();
				this.state = 8897;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1526, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 8894;
						this.separator();
						}
						}
					}
					this.state = 8899;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1526, this._ctx);
				}
				}
				}
				this.state = 8902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_definition(): Multiple_file_definitionContext {
		let _localctx: Multiple_file_definitionContext = new Multiple_file_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, cobolParser.RULE_multiple_file_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8904;
			this.multiple_file_name();
			this.state = 8918;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1530, this._ctx) ) {
			case 1:
				{
				this.state = 8906;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8905;
					this.separator();
					}
					}
					this.state = 8908;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8910;
				this.match(cobolParser.POSITION);
				this.state = 8912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8911;
					this.separator();
					}
					}
					this.state = 8914;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8916;
				this.pos_integer();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_name(): Multiple_file_nameContext {
		let _localctx: Multiple_file_nameContext = new Multiple_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, cobolParser.RULE_multiple_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8920;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos_integer(): Pos_integerContext {
		let _localctx: Pos_integerContext = new Pos_integerContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, cobolParser.RULE_pos_integer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8922;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun(): RerunContext {
		let _localctx: RerunContext = new RerunContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, cobolParser.RULE_rerun);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8924;
			this.match(cobolParser.RERUN);
			this.state = 8926;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8925;
				this.separator();
				}
				}
				this.state = 8928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 8942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 8930;
				this.match(cobolParser.ON);
				this.state = 8932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8931;
					this.separator();
					}
					}
					this.state = 8934;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8936;
				this.file_name();
				this.state = 8938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8937;
					this.separator();
					}
					}
					this.state = 8940;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8950;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EVERY) {
				{
				this.state = 8944;
				this.match(cobolParser.EVERY);
				this.state = 8946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8945;
					this.separator();
					}
					}
					this.state = 8948;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 8952;
			this.rerun_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_definition(): Rerun_definitionContext {
		let _localctx: Rerun_definitionContext = new Rerun_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, cobolParser.RULE_rerun_definition);
		let _la: number;
		try {
			this.state = 8979;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1541, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8954;
				this.rerun_def_file();
				this.state = 8956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8955;
					this.separator();
					}
					}
					this.state = 8958;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 8960;
					this.match(cobolParser.OF);
					this.state = 8962;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8961;
						this.separator();
						}
						}
						this.state = 8964;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 8968;
				this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8970;
				this.clock_count();
				this.state = 8972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8971;
					this.separator();
					}
					}
					this.state = 8974;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 8976;
				this.match(cobolParser.CLOCK_UNITS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8978;
				this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clock_count(): Clock_countContext {
		let _localctx: Clock_countContext = new Clock_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, cobolParser.RULE_clock_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8981;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_name(): Condition_nameContext {
		let _localctx: Condition_nameContext = new Condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, cobolParser.RULE_condition_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8983;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_def_file(): Rerun_def_fileContext {
		let _localctx: Rerun_def_fileContext = new Rerun_def_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, cobolParser.RULE_rerun_def_file);
		let _la: number;
		try {
			this.state = 9010;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.END:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8999;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.END) {
					{
					this.state = 8985;
					this.match(cobolParser.END);
					this.state = 8987;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8986;
						this.separator();
						}
						}
						this.state = 8989;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 8997;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OF) {
						{
						this.state = 8991;
						this.match(cobolParser.OF);
						this.state = 8993;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8992;
							this.separator();
							}
							}
							this.state = 8995;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						}
					}

					}
				}

				this.state = 9001;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9002;
				this.rec_count();
				this.state = 9004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9003;
					this.separator();
					}
					}
					this.state = 9006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9008;
				this.match(cobolParser.RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_count(): Rec_countContext {
		let _localctx: Rec_countContext = new Rec_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, cobolParser.RULE_rec_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9012;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same(): SameContext {
		let _localctx: SameContext = new SameContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, cobolParser.RULE_same);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9014;
			this.match(cobolParser.SAME);
			this.state = 9016;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9015;
				this.separator();
				}
				}
				this.state = 9018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 9026;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE) {
				{
				this.state = 9020;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9021;
					this.separator();
					}
					}
					this.state = 9024;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 9034;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA) {
				{
				this.state = 9028;
				this.match(cobolParser.AREA);
				this.state = 9030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9029;
					this.separator();
					}
					}
					this.state = 9032;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 9042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOR) {
				{
				this.state = 9036;
				this.match(cobolParser.FOR);
				this.state = 9038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9037;
					this.separator();
					}
					}
					this.state = 9040;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
			}

			this.state = 9044;
			this.same_area_file();
			this.state = 9052;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 9046;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 9045;
						this.separator();
						}
						}
						this.state = 9048;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 9050;
					this.same_area_file();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 9054;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1556, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_area_file(): Same_area_fileContext {
		let _localctx: Same_area_fileContext = new Same_area_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, cobolParser.RULE_same_area_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9056;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply(): ApplyContext {
		let _localctx: ApplyContext = new ApplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, cobolParser.RULE_apply);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9058;
			this.match(cobolParser.APPLY);
			this.state = 9060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9059;
				this.separator();
				}
				}
				this.state = 9062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 9070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9064;
				this.apply_definition();
				this.state = 9066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9065;
					this.separator();
					}
					}
					this.state = 9068;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				}
				}
				this.state = 9072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (cobolParser.CONTIGUOUS - 85)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 85)) | (1 << (cobolParser.DEFERRED_WRITE - 85)))) !== 0) || _la === cobolParser.EXTENSION || _la === cobolParser.FILL_SIZE || _la === cobolParser.LOCK_HOLDING || _la === cobolParser.MASS_INSERT || _la === cobolParser.PREALLOCATION || _la === cobolParser.PRINT_CONTROL || _la === cobolParser.WINDOW);
			this.state = 9074;
			this.match(cobolParser.ON);
			this.state = 9076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9075;
				this.separator();
				}
				}
				this.state = 9078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 9087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9080;
				this.file_name();
				this.state = 9084;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1561, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 9081;
						this.separator();
						}
						}
					}
					this.state = 9086;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1561, this._ctx);
				}
				}
				}
				this.state = 9089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply_definition(): Apply_definitionContext {
		let _localctx: Apply_definitionContext = new Apply_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, cobolParser.RULE_apply_definition);
		let _la: number;
		try {
			this.state = 9128;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DEFERRED_WRITE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9091;
				this.match(cobolParser.DEFERRED_WRITE);
				}
				break;
			case cobolParser.EXTENSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9092;
				this.match(cobolParser.EXTENSION);
				this.state = 9094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9093;
					this.separator();
					}
					}
					this.state = 9096;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9098;
				this.extend_amt();
				}
				break;
			case cobolParser.FILL_SIZE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9100;
				this.match(cobolParser.FILL_SIZE);
				}
				break;
			case cobolParser.LOCK_HOLDING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9101;
				this.match(cobolParser.LOCK_HOLDING);
				}
				break;
			case cobolParser.MASS_INSERT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9102;
				this.match(cobolParser.MASS_INSERT);
				}
				break;
			case cobolParser.CONTIGUOUS:
			case cobolParser.CONTIGUOUS_BEST_TRY:
			case cobolParser.PREALLOCATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY) {
					{
					this.state = 9103;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 9105;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 9104;
						this.separator();
						}
						}
						this.state = 9107;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					}
				}

				this.state = 9111;
				this.match(cobolParser.PREALLOCATION);
				this.state = 9113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9112;
					this.separator();
					}
					}
					this.state = 9115;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9117;
				this.preall_amt();
				}
				break;
			case cobolParser.PRINT_CONTROL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9119;
				this.match(cobolParser.PRINT_CONTROL);
				}
				break;
			case cobolParser.WINDOW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9120;
				this.match(cobolParser.WINDOW);
				this.state = 9122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9121;
					this.separator();
					}
					}
					this.state = 9124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9126;
				this.window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_ptrs(): Window_ptrsContext {
		let _localctx: Window_ptrsContext = new Window_ptrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, cobolParser.RULE_window_ptrs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9130;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preall_amt(): Preall_amtContext {
		let _localctx: Preall_amtContext = new Preall_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, cobolParser.RULE_preall_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9132;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extend_amt(): Extend_amtContext {
		let _localctx: Extend_amtContext = new Extend_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, cobolParser.RULE_extend_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9134;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public arithmetic_expression(): Arithmetic_expressionContext;
	public arithmetic_expression(_p: number): Arithmetic_expressionContext;
	// @RuleVersion(0)
	public arithmetic_expression(_p?: number): Arithmetic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Arithmetic_expressionContext = new Arithmetic_expressionContext(this._ctx, _parentState);
		let _prevctx: Arithmetic_expressionContext = _localctx;
		let _startState: number = 716;
		this.enterRecursionRule(_localctx, 716, cobolParser.RULE_arithmetic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9164;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LPAREN_:
				{
				this.state = 9137;
				this.match(cobolParser.LPAREN_);
				this.state = 9141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9138;
					this.arithmetic_separator();
					}
					}
					this.state = 9143;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9144;
				this.arithmetic_expression(0);
				this.state = 9148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9145;
					this.arithmetic_separator();
					}
					}
					this.state = 9150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9151;
				this.match(cobolParser.RPAREN_);
				}
				break;
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
				{
				this.state = 9153;
				this.unary_arithmetic_operator();
				this.state = 9157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9154;
					this.arithmetic_separator();
					}
					}
					this.state = 9159;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9160;
				this.arithmetic_expression(3);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 9162;
				this.identifier();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 9163;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 9184;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1575, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_arithmetic_expression);
					this.state = 9166;
					if (!(this.precpred(this._ctx, 4))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
					}
					this.state = 9170;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9167;
						this.arithmetic_separator();
						}
						}
						this.state = 9172;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9173;
					this.binary_arithmetic_operator();
					this.state = 9177;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9174;
						this.arithmetic_separator();
						}
						}
						this.state = 9179;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9180;
					this.arithmetic_expression(5);
					}
					}
				}
				this.state = 9186;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1575, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, cobolParser.RULE_constant);
		try {
			this.state = 9190;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9187;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9188;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9189;
				this.figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext {
		let _localctx: Binary_arithmetic_operatorContext = new Binary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, cobolParser.RULE_binary_arithmetic_operator);
		try {
			this.state = 9198;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1577, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9192;
				this.match(cobolParser.PLUS_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9193;
				this.match(cobolParser.MINUS_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9194;
				this.match(cobolParser.STAR_);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9195;
				this.match(cobolParser.SLASH_);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9196;
				this.match(cobolParser.STAR_);
				this.state = 9197;
				this.match(cobolParser.STAR_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext {
		let _localctx: Unary_arithmetic_operatorContext = new Unary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, cobolParser.RULE_unary_arithmetic_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9200;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PLUS_ || _la === cobolParser.MINUS_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_expression(): Logic_expressionContext;
	public logic_expression(_p: number): Logic_expressionContext;
	// @RuleVersion(0)
	public logic_expression(_p?: number): Logic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_expressionContext = new Logic_expressionContext(this._ctx, _parentState);
		let _prevctx: Logic_expressionContext = _localctx;
		let _startState: number = 724;
		this.enterRecursionRule(_localctx, 724, cobolParser.RULE_logic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9231;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1581, this._ctx) ) {
			case 1:
				{
				this.state = 9203;
				this.match(cobolParser.LPAREN_);
				this.state = 9207;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9204;
					this.arithmetic_separator();
					}
					}
					this.state = 9209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9210;
				this.logic_expression(0);
				this.state = 9214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9211;
					this.arithmetic_separator();
					}
					}
					this.state = 9216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9217;
				this.match(cobolParser.RPAREN_);
				}
				break;

			case 2:
				{
				this.state = 9219;
				this.match(cobolParser.NOT);
				this.state = 9223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9220;
					this.arithmetic_separator();
					}
					}
					this.state = 9225;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9226;
				this.logic_expression(5);
				}
				break;

			case 3:
				{
				this.state = 9227;
				this.class_condition();
				}
				break;

			case 4:
				{
				this.state = 9228;
				this.logic_condition(0);
				}
				break;

			case 5:
				{
				this.state = 9229;
				this.sign_condition();
				}
				break;

			case 6:
				{
				this.state = 9230;
				this.success_failure_condition();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 9251;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1584, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_expression);
					this.state = 9233;
					if (!(this.precpred(this._ctx, 6))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
					}
					this.state = 9237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9234;
						this.arithmetic_separator();
						}
						}
						this.state = 9239;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9240;
					this.logic_operation();
					this.state = 9244;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9241;
						this.arithmetic_separator();
						}
						}
						this.state = 9246;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9247;
					this.logic_expression(7);
					}
					}
				}
				this.state = 9253;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1584, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public success_failure_condition(): Success_failure_conditionContext {
		let _localctx: Success_failure_conditionContext = new Success_failure_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, cobolParser.RULE_success_failure_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9254;
			this.qualified_data_item();
			this.state = 9262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1586, this._ctx) ) {
			case 1:
				{
				this.state = 9256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9255;
					this.arithmetic_separator();
					}
					}
					this.state = 9258;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9260;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 9265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9264;
				this.arithmetic_separator();
				}
				}
				this.state = 9267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 9269;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FAILURE || _la === cobolParser.SUCCESS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_condition(): Logic_conditionContext;
	public logic_condition(_p: number): Logic_conditionContext;
	// @RuleVersion(0)
	public logic_condition(_p?: number): Logic_conditionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_conditionContext = new Logic_conditionContext(this._ctx, _parentState);
		let _prevctx: Logic_conditionContext = _localctx;
		let _startState: number = 728;
		this.enterRecursionRule(_localctx, 728, cobolParser.RULE_logic_condition, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9290;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1590, this._ctx) ) {
			case 1:
				{
				this.state = 9272;
				this.arithmetic_expression(0);
				this.state = 9276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9273;
					this.arithmetic_separator();
					}
					}
					this.state = 9278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9279;
				this.condition_operator();
				this.state = 9283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9280;
					this.arithmetic_separator();
					}
					}
					this.state = 9285;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9286;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				{
				this.state = 9288;
				this.class_condition();
				}
				break;

			case 3:
				{
				this.state = 9289;
				this.qualified_data_item();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 9316;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1594, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_conditionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_condition);
					this.state = 9292;
					if (!(this.precpred(this._ctx, 1))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
					}
					this.state = 9294;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 9293;
						this.arithmetic_separator();
						}
						}
						this.state = 9296;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 9298;
					this.logic_operation();
					this.state = 9302;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9299;
						this.arithmetic_separator();
						}
						}
						this.state = 9304;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9305;
					this.condition_operator();
					this.state = 9309;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9306;
						this.arithmetic_separator();
						}
						}
						this.state = 9311;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9312;
					this.arithmetic_expression(0);
					}
					}
				}
				this.state = 9318;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1594, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logic_operation(): Logic_operationContext {
		let _localctx: Logic_operationContext = new Logic_operationContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, cobolParser.RULE_logic_operation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9319;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AND || _la === cobolParser.OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition(): Sign_conditionContext {
		let _localctx: Sign_conditionContext = new Sign_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, cobolParser.RULE_sign_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9321;
			this.arithmetic_expression(0);
			this.state = 9329;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1596, this._ctx) ) {
			case 1:
				{
				this.state = 9323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9322;
					this.arithmetic_separator();
					}
					}
					this.state = 9325;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9327;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 9338;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1598, this._ctx) ) {
			case 1:
				{
				this.state = 9332;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9331;
					this.arithmetic_separator();
					}
					}
					this.state = 9334;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9336;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 9341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9340;
				this.arithmetic_separator();
				}
				}
				this.state = 9343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 9345;
			this.sign_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition_name(): Sign_condition_nameContext {
		let _localctx: Sign_condition_nameContext = new Sign_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, cobolParser.RULE_sign_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9347;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NEGATIVE || _la === cobolParser.POSITIVE || _la === cobolParser.ZERO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition(): Class_conditionContext {
		let _localctx: Class_conditionContext = new Class_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, cobolParser.RULE_class_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9349;
			this.identifier();
			this.state = 9357;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1601, this._ctx) ) {
			case 1:
				{
				this.state = 9351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9350;
					this.arithmetic_separator();
					}
					}
					this.state = 9353;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9355;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 9366;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1603, this._ctx) ) {
			case 1:
				{
				this.state = 9360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9359;
					this.arithmetic_separator();
					}
					}
					this.state = 9362;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9364;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 9369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 9368;
				this.arithmetic_separator();
				}
				}
				this.state = 9371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
			this.state = 9373;
			this.class_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition_name(): Class_condition_nameContext {
		let _localctx: Class_condition_nameContext = new Class_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, cobolParser.RULE_class_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9375;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER))) !== 0) || _la === cobolParser.NUMERIC || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_operator(): Condition_operatorContext {
		let _localctx: Condition_operatorContext = new Condition_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, cobolParser.RULE_condition_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9384;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 9377;
				this.match(cobolParser.IS);
				this.state = 9381;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9378;
					this.arithmetic_separator();
					}
					}
					this.state = 9383;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 9521;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1634, this._ctx) ) {
			case 1:
				{
				this.state = 9393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 9386;
					this.match(cobolParser.NOT);
					this.state = 9390;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9387;
						this.arithmetic_separator();
						}
						}
						this.state = 9392;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 9455;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.GREATER:
					{
					this.state = 9395;
					this.match(cobolParser.GREATER);
					this.state = 9403;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1610, this._ctx) ) {
					case 1:
						{
						this.state = 9397;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 9396;
							this.arithmetic_separator();
							}
							}
							this.state = 9399;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 9401;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.GT_:
					{
					this.state = 9405;
					this.match(cobolParser.GT_);
					this.state = 9413;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1612, this._ctx) ) {
					case 1:
						{
						this.state = 9407;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 9406;
							this.arithmetic_separator();
							}
							}
							this.state = 9409;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 9411;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LESS:
					{
					this.state = 9415;
					this.match(cobolParser.LESS);
					this.state = 9423;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1614, this._ctx) ) {
					case 1:
						{
						this.state = 9417;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 9416;
							this.arithmetic_separator();
							}
							}
							this.state = 9419;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 9421;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LT_:
					{
					this.state = 9425;
					this.match(cobolParser.LT_);
					this.state = 9433;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1616, this._ctx) ) {
					case 1:
						{
						this.state = 9427;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 9426;
							this.arithmetic_separator();
							}
							}
							this.state = 9429;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 9431;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL:
					{
					this.state = 9435;
					this.match(cobolParser.EQUAL);
					this.state = 9443;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1618, this._ctx) ) {
					case 1:
						{
						this.state = 9437;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 9436;
							this.arithmetic_separator();
							}
							}
							this.state = 9439;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 9441;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL_:
					{
					this.state = 9445;
					this.match(cobolParser.EQUAL_);
					this.state = 9453;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1620, this._ctx) ) {
					case 1:
						{
						this.state = 9447;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 9446;
							this.arithmetic_separator();
							}
							}
							this.state = 9449;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
						this.state = 9451;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 9457;
				this.match(cobolParser.GREATER);
				this.state = 9465;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1623, this._ctx) ) {
				case 1:
					{
					this.state = 9459;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 9458;
						this.arithmetic_separator();
						}
						}
						this.state = 9461;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 9463;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 9468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9467;
					this.arithmetic_separator();
					}
					}
					this.state = 9470;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9472;
				this.match(cobolParser.OR);
				this.state = 9474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9473;
					this.arithmetic_separator();
					}
					}
					this.state = 9476;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9478;
				this.match(cobolParser.EQUAL);
				this.state = 9486;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1627, this._ctx) ) {
				case 1:
					{
					this.state = 9480;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 9479;
						this.arithmetic_separator();
						}
						}
						this.state = 9482;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 9484;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 9488;
				this.match(cobolParser.GE_);
				}
				break;

			case 4:
				{
				this.state = 9489;
				this.match(cobolParser.LESS);
				this.state = 9497;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1629, this._ctx) ) {
				case 1:
					{
					this.state = 9491;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 9490;
						this.arithmetic_separator();
						}
						}
						this.state = 9493;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 9495;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 9500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9499;
					this.arithmetic_separator();
					}
					}
					this.state = 9502;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9504;
				this.match(cobolParser.OR);
				this.state = 9506;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 9505;
					this.arithmetic_separator();
					}
					}
					this.state = 9508;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
				this.state = 9510;
				this.match(cobolParser.EQUAL);
				this.state = 9518;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1633, this._ctx) ) {
				case 1:
					{
					this.state = 9512;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 9511;
						this.arithmetic_separator();
						}
						}
						this.state = 9514;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0));
					this.state = 9516;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 5:
				{
				this.state = 9520;
				this.match(cobolParser.LE_);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier_result(): Identifier_resultContext {
		let _localctx: Identifier_resultContext = new Identifier_resultContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, cobolParser.RULE_identifier_result);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9523;
			this.qualified_data_item();
			this.state = 9531;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1636, this._ctx) ) {
			case 1:
				{
				this.state = 9527;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9524;
					this.arithmetic_separator();
					}
					}
					this.state = 9529;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9530;
				this.subscripting();
				}
				break;
			}
			this.state = 9540;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1638, this._ctx) ) {
			case 1:
				{
				this.state = 9536;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9533;
					this.arithmetic_separator();
					}
					}
					this.state = 9538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9539;
				this.reference_modification();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, cobolParser.RULE_identifier);
		let _la: number;
		try {
			this.state = 9569;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9542;
				this.identifier_result();
				}
				break;
			case cobolParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9543;
				this.match(cobolParser.FUNCTION);
				this.state = 9547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9544;
					this.arithmetic_separator();
					}
					}
					this.state = 9549;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9550;
				this.function_name();
				this.state = 9558;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1641, this._ctx) ) {
				case 1:
					{
					this.state = 9554;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9551;
						this.arithmetic_separator();
						}
						}
						this.state = 9556;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9557;
					this.arguments();
					}
					break;
				}
				this.state = 9567;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1643, this._ctx) ) {
				case 1:
					{
					this.state = 9563;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9560;
						this.arithmetic_separator();
						}
						}
						this.state = 9565;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9566;
					this.reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arguments(): ArgumentsContext {
		let _localctx: ArgumentsContext = new ArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, cobolParser.RULE_arguments);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9571;
			this.subscripting();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subscripting(): SubscriptingContext {
		let _localctx: SubscriptingContext = new SubscriptingContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, cobolParser.RULE_subscripting);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9573;
			this.match(cobolParser.LPAREN_);
			this.state = 9577;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 9574;
				this.arithmetic_separator();
				}
				}
				this.state = 9579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9582;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1646, this._ctx) ) {
			case 1:
				{
				this.state = 9580;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				{
				this.state = 9581;
				this.match(cobolParser.ALL);
				}
				break;
			}
			this.state = 9596;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1649, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9587;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.COMMA_ - 422)) | (1 << (cobolParser.SEMI_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
						{
						{
						this.state = 9584;
						this.separator();
						}
						}
						this.state = 9589;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 9592;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1648, this._ctx) ) {
					case 1:
						{
						this.state = 9590;
						this.arithmetic_expression(0);
						}
						break;

					case 2:
						{
						this.state = 9591;
						this.match(cobolParser.ALL);
						}
						break;
					}
					}
					}
				}
				this.state = 9598;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1649, this._ctx);
			}
			this.state = 9602;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 9599;
				this.arithmetic_separator();
				}
				}
				this.state = 9604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9605;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reference_modification(): Reference_modificationContext {
		let _localctx: Reference_modificationContext = new Reference_modificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, cobolParser.RULE_reference_modification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9607;
			this.match(cobolParser.LPAREN_);
			this.state = 9611;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 9608;
				this.arithmetic_separator();
				}
				}
				this.state = 9613;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9614;
			this.leftmost_character_position();
			this.state = 9618;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 9615;
				this.arithmetic_separator();
				}
				}
				this.state = 9620;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9621;
			this.match(cobolParser.COLON_);
			this.state = 9629;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1654, this._ctx) ) {
			case 1:
				{
				this.state = 9625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
					{
					{
					this.state = 9622;
					this.arithmetic_separator();
					}
					}
					this.state = 9627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 9628;
				this.length();
				}
				break;
			}
			this.state = 9634;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.START_SLASH_ - 422)) | (1 << (cobolParser.START_STAR_ - 422)) | (1 << (cobolParser.START_FOUR_SPACES - 422)) | (1 << (cobolParser.WHITESPACE - 422)) | (1 << (cobolParser.NEWLINE - 422)))) !== 0)) {
				{
				{
				this.state = 9631;
				this.arithmetic_separator();
				}
				}
				this.state = 9636;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 9637;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leftmost_character_position(): Leftmost_character_positionContext {
		let _localctx: Leftmost_character_positionContext = new Leftmost_character_positionContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, cobolParser.RULE_leftmost_character_position);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9639;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public length(): LengthContext {
		let _localctx: LengthContext = new LengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, cobolParser.RULE_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9641;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_name(): Function_nameContext {
		let _localctx: Function_nameContext = new Function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, cobolParser.RULE_function_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9643;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 358:
			return this.arithmetic_expression_sempred(_localctx as Arithmetic_expressionContext, predIndex);

		case 362:
			return this.logic_expression_sempred(_localctx as Logic_expressionContext, predIndex);

		case 364:
			return this.logic_condition_sempred(_localctx as Logic_conditionContext, predIndex);
		}
		return true;
	}
	private arithmetic_expression_sempred(_localctx: Arithmetic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private logic_expression_sempred(_localctx: Logic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 6);
		}
		return true;
	}
	private logic_condition_sempred(_localctx: Logic_conditionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 19;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u01C7\u25B0\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x03\x02\x03\x02\x07\x02\u02FB\n\x02\f" +
		"\x02\x0E\x02\u02FE\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04" +
		"\x05\x04\u0306\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u030C\n\x05" +
		"\x03\x06\x03\x06\x05\x06\u0310\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x05\x07\u0318\n\x07\x03\b\x03\b\x03\b\x03\b\x05\b\u031E\n" +
		"\b\x03\t\x03\t\x07\t\u0322\n\t\f\t\x0E\t\u0325\v\t\x03\t\x03\t\x03\t\x07" +
		"\t\u032A\n\t\f\t\x0E\t\u032D\v\t\x03\t\x05\t\u0330\n\t\x03\n\x03\n\x05" +
		"\n\u0334\n\n\x03\n\x05\n\u0337\n\n\x03\n\x05\n\u033A\n\n\x03\v\x03\v\x05" +
		"\v\u033E\n\v\x03\v\x03\v\x07\v\u0342\n\v\f\v\x0E\v\u0345\v\v\x07\v\u0347" +
		"\n\v\f\v\x0E\v\u034A\v\v\x03\v\x03\v\x07\v\u034E\n\v\f\v\x0E\v\u0351\v" +
		"\v\x07\v\u0353\n\v\f\v\x0E\v\u0356\v\v\x05\v\u0358\n\v\x03\v\x07\v\u035B" +
		"\n\v\f\v\x0E\v\u035E\v\v\x03\v\x05\v\u0361\n\v\x03\v\x07\v\u0364\n\v\f" +
		"\v\x0E\v\u0367\v\v\x03\v\x03\v\x07\v\u036B\n\v\f\v\x0E\v\u036E\v\v\x07" +
		"\v\u0370\n\v\f\v\x0E\v\u0373\v\v\x03\f\x03\f\x06\f\u0377\n\f\r\f\x0E\f" +
		"\u0378\x03\f\x03\f\x06\f\u037D\n\f\r\f\x0E\f\u037E\x03\f\x03\f\x05\f\u0383" +
		"\n\f\x03\f\x07\f\u0386\n\f\f\f\x0E\f\u0389\v\f\x03\f\x03\f\x07\f\u038D" +
		"\n\f\f\f\x0E\f\u0390\v\f\x03\r\x03\r\x06\r\u0394\n\r\r\r\x0E\r\u0395\x03" +
		"\r\x03\r\x06\r\u039A\n\r\r\r\x0E\r\u039B\x03\r\x03\r\x05\r\u03A0\n\r\x03" +
		"\r\x06\r\u03A3\n\r\r\r\x0E\r\u03A4\x03\r\x03\r\x05\r\u03A9\n\r\x03\r\x07" +
		"\r\u03AC\n\r\f\r\x0E\r\u03AF\v\r\x03\r\x03\r\x07\r\u03B3\n\r\f\r\x0E\r" +
		"\u03B6\v\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x07\x0F\u03BC\n\x0F\f\x0F\x0E" +
		"\x0F\u03BF\v\x0F\x03\x0F\x03\x0F\x07\x0F\u03C3\n\x0F\f\x0F\x0E\x0F\u03C6" +
		"\v\x0F\x03\x0F\x03\x0F\x07\x0F\u03CA\n\x0F\f\x0F\x0E\x0F\u03CD\v\x0F\x06" +
		"\x0F\u03CF\n\x0F\r\x0F\x0E\x0F\u03D0\x03\x0F\x03\x0F\x06\x0F\u03D5\n\x0F" +
		"\r\x0F\x0E\x0F\u03D6\x03\x0F\x03\x0F\x07\x0F\u03DB\n\x0F\f\x0F\x0E\x0F" +
		"\u03DE\v\x0F\x03\x0F\x03\x0F\x07\x0F\u03E2\n\x0F\f\x0F\x0E\x0F\u03E5\v" +
		"\x0F\x03\x10\x03\x10\x03\x10\x06\x10\u03EA\n\x10\r\x10\x0E\x10\u03EB\x03" +
		"\x10\x03\x10\x07\x10\u03F0\n\x10\f\x10\x0E\x10\u03F3\v\x10\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x07\x12\u03F9\n\x12\f\x12\x0E\x12\u03FC\v\x12\x03" +
		"\x12\x03\x12\x07\x12\u0400\n\x12\f\x12\x0E\x12\u0403\v\x12\x03\x12\x03" +
		"\x12\x07\x12\u0407\n\x12\f\x12\x0E\x12\u040A\v\x12\x07\x12\u040C\n\x12" +
		"\f\x12\x0E\x12\u040F\v\x12\x03\x13\x03\x13\x07\x13\u0413\n\x13\f\x13\x0E" +
		"\x13\u0416\v\x13\x06\x13\u0418\n\x13\r\x13\x0E\x13\u0419\x03\x13\x07\x13" +
		"\u041D\n\x13\f\x13\x0E\x13\u0420\v\x13\x03\x13\x03\x13\x07\x13\u0424\n" +
		"\x13\f\x13\x0E\x13\u0427\v\x13\x05\x13\u0429\n\x13\x03\x14\x03\x14\x06" +
		"\x14\u042D\n\x14\r\x14\x0E\x14\u042E\x03\x14\x03\x14\x05\x14\u0433\n\x14" +
		"\x03\x14\x06\x14\u0436\n\x14\r\x14\x0E\x14\u0437\x03\x14\x03\x14\x06\x14" +
		"\u043C\n\x14\r\x14\x0E\x14\u043D\x03\x14\x03\x14\x05\x14\u0442\n\x14\x03" +
		"\x14\x06\x14\u0445\n\x14\r\x14\x0E\x14\u0446\x03\x14\x03\x14\x06\x14\u044B" +
		"\n\x14\r\x14\x0E\x14\u044C\x03\x14\x03\x14\x06\x14\u0451\n\x14\r\x14\x0E" +
		"\x14\u0452\x03\x14\x03\x14\x05\x14\u0457\n\x14\x03\x14\x06\x14\u045A\n" +
		"\x14\r\x14\x0E\x14\u045B\x03\x14\x03\x14\x07\x14\u0460\n\x14\f\x14\x0E" +
		"\x14\u0463\v\x14\x03\x14\x03\x14\x07\x14\u0467\n\x14\f\x14\x0E\x14\u046A" +
		"\v\x14\x03\x14\x03\x14\x06\x14\u046E\n\x14\r\x14\x0E\x14\u046F\x03\x14" +
		"\x03\x14\x06\x14\u0474\n\x14\r\x14\x0E\x14\u0475\x03\x14\x03\x14\x05\x14" +
		"\u047A\n\x14\x03\x14\x07\x14\u047D\n\x14\f\x14\x0E\x14\u0480\v\x14\x03" +
		"\x14\x03\x14\x07\x14\u0484\n\x14\f\x14\x0E\x14\u0487\v\x14\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x06\x16\u048D\n\x16\r\x16\x0E\x16\u048E\x03\x16\x03" +
		"\x16\x07\x16\u0493\n\x16\f\x16\x0E\x16\u0496\v\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x05\x16\u049C\n\x16\x03\x17\x03\x17\x06\x17\u04A0\n\x17\r" +
		"\x17\x0E\x17\u04A1\x03\x17\x03\x17\x06\x17\u04A6\n\x17\r\x17\x0E\x17\u04A7" +
		"\x03\x17\x03\x17\x05\x17\u04AC\n\x17\x03\x17\x07\x17\u04AF\n\x17\f\x17" +
		"\x0E\x17\u04B2\v\x17\x03\x17\x03\x17\x07\x17\u04B6\n\x17\f\x17\x0E\x17" +
		"\u04B9\v\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x06\x1A\u04C1" +
		"\n\x1A\r\x1A\x0E\x1A\u04C2\x03\x1A\x03\x1A\x06\x1A\u04C7\n\x1A\r\x1A\x0E" +
		"\x1A\u04C8\x03\x1A\x03\x1A\x07\x1A\u04CD\n\x1A\f\x1A\x0E\x1A\u04D0\v\x1A" +
		"\x03\x1B\x03\x1B\x06\x1B\u04D4\n\x1B\r\x1B\x0E\x1B\u04D5\x03\x1B\x03\x1B" +
		"\x03\x1C\x03\x1C\x07\x1C\u04DC\n\x1C\f\x1C\x0E\x1C\u04DF\v\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u04E5\n\x1C\f\x1C\x0E\x1C\u04E8\v\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u04ED\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05" +
		"\x1D\u050D\n\x1D\x03\x1E\x03\x1E\x06\x1E\u0511\n\x1E\r\x1E\x0E\x1E\u0512" +
		"\x03\x1E\x03\x1E\x06\x1E\u0517\n\x1E\r\x1E\x0E\x1E\u0518\x03\x1E\x03\x1E" +
		"\x06\x1E\u051D\n\x1E\r\x1E\x0E\x1E\u051E\x03\x1E\x03\x1E\x05\x1E\u0523" +
		"\n\x1E\x03\x1E\x06\x1E\u0526\n\x1E\r\x1E\x0E\x1E\u0527\x03\x1E\x03\x1E" +
		"\x06\x1E\u052C\n\x1E\r\x1E\x0E\x1E\u052D\x03\x1E\x03\x1E\x06\x1E\u0532" +
		"\n\x1E\r\x1E\x0E\x1E\u0533\x03\x1E\x03\x1E\x05\x1E\u0538\n\x1E\x05\x1E" +
		"\u053A\n\x1E\x03\x1E\x06\x1E\u053D\n\x1E\r\x1E\x0E\x1E\u053E\x03\x1E\x03" +
		"\x1E\x05\x1E\u0543\n\x1E\x03\x1E\x06\x1E\u0546\n\x1E\r\x1E\x0E\x1E\u0547" +
		"\x03\x1E\x03\x1E\x05\x1E\u054C\n\x1E\x03\x1F\x03\x1F\x03 \x03 \x06 \u0552" +
		"\n \r \x0E \u0553\x03 \x03 \x06 \u0558\n \r \x0E \u0559\x03 \x03 \x05" +
		" \u055E\n \x03 \x06 \u0561\n \r \x0E \u0562\x03 \x03 \x06 \u0567\n \r" +
		" \x0E \u0568\x03 \x03 \x05 \u056D\n \x03 \x06 \u0570\n \r \x0E \u0571" +
		"\x03 \x03 \x06 \u0576\n \r \x0E \u0577\x03 \x03 \x06 \u057C\n \r \x0E" +
		" \u057D\x03 \x03 \x05 \u0582\n \x03 \x06 \u0585\n \r \x0E \u0586\x03 " +
		"\x03 \x05 \u058B\n \x03!\x03!\x03\"\x03\"\x06\"\u0591\n\"\r\"\x0E\"\u0592" +
		"\x03\"\x03\"\x06\"\u0597\n\"\r\"\x0E\"\u0598\x03\"\x03\"\x06\"\u059D\n" +
		"\"\r\"\x0E\"\u059E\x03\"\x03\"\x05\"\u05A3\n\"\x03#\x03#\x03$\x03$\x03" +
		"%\x03%\x06%\u05AB\n%\r%\x0E%\u05AC\x03%\x03%\x06%\u05B1\n%\r%\x0E%\u05B2" +
		"\x03%\x03%\x06%\u05B7\n%\r%\x0E%\u05B8\x03%\x03%\x06%\u05BD\n%\r%\x0E" +
		"%\u05BE\x03%\x03%\x05%\u05C3\n%\x03%\x06%\u05C6\n%\r%\x0E%\u05C7\x03%" +
		"\x03%\x05%\u05CC\n%\x03%\x06%\u05CF\n%\r%\x0E%\u05D0\x03%\x03%\x06%\u05D5" +
		"\n%\r%\x0E%\u05D6\x05%\u05D9\n%\x03%\x03%\x05%\u05DD\n%\x03&\x03&\x03" +
		"\'\x03\'\x03(\x03(\x06(\u05E5\n(\r(\x0E(\u05E6\x03(\x03(\x06(\u05EB\n" +
		"(\r(\x0E(\u05EC\x03(\x03(\x05(\u05F1\n(\x03(\x06(\u05F4\n(\r(\x0E(\u05F5" +
		"\x03(\x03(\x05(\u05FA\n(\x03(\x06(\u05FD\n(\r(\x0E(\u05FE\x03(\x03(\x06" +
		"(\u0603\n(\r(\x0E(\u0604\x03(\x03(\x05(\u0609\n(\x03(\x06(\u060C\n(\r" +
		"(\x0E(\u060D\x03(\x03(\x06(\u0612\n(\r(\x0E(\u0613\x03(\x03(\x06(\u0618" +
		"\n(\r(\x0E(\u0619\x03(\x03(\x05(\u061E\n(\x03(\x06(\u0621\n(\r(\x0E(\u0622" +
		"\x03(\x03(\x05(\u0627\n(\x03(\x06(\u062A\n(\r(\x0E(\u062B\x03(\x03(\x06" +
		"(\u0630\n(\r(\x0E(\u0631\x03(\x03(\x05(\u0636\n(\x03(\x06(\u0639\n(\r" +
		"(\x0E(\u063A\x03(\x03(\x06(\u063F\n(\r(\x0E(\u0640\x03(\x03(\x05(\u0645" +
		"\n(\x05(\u0647\n(\x03(\x06(\u064A\n(\r(\x0E(\u064B\x03(\x03(\x05(\u0650" +
		"\n(\x05(\u0652\n(\x03(\x06(\u0655\n(\r(\x0E(\u0656\x03(\x03(\x05(\u065B" +
		"\n(\x03)\x03)\x06)\u065F\n)\r)\x0E)\u0660\x05)\u0663\n)\x03)\x03)\x06" +
		")\u0667\n)\r)\x0E)\u0668\x05)\u066B\n)\x03)\x03)\x03)\x06)\u0670\n)\r" +
		")\x0E)\u0671\x03)\x03)\x05)\u0676\n)\x03)\x06)\u0679\n)\r)\x0E)\u067A" +
		"\x03)\x03)\x05)\u067F\n)\x03)\x03)\x06)\u0683\n)\r)\x0E)\u0684\x03)\x03" +
		")\x03)\x03)\x06)\u068B\n)\r)\x0E)\u068C\x03)\x03)\x05)\u0691\n)\x05)\u0693" +
		"\n)\x05)\u0695\n)\x03*\x03*\x06*\u0699\n*\r*\x0E*\u069A\x03*\x03*\x06" +
		"*\u069F\n*\r*\x0E*\u06A0\x03*\x03*\x06*\u06A5\n*\r*\x0E*\u06A6\x03*\x03" +
		"*\x05*\u06AB\n*\x05*\u06AD\n*\x03*\x06*\u06B0\n*\r*\x0E*\u06B1\x03*\x03" +
		"*\x03*\x05*\u06B7\n*\x05*\u06B9\n*\x03*\x06*\u06BC\n*\r*\x0E*\u06BD\x03" +
		"*\x03*\x06*\u06C2\n*\r*\x0E*\u06C3\x03*\x06*\u06C7\n*\r*\x0E*\u06C8\x03" +
		"*\x03*\x05*\u06CD\n*\x03+\x03+\x05+\u06D1\n+\x03+\x06+\u06D4\n+\r+\x0E" +
		"+\u06D5\x03+\x03+\x03,\x03,\x06,\u06DC\n,\r,\x0E,\u06DD\x05,\u06E0\n," +
		"\x03,\x03,\x06,\u06E4\n,\r,\x0E,\u06E5\x03,\x03,\x03-\x03-\x06-\u06EC" +
		"\n-\r-\x0E-\u06ED\x05-\u06F0\n-\x03-\x03-\x06-\u06F4\n-\r-\x0E-\u06F5" +
		"\x03-\x03-\x03.\x03.\x06.\u06FC\n.\r.\x0E.\u06FD\x05.\u0700\n.\x03.\x03" +
		".\x06.\u0704\n.\r.\x0E.\u0705\x03.\x03.\x06.\u070A\n.\r.\x0E.\u070B\x03" +
		".\x03.\x06.\u0710\n.\r.\x0E.\u0711\x03.\x03.\x06.\u0716\n.\r.\x0E.\u0717" +
		"\x03.\x03.\x06.\u071C\n.\r.\x0E.\u071D\x03.\x03.\x06.\u0722\n.\r.\x0E" +
		".\u0723\x03.\x03.\x06.\u0728\n.\r.\x0E.\u0729\x03.\x03.\x07.\u072E\n." +
		"\f.\x0E.\u0731\v.\x03/\x03/\x06/\u0735\n/\r/\x0E/\u0736\x03/\x03/\x06" +
		"/\u073B\n/\r/\x0E/\u073C\x03/\x03/\x06/\u0741\n/\r/\x0E/\u0742\x03/\x03" +
		"/\x06/\u0747\n/\r/\x0E/\u0748\x03/\x03/\x030\x030\x050\u074F\n0\x031\x03" +
		"1\x051\u0753\n1\x032\x032\x033\x033\x063\u0759\n3\r3\x0E3\u075A\x033\x03" +
		"3\x063\u075F\n3\r3\x0E3\u0760\x033\x033\x063\u0765\n3\r3\x0E3\u0766\x03" +
		"3\x033\x063\u076B\n3\r3\x0E3\u076C\x033\x033\x063\u0771\n3\r3\x0E3\u0772" +
		"\x033\x033\x063\u0777\n3\r3\x0E3\u0778\x053\u077B\n3\x033\x033\x063\u077F" +
		"\n3\r3\x0E3\u0780\x033\x033\x053\u0785\n3\x063\u0787\n3\r3\x0E3\u0788" +
		"\x063\u078B\n3\r3\x0E3\u078C\x053\u078F\n3\x034\x034\x064\u0793\n4\r4" +
		"\x0E4\u0794\x034\x034\x064\u0799\n4\r4\x0E4\u079A\x034\x034\x064\u079F" +
		"\n4\r4\x0E4\u07A0\x054\u07A3\n4\x034\x034\x064\u07A7\n4\r4\x0E4\u07A8" +
		"\x034\x034\x054\u07AD\n4\x034\x064\u07B0\n4\r4\x0E4\u07B1\x034\x034\x05" +
		"4\u07B6\n4\x064\u07B8\n4\r4\x0E4\u07B9\x035\x035\x065\u07BE\n5\r5\x0E" +
		"5\u07BF\x055\u07C2\n5\x035\x035\x035\x065\u07C7\n5\r5\x0E5\u07C8\x035" +
		"\x035\x065\u07CD\n5\r5\x0E5\u07CE\x035\x035\x055\u07D3\n5\x035\x035\x03" +
		"5\x065\u07D8\n5\r5\x0E5\u07D9\x035\x035\x055\u07DE\n5\x035\x065\u07E1" +
		"\n5\r5\x0E5\u07E2\x035\x035\x055\u07E7\n5\x035\x035\x065\u07EB\n5\r5\x0E" +
		"5\u07EC\x035\x035\x065\u07F1\n5\r5\x0E5\u07F2\x035\x035\x035\x035\x06" +
		"5\u07F9\n5\r5\x0E5\u07FA\x035\x035\x055\u07FF\n5\x035\x065\u0802\n5\r" +
		"5\x0E5\u0803\x035\x035\x055\u0808\n5\x035\x035\x065\u080C\n5\r5\x0E5\u080D" +
		"\x035\x035\x065\u0812\n5\r5\x0E5\u0813\x035\x035\x035\x035\x065\u081A" +
		"\n5\r5\x0E5\u081B\x035\x035\x055\u0820\n5\x035\x065\u0823\n5\r5\x0E5\u0824" +
		"\x035\x035\x055\u0829\n5\x035\x035\x065\u082D\n5\r5\x0E5\u082E\x035\x03" +
		"5\x065\u0833\n5\r5\x0E5\u0834\x035\x035\x055\u0839\n5\x055\u083B\n5\x05" +
		"5\u083D\n5\x036\x036\x066\u0841\n6\r6\x0E6\u0842\x036\x036\x066\u0847" +
		"\n6\r6\x0E6\u0848\x036\x036\x066\u084D\n6\r6\x0E6\u084E\x036\x036\x06" +
		"6\u0853\n6\r6\x0E6\u0854\x036\x036\x056\u0859\n6\x036\x066\u085C\n6\r" +
		"6\x0E6\u085D\x036\x036\x066\u0862\n6\r6\x0E6\u0863\x036\x036\x056\u0868" +
		"\n6\x066\u086A\n6\r6\x0E6\u086B\x036\x066\u086F\n6\r6\x0E6\u0870\x036" +
		"\x036\x056\u0875\n6\x036\x066\u0878\n6\r6\x0E6\u0879\x036\x036\x056\u087E" +
		"\n6\x037\x037\x057\u0882\n7\x038\x038\x068\u0886\n8\r8\x0E8\u0887\x03" +
		"8\x038\x068\u088C\n8\r8\x0E8\u088D\x038\x038\x068\u0892\n8\r8\x0E8\u0893" +
		"\x038\x068\u0897\n8\r8\x0E8\u0898\x038\x038\x068\u089D\n8\r8\x0E8\u089E" +
		"\x058\u08A1\n8\x038\x038\x068\u08A5\n8\r8\x0E8\u08A6\x038\x038\x068\u08AB" +
		"\n8\r8\x0E8\u08AC\x058\u08AF\n8\x038\x038\x058\u08B3\n8\x038\x068\u08B6" +
		"\n8\r8\x0E8\u08B7\x038\x038\x068\u08BC\n8\r8\x0E8\u08BD\x038\x038\x06" +
		"8\u08C2\n8\r8\x0E8\u08C3\x038\x068\u08C7\n8\r8\x0E8\u08C8\x038\x038\x05" +
		"8\u08CD\n8\x039\x039\x069\u08D1\n9\r9\x0E9\u08D2\x039\x039\x069\u08D7" +
		"\n9";
	private static readonly _serializedATNSegment1: string =
		"\r9\x0E9\u08D8\x039\x039\x069\u08DD\n9\r9\x0E9\u08DE\x059\u08E1\n9\x03" +
		"9\x039\x069\u08E5\n9\r9\x0E9\u08E6\x039\x039\x069\u08EB\n9\r9\x0E9\u08EC" +
		"\x039\x039\x059\u08F1\n9\x03:\x03:\x03;\x03;\x03<\x03<\x03<\x03=\x03=" +
		"\x03>\x03>\x06>\u08FE\n>\r>\x0E>\u08FF\x05>\u0902\n>\x03>\x03>\x06>\u0906" +
		"\n>\r>\x0E>\u0907\x03>\x03>\x05>\u090C\n>\x03>\x06>\u090F\n>\r>\x0E>\u0910" +
		"\x03>\x03>\x06>\u0915\n>\r>\x0E>\u0916\x03?\x03?\x03@\x03@\x03A\x03A\x06" +
		"A\u091F\nA\rA\x0EA\u0920\x03A\x03A\x06A\u0925\nA\rA\x0EA\u0926\x03A\x03" +
		"A\x06A\u092B\nA\rA\x0EA\u092C\x03A\x03A\x05A\u0931\nA\x03A\x03A\x05A\u0935" +
		"\nA\x03B\x03B\x06B\u0939\nB\rB\x0EB\u093A\x03B\x03B\x06B\u093F\nB\rB\x0E" +
		"B\u0940\x03B\x03B\x06B\u0945\nB\rB\x0EB\u0946\x03B\x03B\x06B\u094B\nB" +
		"\rB\x0EB\u094C\x03B\x03B\x07B\u0951\nB\fB\x0EB\u0954\vB\x03C\x03C\x03" +
		"D\x03D\x03E\x03E\x06E\u095C\nE\rE\x0EE\u095D\x03E\x03E\x05E\u0962\nE\x06" +
		"E\u0964\nE\rE\x0EE\u0965\x03F\x03F\x06F\u096A\nF\rF\x0EF\u096B\x03F\x03" +
		"F\x06F\u0970\nF\rF\x0EF\u0971\x03F\x03F\x06F\u0976\nF\rF\x0EF\u0977\x03" +
		"F\x03F\x06F\u097C\nF\rF\x0EF\u097D\x03F\x03F\x07F\u0982\nF\fF\x0EF\u0985" +
		"\vF\x06F\u0987\nF\rF\x0EF\u0988\x03G\x03G\x03H\x03H\x06H\u098F\nH\rH\x0E" +
		"H\u0990\x03H\x03H\x06H\u0995\nH\rH\x0EH\u0996\x03H\x03H\x06H\u099B\nH" +
		"\rH\x0EH\u099C\x03H\x03H\x07H\u09A1\nH\fH\x0EH\u09A4\vH\x03I\x03I\x03" +
		"J\x03J\x06J\u09AA\nJ\rJ\x0EJ\u09AB\x03J\x03J\x06J\u09B0\nJ\rJ\x0EJ\u09B1" +
		"\x03K\x03K\x06K\u09B6\nK\rK\x0EK\u09B7\x03K\x03K\x06K\u09BC\nK\rK\x0E" +
		"K\u09BD\x03K\x03K\x05K\u09C2\nK\x06K\u09C4\nK\rK\x0EK\u09C5\x03L\x03L" +
		"\x06L\u09CA\nL\rL\x0EL\u09CB\x03L\x03L\x07L\u09D0\nL\fL\x0EL\u09D3\vL" +
		"\x03M\x03M\x06M\u09D7\nM\rM\x0EM\u09D8\x03M\x03M\x05M\u09DD\nM\x03M\x06" +
		"M\u09E0\nM\rM\x0EM\u09E1\x03M\x03M\x03N\x03N\x06N\u09E8\nN\rN\x0EN\u09E9" +
		"\x03N\x03N\x06N\u09EE\nN\rN\x0EN\u09EF\x03N\x03N\x07N\u09F4\nN\fN\x0E" +
		"N\u09F7\vN\x06N\u09F9\nN\rN\x0EN\u09FA\x03O\x03O\x03O\x05O\u0A00\nO\x03" +
		"P\x03P\x03Q\x03Q\x03R\x03R\x03S\x03S\x06S\u0A0A\nS\rS\x0ES\u0A0B\x03S" +
		"\x03S\x06S\u0A10\nS\rS\x0ES\u0A11\x03T\x03T\x06T\u0A16\nT\rT\x0ET\u0A17" +
		"\x03T\x03T\x06T\u0A1C\nT\rT\x0ET\u0A1D\x03T\x06T\u0A21\nT\rT\x0ET\u0A22" +
		"\x03T\x03T\x07T\u0A27\nT\fT\x0ET\u0A2A\vT\x03U\x03U\x06U\u0A2E\nU\rU\x0E" +
		"U\u0A2F\x03U\x03U\x06U\u0A34\nU\rU\x0EU\u0A35\x03U\x03U\x06U\u0A3A\nU" +
		"\rU\x0EU\u0A3B\x05U\u0A3E\nU\x03U\x03U\x06U\u0A42\nU\rU\x0EU\u0A43\x03" +
		"U\x03U\x06U\u0A48\nU\rU\x0EU\u0A49\x03V\x03V\x05V\u0A4E\nV\x03W\x03W\x03" +
		"X\x03X\x06X\u0A54\nX\rX\x0EX\u0A55\x03X\x03X\x06X\u0A5A\nX\rX\x0EX\u0A5B" +
		"\x05X\u0A5E\nX\x03X\x03X\x06X\u0A62\nX\rX\x0EX\u0A63\x03X\x03X\x06X\u0A68" +
		"\nX\rX\x0EX\u0A69\x03X\x03X\x03Y\x03Y\x06Y\u0A70\nY\rY\x0EY\u0A71\x03" +
		"Y\x03Y\x06Y\u0A76\nY\rY\x0EY\u0A77\x03Y\x03Y\x05Y\u0A7C\nY\x03Y\x06Y\u0A7F" +
		"\nY\rY\x0EY\u0A80\x03Y\x03Y\x03Y\x06Y\u0A86\nY\rY\x0EY\u0A87\x03Y\x03" +
		"Y\x05Y\u0A8C\nY\x03Y\x06Y\u0A8F\nY\rY\x0EY\u0A90\x03Y\x03Y\x06Y\u0A95" +
		"\nY\rY\x0EY\u0A96\x03Y\x03Y\x03Y\x06Y\u0A9C\nY\rY\x0EY\u0A9D\x03Y\x03" +
		"Y\x05Y\u0AA2\nY\x05Y\u0AA4\nY\x03Y\x06Y\u0AA7\nY\rY\x0EY\u0AA8\x03Y\x03" +
		"Y\x05Y\u0AAD\nY\x03Z\x03Z\x06Z\u0AB1\nZ\rZ\x0EZ\u0AB2\x03Z\x03Z\x03[\x03" +
		"[\x03\\\x03\\\x03]\x03]\x06]\u0ABD\n]\r]\x0E]\u0ABE\x03]\x03]\x03^\x03" +
		"^\x06^\u0AC5\n^\r^\x0E^\u0AC6\x03^\x03^\x05^\u0ACB\n^\x03^\x06^\u0ACE" +
		"\n^\r^\x0E^\u0ACF\x03^\x03^\x05^\u0AD4\n^\x03^\x03^\x06^\u0AD8\n^\r^\x0E" +
		"^\u0AD9\x03^\x03^\x05^\u0ADE\n^\x03^\x06^\u0AE1\n^\r^\x0E^\u0AE2\x03^" +
		"\x03^\x06^\u0AE7\n^\r^\x0E^\u0AE8\x03^\x03^\x06^\u0AED\n^\r^\x0E^\u0AEE" +
		"\x03^\x03^\x05^\u0AF3\n^\x03^\x06^\u0AF6\n^\r^\x0E^\u0AF7\x03^\x03^\x05" +
		"^\u0AFC\n^\x03_\x03_\x03`\x03`\x06`\u0B02\n`\r`\x0E`\u0B03\x03`\x03`\x06" +
		"`\u0B08\n`\r`\x0E`\u0B09\x03`\x03`\x05`\u0B0E\n`\x03`\x06`\u0B11\n`\r" +
		"`\x0E`\u0B12\x03`\x03`\x07`\u0B17\n`\f`\x0E`\u0B1A\v`\x03`\x06`\u0B1D" +
		"\n`\r`\x0E`\u0B1E\x03`\x03`\x06`\u0B23\n`\r`\x0E`\u0B24\x03`\x03`\x06" +
		"`\u0B29\n`\r`\x0E`\u0B2A\x03`\x03`\x05`\u0B2F\n`\x03`\x06`\u0B32\n`\r" +
		"`\x0E`\u0B33\x03`\x03`\x07`\u0B38\n`\f`\x0E`\u0B3B\v`\x03`\x06`\u0B3E" +
		"\n`\r`\x0E`\u0B3F\x03`\x03`\x06`\u0B44\n`\r`\x0E`\u0B45\x03`\x06`\u0B49" +
		"\n`\r`\x0E`\u0B4A\x03`\x03`\x06`\u0B4F\n`\r`\x0E`\u0B50\x03`\x03`\x06" +
		"`\u0B55\n`\r`\x0E`\u0B56\x03`\x03`\x05`\u0B5B\n`\x03`\x06`\u0B5E\n`\r" +
		"`\x0E`\u0B5F\x03`\x03`\x05`\u0B64\n`\x03a\x03a\x03a\x06a\u0B69\na\ra\x0E" +
		"a\u0B6A\x05a\u0B6D\na\x03a\x03a\x06a\u0B71\na\ra\x0Ea\u0B72\x03a\x03a" +
		"\x06a\u0B77\na\ra\x0Ea\u0B78\x03a\x03a\x05a\u0B7D\na\x03a\x03a\x03a\x05" +
		"a\u0B82\na\x03b\x03b\x03b\x03b\x05b\u0B88\nb\x03c\x03c\x05c\u0B8C\nc\x03" +
		"d\x03d\x06d\u0B90\nd\rd\x0Ed\u0B91\x03d\x03d\x06d\u0B96\nd\rd\x0Ed\u0B97" +
		"\x03d\x03d\x06d\u0B9C\nd\rd\x0Ed\u0B9D\x03d\x03d\x06d\u0BA2\nd\rd\x0E" +
		"d\u0BA3\x03d\x03d\x05d\u0BA8\nd\x03d\x06d\u0BAB\nd\rd\x0Ed\u0BAC\x03d" +
		"\x03d\x06d\u0BB1\nd\rd\x0Ed\u0BB2\x03d\x03d\x05d\u0BB7\nd\x06d\u0BB9\n" +
		"d\rd\x0Ed\u0BBA\x03d\x06d\u0BBE\nd\rd\x0Ed\u0BBF\x03d\x03d\x05d\u0BC4" +
		"\nd\x03d\x06d\u0BC7\nd\rd\x0Ed\u0BC8\x03d\x03d\x05d\u0BCD\nd\x03e\x03" +
		"e\x06e\u0BD1\ne\re\x0Ee\u0BD2\x03e\x03e\x06e\u0BD7\ne\re\x0Ee\u0BD8\x03" +
		"e\x03e\x06e\u0BDD\ne\re\x0Ee\u0BDE\x03e\x03e\x06e\u0BE3\ne\re\x0Ee\u0BE4" +
		"\x03e\x03e\x05e\u0BE9\ne\x03e\x06e\u0BEC\ne\re\x0Ee\u0BED\x03e\x03e\x06" +
		"e\u0BF2\ne\re\x0Ee\u0BF3\x03e\x03e\x05e\u0BF8\ne\x03e\x06e\u0BFB\ne\r" +
		"e\x0Ee\u0BFC\x03e\x03e\x06e\u0C01\ne\re\x0Ee\u0C02\x03e\x03e\x06e\u0C07" +
		"\ne\re\x0Ee\u0C08\x03e\x03e\x05e\u0C0D\ne\x03e\x06e\u0C10\ne\re\x0Ee\u0C11" +
		"\x03e\x03e\x05e\u0C16\ne\x03f\x03f\x03g\x03g\x05g\u0C1C\ng\x03h\x03h\x03" +
		"h\x03h\x05h\u0C22\nh\x03i\x03i\x06i\u0C26\ni\ri\x0Ei\u0C27\x03i\x03i\x06" +
		"i\u0C2C\ni\ri\x0Ei\u0C2D\x03i\x03i\x07i\u0C32\ni\fi\x0Ei\u0C35\vi\x06" +
		"i\u0C37\ni\ri\x0Ei\u0C38\x03i\x06i\u0C3C\ni\ri\x0Ei\u0C3D\x03i\x03i\x05" +
		"i\u0C42\ni\x03j\x03j\x06j\u0C46\nj\rj\x0Ej\u0C47\x03j\x03j\x06j\u0C4C" +
		"\nj\rj\x0Ej\u0C4D\x03j\x03j\x07j\u0C52\nj\fj\x0Ej\u0C55\vj\x06j\u0C57" +
		"\nj\rj\x0Ej\u0C58\x03j\x06j\u0C5C\nj\rj\x0Ej\u0C5D\x03j\x03j\x05j\u0C62" +
		"\nj\x03k\x03k\x06k\u0C66\nk\rk\x0Ek\u0C67\x03k\x03k\x06k\u0C6C\nk\rk\x0E" +
		"k\u0C6D\x03k\x03k\x06k\u0C72\nk\rk\x0Ek\u0C73\x05k\u0C76\nk\x03k\x03k" +
		"\x06k\u0C7A\nk\rk\x0Ek\u0C7B\x03k\x03k\x05k\u0C80\nk\x03k\x03k\x06k\u0C84" +
		"\nk\rk\x0Ek\u0C85\x03k\x03k\x05k\u0C8A\nk\x05k\u0C8C\nk\x05k\u0C8E\nk" +
		"\x03k\x06k\u0C91\nk\rk\x0Ek\u0C92\x03k\x03k\x05k\u0C97\nk\x03l\x03l\x06" +
		"l\u0C9B\nl\rl\x0El\u0C9C\x03l\x03l\x06l\u0CA1\nl\rl\x0El\u0CA2\x03l\x03" +
		"l\x06l\u0CA7\nl\rl\x0El\u0CA8\x03l\x03l\x06l\u0CAD\nl\rl\x0El\u0CAE\x03" +
		"l\x03l\x05l\u0CB3\nl\x03l\x06l\u0CB6\nl\rl\x0El\u0CB7\x03l\x03l\x05l\u0CBC" +
		"\nl\x03m\x03m\x05m\u0CC0\nm\x03n\x03n\x03o\x03o\x06o\u0CC6\no\ro\x0Eo" +
		"\u0CC7\x03o\x03o\x05o\u0CCC\no\x03o\x06o\u0CCF\no\ro\x0Eo\u0CD0\x03o\x03" +
		"o\x05o\u0CD5\no\x03p\x03p\x06p\u0CD9\np\rp\x0Ep\u0CDA\x03p\x03p\x05p\u0CDF" +
		"\np\x03p\x06p\u0CE2\np\rp\x0Ep\u0CE3\x03p\x03p\x05p\u0CE8\np\x03q\x03" +
		"q\x06q\u0CEC\nq\rq\x0Eq\u0CED\x05q\u0CF0\nq\x03q\x03q\x03q\x06q\u0CF5" +
		"\nq\rq\x0Eq\u0CF6\x03q\x03q\x03q\x03q\x06q\u0CFD\nq\rq\x0Eq\u0CFE\x05" +
		"q\u0D01\nq\x03q\x03q\x06q\u0D05\nq\rq\x0Eq\u0D06\x03q\x03q\x05q\u0D0B" +
		"\nq\x05q\u0D0D\nq\x03r\x03r\x03r\x03r\x03r\x06r\u0D14\nr\rr\x0Er\u0D15" +
		"\x03r\x03r\x06r\u0D1A\nr\rr\x0Er\u0D1B\x05r\u0D1E\nr\x03r\x03r\x06r\u0D22" +
		"\nr\rr\x0Er\u0D23\x03r\x03r\x05r\u0D28\nr\x05r\u0D2A\nr\x03r\x06r\u0D2D" +
		"\nr\rr\x0Er\u0D2E\x03r\x03r\x03r\x03r\x06r\u0D35\nr\rr\x0Er\u0D36\x05" +
		"r\u0D39\nr\x03r\x03r\x03r\x03r\x03r\x06r\u0D40\nr\rr\x0Er\u0D41\x05r\u0D44" +
		"\nr\x03r\x03r\x03r\x03r\x06r\u0D4A\nr\rr\x0Er\u0D4B\x05r\u0D4E\nr\x03" +
		"r\x03r\x03r\x06r\u0D53\nr\rr\x0Er\u0D54\x05r\u0D57\nr\x03r\x03r\x06r\u0D5B" +
		"\nr\rr\x0Er\u0D5C\x03r\x03r\x05r\u0D61\nr\x05r\u0D63\nr\x03s\x03s\x06" +
		"s\u0D67\ns\rs\x0Es\u0D68\x05s\u0D6B\ns\x03s\x03s\x06s\u0D6F\ns\rs\x0E" +
		"s\u0D70\x03s\x03s\x05s\u0D75\ns\x03s\x06s\u0D78\ns\rs\x0Es\u0D79\x03s" +
		"\x03s\x03t\x03t\x06t\u0D80\nt\rt\x0Et\u0D81\x05t\u0D84\nt\x03t\x03t\x06" +
		"t\u0D88\nt\rt\x0Et\u0D89\x03t\x03t\x05t\u0D8E\nt\x03t\x06t\u0D91\nt\r" +
		"t\x0Et\u0D92\x03t\x03t\x03u\x03u\x03v\x03v\x06v\u0D9B\nv\rv\x0Ev\u0D9C" +
		"\x03v\x03v\x06v\u0DA1\nv\rv\x0Ev\u0DA2\x03v\x03v\x05v\u0DA7\nv\x03v\x06" +
		"v\u0DAA\nv\rv\x0Ev\u0DAB\x03v\x03v\x05v\u0DB0\nv\x03v\x06v\u0DB3\nv\r" +
		"v\x0Ev\u0DB4\x03v\x03v\x05v\u0DB9\nv\x03w\x03w\x03x\x03x\x06x\u0DBF\n" +
		"x\rx\x0Ex\u0DC0\x03x\x03x\x06x\u0DC5\nx\rx\x0Ex\u0DC6\x03x\x03x\x05x\u0DCB" +
		"\nx\x06x\u0DCD\nx\rx\x0Ex\u0DCE\x03x\x06x\u0DD2\nx\rx\x0Ex\u0DD3\x03x" +
		"\x03x\x06x\u0DD8\nx\rx\x0Ex\u0DD9\x03x\x07x\u0DDD\nx\fx\x0Ex\u0DE0\vx" +
		"\x03x\x03x\x07x\u0DE4\nx\fx\x0Ex\u0DE7\vx\x05x\u0DE9\nx\x03x\x03x\x06" +
		"x\u0DED\nx\rx\x0Ex\u0DEE\x03x\x03x\x05x\u0DF3\nx\x03x\x06x\u0DF6\nx\r" +
		"x\x0Ex\u0DF7\x03x\x03x\x05x\u0DFC\nx\x03y\x03y\x06y\u0E00\ny\ry\x0Ey\u0E01" +
		"\x03y\x03y\x06y\u0E06\ny\ry\x0Ey\u0E07\x03y\x03y\x05y\u0E0C\ny\x06y\u0E0E" +
		"\ny\ry\x0Ey\u0E0F\x03z\x03z\x06z\u0E14\nz\rz\x0Ez\u0E15\x03z\x03z\x06" +
		"z\u0E1A\nz\rz\x0Ez\u0E1B\x05z\u0E1E\nz\x03z\x03z\x03z\x06z\u0E23\nz\r" +
		"z\x0Ez\u0E24\x05z\u0E27\nz\x03z\x03z\x06z\u0E2B\nz\rz\x0Ez\u0E2C\x03z" +
		"\x03z\x05z\u0E31\nz\x05z\u0E33\nz\x03z\x03z\x06z\u0E37\nz\rz\x0Ez\u0E38" +
		"\x05z\u0E3B\nz\x03z\x03z\x06z\u0E3F\nz\rz\x0Ez\u0E40\x03z\x03z\x03z\x05" +
		"z\u0E46\nz\x05z\u0E48\nz\x03{\x03{\x06{\u0E4C\n{\r{\x0E{\u0E4D\x03{\x03" +
		"{\x06{\u0E52\n{\r{\x0E{\u0E53\x03|\x03|\x06|\u0E58\n|\r|\x0E|\u0E59\x03" +
		"|\x03|\x06|\u0E5E\n|\r|\x0E|\u0E5F\x03|\x03|\x05|\u0E64\n|\x03|\x06|\u0E67" +
		"\n|\r|\x0E|\u0E68\x03|\x03|\x05|\u0E6D\n|\x03|\x06|\u0E70\n|\r|\x0E|\u0E71" +
		"\x03|\x03|\x05|\u0E76\n|\x03|\x06|\u0E79\n|\r|\x0E|\u0E7A\x03|\x03|\x05" +
		"|\u0E7F\n|\x03}\x03}\x06}\u0E83\n}\r}\x0E}\u0E84\x03}\x03}\x03~\x03~\x06" +
		"~\u0E8B\n~\r~\x0E~\u0E8C\x03~\x03~\x06~\u0E91\n~\r~\x0E~\u0E92\x03\x7F" +
		"\x03\x7F\x03\x7F\x06\x7F\u0E98\n\x7F\r\x7F\x0E\x7F\u0E99\x05\x7F\u0E9C" +
		"\n\x7F\x03\x7F\x03\x7F\x06\x7F\u0EA0\n\x7F\r\x7F\x0E\x7F\u0EA1\x03\x7F" +
		"\x03\x7F\x07\x7F\u0EA6\n\x7F\f\x7F\x0E\x7F\u0EA9\v\x7F\x05\x7F\u0EAB\n" +
		"\x7F\x03\x80\x03\x80\x06\x80\u0EAF\n\x80\r\x80\x0E\x80\u0EB0\x05\x80\u0EB3" +
		"\n\x80\x03\x80\x03\x80\x03\x80\x06\x80\u0EB8\n\x80\r\x80\x0E\x80\u0EB9" +
		"\x05\x80\u0EBC\n\x80\x03\x80\x03\x80\x03\x80\x06\x80\u0EC1\n\x80\r\x80" +
		"\x0E\x80\u0EC2\x05\x80\u0EC5\n\x80\x03\x80\x03\x80\x03\x80\x06\x80\u0ECA" +
		"\n\x80\r\x80\x0E\x80\u0ECB\x05\x80\u0ECE\n\x80\x03\x80\x05\x80\u0ED1\n" +
		"\x80\x03\x81\x03\x81\x03\x81\x05\x81\u0ED6\n\x81\x03\x82\x03\x82\x03\x83" +
		"\x03\x83\x06\x83\u0EDC\n\x83\r\x83\x0E\x83\u0EDD\x03\x83\x03\x83\x06\x83" +
		"\u0EE2\n\x83\r\x83\x0E\x83\u0EE3\x03\x83\x03\x83\x06\x83\u0EE8\n\x83\r" +
		"\x83\x0E\x83\u0EE9\x03\x83\x03\x83\x06\x83\u0EEE\n\x83\r\x83\x0E\x83\u0EEF" +
		"\x03\x83\x03\x83\x06\x83\u0EF4\n\x83\r\x83\x0E\x83\u0EF5\x05\x83\u0EF8" +
		"\n\x83\x03\x83\x03\x83\x06\x83\u0EFC\n\x83\r\x83\x0E\x83\u0EFD\x03\x84" +
		"\x03\x84\x03\x85\x03\x85\x03\x86\x03\x86\x06\x86\u0F06\n\x86\r\x86\x0E" +
		"\x86\u0F07\x03\x86\x03\x86\x06\x86\u0F0C\n\x86\r\x86\x0E\x86\u0F0D\x03" +
		"\x86\x06\x86\u0F11\n\x86\r\x86\x0E\x86\u0F12\x03\x86\x03\x86\x06\x86\u0F17" +
		"\n\x86\r\x86\x0E\x86\u0F18\x03\x86\x03\x86\x06\x86\u0F1D\n\x86\r\x86\x0E" +
		"\x86\u0F1E\x03\x86\x03\x86\x05\x86\u0F23\n\x86\x06\x86\u0F25\n\x86\r\x86" +
		"\x0E\x86\u0F26\x03\x86\x03\x86\x06\x86\u0F2B\n\x86\r\x86\x0E\x86\u0F2C" +
		"\x03\x86\x03\x86\x07\x86\u0F31\n\x86\f\x86\x0E\x86\u0F34\v\x86\x03\x86" +
		"\x06\x86\u0F37\n\x86\r\x86\x0E\x86\u0F38\x03\x86\x03\x86\x05\x86\u0F3D" +
		"\n\x86\x03\x86\x06\x86\u0F40\n\x86\r\x86\x0E\x86\u0F41\x03\x86\x03\x86" +
		"\x06\x86\u0F46\n\x86\r\x86\x0E\x86\u0F47\x03\x86\x06\x86\u0F4B\n\x86\r" +
		"\x86\x0E\x86\u0F4C\x03\x86\x03\x86\x06\x86\u0F51\n\x86\r\x86\x0E\x86\u0F52" +
		"\x03\x86\x03\x86\x06\x86\u0F57\n\x86\r\x86\x0E\x86\u0F58\x03\x86\x03\x86" +
		"\x05\x86\u0F5D\n\x86\x06\x86\u0F5F\n\x86\r\x86\x0E\x86\u0F60\x03\x86\x03" +
		"\x86\x06\x86\u0F65\n\x86\r\x86\x0E\x86\u0F66\x03\x86\x03\x86\x06\x86\u0F6B" +
		"\n\x86\r\x86\x0E\x86\u0F6C\x03\x86\x03\x86\x06\x86\u0F71\n\x86\r\x86\x0E" +
		"\x86\u0F72\x03\x86\x03\x86\x06\x86\u0F77\n\x86\r\x86\x0E\x86\u0F78\x03" +
		"\x86\x03\x86\x06\x86\u0F7D\n\x86\r\x86\x0E\x86\u0F7E\x03\x86\x03\x86\x05" +
		"\x86\u0F83\n\x86\x05\x86\u0F85\n\x86\x03\x86\x06\x86\u0F88\n\x86\r\x86" +
		"\x0E\x86\u0F89\x03\x86\x03\x86\x05\x86\u0F8E\n\x86\x03\x86\x06\x86\u0F91" +
		"\n\x86\r\x86\x0E\x86\u0F92\x03\x86\x03\x86\x05\x86\u0F97\n\x86\x03\x87" +
		"\x03\x87\x03\x88\x03\x88\x05\x88\u0F9D\n\x88\x03\x89\x03\x89\x03\x89\x03" +
		"\x89\x03\x89\x03\x89\x05\x89\u0FA5\n\x89\x03\x8A\x03\x8A\x06\x8A\u0FA9" +
		"\n\x8A\r\x8A\x0E\x8A\u0FAA\x03\x8A\x03\x8A\x06\x8A\u0FAF\n\x8A\r\x8A\x0E" +
		"\x8A\u0FB0\x03\x8A\x03\x8A\x05\x8A\u0FB5\n\x8A\x03\x8A\x03\x8A\x06\x8A" +
		"\u0FB9\n\x8A\r\x8A\x0E\x8A\u0FBA\x03\x8A\x03\x8A\x06\x8A\u0FBF\n\x8A\r" +
		"\x8A\x0E\x8A\u0FC0\x03\x8A\x03\x8A\x05\x8A\u0FC5\n\x8A\x05\x8A\u0FC7\n" +
		"\x8A\x03\x8B\x03\x8B\x06\x8B\u0FCB\n\x8B\r\x8B\x0E\x8B\u0FCC\x03\x8B\x03" +
		"\x8B\x06\x8B\u0FD1\n\x8B\r\x8B\x0E\x8B\u0FD2\x03\x8B\x03\x8B\x05\x8B\u0FD7" +
		"\n\x8B\x03\x8B\x03\x8B\x06\x8B\u0FDB\n\x8B\r\x8B\x0E\x8B\u0FDC\x03\x8B" +
		"\x03\x8B\x06\x8B\u0FE1\n\x8B\r\x8B\x0E\x8B\u0FE2\x03\x8B\x03\x8B\x05\x8B" +
		"\u0FE7\n\x8B\x05\x8B\u0FE9\n\x8B\x03\x8C\x03\x8C\x06\x8C\u0FED\n\x8C\r" +
		"\x8C\x0E\x8C\u0FEE\x03\x8C\x03\x8C\x06\x8C\u0FF3\n\x8C\r\x8C\x0E\x8C\u0FF4" +
		"\x03\x8C\x03\x8C\x05\x8C\u0FF9\n\x8C\x03\x8C\x03\x8C\x06\x8C\u0FFD\n\x8C" +
		"\r\x8C\x0E\x8C\u0FFE\x03\x8C\x03\x8C\x06\x8C\u1003\n\x8C\r\x8C\x0E\x8C" +
		"\u1004\x03\x8C\x03\x8C\x05\x8C\u1009\n\x8C\x05\x8C\u100B\n\x8C\x03\x8D" +
		"\x03\x8D\x06\x8D\u100F\n\x8D\r\x8D\x0E\x8D\u1010\x03\x8D\x03\x8D\x06\x8D" +
		"\u1015\n\x8D\r\x8D\x0E\x8D\u1016\x03\x8D\x03\x8D\x05\x8D\u101B\n\x8D\x03" +
		"\x8D\x03\x8D\x06\x8D\u101F\n\x8D\r\x8D\x0E\x8D\u1020\x03\x8D\x03\x8D\x06" +
		"\x8D\u1025\n\x8D\r\x8D\x0E\x8D\u1026\x03\x8D\x03\x8D\x05\x8D\u102B\n\x8D" +
		"\x05\x8D\u102D\n\x8D\x03\x8E\x03\x8E\x06\x8E\u1031\n\x8E\r\x8E\x0E\x8E" +
		"\u1032\x03\x8E\x03\x8E\x06\x8E\u1037\n\x8E\r\x8E\x0E\x8E\u1038\x03\x8E" +
		"\x03\x8E\x06\x8E\u103D\n\x8E\r\x8E\x0E\x8E\u103E\x05\x8E\u1041\n\x8E\x03" +
		"\x8E\x03\x8E\x06\x8E\u1045\n\x8E\r\x8E\x0E\x8E\u1046\x03\x8E\x03\x8E\x05" +
		"\x8E\u104B\n\x8E\x03\x8E\x06\x8E\u104E\n\x8E\r\x8E\x0E\x8E\u104F\x03\x8E" +
		"\x03\x8E\x05\x8E\u1054\n\x8E\x03\x8F\x03\x8F\x03\x90\x03\x90\x06\x90\u105A" +
		"\n\x90\r\x90\x0E\x90\u105B\x03\x90\x03\x90\x06\x90\u1060\n\x90\r\x90\x0E" +
		"\x90\u1061\x03\x90\x03\x90\x06\x90\u1066\n\x90\r\x90\x0E\x90\u1067\x03" +
		"\x90\x03\x90\x05\x90\u106C\n\x90\x03\x90\x06\x90\u106F\n\x90\r\x90\x0E" +
		"\x90\u1070\x03\x90\x03\x90\x06\x90\u1075\n\x90\r\x90\x0E\x90\u1076\x03" +
		"\x90\x03\x90\x05\x90\u107B\n\x90\x03\x90\x06\x90\u107E\n\x90\r\x90\x0E" +
		"\x90\u107F\x03\x90\x03\x90\x05\x90\u1084\n\x90\x03\x90\x06\x90\u1087\n" +
		"\x90\r\x90\x0E\x90\u1088\x03\x90\x03\x90\x05\x90\u108D\n\x90\x03\x91\x03" +
		"\x91\x06\x91\u1091\n\x91\r\x91\x0E\x91\u1092\x03\x91\x03\x91\x06\x91\u1097" +
		"\n\x91\r\x91\x0E\x91\u1098\x03\x91\x03\x91\x06\x91\u109D\n\x91\r\x91\x0E" +
		"\x91\u109E\x03\x91\x03\x91\x03\x92\x03\x92\x06\x92\u10A5\n\x92\r\x92\x0E" +
		"\x92\u10A6\x03\x92\x03\x92\x06\x92\u10AB\n\x92\r\x92\x0E\x92\u10AC\x03" +
		"\x92\x03\x92\x06\x92\u10B1\n\x92\r\x92\x0E\x92\u10B2\x03\x92\x06\x92\u10B6" +
		"\n\x92\r\x92\x0E\x92\u10B7\x03\x92\x03\x92\x05\x92\u10BC\n\x92\x05\x92" +
		"\u10BE\n\x92\x03\x92\x06\x92\u10C1\n\x92\r\x92\x0E\x92\u10C2\x03\x92\x03" +
		"\x92\x05\x92\u10C7\n\x92\x03\x93\x03\x93\x06\x93\u10CB\n\x93\r\x93\x0E" +
		"\x93\u10CC\x03\x93\x03\x93\x06\x93\u10D1\n\x93\r\x93\x0E\x93\u10D2\x05" +
		"\x93\u10D5\n\x93\x03\x93\x03\x93\x06\x93\u10D9\n\x93\r\x93\x0E\x93\u10DA" +
		"\x03\x93\x03\x93\x06\x93\u10DF\n\x93\r\x93\x0E\x93\u10E0\x05\x93\u10E3" +
		"\n\x93\x03\x93\x03\x93\x06\x93\u10E7\n\x93\r\x93\x0E\x93\u10E8\x03\x93" +
		"\x03\x93\x06\x93\u10ED\n\x93\r\x93\x0E\x93\u10EE\x03\x93\x06\x93\u10F2" +
		"\n\x93\r\x93\x0E\x93\u10F3\x03\x93\x03\x93\x05\x93\u10F8\n\x93\x05\x93" +
		"\u10FA\n\x93\x03\x93\x06\x93\u10FD\n\x93\r\x93\x0E\x93\u10FE\x03\x93\x03" +
		"\x93\x05\x93\u1103\n\x93\x03\x94\x03\x94\x06\x94\u1107\n\x94\r\x94\x0E" +
		"\x94\u1108\x03\x94\x03\x94\x06\x94\u110D\n\x94\r\x94\x0E\x94\u110E\x03" +
		"\x94\x03\x94\x05\x94\u1113\n\x94\x03\x94\x06\x94\u1116\n\x94\r\x94\x0E" +
		"\x94\u1117\x03\x94\x03\x94\x05\x94\u111C\n\x94\x03\x94\x06\x94\u111F\n" +
		"\x94\r\x94\x0E\x94\u1120\x03\x94\x03\x94\x05\x94\u1125\n\x94\x03\x95\x03" +
		"\x95\x06\x95\u1129\n\x95\r\x95\x0E\x95\u112A\x05\x95\u112D\n\x95\x03\x95" +
		"\x03\x95\x06\x95\u1131\n\x95\r\x95\x0E\x95\u1132\x03\x95\x03\x95\x05\x95" +
		"\u1137\n\x95\x03\x95\x03\x95\x06\x95\u113B\n\x95\r\x95\x0E\x95\u113C\x03" +
		"\x95\x03\x95\x05\x95\u1141\n\x95\x05\x95\u1143\n\x95";
	private static readonly _serializedATNSegment2: string =
		"\x03\x96\x03\x96\x06\x96\u1147\n\x96\r\x96\x0E\x96\u1148\x03\x96\x03\x96" +
		"\x06\x96\u114D\n\x96\r\x96\x0E\x96\u114E\x05\x96\u1151\n\x96\x03\x96\x03" +
		"\x96\x05\x96\u1155\n\x96\x03\x97\x03\x97\x06\x97\u1159\n\x97\r\x97\x0E" +
		"\x97\u115A\x03\x97\x03\x97\x06\x97\u115F\n\x97\r\x97\x0E\x97\u1160\x05" +
		"\x97\u1163\n\x97\x03\x97\x03\x97\x05\x97\u1167\n\x97\x03\x98\x03\x98\x06" +
		"\x98\u116B\n\x98\r\x98\x0E\x98\u116C\x05\x98\u116F\n\x98\x03\x98\x03\x98" +
		"\x06\x98\u1173\n\x98\r\x98\x0E\x98\u1174\x03\x98\x03\x98\x05\x98\u1179" +
		"\n\x98\x03\x98\x06\x98\u117C\n\x98\r\x98\x0E\x98\u117D\x03\x98\x03\x98" +
		"\x03\x98\x03\x98\x06\x98\u1184\n\x98\r\x98\x0E\x98\u1185\x05\x98\u1188" +
		"\n\x98\x03\x98\x03\x98\x06\x98\u118C\n\x98\r\x98\x0E\x98\u118D\x03\x98" +
		"\x03\x98\x05\x98\u1192\n\x98\x03\x98\x06\x98\u1195\n\x98\r\x98\x0E\x98" +
		"\u1196\x03\x98\x03\x98\x03\x98\x03\x98\x06\x98\u119D\n\x98\r\x98\x0E\x98" +
		"\u119E\x03\x98\x03\x98\x06\x98\u11A3\n\x98\r\x98\x0E\x98\u11A4\x05\x98" +
		"\u11A7\n\x98\x03\x98\x03\x98\x06\x98\u11AB\n\x98\r\x98\x0E\x98\u11AC\x03" +
		"\x98\x03\x98\x05\x98\u11B1\n\x98\x05\x98\u11B3\n\x98\x03\x98\x06\x98\u11B6" +
		"\n\x98\r\x98\x0E\x98\u11B7\x03\x98\x03\x98\x03\x98\x03\x98\x06\x98\u11BE" +
		"\n\x98\r\x98\x0E\x98\u11BF\x05\x98\u11C2\n\x98\x03\x98\x05\x98\u11C5\n" +
		"\x98\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x06\x99\u11CC\n\x99\r\x99" +
		"\x0E\x99\u11CD\x05\x99\u11D0\n\x99\x03\x99\x03\x99\x03\x99\x06\x99\u11D5" +
		"\n\x99\r\x99\x0E\x99\u11D6\x03\x99\x03\x99\x05\x99\u11DB\n\x99\x03\x99" +
		"\x03\x99\x06\x99\u11DF\n\x99\r\x99\x0E\x99\u11E0\x05\x99\u11E3\n\x99\x03" +
		"\x99\x03\x99\x03\x99\x03\x99\x06\x99\u11E9\n\x99\r\x99\x0E\x99\u11EA\x05" +
		"\x99\u11ED\n\x99\x03\x99\x03\x99\x06\x99\u11F1\n\x99\r\x99\x0E\x99\u11F2" +
		"\x03\x99\x03\x99\x03\x99\x03\x99\x06\x99\u11F9\n\x99\r\x99\x0E\x99\u11FA" +
		"\x03\x99\x03\x99\x06\x99\u11FF\n\x99\r\x99\x0E\x99\u1200\x05\x99\u1203" +
		"\n\x99\x03\x99\x03\x99\x03\x99\x03\x99\x06\x99\u1209\n\x99\r\x99\x0E\x99" +
		"\u120A\x05\x99\u120D\n\x99\x03\x99\x03\x99\x06\x99\u1211\n\x99\r\x99\x0E" +
		"\x99\u1212\x03\x99\x03\x99\x05\x99\u1217\n\x99\x03\x99\x06\x99\u121A\n" +
		"\x99\r\x99\x0E\x99\u121B\x03\x99\x03\x99\x05\x99\u1220\n\x99\x03\x9A\x03" +
		"\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x06\x9B\u1229\n\x9B\r\x9B" +
		"\x0E\x9B\u122A\x03\x9B\x03\x9B\x05\x9B\u122F\n\x9B\x05\x9B\u1231\n\x9B" +
		"\x03\x9C\x03\x9C\x06\x9C\u1235\n\x9C\r\x9C\x0E\x9C\u1236\x03\x9C\x03\x9C" +
		"\x03\x9C\x03\x9C\x06\x9C\u123D\n\x9C\r\x9C\x0E\x9C\u123E\x05\x9C\u1241" +
		"\n\x9C\x03\x9C\x03\x9C\x03\x9C\x06\x9C\u1246\n\x9C\r\x9C\x0E\x9C\u1247" +
		"\x05\x9C\u124A\n\x9C\x03\x9C\x03\x9C\x06\x9C\u124E\n\x9C\r\x9C\x0E\x9C" +
		"\u124F\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x06\x9C\u1256\n\x9C\r\x9C\x0E\x9C" +
		"\u1257\x05\x9C\u125A\n\x9C\x03\x9C\x03\x9C\x03\x9C\x06\x9C\u125F\n\x9C" +
		"\r\x9C\x0E\x9C\u1260\x05\x9C\u1263\n\x9C\x03\x9C\x03\x9C\x06\x9C\u1267" +
		"\n\x9C\r\x9C\x0E\x9C\u1268\x03\x9C\x03\x9C\x05\x9C\u126D\n\x9C\x03\x9D" +
		"\x03\x9D\x03\x9E\x03\x9E\x05\x9E\u1273\n\x9E\x03\x9F\x03\x9F\x03\x9F\x06" +
		"\x9F\u1278\n\x9F\r\x9F\x0E\x9F\u1279\x03\x9F\x03\x9F\x06\x9F\u127E\n\x9F" +
		"\r\x9F\x0E\x9F\u127F\x03\x9F\x03\x9F\x05\x9F\u1284\n\x9F\x05\x9F\u1286" +
		"\n\x9F\x03\x9F\x03\x9F\x06\x9F\u128A\n\x9F\r\x9F\x0E\x9F\u128B\x03\x9F" +
		"\x03\x9F\x05\x9F\u1290\n\x9F\x05\x9F\u1292\n\x9F\x03\xA0\x03\xA0\x06\xA0" +
		"\u1296\n\xA0\r\xA0\x0E\xA0\u1297\x03\xA0\x03\xA0\x05\xA0\u129C\n\xA0\x03" +
		"\xA0\x03\xA0\x06\xA0\u12A0\n\xA0\r\xA0\x0E\xA0\u12A1\x03\xA0\x03\xA0\x05" +
		"\xA0\u12A6\n\xA0\x03\xA0\x03\xA0\x05\xA0\u12AA\n\xA0\x03\xA1\x03\xA1\x03" +
		"\xA2\x03\xA2\x03\xA3\x03\xA3\x06\xA3\u12B2\n\xA3\r\xA3\x0E\xA3\u12B3\x05" +
		"\xA3\u12B6\n\xA3\x03\xA3\x03\xA3\x06\xA3\u12BA\n\xA3\r\xA3\x0E\xA3\u12BB" +
		"\x03\xA3\x03\xA3\x05\xA3\u12C0\n\xA3\x03\xA4\x03\xA4\x06\xA4\u12C4\n\xA4" +
		"\r\xA4\x0E\xA4\u12C5\x05\xA4\u12C8\n\xA4\x03\xA4\x03\xA4\x06\xA4\u12CC" +
		"\n\xA4\r\xA4\x0E\xA4\u12CD\x03\xA4\x03\xA4\x05\xA4\u12D2\n\xA4\x03\xA5" +
		"\x03\xA5\x06\xA5\u12D6\n\xA5\r\xA5\x0E\xA5\u12D7\x05\xA5\u12DA\n\xA5\x03" +
		"\xA5\x03\xA5\x06\xA5\u12DE\n\xA5\r\xA5\x0E\xA5\u12DF\x03\xA5\x03\xA5\x06" +
		"\xA5\u12E4\n\xA5\r\xA5\x0E\xA5\u12E5\x03\xA5\x03\xA5\x05\xA5\u12EA\n\xA5" +
		"\x03\xA6\x03\xA6\x06\xA6\u12EE\n\xA6\r\xA6\x0E\xA6\u12EF\x03\xA6\x03\xA6" +
		"\x05\xA6\u12F4\n\xA6\x03\xA6\x06\xA6\u12F7\n\xA6\r\xA6\x0E\xA6\u12F8\x03" +
		"\xA6\x03\xA6\x05\xA6\u12FD\n\xA6\x03\xA7\x03\xA7\x06\xA7\u1301\n\xA7\r" +
		"\xA7\x0E\xA7\u1302\x03\xA7\x03\xA7\x07\xA7\u1307\n\xA7\f\xA7\x0E\xA7\u130A" +
		"\v\xA7\x03\xA7\x03\xA7\x07\xA7\u130E\n\xA7\f\xA7\x0E\xA7\u1311\v\xA7\x03" +
		"\xA7\x03\xA7\x07\xA7\u1315\n\xA7\f\xA7\x0E\xA7\u1318\v\xA7\x05\xA7\u131A" +
		"\n\xA7\x03\xA7\x03\xA7\x07\xA7\u131E\n\xA7\f\xA7\x0E\xA7\u1321\v\xA7\x05" +
		"\xA7\u1323\n\xA7\x03\xA7\x03\xA7\x07\xA7\u1327\n\xA7\f\xA7\x0E\xA7\u132A" +
		"\v\xA7\x05\xA7\u132C\n\xA7\x03\xA7\x03\xA7\x07\xA7\u1330\n\xA7\f\xA7\x0E" +
		"\xA7\u1333\v\xA7\x05\xA7\u1335\n\xA7\x03\xA7\x03\xA7\x07\xA7\u1339\n\xA7" +
		"\f\xA7\x0E\xA7\u133C\v\xA7\x05\xA7\u133E\n\xA7\x03\xA8\x03\xA8\x06\xA8" +
		"\u1342\n\xA8\r\xA8\x0E\xA8\u1343\x03\xA8\x03\xA8\x07\xA8\u1348\n\xA8\f" +
		"\xA8\x0E\xA8\u134B\v\xA8\x03\xA8\x03\xA8\x07\xA8\u134F\n\xA8\f\xA8\x0E" +
		"\xA8\u1352\v\xA8\x03\xA8\x03\xA8\x07\xA8\u1356\n\xA8\f\xA8\x0E\xA8\u1359" +
		"\v\xA8\x03\xA8\x07\xA8\u135C\n\xA8\f\xA8\x0E\xA8\u135F\v\xA8\x03\xA8\x03" +
		"\xA8\x03\xA8\x07\xA8\u1364\n\xA8\f\xA8\x0E\xA8\u1367\v\xA8\x03\xA8\x07" +
		"\xA8\u136A\n\xA8\f\xA8\x0E\xA8\u136D\v\xA8\x05\xA8\u136F\n\xA8\x03\xA8" +
		"\x07\xA8\u1372\n\xA8\f\xA8\x0E\xA8\u1375\v\xA8\x07\xA8\u1377\n\xA8\f\xA8" +
		"\x0E\xA8\u137A\v\xA8\x03\xA9\x03\xA9\x06\xA9\u137E\n\xA9\r\xA9\x0E\xA9" +
		"\u137F\x03\xA9\x03\xA9\x07\xA9\u1384\n\xA9\f\xA9\x0E\xA9\u1387\v\xA9\x03" +
		"\xA9\x03\xA9\x07\xA9\u138B\n\xA9\f\xA9\x0E\xA9\u138E\v\xA9\x03\xA9\x03" +
		"\xA9\x07\xA9\u1392\n\xA9\f\xA9\x0E\xA9\u1395\v\xA9\x07\xA9\u1397\n\xA9" +
		"\f\xA9\x0E\xA9\u139A\v\xA9\x03\xAA\x03\xAA\x06\xAA\u139E\n\xAA\r\xAA\x0E" +
		"\xAA\u139F\x03\xAA\x03\xAA\x07\xAA\u13A4\n\xAA\f\xAA\x0E\xAA\u13A7\v\xAA" +
		"\x03\xAA\x03\xAA\x07\xAA\u13AB\n\xAA\f\xAA\x0E\xAA\u13AE\v\xAA\x03\xAA" +
		"\x03\xAA\x07\xAA\u13B2\n\xAA\f\xAA\x0E\xAA\u13B5\v\xAA\x07\xAA\u13B7\n" +
		"\xAA\f\xAA\x0E\xAA\u13BA\v\xAA\x03\xAB\x03\xAB\x06\xAB\u13BE\n\xAB\r\xAB" +
		"\x0E\xAB\u13BF\x03\xAB\x03\xAB\x07\xAB\u13C4\n\xAB\f\xAB\x0E\xAB\u13C7" +
		"\v\xAB\x03\xAB\x03\xAB\x07\xAB\u13CB\n\xAB\f\xAB\x0E\xAB\u13CE\v\xAB\x03" +
		"\xAB\x03\xAB\x07\xAB\u13D2\n\xAB\f\xAB\x0E\xAB\u13D5\v\xAB\x03\xAB\x07" +
		"\xAB\u13D8\n\xAB\f\xAB\x0E\xAB\u13DB\v\xAB\x03\xAB\x07\xAB\u13DE\n\xAB" +
		"\f\xAB\x0E\xAB\u13E1\v\xAB\x07\xAB\u13E3\n\xAB\f\xAB\x0E\xAB\u13E6\v\xAB" +
		"\x03\xAC\x03\xAC\x06\xAC\u13EA\n\xAC\r\xAC\x0E\xAC\u13EB\x03\xAC\x03\xAC" +
		"\x07\xAC\u13F0\n\xAC\f\xAC\x0E\xAC\u13F3\v\xAC\x03\xAC\x03\xAC\x07\xAC" +
		"\u13F7\n\xAC\f\xAC\x0E\xAC\u13FA\v\xAC\x03\xAC\x03\xAC\x07\xAC\u13FE\n" +
		"\xAC\f\xAC\x0E\xAC\u1401\v\xAC\x07\xAC\u1403\n\xAC\f\xAC\x0E\xAC\u1406" +
		"\v\xAC\x03\xAD\x03\xAD\x06\xAD\u140A\n\xAD\r\xAD\x0E\xAD\u140B\x03\xAD" +
		"\x03\xAD\x07\xAD\u1410\n\xAD\f\xAD\x0E\xAD\u1413\v\xAD\x03\xAD\x03\xAD" +
		"\x07\xAD\u1417\n\xAD\f\xAD\x0E\xAD\u141A\v\xAD\x07\xAD\u141C\n\xAD\f\xAD" +
		"\x0E\xAD\u141F\v\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x06\xAE\u1425\n\xAE" +
		"\r\xAE\x0E\xAE\u1426\x03\xAE\x03\xAE\x07\xAE\u142B\n\xAE\f\xAE\x0E\xAE" +
		"\u142E\v\xAE\x03\xAE\x03\xAE\x07\xAE\u1432\n\xAE\f\xAE\x0E\xAE\u1435\v" +
		"\xAE\x07\xAE\u1437\n\xAE\f\xAE\x0E\xAE\u143A\v\xAE\x03\xAE\x03\xAE\x03" +
		"\xAF\x03\xAF\x06\xAF\u1440\n\xAF\r\xAF\x0E\xAF\u1441\x03\xAF\x03\xAF\x07" +
		"\xAF\u1446\n\xAF\f\xAF\x0E\xAF\u1449\v\xAF\x03\xAF\x03\xAF\x07\xAF\u144D" +
		"\n\xAF\f\xAF\x0E\xAF\u1450\v\xAF\x07\xAF\u1452\n\xAF\f\xAF\x0E\xAF\u1455" +
		"\v\xAF\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x06\xB0\u145B\n\xB0\r\xB0\x0E\xB0" +
		"\u145C\x05\xB0\u145F\n\xB0\x03\xB0\x03\xB0\x03\xB0\x06\xB0\u1464\n\xB0" +
		"\r\xB0\x0E\xB0\u1465\x05\xB0\u1468\n\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0" +
		"\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x05\xB0" +
		"\u1476\n\xB0\x03\xB1\x03\xB1\x07\xB1\u147A\n\xB1\f\xB1\x0E\xB1\u147D\v" +
		"\xB1\x03\xB1\x07\xB1\u1480\n\xB1\f\xB1\x0E\xB1\u1483\v\xB1\x03\xB2\x03" +
		"\xB2\x06\xB2\u1487\n\xB2\r\xB2\x0E\xB2\u1488\x03\xB2\x03\xB2\x05\xB2\u148D" +
		"\n\xB2\x05\xB2\u148F\n\xB2\x03\xB2\x06\xB2\u1492\n\xB2\r\xB2\x0E\xB2\u1493" +
		"\x03\xB2\x03\xB2\x06\xB2\u1498\n\xB2\r\xB2\x0E\xB2\u1499\x03\xB2\x03\xB2" +
		"\x05\xB2\u149E\n\xB2\x03\xB2\x06\xB2\u14A1\n\xB2\r\xB2\x0E\xB2\u14A2\x03" +
		"\xB2\x03\xB2\x07\xB2\u14A7\n\xB2\f\xB2\x0E\xB2\u14AA\v\xB2\x03\xB2\x03" +
		"\xB2\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x06\xB4\u14B2\n\xB4\r\xB4\x0E\xB4" +
		"\u14B3\x05\xB4\u14B6\n\xB4\x03\xB4\x03\xB4\x03\xB4\x06\xB4\u14BB\n\xB4" +
		"\r\xB4\x0E\xB4\u14BC\x05\xB4\u14BF\n\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
		"\x03\xB4\x03\xB4\x03\xB4\x06\xB4\u14C8\n\xB4\r\xB4\x0E\xB4\u14C9\x03\xB4" +
		"\x03\xB4\x05\xB4\u14CE\n\xB4\x03\xB4\x03\xB4\x06\xB4\u14D2\n\xB4\r\xB4" +
		"\x0E\xB4\u14D3\x03\xB4\x03\xB4\x05\xB4\u14D8\n\xB4\x03\xB4\x03\xB4\x06" +
		"\xB4\u14DC\n\xB4\r\xB4\x0E\xB4\u14DD\x03\xB4\x03\xB4\x06\xB4\u14E2\n\xB4" +
		"\r\xB4\x0E\xB4\u14E3\x05\xB4\u14E6\n\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
		"\x05\xB4\u14EC\n\xB4\x03\xB5\x03\xB5\x06\xB5\u14F0\n\xB5\r\xB5\x0E\xB5" +
		"\u14F1\x03\xB5\x03\xB5\x06\xB5\u14F6\n\xB5\r\xB5\x0E\xB5\u14F7\x03\xB5" +
		"\x03\xB5\x06\xB5\u14FC\n\xB5\r\xB5\x0E\xB5\u14FD\x03\xB5\x03\xB5\x05\xB5" +
		"\u1502\n\xB5\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB8\x03\xB8\x06\xB8\u150A" +
		"\n\xB8\r\xB8\x0E\xB8\u150B\x03\xB8\x03\xB8\x05\xB8\u1510\n\xB8\x03\xB8" +
		"\x03\xB8\x06\xB8\u1514\n\xB8\r\xB8\x0E\xB8\u1515\x03\xB8\x03\xB8\x05\xB8" +
		"\u151A\n\xB8\x05\xB8\u151C\n\xB8\x03\xB8\x06\xB8\u151F\n\xB8\r\xB8\x0E" +
		"\xB8\u1520\x03\xB8\x03\xB8\x06\xB8\u1525\n\xB8\r\xB8\x0E\xB8\u1526\x03" +
		"\xB8\x03\xB8\x07\xB8\u152B\n\xB8\f\xB8\x0E\xB8\u152E\v\xB8\x03\xB9\x03" +
		"\xB9\x06\xB9\u1532\n\xB9\r\xB9\x0E\xB9\u1533\x03\xB9\x03\xB9\x05\xB9\u1538" +
		"\n\xB9\x03\xBA\x03\xBA\x03\xBA\x06\xBA\u153D\n\xBA\r\xBA\x0E\xBA\u153E" +
		"\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x06\xBA\u1545\n\xBA\r\xBA\x0E\xBA\u1546" +
		"\x03\xBA\x03\xBA\x05\xBA\u154B\n\xBA\x03\xBB\x03\xBB\x06\xBB\u154F\n\xBB" +
		"\r\xBB\x0E\xBB\u1550\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03" +
		"\xBE\x03\xBE\x03\xBF\x03\xBF\x06\xBF\u155D\n\xBF\r\xBF\x0E\xBF\u155E\x03" +
		"\xBF\x03\xBF\x06\xBF\u1563\n\xBF\r\xBF\x0E\xBF\u1564\x03\xBF\x03\xBF\x07" +
		"\xBF\u1569\n\xBF\f\xBF\x0E\xBF\u156C\v\xBF\x03\xBF\x06\xBF\u156F\n\xBF" +
		"\r\xBF\x0E\xBF\u1570\x03\xBF\x03\xBF\x05\xBF\u1575\n\xBF\x03\xC0\x03\xC0" +
		"\x06\xC0\u1579\n\xC0\r\xC0\x0E\xC0\u157A\x03\xC0\x03\xC0\x06\xC0\u157F" +
		"\n\xC0\r\xC0\x0E\xC0\u1580\x05\xC0\u1583\n\xC0\x03\xC0\x03\xC0\x06\xC0" +
		"\u1587\n\xC0\r\xC0\x0E\xC0\u1588\x03\xC0\x03\xC0\x07\xC0\u158D\n\xC0\f" +
		"\xC0\x0E\xC0\u1590\v\xC0\x03\xC1\x03\xC1\x03\xC2\x03\xC2\x06\xC2\u1596" +
		"\n\xC2\r\xC2\x0E\xC2\u1597\x03\xC2\x03\xC2\x06\xC2\u159C\n\xC2\r\xC2\x0E" +
		"\xC2\u159D\x05\xC2\u15A0\n\xC2\x03\xC2\x03\xC2\x06\xC2\u15A4\n\xC2\r\xC2" +
		"\x0E\xC2\u15A5\x05\xC2\u15A8\n\xC2\x03\xC2\x03\xC2\x06\xC2\u15AC\n\xC2" +
		"\r\xC2\x0E\xC2\u15AD\x03\xC2\x03\xC2\x07\xC2\u15B2\n\xC2\f\xC2\x0E\xC2" +
		"\u15B5\v\xC2\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x06\xC4\u15BB\n\xC4\r\xC4" +
		"\x0E\xC4\u15BC\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x06\xC4\u15C3\n\xC4\r\xC4" +
		"\x0E\xC4\u15C4\x03\xC4\x03\xC4\x06\xC4\u15C9\n\xC4\r\xC4\x0E\xC4\u15CA" +
		"\x03\xC4\x03\xC4\x06\xC4\u15CF\n\xC4\r\xC4\x0E\xC4\u15D0\x03\xC4\x03\xC4" +
		"\x06\xC4\u15D5\n\xC4\r\xC4\x0E\xC4\u15D6\x03\xC4\x03\xC4\x06\xC4\u15DB" +
		"\n\xC4\r\xC4\x0E\xC4\u15DC\x03\xC4\x03\xC4\x06\xC4\u15E1\n\xC4\r\xC4\x0E" +
		"\xC4\u15E2\x05\xC4\u15E5\n\xC4\x03\xC4\x03\xC4\x05\xC4\u15E9\n\xC4\x03" +
		"\xC5\x03\xC5\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x07\xC8\u15F3" +
		"\n\xC8\f\xC8\x0E\xC8\u15F6\v\xC8\x03\xC8\x07\xC8\u15F9\n\xC8\f\xC8\x0E" +
		"\xC8\u15FC\v\xC8\x03\xC9\x03\xC9\x06\xC9\u1600\n\xC9\r\xC9\x0E\xC9\u1601" +
		"\x03\xC9\x03\xC9\x05\xC9\u1606\n\xC9\x03\xC9\x06\xC9\u1609\n\xC9\r\xC9" +
		"\x0E\xC9\u160A\x03\xC9\x03\xC9\x07\xC9\u160F\n\xC9\f\xC9\x0E\xC9\u1612" +
		"\v\xC9\x03\xC9\x03\xC9\x03\xCA\x03\xCA\x06\xCA\u1618\n\xCA\r\xCA\x0E\xCA" +
		"\u1619\x03\xCA\x03\xCA\x06\xCA\u161E\n\xCA\r\xCA\x0E\xCA\u161F\x05\xCA" +
		"\u1622\n\xCA\x03\xCA\x03\xCA\x06\xCA\u1626\n\xCA\r\xCA\x0E\xCA\u1627\x05" +
		"\xCA\u162A\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x06\xCA\u1630\n\xCA\r" +
		"\xCA\x0E\xCA\u1631\x03\xCA\x03\xCA\x06\xCA\u1636\n\xCA\r\xCA\x0E\xCA\u1637" +
		"\x03\xCA\x03\xCA\x06\xCA\u163C\n\xCA\r\xCA\x0E\xCA\u163D\x05\xCA\u1640" +
		"\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x06\xCA\u1646\n\xCA\r\xCA\x0E\xCA" +
		"\u1647\x03\xCA\x03\xCA\x06\xCA\u164C\n\xCA\r\xCA\x0E\xCA\u164D\x05\xCA" +
		"\u1650\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x06\xCA\u1656\n\xCA\r\xCA" +
		"\x0E\xCA\u1657\x03\xCA\x03\xCA\x06\xCA\u165C\n\xCA\r\xCA\x0E\xCA\u165D" +
		"\x05\xCA\u1660\n\xCA\x05\xCA\u1662\n\xCA\x03\xCA\x03\xCA\x03\xCA\x06\xCA" +
		"\u1667\n\xCA\r\xCA\x0E\xCA\u1668\x03\xCA\x03\xCA\x06\xCA\u166D\n\xCA\r" +
		"\xCA\x0E\xCA\u166E\x05\xCA\u1671\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA" +
		"\x06\xCA\u1677\n\xCA\r\xCA\x0E\xCA\u1678\x03\xCA\x03\xCA\x06\xCA\u167D" +
		"\n\xCA\r\xCA\x0E\xCA\u167E\x05\xCA\u1681\n\xCA\x03\xCA\x03\xCA\x06\xCA" +
		"\u1685\n\xCA\r\xCA\x0E\xCA\u1686\x05\xCA\u1689\n\xCA\x03\xCA\x03\xCA\x03" +
		"\xCA\x03\xCA\x06\xCA\u168F\n\xCA\r\xCA\x0E\xCA\u1690\x03\xCA\x03\xCA\x05" +
		"\xCA\u1695\n\xCA\x03\xCA\x03\xCA\x06\xCA\u1699\n\xCA\r\xCA\x0E\xCA\u169A" +
		"\x03\xCA\x03\xCA\x05\xCA\u169F\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x06" +
		"\xCA\u16A5\n\xCA\r\xCA\x0E\xCA\u16A6\x03\xCA\x03\xCA\x06\xCA\u16AB\n\xCA" +
		"\r\xCA\x0E\xCA\u16AC\x05\xCA\u16AF\n\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA" +
		"\x06\xCA\u16B5\n\xCA\r\xCA\x0E\xCA\u16B6\x03\xCA\x03\xCA\x06\xCA\u16BB" +
		"\n\xCA\r\xCA\x0E\xCA\u16BC\x05\xCA\u16BF\n\xCA\x03\xCA\x03\xCA\x03\xCA" +
		"\x05\xCA\u16C4\n\xCA\x03\xCB\x03\xCB\x06\xCB\u16C8\n\xCB\r\xCB\x0E\xCB" +
		"\u16C9\x03\xCB\x03\xCB\x05\xCB\u16CE\n\xCB\x03\xCB\x06\xCB\u16D1\n\xCB" +
		"\r\xCB\x0E\xCB\u16D2\x05\xCB\u16D5\n\xCB\x03\xCB\x03\xCB\x06\xCB\u16D9" +
		"\n\xCB\r\xCB\x0E\xCB\u16DA\x03\xCB\x03\xCB\x06\xCB\u16DF\n\xCB\r\xCB\x0E" +
		"\xCB\u16E0\x03\xCB\x03\xCB\x05\xCB\u16E5\n\xCB\x05\xCB\u16E7\n\xCB\x03" +
		"\xCC\x03\xCC\x06\xCC\u16EB\n\xCC\r\xCC\x0E\xCC\u16EC\x03\xCC\x03\xCC\x06" +
		"\xCC\u16F1\n\xCC\r\xCC\x0E\xCC\u16F2\x03\xCC\x03\xCC\x07\xCC\u16F7\n\xCC" +
		"\f\xCC\x0E\xCC\u16FA\v\xCC\x03\xCC\x06\xCC\u16FD\n\xCC\r\xCC\x0E\xCC\u16FE" +
		"\x03\xCC\x03\xCC\x05\xCC\u1703\n\xCC\x03\xCC\x06\xCC\u1706\n\xCC\r\xCC" +
		"\x0E\xCC\u1707\x03\xCC\x03\xCC\x07\xCC\u170C\n\xCC\f\xCC\x0E\xCC\u170F" +
		"\v\xCC\x06\xCC\u1711\n\xCC\r\xCC\x0E\xCC\u1712\x03\xCC\x07\xCC\u1716\n" +
		"\xCC\f\xCC\x0E\xCC\u1719\v\xCC\x03\xCC\x03\xCC\x06\xCC\u171D\n\xCC\r\xCC" +
		"\x0E\xCC\u171E\x03\xCC\x03\xCC\x06\xCC\u1723\n\xCC\r\xCC\x0E\xCC\u1724" +
		"\x05\xCC\u1727\n\xCC\x03\xCC\x03\xCC\x05\xCC\u172B\n\xCC\x03\xCD\x03\xCD" +
		"\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x03\xD1\x03\xD1\x03\xD2" +
		"\x03\xD2\x06\xD2\u1739\n\xD2\r\xD2\x0E\xD2\u173A\x03\xD2\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x06\xD2\u1742\n\xD2\r\xD2\x0E\xD2\u1743\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x03\xD2\x06\xD2\u174B\n\xD2\r\xD2\x0E\xD2\u174C\x03\xD2" +
		"\x03\xD2\x03\xD2\x05\xD2\u1752\n\xD2\x03\xD2\x06\xD2\u1755\n\xD2\r\xD2" +
		"\x0E\xD2\u1756\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x06\xD2" +
		"\u175F\n\xD2\r\xD2\x0E\xD2\u1760\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u1766" +
		"\n\xD2\x03\xD2\x06\xD2\u1769\n\xD2\r\xD2\x0E\xD2\u176A\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x06\xD2\u1771\n\xD2\r\xD2\x0E\xD2\u1772\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x03\xD2\x06\xD2\u177A\n\xD2\r\xD2\x0E\xD2\u177B\x03\xD2" +
		"\x03\xD2\x03\xD2\x05\xD2\u1781\n\xD2\x03\xD3\x03\xD3\x03\xD4\x03\xD4\x03" +
		"\xD4\x06\xD4\u1788\n\xD4\r\xD4\x0E\xD4\u1789\x03\xD4\x03\xD4\x03\xD4\x03" +
		"\xD4\x06\xD4\u1790\n\xD4\r\xD4\x0E\xD4\u1791\x03\xD4\x03\xD4\x05\xD4\u1796" +
		"\n\xD4\x03\xD5\x03\xD5\x06\xD5\u179A\n\xD5\r\xD5\x0E\xD5\u179B\x03\xD5" +
		"\x03\xD5\x06\xD5\u17A0\n\xD5\r\xD5\x0E\xD5\u17A1\x05\xD5\u17A4\n\xD5\x03" +
		"\xD5\x03\xD5\x06\xD5\u17A8\n\xD5\r\xD5\x0E\xD5\u17A9\x03\xD5\x03\xD5\x05" +
		"\xD5\u17AE\n\xD5\x03\xD5\x03\xD5\x06\xD5\u17B2\n\xD5\r\xD5\x0E\xD5\u17B3" +
		"\x03\xD5\x03\xD5\x05\xD5\u17B8\n\xD5\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x06" +
		"\xD7\u17BE\n\xD7\r\xD7\x0E\xD7\u17BF\x05\xD7\u17C2\n\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x06\xD7\u17C7\n\xD7\r\xD7\x0E\xD7\u17C8\x03\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x06\xD7\u17CF\n\xD7\r\xD7\x0E\xD7\u17D0\x03\xD7\x03\xD7\x05\xD7" +
		"\u17D5\n\xD7\x03\xD7\x03\xD7\x06\xD7\u17D9\n\xD7\r\xD7\x0E\xD7\u17DA\x03" +
		"\xD7\x03\xD7\x05\xD7\u17DF\n\xD7\x05\xD7\u17E1\n\xD7\x03\xD7\x06\xD7\u17E4" +
		"\n\xD7\r\xD7\x0E\xD7\u17E5\x03\xD7\x03\xD7\x07\xD7\u17EA\n\xD7\f\xD7\x0E" +
		"\xD7\u17ED\v\xD7\x03\xD7\x07\xD7\u17F0\n\xD7\f\xD7\x0E\xD7\u17F3\v\xD7" +
		"\x03\xD7\x03\xD7\x07\xD7\u17F7\n\xD7\f\xD7\x0E\xD7\u17FA\v\xD7\x03\xD7" +
		"\x07\xD7\u17FD\n\xD7\f\xD7\x0E\xD7\u1800\v\xD7\x05\xD7\u1802\n\xD7\x03" +
		"\xD7\x03\xD7\x06\xD7\u1806\n\xD7\r\xD7\x0E\xD7\u1807\x03\xD7\x03\xD7\x06" +
		"\xD7\u180C\n\xD7\r\xD7\x0E\xD7\u180D\x03\xD7\x03\xD7\x06\xD7\u1812\n\xD7" +
		"\r\xD7\x0E\xD7\u1813\x05\xD7\u1816\n\xD7\x03\xD7\x03\xD7\x06\xD7\u181A" +
		"\n\xD7\r\xD7\x0E\xD7\u181B\x03\xD7\x03\xD7\x06\xD7\u1820\n\xD7\r\xD7\x0E" +
		"\xD7\u1821\x05\xD7\u1824\n\xD7\x05\xD7\u1826\n\xD7\x03\xD7\x03\xD7\x06" +
		"\xD7\u182A\n\xD7\r\xD7\x0E\xD7\u182B\x03\xD7\x03\xD7\x05\xD7\u1830\n\xD7" +
		"\x03\xD7\x06\xD7\u1833\n\xD7\r\xD7\x0E\xD7\u1834\x03\xD7\x03\xD7\x06\xD7" +
		"\u1839\n\xD7\r\xD7\x0E\xD7\u183A\x03\xD7\x03\xD7\x05\xD7\u183F\n\xD7\x03" +
		"\xD7\x06\xD7\u1842\n\xD7\r\xD7\x0E\xD7\u1843\x03\xD7\x03\xD7\x06\xD7\u1848" +
		"\n\xD7\r\xD7\x0E\xD7\u1849\x03\xD7\x03\xD7\x06\xD7\u184E\n\xD7\r\xD7\x0E" +
		"\xD7\u184F\x03\xD7\x03\xD7\x05\xD7\u1854\n\xD7\x03\xD7\x06\xD7\u1857\n" +
		"\xD7\r\xD7\x0E\xD7\u1858\x03\xD7\x03\xD7\x06\xD7\u185D\n\xD7\r\xD7\x0E" +
		"\xD7\u185E\x03\xD7\x03\xD7\x06\xD7\u1863\n\xD7\r\xD7\x0E\xD7\u1864\x03" +
		"\xD7\x03\xD7\x05\xD7\u1869\n\xD7\x03\xD7\x06\xD7\u186C\n\xD7\r\xD7\x0E" +
		"\xD7\u186D\x03\xD7\x03\xD7\x06\xD7\u1872\n\xD7\r\xD7\x0E\xD7\u1873\x03" +
		"\xD7\x03\xD7\x05\xD7\u1878\n\xD7\x05\xD7\u187A\n\xD7\x03\xD8\x03\xD8\x03" +
		"\xD9\x03\xD9\x03\xDA\x03\xDA\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x03\xDD\x03" +
		"\xDD\x03\xDE\x03\xDE\x03\xDF\x03\xDF\x06\xDF\u188C\n\xDF\r\xDF\x0E\xDF" +
		"\u188D\x03\xDF\x03\xDF\x05\xDF\u1892\n\xDF\x03\xDF\x06\xDF\u1895\n\xDF" +
		"\r\xDF\x0E\xDF\u1896\x05\xDF\u1899\n\xDF\x03\xDF\x03\xDF\x03\xE0\x03\xE0" +
		"\x03\xE0\x06\xE0\u18A0\n\xE0\r\xE0\x0E\xE0\u18A1\x03\xE0\x03\xE0\x05\xE0" +
		"\u18A6\n\xE0\x03\xE0\x03\xE0\x06\xE0\u18AA\n\xE0\r\xE0\x0E\xE0\u18AB\x03" +
		"\xE0\x03\xE0\x05\xE0\u18B0\n\xE0\x03\xE0\x03\xE0\x06\xE0\u18B4\n\xE0\r" +
		"\xE0\x0E\xE0\u18B5\x03\xE0\x03\xE0\x05\xE0\u18BA\n\xE0\x03\xE0\x03\xE0" +
		"\x06\xE0\u18BE\n\xE0\r\xE0\x0E\xE0\u18BF\x03\xE0\x03\xE0\x05\xE0\u18C4" +
		"\n\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
		"\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
		"\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x05\xE0\u18DC\n\xE0\x03\xE1\x03" +
		"\xE1\x06\xE1\u18E0\n\xE1\r\xE1\x0E\xE1\u18E1\x03\xE1\x03\xE1\x06\xE1\u18E6" +
		"\n\xE1\r\xE1\x0E\xE1\u18E7\x05\xE1\u18EA\n\xE1\x03\xE1\x03\xE1\x03\xE2" +
		"\x06\xE2\u18EF\n\xE2\r\xE2\x0E\xE2\u18F0\x03\xE3\x03\xE3\x03\xE4\x03\xE4" +
		"\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x05\xE6\u18FB\n\xE6\x03\xE7\x03\xE7\x06" +
		"\xE7\u18FF\n\xE7\r\xE7\x0E\xE7\u1900\x03\xE7\x03\xE7\x05\xE7\u1905\n\xE7" +
		"\x03\xE7\x03\xE7\x06\xE7\u1909\n\xE7\r\xE7\x0E\xE7\u190A\x03\xE7\x03\xE7" +
		"\x05\xE7\u190F\n\xE7\x05\xE7\u1911\n\xE7\x03\xE7\x06\xE7\u1914\n\xE7\r" +
		"\xE7\x0E\xE7\u1915\x03\xE7\x03\xE7\x07\xE7\u191A\n\xE7\f\xE7\x0E\xE7\u191D" +
		"\v\xE7\x03\xE7\x07\xE7\u1920\n\xE7\f\xE7\x0E\xE7\u1923\v\xE7\x03\xE8\x03" +
		"\xE8\x03\xE9\x03\xE9\x06\xE9\u1929\n\xE9\r\xE9\x0E\xE9\u192A\x03\xE9\x03" +
		"\xE9\x06\xE9\u192F\n\xE9\r\xE9\x0E\xE9\u1930\x05\xE9\u1933\n\xE9\x03\xE9" +
		"\x03\xE9\x06\xE9\u1937\n\xE9\r\xE9\x0E\xE9\u1938\x03\xE9\x03\xE9\x05\xE9" +
		"\u193D\n\xE9\x03\xE9\x06\xE9\u1940\n\xE9\r\xE9\x0E\xE9\u1941\x03\xE9\x03" +
		"\xE9\x06\xE9\u1946\n\xE9\r\xE9\x0E\xE9\u1947\x05\xE9\u194A\n\xE9\x03\xE9" +
		"\x03\xE9\x06\xE9\u194E\n\xE9\r\xE9\x0E\xE9\u194F\x03\xE9\x03\xE9\x06\xE9" +
		"\u1954\n\xE9\r\xE9\x0E\xE9\u1955\x05\xE9\u1958\n\xE9\x03\xE9\x03\xE9\x05" +
		"\xE9\u195C\n\xE9\x03\xE9\x06\xE9\u195F\n\xE9\r\xE9\x0E\xE9\u1960\x03\xE9" +
		"\x03\xE9\x06\xE9\u1965\n\xE9\r\xE9\x0E\xE9\u1966\x05\xE9\u1969\n\xE9\x03" +
		"\xE9\x03\xE9\x06\xE9\u196D\n\xE9\r\xE9\x0E\xE9\u196E\x05\xE9\u1971\n\xE9" +
		"\x03\xE9\x03\xE9\x06\xE9\u1975\n\xE9\r\xE9\x0E\xE9\u1976\x03\xE9\x03\xE9" +
		"\x05\xE9\u197B\n\xE9\x03\xE9\x06\xE9\u197E\n\xE9\r\xE9\x0E\xE9\u197F\x03" +
		"\xE9\x03\xE9\x06\xE9\u1984\n\xE9\r\xE9\x0E\xE9\u1985\x05\xE9\u1988\n\xE9" +
		"\x03\xE9\x03\xE9\x06\xE9\u198C\n\xE9\r\xE9\x0E\xE9\u198D\x05\xE9\u1990" +
		"\n\xE9\x03\xE9\x03\xE9\x06\xE9\u1994\n\xE9\r\xE9\x0E\xE9\u1995\x03\xE9" +
		"\x03\xE9\x05\xE9\u199A\n\xE9\x03\xEA\x03\xEA\x05\xEA\u199E\n\xEA\x03\xEB" +
		"\x03\xEB\x05\xEB\u19A2\n\xEB\x03\xEC\x03\xEC\x05\xEC\u19A6\n\xEC\x03\xED" +
		"\x03\xED\x05\xED\u19AA\n\xED\x03\xEE\x03\xEE\x06\xEE\u19AE\n\xEE\r\xEE" +
		"\x0E\xEE\u19AF\x03\xEE\x03\xEE\x06\xEE\u19B4\n\xEE\r\xEE\x0E\xEE\u19B5" +
		"\x03\xEE\x03\xEE\x05\xEE\u19BA\n\xEE\x03\xEE\x03\xEE\x06\xEE\u19BE\n\xEE" +
		"\r\xEE";
	private static readonly _serializedATNSegment3: string =
		"\x0E\xEE\u19BF\x03\xEE\x03\xEE\x05\xEE\u19C4\n\xEE\x05\xEE\u19C6\n\xEE" +
		"\x03\xEE\x03\xEE\x06\xEE\u19CA\n\xEE\r\xEE\x0E\xEE\u19CB\x03\xEE\x03\xEE" +
		"\x07\xEE\u19D0\n\xEE\f\xEE\x0E\xEE\u19D3\v\xEE\x03\xEF\x03\xEF\x03\xF0" +
		"\x03\xF0\x06\xF0\u19D9\n\xF0\r\xF0\x0E\xF0\u19DA\x03\xF0\x03\xF0\x06\xF0" +
		"\u19DF\n\xF0\r\xF0\x0E\xF0\u19E0\x03\xF0\x03\xF0\x06\xF0\u19E5\n\xF0\r" +
		"\xF0\x0E\xF0\u19E6\x03\xF0\x03\xF0\x06\xF0\u19EB\n\xF0\r\xF0\x0E\xF0\u19EC" +
		"\x05\xF0\u19EF\n\xF0\x03\xF0\x03\xF0\x03\xF1\x03\xF1\x05\xF1\u19F5\n\xF1" +
		"\x03\xF2\x03\xF2\x06\xF2\u19F9\n\xF2\r\xF2\x0E\xF2\u19FA\x03\xF2\x03\xF2" +
		"\x06\xF2\u19FF\n\xF2\r\xF2\x0E\xF2\u1A00\x03\xF2\x03\xF2\x05\xF2\u1A05" +
		"\n\xF2\x03\xF2\x03\xF2\x06\xF2\u1A09\n\xF2\r\xF2\x0E\xF2\u1A0A\x03\xF2" +
		"\x03\xF2\x05\xF2\u1A0F\n\xF2\x05\xF2\u1A11\n\xF2\x03\xF2\x06\xF2\u1A14" +
		"\n\xF2\r\xF2\x0E\xF2\u1A15\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x06\xF3\u1A1C" +
		"\n\xF3\r\xF3\x0E\xF3\u1A1D\x03\xF3\x03\xF3\x03\xF4\x03\xF4\x06\xF4\u1A24" +
		"\n\xF4\r\xF4\x0E\xF4\u1A25\x05\xF4\u1A28\n\xF4\x03\xF4\x03\xF4\x06\xF4" +
		"\u1A2C\n\xF4\r\xF4\x0E\xF4\u1A2D\x03\xF4\x03\xF4\x06\xF4\u1A32\n\xF4\r" +
		"\xF4\x0E\xF4\u1A33\x05\xF4\u1A36\n\xF4\x03\xF4\x03\xF4\x07\xF4\u1A3A\n" +
		"\xF4\f\xF4\x0E\xF4\u1A3D\v\xF4\x03\xF4\x03\xF4\x07\xF4\u1A41\n\xF4\f\xF4" +
		"\x0E\xF4\u1A44\v\xF4\x05\xF4\u1A46\n\xF4\x03\xF4\x03\xF4\x06\xF4\u1A4A" +
		"\n\xF4\r\xF4\x0E\xF4\u1A4B\x05\xF4\u1A4E\n\xF4\x03\xF4\x03\xF4\x06\xF4" +
		"\u1A52\n\xF4\r\xF4\x0E\xF4\u1A53\x03\xF4\x03\xF4\x06\xF4\u1A58\n\xF4\r" +
		"\xF4\x0E\xF4\u1A59\x05\xF4\u1A5C\n\xF4\x03\xF4\x03\xF4\x07\xF4\u1A60\n" +
		"\xF4\f\xF4\x0E\xF4\u1A63\v\xF4\x05\xF4\u1A65\n\xF4\x03\xF4\x03\xF4\x06" +
		"\xF4\u1A69\n\xF4\r\xF4\x0E\xF4\u1A6A\x05\xF4\u1A6D\n\xF4\x03\xF4\x05\xF4" +
		"\u1A70\n\xF4\x03\xF4\x03\xF4\x06\xF4\u1A74\n\xF4\r\xF4\x0E\xF4\u1A75\x03" +
		"\xF4\x03\xF4\x05\xF4\u1A7A\n\xF4\x03\xF4\x07\xF4\u1A7D\n\xF4\f\xF4\x0E" +
		"\xF4\u1A80\v\xF4\x03\xF4\x03\xF4\x07\xF4\u1A84\n\xF4\f\xF4\x0E\xF4\u1A87" +
		"\v\xF4\x05\xF4\u1A89\n\xF4\x03\xF4\x03\xF4\x06\xF4\u1A8D\n\xF4\r\xF4\x0E" +
		"\xF4\u1A8E\x03\xF4\x03\xF4\x06\xF4\u1A93\n\xF4\r\xF4\x0E\xF4\u1A94\x05" +
		"\xF4\u1A97\n\xF4\x03\xF4\x03\xF4\x05\xF4\u1A9B\n\xF4\x05\xF4\u1A9D\n\xF4" +
		"\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x03\xF8\x03\xF8\x06\xF8" +
		"\u1AA7\n\xF8\r\xF8\x0E\xF8\u1AA8\x03\xF8\x03\xF8\x05\xF8\u1AAD\n\xF8\x05" +
		"\xF8\u1AAF\n\xF8\x03\xF8\x06\xF8\u1AB2\n\xF8\r\xF8\x0E\xF8\u1AB3\x03\xF8" +
		"\x03\xF8\x07\xF8\u1AB8\n\xF8\f\xF8\x0E\xF8\u1ABB\v\xF8\x03\xF8\x03\xF8" +
		"\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x06\xFA\u1AC3\n\xFA\r\xFA\x0E\xFA\u1AC4" +
		"\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1ACB\n\xFA\r\xFA\x0E\xFA\u1ACC" +
		"\x03\xFA\x03\xFA\x06\xFA\u1AD1\n\xFA\r\xFA\x0E\xFA\u1AD2\x05\xFA\u1AD5" +
		"\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1ADB\n\xFA\r\xFA\x0E\xFA" +
		"\u1ADC\x03\xFA\x03\xFA\x06\xFA\u1AE1\n\xFA\r\xFA\x0E\xFA\u1AE2\x05\xFA" +
		"\u1AE5\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06" +
		"\xFA\u1AEE\n\xFA\r\xFA\x0E\xFA\u1AEF\x03\xFA\x03\xFA\x06\xFA\u1AF4\n\xFA" +
		"\r\xFA\x0E\xFA\u1AF5\x05\xFA\u1AF8\n\xFA\x05\xFA\u1AFA\n\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1B03\n\xFA\r\xFA" +
		"\x0E\xFA\u1B04\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
		"\x03\xFA\x06\xFA\u1B0F\n\xFA\r\xFA\x0E\xFA\u1B10\x03\xFA\x03\xFA\x06\xFA" +
		"\u1B15\n\xFA\r\xFA\x0E\xFA\u1B16\x05\xFA\u1B19\n\xFA\x03\xFA\x03\xFA\x06" +
		"\xFA\u1B1D\n\xFA\r\xFA\x0E\xFA\u1B1E\x05\xFA\u1B21\n\xFA\x03\xFA\x03\xFA" +
		"\x06\xFA\u1B25\n\xFA\r\xFA\x0E\xFA\u1B26\x05\xFA\u1B29\n\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x03\xFA\x06\xFA\u1B2F\n\xFA\r\xFA\x0E\xFA\u1B30\x03\xFA\x03" +
		"\xFA\x06\xFA\u1B35\n\xFA\r\xFA\x0E\xFA\u1B36\x05\xFA\u1B39\n\xFA\x03\xFA" +
		"\x03\xFA\x06\xFA\u1B3D\n\xFA\r\xFA\x0E\xFA\u1B3E\x05\xFA\u1B41\n\xFA\x03" +
		"\xFA\x03\xFA\x06\xFA\u1B45\n\xFA\r\xFA\x0E\xFA\u1B46\x05\xFA\u1B49\n\xFA" +
		"\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1B4F\n\xFA\r\xFA\x0E\xFA\u1B50" +
		"\x03\xFA\x03\xFA\x06\xFA\u1B55\n\xFA\r\xFA\x0E\xFA\u1B56\x05\xFA\u1B59" +
		"\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1B5F\n\xFA\r\xFA\x0E\xFA" +
		"\u1B60\x03\xFA\x03\xFA\x06\xFA\u1B65\n\xFA\r\xFA\x0E\xFA\u1B66\x05\xFA" +
		"\u1B69\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1B6F\n\xFA\r\xFA" +
		"\x0E\xFA\u1B70\x03\xFA\x03\xFA\x05\xFA\u1B75\n\xFA\x03\xFA\x03\xFA\x06" +
		"\xFA\u1B79\n\xFA\r\xFA\x0E\xFA\u1B7A\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1B80" +
		"\n\xFA\r\xFA\x0E\xFA\u1B81\x03\xFA\x03\xFA\x05\xFA\u1B86\n\xFA\x03\xFA" +
		"\x05\xFA\u1B89\n\xFA\x05\xFA\u1B8B\n\xFA\x03\xFB\x03\xFB\x06\xFB\u1B8F" +
		"\n\xFB\r\xFB\x0E\xFB\u1B90\x03\xFB\x03\xFB\x03\xFC\x03\xFC\x06\xFC\u1B97" +
		"\n\xFC\r\xFC\x0E\xFC\u1B98\x03\xFC\x03\xFC\x05\xFC\u1B9D\n\xFC\x03\xFD" +
		"\x03\xFD\x06\xFD\u1BA1\n\xFD\r\xFD\x0E\xFD\u1BA2\x03\xFD\x03\xFD\x03\xFE" +
		"\x03\xFE\x03\xFF\x03\xFF\x05\xFF\u1BAB\n\xFF\x03\u0100\x03\u0100\x03\u0101" +
		"\x03\u0101\x06\u0101\u1BB1\n\u0101\r\u0101\x0E\u0101\u1BB2\x03\u0101\x03" +
		"\u0101\x07\u0101\u1BB7\n\u0101\f\u0101\x0E\u0101\u1BBA\v\u0101\x03\u0101" +
		"\x03\u0101\x07\u0101\u1BBE\n\u0101\f\u0101\x0E\u0101\u1BC1\v\u0101\x03" +
		"\u0101\x07\u0101\u1BC4\n\u0101\f\u0101\x0E\u0101\u1BC7\v\u0101\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102" +
		"\x05\u0102\u1BD1\n\u0102\x03\u0103\x03\u0103\x07\u0103\u1BD5\n\u0103\f" +
		"\u0103\x0E\u0103\u1BD8\v\u0103\x03\u0103\x03\u0103\x07\u0103\u1BDC\n\u0103" +
		"\f\u0103\x0E\u0103\u1BDF\v\u0103\x03\u0103\x03\u0103\x07\u0103\u1BE3\n" +
		"\u0103\f\u0103\x0E\u0103\u1BE6\v\u0103\x03\u0103\x05\u0103\u1BE9\n\u0103" +
		"\x03\u0103\x07\u0103\u1BEC\n\u0103\f\u0103\x0E\u0103\u1BEF\v\u0103\x03" +
		"\u0103\x05\u0103\u1BF2\n\u0103\x03\u0103\x07\u0103\u1BF5\n\u0103\f\u0103" +
		"\x0E\u0103\u1BF8\v\u0103\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0105" +
		"\x03\u0105\x06\u0105\u1C00\n\u0105\r\u0105\x0E\u0105\u1C01\x05\u0105\u1C04" +
		"\n\u0105\x03\u0105\x03\u0105\x06\u0105\u1C08\n\u0105\r\u0105\x0E\u0105" +
		"\u1C09\x03\u0105\x03\u0105\x05\u0105\u1C0E\n\u0105\x03\u0106\x03\u0106" +
		"\x06\u0106\u1C12\n\u0106\r\u0106\x0E\u0106\u1C13\x05\u0106\u1C16\n\u0106" +
		"\x03\u0106\x03\u0106\x06\u0106\u1C1A\n\u0106\r\u0106\x0E\u0106\u1C1B\x03" +
		"\u0106\x03\u0106\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x07\u0108\u1C24" +
		"\n\u0108\f\u0108\x0E\u0108\u1C27\v\u0108\x03\u0108\x03\u0108\x05\u0108" +
		"\u1C2B\n\u0108\x03\u0109\x03\u0109\x07\u0109\u1C2F\n\u0109\f\u0109\x0E" +
		"\u0109\u1C32\v\u0109\x03\u0109\x03\u0109\x07\u0109\u1C36\n\u0109\f\u0109" +
		"\x0E\u0109\u1C39\v\u0109\x03\u0109\x03\u0109\x07\u0109\u1C3D\n\u0109\f" +
		"\u0109\x0E\u0109\u1C40\v\u0109\x03\u010A\x03\u010A\x07\u010A\u1C44\n\u010A" +
		"\f\u010A\x0E\u010A\u1C47\v\u010A\x03\u010A\x03\u010A\x07\u010A\u1C4B\n" +
		"\u010A\f\u010A\x0E\u010A\u1C4E\v\u010A\x03\u010A\x03\u010A\x07\u010A\u1C52" +
		"\n\u010A\f\u010A\x0E\u010A\u1C55\v\u010A\x03\u010B\x03\u010B\x07\u010B" +
		"\u1C59\n\u010B\f\u010B\x0E\u010B\u1C5C\v\u010B\x03\u010B\x03\u010B\x07" +
		"\u010B\u1C60\n\u010B\f\u010B\x0E\u010B\u1C63\v\u010B\x03\u010B\x03\u010B" +
		"\x07\u010B\u1C67\n\u010B\f\u010B\x0E\u010B\u1C6A\v\u010B\x03\u010C\x03" +
		"\u010C\x07\u010C\u1C6E\n\u010C\f\u010C\x0E\u010C\u1C71\v\u010C\x03\u010C" +
		"\x03\u010C\x07\u010C\u1C75\n\u010C\f\u010C\x0E\u010C\u1C78\v\u010C\x03" +
		"\u010C\x03\u010C\x07\u010C\u1C7C\n\u010C\f\u010C\x0E\u010C\u1C7F\v\u010C" +
		"\x03\u010D\x03\u010D\x07\u010D\u1C83\n\u010D\f\u010D\x0E\u010D\u1C86\v" +
		"\u010D\x03\u010D\x03\u010D\x07\u010D\u1C8A\n\u010D\f\u010D\x0E\u010D\u1C8D" +
		"\v\u010D\x03\u010D\x03\u010D\x07\u010D\u1C91\n\u010D\f\u010D\x0E\u010D" +
		"\u1C94\v\u010D\x03\u010E\x03\u010E\x07\u010E\u1C98\n\u010E\f\u010E\x0E" +
		"\u010E\u1C9B\v\u010E\x03\u010E\x03\u010E\x07\u010E\u1C9F\n\u010E\f\u010E" +
		"\x0E\u010E\u1CA2\v\u010E\x03\u010E\x05\u010E\u1CA5\n\u010E\x03\u010E\x07" +
		"\u010E\u1CA8\n\u010E\f\u010E\x0E\u010E\u1CAB\v\u010E\x03\u010E\x05\u010E" +
		"\u1CAE\n\u010E\x03\u010F\x03\u010F\x06\u010F\u1CB2\n\u010F\r\u010F\x0E" +
		"\u010F\u1CB3\x03\u010F\x03\u010F\x06\u010F\u1CB8\n\u010F\r\u010F\x0E\u010F" +
		"\u1CB9\x05\u010F\u1CBC\n\u010F\x03\u010F\x03\u010F\x07\u010F\u1CC0\n\u010F" +
		"\f\u010F\x0E\u010F\u1CC3\v\u010F\x03\u010F\x03\u010F\x03\u0110\x03\u0110" +
		"\x06\u0110\u1CC9\n\u0110\r\u0110\x0E\u0110\u1CCA\x03\u0110\x03\u0110\x07" +
		"\u0110\u1CCF\n\u0110\f\u0110\x0E\u0110\u1CD2\v\u0110\x03\u0110\x03\u0110" +
		"\x07\u0110\u1CD6\n\u0110\f\u0110\x0E\u0110\u1CD9\v\u0110\x03\u0110\x05" +
		"\u0110\u1CDC\n\u0110\x03\u0110\x05\u0110\u1CDF\n\u0110\x03\u0111\x03\u0111" +
		"\x06\u0111\u1CE3\n\u0111\r\u0111\x0E\u0111\u1CE4\x03\u0111\x03\u0111\x07" +
		"\u0111\u1CE9\n\u0111\f\u0111\x0E\u0111\u1CEC\v\u0111\x03\u0111\x03\u0111" +
		"\x07\u0111\u1CF0\n\u0111\f\u0111\x0E\u0111\u1CF3\v\u0111\x03\u0111\x05" +
		"\u0111\u1CF6\n\u0111\x03\u0111\x07\u0111\u1CF9\n\u0111\f\u0111\x0E\u0111" +
		"\u1CFC\v\u0111\x03\u0111\x05\u0111\u1CFF\n\u0111\x03\u0111\x07\u0111\u1D02" +
		"\n\u0111\f\u0111\x0E\u0111\u1D05\v\u0111\x03\u0111\x05\u0111\u1D08\n\u0111" +
		"\x03\u0111\x07\u0111\u1D0B\n\u0111\f\u0111\x0E\u0111\u1D0E\v\u0111\x03" +
		"\u0112\x03\u0112\x06\u0112\u1D12\n\u0112\r\u0112\x0E\u0112\u1D13\x03\u0112" +
		"\x03\u0112\x07\u0112\u1D18\n\u0112\f\u0112\x0E\u0112\u1D1B\v\u0112\x03" +
		"\u0112\x03\u0112\x07\u0112\u1D1F\n\u0112\f\u0112\x0E\u0112\u1D22\v\u0112" +
		"\x03\u0112\x05\u0112\u1D25\n\u0112\x03\u0112\x05\u0112\u1D28\n\u0112\x03" +
		"\u0113\x03\u0113\x07\u0113\u1D2C\n\u0113\f\u0113\x0E\u0113\u1D2F\v\u0113" +
		"\x03\u0113\x03\u0113\x07\u0113\u1D33\n\u0113\f\u0113\x0E\u0113\u1D36\v" +
		"\u0113\x03\u0113\x03\u0113\x06\u0113\u1D3A\n\u0113\r\u0113\x0E\u0113\u1D3B" +
		"\x03\u0113\x03\u0113\x05\u0113\u1D40\n\u0113\x03\u0113\x07\u0113\u1D43" +
		"\n\u0113\f\u0113\x0E\u0113\u1D46\v\u0113\x03\u0113\x03\u0113\x05\u0113" +
		"\u1D4A\n\u0113\x03\u0114\x03\u0114\x03\u0115\x03\u0115\x06\u0115\u1D50" +
		"\n\u0115\r\u0115\x0E\u0115\u1D51\x05\u0115\u1D54\n\u0115\x03\u0115\x03" +
		"\u0115\x06\u0115\u1D58\n\u0115\r\u0115\x0E\u0115\u1D59\x03\u0115\x03\u0115" +
		"\x03\u0116\x03\u0116\x07\u0116\u1D60\n\u0116\f\u0116\x0E\u0116\u1D63\v" +
		"\u0116\x03\u0116\x03\u0116\x07\u0116\u1D67\n\u0116\f\u0116\x0E\u0116\u1D6A" +
		"\v\u0116\x03\u0116\x03\u0116\x06\u0116\u1D6E\n\u0116\r\u0116\x0E\u0116" +
		"\u1D6F\x03\u0116\x03\u0116\x05\u0116\u1D74\n\u0116\x03\u0116\x06\u0116" +
		"\u1D77\n\u0116\r\u0116\x0E\u0116\u1D78\x03\u0116\x03\u0116\x05\u0116\u1D7D" +
		"\n\u0116\x03\u0116\x06\u0116\u1D80\n\u0116\r\u0116\x0E\u0116\u1D81\x03" +
		"\u0116\x03\u0116\x05\u0116\u1D86\n\u0116\x03\u0116\x07\u0116\u1D89\n\u0116" +
		"\f\u0116\x0E\u0116\u1D8C\v\u0116\x03\u0116\x03\u0116\x05\u0116\u1D90\n" +
		"\u0116\x03\u0117\x03\u0117\x06\u0117\u1D94\n\u0117\r\u0117\x0E\u0117\u1D95" +
		"\x03\u0117\x03\u0117\x05\u0117\u1D9A\n\u0117\x03\u0117\x06\u0117\u1D9D" +
		"\n\u0117\r\u0117\x0E\u0117\u1D9E\x03\u0117\x03\u0117\x06\u0117\u1DA3\n" +
		"\u0117\r\u0117\x0E\u0117\u1DA4\x03\u0117\x03\u0117\x03\u0118\x03\u0118" +
		"\x03\u0119\x03\u0119\x03\u011A\x03\u011A\x06\u011A\u1DAF\n\u011A\r\u011A" +
		"\x0E\u011A\u1DB0\x05\u011A\u1DB3\n\u011A\x03\u011A\x03\u011A\x06\u011A" +
		"\u1DB7\n\u011A\r\u011A\x0E\u011A\u1DB8\x05\u011A\u1DBB\n\u011A\x03\u011A" +
		"\x03\u011A\x06\u011A\u1DBF\n\u011A\r\u011A\x0E\u011A\u1DC0\x03\u011A\x03" +
		"\u011A\x05\u011A\u1DC5\n\u011A\x03\u011A\x06\u011A\u1DC8\n\u011A\r\u011A" +
		"\x0E\u011A\u1DC9\x03\u011A\x03\u011A\x03\u011B\x03\u011B\x03\u011C\x03" +
		"\u011C\x06\u011C\u1DD2\n\u011C\r\u011C\x0E\u011C\u1DD3\x03\u011C\x03\u011C" +
		"\x05\u011C\u1DD8\n\u011C\x03\u011C\x03\u011C\x03\u011D\x03\u011D\x03\u011E" +
		"\x03\u011E\x07\u011E\u1DE0\n\u011E\f\u011E\x0E\u011E\u1DE3\v\u011E\x03" +
		"\u011E\x03\u011E\x07\u011E\u1DE7\n\u011E\f\u011E\x0E\u011E\u1DEA\v\u011E" +
		"\x03\u011E\x03\u011E\x07\u011E\u1DEE\n\u011E\f\u011E\x0E\u011E\u1DF1\v" +
		"\u011E\x06\u011E\u1DF3\n\u011E\r\u011E\x0E\u011E\u1DF4\x03\u011E\x03\u011E" +
		"\x05\u011E\u1DF9\n\u011E\x03\u011F\x03\u011F\x06\u011F\u1DFD\n\u011F\r" +
		"\u011F\x0E\u011F\u1DFE\x03\u011F\x03\u011F\x06\u011F\u1E03\n\u011F\r\u011F" +
		"\x0E\u011F\u1E04\x05\u011F\u1E07\n\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x06\u011F\u1E0D\n\u011F\r\u011F\x0E\u011F\u1E0E\x03\u011F\x03" +
		"\u011F\x06\u011F\u1E13\n\u011F\r\u011F\x0E\u011F\u1E14\x05\u011F\u1E17" +
		"\n\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x06\u011F\u1E1D\n\u011F" +
		"\r\u011F\x0E\u011F\u1E1E\x03\u011F\x03\u011F\x06\u011F\u1E23\n\u011F\r" +
		"\u011F\x0E\u011F\u1E24\x05\u011F\u1E27\n\u011F\x03\u011F\x03\u011F\x03" +
		"\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x06" +
		"\u011F\u1E32\n\u011F\r\u011F\x0E\u011F\u1E33\x03\u011F\x03\u011F\x06\u011F" +
		"\u1E38\n\u011F\r\u011F\x0E\u011F\u1E39\x05\u011F\u1E3C\n\u011F\x03\u011F" +
		"\x03\u011F\x03\u011F\x03\u011F\x06\u011F\u1E42\n\u011F\r\u011F\x0E\u011F" +
		"\u1E43\x03\u011F\x03\u011F\x06\u011F\u1E48\n\u011F\r\u011F\x0E\u011F\u1E49" +
		"\x05\u011F\u1E4C\n\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x06\u011F" +
		"\u1E52\n\u011F\r\u011F\x0E\u011F\u1E53\x03\u011F\x03\u011F\x06\u011F\u1E58" +
		"\n\u011F\r\u011F\x0E\u011F\u1E59\x03\u011F\x03\u011F\x06\u011F\u1E5E\n" +
		"\u011F\r\u011F\x0E\u011F\u1E5F\x05\u011F\u1E62\n\u011F\x03\u011F\x03\u011F" +
		"\x05\u011F\u1E66\n\u011F\x03\u0120\x03\u0120\x06\u0120\u1E6A\n\u0120\r" +
		"\u0120\x0E\u0120\u1E6B\x03\u0120\x03\u0120\x06\u0120\u1E70\n\u0120\r\u0120" +
		"\x0E\u0120\u1E71\x03\u0120\x03\u0120\x07\u0120\u1E76\n\u0120\f\u0120\x0E" +
		"\u0120\u1E79\v\u0120\x03\u0121\x03\u0121\x06\u0121\u1E7D\n\u0121\r\u0121" +
		"\x0E\u0121\u1E7E\x03\u0121\x03\u0121\x06\u0121\u1E83\n\u0121\r\u0121\x0E" +
		"\u0121\u1E84\x05\u0121\u1E87\n\u0121\x03\u0121\x03\u0121\x06\u0121\u1E8B" +
		"\n\u0121\r\u0121\x0E\u0121\u1E8C\x05\u0121\u1E8F\n\u0121\x03\u0121\x03" +
		"\u0121\x03\u0122\x03\u0122\x03\u0122\x06\u0122\u1E96\n\u0122\r\u0122\x0E" +
		"\u0122\u1E97\x05\u0122\u1E9A\n\u0122\x03\u0122\x03\u0122\x06\u0122\u1E9E" +
		"\n\u0122\r\u0122\x0E\u0122\u1E9F\x03\u0122\x03\u0122\x06\u0122\u1EA4\n" +
		"\u0122\r\u0122\x0E\u0122\u1EA5\x03\u0122\x03\u0122\x03\u0122\x05\u0122" +
		"\u1EAB\n\u0122\x03\u0123\x03\u0123\x03\u0124\x03\u0124\x03\u0125\x03\u0125" +
		"\x06\u0125\u1EB3\n\u0125\r\u0125\x0E\u0125\u1EB4\x03\u0125\x03\u0125\x06" +
		"\u0125\u1EB9\n\u0125\r\u0125\x0E\u0125\u1EBA\x03\u0125\x03\u0125\x06\u0125" +
		"\u1EBF\n\u0125\r\u0125\x0E\u0125\u1EC0\x05\u0125\u1EC3\n\u0125\x03\u0125" +
		"\x03\u0125\x07\u0125\u1EC7\n\u0125\f\u0125\x0E\u0125\u1ECA\v\u0125\x06" +
		"\u0125\u1ECC\n\u0125\r\u0125\x0E\u0125\u1ECD\x03\u0126\x03\u0126\x03\u0127" +
		"\x03\u0127\x06\u0127\u1ED4\n\u0127\r\u0127\x0E\u0127\u1ED5\x03\u0127\x03" +
		"\u0127\x06\u0127\u1EDA\n\u0127\r\u0127\x0E\u0127\u1EDB\x03\u0127\x03\u0127" +
		"\x05\u0127\u1EE0\n\u0127\x03\u0128\x03\u0128\x06\u0128\u1EE4\n\u0128\r" +
		"\u0128\x0E\u0128\u1EE5\x03\u0128\x03\u0128\x06\u0128\u1EEA\n\u0128\r\u0128" +
		"\x0E\u0128\u1EEB\x05\u0128\u1EEE\n\u0128\x03\u0128\x06\u0128\u1EF1\n\u0128" +
		"\r\u0128\x0E\u0128\u1EF2\x03\u0129\x06\u0129\u1EF6\n\u0129\r\u0129\x0E" +
		"\u0129\u1EF7\x03\u0129\x05\u0129\u1EFB\n\u0129\x03\u012A\x03\u012A\x06" +
		"\u012A\u1EFF\n\u012A\r\u012A\x0E\u012A\u1F00\x06\u012A\u1F03\n\u012A\r" +
		"\u012A\x0E\u012A\u1F04\x03\u012A\x03\u012A\x06\u012A\u1F09\n\u012A\r\u012A" +
		"\x0E\u012A\u1F0A\x05\u012A\u1F0D\n\u012A\x03\u012A\x03\u012A\x06\u012A" +
		"\u1F11\n\u012A\r\u012A\x0E\u012A\u1F12\x06\u012A\u1F15\n\u012A\r\u012A" +
		"\x0E\u012A\u1F16\x03\u012B\x03\u012B\x06\u012B\u1F1B\n\u012B\r\u012B\x0E" +
		"\u012B\u1F1C\x03\u012B\x03\u012B\x07\u012B\u1F21\n\u012B\f\u012B\x0E\u012B" +
		"\u1F24\v\u012B\x03\u012C\x03\u012C\x03\u012D\x03\u012D\x03\u012E\x03\u012E" +
		"\x06\u012E\u1F2C\n\u012E\r\u012E\x0E\u012E\u1F2D\x03\u012E\x03\u012E\x06" +
		"\u012E\u1F32\n\u012E\r\u012E\x0E\u012E\u1F33\x03\u012E\x03\u012E\x06\u012E" +
		"\u1F38\n\u012E\r\u012E\x0E\u012E\u1F39\x05\u012E\u1F3C\n\u012E\x03\u012E" +
		"\x03\u012E\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
		"\x03\u012F\x07\u012F\u1F47\n\u012F\f\u012F\x0E\u012F\u1F4A\v\u012F\x06" +
		"\u012F\u1F4C\n\u012F\r\u012F\x0E\u012F\u1F4D\x05\u012F\u1F50\n\u012F\x03" +
		"\u0130\x03\u0130\x06\u0130\u1F54\n\u0130\r\u0130\x0E\u0130\u1F55\x03\u0130" +
		"\x03\u0130\x06\u0130\u1F5A\n\u0130\r\u0130\x0E\u0130\u1F5B\x03\u0130\x03" +
		"\u0130\x05\u0130\u1F60\n\u0130\x03\u0130\x03\u0130\x06\u0130\u1F64\n\u0130" +
		"\r\u0130\x0E\u0130\u1F65\x03\u0130\x03\u0130\x06\u0130\u1F6A\n\u0130\r" +
		"\u0130\x0E\u0130\u1F6B\x03\u0130\x03\u0130\x06\u0130\u1F70\n\u0130\r\u0130" +
		"\x0E\u0130\u1F71\x05\u0130\u1F74\n\u0130\x03\u0131\x03\u0131\x03\u0132" +
		"\x03\u0132\x03\u0133\x03\u0133\x03\u0134\x03\u0134\x06\u0134\u1F7E\n\u0134" +
		"\r\u0134\x0E\u0134\u1F7F\x03\u0134\x03\u0134\x07\u0134\u1F84\n\u0134\f" +
		"\u0134\x0E\u0134\u1F87\v\u0134\x03\u0134\x03\u0134\x06\u0134\u1F8B\n\u0134" +
		"\r\u0134\x0E\u0134\u1F8C\x05\u0134\u1F8F\n\u0134\x03\u0134\x03\u0134\x06" +
		"\u0134\u1F93\n\u0134\r\u0134\x0E\u0134\u1F94\x05\u0134\u1F97\n\u0134\x03" +
		"\u0134\x03\u0134\x06\u0134\u1F9B\n\u0134\r\u0134\x0E\u0134\u1F9C\x03\u0134" +
		"\x03\u0134\x05\u0134\u1FA1\n\u0134\x03\u0134\x03\u0134\x06\u0134\u1FA5" +
		"\n\u0134\r\u0134\x0E\u0134\u1FA6\x03\u0134\x03\u0134\x05\u0134\u1FAB\n" +
		"\u0134\x05\u0134\u1FAD\n\u0134\x03\u0134\x07\u0134\u1FB0\n\u0134\f\u0134" +
		"\x0E\u0134\u1FB3\v\u0134\x03\u0135\x03\u0135\x06\u0135\u1FB7\n\u0135\r" +
		"\u0135\x0E\u0135\u1FB8\x03\u0135\x03\u0135\x06\u0135\u1FBD\n\u0135\r\u0135" +
		"\x0E\u0135\u1FBE\x05\u0135\u1FC1\n\u0135\x03\u0135\x03\u0135\x06\u0135" +
		"\u1FC5\n\u0135\r\u0135\x0E\u0135\u1FC6\x05\u0135\u1FC9\n\u0135\x03\u0135" +
		"\x03\u0135\x03\u0136\x03\u0136\x06\u0136\u1FCF\n\u0136\r\u0136\x0E\u0136" +
		"\u1FD0\x03\u0136\x03\u0136\x06\u0136\u1FD5\n\u0136\r\u0136\x0E\u0136\u1FD6" +
		"\x05\u0136\u1FD9\n\u0136\x03\u0136\x03\u0136\x06\u0136\u1FDD\n\u0136\r" +
		"\u0136\x0E\u0136\u1FDE\x05\u0136\u1FE1\n\u0136\x03\u0136\x03\u0136\x03" +
		"\u0137\x03\u0137\x03\u0138\x03\u0138\x03\u0139\x03\u0139\x03\u013A\x03" +
		"\u013A\x03\u013B\x03\u013B\x03\u013C\x03\u013C\x03\u013D\x03\u013D\x03" +
		"\u013E\x03\u013E\x03\u013F\x03\u013F\x07\u013F\u1FF7\n\u013F\f\u013F\x0E" +
		"\u013F\u1FFA\v\u013F\x03\u013F\x03\u013F\x07\u013F\u1FFE\n\u013F\f\u013F" +
		"\x0E\u013F\u2001\v\u013F\x03\u013F\x03\u013F\x07\u013F\u2005\n\u013F\f" +
		"\u013F\x0E\u013F\u2008\v\u013F\x07\u013F\u200A\n\u013F\f\u013F\x0E\u013F" +
		"\u200D\v\u013F\x03\u0140\x03\u0140\x06\u0140\u2011\n\u0140\r\u0140\x0E" +
		"\u0140\u2012\x03\u0140\x03\u0140\x06\u0140\u2017\n\u0140\r\u0140\x0E\u0140" +
		"\u2018\x05\u0140\u201B\n\u0140\x03\u0140\x03\u0140\x07\u0140\u201F\n\u0140" +
		"\f\u0140\x0E\u0140\u2022\v\u0140\x03\u0140\x03\u0140\x07\u0140\u2026\n" +
		"\u0140\f\u0140\x0E\u0140\u2029\v\u0140\x03\u0140\x03\u0140\x07\u0140\u202D" +
		"\n\u0140\f\u0140\x0E\u0140\u2030\v\u0140\x05\u0140\u2032\n\u0140\x03\u0140" +
		"\x03\u0140\x07\u0140\u2036\n\u0140\f\u0140\x0E\u0140\u2039\v\u0140\x05" +
		"\u0140\u203B\n\u0140\x03\u0140\x03\u0140\x07\u0140\u203F\n\u0140\f\u0140" +
		"\x0E\u0140\u2042\v\u0140\x05\u0140\u2044\n\u0140\x03\u0140\x03\u0140\x07" +
		"\u0140\u2048\n\u0140\f\u0140\x0E\u0140\u204B\v\u0140\x05\u0140\u204D\n" +
		"\u0140\x03\u0140\x03\u0140\x07\u0140\u2051\n\u0140\f\u0140\x0E\u0140\u2054" +
		"\v\u0140\x05\u0140\u2056\n\u0140\x03\u0140\x03\u0140\x07\u0140\u205A\n" +
		"\u0140\f\u0140\x0E\u0140\u205D\v\u0140\x05\u0140\u205F\n\u0140\x03\u0140" +
		"\x03\u0140\x07\u0140\u2063\n\u0140\f\u0140\x0E\u0140\u2066\v\u0140\x05" +
		"\u0140\u2068\n\u0140\x03\u0140\x03\u0140\x07\u0140\u206C\n\u0140\f\u0140" +
		"\x0E\u0140\u206F\v\u0140\x07\u0140\u2071\n\u0140\f\u0140\x0E\u0140\u2074" +
		"\v\u0140\x03\u0140\x03\u0140\x07\u0140\u2078\n\u0140\f\u0140\x0E\u0140" +
		"\u207B\v\u0140\x05\u0140\u207D\n\u0140\x03\u0140\x03\u0140\x07\u0140\u2081" +
		"\n\u0140\f\u0140\x0E\u0140\u2084\v\u0140\x05\u0140\u2086\n\u0140\x03\u0140" +
		"\x03\u0140\x03\u0141\x03\u0141\x06\u0141\u208C\n\u0141\r\u0141\x0E\u0141" +
		"\u208D\x05\u0141\u2090\n\u0141\x03\u0141\x03\u0141\x06\u0141\u2094\n\u0141" +
		"\r\u0141\x0E\u0141\u2095\x03\u0141\x03\u0141\x06\u0141\u209A\n\u0141\r" +
		"\u0141\x0E\u0141\u209B\x05\u0141\u209E\n\u0141\x03\u0141\x03\u0141\x03" +
		"\u0142\x03\u0142\x03\u0143\x03\u0143\x06\u0143\u20A6\n\u0143\r\u0143\x0E" +
		"\u0143\u20A7\x05\u0143\u20AA\n\u0143\x03\u0143\x03\u0143\x06\u0143\u20AE" +
		"\n\u0143\r\u0143\x0E\u0143\u20AF\x03\u0143\x03\u0143\x06\u0143\u20B4\n" +
		"\u0143\r\u0143\x0E\u0143\u20B5\x05\u0143\u20B8\n\u0143\x03\u0143\x03\u0143" +
		"\x06\u0143\u20BC\n\u0143\r\u0143\x0E\u0143\u20BD\x05\u0143\u20C0\n\u0143" +
		"\x03\u0143\x03\u0143\x06\u0143\u20C4\n\u0143\r\u0143\x0E\u0143\u20C5\x03" +
		"\u0143\x03\u0143\x06\u0143\u20CA\n\u0143\r\u0143\x0E\u0143\u20CB\x05\u0143" +
		"\u20CE\n\u0143\x03\u0143\x03\u0143\x05\u0143\u20D2\n\u0143\x03\u0143\x06" +
		"\u0143\u20D5\n\u0143\r\u0143\x0E\u0143\u20D6\x03\u0143\x03\u0143\x05\u0143" +
		"\u20DB\n\u0143\x03\u0144\x03\u0144\x03\u0144\x07\u0144\u20E0\n\u0144\f" +
		"\u0144\x0E\u0144\u20E3\v\u0144\x03\u0144\x03\u0144\x07\u0144\u20E7\n\u0144" +
		"\f\u0144\x0E\u0144\u20EA\v\u0144\x03\u0144\x03\u0144\x07\u0144\u20EE\n" +
		"\u0144\f\u0144\x0E\u0144\u20F1\v\u0144\x03\u0144\x07\u0144\u20F4\n\u0144" +
		"\f\u0144\x0E\u0144\u20F7\v\u0144\x05\u0144\u20F9\n\u0144\x03\u0145\x03" +
		"\u0145\x06\u0145\u20FD\n\u0145\r\u0145\x0E\u0145\u20FE\x03\u0145\x03\u0145" +
		"\x06\u0145\u2103\n\u0145\r\u0145\x0E\u0145\u2104\x05\u0145\u2107\n\u0145" +
		"\x03\u0145\x03\u0145\x06\u0145\u210B\n\u0145\r\u0145\x0E\u0145\u210C\x05" +
		"\u0145\u210F\n\u0145\x05\u0145\u2111\n\u0145\x03\u0145\x03\u0145\x06\u0145" +
		"\u2115\n\u0145\r\u0145\x0E\u0145\u2116\x03\u0145\x03\u0145\x06\u0145\u211B" +
		"\n\u0145\r\u0145\x0E\u0145\u211C\x03\u0145\x03\u0145\x06\u0145\u2121\n" +
		"\u0145\r\u0145\x0E\u0145\u2122\x05\u0145\u2125\n\u0145\x03\u0145\x03\u0145" +
		"\x06\u0145\u2129\n\u0145\r\u0145\x0E\u0145\u212A\x05\u0145\u212D\n\u0145" +
		"\x03\u0145\x03\u0145\x05\u0145\u2131\n\u0145\x03\u0146\x03\u0146\x06\u0146" +
		"\u2135\n\u0146\r\u0146\x0E\u0146\u2136\x03\u0146\x03\u0146\x06\u0146\u213B" +
		"\n\u0146\r\u0146\x0E\u0146\u213C\x03\u0146\x03\u0146\x05\u0146\u2141\n" +
		"\u0146\x03\u0147\x03\u0147\x03\u0148\x03\u0148\x06\u0148\u2147\n\u0148" +
		"\r\u0148\x0E\u0148\u2148\x03\u0148\x03\u0148\x06\u0148\u214D\n\u0148\r" +
		"\u0148\x0E\u0148\u214E\x03\u0148\x03\u0148\x06\u0148\u2153\n\u0148\r\u0148" +
		"\x0E\u0148\u2154\x05\u0148\u2157\n\u0148\x03\u0148\x03\u0148\x03\u0149" +
		"\x03\u0149\x06\u0149\u215D\n\u0149\r\u0149\x0E\u0149\u215E\x03\u0149\x03" +
		"\u0149\x06\u0149\u2163\n\u0149\r\u0149\x0E\u0149\u2164\x05\u0149\u2167" +
		"\n\u0149\x03\u0149\x03\u0149\x06\u0149\u216B\n\u0149\r\u0149\x0E\u0149" +
		"\u216C\x05\u0149\u216F\n\u0149\x03\u0149\x03\u0149\x03\u014A\x03\u014A" +
		"\x03\u014B\x03\u014B\x06\u014B\u2177\n\u014B\r\u014B\x0E\u014B\u2178\x03" +
		"\u014B\x03\u014B\x06\u014B\u217D\n\u014B\r\u014B\x0E\u014B\u217E\x05\u014B" +
		"\u2181\n\u014B\x05\u014B\u2183\n\u014B\x03\u014B\x03\u014B\x03\u014B\x06" +
		"\u014B\u2188\n\u014B\r\u014B\x0E\u014B\u2189\x03\u014B\x03\u014B\x03\u014B" +
		"\x03\u014B\x05\u014B\u2190\n\u014B\x03\u014C\x03\u014C\x06\u014C\u2194" +
		"\n\u014C\r\u014C\x0E\u014C\u2195\x03\u014C\x03\u014C\x06\u014C\u219A\n" +
		"\u014C\r\u014C\x0E\u014C\u219B\x05\u014C\u219E\n\u014C\x03\u014C\x03\u014C" +
		"\x06\u014C\u21A2\n\u014C\r\u014C\x0E\u014C\u21A3\x05\u014C\u21A6\n\u014C" +
		"\x03\u014C\x03\u014C\x03\u014D\x03\u014D\x06\u014D\u21AC\n\u014D\r\u014D" +
		"\x0E\u014D\u21AD\x03\u014D\x03\u014D\x06\u014D\u21B2\n\u014D\r\u014D\x0E" +
		"\u014D\u21B3\x05\u014D\u21B6\n\u014D\x03\u014D\x03\u014D\x06\u014D\u21BA" +
		"\n\u014D\r\u014D\x0E\u014D\u21BB\x03\u014D\x03\u014D\x06\u014D\u21C0\n" +
		"\u014D\r\u014D\x0E\u014D\u21C1\x03\u014D\x03\u014D\x06\u014D\u21C6\n\u014D" +
		"\r\u014D\x0E\u014D\u21C7\x03\u014D\x03\u014D\x03\u014D\x03\u014D\x06\u014D" +
		"\u21CE\n\u014D\r\u014D\x0E\u014D\u21CF\x03\u014D\x03\u014D\x06\u014D\u21D4" +
		"\n\u014D\r\u014D\x0E\u014D\u21D5\x05\u014D\u21D8\n\u014D\x03\u014D\x03" +
		"\u014D\x06\u014D\u21DC\n\u014D\r\u014D\x0E\u014D\u21DD\x03\u014D\x03\u014D" +
		"\x06\u014D\u21E2\n\u014D\r\u014D\x0E\u014D\u21E3\x03\u014D\x03\u014D\x03" +
		"\u014D\x05\u014D\u21E9\n\u014D\x05\u014D\u21EB\n\u014D\x03\u014D\x05\u014D" +
		"\u21EE\n\u014D\x03\u014E\x03\u014E\x06\u014E\u21F2\n\u014E\r\u014E\x0E" +
		"\u014E\u21F3\x03\u014E\x03\u014E\x06\u014E\u21F8\n\u014E\r\u014E\x0E\u014E" +
		"\u21F9\x05\u014E\u21FC\n\u014E\x03\u014E\x03\u014E\x03\u014F\x03\u014F" +
		"\x06\u014F\u2202\n\u014F\r\u014F\x0E\u014F\u2203\x03\u014F\x03\u014F\x06" +
		"\u014F\u2208\n\u014F\r\u014F\x0E\u014F\u2209\x05\u014F\u220C\n\u014F\x03" +
		"\u014F\x03\u014F\x06\u014F\u2210\n\u014F\r\u014F\x0E\u014F\u2211\x03\u014F" +
		"\x03\u014F\x06\u014F\u2216\n\u014F\r\u014F\x0E\u014F\u2217\x05\u014F\u221A" +
		"\n\u014F\x03\u014F\x03\u014F\x06\u014F\u221E\n\u014F\r\u014F\x0E\u014F" +
		"\u221F\x03\u014F\x03\u014F\x03\u0150\x03\u0150\x03\u0151\x03\u0151\x03" +
		"\u0152\x03\u0152\x06\u0152\u222A\n\u0152\r\u0152\x0E\u0152\u222B\x03\u0152" +
		"\x03\u0152\x06\u0152\u2230\n\u0152\r\u0152\x0E\u0152\u2231\x05\u0152\u2234" +
		"\n\u0152\x03\u0152\x03\u0152\x03";
	private static readonly _serializedATNSegment4: string =
		"\u0153\x03\u0153\x06\u0153\u223A\n\u0153\r\u0153\x0E\u0153\u223B\x05\u0153" +
		"\u223E\n\u0153\x03\u0153\x03\u0153\x03\u0153\x06\u0153\u2243\n\u0153\r" +
		"\u0153\x0E\u0153\u2244\x05\u0153\u2247\n\u0153\x03\u0153\x03\u0153\x06" +
		"\u0153\u224B\n\u0153\r\u0153\x0E\u0153\u224C\x03\u0153\x03\u0153\x05\u0153" +
		"\u2251\n\u0153\x05\u0153\u2253\n\u0153\x03\u0154\x03\u0154\x03\u0154\x03" +
		"\u0154\x05\u0154\u2259\n\u0154\x03\u0155\x03\u0155\x03\u0156\x03\u0156" +
		"\x07\u0156\u225F\n\u0156\f\u0156\x0E\u0156\u2262\v\u0156\x03\u0156\x03" +
		"\u0156\x07\u0156\u2266\n\u0156\f\u0156\x0E\u0156\u2269\v\u0156\x03\u0156" +
		"\x03\u0156\x07\u0156\u226D\n\u0156\f\u0156\x0E\u0156\u2270\v\u0156\x07" +
		"\u0156\u2272\n\u0156\f\u0156\x0E\u0156\u2275\v\u0156\x03\u0156\x03\u0156" +
		"\x07\u0156\u2279\n\u0156\f\u0156\x0E\u0156\u227C\v\u0156\x07\u0156\u227E" +
		"\n\u0156\f\u0156\x0E\u0156\u2281\v\u0156\x03\u0156\x03\u0156\x07\u0156" +
		"\u2285\n\u0156\f\u0156\x0E\u0156\u2288\v\u0156\x07\u0156\u228A\n\u0156" +
		"\f\u0156\x0E\u0156\u228D\v\u0156\x03\u0156\x03\u0156\x07\u0156\u2291\n" +
		"\u0156\f\u0156\x0E\u0156\u2294\v\u0156\x07\u0156\u2296\n\u0156\f\u0156" +
		"\x0E\u0156\u2299\v\u0156\x03\u0156\x03\u0156\x07\u0156\u229D\n\u0156\f" +
		"\u0156\x0E\u0156\u22A0\v\u0156\x05\u0156\u22A2\n\u0156\x03\u0157\x03\u0157" +
		"\x06\u0157\u22A6\n\u0157\r\u0157\x0E\u0157\u22A7\x03\u0157\x03\u0157\x06" +
		"\u0157\u22AC\n\u0157\r\u0157\x0E\u0157\u22AD\x03\u0157\x03\u0157\x06\u0157" +
		"\u22B2\n\u0157\r\u0157\x0E\u0157\u22B3\x05\u0157\u22B6\n\u0157\x03\u0157" +
		"\x03\u0157\x06\u0157\u22BA\n\u0157\r\u0157\x0E\u0157\u22BB\x05\u0157\u22BE" +
		"\n\u0157\x03\u0157\x03\u0157\x07\u0157\u22C2\n\u0157\f\u0157\x0E\u0157" +
		"\u22C5\v\u0157\x06\u0157\u22C7\n\u0157\r\u0157\x0E\u0157\u22C8\x03\u0158" +
		"\x03\u0158\x06\u0158\u22CD\n\u0158\r\u0158\x0E\u0158\u22CE\x03\u0158\x03" +
		"\u0158\x06\u0158\u22D3\n\u0158\r\u0158\x0E\u0158\u22D4\x03\u0158\x03\u0158" +
		"\x05\u0158\u22D9\n\u0158\x03\u0159\x03\u0159\x03\u015A\x03\u015A\x03\u015B" +
		"\x03\u015B\x06\u015B\u22E1\n\u015B\r\u015B\x0E\u015B\u22E2\x03\u015B\x03" +
		"\u015B\x06\u015B\u22E7\n\u015B\r\u015B\x0E\u015B\u22E8\x03\u015B\x03\u015B" +
		"\x06\u015B\u22ED\n\u015B\r\u015B\x0E\u015B\u22EE\x05\u015B\u22F1\n\u015B" +
		"\x03\u015B\x03\u015B\x06\u015B\u22F5\n\u015B\r\u015B\x0E\u015B\u22F6\x05" +
		"\u015B\u22F9\n\u015B\x03\u015B\x03\u015B\x03\u015C\x03\u015C\x06\u015C" +
		"\u22FF\n\u015C\r\u015C\x0E\u015C\u2300\x03\u015C\x03\u015C\x06\u015C\u2305" +
		"\n\u015C\r\u015C\x0E\u015C\u2306\x05\u015C\u2309\n\u015C\x03\u015C\x03" +
		"\u015C\x03\u015C\x03\u015C\x06\u015C\u230F\n\u015C\r\u015C\x0E\u015C\u2310" +
		"\x03\u015C\x03\u015C\x03\u015C\x05\u015C\u2316\n\u015C\x03\u015D\x03\u015D" +
		"\x03\u015E\x03\u015E\x03\u015F\x03\u015F\x06\u015F\u231E\n\u015F\r\u015F" +
		"\x0E\u015F\u231F\x03\u015F\x03\u015F\x06\u015F\u2324\n\u015F\r\u015F\x0E" +
		"\u015F\u2325\x05\u015F\u2328\n\u015F\x05\u015F\u232A\n\u015F\x03\u015F" +
		"\x03\u015F\x03\u015F\x06\u015F\u232F\n\u015F\r\u015F\x0E\u015F\u2330\x03" +
		"\u015F\x03\u015F\x05\u015F\u2335\n\u015F\x03\u0160\x03\u0160\x03\u0161" +
		"\x03\u0161\x06\u0161\u233B\n\u0161\r\u0161\x0E\u0161\u233C\x03\u0161\x03" +
		"\u0161\x06\u0161\u2341\n\u0161\r\u0161\x0E\u0161\u2342\x05\u0161\u2345" +
		"\n\u0161\x03\u0161\x03\u0161\x06\u0161\u2349\n\u0161\r\u0161\x0E\u0161" +
		"\u234A\x05\u0161\u234D\n\u0161\x03\u0161\x03\u0161\x06\u0161\u2351\n\u0161" +
		"\r\u0161\x0E\u0161\u2352\x05\u0161\u2355\n\u0161\x03\u0161\x03\u0161\x06" +
		"\u0161\u2359\n\u0161\r\u0161\x0E\u0161\u235A\x03\u0161\x03\u0161\x06\u0161" +
		"\u235F\n\u0161\r\u0161\x0E\u0161\u2360\x03\u0162\x03\u0162\x03\u0163\x03" +
		"\u0163\x06\u0163\u2367\n\u0163\r\u0163\x0E\u0163\u2368\x03\u0163\x03\u0163" +
		"\x06\u0163\u236D\n\u0163\r\u0163\x0E\u0163\u236E\x06\u0163\u2371\n\u0163" +
		"\r\u0163\x0E\u0163\u2372\x03\u0163\x03\u0163\x06\u0163\u2377\n\u0163\r" +
		"\u0163\x0E\u0163\u2378\x03\u0163\x03\u0163\x07\u0163\u237D\n\u0163\f\u0163" +
		"\x0E\u0163\u2380\v\u0163\x06\u0163\u2382\n\u0163\r\u0163\x0E\u0163\u2383" +
		"\x03\u0164\x03\u0164\x03\u0164\x06\u0164\u2389\n\u0164\r\u0164\x0E\u0164" +
		"\u238A\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x06\u0164\u2394\n\u0164\r\u0164\x0E\u0164\u2395\x05\u0164\u2398" +
		"\n\u0164\x03\u0164\x03\u0164\x06\u0164\u239C\n\u0164\r\u0164\x0E\u0164" +
		"\u239D\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x06\u0164\u23A5" +
		"\n\u0164\r\u0164\x0E\u0164\u23A6\x03\u0164\x03\u0164\x05\u0164\u23AB\n" +
		"\u0164\x03\u0165\x03\u0165\x03\u0166\x03\u0166\x03\u0167\x03\u0167\x03" +
		"\u0168\x03\u0168\x03\u0168\x07\u0168\u23B6\n\u0168\f\u0168\x0E\u0168\u23B9" +
		"\v\u0168\x03\u0168\x03\u0168\x07\u0168\u23BD\n\u0168\f\u0168\x0E\u0168" +
		"\u23C0\v\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x07\u0168\u23C6" +
		"\n\u0168\f\u0168\x0E\u0168\u23C9\v\u0168\x03\u0168\x03\u0168\x03\u0168" +
		"\x03\u0168\x05\u0168\u23CF\n\u0168\x03\u0168\x03\u0168\x07\u0168\u23D3" +
		"\n\u0168\f\u0168\x0E\u0168\u23D6\v\u0168\x03\u0168\x03\u0168\x07\u0168" +
		"\u23DA\n\u0168\f\u0168\x0E\u0168\u23DD\v\u0168\x03\u0168\x03\u0168\x07" +
		"\u0168\u23E1\n\u0168\f\u0168\x0E\u0168\u23E4\v\u0168\x03\u0169\x03\u0169" +
		"\x03\u0169\x05\u0169\u23E9\n\u0169\x03\u016A\x03\u016A\x03\u016A\x03\u016A" +
		"\x03\u016A\x03\u016A\x05\u016A\u23F1\n\u016A\x03\u016B\x03\u016B\x03\u016C" +
		"\x03\u016C\x03\u016C\x07\u016C\u23F8\n\u016C\f\u016C\x0E\u016C\u23FB\v" +
		"\u016C\x03\u016C\x03\u016C\x07\u016C\u23FF\n\u016C\f\u016C\x0E\u016C\u2402" +
		"\v\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x07\u016C\u2408\n\u016C" +
		"\f\u016C\x0E\u016C\u240B\v\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C" +
		"\x03\u016C\x05\u016C\u2412\n\u016C\x03\u016C\x03\u016C\x07\u016C\u2416" +
		"\n\u016C\f\u016C\x0E\u016C\u2419\v\u016C\x03\u016C\x03\u016C\x07\u016C" +
		"\u241D\n\u016C\f\u016C\x0E\u016C\u2420\v\u016C\x03\u016C\x03\u016C\x07" +
		"\u016C\u2424\n\u016C\f\u016C\x0E\u016C\u2427\v\u016C\x03\u016D\x03\u016D" +
		"\x06\u016D\u242B\n\u016D\r\u016D\x0E\u016D\u242C\x03\u016D\x03\u016D\x05" +
		"\u016D\u2431\n\u016D\x03\u016D\x06\u016D\u2434\n\u016D\r\u016D\x0E\u016D" +
		"\u2435\x03\u016D\x03\u016D\x03\u016E\x03\u016E\x03\u016E\x07\u016E\u243D" +
		"\n\u016E\f\u016E\x0E\u016E\u2440\v\u016E\x03\u016E\x03\u016E\x07\u016E" +
		"\u2444\n\u016E\f\u016E\x0E\u016E\u2447\v\u016E\x03\u016E\x03\u016E\x03" +
		"\u016E\x03\u016E\x05\u016E\u244D\n\u016E\x03\u016E\x03\u016E\x06\u016E" +
		"\u2451\n\u016E\r\u016E\x0E\u016E\u2452\x03\u016E\x03\u016E\x07\u016E\u2457" +
		"\n\u016E\f\u016E\x0E\u016E\u245A\v\u016E\x03\u016E\x03\u016E\x07\u016E" +
		"\u245E\n\u016E\f\u016E\x0E\u016E\u2461\v\u016E\x03\u016E\x03\u016E\x07" +
		"\u016E\u2465\n\u016E\f\u016E\x0E\u016E\u2468\v\u016E\x03\u016F\x03\u016F" +
		"\x03\u0170\x03\u0170\x06\u0170\u246E\n\u0170\r\u0170\x0E\u0170\u246F\x03" +
		"\u0170\x03\u0170\x05\u0170\u2474\n\u0170\x03\u0170\x06\u0170\u2477\n\u0170" +
		"\r\u0170\x0E\u0170\u2478\x03\u0170\x03\u0170\x05\u0170\u247D\n\u0170\x03" +
		"\u0170\x06\u0170\u2480\n\u0170\r\u0170\x0E\u0170\u2481\x03\u0170\x03\u0170" +
		"\x03\u0171\x03\u0171\x03\u0172\x03\u0172\x06\u0172\u248A\n\u0172\r\u0172" +
		"\x0E\u0172\u248B\x03\u0172\x03\u0172\x05\u0172\u2490\n\u0172\x03\u0172" +
		"\x06\u0172\u2493\n\u0172\r\u0172\x0E\u0172\u2494\x03\u0172\x03\u0172\x05" +
		"\u0172\u2499\n\u0172\x03\u0172\x06\u0172\u249C\n\u0172\r\u0172\x0E\u0172" +
		"\u249D\x03\u0172\x03\u0172\x03\u0173\x03\u0173\x03\u0174\x03\u0174\x07" +
		"\u0174\u24A6\n\u0174\f\u0174\x0E\u0174\u24A9\v\u0174\x05\u0174\u24AB\n" +
		"\u0174\x03\u0174\x03\u0174\x07\u0174\u24AF\n\u0174\f\u0174\x0E\u0174\u24B2" +
		"\v\u0174\x05\u0174\u24B4\n\u0174\x03\u0174\x03\u0174\x06\u0174\u24B8\n" +
		"\u0174\r\u0174\x0E\u0174\u24B9\x03\u0174\x03\u0174\x05\u0174\u24BE\n\u0174" +
		"\x03\u0174\x03\u0174\x06\u0174\u24C2\n\u0174\r\u0174\x0E\u0174\u24C3\x03" +
		"\u0174\x03\u0174\x05\u0174\u24C8\n\u0174\x03\u0174\x03\u0174\x06\u0174" +
		"\u24CC\n\u0174\r\u0174\x0E\u0174\u24CD\x03\u0174\x03\u0174\x05\u0174\u24D2" +
		"\n\u0174\x03\u0174\x03\u0174\x06\u0174\u24D6\n\u0174\r\u0174\x0E\u0174" +
		"\u24D7\x03\u0174\x03\u0174\x05\u0174\u24DC\n\u0174\x03\u0174\x03\u0174" +
		"\x06\u0174\u24E0\n\u0174\r\u0174\x0E\u0174\u24E1\x03\u0174\x03\u0174\x05" +
		"\u0174\u24E6\n\u0174\x03\u0174\x03\u0174\x06\u0174\u24EA\n\u0174\r\u0174" +
		"\x0E\u0174\u24EB\x03\u0174\x03\u0174\x05\u0174\u24F0\n\u0174\x05\u0174" +
		"\u24F2\n\u0174\x03\u0174\x03\u0174\x06\u0174\u24F6\n\u0174\r\u0174\x0E" +
		"\u0174\u24F7\x03\u0174\x03\u0174\x05\u0174\u24FC\n\u0174\x03\u0174\x06" +
		"\u0174\u24FF\n\u0174\r\u0174\x0E\u0174\u2500\x03\u0174\x03\u0174\x06\u0174" +
		"\u2505\n\u0174\r\u0174\x0E\u0174\u2506\x03\u0174\x03\u0174\x06\u0174\u250B" +
		"\n\u0174\r\u0174\x0E\u0174\u250C\x03\u0174\x03\u0174\x05\u0174\u2511\n" +
		"\u0174\x03\u0174\x03\u0174\x03\u0174\x06\u0174\u2516\n\u0174\r\u0174\x0E" +
		"\u0174\u2517\x03\u0174\x03\u0174\x05\u0174\u251C\n\u0174\x03\u0174\x06" +
		"\u0174\u251F\n\u0174\r\u0174\x0E\u0174\u2520\x03\u0174\x03\u0174\x06\u0174" +
		"\u2525\n\u0174\r\u0174\x0E\u0174\u2526\x03\u0174\x03\u0174\x06\u0174\u252B" +
		"\n\u0174\r\u0174\x0E\u0174\u252C\x03\u0174\x03\u0174\x05\u0174\u2531\n" +
		"\u0174\x03\u0174\x05\u0174\u2534\n\u0174\x03\u0175\x03\u0175\x07\u0175" +
		"\u2538\n\u0175\f\u0175\x0E\u0175\u253B\v\u0175\x03\u0175\x05\u0175\u253E" +
		"\n\u0175\x03\u0175\x07\u0175\u2541\n\u0175\f\u0175\x0E\u0175\u2544\v\u0175" +
		"\x03\u0175\x05\u0175\u2547\n\u0175\x03\u0176\x03\u0176\x03\u0176\x07\u0176" +
		"\u254C\n\u0176\f\u0176\x0E\u0176\u254F\v\u0176\x03\u0176\x03\u0176\x07" +
		"\u0176\u2553\n\u0176\f\u0176\x0E\u0176\u2556\v\u0176\x03\u0176\x05\u0176" +
		"\u2559\n\u0176\x03\u0176\x07\u0176\u255C\n\u0176\f\u0176\x0E\u0176\u255F" +
		"\v\u0176\x03\u0176\x05\u0176\u2562\n\u0176\x05\u0176\u2564\n\u0176\x03" +
		"\u0177\x03\u0177\x03\u0178\x03\u0178\x07\u0178\u256A\n\u0178\f\u0178\x0E" +
		"\u0178\u256D\v\u0178\x03\u0178\x03\u0178\x05\u0178\u2571\n\u0178\x03\u0178" +
		"\x07\u0178\u2574\n\u0178\f\u0178\x0E\u0178\u2577\v\u0178\x03\u0178\x03" +
		"\u0178\x05\u0178\u257B\n\u0178\x07\u0178\u257D\n\u0178\f\u0178\x0E\u0178" +
		"\u2580\v\u0178\x03\u0178\x07\u0178\u2583\n\u0178\f\u0178\x0E\u0178\u2586" +
		"\v\u0178\x03\u0178\x03\u0178\x03\u0179\x03\u0179\x07\u0179\u258C\n\u0179" +
		"\f\u0179\x0E\u0179\u258F\v\u0179\x03\u0179\x03\u0179\x07\u0179\u2593\n" +
		"\u0179\f\u0179\x0E\u0179\u2596\v\u0179\x03\u0179\x03\u0179\x07\u0179\u259A" +
		"\n\u0179\f\u0179\x0E\u0179\u259D\v\u0179\x03\u0179\x05\u0179\u25A0\n\u0179" +
		"\x03\u0179\x07\u0179\u25A3\n\u0179\f\u0179\x0E\u0179\u25A6\v\u0179\x03" +
		"\u0179\x03\u0179\x03\u017A\x03\u017A\x03\u017B\x03\u017B\x03\u017C\x03" +
		"\u017C\x03\u017C\x02\x02\x05\u02CE\u02D6\u02DA\u017D\x02\x02\x04\x02\x06" +
		"\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02" +
		"\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x02" +
		"2\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02" +
		"N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02" +
		"j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02" +
		"\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02" +
		"\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02" +
		"\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02" +
		"\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02" +
		"\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02" +
		"\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02" +
		"\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100" +
		"\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E" +
		"\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C" +
		"\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A" +
		"\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138" +
		"\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146" +
		"\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154" +
		"\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162" +
		"\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170" +
		"\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E" +
		"\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C" +
		"\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A" +
		"\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8" +
		"\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6" +
		"\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4" +
		"\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2" +
		"\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0" +
		"\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE" +
		"\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC" +
		"\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A" +
		"\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218" +
		"\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226" +
		"\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234" +
		"\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242" +
		"\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250" +
		"\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E" +
		"\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\u0268\x02\u026A\x02\u026C" +
		"\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02\u0276\x02\u0278\x02\u027A" +
		"\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02\u0284\x02\u0286\x02\u0288" +
		"\x02\u028A\x02\u028C\x02\u028E\x02\u0290\x02\u0292\x02\u0294\x02\u0296" +
		"\x02\u0298\x02\u029A\x02\u029C\x02\u029E\x02\u02A0\x02\u02A2\x02\u02A4" +
		"\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC\x02\u02AE\x02\u02B0\x02\u02B2" +
		"\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA\x02\u02BC\x02\u02BE\x02\u02C0" +
		"\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8\x02\u02CA\x02\u02CC\x02\u02CE" +
		"\x02\u02D0\x02\u02D2\x02\u02D4\x02\u02D6\x02\u02D8\x02\u02DA\x02\u02DC" +
		"\x02\u02DE\x02\u02E0\x02\u02E2\x02\u02E4\x02\u02E6\x02\u02E8\x02\u02EA" +
		"\x02\u02EC\x02\u02EE\x02\u02F0\x02\u02F2\x02\u02F4\x02\u02F6\x02\x023" +
		"\x06\x02\xC2\xC3\xEB\xEC\u0121\u0122\u0157\u0158\x03\x02\u01C7\u01C7\x04" +
		"\x02\x9E\x9E\xA1\xA1\x04\x02\u01C1\u01C1\u01C4\u01C4\x04\x02\xF8\xF8\u01A3" +
		"\u01A4\x03\x02\u0171\u0172\x04\x02\n\n%%\x04\x02\xA4\xA4\u0108\u0108\x06" +
		"\x02\xA4\xA4\xD0\xD0\xD7\xD7\u0108\u0108\x04\x02\x1C\x1Ctt\x05\x02\v\v" +
		"\xB0\xB0\xDE\xDE\x04\x02\v\v\xDE\xDE\x05\x02\x0E\x0E\xFC\xFC\u0199\u019B" +
		"\x03\x02_`\x04\x0222\xD4\xD4\x04\x02\xE4\xE4\u0144\u0144\x04\x02\u0129" +
		"\u0129\u017C\u017C\x03\x02\u0168\u0169\x04\x02\xDF\xDF\u0140\u0140\x03" +
		"\x02\xD9\xDA\x03\x02\u01C1\u01C2\x04\x02\xDE\xDE\u0177\u0177\x04\x02\xAF" +
		"\xAF\u01C4\u01C4\x03\x02\xE4\xE5\x04\x02\u0151\u0151\u017E\u017E\x03\x02" +
		"\u0112\u0113\x07\x02\u01AF\u01B0\u01B8\u01B9\u01BE\u01BE\u01C2\u01C2\u01C4" +
		"\u01C4\x04\x02\xAC\xAC\xC5\xC5\x04\x02\u0101\u0101\u015A\u015A\x03\x02" +
		"\x9A\x9B\x04\x02CC\xCD\xCD\x04\x02\xF6\xF6\u015A\u015A\x06\x02\f\f\xC4" +
		"\xC4\u0188\u0188\u01C4\u01C4\x05\x02::\xF2\xF2\u018C\u018C\x04\x02\xC9" +
		"\xC9\xFF\xFF\x04\x02\x16\x16\xD6\xD6\x07\x0266TT\xE6\xE6\u010D\u010E\u016A" +
		"\u016C\x04\x02\x19\x1A\x98\x99\x05\x02}}\u0123\u0123\u014E\u014E\x03\x02" +
		"\x17\x18\x04\x02::\u0127\u0127\x04\x02}}\xA6\xA6\x04\x02\u0126\u0126\u0153" +
		"\u0154\x03\x02WX\x03\x02\u01AC\u01AD\x04\x02\xA7\xA7\u0162\u0162\x04\x02" +
		"\x14\x14\u0106\u0106\x05\x02\xF7\xF7\u0118\u0118\u0191\u0191\x05\x02\x0E" +
		"\x10\xFC\xFC\u01C4\u01C4\x02\u2B97\x02\u02FC\x03\x02\x02\x02\x04\u0301" +
		"\x03\x02\x02\x02\x06\u0305\x03\x02\x02\x02\b\u030B\x03\x02\x02\x02\n\u030F" +
		"\x03\x02\x02\x02\f\u0317\x03\x02\x02\x02\x0E\u031D\x03\x02\x02\x02\x10" +
		"\u032F\x03\x02\x02\x02\x12\u0331\x03\x02\x02\x02\x14\u033B\x03\x02\x02" +
		"\x02\x16\u0374\x03\x02\x02\x02\x18\u0391\x03\x02\x02\x02\x1A\u03B7\x03" +
		"\x02\x02\x02\x1C\u03B9\x03\x02\x02\x02\x1E\u03E6\x03\x02\x02\x02 \u03F4" +
		"\x03\x02\x02\x02\"\u03F6\x03\x02\x02\x02$\u0417\x03\x02\x02\x02&\u042A" +
		"\x03\x02\x02\x02(\u0488\x03\x02\x02\x02*\u049B\x03\x02\x02\x02,\u049D" +
		"\x03\x02\x02\x02.\u04BA\x03\x02\x02\x020\u04BC\x03\x02\x02\x022\u04BE" +
		"\x03\x02\x02\x024\u04D1\x03\x02\x02\x026\u04EC\x03\x02\x02\x028\u050C" +
		"\x03\x02\x02\x02:\u050E\x03\x02\x02\x02<\u054D\x03\x02\x02\x02>\u054F" +
		"\x03\x02\x02\x02@\u058C\x03\x02\x02\x02B\u058E\x03\x02\x02\x02D\u05A4" +
		"\x03\x02\x02\x02F\u05A6\x03\x02\x02\x02H\u05A8\x03\x02\x02\x02J\u05DE" +
		"\x03\x02\x02\x02L\u05E0\x03\x02\x02\x02N\u05E2\x03\x02\x02\x02P\u0694" +
		"\x03\x02\x02\x02R\u0696\x03\x02\x02\x02T\u06D0\x03\x02\x02\x02V\u06DF" +
		"\x03\x02\x02\x02X\u06EF\x03\x02\x02\x02Z\u06FF\x03\x02\x02\x02\\\u0732" +
		"\x03\x02\x02\x02^\u074E\x03\x02\x02\x02`\u0752\x03\x02\x02\x02b\u0754" +
		"\x03\x02\x02\x02d\u078E\x03\x02\x02\x02f\u0790\x03\x02\x02\x02h\u083C" +
		"\x03\x02\x02\x02j\u083E\x03\x02\x02\x02l\u0881\x03\x02\x02\x02n\u0883" +
		"\x03\x02\x02\x02p\u08CE\x03\x02\x02\x02r\u08F2\x03\x02\x02\x02t\u08F4" +
		"\x03\x02\x02\x02v\u08F6\x03\x02\x02\x02x\u08F9\x03\x02\x02\x02z\u0901" +
		"\x03\x02\x02\x02|\u0918\x03\x02\x02\x02~\u091A\x03\x02\x02\x02\x80\u091C" +
		"\x03\x02\x02\x02\x82\u0936\x03\x02\x02\x02\x84\u0955\x03\x02\x02\x02\x86" +
		"\u0957\x03\x02\x02\x02\x88\u0959\x03\x02\x02\x02\x8A\u0967\x03\x02\x02" +
		"\x02\x8C\u098A\x03\x02\x02\x02\x8E\u098C\x03\x02\x02\x02\x90\u09A5\x03" +
		"\x02\x02\x02\x92\u09A7\x03\x02\x02\x02\x94\u09B3\x03\x02\x02\x02\x96\u09C7" +
		"\x03\x02\x02\x02\x98\u09D4\x03\x02\x02\x02\x9A\u09E5\x03\x02\x02\x02\x9C" +
		"\u09FF\x03\x02\x02\x02\x9E\u0A01\x03\x02\x02\x02\xA0\u0A03\x03\x02\x02" +
		"\x02\xA2\u0A05\x03\x02\x02\x02\xA4\u0A07\x03\x02\x02\x02\xA6\u0A13\x03" +
		"\x02\x02\x02\xA8\u0A2B\x03\x02\x02\x02\xAA\u0A4D\x03\x02\x02\x02\xAC\u0A4F" +
		"\x03\x02\x02\x02\xAE\u0A51\x03\x02\x02\x02\xB0\u0A6D\x03\x02\x02\x02\xB2" +
		"\u0AAE\x03\x02\x02\x02\xB4\u0AB6\x03\x02\x02\x02\xB6\u0AB8\x03\x02\x02" +
		"\x02\xB8\u0ABA\x03\x02\x02\x02\xBA\u0AFB\x03\x02\x02\x02\xBC\u0AFD\x03" +
		"\x02\x02\x02\xBE\u0AFF\x03\x02\x02\x02\xC0\u0B81\x03\x02\x02\x02\xC2\u0B87" +
		"\x03\x02\x02\x02\xC4\u0B8B\x03\x02\x02\x02\xC6\u0B8D\x03\x02\x02\x02\xC8" +
		"\u0BCE\x03\x02\x02\x02\xCA\u0C17\x03\x02\x02\x02\xCC\u0C1B\x03\x02\x02" +
		"\x02\xCE\u0C21\x03\x02\x02\x02\xD0\u0C23\x03\x02\x02\x02\xD2\u0C43\x03" +
		"\x02\x02\x02\xD4\u0C63\x03\x02\x02\x02\xD6\u0C98\x03\x02\x02\x02\xD8\u0CBF" +
		"\x03\x02\x02\x02\xDA\u0CC1\x03\x02\x02\x02\xDC\u0CC3\x03\x02\x02\x02\xDE" +
		"\u0CD6\x03\x02\x02\x02\xE0\u0D0C\x03\x02\x02\x02\xE2\u0D62\x03\x02\x02" +
		"\x02\xE4\u0D6A\x03\x02\x02\x02\xE6\u0D83\x03\x02\x02\x02\xE8\u0D96\x03" +
		"\x02\x02\x02\xEA\u0D98\x03\x02\x02\x02\xEC\u0DBA\x03\x02\x02\x02\xEE\u0DBC" +
		"\x03\x02\x02\x02\xF0\u0DFD\x03\x02\x02\x02\xF2\u0E47\x03\x02\x02\x02\xF4" +
		"\u0E49\x03\x02\x02\x02\xF6\u0E55\x03\x02\x02\x02\xF8\u0E80\x03\x02\x02" +
		"\x02\xFA\u0E88\x03\x02\x02\x02\xFC\u0EAA\x03\x02\x02\x02\xFE\u0ED0\x03" +
		"\x02\x02\x02\u0100\u0ED5\x03\x02\x02\x02\u0102\u0ED7\x03\x02\x02\x02\u0104" +
		"\u0ED9\x03\x02\x02\x02\u0106\u0EFF\x03\x02\x02\x02\u0108\u0F01\x03\x02" +
		"\x02\x02\u010A\u0F84\x03\x02\x02\x02\u010C\u0F98\x03\x02\x02\x02\u010E" +
		"\u0F9C\x03\x02\x02\x02\u0110\u0FA4\x03\x02\x02\x02\u0112\u0FC6\x03\x02" +
		"\x02\x02\u0114\u0FE8\x03\x02\x02\x02\u0116\u100A\x03\x02\x02\x02\u0118" +
		"\u102C\x03\x02\x02\x02\u011A\u102E\x03\x02\x02\x02\u011C\u1055\x03\x02" +
		"\x02\x02\u011E\u1057\x03\x02\x02\x02\u0120\u108E\x03\x02\x02\x02\u0122" +
		"\u10A2\x03\x02\x02\x02\u0124\u10C8\x03\x02\x02\x02\u0126\u1104\x03\x02" +
		"\x02\x02\u0128\u112C\x03\x02\x02\x02\u012A\u1144\x03\x02\x02\x02\u012C" +
		"\u1156\x03\x02\x02\x02\u012E\u11C4\x03\x02\x02\x02\u0130\u121F\x03\x02" +
		"\x02\x02\u0132\u1221\x03\x02\x02\x02\u0134\u1230\x03\x02\x02\x02\u0136" +
		"\u126C\x03\x02\x02\x02\u0138\u126E\x03\x02\x02\x02\u013A\u1272\x03\x02" +
		"\x02\x02\u013C\u1291\x03\x02\x02\x02\u013E\u12A9\x03\x02\x02\x02\u0140" +
		"\u12AB\x03\x02\x02\x02\u0142\u12AD\x03\x02\x02\x02\u0144\u12B5\x03\x02" +
		"\x02\x02\u0146\u12C7\x03\x02\x02\x02\u0148\u12D9\x03\x02\x02\x02\u014A" +
		"\u12EB\x03\x02\x02\x02\u014C\u12FE\x03\x02\x02\x02\u014E\u133F\x03\x02" +
		"\x02\x02\u0150\u137B\x03\x02\x02\x02\u0152\u139B\x03\x02\x02\x02\u0154" +
		"\u13BB\x03\x02\x02\x02\u0156\u13E7\x03\x02\x02\x02\u0158\u1407\x03\x02" +
		"\x02\x02\u015A\u1422\x03\x02\x02\x02\u015C\u143D\x03\x02\x02\x02\u015E" +
		"\u1475\x03\x02\x02\x02\u0160\u1477\x03\x02\x02\x02\u0162\u1484\x03\x02" +
		"\x02\x02\u0164\u14AD\x03\x02\x02\x02\u0166\u14EB\x03\x02\x02\x02\u0168" +
		"\u14ED\x03\x02\x02\x02\u016A\u1503\x03\x02\x02\x02\u016C\u1505\x03\x02" +
		"\x02\x02\u016E\u151B\x03\x02\x02\x02\u0170\u152F\x03\x02\x02\x02\u0172" +
		"\u154A\x03\x02\x02\x02\u0174\u154C\x03\x02\x02\x02\u0176\u1554\x03\x02" +
		"\x02\x02\u0178\u1556\x03\x02\x02\x02\u017A\u1558\x03\x02\x02\x02\u017C" +
		"\u155A\x03\x02\x02\x02\u017E\u1576\x03\x02\x02\x02\u0180\u1591\x03\x02" +
		"\x02\x02\u0182\u1593\x03\x02\x02\x02\u0184\u15B6\x03\x02\x02\x02\u0186" +
		"\u15E8\x03\x02\x02\x02\u0188\u15EA\x03\x02\x02\x02\u018A\u15EC\x03\x02" +
		"\x02\x02\u018C\u15EE\x03\x02\x02\x02\u018E\u15F0\x03\x02\x02\x02\u0190" +
		"\u15FD\x03\x02\x02\x02\u0192\u16C3\x03\x02\x02\x02\u0194\u16D4\x03\x02" +
		"\x02\x02\u0196\u1710\x03\x02\x02\x02\u0198\u172C\x03\x02\x02\x02\u019A" +
		"\u172E\x03\x02\x02\x02\u019C\u1730\x03\x02\x02\x02\u019E\u1732\x03\x02" +
		"\x02\x02\u01A0\u1734\x03\x02\x02\x02\u01A2\u1780\x03\x02\x02\x02\u01A4" +
		"\u1782\x03\x02\x02\x02\u01A6\u1795\x03\x02\x02\x02\u01A8\u17B7\x03\x02" +
		"\x02\x02\u01AA\u17B9\x03\x02\x02\x02\u01AC\u1879\x03\x02\x02\x02\u01AE" +
		"\u187B\x03\x02\x02\x02\u01B0\u187D\x03\x02\x02\x02\u01B2\u187F\x03\x02" +
		"\x02\x02\u01B4\u1881\x03\x02\x02\x02\u01B6\u1883\x03\x02\x02\x02\u01B8" +
		"\u1885\x03\x02\x02\x02\u01BA\u1887\x03\x02\x02\x02\u01BC\u1898\x03\x02" +
		"\x02\x02\u01BE\u18DB\x03\x02\x02\x02\u01C0\u18DD\x03\x02\x02\x02\u01C2" +
		"\u18EE\x03\x02\x02\x02\u01C4\u18F2\x03\x02\x02\x02\u01C6\u18F4\x03\x02" +
		"\x02\x02\u01C8\u18F6\x03\x02\x02\x02\u01CA\u18FA\x03\x02\x02\x02\u01CC" +
		"\u1910\x03\x02\x02\x02\u01CE\u1924\x03\x02\x02\x02\u01D0\u1926\x03\x02" +
		"\x02\x02\u01D2\u199D\x03\x02\x02\x02\u01D4\u19A1\x03\x02\x02\x02\u01D6" +
		"\u19A5\x03\x02\x02\x02\u01D8\u19A9\x03\x02\x02\x02\u01DA\u19AB\x03\x02" +
		"\x02\x02\u01DC\u19D4\x03\x02\x02\x02\u01DE\u19D6\x03\x02\x02\x02\u01E0" +
		"\u19F4\x03\x02\x02\x02\u01E2\u19F6\x03\x02\x02\x02\u01E4\u1A19\x03\x02" +
		"\x02\x02\u01E6\u1A9C\x03\x02\x02\x02\u01E8\u1A9E\x03\x02\x02\x02\u01EA" +
		"\u1AA0\x03\x02\x02\x02\u01EC\u1AA2\x03\x02\x02\x02\u01EE\u1AA4\x03\x02" +
		"\x02\x02\u01F0\u1ABE\x03\x02\x02\x02\u01F2\u1B8A\x03\x02\x02\x02\u01F4" +
		"\u1B8C\x03\x02\x02\x02\u01F6\u1B94\x03\x02\x02\x02\u01F8\u1B9E\x03\x02" +
		"\x02\x02\u01FA\u1BA6\x03\x02\x02\x02\u01FC\u1BAA\x03\x02\x02\x02\u01FE" +
		"\u1BAC\x03\x02\x02\x02\u0200\u1BAE\x03\x02\x02\x02\u0202\u1BD0\x03\x02" +
		"\x02\x02\u0204\u1BD2\x03\x02\x02\x02\u0206\u1BFB\x03\x02\x02\x02\u0208" +
		"\u1C03\x03\x02\x02\x02\u020A\u1C15\x03\x02\x02\x02\u020C\u1C1F\x03\x02" +
		"\x02\x02\u020E\u1C2A\x03\x02\x02\x02\u0210\u1C2C\x03\x02\x02\x02\u0212" +
		"\u1C41\x03\x02\x02\x02\u0214\u1C56\x03\x02\x02\x02\u0216\u1C6B\x03\x02" +
		"\x02\x02\u0218\u1C80\x03\x02\x02\x02\u021A\u1C95\x03\x02\x02\x02\u021C" +
		"\u1CAF\x03\x02\x02\x02\u021E\u1CC6\x03\x02\x02\x02\u0220\u1CE0\x03\x02" +
		"\x02\x02\u0222\u1D0F\x03\x02\x02\x02\u0224\u1D29\x03\x02\x02\x02\u0226" +
		"\u1D4B\x03\x02\x02\x02\u0228\u1D53\x03\x02\x02\x02\u022A\u1D5D\x03\x02" +
		"\x02\x02\u022C\u1D91\x03\x02\x02\x02\u022E\u1DA8\x03\x02\x02\x02\u0230" +
		"\u1DAA\x03\x02\x02\x02\u0232\u1DB2\x03\x02\x02\x02\u0234\u1DCD\x03\x02" +
		"\x02\x02\u0236\u1DCF\x03\x02\x02\x02\u0238\u1DDB\x03\x02\x02\x02\u023A" +
		"\u1DDD\x03\x02\x02\x02\u023C\u1E65\x03\x02\x02\x02\u023E\u1E67\x03\x02" +
		"\x02\x02\u0240\u1E7A\x03\x02\x02\x02\u0242\u1EAA\x03\x02\x02\x02\u0244" +
		"\u1EAC\x03\x02\x02\x02\u0246\u1EAE\x03\x02\x02\x02\u0248\u1EB0\x03\x02" +
		"\x02\x02\u024A\u1ECF\x03\x02\x02\x02\u024C\u1ED1\x03\x02\x02\x02\u024E" +
		"\u1EE1\x03\x02\x02\x02\u0250\u1EF5\x03\x02\x02\x02\u0252\u1F02\x03\x02" +
		"\x02\x02\u0254\u1F18\x03\x02\x02\x02\u0256\u1F25\x03\x02\x02\x02\u0258" +
		"\u1F27\x03\x02\x02\x02\u025A\u1F29\x03\x02\x02\x02\u025C\u1F4F\x03\x02" +
		"\x02\x02\u025E\u1F73\x03\x02\x02\x02\u0260\u1F75\x03\x02\x02\x02\u0262" +
		"\u1F77\x03\x02\x02\x02\u0264\u1F79\x03\x02\x02\x02\u0266\u1F7B\x03\x02" +
		"\x02\x02\u0268\u1FB4\x03\x02\x02\x02\u026A\u1FCC\x03\x02\x02\x02\u026C" +
		"\u1FE4\x03\x02\x02\x02\u026E\u1FE6\x03\x02\x02\x02\u0270\u1FE8\x03\x02" +
		"\x02\x02\u0272\u1FEA\x03\x02\x02\x02\u0274\u1FEC\x03\x02\x02\x02\u0276" +
		"\u1FEE\x03\x02\x02";
	private static readonly _serializedATNSegment5: string =
		"\x02\u0278\u1FF0\x03\x02\x02\x02\u027A\u1FF2\x03\x02\x02\x02\u027C\u1FF4" +
		"\x03\x02\x02\x02\u027E\u200E\x03\x02\x02\x02\u0280\u208F\x03\x02\x02\x02" +
		"\u0282\u20A1\x03\x02\x02\x02\u0284\u20A9\x03\x02\x02\x02\u0286\u20F8\x03" +
		"\x02\x02\x02\u0288\u2110\x03\x02\x02\x02\u028A\u2132\x03\x02\x02\x02\u028C" +
		"\u2142\x03\x02\x02\x02\u028E\u2144\x03\x02\x02\x02\u0290\u215A\x03\x02" +
		"\x02\x02\u0292\u2172\x03\x02\x02\x02\u0294\u2182\x03\x02\x02\x02\u0296" +
		"\u2191\x03\x02\x02\x02\u0298\u21ED\x03\x02\x02\x02\u029A\u21EF\x03\x02" +
		"\x02\x02\u029C\u21FF\x03\x02\x02\x02\u029E\u2223\x03\x02\x02\x02\u02A0" +
		"\u2225\x03\x02\x02\x02\u02A2\u2227\x03\x02\x02\x02\u02A4\u2252\x03\x02" +
		"\x02\x02\u02A6\u2258\x03\x02\x02\x02\u02A8\u225A\x03\x02\x02\x02\u02AA" +
		"\u225C\x03\x02\x02\x02\u02AC\u22A3\x03\x02\x02\x02\u02AE\u22CA\x03\x02" +
		"\x02\x02\u02B0\u22DA\x03\x02\x02\x02\u02B2\u22DC\x03\x02\x02\x02\u02B4" +
		"\u22DE\x03\x02\x02\x02\u02B6\u2315\x03\x02\x02\x02\u02B8\u2317\x03\x02" +
		"\x02\x02\u02BA\u2319\x03\x02\x02\x02\u02BC\u2334\x03\x02\x02\x02\u02BE" +
		"\u2336\x03\x02\x02\x02\u02C0\u2338\x03\x02\x02\x02\u02C2\u2362\x03\x02" +
		"\x02\x02\u02C4\u2364\x03\x02\x02\x02\u02C6\u23AA\x03\x02\x02\x02\u02C8" +
		"\u23AC\x03\x02\x02\x02\u02CA\u23AE\x03\x02\x02\x02\u02CC\u23B0\x03\x02" +
		"\x02\x02\u02CE\u23CE\x03\x02\x02\x02\u02D0\u23E8\x03\x02\x02\x02\u02D2" +
		"\u23F0\x03\x02\x02\x02\u02D4\u23F2\x03\x02\x02\x02\u02D6\u2411\x03\x02" +
		"\x02\x02\u02D8\u2428\x03\x02\x02\x02\u02DA\u244C\x03\x02\x02\x02\u02DC" +
		"\u2469\x03\x02\x02\x02\u02DE\u246B\x03\x02\x02\x02\u02E0\u2485\x03\x02" +
		"\x02\x02\u02E2\u2487\x03\x02\x02\x02\u02E4\u24A1\x03\x02\x02\x02\u02E6" +
		"\u24AA\x03\x02\x02\x02\u02E8\u2535\x03\x02\x02\x02\u02EA\u2563\x03\x02" +
		"\x02\x02\u02EC\u2565\x03\x02\x02\x02\u02EE\u2567\x03\x02\x02\x02\u02F0" +
		"\u2589\x03\x02\x02\x02\u02F2\u25A9\x03\x02\x02\x02\u02F4\u25AB\x03\x02" +
		"\x02\x02\u02F6\u25AD\x03\x02\x02\x02\u02F8\u02FB\x05\x12\n\x02\u02F9\u02FB" +
		"\x05\f\x07\x02\u02FA\u02F8\x03\x02\x02\x02\u02FA\u02F9\x03\x02\x02\x02" +
		"\u02FB\u02FE\x03\x02\x02\x02\u02FC\u02FA\x03\x02\x02\x02\u02FC\u02FD\x03" +
		"\x02\x02\x02\u02FD\u02FF\x03\x02\x02\x02\u02FE\u02FC\x03\x02\x02\x02\u02FF" +
		"\u0300\x07\x02\x02\x03\u0300\x03\x03\x02\x02\x02\u0301\u0302\t\x02\x02" +
		"\x02\u0302\x05\x03\x02\x02\x02\u0303\u0306\x05\x04\x03\x02\u0304\u0306" +
		"\x07\u0191\x02\x02\u0305\u0303\x03\x02\x02\x02\u0305\u0304\x03\x02\x02" +
		"\x02\u0306\x07\x03\x02\x02\x02\u0307\u030C\x05\x04\x03\x02\u0308\u0309" +
		"\x07\v\x02\x02\u0309\u030A\x07\u01C6\x02\x02\u030A\u030C\x07\u01C1\x02" +
		"\x02\u030B\u0307\x03\x02\x02\x02\u030B\u0308\x03\x02\x02\x02\u030C\t\x03" +
		"\x02\x02\x02\u030D\u0310\x05\b\x05\x02\u030E\u0310\x07\u0191\x02\x02\u030F" +
		"\u030D\x03\x02\x02\x02\u030F\u030E\x03\x02\x02\x02\u0310\v\x03\x02\x02" +
		"\x02\u0311\u0318\x07\u01C6\x02\x02\u0312\u0318\x07\u01C7\x02\x02\u0313" +
		"\u0318\x07\u01C5\x02\x02\u0314\u0318\x07\u01B0\x02\x02\u0315\u0318\x07" +
		"\u01B1\x02\x02\u0316\u0318\x05\x10\t\x02\u0317\u0311\x03\x02\x02\x02\u0317" +
		"\u0312\x03\x02\x02\x02\u0317\u0313\x03\x02\x02\x02\u0317\u0314\x03\x02" +
		"\x02\x02\u0317\u0315\x03\x02\x02\x02\u0317\u0316\x03\x02\x02\x02\u0318" +
		"\r\x03\x02\x02\x02\u0319\u031E\x07\u01C6\x02\x02\u031A\u031E\x07\u01C7" +
		"\x02\x02\u031B\u031E\x07\u01C5\x02\x02\u031C\u031E\x05\x10\t\x02\u031D" +
		"\u0319\x03\x02\x02\x02\u031D\u031A\x03\x02\x02\x02\u031D\u031B\x03\x02" +
		"\x02\x02\u031D\u031C\x03\x02\x02\x02\u031E\x0F\x03\x02\x02\x02\u031F\u0323" +
		"\x07\u01A8\x02\x02\u0320\u0322\n\x03\x02\x02\u0321\u0320\x03\x02\x02\x02" +
		"\u0322\u0325\x03\x02\x02\x02\u0323\u0321\x03\x02\x02\x02\u0323\u0324\x03" +
		"\x02\x02\x02\u0324\u0326\x03\x02\x02\x02\u0325\u0323\x03\x02\x02\x02\u0326" +
		"\u0330\x07\u01C7\x02\x02\u0327\u032B\x07\u01A9\x02\x02\u0328\u032A\n\x03" +
		"\x02\x02\u0329\u0328\x03\x02\x02\x02\u032A\u032D\x03\x02\x02\x02\u032B" +
		"\u0329\x03\x02\x02\x02\u032B\u032C\x03\x02\x02\x02\u032C\u032E\x03\x02" +
		"\x02\x02\u032D\u032B\x03\x02\x02\x02\u032E\u0330\x07\u01C7\x02\x02\u032F" +
		"\u031F\x03\x02\x02\x02\u032F\u0327\x03\x02\x02\x02\u0330\x11\x03\x02\x02" +
		"\x02\u0331\u0333\x05\u0200\u0101\x02\u0332\u0334\x05\u021E\u0110\x02\u0333" +
		"\u0332\x03\x02\x02\x02\u0333\u0334\x03\x02\x02\x02\u0334\u0336\x03\x02" +
		"\x02\x02\u0335\u0337\x05\u014C\xA7\x02\u0336\u0335\x03\x02\x02\x02\u0336" +
		"\u0337\x03\x02\x02\x02\u0337\u0339\x03\x02\x02\x02\u0338\u033A\x05\x14" +
		"\v\x02\u0339\u0338\x03\x02\x02\x02\u0339\u033A\x03\x02\x02\x02\u033A\x13" +
		"\x03\x02\x02\x02\u033B\u033D\x05\x18\r\x02\u033C\u033E\x05\x1C\x0F\x02" +
		"\u033D\u033C\x03\x02\x02\x02\u033D\u033E\x03\x02\x02\x02\u033E\u0357\x03" +
		"\x02\x02\x02\u033F\u0343\x05\x1A\x0E\x02\u0340\u0342\x05\f\x07\x02\u0341" +
		"\u0340\x03\x02\x02\x02\u0342\u0345\x03\x02\x02\x02\u0343\u0341\x03\x02" +
		"\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344\u0347\x03\x02\x02\x02\u0345" +
		"\u0343\x03\x02\x02\x02\u0346\u033F\x03\x02\x02\x02\u0347\u034A\x03\x02" +
		"\x02\x02\u0348\u0346\x03\x02\x02\x02\u0348\u0349\x03\x02\x02\x02\u0349" +
		"\u0358\x03\x02\x02\x02\u034A\u0348\x03\x02\x02\x02\u034B\u034F\x05\"\x12" +
		"\x02\u034C\u034E\x05\f\x07\x02\u034D\u034C\x03\x02\x02\x02\u034E\u0351" +
		"\x03\x02\x02\x02\u034F\u034D\x03\x02\x02\x02\u034F\u0350\x03\x02\x02\x02" +
		"\u0350\u0353\x03\x02\x02\x02\u0351\u034F\x03\x02\x02\x02\u0352\u034B\x03" +
		"\x02\x02\x02\u0353\u0356\x03\x02\x02\x02\u0354\u0352\x03\x02\x02\x02\u0354" +
		"\u0355\x03\x02\x02\x02\u0355\u0358\x03\x02\x02\x02\u0356\u0354\x03\x02" +
		"\x02\x02\u0357\u0348\x03\x02\x02\x02\u0357\u0354\x03\x02\x02\x02\u0358" +
		"\u0360\x03\x02\x02\x02\u0359\u035B\x05\f\x07\x02\u035A\u0359\x03\x02\x02" +
		"\x02\u035B\u035E\x03\x02\x02\x02\u035C\u035A\x03\x02\x02\x02\u035C\u035D" +
		"\x03\x02\x02\x02\u035D\u035F\x03\x02\x02\x02\u035E\u035C\x03\x02\x02\x02" +
		"\u035F\u0361\x05\x16\f\x02\u0360\u035C\x03\x02\x02\x02\u0360\u0361\x03" +
		"\x02\x02\x02\u0361\u0371\x03\x02\x02\x02\u0362\u0364\x05\f\x07\x02\u0363" +
		"\u0362\x03\x02\x02\x02\u0364\u0367\x03\x02\x02\x02\u0365\u0363\x03\x02" +
		"\x02\x02\u0365\u0366\x03\x02\x02\x02\u0366\u0368\x03\x02\x02\x02\u0367" +
		"\u0365\x03\x02\x02\x02\u0368\u036C\x056\x1C\x02\u0369\u036B\x05\f\x07" +
		"\x02\u036A\u0369\x03\x02\x02\x02\u036B\u036E\x03\x02\x02\x02\u036C\u036A" +
		"\x03\x02\x02\x02\u036C\u036D\x03\x02\x02\x02\u036D\u0370\x03\x02\x02\x02" +
		"\u036E\u036C\x03\x02\x02\x02\u036F\u0365\x03\x02\x02\x02\u0370\u0373\x03" +
		"\x02\x02\x02\u0371\u036F\x03\x02\x02\x02\u0371\u0372\x03\x02\x02\x02\u0372" +
		"\x15\x03\x02\x02\x02\u0373\u0371\x03\x02\x02\x02\u0374\u0376\x07\x04\x02" +
		"\x02\u0375\u0377\x05\f\x07\x02\u0376\u0375\x03\x02\x02\x02\u0377\u0378" +
		"\x03\x02\x02\x02\u0378\u0376\x03\x02\x02\x02\u0378\u0379\x03\x02\x02\x02" +
		"\u0379\u037A\x03\x02\x02\x02\u037A\u0382\x07\u011E\x02\x02\u037B\u037D" +
		"\x05\f\x07\x02\u037C\u037B\x03\x02\x02\x02\u037D\u037E\x03\x02\x02\x02" +
		"\u037E\u037C\x03\x02\x02\x02\u037E\u037F\x03\x02\x02\x02\u037F\u0380\x03" +
		"\x02\x02\x02\u0380\u0381\x05\u0206\u0104\x02\u0381\u0383\x03\x02\x02\x02" +
		"\u0382\u037C\x03\x02\x02\x02\u0382\u0383\x03\x02\x02\x02\u0383\u0387\x03" +
		"\x02\x02\x02\u0384\u0386\x05\f\x07\x02\u0385\u0384\x03\x02\x02\x02\u0386" +
		"\u0389\x03\x02\x02\x02\u0387\u0385\x03\x02\x02\x02\u0387\u0388\x03\x02" +
		"\x02\x02\u0388\u038A\x03\x02\x02\x02\u0389\u0387\x03\x02\x02\x02\u038A" +
		"\u038E\x07\u01BE\x02\x02\u038B\u038D\x05\f\x07\x02\u038C\u038B\x03\x02" +
		"\x02\x02\u038D\u0390\x03\x02\x02\x02\u038E\u038C\x03\x02\x02\x02\u038E" +
		"\u038F\x03\x02\x02\x02\u038F\x17\x03\x02\x02\x02\u0390\u038E\x03\x02\x02" +
		"\x02\u0391\u0393\x07\u011C\x02\x02\u0392\u0394\x05\f\x07\x02\u0393\u0392" +
		"\x03\x02\x02\x02\u0394\u0395\x03\x02\x02\x02\u0395\u0393\x03\x02\x02\x02" +
		"\u0395\u0396\x03\x02\x02\x02\u0396\u0397\x03\x02\x02\x02\u0397\u039F\x07" +
		"z\x02\x02\u0398\u039A\x05\f\x07\x02\u0399\u0398\x03\x02\x02\x02\u039A" +
		"\u039B\x03\x02\x02\x02\u039B\u0399\x03\x02\x02\x02\u039B\u039C\x03\x02" +
		"\x02\x02\u039C\u039D\x03\x02\x02\x02\u039D\u039E\x052\x1A\x02\u039E\u03A0" +
		"\x03\x02\x02\x02\u039F\u0399\x03\x02\x02\x02\u039F\u03A0\x03\x02\x02\x02" +
		"\u03A0\u03A8\x03\x02\x02\x02\u03A1\u03A3\x05\f\x07\x02\u03A2\u03A1\x03" +
		"\x02\x02\x02\u03A3\u03A4\x03\x02\x02\x02\u03A4\u03A2\x03\x02\x02\x02\u03A4" +
		"\u03A5\x03\x02\x02\x02\u03A5\u03A6\x03\x02\x02\x02\u03A6\u03A7\x054\x1B" +
		"\x02\u03A7\u03A9\x03\x02\x02\x02\u03A8\u03A2\x03\x02\x02\x02\u03A8\u03A9" +
		"\x03\x02\x02\x02\u03A9\u03AD\x03\x02\x02\x02\u03AA\u03AC\x05\f\x07\x02" +
		"\u03AB\u03AA\x03\x02\x02\x02\u03AC\u03AF\x03\x02\x02\x02\u03AD\u03AB\x03" +
		"\x02\x02\x02\u03AD\u03AE\x03\x02\x02\x02\u03AE\u03B0\x03\x02\x02\x02\u03AF" +
		"\u03AD\x03\x02\x02\x02\u03B0\u03B4\x07\u01BE\x02\x02\u03B1\u03B3\x05\f" +
		"\x07\x02\u03B2\u03B1\x03\x02\x02\x02\u03B3\u03B6\x03\x02\x02\x02\u03B4" +
		"\u03B2\x03\x02\x02\x02\u03B4\u03B5\x03\x02\x02\x02\u03B5\x19\x03\x02\x02" +
		"\x02\u03B6\u03B4\x03\x02\x02\x02\u03B7\u03B8\x05,\x17\x02\u03B8\x1B\x03" +
		"\x02\x02\x02\u03B9\u03BD\x07\x03\x02\x02\u03BA\u03BC\x05\f\x07\x02\u03BB" +
		"\u03BA\x03\x02\x02\x02\u03BC\u03BF\x03\x02\x02\x02\u03BD\u03BB\x03\x02" +
		"\x02\x02\u03BD\u03BE\x03\x02\x02\x02\u03BE\u03C0\x03\x02\x02\x02\u03BF" +
		"\u03BD\x03\x02\x02\x02\u03C0\u03C4\x07\u01BE\x02\x02\u03C1\u03C3\x05\f" +
		"\x07\x02\u03C2\u03C1\x03\x02\x02\x02\u03C3\u03C6\x03\x02\x02\x02\u03C4" +
		"\u03C2\x03\x02\x02\x02\u03C4\u03C5\x03\x02\x02\x02\u03C5\u03CE\x03\x02" +
		"\x02\x02\u03C6\u03C4\x03\x02\x02\x02\u03C7\u03CB\x05\x1E\x10\x02\u03C8" +
		"\u03CA\x05\f\x07\x02\u03C9\u03C8\x03\x02\x02\x02\u03CA\u03CD\x03\x02\x02" +
		"\x02\u03CB\u03C9\x03\x02\x02\x02\u03CB\u03CC\x03\x02\x02\x02\u03CC\u03CF" +
		"\x03\x02\x02\x02\u03CD\u03CB\x03\x02\x02\x02\u03CE\u03C7\x03\x02\x02\x02" +
		"\u03CF\u03D0\x03\x02\x02\x02\u03D0\u03CE\x03\x02\x02\x02\u03D0\u03D1\x03" +
		"\x02\x02\x02\u03D1\u03D2\x03\x02\x02\x02\u03D2\u03D4\x07\x04\x02\x02\u03D3" +
		"\u03D5\x05\f\x07\x02\u03D4\u03D3\x03\x02\x02\x02\u03D5\u03D6\x03\x02\x02" +
		"\x02\u03D6\u03D4\x03\x02\x02\x02\u03D6\u03D7\x03\x02\x02\x02\u03D7\u03D8" +
		"\x03\x02\x02\x02\u03D8\u03DC\x07n\x02\x02\u03D9\u03DB\x05\f\x07\x02\u03DA" +
		"\u03D9\x03\x02\x02\x02\u03DB\u03DE\x03\x02\x02\x02\u03DC\u03DA\x03\x02" +
		"\x02\x02\u03DC\u03DD\x03\x02\x02\x02\u03DD\u03DF\x03\x02\x02\x02\u03DE" +
		"\u03DC\x03\x02\x02\x02\u03DF\u03E3\x07\u01BE\x02\x02\u03E0\u03E2\x05\f" +
		"\x07\x02\u03E1\u03E0\x03\x02\x02\x02\u03E2\u03E5\x03\x02\x02\x02\u03E3" +
		"\u03E1\x03\x02\x02\x02\u03E3\u03E4\x03\x02\x02\x02\u03E4\x1D\x03\x02\x02" +
		"\x02\u03E5\u03E3\x03\x02\x02\x02\u03E6\u03E7\x05,\x17\x02\u03E7\u03F1" +
		"\x05&\x14\x02\u03E8\u03EA\x05\f\x07\x02\u03E9\u03E8\x03\x02\x02\x02\u03EA" +
		"\u03EB\x03\x02\x02\x02\u03EB\u03E9\x03\x02\x02\x02\u03EB\u03EC\x03\x02" +
		"\x02\x02\u03EC\u03ED\x03\x02\x02\x02\u03ED\u03EE\x05 \x11\x02\u03EE\u03F0" +
		"\x03\x02\x02\x02\u03EF\u03E9\x03\x02\x02\x02\u03F0\u03F3\x03\x02\x02\x02" +
		"\u03F1\u03EF\x03\x02\x02\x02\u03F1\u03F2\x03\x02\x02\x02\u03F2\x1F\x03" +
		"\x02\x02\x02\u03F3\u03F1\x03\x02\x02\x02\u03F4\u03F5\x05\"\x12\x02\u03F5" +
		"!\x03\x02\x02\x02\u03F6\u03FA\x05.\x18\x02\u03F7\u03F9\x05\f\x07\x02\u03F8" +
		"\u03F7\x03\x02\x02\x02\u03F9\u03FC\x03\x02\x02\x02\u03FA\u03F8\x03\x02" +
		"\x02\x02\u03FA\u03FB\x03\x02\x02\x02\u03FB\u03FD\x03\x02\x02\x02\u03FC" +
		"\u03FA\x03\x02\x02\x02\u03FD\u0401\x07\u01BE\x02\x02\u03FE\u0400\x05\f" +
		"\x07\x02\u03FF\u03FE\x03\x02\x02\x02\u0400\u0403\x03\x02\x02\x02\u0401" +
		"\u03FF\x03\x02\x02\x02\u0401\u0402\x03\x02\x02\x02\u0402\u040D\x03\x02" +
		"\x02\x02\u0403\u0401\x03\x02\x02\x02\u0404\u0408\x05$\x13\x02\u0405\u0407" +
		"\x05\f\x07\x02\u0406\u0405\x03\x02\x02\x02\u0407\u040A\x03\x02\x02\x02" +
		"\u0408\u0406\x03\x02\x02\x02\u0408\u0409\x03\x02\x02\x02\u0409\u040C\x03" +
		"\x02\x02\x02\u040A\u0408\x03\x02\x02\x02\u040B\u0404\x03\x02\x02\x02\u040C" +
		"\u040F\x03\x02\x02\x02\u040D\u040B\x03\x02\x02\x02\u040D\u040E\x03\x02" +
		"\x02\x02\u040E#\x03\x02\x02\x02\u040F\u040D\x03\x02\x02\x02\u0410\u0414" +
		"\x058\x1D\x02\u0411\u0413\x05\f\x07\x02\u0412\u0411\x03\x02\x02\x02\u0413" +
		"\u0416\x03\x02\x02\x02\u0414\u0412\x03\x02\x02\x02\u0414\u0415\x03\x02" +
		"\x02\x02\u0415\u0418\x03\x02\x02\x02\u0416\u0414\x03\x02\x02\x02\u0417" +
		"\u0410\x03\x02\x02\x02\u0418\u0419\x03\x02\x02\x02\u0419\u0417\x03\x02" +
		"\x02\x02\u0419\u041A\x03\x02\x02\x02\u041A\u0428\x03\x02\x02\x02\u041B" +
		"\u041D\x05\f\x07\x02\u041C\u041B\x03\x02\x02\x02\u041D\u0420\x03\x02\x02" +
		"\x02\u041E\u041C\x03\x02\x02\x02\u041E\u041F\x03\x02\x02\x02\u041F\u0421" +
		"\x03\x02\x02\x02\u0420\u041E\x03\x02\x02\x02\u0421\u0425\x07\u01BE\x02" +
		"\x02\u0422\u0424\x05\f\x07\x02\u0423\u0422\x03\x02\x02\x02\u0424\u0427" +
		"\x03\x02\x02\x02\u0425\u0423\x03\x02\x02\x02\u0425\u0426\x03\x02\x02\x02" +
		"\u0426\u0429\x03\x02\x02\x02\u0427\u0425\x03\x02\x02\x02\u0428\u041E\x03" +
		"\x02\x02\x02\u0428\u0429\x03\x02\x02\x02\u0429%\x03\x02\x02\x02\u042A" +
		"\u0432\x07\u0183\x02\x02\u042B\u042D\x05\f\x07\x02\u042C\u042B\x03\x02" +
		"\x02\x02\u042D\u042E\x03\x02\x02\x02\u042E\u042C\x03\x02\x02\x02\u042E" +
		"\u042F\x03\x02\x02\x02\u042F\u0430\x03\x02\x02\x02\u0430\u0431\x07\xBC" +
		"\x02\x02\u0431\u0433\x03\x02\x02\x02\u0432\u042C\x03\x02\x02\x02\u0432" +
		"\u0433\x03\x02\x02\x02\u0433\u0435\x03\x02\x02\x02\u0434\u0436\x05\f\x07" +
		"\x02\u0435\u0434\x03\x02\x02\x02\u0436\u0437\x03\x02\x02\x02\u0437\u0435" +
		"\x03\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438\u0479\x03\x02\x02\x02" +
		"\u0439\u0441\x07\n\x02\x02\u043A\u043C\x05\f\x07\x02\u043B\u043A\x03\x02" +
		"\x02\x02\u043C\u043D\x03\x02\x02\x02\u043D\u043B\x03\x02\x02\x02\u043D" +
		"\u043E\x03\x02\x02\x02\u043E\u043F\x03\x02\x02\x02\u043F\u0440\x07\u015A" +
		"\x02\x02\u0440\u0442\x03\x02\x02\x02\u0441\u043B\x03\x02\x02\x02\u0441" +
		"\u0442\x03\x02\x02\x02\u0442\u0444\x03\x02\x02\x02\u0443\u0445\x05\f\x07" +
		"\x02\u0444\u0443\x03\x02\x02\x02\u0445\u0446\x03\x02\x02\x02\u0446\u0444" +
		"\x03\x02\x02\x02\u0446\u0447\x03\x02\x02\x02\u0447\u0448\x03\x02\x02\x02" +
		"\u0448\u044A\t\x04\x02\x02\u0449\u044B\x05\f\x07\x02\u044A\u0449\x03\x02" +
		"\x02\x02\u044B\u044C\x03\x02\x02\x02\u044C\u044A\x03\x02\x02\x02\u044C" +
		"\u044D\x03\x02\x02\x02\u044D\u044E\x03\x02\x02\x02\u044E\u0456\x07\u011C" +
		"\x02\x02\u044F\u0451\x05\f\x07\x02\u0450\u044F\x03\x02\x02\x02\u0451\u0452" +
		"\x03\x02\x02\x02\u0452\u0450\x03\x02\x02\x02\u0452\u0453\x03\x02\x02\x02" +
		"\u0453\u0454\x03\x02\x02\x02\u0454\u0455\x07\u0102\x02\x02\u0455\u0457" +
		"\x03\x02\x02\x02\u0456\u0450\x03\x02\x02\x02\u0456\u0457\x03\x02\x02\x02" +
		"\u0457\u0459\x03\x02\x02\x02\u0458\u045A\x05\f\x07\x02\u0459\u0458\x03" +
		"\x02\x02\x02\u045A\u045B\x03\x02\x02\x02\u045B\u0459\x03\x02\x02\x02\u045B" +
		"\u045C\x03\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u0461\x05*\x16" +
		"\x02\u045E\u0460\x05\f\x07\x02\u045F\u045E\x03\x02\x02\x02\u0460\u0463" +
		"\x03\x02\x02\x02\u0461\u045F\x03\x02\x02\x02\u0461\u0462\x03\x02\x02\x02" +
		"\u0462\u0464\x03\x02\x02\x02\u0463\u0461\x03\x02\x02\x02\u0464\u0468\x07" +
		"\u01BE\x02\x02\u0465\u0467\x05\f\x07\x02\u0466\u0465\x03\x02\x02\x02\u0467" +
		"\u046A\x03\x02\x02\x02\u0468\u0466\x03\x02\x02\x02\u0468\u0469\x03\x02" +
		"\x02\x02\u0469\u047A\x03\x02\x02\x02\u046A\u0468\x03\x02\x02\x02\u046B" +
		"\u046D\x07%\x02\x02\u046C\u046E\x05\f\x07\x02\u046D\u046C\x03\x02\x02" +
		"\x02\u046E\u046F\x03\x02\x02\x02\u046F\u046D\x03\x02\x02\x02\u046F\u0470" +
		"\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u0473\x07\u0133\x02" +
		"\x02\u0472\u0474\x05\f\x07\x02\u0473\u0472\x03\x02\x02\x02\u0474\u0475" +
		"\x03\x02\x02\x02\u0475\u0473\x03\x02\x02\x02\u0475\u0476\x03\x02\x02\x02" +
		"\u0476\u0477\x03\x02\x02\x02\u0477\u0478\x05(\x15\x02\u0478\u047A\x03" +
		"\x02\x02\x02\u0479\u0439\x03\x02\x02\x02\u0479\u046B\x03\x02\x02\x02\u047A" +
		"\u047E\x03\x02\x02\x02\u047B\u047D\x05\f\x07\x02\u047C\u047B\x03\x02\x02" +
		"\x02\u047D\u0480\x03\x02\x02\x02\u047E\u047C\x03\x02\x02\x02\u047E\u047F" +
		"\x03\x02\x02\x02\u047F\u0481\x03\x02\x02\x02\u0480\u047E\x03\x02\x02\x02" +
		"\u0481\u0485\x07\u01BE\x02\x02\u0482\u0484\x05\f\x07\x02\u0483\u0482\x03" +
		"\x02\x02\x02\u0484\u0487\x03\x02\x02\x02\u0485\u0483\x03\x02\x02\x02\u0485" +
		"\u0486\x03\x02\x02\x02\u0486\'\x03\x02\x02\x02\u0487\u0485\x03\x02\x02" +
		"\x02\u0488\u0489\x05\u023E\u0120\x02\u0489)\x03\x02\x02\x02\u048A\u0494" +
		"\x05\u02A8\u0155\x02\u048B\u048D\x05\f\x07\x02\u048C\u048B\x03\x02\x02" +
		"\x02\u048D\u048E\x03\x02\x02\x02\u048E\u048C\x03\x02\x02\x02\u048E\u048F" +
		"\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u0491\x05\u02A8\u0155" +
		"\x02\u0491\u0493\x03\x02\x02\x02\u0492\u048C\x03\x02\x02\x02\u0493\u0496" +
		"\x03\x02\x02\x02\u0494\u0492\x03\x02\x02\x02\u0494\u0495\x03\x02\x02\x02" +
		"\u0495\u049C\x03\x02\x02\x02\u0496\u0494\x03\x02\x02\x02\u0497\u049C\x07" +
		"\xD0\x02\x02\u0498\u049C\x07\u0108\x02\x02\u0499\u049C\x07\xD7\x02\x02" +
		"\u049A\u049C\x07\xA4\x02\x02\u049B\u048A\x03\x02\x02\x02\u049B\u0497\x03" +
		"\x02\x02\x02\u049B\u0498\x03\x02\x02\x02\u049B\u0499\x03\x02\x02\x02\u049B" +
		"\u049A\x03\x02\x02\x02\u049C+\x03\x02\x02\x02\u049D\u049F\x050\x19\x02" +
		"\u049E\u04A0\x05\f\x07\x02\u049F\u049E\x03\x02\x02\x02\u04A0\u04A1\x03" +
		"\x02\x02\x02\u04A1\u049F\x03\x02\x02\x02\u04A1\u04A2\x03\x02\x02\x02\u04A2" +
		"\u04A3\x03\x02\x02\x02\u04A3\u04AB\x07\u0147\x02\x02\u04A4\u04A6\x05\f" +
		"\x07\x02\u04A5\u04A4\x03\x02\x02\x02\u04A6\u04A7\x03\x02\x02\x02\u04A7" +
		"\u04A5\x03\x02\x02\x02\u04A7\u04A8\x03\x02\x02\x02\u04A8\u04A9\x03\x02" +
		"\x02\x02\u04A9\u04AA\x05\u0238\u011D\x02\u04AA\u04AC\x03\x02\x02\x02\u04AB" +
		"\u04A5\x03\x02\x02\x02\u04AB\u04AC\x03\x02\x02\x02\u04AC\u04B0\x03\x02" +
		"\x02\x02\u04AD\u04AF\x05\f\x07\x02\u04AE\u04AD\x03\x02\x02\x02\u04AF\u04B2" +
		"\x03\x02\x02\x02\u04B0\u04AE\x03\x02\x02\x02\u04B0\u04B1\x03\x02\x02\x02" +
		"\u04B1\u04B3\x03\x02\x02\x02\u04B2\u04B0\x03\x02\x02\x02\u04B3\u04B7\x07" +
		"\u01BE\x02\x02\u04B4\u04B6\x05\f\x07\x02\u04B5\u04B4\x03\x02\x02\x02\u04B6" +
		"\u04B9\x03\x02\x02\x02\u04B7\u04B5\x03\x02\x02\x02\u04B7\u04B8\x03\x02" +
		"\x02\x02\u04B8-\x03\x02\x02\x02\u04B9\u04B7\x03\x02\x02\x02\u04BA\u04BB" +
		"\x07\u01C4\x02\x02\u04BB/\x03\x02\x02\x02\u04BC\u04BD\x07\u01C4\x02\x02" +
		"\u04BD1\x03\x02\x02\x02\u04BE\u04C0\x07\u0184\x02\x02\u04BF\u04C1\x05" +
		"\f\x07\x02\u04C0\u04BF\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2" +
		"\u04C0\x03\x02\x02\x02\u04C2\u04C3\x03\x02\x02\x02\u04C3\u04C4\x03\x02" +
		"\x02\x02\u04C4\u04CE\x05\u023E\u0120\x02\u04C5\u04C7\x05\f\x07\x02\u04C6" +
		"\u04C5\x03\x02\x02\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8\u04C6\x03\x02" +
		"\x02\x02\u04C8\u04C9\x03\x02\x02\x02\u04C9\u04CA\x03\x02\x02\x02\u04CA" +
		"\u04CB\x05\u023E\u0120\x02\u04CB\u04CD\x03\x02\x02\x02\u04CC\u04C6\x03" +
		"\x02\x02\x02\u04CD\u04D0\x03\x02\x02\x02\u04CE\u04CC\x03\x02\x02\x02\u04CE" +
		"\u04CF\x03\x02\x02\x02\u04CF3\x03\x02\x02\x02\u04D0\u04CE\x03\x02\x02" +
		"\x02\u04D1\u04D3\x07\xBB\x02\x02\u04D2\u04D4\x05\f\x07\x02\u04D3\u04D2" +
		"\x03\x02\x02\x02\u04D4\u04D5\x03\x02\x02\x02\u04D5\u04D3\x03\x02\x02\x02" +
		"\u04D5\u04D6\x03\x02\x02\x02\u04D6\u04D7\x03\x02\x02\x02\u04D7\u04D8\x05" +
		"\u023E\u0120\x02\u04D85\x03\x02\x02\x02\u04D9\u04DD\x05\u02CE\u0168\x02" +
		"\u04DA\u04DC\x05\f\x07\x02\u04DB\u04DA\x03\x02\x02\x02\u04DC\u04DF\x03" +
		"\x02\x02\x02\u04DD\u04DB\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE" +
		"\u04E0\x03\x02\x02\x02\u04DF\u04DD\x03\x02\x02\x02\u04E0\u04E1\x07\u01BE" +
		"\x02\x02\u04E1\u04ED\x03\x02\x02\x02\u04E2\u04E6\x05\u02D6\u016C\x02\u04E3" +
		"\u04E5\x05\f\x07\x02\u04E4\u04E3\x03\x02\x02\x02\u04E5\u04E8\x03\x02\x02" +
		"\x02\u04E6\u04E4\x03\x02\x02\x02\u04E6\u04E7\x03\x02\x02\x02\u04E7\u04E9" +
		"\x03\x02\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E9\u04EA\x07\u01BE\x02" +
		"\x02\u04EA\u04ED\x03\x02\x02\x02\u04EB\u04ED\x05\f\x07\x02\u04EC\u04D9" +
		"\x03\x02\x02\x02\u04EC\u04E2\x03\x02\x02\x02\u04EC\u04EB\x03\x02\x02\x02" +
		"\u04ED7\x03\x02\x02\x02\u04EE\u050D\x05\u0110\x89\x02\u04EF\u050D\x05" +
		"\u010A\x86\x02\u04F0\u050D\x05\u0104\x83\x02\u04F1\u050D\x05\xF6|\x02" +
		"\u04F2\u050D\x05\xF4{\x02\u04F3\u050D\x05\xF0y\x02\u04F4\u050D\x05\xEE" +
		"x\x02\u04F5\u050D\x05\xECw\x02\u04F6\u050D\x05\xEAv\x02\u04F7\u050D\x05" +
		"\xCEh\x02\u04F8\u050D\x05\xC4c\x02\u04F9\u050D\x05\xBE`\x02\u04FA\u050D" +
		"\x05\xB6\\\x02\u04FB\u050D\x05\xB8]\x02\u04FC\u050D\x05\xB2Z\x02\u04FD" +
		"\u050D\x05\xBA^\x02\u04FE\u050D\x05\xB0Y\x02\u04FF\u050D\x05\xA6T\x02" +
		"\u0500\u050D\x05\xA4S\x02\u0501\u050D\x05\x80A\x02\u0502\u050D\x05n8\x02" +
		"\u0503\u050D\x05\xAEX\x02\u0504\u050D\x05j6\x02\u0505\u050D\x05d3\x02" +
		"\u0506\u050D\x05R*\x02\u0507\u050D\x05N(\x02\u0508\u050D\x05H%\x02\u0509" +
		"\u050D\x05B\"\x02\u050A\u050D\x05> \x02\u050B\u050D\x05:\x1E\x02\u050C" +
		"\u04EE\x03\x02\x02\x02\u050C\u04EF\x03\x02\x02\x02\u050C\u04F0\x03\x02" +
		"\x02\x02\u050C\u04F1\x03\x02\x02\x02\u050C\u04F2\x03\x02\x02\x02\u050C" +
		"\u04F3\x03\x02\x02\x02\u050C\u04F4\x03\x02\x02\x02\u050C\u04F5\x03\x02" +
		"\x02\x02\u050C\u04F6\x03\x02\x02\x02\u050C\u04F7\x03\x02\x02\x02\u050C" +
		"\u04F8\x03\x02\x02\x02\u050C\u04F9\x03\x02\x02\x02\u050C\u04FA\x03\x02" +
		"\x02\x02\u050C\u04FB\x03\x02\x02\x02\u050C\u04FC\x03\x02\x02\x02\u050C" +
		"\u04FD\x03\x02\x02\x02\u050C\u04FE\x03\x02\x02\x02\u050C\u04FF\x03\x02" +
		"\x02\x02\u050C\u0500\x03\x02\x02\x02\u050C\u0501\x03\x02\x02\x02\u050C" +
		"\u0502\x03\x02\x02\x02\u050C\u0503\x03\x02\x02\x02\u050C\u0504\x03\x02" +
		"\x02\x02\u050C\u0505\x03\x02\x02\x02\u050C\u0506\x03\x02\x02\x02\u050C" +
		"\u0507\x03\x02\x02\x02\u050C\u0508\x03\x02\x02\x02\u050C\u0509\x03\x02" +
		"\x02\x02\u050C\u050A\x03\x02\x02\x02\u050C\u050B\x03\x02\x02\x02\u050D" +
		"9\x03\x02\x02\x02\u050E\u0510\x07\u013D\x02\x02\u050F\u0511\x05\f\x07" +
		"\x02\u0510\u050F\x03\x02\x02\x02\u0511\u0512\x03\x02\x02\x02\u0512\u0510" +
		"\x03\x02\x02\x02\u0512\u0513\x03\x02\x02\x02\u0513\u0514\x03\x02\x02\x02" +
		"\u0514\u0522\x05<\x1F\x02\u0515\u0517\x05\f\x07\x02\u0516\u0515\x03\x02" +
		"\x02\x02\u0517\u0518\x03\x02\x02\x02\u0518\u0516\x03\x02\x02\x02\u0518" +
		"\u0519\x03\x02\x02\x02\u0519\u051A\x03\x02\x02\x02\u051A\u051C\x07\xB7" +
		"\x02\x02\u051B\u051D\x05\f\x07\x02\u051C\u051B\x03\x02\x02\x02\u051D\u051E" +
		"\x03\x02\x02\x02\u051E\u051C\x03\x02\x02\x02\u051E\u051F\x03\x02\x02\x02" +
		"\u051F\u0520\x03\x02\x02\x02\u0520\u0521\x05\xD8m\x02\u0521\u0523\x03" +
		"\x02\x02\x02\u0522\u0516\x03\x02\x02\x02\u0522\u0523\x03\x02\x02\x02\u0523" +
		"\u0539\x03\x02\x02\x02\u0524\u0526\x05\f\x07\x02\u0525\u0524\x03\x02\x02" +
		"\x02\u0526\u0527\x03\x02\x02\x02\u0527\u0525\x03\x02\x02\x02\u0527\u0528" +
		"\x03\x02\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\u052B\x07\u019C\x02" +
		"\x02\u052A\u052C\x05\f\x07\x02\u052B\u052A\x03\x02\x02\x02\u052C\u052D" +
		"\x03\x02\x02\x02\u052D\u052B\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02" +
		"\u052E\u052F\x03\x02\x02\x02\u052F\u0537\x07\xF9\x02\x02\u0530\u0532\x05" +
		"\f\x07\x02\u0531\u0530\x03\x02\x02\x02\u0532\u0533\x03\x02\x02\x02\u0533" +
		"\u0531\x03\x02\x02\x02\u0533\u0534\x03\x02\x02\x02\u0534\u0535\x03\x02" +
		"\x02\x02\u0535\u0536\x07\u019D\x02\x02\u0536\u0538\x03\x02\x02\x02\u0537" +
		"\u0531\x03\x02\x02\x02\u0537\u0538\x03\x02\x02\x02\u0538\u053A\x03\x02" +
		"\x02\x02\u0539\u0525\x03\x02\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A" +
		"\u0542\x03\x02\x02\x02\u053B\u053D\x05\f\x07\x02\u053C\u053B\x03\x02\x02" +
		"\x02\u053D\u053E\x03\x02\x02\x02\u053E\u053C\x03\x02\x02\x02\u053E\u053F" +
		"\x03\x02\x02\x02\u053F\u0540\x03\x02\x02\x02\u0540\u0541\x05\u0118\x8D" +
		"\x02\u0541\u0543\x03\x02\x02\x02\u0542\u053C\x03\x02\x02\x02\u0542\u0543" +
		"\x03\x02\x02\x02\u0543\u054B\x03\x02\x02\x02\u0544\u0546\x05\f\x07\x02" +
		"\u0545\u0544\x03\x02\x02\x02\u0546\u0547\x03\x02\x02\x02\u0547\u0545\x03" +
		"\x02\x02\x02\u0547\u0548\x03\x02\x02\x02\u0548\u0549\x03\x02\x02\x02\u0549" +
		"\u054A\x07\x90\x02\x02\u054A\u054C\x03\x02\x02\x02\u054B\u0545\x03\x02" +
		"\x02\x02\u054B\u054C\x03\x02\x02\x02\u054C;\x03\x02\x02\x02\u054D\u054E" +
		"\x05\u023E\u0120\x02\u054E=\x03\x02\x02\x02\u054F\u0551\x07\u0139\x02" +
		"\x02\u0550\u0552\x05\f\x07\x02\u0551\u0550\x03\x02\x02\x02\u0552\u0553" +
		"\x03\x02\x02\x02\u0553\u0551\x03\x02\x02\x02\u0553\u0554\x03\x02\x02\x02" +
		"\u0554\u0555\x03\x02\x02\x02\u0555\u055D\x05@!\x02\u0556\u0558\x05\f\x07" +
		"\x02\u0557\u0556\x03\x02\x02\x02\u0558\u0559\x03\x02\x02\x02\u0559\u0557" +
		"\x03\x02\x02\x02\u0559\u055A\x03\x02\x02\x02\u055A\u055B\x03\x02\x02\x02" +
		"\u055B\u055C\x07\u0126\x02\x02\u055C\u055E\x03\x02\x02\x02\u055D\u0557" +
		"\x03\x02\x02\x02\u055D\u055E\x03\x02\x02\x02\u055E\u056C\x03\x02\x02\x02" +
		"\u055F\u0561\x05\f\x07\x02\u0560\u055F\x03\x02\x02\x02\u0561\u0562\x03" +
		"\x02\x02\x02\u0562\u0560\x03\x02\x02\x02\u0562\u0563\x03\x02\x02\x02\u0563" +
		"\u0564\x03\x02\x02\x02\u0564\u0566\x07\xD4\x02\x02\u0565\u0567\x05\f\x07" +
		"\x02\u0566\u0565\x03\x02\x02\x02\u0567\u0568\x03\x02\x02\x02\u0568\u0566" +
		"\x03\x02\x02\x02\u0568\u0569\x03\x02\x02\x02\u0569\u056A\x03\x02\x02\x02" +
		"\u056A";
	private static readonly _serializedATNSegment6: string =
		"\u056B\x05\u0140\xA1\x02\u056B\u056D\x03\x02\x02\x02\u056C\u0560\x03\x02" +
		"\x02\x02\u056C\u056D\x03\x02\x02\x02\u056D\u056F\x03\x02\x02\x02\u056E" +
		"\u0570\x05\f\x07\x02\u056F\u056E\x03\x02\x02\x02\u0570\u0571\x03\x02\x02" +
		"\x02\u0571\u056F\x03\x02\x02\x02\u0571\u0572\x03\x02\x02\x02\u0572\u0573" +
		"\x03\x02\x02\x02\u0573\u0581\x05\u0144\xA3\x02\u0574\u0576\x05\f\x07\x02" +
		"\u0575\u0574\x03\x02\x02\x02\u0576\u0577\x03\x02\x02\x02\u0577\u0575\x03" +
		"\x02\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578\u0579\x03\x02\x02\x02\u0579" +
		"\u057B\x07\xFA\x02\x02\u057A\u057C\x05\f\x07\x02\u057B\u057A\x03\x02\x02" +
		"\x02\u057C\u057D\x03\x02\x02\x02\u057D\u057B\x03\x02\x02\x02\u057D\u057E" +
		"\x03\x02\x02\x02\u057E\u057F\x03\x02\x02\x02\u057F\u0580\x05\u0144\xA3" +
		"\x02\u0580\u0582\x03\x02\x02\x02\u0581\u0575\x03\x02\x02\x02\u0581\u0582" +
		"\x03\x02\x02\x02\u0582\u058A\x03\x02\x02\x02\u0583\u0585\x05\f\x07\x02" +
		"\u0584\u0583\x03\x02\x02\x02\u0585\u0586\x03\x02\x02\x02\u0586\u0584\x03" +
		"\x02\x02\x02\u0586\u0587\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588" +
		"\u0589\x07\x8F\x02\x02\u0589\u058B\x03\x02\x02\x02\u058A\u0584\x03\x02" +
		"\x02\x02\u058A\u058B\x03\x02\x02\x02\u058B?\x03\x02\x02\x02\u058C\u058D" +
		"\x07\u01C4\x02\x02\u058DA\x03\x02\x02\x02\u058E\u0590\x07\u012C\x02\x02" +
		"\u058F\u0591\x05\f\x07\x02\u0590\u058F\x03\x02\x02\x02\u0591\u0592\x03" +
		"\x02\x02\x02\u0592\u0590\x03\x02\x02\x02\u0592\u0593\x03\x02\x02\x02\u0593" +
		"\u0594\x03\x02\x02\x02\u0594\u05A2\x05F$\x02\u0595\u0597\x05\f\x07\x02" +
		"\u0596\u0595\x03\x02\x02\x02\u0597\u0598\x03\x02\x02\x02\u0598\u0596\x03" +
		"\x02\x02\x02\u0598\u0599\x03\x02\x02\x02\u0599\u059A\x03\x02\x02\x02\u059A" +
		"\u059C\x07\xB7\x02\x02\u059B\u059D\x05\f\x07\x02\u059C\u059B\x03\x02\x02" +
		"\x02\u059D\u059E\x03\x02\x02\x02\u059E\u059C\x03\x02\x02\x02\u059E\u059F" +
		"\x03\x02\x02\x02\u059F\u05A0\x03\x02\x02\x02\u05A0\u05A1\x05D#\x02\u05A1" +
		"\u05A3\x03\x02\x02\x02\u05A2\u0596\x03\x02\x02\x02\u05A2\u05A3\x03\x02" +
		"\x02\x02\u05A3C\x03\x02\x02\x02\u05A4\u05A5\x05\u02EA\u0176\x02\u05A5" +
		"E\x03\x02\x02\x02\u05A6\u05A7\x05\u023E\u0120\x02\u05A7G\x03\x02\x02\x02" +
		"\u05A8\u05AA\x07\u0126\x02\x02\u05A9\u05AB\x05\f\x07\x02\u05AA\u05A9\x03" +
		"\x02\x02\x02\u05AB\u05AC\x03\x02\x02\x02\u05AC\u05AA\x03\x02\x02\x02\u05AC" +
		"\u05AD\x03\x02\x02\x02\u05AD\u05AE\x03\x02\x02\x02\u05AE\u05B0\x07\u01A6" +
		"\x02\x02\u05AF\u05B1\x05\f\x07\x02\u05B0\u05AF\x03\x02\x02\x02\u05B1\u05B2" +
		"\x03\x02\x02\x02\u05B2\u05B0\x03\x02\x02\x02\u05B2\u05B3\x03\x02\x02\x02" +
		"\u05B3\u05B4\x03\x02\x02\x02\u05B4\u05CB\x05L\'\x02\u05B5\u05B7\x05\f" +
		"\x07\x02\u05B6\u05B5\x03\x02\x02\x02\u05B7\u05B8\x03\x02\x02\x02\u05B8" +
		"\u05B6\x03\x02\x02\x02\u05B8\u05B9\x03\x02\x02\x02\u05B9\u05BA\x03\x02" +
		"\x02\x02\u05BA\u05C2\x07\u0179\x02\x02\u05BB\u05BD\x05\f\x07\x02\u05BC" +
		"\u05BB\x03\x02\x02\x02\u05BD\u05BE\x03\x02\x02\x02\u05BE\u05BC\x03\x02" +
		"\x02\x02\u05BE\u05BF\x03\x02\x02\x02\u05BF\u05C0\x03\x02\x02\x02\u05C0" +
		"\u05C1\x07\xD6\x02\x02\u05C1\u05C3\x03\x02\x02\x02\u05C2\u05BC\x03\x02" +
		"\x02\x02\u05C2\u05C3\x03\x02\x02\x02\u05C3\u05C5\x03\x02\x02\x02\u05C4" +
		"\u05C6\x05\f\x07\x02\u05C5\u05C4\x03\x02\x02\x02\u05C6\u05C7\x03\x02\x02" +
		"\x02\u05C7\u05C5\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02\u05C8\u05C9" +
		"\x03\x02\x02\x02\u05C9\u05CA\x05J&\x02\u05CA\u05CC\x03\x02\x02\x02\u05CB" +
		"\u05B6\x03\x02\x02\x02\u05CB\u05CC\x03\x02\x02\x02\u05CC\u05DC\x03\x02" +
		"\x02\x02\u05CD\u05CF\x05\f\x07\x02\u05CE\u05CD\x03\x02\x02\x02\u05CF\u05D0" +
		"\x03\x02\x02\x02\u05D0\u05CE\x03\x02\x02\x02\u05D0\u05D1\x03\x02\x02\x02" +
		"\u05D1\u05D8\x03\x02\x02\x02\u05D2\u05D4\x07\xC9\x02\x02\u05D3\u05D5\x05" +
		"\f\x07\x02\u05D4\u05D3\x03\x02\x02\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6" +
		"\u05D4\x03\x02\x02\x02\u05D6\u05D7\x03\x02\x02\x02\u05D7\u05D9\x03\x02" +
		"\x02\x02\u05D8\u05D2\x03\x02\x02\x02\u05D8\u05D9\x03\x02\x02\x02\u05D9" +
		"\u05DA\x03\x02\x02\x02\u05DA\u05DB\x07\u01A7\x02\x02\u05DB\u05DD\x03\x02" +
		"\x02\x02\u05DC\u05CE\x03\x02\x02\x02\u05DC\u05DD\x03\x02\x02\x02\u05DD" +
		"I\x03\x02\x02\x02\u05DE\u05DF\t\x05\x02\x02\u05DFK\x03\x02\x02\x02\u05E0" +
		"\u05E1\t\x05\x02\x02\u05E1M\x03\x02\x02\x02\u05E2\u05E4\x07\u0125\x02" +
		"\x02\u05E3\u05E5\x05\f\x07\x02\u05E4\u05E3\x03\x02\x02\x02\u05E5\u05E6" +
		"\x03\x02\x02\x02\u05E6\u05E4\x03\x02\x02\x02\u05E6\u05E7\x03\x02\x02\x02" +
		"\u05E7\u05E8\x03\x02\x02\x02\u05E8\u05F0\x05\u02A8\u0155\x02\u05E9\u05EB" +
		"\x05\f\x07\x02\u05EA\u05E9\x03\x02\x02\x02\u05EB\u05EC\x03\x02\x02\x02" +
		"\u05EC\u05EA\x03\x02\x02\x02\u05EC\u05ED\x03\x02\x02\x02\u05ED\u05EE\x03" +
		"\x02\x02\x02\u05EE\u05EF\t\x06\x02\x02\u05EF\u05F1\x03\x02\x02\x02\u05F0" +
		"\u05EA\x03\x02\x02\x02\u05F0\u05F1\x03\x02\x02\x02\u05F1\u05F9\x03\x02" +
		"\x02\x02\u05F2\u05F4\x05\f\x07\x02\u05F3\u05F2\x03\x02\x02\x02\u05F4\u05F5" +
		"\x03\x02\x02\x02\u05F5\u05F3\x03\x02\x02\x02\u05F5\u05F6\x03\x02\x02\x02" +
		"\u05F6\u05F7\x03\x02\x02\x02\u05F7\u05F8\x07\u0126\x02\x02\u05F8\u05FA" +
		"\x03\x02\x02\x02\u05F9\u05F3\x03\x02\x02\x02\u05F9\u05FA\x03\x02\x02\x02" +
		"\u05FA\u0608\x03\x02\x02\x02\u05FB\u05FD\x05\f\x07\x02\u05FC\u05FB\x03" +
		"\x02\x02\x02\u05FD\u05FE\x03\x02\x02\x02\u05FE\u05FC\x03\x02\x02\x02\u05FE" +
		"\u05FF\x03\x02\x02\x02\u05FF\u0600\x03\x02\x02\x02\u0600\u0602\x07\xD4" +
		"\x02\x02\u0601\u0603\x05\f\x07\x02\u0602\u0601\x03\x02\x02\x02\u0603\u0604" +
		"\x03\x02\x02\x02\u0604\u0602\x03\x02\x02\x02\u0604\u0605\x03\x02\x02\x02" +
		"\u0605\u0606\x03\x02\x02\x02\u0606\u0607\x05\u0140\xA1\x02\u0607\u0609" +
		"\x03\x02\x02\x02\u0608\u05FC\x03\x02\x02\x02\u0608\u0609\x03\x02\x02\x02" +
		"\u0609\u0646\x03\x02\x02\x02\u060A\u060C\x05\f\x07\x02\u060B\u060A\x03" +
		"\x02\x02\x02\u060C\u060D\x03\x02\x02\x02\u060D\u060B\x03\x02\x02\x02\u060D" +
		"\u060E\x03\x02\x02\x02\u060E\u060F\x03\x02\x02\x02\u060F\u0626\x05P)\x02" +
		"\u0610\u0612\x05\f\x07\x02\u0611\u0610\x03\x02\x02\x02\u0612\u0613\x03" +
		"\x02\x02\x02\u0613\u0611\x03\x02\x02\x02\u0613\u0614\x03\x02\x02\x02\u0614" +
		"\u0615\x03\x02\x02\x02\u0615\u061D\x07\xDB\x02\x02\u0616\u0618\x05\f\x07" +
		"\x02\u0617\u0616\x03\x02\x02\x02\u0618\u0619\x03\x02\x02\x02\u0619\u0617" +
		"\x03\x02\x02\x02\u0619\u061A\x03\x02\x02\x02\u061A\u061B\x03\x02\x02\x02" +
		"\u061B\u061C\x07\xD6\x02\x02\u061C\u061E\x03\x02\x02\x02\u061D\u0617\x03" +
		"\x02\x02\x02\u061D\u061E\x03\x02\x02\x02\u061E\u0620\x03\x02\x02\x02\u061F" +
		"\u0621\x05\f\x07\x02\u0620\u061F\x03\x02\x02\x02\u0621\u0622\x03\x02\x02" +
		"\x02\u0622\u0620\x03\x02\x02\x02\u0622\u0623\x03\x02\x02\x02\u0623\u0624" +
		"\x03\x02\x02\x02\u0624\u0625\x05\u0184\xC3\x02\u0625\u0627\x03\x02\x02" +
		"\x02\u0626\u0611\x03\x02\x02\x02\u0626\u0627\x03\x02\x02\x02\u0627\u0647" +
		"\x03\x02\x02\x02\u0628\u062A\x05\f\x07\x02\u0629\u0628\x03\x02\x02\x02" +
		"\u062A\u062B\x03\x02\x02\x02\u062B\u0629\x03\x02\x02\x02\u062B\u062C\x03" +
		"\x02\x02\x02\u062C\u062D\x03\x02\x02\x02\u062D\u0635\x07\xDB\x02\x02\u062E" +
		"\u0630\x05\f\x07\x02\u062F\u062E\x03\x02\x02\x02\u0630\u0631\x03\x02\x02" +
		"\x02\u0631\u062F\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02\u0632\u0633" +
		"\x03\x02\x02\x02\u0633\u0634\x07\xD6\x02\x02\u0634\u0636\x03\x02\x02\x02" +
		"\u0635\u062F\x03\x02\x02\x02\u0635\u0636\x03\x02\x02\x02\u0636\u0638\x03" +
		"\x02\x02\x02\u0637\u0639\x05\f\x07\x02\u0638\u0637\x03\x02\x02\x02\u0639" +
		"\u063A\x03\x02\x02\x02\u063A\u0638\x03\x02\x02\x02\u063A\u063B\x03\x02" +
		"\x02\x02\u063B\u063C\x03\x02\x02\x02\u063C\u0644\x05\u0184\xC3\x02\u063D" +
		"\u063F\x05\f\x07\x02\u063E\u063D\x03\x02\x02\x02\u063F\u0640\x03\x02\x02" +
		"\x02\u0640\u063E\x03\x02\x02\x02\u0640\u0641\x03\x02\x02\x02\u0641\u0642" +
		"\x03\x02\x02\x02\u0642\u0643\x05P)\x02\u0643\u0645\x03\x02\x02\x02\u0644" +
		"\u063E\x03\x02\x02\x02\u0644\u0645\x03\x02\x02\x02\u0645\u0647\x03\x02" +
		"\x02\x02\u0646\u060B\x03\x02\x02\x02\u0646\u0629\x03\x02\x02\x02\u0646" +
		"\u0647\x03\x02\x02\x02\u0647\u0651\x03\x02\x02\x02\u0648\u064A\x05\f\x07" +
		"\x02\u0649\u0648\x03\x02\x02\x02\u064A\u064B\x03\x02\x02\x02\u064B\u0649" +
		"\x03\x02\x02\x02\u064B\u064C\x03\x02\x02\x02\u064C\u064F\x03\x02\x02\x02" +
		"\u064D\u0650\x05\u0114\x8B\x02\u064E\u0650\x05\u0118\x8D\x02\u064F\u064D" +
		"\x03\x02\x02\x02\u064F\u064E\x03\x02\x02\x02\u0650\u0652\x03\x02\x02\x02" +
		"\u0651\u0649\x03\x02\x02\x02\u0651\u0652\x03\x02\x02\x02\u0652\u065A\x03" +
		"\x02\x02\x02\u0653\u0655\x05\f\x07\x02\u0654\u0653\x03\x02\x02\x02\u0655" +
		"\u0656\x03\x02\x02\x02\u0656\u0654\x03\x02\x02\x02\u0656\u0657\x03\x02" +
		"\x02\x02\u0657\u0658\x03\x02\x02\x02\u0658\u0659\x07\x8E\x02\x02\u0659" +
		"\u065B\x03\x02\x02\x02\u065A\u0654\x03\x02\x02\x02\u065A\u065B\x03\x02" +
		"\x02\x02\u065BO\x03\x02\x02\x02\u065C\u065E\x07\u018B\x02\x02\u065D\u065F" +
		"\x05\f\x07\x02\u065E\u065D\x03\x02\x02\x02\u065F\u0660\x03\x02\x02\x02" +
		"\u0660\u065E\x03\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0663\x03" +
		"\x02\x02\x02\u0662\u065C\x03\x02\x02\x02\u0662\u0663\x03\x02\x02\x02\u0663" +
		"\u066A\x03\x02\x02\x02\u0664\u0666\x07\xF9\x02\x02\u0665\u0667\x05\f\x07" +
		"\x02\u0666\u0665\x03\x02\x02\x02\u0667\u0668\x03\x02\x02\x02\u0668\u0666" +
		"\x03\x02\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669\u066B\x03\x02\x02\x02" +
		"\u066A\u0664\x03\x02\x02\x02\u066A\u066B\x03\x02\x02\x02\u066B\u066C\x03" +
		"\x02\x02\x02\u066C\u0695\x07\xE8\x02\x02\u066D\u0675\x07\u01A5\x02\x02" +
		"\u066E\u0670\x05\f\x07\x02\u066F\u066E\x03\x02\x02\x02\u0670\u0671\x03" +
		"\x02\x02\x02\u0671\u066F\x03\x02\x02\x02\u0671\u0672\x03\x02\x02\x02\u0672" +
		"\u0673\x03\x02\x02\x02\u0673\u0674\x07\xFF\x02\x02\u0674\u0676\x03\x02" +
		"\x02\x02\u0675\u066F\x03\x02\x02\x02\u0675\u0676\x03\x02\x02\x02\u0676" +
		"\u067E\x03\x02\x02\x02\u0677\u0679\x05\f\x07\x02\u0678\u0677\x03\x02\x02" +
		"\x02\u0679\u067A\x03\x02\x02\x02\u067A\u0678\x03\x02\x02\x02\u067A\u067B" +
		"\x03\x02\x02\x02\u067B\u067C\x03\x02\x02\x02\u067C\u067D\x07\xE8\x02\x02" +
		"\u067D\u067F\x03\x02\x02\x02\u067E\u0678\x03\x02\x02\x02\u067E\u067F\x03" +
		"\x02\x02\x02\u067F\u0695\x03\x02\x02\x02\u0680\u0682\x07\u019C\x02\x02" +
		"\u0681\u0683\x05\f\x07\x02\u0682\u0681\x03\x02\x02\x02\u0683\u0684\x03" +
		"\x02\x02\x02\u0684\u0682\x03\x02\x02\x02\u0684\u0685\x03\x02\x02\x02\u0685" +
		"\u0692\x03\x02\x02\x02\u0686\u0693\x07\u01A0\x02\x02\u0687\u0693\x07\u019E" +
		"\x02\x02\u0688\u0690\x07\xF9\x02\x02\u0689\u068B\x05\f\x07\x02\u068A\u0689" +
		"\x03\x02\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C\u068A\x03\x02\x02\x02" +
		"\u068C\u068D\x03\x02\x02\x02\u068D\u068E\x03\x02\x02\x02\u068E\u068F\x07" +
		"\u019D\x02\x02\u068F\u0691\x03\x02\x02\x02\u0690\u068A\x03\x02\x02\x02" +
		"\u0690\u0691\x03\x02\x02\x02\u0691\u0693\x03\x02\x02\x02\u0692\u0686\x03" +
		"\x02\x02\x02\u0692\u0687\x03\x02\x02\x02\u0692\u0688\x03\x02\x02\x02\u0693" +
		"\u0695\x03\x02\x02\x02\u0694\u0662\x03\x02\x02\x02\u0694\u066D\x03\x02" +
		"\x02\x02\u0694\u0680\x03\x02\x02\x02\u0695Q\x03\x02\x02\x02\u0696\u06AC" +
		"\x07\u010F\x02\x02\u0697\u0699\x05\f\x07\x02\u0698\u0697\x03\x02\x02\x02" +
		"\u0699\u069A\x03\x02\x02\x02\u069A\u0698\x03\x02\x02\x02\u069A\u069B\x03" +
		"\x02\x02\x02\u069B\u069C\x03\x02\x02\x02\u069C\u06AA\x05r:\x02\u069D\u069F" +
		"\x05\f\x07\x02\u069E\u069D\x03\x02\x02\x02\u069F\u06A0\x03\x02\x02\x02" +
		"\u06A0\u069E\x03\x02\x02\x02\u06A0\u06A1\x03\x02\x02\x02\u06A1\u06A2\x03" +
		"\x02\x02\x02\u06A2\u06A4\t\x07\x02\x02\u06A3\u06A5\x05\f\x07\x02\u06A4" +
		"\u06A3\x03\x02\x02\x02\u06A5\u06A6\x03\x02\x02\x02\u06A6\u06A4\x03\x02" +
		"\x02\x02\u06A6\u06A7\x03\x02\x02\x02\u06A7\u06A8\x03\x02\x02\x02\u06A8" +
		"\u06A9\x05t;\x02\u06A9\u06AB\x03\x02\x02\x02\u06AA\u069E\x03\x02\x02\x02" +
		"\u06AA\u06AB\x03\x02\x02\x02\u06AB\u06AD\x03\x02\x02\x02\u06AC\u0698\x03" +
		"\x02\x02\x02\u06AC\u06AD\x03\x02\x02\x02\u06AD\u06B8\x03\x02\x02\x02\u06AE" +
		"\u06B0\x05\f\x07\x02\u06AF\u06AE\x03\x02\x02\x02\u06B0\u06B1\x03\x02\x02" +
		"\x02\u06B1\u06AF\x03\x02\x02\x02\u06B1\u06B2\x03\x02\x02\x02\u06B2\u06B6" +
		"\x03\x02\x02\x02\u06B3\u06B7\x05T+\x02\u06B4\u06B7\x05X-\x02\u06B5\u06B7" +
		"\x05Z.\x02\u06B6\u06B3\x03\x02\x02\x02\u06B6\u06B4\x03\x02\x02\x02\u06B6" +
		"\u06B5\x03\x02\x02\x02\u06B7\u06B9\x03\x02\x02\x02\u06B8\u06AF\x03\x02" +
		"\x02\x02\u06B8\u06B9\x03\x02\x02\x02\u06B9\u06CC\x03\x02\x02\x02\u06BA" +
		"\u06BC\x05\f\x07\x02\u06BB\u06BA\x03\x02\x02\x02\u06BC\u06BD\x03\x02\x02" +
		"\x02\u06BD\u06BB\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE\u06BF" +
		"\x03\x02\x02\x02\u06BF\u06C0\x058\x1D\x02\u06C0\u06C2\x03\x02\x02\x02" +
		"\u06C1\u06BB\x03\x02\x02\x02\u06C2\u06C3\x03\x02\x02\x02\u06C3\u06C1\x03" +
		"\x02\x02\x02\u06C3\u06C4\x03\x02\x02\x02\u06C4\u06C6\x03\x02\x02\x02\u06C5" +
		"\u06C7\x05\f\x07\x02\u06C6\u06C5\x03\x02\x02\x02\u06C7\u06C8\x03\x02\x02" +
		"\x02\u06C8\u06C6\x03\x02\x02\x02\u06C8\u06C9\x03\x02\x02\x02\u06C9\u06CA" +
		"\x03\x02\x02\x02\u06CA\u06CB\x07\x8D\x02\x02\u06CB\u06CD\x03\x02\x02\x02" +
		"\u06CC\u06C1\x03\x02\x02\x02\u06CC\u06CD\x03\x02\x02\x02\u06CDS\x03\x02" +
		"\x02\x02\u06CE\u06D1\x05\u02EA\u0176\x02\u06CF\u06D1\x07\u01C2\x02\x02" +
		"\u06D0\u06CE\x03\x02\x02\x02\u06D0\u06CF\x03\x02\x02\x02\u06D1\u06D3\x03" +
		"\x02\x02\x02\u06D2\u06D4\x05\f\x07\x02\u06D3\u06D2\x03\x02\x02\x02\u06D4" +
		"\u06D5\x03\x02\x02\x02\u06D5\u06D3\x03\x02\x02\x02\u06D5\u06D6\x03\x02" +
		"\x02\x02\u06D6\u06D7\x03\x02\x02\x02\u06D7\u06D8\x07\u0174\x02\x02\u06D8" +
		"U\x03\x02\x02\x02\u06D9\u06DB\x07\u018B\x02\x02\u06DA\u06DC\x05\f\x07" +
		"\x02\u06DB\u06DA\x03\x02\x02\x02\u06DC\u06DD\x03\x02\x02\x02\u06DD\u06DB" +
		"\x03\x02\x02\x02\u06DD\u06DE\x03\x02\x02\x02\u06DE\u06E0\x03\x02\x02\x02" +
		"\u06DF\u06D9\x03\x02\x02\x02\u06DF\u06E0\x03\x02\x02\x02\u06E0\u06E1\x03" +
		"\x02\x02\x02\u06E1\u06E3\x07\u01A2\x02\x02\u06E2\u06E4\x05\f\x07\x02\u06E3" +
		"\u06E2\x03\x02\x02\x02\u06E4\u06E5\x03\x02\x02\x02\u06E5\u06E3\x03\x02" +
		"\x02\x02\u06E5\u06E6\x03\x02\x02\x02\u06E6\u06E7\x03\x02\x02\x02\u06E7" +
		"\u06E8\t\b\x02\x02\u06E8W\x03\x02\x02\x02\u06E9\u06EB\x05V,\x02\u06EA" +
		"\u06EC\x05\f\x07\x02\u06EB\u06EA\x03\x02\x02\x02\u06EC\u06ED\x03\x02\x02" +
		"\x02\u06ED\u06EB\x03\x02\x02\x02\u06ED\u06EE\x03\x02\x02\x02\u06EE\u06F0" +
		"\x03\x02\x02\x02\u06EF\u06E9\x03\x02\x02\x02\u06EF\u06F0\x03\x02\x02\x02" +
		"\u06F0\u06F1\x03\x02\x02\x02\u06F1\u06F3\x07\u01A1\x02\x02\u06F2\u06F4" +
		"\x05\f\x07\x02\u06F3\u06F2\x03\x02\x02\x02\u06F4\u06F5\x03\x02\x02\x02" +
		"\u06F5\u06F3\x03\x02\x02\x02\u06F5\u06F6\x03\x02\x02\x02\u06F6\u06F7\x03" +
		"\x02\x02\x02\u06F7\u06F8\x05\u02D6\u016C\x02\u06F8Y\x03\x02\x02\x02\u06F9" +
		"\u06FB\x05V,\x02\u06FA\u06FC\x05\f\x07\x02\u06FB\u06FA\x03\x02\x02\x02" +
		"\u06FC\u06FD\x03\x02\x02\x02\u06FD\u06FB\x03\x02\x02\x02\u06FD\u06FE\x03" +
		"\x02\x02\x02\u06FE\u0700\x03\x02\x02\x02\u06FF\u06F9\x03\x02\x02\x02\u06FF" +
		"\u0700\x03\x02\x02\x02\u0700\u0701\x03\x02\x02\x02\u0701\u0703\x07\u0187" +
		"\x02\x02\u0702\u0704\x05\f\x07\x02\u0703\u0702\x03\x02\x02\x02\u0704\u0705" +
		"\x03\x02\x02\x02\u0705\u0703\x03\x02\x02\x02\u0705\u0706\x03\x02\x02\x02" +
		"\u0706\u0707\x03\x02\x02\x02\u0707\u0709\x05\\/\x02\u0708\u070A\x05\f" +
		"\x07\x02\u0709\u0708\x03\x02\x02\x02\u070A\u070B\x03\x02\x02\x02\u070B" +
		"\u0709\x03\x02\x02\x02\u070B\u070C\x03\x02\x02\x02\u070C\u070D\x03\x02" +
		"\x02\x02\u070D\u070F\x07\u01A1\x02\x02\u070E\u0710\x05\f\x07\x02\u070F" +
		"\u070E\x03\x02\x02\x02\u0710\u0711\x03\x02\x02\x02\u0711\u070F\x03\x02" +
		"\x02\x02\u0711\u0712\x03\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713" +
		"\u072F\x05\u02D6\u016C\x02\u0714\u0716\x05\f\x07\x02\u0715\u0714\x03\x02" +
		"\x02\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0715\x03\x02\x02\x02\u0717" +
		"\u0718\x03\x02\x02\x02\u0718\u0719\x03\x02\x02\x02\u0719\u071B\x07\n\x02" +
		"\x02\u071A\u071C\x05\f\x07\x02\u071B\u071A\x03\x02\x02\x02\u071C\u071D" +
		"\x03\x02\x02\x02\u071D\u071B\x03\x02\x02\x02\u071D\u071E\x03\x02\x02\x02" +
		"\u071E\u071F\x03\x02\x02\x02\u071F\u0721\x05\\/\x02\u0720\u0722\x05\f" +
		"\x07\x02\u0721\u0720\x03\x02\x02\x02\u0722\u0723\x03\x02\x02\x02\u0723" +
		"\u0721\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724\u0725\x03\x02" +
		"\x02\x02\u0725\u0727\x07\u01A1\x02\x02\u0726\u0728\x05\f\x07\x02\u0727" +
		"\u0726\x03\x02\x02\x02\u0728\u0729\x03\x02\x02\x02\u0729\u0727\x03\x02" +
		"\x02\x02\u0729\u072A\x03\x02\x02\x02\u072A\u072B\x03\x02\x02\x02\u072B" +
		"\u072C\x05\u02D6\u016C\x02\u072C\u072E\x03\x02\x02\x02\u072D\u0715\x03" +
		"\x02\x02\x02\u072E\u0731\x03\x02\x02\x02\u072F\u072D\x03\x02\x02\x02\u072F" +
		"\u0730\x03\x02\x02\x02\u0730[\x03\x02\x02\x02\u0731\u072F\x03\x02\x02" +
		"\x02\u0732\u0734\x05b2\x02\u0733\u0735\x05\f\x07\x02\u0734\u0733\x03\x02" +
		"\x02\x02\u0735\u0736\x03\x02\x02\x02\u0736\u0734\x03\x02\x02\x02\u0736" +
		"\u0737\x03\x02\x02\x02\u0737\u0738\x03\x02\x02\x02\u0738\u073A\x07\xB7" +
		"\x02\x02\u0739\u073B\x05\f\x07\x02\u073A\u0739\x03\x02\x02\x02\u073B\u073C" +
		"\x03\x02\x02\x02\u073C\u073A\x03\x02\x02\x02\u073C\u073D\x03\x02\x02\x02" +
		"\u073D\u073E\x03\x02\x02\x02\u073E\u0740\x05`1\x02\u073F\u0741\x05\f\x07" +
		"\x02\u0740\u073F\x03\x02\x02\x02\u0741\u0742\x03\x02\x02\x02\u0742\u0740" +
		"\x03\x02\x02\x02\u0742\u0743\x03\x02\x02\x02\u0743\u0744\x03\x02\x02\x02" +
		"\u0744\u0746\x072\x02\x02\u0745\u0747\x05\f\x07\x02\u0746\u0745\x03\x02" +
		"\x02\x02\u0747\u0748\x03\x02\x02\x02\u0748\u0746\x03\x02\x02\x02\u0748" +
		"\u0749\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u074B\x05^0\x02" +
		"\u074B]\x03\x02\x02\x02\u074C\u074F\x05\u02EA\u0176\x02\u074D\u074F\x07" +
		"\u01C2\x02\x02\u074E\u074C\x03\x02\x02\x02\u074E\u074D\x03\x02\x02\x02" +
		"\u074F_\x03\x02\x02\x02\u0750\u0753\x05\u02EA\u0176\x02\u0751\u0753\x07" +
		"\u01C2\x02\x02\u0752\u0750\x03\x02\x02\x02\u0752\u0751\x03\x02\x02\x02" +
		"\u0753a\x03\x02\x02\x02\u0754\u0755\x05\u02E8\u0175\x02\u0755c\x03\x02" +
		"\x02\x02\u0756\u075E\x07\u0103\x02\x02\u0757\u0759\x05\f\x07\x02\u0758" +
		"\u0757\x03\x02\x02\x02\u0759\u075A\x03\x02\x02\x02\u075A\u0758\x03\x02" +
		"\x02\x02\u075A\u075B\x03\x02\x02\x02\u075B\u075C\x03\x02\x02\x02\u075C" +
		"\u075D\x05f4\x02\u075D\u075F\x03\x02\x02\x02\u075E\u0758\x03\x02\x02\x02" +
		"\u075F\u0760\x03\x02\x02\x02\u0760\u075E\x03\x02\x02\x02\u0760\u0761\x03" +
		"\x02\x02\x02\u0761\u078F\x03\x02\x02\x02\u0762\u078A\x07\u0103\x02\x02" +
		"\u0763\u0765\x05\f\x07\x02\u0764\u0763\x03\x02\x02\x02\u0765\u0766\x03" +
		"\x02\x02\x02\u0766\u0764\x03\x02\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767" +
		"\u0768\x03\x02\x02\x02\u0768\u0786\t\t\x02\x02\u0769\u076B\x05\f\x07\x02" +
		"\u076A\u0769\x03\x02\x02\x02\u076B\u076C\x03\x02\x02\x02\u076C\u076A\x03" +
		"\x02\x02\x02\u076C\u076D\x03\x02\x02\x02\u076D\u076E\x03\x02\x02\x02\u076E" +
		"\u0784\x05\u02A8\u0155\x02\u076F\u0771\x05\f\x07\x02\u0770\u076F\x03\x02" +
		"\x02\x02\u0771\u0772\x03\x02\x02\x02\u0772\u0770\x03\x02\x02\x02\u0772" +
		"\u0773\x03\x02\x02\x02\u0773\u077A\x03\x02\x02\x02\u0774\u0776\x07\u018B" +
		"\x02\x02\u0775\u0777\x05\f\x07\x02\u0776\u0775\x03\x02\x02\x02\u0777\u0778" +
		"\x03\x02\x02\x02\u0778\u0776\x03\x02\x02\x02\u0778\u0779\x03\x02\x02\x02" +
		"\u0779\u077B\x03\x02\x02\x02\u077A\u0774\x03\x02\x02\x02\u077A\u077B\x03" +
		"\x02\x02\x02\u077B\u077C\x03\x02\x02\x02\u077C\u077E\x07\xF9\x02\x02\u077D" +
		"\u077F\x05\f\x07\x02\u077E\u077D\x03\x02\x02\x02\u077F\u0780\x03\x02\x02" +
		"\x02\u0780\u077E\x03\x02\x02\x02\u0780\u0781\x03\x02\x02\x02\u0781\u0782" +
		"\x03\x02\x02\x02\u0782\u0783\x07\u013C\x02\x02\u0783\u0785\x03\x02\x02" +
		"\x02\u0784\u0770\x03\x02\x02\x02\u0784\u0785\x03\x02\x02\x02\u0785\u0787" +
		"\x03\x02\x02\x02\u0786\u076A\x03\x02\x02\x02\u0787\u0788\x03\x02\x02\x02" +
		"\u0788\u0786\x03\x02\x02\x02\u0788\u0789\x03\x02\x02\x02\u0789\u078B\x03" +
		"\x02\x02\x02\u078A\u0764\x03\x02\x02\x02\u078B\u078C\x03\x02\x02\x02\u078C" +
		"\u078A\x03\x02\x02\x02\u078C\u078D\x03\x02\x02\x02\u078D\u078F\x03\x02" +
		"\x02\x02\u078E\u0756\x03\x02\x02\x02\u078E\u0762\x03\x02\x02\x02\u078F" +
		"e\x03\x02\x02\x02\u0790\u07B7\t\n\x02\x02\u0791\u0793\x05\f\x07\x02\u0792" +
		"\u0791\x03\x02\x02\x02\u0793\u0794\x03\x02\x02\x02\u0794\u0792\x03\x02" +
		"\x02\x02\u0794\u0795\x03\x02\x02\x02\u0795\u0796\x03\x02\x02\x02\u0796" +
		"\u07AC\x05\u02A8\u0155\x02\u0797\u0799\x05\f\x07\x02\u0798\u0797\x03\x02" +
		"\x02\x02\u0799\u079A\x03\x02\x02\x02\u079A\u0798\x03\x02\x02\x02\u079A" +
		"\u079B\x03\x02\x02\x02\u079B\u07A2\x03\x02\x02\x02\u079C\u079E\x07\u018B" +
		"\x02\x02\u079D\u079F\x05\f\x07\x02\u079E\u079D\x03\x02\x02\x02\u079F\u07A0" +
		"\x03\x02\x02\x02\u07A0\u079E\x03\x02\x02\x02\u07A0\u07A1\x03\x02\x02\x02" +
		"\u07A1\u07A3\x03\x02\x02\x02\u07A2\u079C\x03\x02\x02\x02\u07A2\u07A3\x03" +
		"\x02\x02\x02\u07A3\u07A4\x03\x02\x02\x02\u07A4\u07A6\x07\xF9\x02\x02\u07A5" +
		"\u07A7\x05\f\x07\x02\u07A6\u07A5\x03\x02\x02\x02\u07A7\u07A8\x03\x02\x02" +
		"\x02\u07A8\u07A6\x03\x02\x02\x02\u07A8\u07A9\x03\x02\x02\x02\u07A9\u07AA" +
		"\x03\x02\x02\x02\u07AA\u07AB\x07\u013C\x02\x02\u07AB\u07AD\x03\x02\x02" +
		"\x02\u07AC\u0798\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02\x02\u07AD\u07B5" +
		"\x03\x02\x02\x02\u07AE\u07B0\x05\f\x07\x02\u07AF\u07AE\x03\x02\x02\x02" +
		"\u07B0\u07B1\x03\x02\x02\x02\u07B1\u07AF\x03\x02\x02\x02\u07B1\u07B2\x03" +
		"\x02\x02\x02\u07B2\u07B3\x03\x02\x02\x02\u07B3\u07B4\x05h5\x02\u07B4\u07B6" +
		"\x03\x02\x02\x02\u07B5\u07AF\x03\x02\x02\x02\u07B5\u07B6\x03\x02\x02\x02" +
		"\u07B6\u07B8\x03\x02\x02\x02\u07B7\u0792\x03\x02\x02\x02\u07B8\u07B9\x03" +
		"\x02\x02\x02\u07B9\u07B7\x03\x02\x02\x02\u07B9\u07BA\x03\x02\x02\x02\u07BA" +
		"g\x03\x02\x02\x02\u07BB\u07BD\x07\u018B\x02\x02\u07BC\u07BE\x05\f\x07" +
		"\x02\u07BD\u07BC\x03\x02\x02\x02\u07BE\u07BF\x03\x02\x02\x02\u07BF\u07BD" +
		"\x03\x02\x02\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0\u07C2\x03\x02\x02\x02" +
		"\u07C1\u07BB\x03\x02\x02\x02\u07C1\u07C2\x03\x02\x02\x02\u07C2\u07C3\x03" +
		"\x02\x02\x02\u07C3\u083D\x07\xE8\x02\x02\u07C4\u07C6\x07\u019C\x02\x02" +
		"\u07C5\u07C7\x05\f\x07\x02\u07C6\u07C5\x03\x02\x02\x02\u07C7\u07C8\x03" +
		"\x02\x02\x02\u07C8\u07C6\x03\x02\x02\x02\u07C8\u07C9\x03\x02\x02\x02\u07C9" +
		"\u083A\x03\x02\x02\x02\u07CA\u07D2\x07\xF9\x02\x02\u07CB\u07CD\x05\f\x07" +
		"\x02\u07CC\u07CB\x03\x02\x02\x02\u07CD\u07CE\x03\x02\x02\x02\u07CE\u07CC" +
		"\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF\u07D0\x03\x02\x02\x02" +
		"\u07D0\u07D1\x07\u019D\x02\x02\u07D1\u07D3\x03\x02\x02\x02\u07D2\u07CC" +
		"\x03\x02\x02\x02\u07D2\u07D3\x03\x02\x02\x02\u07D3\u083B\x03\x02\x02\x02" +
		"\u07D4\u083B\x07\v\x02\x02\u07D5\u07DD\x07\u019E\x02\x02\u07D6\u07D8\x05" +
		"\f\x07\x02\u07D7\u07D6\x03\x02\x02\x02\u07D8\u07D9\x03\x02\x02\x02\u07D9" +
		"\u07D7\x03\x02\x02\x02\u07D9\u07DA\x03\x02\x02\x02\u07DA\u07DB\x03\x02" +
		"\x02\x02\u07DB\u07DC\x07\u019F\x02\x02\u07DC\u07DE\x03\x02\x02\x02\u07DD" +
		"\u07D7\x03\x02\x02\x02\u07DD\u07DE\x03\x02\x02\x02\u07DE\u07E6\x03\x02" +
		"\x02\x02\u07DF\u07E1\x05\f\x07\x02\u07E0\u07DF\x03\x02\x02\x02\u07E1\u07E2" +
		"\x03\x02\x02\x02\u07E2\u07E0\x03\x02\x02\x02\u07E2\u07E3\x03\x02\x02\x02" +
		"\u07E3\u07E4\x03\x02\x02\x02\u07E4\u07E5\x07\u01A0\x02\x02\u07E5\u07E7" +
		"\x03\x02\x02\x02\u07E6\u07E0\x03\x02\x02\x02\u07E6\u07E7\x03\x02\x02\x02" +
		"\u07E7\u0839\x03\x02\x02\x02\u07E8\u07EA\x07\u019E\x02\x02\u07E9\u07EB" +
		"\x05\f\x07\x02\u07EA\u07E9\x03\x02\x02\x02\u07EB\u07EC\x03\x02\x02\x02" +
		"\u07EC\u07EA\x03\x02\x02\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED\u07EE\x03" +
		"\x02\x02\x02\u07EE\u07F0\x07\u01A0\x02\x02\u07EF\u07F1\x05\f\x07\x02\u07F0" +
		"\u07EF\x03\x02\x02\x02\u07F1\u07F2\x03\x02\x02\x02\u07F2\u07F0\x03\x02" +
		"\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3\u07F4\x03\x02\x02\x02\u07F4" +
		"\u07F5\x07\u019F\x02\x02\u07F5\u0839\x03\x02\x02\x02\u07F6\u07FE\x07\u019F" +
		"\x02\x02\u07F7\u07F9\x05\f\x07\x02\u07F8\u07F7\x03\x02\x02\x02\u07F9\u07FA" +
		"\x03\x02\x02\x02\u07FA\u07F8\x03\x02\x02\x02\u07FA\u07FB\x03\x02\x02\x02" +
		"\u07FB\u07FC\x03\x02\x02\x02\u07FC\u07FD\x07\u019E\x02\x02\u07FD\u07FF" +
		"\x03\x02\x02\x02\u07FE\u07F8\x03\x02\x02\x02\u07FE\u07FF\x03\x02\x02\x02" +
		"\u07FF\u0807\x03\x02\x02\x02\u0800\u0802\x05\f\x07\x02\u0801\u0800\x03" +
		"\x02\x02\x02\u0802\u0803\x03\x02\x02\x02\u0803\u0801\x03\x02\x02\x02\u0803" +
		"\u0804\x03\x02\x02\x02\u0804\u0805\x03\x02\x02\x02\u0805\u0806\x07\u01A0" +
		"\x02\x02\u0806\u0808\x03\x02\x02\x02\u0807\u0801\x03\x02\x02\x02\u0807" +
		"\u0808\x03\x02\x02\x02\u0808\u0839\x03\x02\x02\x02\u0809\u080B\x07\u019F" +
		"\x02\x02\u080A\u080C\x05\f\x07\x02\u080B\u080A\x03\x02\x02\x02\u080C\u080D" +
		"\x03\x02\x02\x02\u080D\u080B\x03\x02\x02\x02\u080D\u080E\x03\x02\x02\x02" +
		"\u080E\u080F\x03\x02\x02\x02\u080F\u0811\x07\u01A0\x02\x02\u0810\u0812" +
		"\x05\f\x07\x02\u0811\u0810\x03\x02\x02\x02\u0812\u0813\x03\x02\x02\x02" +
		"\u0813\u0811\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02\u0814\u0815\x03" +
		"\x02\x02\x02\u0815\u0816\x07\u019E\x02\x02\u0816\u0839\x03\x02\x02\x02" +
		"\u0817\u081F\x07\u01A0\x02\x02\u0818\u081A\x05\f\x07\x02\u0819\u0818\x03" +
		"\x02\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u0819\x03\x02\x02\x02\u081B" +
		"\u081C\x03\x02\x02\x02\u081C\u081D\x03\x02\x02\x02\u081D\u081E\x07\u019E" +
		"\x02\x02\u081E\u0820\x03\x02\x02\x02\u081F\u0819\x03";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\x02\u081F\u0820\x03\x02\x02\x02\u0820\u0828\x03\x02\x02\x02\u0821" +
		"\u0823\x05\f\x07\x02\u0822\u0821\x03\x02\x02\x02\u0823\u0824\x03\x02\x02" +
		"\x02\u0824\u0822\x03\x02\x02\x02\u0824\u0825\x03\x02\x02\x02\u0825\u0826" +
		"\x03\x02\x02\x02\u0826\u0827\x07\u019F\x02\x02\u0827\u0829\x03\x02\x02" +
		"\x02\u0828\u0822\x03\x02\x02\x02\u0828\u0829\x03\x02\x02\x02\u0829\u0839" +
		"\x03\x02\x02\x02\u082A\u082C\x07\u01A0\x02\x02\u082B\u082D\x05\f\x07\x02" +
		"\u082C\u082B\x03\x02\x02\x02\u082D\u082E\x03\x02\x02\x02\u082E\u082C\x03" +
		"\x02\x02\x02\u082E\u082F\x03\x02\x02\x02\u082F\u0830\x03\x02\x02\x02\u0830" +
		"\u0832\x07\u019F\x02\x02\u0831\u0833\x05\f\x07\x02\u0832\u0831\x03\x02" +
		"\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834\u0832\x03\x02\x02\x02\u0834" +
		"\u0835\x03\x02\x02\x02\u0835\u0836\x03\x02\x02\x02\u0836\u0837\x07\u019E" +
		"\x02\x02\u0837\u0839\x03\x02\x02\x02\u0838\u07D5\x03\x02\x02\x02\u0838" +
		"\u07E8\x03\x02\x02\x02\u0838\u07F6\x03\x02\x02\x02\u0838\u0809\x03\x02" +
		"\x02\x02\u0838\u0817\x03\x02\x02\x02\u0838\u082A\x03\x02\x02\x02\u0839" +
		"\u083B\x03\x02\x02\x02\u083A\u07CA\x03\x02\x02\x02\u083A\u07D4\x03\x02" +
		"\x02\x02\u083A\u0838\x03\x02\x02\x02\u083B\u083D\x03\x02\x02\x02\u083C" +
		"\u07C1\x03\x02\x02\x02\u083C\u07C4\x03\x02\x02\x02\u083Di\x03\x02\x02" +
		"\x02\u083E\u0840\x07\xF5\x02\x02\u083F\u0841\x05\f\x07\x02\u0840\u083F" +
		"\x03\x02\x02\x02\u0841\u0842\x03\x02\x02\x02\u0842\u0840\x03\x02\x02\x02" +
		"\u0842\u0843\x03\x02\x02\x02\u0843\u0844\x03\x02\x02\x02\u0844\u0846\x05" +
		"l7\x02\u0845\u0847\x05\f\x07\x02\u0846\u0845\x03\x02\x02\x02\u0847\u0848" +
		"\x03\x02\x02\x02\u0848\u0846\x03\x02\x02\x02\u0848\u0849\x03\x02\x02\x02" +
		"\u0849\u084A\x03\x02\x02\x02\u084A\u0858\x072\x02\x02\u084B\u084D\x05" +
		"\f\x07\x02\u084C\u084B\x03\x02\x02\x02\u084D\u084E\x03\x02\x02\x02\u084E" +
		"\u084C\x03\x02\x02\x02\u084E\u084F\x03\x02\x02\x02\u084F\u0850\x03\x02" +
		"\x02\x02\u0850\u0852\x05l7\x02\u0851\u0853\x05\f\x07\x02\u0852\u0851\x03" +
		"\x02\x02\x02\u0853\u0854\x03\x02\x02\x02\u0854\u0852\x03\x02\x02\x02\u0854" +
		"\u0855\x03\x02\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0857\x07\xBB" +
		"\x02\x02\u0857\u0859\x03\x02\x02\x02\u0858\u084C\x03\x02\x02\x02\u0858" +
		"\u0859\x03\x02\x02\x02\u0859\u0869\x03\x02\x02\x02\u085A\u085C\x05\f\x07" +
		"\x02\u085B\u085A\x03\x02\x02\x02\u085C\u085D\x03\x02\x02\x02\u085D\u085B" +
		"\x03\x02\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E\u085F\x03\x02\x02\x02" +
		"\u085F\u0867\x05\u02E8\u0175\x02\u0860\u0862\x05\f\x07\x02\u0861\u0860" +
		"\x03\x02\x02\x02\u0862\u0863\x03\x02\x02\x02\u0863\u0861\x03\x02\x02\x02" +
		"\u0863\u0864\x03\x02\x02\x02\u0864\u0865\x03\x02\x02\x02\u0865\u0866\x07" +
		"\u0142\x02\x02\u0866\u0868\x03\x02\x02\x02\u0867\u0861\x03\x02\x02\x02" +
		"\u0867\u0868\x03\x02\x02\x02\u0868\u086A\x03\x02\x02\x02\u0869\u085B\x03" +
		"\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u0869\x03\x02\x02\x02\u086B" +
		"\u086C\x03\x02\x02\x02\u086C\u0874\x03\x02\x02\x02\u086D\u086F\x05\f\x07" +
		"\x02\u086E\u086D\x03\x02\x02\x02\u086F\u0870\x03\x02\x02\x02\u0870\u086E" +
		"\x03\x02\x02\x02\u0870\u0871\x03\x02\x02\x02\u0871\u0872\x03\x02\x02\x02" +
		"\u0872\u0873\x05\u0116\x8C\x02\u0873\u0875\x03\x02\x02\x02\u0874\u086E" +
		"\x03\x02\x02\x02\u0874\u0875\x03\x02\x02\x02\u0875\u087D\x03\x02\x02\x02" +
		"\u0876\u0878\x05\f\x07\x02\u0877\u0876\x03\x02\x02\x02\u0878\u0879\x03" +
		"\x02\x02\x02\u0879\u0877\x03\x02\x02\x02\u0879\u087A\x03\x02\x02\x02\u087A" +
		"\u087B\x03\x02\x02\x02\u087B\u087C\x07\x8B\x02\x02\u087C\u087E\x03\x02" +
		"\x02\x02\u087D\u0877\x03\x02\x02\x02\u087D\u087E\x03\x02\x02\x02\u087E" +
		"k\x03\x02\x02\x02\u087F\u0882\x05\u02EA\u0176\x02\u0880\u0882\x07\u01C2" +
		"\x02\x02\u0881\u087F\x03\x02\x02\x02\u0881\u0880\x03\x02\x02\x02\u0882" +
		"m\x03\x02\x02\x02\u0883\u0885\x07\xF0\x02\x02\u0884\u0886\x05\f\x07\x02" +
		"\u0885\u0884\x03\x02\x02\x02\u0886\u0887\x03\x02\x02\x02\u0887\u0885\x03" +
		"\x02\x02\x02\u0887\u0888\x03\x02\x02\x02\u0888\u0889\x03\x02\x02\x02\u0889" +
		"\u0891\x05|?\x02\u088A\u088C\x05\f\x07\x02\u088B\u088A\x03\x02\x02\x02" +
		"\u088C\u088D\x03\x02\x02\x02\u088D\u088B\x03\x02\x02\x02\u088D\u088E\x03" +
		"\x02\x02\x02\u088E\u088F\x03\x02\x02\x02\u088F\u0890\x05z>\x02\u0890\u0892" +
		"\x03\x02\x02\x02\u0891\u088B\x03\x02\x02\x02\u0892\u0893\x03\x02\x02\x02" +
		"\u0893\u0891\x03\x02\x02\x02\u0893\u0894\x03\x02\x02\x02\u0894\u08B2\x03" +
		"\x02\x02\x02\u0895\u0897\x05\f\x07\x02\u0896\u0895\x03\x02\x02\x02\u0897" +
		"\u0898\x03\x02\x02\x02\u0898\u0896\x03\x02\x02\x02\u0898\u0899\x03\x02" +
		"\x02\x02\u0899\u08A0\x03\x02\x02\x02\u089A\u089C\x07@\x02\x02\u089B\u089D" +
		"\x05\f\x07\x02\u089C\u089B\x03\x02\x02\x02\u089D\u089E\x03\x02\x02\x02" +
		"\u089E\u089C\x03\x02\x02\x02\u089E\u089F\x03\x02\x02\x02\u089F\u08A1\x03" +
		"\x02\x02\x02\u08A0\u089A\x03\x02\x02\x02\u08A0\u08A1\x03\x02\x02\x02\u08A1" +
		"\u08A2\x03\x02\x02\x02\u08A2\u08A4\x07\u014D\x02\x02\u08A3\u08A5\x05\f" +
		"\x07\x02\u08A4\u08A3\x03\x02\x02\x02\u08A5\u08A6\x03\x02\x02\x02\u08A6" +
		"\u08A4\x03\x02\x02\x02\u08A6\u08A7\x03\x02\x02\x02\u08A7\u08AE\x03\x02" +
		"\x02\x02\u08A8\u08AA\x07\xD6\x02\x02\u08A9\u08AB\x05\f\x07\x02\u08AA\u08A9" +
		"\x03\x02\x02\x02\u08AB\u08AC\x03\x02\x02\x02\u08AC\u08AA\x03\x02\x02\x02" +
		"\u08AC\u08AD\x03\x02\x02\x02\u08AD\u08AF\x03\x02\x02\x02\u08AE\u08A8\x03" +
		"\x02\x02\x02\u08AE\u08AF\x03\x02\x02\x02\u08AF\u08B0\x03\x02\x02\x02\u08B0" +
		"\u08B1\x05\u0234\u011B\x02\u08B1\u08B3\x03\x02\x02\x02\u08B2\u0896\x03" +
		"\x02\x02\x02\u08B2\u08B3\x03\x02\x02\x02\u08B3\u08B5\x03\x02\x02\x02\u08B4" +
		"\u08B6\x05\f\x07\x02\u08B5\u08B4\x03\x02\x02\x02\u08B6\u08B7\x03\x02\x02" +
		"\x02\u08B7\u08B5\x03\x02\x02\x02\u08B7\u08B8\x03\x02\x02\x02\u08B8\u08B9" +
		"\x03\x02\x02\x02\u08B9\u08C1\x07\u0184\x02\x02\u08BA\u08BC\x05\f\x07\x02" +
		"\u08BB\u08BA\x03\x02\x02\x02\u08BC\u08BD\x03\x02\x02\x02\u08BD\u08BB\x03" +
		"\x02\x02\x02\u08BD\u08BE\x03\x02\x02\x02\u08BE\u08BF\x03\x02\x02\x02\u08BF" +
		"\u08C0\x05x=\x02\u08C0\u08C2\x03\x02\x02\x02\u08C1\u08BB\x03\x02\x02\x02" +
		"\u08C2\u08C3\x03\x02\x02\x02\u08C3\u08C1\x03\x02\x02\x02\u08C3\u08C4\x03" +
		"\x02\x02\x02\u08C4\u08C6\x03\x02\x02\x02\u08C5\u08C7\x05\f\x07\x02\u08C6" +
		"\u08C5\x03\x02\x02\x02\u08C7\u08C8\x03\x02\x02\x02\u08C8\u08C6\x03\x02" +
		"\x02\x02\u08C8\u08C9\x03\x02\x02\x02\u08C9\u08CC\x03\x02\x02\x02\u08CA" +
		"\u08CD\x05p9\x02\u08CB\u08CD\x05v<\x02\u08CC\u08CA\x03\x02\x02\x02\u08CC" +
		"\u08CB\x03\x02\x02\x02\u08CDo\x03\x02\x02\x02\u08CE\u08D0\x07\u0108\x02" +
		"\x02\u08CF\u08D1\x05\f\x07\x02\u08D0\u08CF\x03\x02\x02\x02\u08D1\u08D2" +
		"\x03\x02\x02\x02\u08D2\u08D0\x03\x02\x02\x02\u08D2\u08D3\x03\x02\x02\x02" +
		"\u08D3\u08D4\x03\x02\x02\x02\u08D4\u08D6\x07\u011C\x02\x02\u08D5\u08D7" +
		"\x05\f\x07\x02\u08D6\u08D5\x03\x02\x02\x02\u08D7\u08D8\x03\x02\x02\x02" +
		"\u08D8\u08D6\x03\x02\x02\x02\u08D8\u08D9\x03\x02\x02\x02\u08D9\u08E0\x03" +
		"\x02\x02\x02\u08DA\u08DC\x07\xD6\x02\x02\u08DB\u08DD\x05\f\x07\x02\u08DC" +
		"\u08DB\x03\x02\x02\x02\u08DD\u08DE\x03\x02\x02\x02\u08DE\u08DC\x03\x02" +
		"\x02\x02\u08DE\u08DF\x03\x02\x02\x02\u08DF\u08E1\x03\x02\x02\x02\u08E0" +
		"\u08DA\x03\x02\x02\x02\u08E0\u08E1\x03\x02\x02\x02\u08E1\u08E2\x03\x02" +
		"\x02\x02\u08E2\u08F0\x05r:\x02\u08E3\u08E5\x05\f\x07\x02\u08E4\u08E3\x03" +
		"\x02\x02\x02\u08E5\u08E6\x03\x02\x02\x02\u08E6\u08E4\x03\x02\x02\x02\u08E6" +
		"\u08E7\x03\x02\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08EA\t\x07\x02" +
		"\x02\u08E9\u08EB\x05\f\x07\x02\u08EA\u08E9\x03\x02\x02\x02\u08EB\u08EC" +
		"\x03\x02\x02\x02\u08EC\u08EA\x03\x02\x02\x02\u08EC\u08ED\x03\x02\x02\x02" +
		"\u08ED\u08EE\x03\x02\x02\x02\u08EE\u08EF\x05t;\x02\u08EF\u08F1\x03\x02" +
		"\x02\x02\u08F0\u08E4\x03\x02\x02\x02\u08F0\u08F1\x03\x02\x02\x02\u08F1" +
		"q\x03\x02\x02\x02\u08F2\u08F3\x07\u01C4\x02\x02\u08F3s\x03\x02\x02\x02" +
		"\u08F4\u08F5\x07\u01C4\x02\x02\u08F5u\x03\x02\x02\x02\u08F6\u08F7\x07" +
		"\xBB\x02\x02\u08F7\u08F8\x05\u02A8\u0155\x02\u08F8w\x03\x02\x02\x02\u08F9" +
		"\u08FA\x07\u01C4\x02\x02\u08FAy\x03\x02\x02\x02\u08FB\u08FD\x07\u0102" +
		"\x02\x02\u08FC\u08FE\x05\f\x07\x02\u08FD\u08FC\x03\x02\x02\x02\u08FE\u08FF" +
		"\x03\x02\x02\x02\u08FF\u08FD\x03\x02\x02\x02\u08FF\u0900\x03\x02\x02\x02" +
		"\u0900\u0902\x03\x02\x02\x02\u0901\u08FB\x03\x02\x02\x02\u0901\u0902\x03" +
		"\x02\x02\x02\u0902\u0903\x03\x02\x02\x02\u0903\u090B\t\v\x02\x02\u0904" +
		"\u0906\x05\f\x07\x02\u0905\u0904\x03\x02\x02\x02\u0906\u0907\x03\x02\x02" +
		"\x02\u0907\u0905\x03\x02\x02\x02\u0907\u0908\x03\x02\x02\x02\u0908\u0909" +
		"\x03\x02\x02\x02\u0909\u090A\x07\xDB\x02\x02\u090A\u090C\x03\x02\x02\x02" +
		"\u090B\u0905\x03\x02\x02\x02\u090B\u090C\x03\x02\x02\x02\u090C\u0914\x03" +
		"\x02\x02\x02\u090D\u090F\x05\f\x07\x02\u090E\u090D\x03\x02\x02\x02\u090F" +
		"\u0910\x03\x02\x02\x02\u0910\u090E\x03\x02\x02\x02\u0910\u0911\x03\x02" +
		"\x02\x02\u0911\u0912\x03\x02\x02\x02\u0912\u0913\x05~@\x02\u0913\u0915" +
		"\x03\x02\x02\x02\u0914\u090E\x03\x02\x02\x02\u0915\u0916\x03\x02\x02\x02" +
		"\u0916\u0914\x03\x02\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917{\x03\x02" +
		"\x02\x02\u0918\u0919\x07\u01C4\x02\x02\u0919}\x03\x02\x02\x02\u091A\u091B" +
		"\x05\u023E\u0120\x02\u091B\x7F\x03\x02\x02\x02\u091C\u091E\x07\xD2\x02" +
		"\x02\u091D\u091F\x05\f\x07\x02\u091E\u091D\x03\x02\x02\x02\u091F\u0920" +
		"\x03\x02\x02\x02\u0920\u091E\x03\x02\x02\x02\u0920\u0921\x03\x02\x02\x02" +
		"\u0921\u0922\x03\x02\x02\x02\u0922\u0924\x05\xA2R\x02\u0923\u0925\x05" +
		"\f\x07\x02\u0924\u0923\x03\x02\x02\x02\u0925\u0926\x03\x02\x02\x02\u0926" +
		"\u0924\x03\x02\x02\x02\u0926\u0927\x03\x02\x02\x02\u0927\u0934\x03\x02" +
		"\x02\x02\u0928\u0930\x05\x92J\x02\u0929\u092B\x05\f\x07\x02\u092A\u0929" +
		"\x03\x02\x02\x02\u092B\u092C\x03\x02\x02\x02\u092C\u092A\x03\x02\x02\x02" +
		"\u092C\u092D\x03\x02\x02\x02\u092D\u092E\x03\x02\x02\x02\u092E\u092F\x05" +
		"\x88E\x02\u092F\u0931\x03\x02\x02\x02\u0930\u092A\x03\x02\x02\x02\u0930" +
		"\u0931\x03\x02\x02\x02\u0931\u0935\x03\x02\x02\x02\u0932\u0935\x05\x88" +
		"E\x02\u0933\u0935\x05\x82B\x02\u0934\u0928\x03\x02\x02\x02\u0934\u0932" +
		"\x03\x02\x02\x02\u0934\u0933\x03\x02\x02\x02\u0935\x81\x03\x02\x02\x02" +
		"\u0936\u0938\x07]\x02\x02\u0937\u0939\x05\f\x07\x02\u0938\u0937\x03\x02" +
		"\x02\x02\u0939\u093A\x03\x02\x02\x02\u093A\u0938\x03\x02\x02\x02\u093A" +
		"\u093B\x03\x02\x02\x02\u093B\u093C\x03\x02\x02\x02\u093C\u093E\x05\x86" +
		"D\x02\u093D\u093F\x05\f\x07\x02\u093E\u093D\x03\x02\x02\x02\u093F\u0940" +
		"\x03\x02\x02\x02\u0940\u093E\x03\x02\x02\x02\u0940\u0941\x03\x02\x02\x02" +
		"\u0941\u0942\x03\x02\x02\x02\u0942\u0944\x07\u0175\x02\x02\u0943\u0945" +
		"\x05\f\x07\x02\u0944\u0943\x03\x02\x02\x02\u0945\u0946\x03\x02\x02\x02" +
		"\u0946\u0944\x03\x02\x02\x02\u0946\u0947\x03\x02\x02\x02\u0947\u0948\x03" +
		"\x02\x02\x02\u0948\u0952\x05\x84C\x02\u0949\u094B\x05\f\x07\x02\u094A" +
		"\u0949\x03\x02\x02\x02\u094B\u094C\x03\x02\x02\x02\u094C\u094A\x03\x02" +
		"\x02\x02\u094C\u094D\x03\x02\x02\x02\u094D\u094E\x03\x02\x02\x02\u094E" +
		"\u094F\x05\x98M\x02\u094F\u0951\x03\x02\x02\x02\u0950\u094A\x03\x02\x02" +
		"\x02\u0951\u0954\x03\x02\x02\x02\u0952\u0950\x03\x02\x02\x02\u0952\u0953" +
		"\x03\x02\x02\x02\u0953\x83\x03\x02\x02\x02\u0954\u0952\x03\x02\x02\x02" +
		"\u0955\u0956\x05\x9CO\x02\u0956\x85\x03\x02\x02\x02\u0957\u0958\x05\x9C" +
		"O\x02\u0958\x87\x03\x02\x02\x02\u0959\u0963\x07\u0131\x02\x02\u095A\u095C" +
		"\x05\f\x07\x02\u095B\u095A\x03\x02\x02\x02\u095C\u095D\x03\x02\x02\x02" +
		"\u095D\u095B\x03\x02\x02\x02\u095D\u095E\x03\x02\x02\x02\u095E\u0961\x03" +
		"\x02\x02\x02\u095F\u0962\x05\x8EH\x02\u0960\u0962\x05\x8AF\x02\u0961\u095F" +
		"\x03\x02\x02\x02\u0961\u0960\x03\x02\x02\x02\u0962\u0964\x03\x02\x02\x02" +
		"\u0963\u095B\x03\x02\x02\x02\u0964\u0965\x03\x02\x02\x02\u0965\u0963\x03" +
		"\x02\x02\x02\u0965\u0966\x03\x02\x02\x02\u0966\x89\x03\x02\x02\x02\u0967" +
		"\u0986\t\f\x02\x02\u0968\u096A\x05\f\x07\x02\u0969\u0968\x03\x02\x02\x02" +
		"\u096A\u096B\x03\x02\x02\x02\u096B\u0969\x03\x02\x02\x02\u096B\u096C\x03" +
		"\x02\x02\x02\u096C\u096D\x03\x02\x02\x02\u096D\u096F\x05\x9CO\x02\u096E" +
		"\u0970\x05\f\x07\x02\u096F\u096E\x03\x02\x02\x02\u0970\u0971\x03\x02\x02" +
		"\x02\u0971\u096F\x03\x02\x02\x02\u0971\u0972\x03\x02\x02\x02\u0972\u0973" +
		"\x03\x02\x02\x02\u0973\u0975\x072\x02\x02\u0974\u0976\x05\f\x07\x02\u0975" +
		"\u0974\x03\x02\x02\x02\u0976\u0977\x03\x02\x02\x02\u0977\u0975\x03\x02" +
		"\x02\x02\u0977\u0978\x03\x02\x02\x02\u0978\u0979\x03\x02\x02\x02\u0979" +
		"\u0983\x05\x8CG\x02\u097A\u097C\x05\f\x07\x02\u097B\u097A\x03\x02\x02" +
		"\x02\u097C\u097D\x03\x02\x02\x02\u097D\u097B\x03\x02\x02\x02\u097D\u097E" +
		"\x03\x02\x02\x02\u097E\u097F\x03\x02\x02\x02\u097F\u0980\x05\x98M\x02" +
		"\u0980\u0982\x03\x02\x02\x02\u0981\u097B\x03\x02\x02\x02\u0982\u0985\x03" +
		"\x02\x02\x02\u0983\u0981\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02\u0984" +
		"\u0987\x03\x02\x02\x02\u0985\u0983\x03\x02\x02\x02\u0986\u0969\x03\x02" +
		"\x02\x02\u0987\u0988\x03\x02\x02\x02\u0988\u0986\x03\x02\x02\x02\u0988" +
		"\u0989\x03\x02\x02\x02\u0989\x8B\x03\x02\x02\x02\u098A\u098B\x05\x9CO" +
		"\x02\u098B\x8D\x03\x02\x02\x02\u098C\u098E\x07:\x02\x02\u098D\u098F\x05" +
		"\f\x07\x02\u098E\u098D\x03\x02\x02\x02\u098F\u0990\x03\x02\x02\x02\u0990" +
		"\u098E\x03\x02\x02\x02\u0990\u0991\x03\x02\x02\x02\u0991\u0992\x03\x02" +
		"\x02\x02\u0992\u0994\x072\x02\x02\u0993\u0995\x05\f\x07\x02\u0994\u0993" +
		"\x03\x02\x02\x02\u0995\u0996\x03\x02\x02\x02\u0996\u0994\x03\x02\x02\x02" +
		"\u0996\u0997\x03\x02\x02\x02\u0997\u0998\x03\x02\x02\x02\u0998\u09A2\x05" +
		"\x90I\x02\u0999\u099B\x05\f\x07\x02\u099A\u0999\x03\x02\x02\x02\u099B" +
		"\u099C\x03\x02\x02\x02\u099C\u099A\x03\x02\x02\x02\u099C\u099D\x03\x02" +
		"\x02\x02\u099D\u099E\x03\x02\x02\x02\u099E\u099F\x05\x98M\x02\u099F\u09A1" +
		"\x03\x02\x02\x02\u09A0\u099A\x03\x02\x02\x02\u09A1\u09A4\x03\x02\x02\x02" +
		"\u09A2\u09A0\x03\x02\x02\x02\u09A2\u09A3\x03\x02\x02\x02\u09A3\x8F\x03" +
		"\x02\x02\x02\u09A4\u09A2\x03\x02\x02\x02\u09A5\u09A6\x05\x9CO\x02\u09A6" +
		"\x91\x03\x02\x02\x02\u09A7\u09AF\x07\u016D\x02\x02\u09A8\u09AA\x05\f\x07" +
		"\x02\u09A9\u09A8\x03\x02\x02\x02\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09A9" +
		"\x03\x02\x02\x02\u09AB\u09AC\x03\x02\x02\x02\u09AC\u09AD\x03\x02\x02\x02" +
		"\u09AD\u09AE\x05\x94K\x02\u09AE\u09B0\x03\x02\x02\x02\u09AF\u09A9\x03" +
		"\x02\x02\x02\u09B0\u09B1\x03\x02\x02\x02\u09B1\u09AF\x03\x02\x02\x02\u09B1" +
		"\u09B2\x03\x02\x02\x02\u09B2\x93\x03\x02\x02\x02\u09B3\u09B5\x05\xA0Q" +
		"\x02\u09B4\u09B6\x05\f\x07\x02\u09B5\u09B4\x03\x02\x02\x02\u09B6\u09B7" +
		"\x03\x02\x02\x02\u09B7\u09B5\x03\x02\x02\x02\u09B7\u09B8\x03\x02\x02\x02" +
		"\u09B8\u09B9\x03\x02\x02\x02\u09B9\u09C3\x07\xB5\x02\x02\u09BA\u09BC\x05" +
		"\f\x07\x02\u09BB\u09BA\x03\x02\x02\x02\u09BC\u09BD\x03\x02\x02\x02\u09BD" +
		"\u09BB\x03\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u09C1\x03\x02" +
		"\x02\x02\u09BF\u09C2\x05\x96L\x02\u09C0\u09C2\x05\x9AN\x02\u09C1\u09BF" +
		"\x03\x02\x02\x02\u09C1\u09C0\x03\x02\x02\x02\u09C2\u09C4\x03\x02\x02\x02" +
		"\u09C3\u09BB\x03\x02\x02\x02\u09C4\u09C5\x03\x02\x02\x02\u09C5\u09C3\x03" +
		"\x02\x02\x02\u09C5\u09C6\x03\x02\x02\x02\u09C6\x95\x03\x02\x02\x02\u09C7" +
		"\u09D1\x07:\x02\x02\u09C8\u09CA\x05\f\x07\x02\u09C9\u09C8\x03\x02\x02" +
		"\x02\u09CA\u09CB\x03\x02\x02\x02\u09CB\u09C9\x03\x02\x02\x02\u09CB\u09CC" +
		"\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02\x02\u09CD\u09CE\x05\x98M\x02" +
		"\u09CE\u09D0\x03\x02\x02\x02\u09CF\u09C9\x03\x02\x02\x02\u09D0\u09D3\x03" +
		"\x02\x02\x02\u09D1\u09CF\x03\x02\x02\x02\u09D1\u09D2\x03\x02\x02\x02\u09D2" +
		"\x97\x03\x02\x02\x02\u09D3\u09D1\x03\x02\x02\x02\u09D4\u09DC\t\b\x02\x02" +
		"\u09D5\u09D7\x05\f\x07\x02\u09D6\u09D5\x03\x02\x02\x02\u09D7\u09D8\x03" +
		"\x02\x02\x02\u09D8\u09D6\x03\x02\x02\x02\u09D8\u09D9\x03\x02\x02\x02\u09D9" +
		"\u09DA\x03\x02\x02\x02\u09DA\u09DB\x07\xCD\x02\x02\u09DB\u09DD\x03\x02" +
		"\x02\x02\u09DC\u09D6\x03\x02\x02\x02\u09DC\u09DD\x03\x02\x02\x02\u09DD" +
		"\u09DF\x03\x02\x02\x02\u09DE\u09E0\x05\f\x07\x02\u09DF\u09DE\x03\x02\x02" +
		"\x02\u09E0\u09E1\x03\x02\x02\x02\u09E1\u09DF\x03\x02\x02\x02\u09E1\u09E2" +
		"\x03\x02\x02\x02\u09E2\u09E3\x03\x02\x02\x02\u09E3\u09E4\x05\x9EP\x02" +
		"\u09E4\x99\x03\x02\x02\x02\u09E5\u09F8\t\r\x02\x02\u09E6\u09E8\x05\f\x07" +
		"\x02\u09E7\u09E6\x03\x02\x02\x02\u09E8\u09E9\x03\x02\x02\x02\u09E9\u09E7" +
		"\x03\x02\x02\x02\u09E9\u09EA\x03\x02\x02\x02\u09EA\u09EB\x03\x02\x02\x02" +
		"\u09EB\u09F5\x05\x9CO\x02\u09EC\u09EE\x05\f\x07\x02\u09ED\u09EC\x03\x02" +
		"\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09ED\x03\x02\x02\x02\u09EF" +
		"\u09F0\x03\x02\x02\x02\u09F0\u09F1\x03\x02\x02\x02\u09F1\u09F2\x05\x98" +
		"M\x02\u09F2\u09F4\x03\x02\x02\x02\u09F3\u09ED\x03\x02\x02\x02\u09F4\u09F7" +
		"\x03\x02\x02\x02\u09F5\u09F3\x03\x02\x02\x02\u09F5\u09F6\x03\x02\x02\x02" +
		"\u09F6\u09F9\x03\x02\x02\x02\u09F7\u09F5\x03\x02\x02\x02\u09F8\u09E7\x03" +
		"\x02\x02\x02\u09F9\u09FA\x03\x02\x02\x02\u09FA\u09F8\x03\x02\x02\x02\u09FA" +
		"\u09FB\x03\x02\x02\x02\u09FB\x9B\x03\x02\x02\x02\u09FC\u0A00\x05\u023E" +
		"\u0120\x02\u09FD\u0A00\x07\u01C1\x02\x02\u09FE\u0A00\x05\x06\x04\x02\u09FF" +
		"\u09FC\x03\x02\x02\x02\u09FF\u09FD\x03\x02\x02\x02\u09FF\u09FE\x03\x02" +
		"\x02\x02\u0A00\x9D\x03\x02\x02\x02\u0A01\u0A02\x05\x9CO\x02\u0A02\x9F" +
		"\x03\x02\x02\x02\u0A03\u0A04\x05\u023E\u0120\x02\u0A04\xA1\x03\x02\x02" +
		"\x02\u0A05\u0A06\x05\u023E\u0120\x02\u0A06\xA3\x03\x02\x02\x02\u0A07\u0A0F" +
		"\x07\xCF\x02\x02\u0A08\u0A0A\x05\f\x07\x02\u0A09\u0A08\x03\x02\x02\x02" +
		"\u0A0A\u0A0B\x03\x02\x02\x02\u0A0B\u0A09\x03\x02\x02\x02\u0A0B\u0A0C\x03" +
		"\x02\x02\x02\u0A0C\u0A0D\x03\x02\x02\x02\u0A0D\u0A0E\x05\u01CE\xE8\x02" +
		"\u0A0E\u0A10\x03\x02\x02\x02\u0A0F\u0A09\x03\x02\x02\x02\u0A10\u0A11\x03" +
		"\x02\x02\x02\u0A11\u0A0F\x03\x02\x02\x02\u0A11\u0A12\x03\x02\x02\x02\u0A12" +
		"\xA5\x03\x02\x02\x02\u0A13\u0A1B\x07\xCE\x02\x02\u0A14\u0A16\x05\f\x07" +
		"\x02\u0A15\u0A14\x03\x02\x02\x02\u0A16\u0A17\x03\x02\x02\x02\u0A17\u0A15" +
		"\x03\x02\x02\x02\u0A17\u0A18\x03\x02\x02\x02\u0A18\u0A19\x03\x02\x02\x02" +
		"\u0A19\u0A1A\x05\xACW\x02\u0A1A\u0A1C\x03\x02\x02\x02\u0A1B\u0A15\x03" +
		"\x02\x02\x02\u0A1C\u0A1D\x03\x02\x02\x02\u0A1D\u0A1B\x03\x02\x02\x02\u0A1D" +
		"\u0A1E\x03\x02\x02\x02\u0A1E\u0A28\x03\x02\x02\x02\u0A1F\u0A21\x05\f\x07" +
		"\x02\u0A20\u0A1F\x03\x02\x02\x02\u0A21\u0A22\x03\x02\x02\x02\u0A22\u0A20" +
		"\x03\x02\x02\x02\u0A22\u0A23\x03\x02\x02\x02\u0A23\u0A24\x03\x02\x02\x02" +
		"\u0A24\u0A25\x05\xA8U\x02\u0A25\u0A27\x03\x02\x02\x02\u0A26\u0A20\x03" +
		"\x02\x02\x02\u0A27\u0A2A\x03\x02\x02\x02\u0A28\u0A26\x03\x02\x02\x02\u0A28" +
		"\u0A29\x03\x02\x02\x02\u0A29\xA7\x03\x02\x02\x02\u0A2A\u0A28\x03\x02\x02" +
		"\x02\u0A2B\u0A47\x07\u0131\x02\x02\u0A2C\u0A2E\x05\f\x07\x02\u0A2D\u0A2C" +
		"\x03\x02\x02\x02\u0A2E\u0A2F\x03\x02\x02\x02\u0A2F\u0A2D\x03\x02\x02\x02" +
		"\u0A2F\u0A30\x03\x02\x02\x02\u0A30\u0A31\x03\x02\x02\x02\u0A31\u0A33\t" +
		"\x0E\x02\x02\u0A32\u0A34\x05\f\x07\x02\u0A33\u0A32\x03\x02\x02\x02\u0A34" +
		"\u0A35\x03\x02\x02\x02\u0A35\u0A33\x03\x02\x02\x02\u0A35\u0A36\x03\x02" +
		"\x02\x02\u0A36\u0A3D\x03\x02\x02\x02\u0A37\u0A39\x07e\x02\x02\u0A38\u0A3A" +
		"\x05\f\x07\x02\u0A39\u0A38\x03\x02\x02\x02\u0A3A\u0A3B\x03\x02\x02\x02" +
		"\u0A3B\u0A39\x03\x02\x02\x02\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C\u0A3E\x03" +
		"\x02\x02\x02\u0A3D\u0A37\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E" +
		"\u0A3F\x03\x02\x02\x02\u0A3F\u0A41\x072\x02\x02\u0A40\u0A42\x05\f\x07" +
		"\x02\u0A41\u0A40\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02\u0A43\u0A41" +
		"\x03\x02\x02\x02\u0A43\u0A44\x03\x02\x02\x02\u0A44\u0A45\x03\x02\x02\x02" +
		"\u0A45\u0A46\x05\xAAV\x02\u0A46\u0A48\x03\x02\x02\x02\u0A47\u0A2D\x03" +
		"\x02\x02\x02\u0A48\u0A49\x03\x02\x02\x02\u0A49\u0A47\x03\x02\x02\x02\u0A49" +
		"\u0A4A\x03\x02\x02\x02\u0A4A\xA9\x03\x02\x02\x02\u0A4B\u0A4E\x05\u023E" +
		"\u0120\x02\u0A4C\u0A4E\x05\u02D0\u0169\x02\u0A4D\u0A4B\x03\x02\x02\x02" +
		"\u0A4D\u0A4C\x03\x02\x02\x02\u0A4E\xAB\x03\x02\x02\x02\u0A4F\u0A50\x05" +
		"\u023E\u0120\x02\u0A50\xAD\x03\x02\x02\x02\u0A51\u0A53\x07\xF3\x02\x02" +
		"\u0A52\u0A54\x05\f\x07\x02\u0A53\u0A52\x03\x02\x02\x02\u0A54\u0A55\x03" +
		"\x02\x02\x02\u0A55\u0A53\x03\x02\x02\x02\u0A55\u0A56\x03\x02\x02\x02\u0A56" +
		"\u0A5D\x03\x02\x02\x02\u0A57\u0A59\t\x0F\x02\x02\u0A58\u0A5A\x05\f\x07" +
		"\x02\u0A59\u0A58\x03\x02\x02\x02\u0A5A\u0A5B\x03\x02\x02\x02\u0A5B\u0A59" +
		"\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5E\x03\x02\x02\x02" +
		"\u0A5D\u0A57\x03\x02\x02\x02\u0A5D\u0A5E\x03\x02\x02\x02\u0A5E\u0A5F\x03" +
		"\x02\x02\x02\u0A5F\u0A61\x05\xD8m\x02\u0A60\u0A62\x05\f\x07\x02\u0A61" +
		"\u0A60\x03\x02\x02\x02\u0A62\u0A63\x03\x02\x02\x02\u0A63\u0A61\x03\x02" +
		"\x02\x02\u0A63\u0A64\x03\x02\x02\x02\u0A64\u0A65\x03\x02\x02\x02\u0A65" +
		"\u0A67\x07\u0175\x02\x02\u0A66\u0A68\x05\f\x07\x02\u0A67\u0A66\x03\x02" +
		"\x02\x02\u0A68\u0A69\x03\x02\x02\x02\u0A69\u0A67\x03\x02\x02\x02\u0A69" +
		"\u0A6A\x03\x02\x02\x02\u0A6A\u0A6B\x03\x02\x02\x02\u0A6B\u0A6C\x05\u0140" +
		"\xA1\x02\u0A6C\xAF\x03\x02\x02\x02\u0A6D\u0A6F\x07\xC8\x02\x02\u0A6E\u0A70" +
		"\x05\f\x07\x02\u0A6F\u0A6E\x03\x02\x02\x02\u0A70\u0A71\x03\x02\x02\x02" +
		"\u0A71\u0A6F\x03\x02\x02\x02\u0A71\u0A72\x03\x02\x02\x02\u0A72\u0A73\x03" +
		"\x02\x02\x02\u0A73\u0A7B\x05\u02D6\u016C\x02\u0A74\u0A76\x05\f\x07\x02" +
		"\u0A75\u0A74\x03\x02\x02\x02\u0A76\u0A77\x03\x02\x02\x02\u0A77\u0A75\x03" +
		"\x02\x02\x02\u0A77\u0A78\x03\x02\x02\x02\u0A78\u0A79\x03\x02\x02\x02\u0A79" +
		"\u0A7A\x07\u0196\x02\x02\u0A7A\u0A7C\x03\x02\x02\x02\u0A7B\u0A75\x03\x02" +
		"\x02\x02\u0A7B\u0A7C\x03\x02\x02\x02\u0A7C\u0A7E\x03\x02\x02\x02\u0A7D" +
		"\u0A7F\x05\f\x07\x02\u0A7E\u0A7D\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02" +
		"\x02\u0A80\u0A7E\x03\x02\x02\x02\u0A80\u0A81\x03\x02\x02\x02\u0A81\u0A8B" +
		"\x03\x02\x02\x02\u0A82\u0A8C\x05$\x13\x02\u0A83\u0A85\x07\xF8\x02\x02" +
		"\u0A84\u0A86\x05\f\x07\x02\u0A85\u0A84\x03\x02\x02\x02\u0A86\u0A87\x03" +
		"\x02\x02\x02\u0A87\u0A85\x03\x02\x02\x02\u0A87\u0A88\x03\x02\x02\x02\u0A88" +
		"\u0A89\x03\x02\x02\x02\u0A89\u0A8A\x07\u0197\x02\x02\u0A8A\u0A8C\x03\x02" +
		"\x02\x02\u0A8B\u0A82\x03\x02\x02\x02\u0A8B\u0A83\x03\x02\x02\x02\u0A8C" +
		"\u0AA3\x03\x02\x02\x02\u0A8D\u0A8F\x05\f\x07\x02\u0A8E\u0A8D\x03\x02\x02" +
		"\x02\u0A8F\u0A90\x03\x02\x02\x02\u0A90\u0A8E\x03\x02\x02\x02\u0A90\u0A91" +
		"\x03\x02\x02\x02\u0A91\u0A92\x03\x02\x02\x02\u0A92\u0A94\x07\u0198\x02" +
		"\x02\u0A93\u0A95\x05\f\x07\x02\u0A94\u0A93\x03\x02\x02\x02\u0A95\u0A96" +
		"\x03\x02\x02\x02\u0A96\u0A94\x03\x02\x02\x02\u0A96\u0A97\x03\x02\x02\x02" +
		"\u0A97\u0AA1\x03\x02\x02\x02\u0A98\u0AA2\x05$\x13\x02\u0A99\u0A9B\x07" +
		"\xF8\x02\x02\u0A9A\u0A9C\x05\f\x07\x02\u0A9B\u0A9A\x03\x02\x02\x02\u0A9C" +
		"\u0A9D\x03\x02\x02\x02\u0A9D\u0A9B\x03\x02\x02\x02\u0A9D\u0A9E\x03\x02" +
		"\x02\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F\u0AA0\x07\u0197\x02\x02\u0AA0" +
		"\u0AA2\x03\x02\x02\x02\u0AA1\u0A98\x03\x02\x02\x02\u0AA1\u0A99\x03\x02" +
		"\x02\x02\u0AA2\u0AA4\x03\x02\x02\x02\u0AA3\u0A8E\x03\x02\x02\x02\u0AA3" +
		"\u0AA4\x03\x02\x02\x02\u0AA4\u0AAC\x03\x02\x02\x02\u0AA5\u0AA7\x05\f\x07" +
		"\x02\u0AA6\u0AA5\x03\x02\x02\x02\u0AA7\u0AA8\x03\x02\x02\x02\u0AA8\u0AA6" +
		"\x03\x02\x02\x02\u0AA8\u0AA9\x03\x02\x02\x02\u0AA9\u0AAA\x03\x02\x02\x02" +
		"\u0AAA\u0AAB\x07\x8A\x02\x02\u0AAB\u0AAD\x03\x02\x02\x02\u0AAC\u0AA6\x03" +
		"\x02\x02\x02\u0AAC\u0AAD\x03\x02\x02\x02\u0AAD\xB1\x03\x02\x02\x02\u0AAE" +
		"\u0AB0\x07\xBA\x02\x02\u0AAF\u0AB1\x05\f\x07\x02\u0AB0\u0AAF\x03\x02\x02" +
		"\x02\u0AB1\u0AB2\x03\x02\x02\x02\u0AB2\u0AB0\x03\x02\x02\x02\u0AB2\u0AB3" +
		"\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02\x02\x02\u0AB4\u0AB5\x05\xB4[\x02" +
		"\u0AB5\xB3\x03\x02\x02\x02\u0AB6\u0AB7\x05\u023E\u0120\x02\u0AB7\xB5\x03" +
		"\x02\x02\x02\u0AB8\u0AB9\x07\xA3\x02\x02\u0AB9\xB7\x03\x02\x02\x02\u0ABA" +
		"\u0ABC\x07\xA3\x02\x02\u0ABB\u0ABD\x05\f\x07\x02\u0ABC\u0ABB\x03\x02\x02" +
		"\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE\u0ABC\x03\x02\x02\x02\u0ABE\u0ABF" +
		"\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0\u0AC1\x07\u011E\x02" +
		"\x02\u0AC1\xB9\x03\x02\x02\x02\u0AC2\u0ACA\x07\xBD\x02\x02\u0AC3\u0AC5" +
		"\x05\f\x07\x02\u0AC4\u0AC3\x03\x02\x02\x02\u0AC5\u0AC6\x03\x02\x02\x02" +
		"\u0AC6\u0AC4\x03\x02\x02\x02\u0AC6\u0AC7\x03\x02\x02\x02\u0AC7\u0AC8\x03" +
		"\x02\x02\x02\u0AC8\u0AC9\x07\u0175\x02\x02\u0AC9\u0ACB\x03\x02\x02\x02" +
		"\u0ACA\u0AC4\x03\x02\x02\x02\u0ACA\u0ACB\x03\x02\x02\x02\u0ACB\u0AD3\x03" +
		"\x02\x02\x02\u0ACC\u0ACE\x05\f\x07\x02\u0ACD\u0ACC\x03\x02\x02\x02\u0ACE" +
		"\u0ACF\x03\x02\x02\x02\u0ACF\u0ACD\x03\x02\x02\x02\u0ACF\u0AD0\x03\x02" +
		"\x02\x02\u0AD0\u0AD1\x03\x02\x02\x02\u0AD1\u0AD2\x05\xBC_\x02\u0AD2\u0AD4" +
		"\x03\x02\x02\x02\u0AD3\u0ACD\x03\x02\x02\x02\u0AD3\u0AD4\x03\x02\x02\x02" +
		"\u0AD4\u0AFC\x03\x02\x02\x02\u0AD5\u0ADD\x07\xBD\x02\x02\u0AD6\u0AD8\x05" +
		"\f\x07\x02\u0AD7\u0AD6\x03\x02\x02\x02\u0AD8\u0AD9\x03\x02\x02\x02\u0AD9" +
		"\u0AD7\x03\x02\x02\x02\u0AD9\u0ADA\x03\x02\x02\x02\u0ADA\u0ADB\x03\x02" +
		"\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\u0ADB\u0ADC\x07\u0175\x02\x02\u0ADC\u0ADE\x03\x02\x02\x02\u0ADD\u0AD7" +
		"\x03\x02\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0AE6\x03\x02\x02\x02" +
		"\u0ADF\u0AE1\x05\f\x07\x02\u0AE0\u0ADF\x03\x02\x02\x02\u0AE1\u0AE2\x03" +
		"\x02\x02\x02\u0AE2\u0AE0\x03\x02\x02\x02\u0AE2\u0AE3\x03\x02\x02\x02\u0AE3" +
		"\u0AE4\x03\x02\x02\x02\u0AE4\u0AE5\x05\xBC_\x02\u0AE5\u0AE7\x03\x02\x02" +
		"\x02\u0AE6\u0AE0\x03\x02\x02\x02\u0AE7\u0AE8\x03\x02\x02\x02\u0AE8\u0AE6" +
		"\x03\x02\x02\x02\u0AE8\u0AE9\x03\x02\x02\x02\u0AE9\u0AEA\x03\x02\x02\x02" +
		"\u0AEA\u0AF2\x07s\x02\x02\u0AEB\u0AED\x05\f\x07\x02\u0AEC\u0AEB\x03\x02" +
		"\x02\x02\u0AED\u0AEE\x03\x02\x02\x02\u0AEE\u0AEC\x03\x02\x02\x02\u0AEE" +
		"\u0AEF\x03\x02\x02\x02\u0AEF\u0AF0\x03\x02\x02\x02\u0AF0\u0AF1\x07\u0102" +
		"\x02\x02\u0AF1\u0AF3\x03\x02\x02\x02\u0AF2\u0AEC\x03\x02\x02\x02\u0AF2" +
		"\u0AF3\x03\x02\x02\x02\u0AF3\u0AF5\x03\x02\x02\x02\u0AF4\u0AF6\x05\f\x07" +
		"\x02\u0AF5\u0AF4\x03\x02\x02\x02\u0AF6\u0AF7\x03\x02\x02\x02\u0AF7\u0AF5" +
		"\x03\x02\x02\x02\u0AF7\u0AF8\x03\x02\x02\x02\u0AF8\u0AF9\x03\x02\x02\x02" +
		"\u0AF9\u0AFA\x05\u023E\u0120\x02\u0AFA\u0AFC\x03\x02\x02\x02\u0AFB\u0AC2" +
		"\x03\x02\x02\x02\u0AFB\u0AD5\x03\x02\x02\x02\u0AFC\xBB\x03\x02\x02\x02" +
		"\u0AFD\u0AFE\x07\u01C4\x02\x02\u0AFE\xBD\x03\x02\x02\x02\u0AFF\u0B01\x07" +
		"\x9F\x02\x02\u0B00\u0B02\x05\f\x07\x02\u0B01\u0B00\x03\x02\x02\x02\u0B02" +
		"\u0B03\x03\x02\x02\x02\u0B03\u0B01\x03\x02\x02\x02\u0B03\u0B04\x03\x02" +
		"\x02\x02\u0B04\u0B05\x03\x02\x02\x02\u0B05\u0B18\x05\xC2b\x02\u0B06\u0B08" +
		"\x05\f\x07\x02\u0B07\u0B06\x03\x02\x02\x02\u0B08\u0B09\x03\x02\x02\x02" +
		"\u0B09\u0B07\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A\u0B0B\x03" +
		"\x02\x02\x02\u0B0B\u0B0C\x07\x11\x02\x02\u0B0C\u0B0E\x03\x02\x02\x02\u0B0D" +
		"\u0B07\x03\x02\x02\x02\u0B0D\u0B0E\x03\x02\x02\x02\u0B0E\u0B10\x03\x02" +
		"\x02\x02\u0B0F\u0B11\x05\f\x07\x02\u0B10\u0B0F\x03\x02\x02\x02\u0B11\u0B12" +
		"\x03\x02\x02\x02\u0B12\u0B10\x03\x02\x02\x02\u0B12\u0B13\x03\x02\x02\x02" +
		"\u0B13\u0B14\x03\x02\x02\x02\u0B14\u0B15\x05\xC2b\x02\u0B15\u0B17\x03" +
		"\x02\x02\x02\u0B16\u0B0D\x03\x02\x02\x02\u0B17\u0B1A\x03\x02\x02\x02\u0B18" +
		"\u0B16\x03\x02\x02\x02\u0B18\u0B19\x03\x02\x02\x02\u0B19\u0B43\x03\x02" +
		"\x02\x02\u0B1A\u0B18\x03\x02\x02\x02\u0B1B\u0B1D\x05\f\x07\x02\u0B1C\u0B1B" +
		"\x03\x02\x02\x02\u0B1D\u0B1E\x03\x02\x02\x02\u0B1E\u0B1C\x03\x02\x02\x02" +
		"\u0B1E\u0B1F\x03\x02\x02\x02\u0B1F\u0B20\x03\x02\x02\x02\u0B20\u0B22\x07" +
		"\u0189\x02\x02\u0B21\u0B23\x05\f\x07\x02\u0B22\u0B21\x03\x02\x02\x02\u0B23" +
		"\u0B24\x03\x02\x02\x02\u0B24\u0B22\x03\x02\x02\x02\u0B24\u0B25\x03\x02" +
		"\x02\x02\u0B25\u0B26\x03\x02\x02\x02\u0B26\u0B39\x05\xC0a\x02\u0B27\u0B29" +
		"\x05\f\x07\x02\u0B28\u0B27\x03\x02\x02\x02\u0B29\u0B2A\x03\x02\x02\x02" +
		"\u0B2A\u0B28\x03\x02\x02\x02\u0B2A\u0B2B\x03\x02\x02\x02\u0B2B\u0B2C\x03" +
		"\x02\x02\x02\u0B2C\u0B2D\x07\x11\x02\x02\u0B2D\u0B2F\x03\x02\x02\x02\u0B2E" +
		"\u0B28\x03\x02\x02\x02\u0B2E\u0B2F\x03\x02\x02\x02\u0B2F\u0B31\x03\x02" +
		"\x02\x02\u0B30\u0B32\x05\f\x07\x02\u0B31\u0B30\x03\x02\x02\x02\u0B32\u0B33" +
		"\x03\x02\x02\x02\u0B33\u0B31\x03\x02\x02\x02\u0B33\u0B34\x03\x02\x02\x02" +
		"\u0B34\u0B35\x03\x02\x02\x02\u0B35\u0B36\x05\xC0a\x02\u0B36\u0B38\x03" +
		"\x02\x02\x02\u0B37\u0B2E\x03\x02\x02\x02\u0B38\u0B3B\x03\x02\x02\x02\u0B39" +
		"\u0B37\x03\x02\x02\x02\u0B39\u0B3A\x03\x02\x02\x02\u0B3A\u0B3D\x03\x02" +
		"\x02\x02\u0B3B\u0B39\x03\x02\x02\x02\u0B3C\u0B3E\x05\f\x07\x02\u0B3D\u0B3C" +
		"\x03\x02\x02\x02\u0B3E\u0B3F\x03\x02\x02\x02\u0B3F\u0B3D\x03\x02\x02\x02" +
		"\u0B3F\u0B40\x03\x02\x02\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41\u0B42\x05" +
		"$\x13\x02\u0B42\u0B44\x03\x02\x02\x02\u0B43\u0B1C\x03\x02\x02\x02\u0B44" +
		"\u0B45\x03\x02\x02\x02\u0B45\u0B43\x03\x02\x02\x02\u0B45\u0B46\x03\x02" +
		"\x02\x02\u0B46\u0B5A\x03\x02\x02\x02\u0B47\u0B49\x05\f\x07\x02\u0B48\u0B47" +
		"\x03\x02\x02\x02\u0B49\u0B4A\x03\x02\x02\x02\u0B4A\u0B48\x03\x02\x02\x02" +
		"\u0B4A\u0B4B\x03\x02\x02\x02\u0B4B\u0B4C\x03\x02\x02\x02\u0B4C\u0B4E\x07" +
		"\u0189\x02\x02\u0B4D\u0B4F\x05\f\x07\x02\u0B4E\u0B4D\x03\x02\x02\x02\u0B4F" +
		"\u0B50\x03\x02\x02\x02\u0B50\u0B4E\x03\x02\x02\x02\u0B50\u0B51\x03\x02" +
		"\x02\x02\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B54\x07\u0194\x02\x02\u0B53" +
		"\u0B55\x05\f\x07\x02\u0B54\u0B53\x03\x02\x02\x02\u0B55\u0B56\x03\x02\x02" +
		"\x02\u0B56\u0B54\x03\x02\x02\x02\u0B56\u0B57\x03\x02\x02\x02\u0B57\u0B58" +
		"\x03\x02\x02\x02\u0B58\u0B59\x05$\x13\x02\u0B59\u0B5B\x03\x02\x02\x02" +
		"\u0B5A\u0B48\x03\x02\x02\x02\u0B5A\u0B5B\x03\x02\x02\x02\u0B5B\u0B63\x03" +
		"\x02\x02\x02\u0B5C\u0B5E\x05\f\x07\x02\u0B5D\u0B5C\x03\x02\x02\x02\u0B5E" +
		"\u0B5F\x03\x02\x02\x02\u0B5F\u0B5D\x03\x02\x02\x02\u0B5F\u0B60\x03\x02" +
		"\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61\u0B62\x07\x89\x02\x02\u0B62" +
		"\u0B64\x03\x02\x02\x02\u0B63\u0B5D\x03\x02\x02\x02\u0B63\u0B64\x03\x02" +
		"\x02\x02\u0B64\xBF\x03\x02\x02\x02\u0B65\u0B82\x05\u02D6\u016C\x02\u0B66" +
		"\u0B68\x07\xFA\x02\x02\u0B67\u0B69\x05\f\x07\x02\u0B68\u0B67\x03\x02\x02" +
		"\x02\u0B69\u0B6A\x03\x02\x02\x02\u0B6A\u0B68\x03\x02\x02\x02\u0B6A\u0B6B" +
		"\x03\x02\x02\x02\u0B6B\u0B6D\x03\x02\x02\x02\u0B6C\u0B66\x03\x02\x02\x02" +
		"\u0B6C\u0B6D\x03\x02\x02\x02\u0B6D\u0B6E\x03\x02\x02\x02\u0B6E\u0B7C\x05" +
		"\u02CE\u0168\x02\u0B6F\u0B71\x05\f\x07\x02\u0B70\u0B6F\x03\x02\x02\x02" +
		"\u0B71\u0B72\x03\x02\x02\x02\u0B72\u0B70\x03\x02\x02\x02\u0B72\u0B73\x03" +
		"\x02\x02\x02\u0B73\u0B74\x03\x02\x02\x02\u0B74\u0B76\t\x07\x02\x02\u0B75" +
		"\u0B77\x05\f\x07\x02\u0B76\u0B75\x03\x02\x02\x02\u0B77\u0B78\x03\x02\x02" +
		"\x02\u0B78\u0B76\x03\x02\x02\x02\u0B78\u0B79\x03\x02\x02\x02\u0B79\u0B7A" +
		"\x03\x02\x02\x02\u0B7A\u0B7B\x05\u02CE\u0168\x02\u0B7B\u0B7D\x03\x02\x02" +
		"\x02\u0B7C\u0B70\x03\x02\x02\x02\u0B7C\u0B7D\x03\x02\x02\x02\u0B7D\u0B82" +
		"\x03\x02\x02\x02\u0B7E\u0B82\x07\u0195\x02\x02\u0B7F\u0B82\x07\u0178\x02" +
		"\x02\u0B80\u0B82\x07\xA8\x02\x02\u0B81\u0B65\x03\x02\x02\x02\u0B81\u0B6C" +
		"\x03\x02\x02\x02\u0B81\u0B7E\x03\x02\x02\x02\u0B81\u0B7F\x03\x02\x02\x02" +
		"\u0B81\u0B80\x03\x02\x02\x02\u0B82\xC1\x03\x02\x02\x02\u0B83\u0B88\x05" +
		"\u02CE\u0168\x02\u0B84\u0B88\x05\u02D6\u016C\x02\u0B85\u0B88\x07\u0178" +
		"\x02\x02\u0B86\u0B88\x07\xA8\x02\x02\u0B87\u0B83\x03\x02\x02\x02\u0B87" +
		"\u0B84\x03\x02\x02\x02\u0B87\u0B85\x03\x02\x02\x02\u0B87\u0B86\x03\x02" +
		"\x02\x02\u0B88\xC3\x03\x02\x02\x02\u0B89\u0B8C\x05\xC6d\x02\u0B8A\u0B8C" +
		"\x05\xC8e\x02\u0B8B\u0B89\x03\x02\x02\x02\u0B8B\u0B8A\x03\x02\x02\x02" +
		"\u0B8C\xC5\x03\x02\x02\x02\u0B8D\u0B8F\x07y\x02\x02\u0B8E\u0B90\x05\f" +
		"\x07\x02\u0B8F\u0B8E\x03\x02\x02\x02\u0B90\u0B91\x03\x02\x02\x02\u0B91" +
		"\u0B8F\x03\x02\x02\x02\u0B91\u0B92\x03\x02\x02\x02\u0B92\u0B93\x03\x02" +
		"\x02\x02\u0B93\u0B95\x05\xCCg\x02\u0B94\u0B96\x05\f\x07\x02\u0B95\u0B94" +
		"\x03\x02\x02\x02\u0B96\u0B97\x03\x02\x02\x02\u0B97\u0B95\x03\x02\x02\x02" +
		"\u0B97\u0B98\x03\x02\x02\x02\u0B98\u0B99\x03\x02\x02\x02\u0B99\u0BA7\t" +
		"\x10\x02\x02\u0B9A\u0B9C\x05\f\x07\x02\u0B9B\u0B9A\x03\x02\x02\x02\u0B9C" +
		"\u0B9D\x03\x02\x02\x02\u0B9D\u0B9B\x03\x02\x02\x02\u0B9D\u0B9E\x03\x02" +
		"\x02\x02\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA1\x05\xCCg\x02\u0BA0\u0BA2" +
		"\x05\f\x07\x02\u0BA1\u0BA0\x03\x02\x02\x02\u0BA2\u0BA3\x03\x02\x02\x02" +
		"\u0BA3\u0BA1\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02\x02\x02\u0BA4\u0BA5\x03" +
		"\x02\x02\x02\u0BA5\u0BA6\x07\xBB\x02\x02\u0BA6\u0BA8\x03\x02\x02\x02\u0BA7" +
		"\u0B9B\x03\x02\x02\x02\u0BA7\u0BA8\x03\x02\x02\x02\u0BA8\u0BB8\x03\x02" +
		"\x02\x02\u0BA9\u0BAB\x05\f\x07\x02\u0BAA\u0BA9\x03\x02\x02\x02\u0BAB\u0BAC" +
		"\x03\x02\x02\x02\u0BAC\u0BAA\x03\x02\x02\x02\u0BAC\u0BAD\x03\x02\x02\x02" +
		"\u0BAD\u0BAE\x03\x02\x02\x02\u0BAE\u0BB6\x05\u02E8\u0175\x02\u0BAF\u0BB1" +
		"\x05\f\x07\x02\u0BB0\u0BAF\x03\x02\x02\x02\u0BB1\u0BB2\x03\x02\x02\x02" +
		"\u0BB2\u0BB0\x03\x02\x02\x02\u0BB2\u0BB3\x03\x02\x02\x02\u0BB3\u0BB4\x03" +
		"\x02\x02\x02\u0BB4\u0BB5\x07\u0142\x02\x02\u0BB5\u0BB7\x03\x02\x02\x02" +
		"\u0BB6\u0BB0\x03\x02\x02\x02\u0BB6\u0BB7\x03\x02\x02\x02\u0BB7\u0BB9\x03" +
		"\x02\x02\x02\u0BB8\u0BAA\x03\x02\x02\x02\u0BB9\u0BBA\x03\x02\x02\x02\u0BBA" +
		"\u0BB8\x03\x02\x02\x02\u0BBA\u0BBB\x03\x02\x02\x02\u0BBB\u0BC3\x03\x02" +
		"\x02\x02\u0BBC\u0BBE\x05\f\x07\x02\u0BBD\u0BBC\x03\x02\x02\x02\u0BBE\u0BBF" +
		"\x03\x02\x02\x02\u0BBF\u0BBD\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02\x02\x02" +
		"\u0BC0\u0BC1\x03\x02\x02\x02\u0BC1\u0BC2\x05\u0116\x8C\x02\u0BC2\u0BC4" +
		"\x03\x02\x02\x02\u0BC3\u0BBD\x03\x02\x02\x02\u0BC3\u0BC4\x03\x02\x02\x02" +
		"\u0BC4\u0BCC\x03\x02\x02\x02\u0BC5\u0BC7\x05\f\x07\x02\u0BC6\u0BC5\x03" +
		"\x02\x02\x02\u0BC7\u0BC8\x03\x02\x02\x02\u0BC8\u0BC6\x03\x02\x02\x02\u0BC8" +
		"\u0BC9\x03\x02\x02\x02\u0BC9\u0BCA\x03\x02\x02\x02\u0BCA\u0BCB\x07\x88" +
		"\x02\x02\u0BCB\u0BCD\x03\x02\x02\x02\u0BCC\u0BC6\x03\x02\x02\x02\u0BCC" +
		"\u0BCD\x03\x02\x02\x02\u0BCD\xC7\x03\x02\x02\x02\u0BCE\u0BD0\x07y\x02" +
		"\x02\u0BCF\u0BD1\x05\f\x07\x02\u0BD0\u0BCF\x03\x02\x02\x02\u0BD1\u0BD2" +
		"\x03\x02\x02\x02\u0BD2\u0BD0\x03\x02\x02\x02\u0BD2\u0BD3\x03\x02\x02\x02" +
		"\u0BD3\u0BD4\x03\x02\x02\x02\u0BD4\u0BD6\x05\xCCg\x02\u0BD5\u0BD7\x05" +
		"\f\x07\x02\u0BD6\u0BD5\x03\x02\x02\x02\u0BD7\u0BD8\x03\x02\x02\x02\u0BD8" +
		"\u0BD6\x03\x02\x02\x02\u0BD8\u0BD9\x03\x02\x02\x02\u0BD9\u0BDA\x03\x02" +
		"\x02\x02\u0BDA\u0BE8\t\x10\x02\x02\u0BDB\u0BDD\x05\f\x07\x02\u0BDC\u0BDB" +
		"\x03\x02\x02\x02\u0BDD\u0BDE\x03\x02\x02\x02\u0BDE\u0BDC\x03\x02\x02\x02" +
		"\u0BDE\u0BDF\x03\x02\x02\x02\u0BDF\u0BE0\x03\x02\x02\x02\u0BE0\u0BE2\x05" +
		"\xCCg\x02\u0BE1\u0BE3\x05\f\x07\x02\u0BE2\u0BE1\x03\x02\x02\x02\u0BE3" +
		"\u0BE4\x03\x02\x02\x02\u0BE4\u0BE2\x03\x02\x02\x02\u0BE4\u0BE5\x03\x02" +
		"\x02\x02\u0BE5\u0BE6\x03\x02\x02\x02\u0BE6\u0BE7\x07\xBB\x02\x02\u0BE7" +
		"\u0BE9\x03\x02\x02\x02\u0BE8\u0BDC\x03\x02\x02\x02\u0BE8\u0BE9\x03\x02" +
		"\x02\x02\u0BE9\u0BEB\x03\x02\x02\x02\u0BEA\u0BEC\x05\f\x07\x02\u0BEB\u0BEA" +
		"\x03\x02\x02\x02\u0BEC\u0BED\x03\x02\x02\x02\u0BED\u0BEB\x03\x02\x02\x02" +
		"\u0BED\u0BEE\x03\x02\x02\x02\u0BEE\u0BEF\x03\x02\x02\x02\u0BEF\u0BF7\x05" +
		"\u02E8\u0175\x02\u0BF0\u0BF2\x05\f\x07\x02\u0BF1\u0BF0\x03\x02\x02\x02" +
		"\u0BF2\u0BF3\x03\x02\x02\x02\u0BF3\u0BF1\x03\x02\x02\x02\u0BF3\u0BF4\x03" +
		"\x02\x02\x02\u0BF4\u0BF5\x03\x02\x02\x02\u0BF5\u0BF6\x07\u0142\x02\x02" +
		"\u0BF6\u0BF8\x03\x02\x02\x02\u0BF7\u0BF1\x03\x02\x02\x02\u0BF7\u0BF8\x03" +
		"\x02\x02\x02\u0BF8\u0BFA\x03\x02\x02\x02\u0BF9\u0BFB\x05\f\x07\x02\u0BFA" +
		"\u0BF9\x03\x02\x02\x02\u0BFB\u0BFC\x03\x02\x02\x02\u0BFC\u0BFA\x03\x02" +
		"\x02\x02\u0BFC\u0BFD\x03\x02\x02\x02\u0BFD\u0BFE\x03\x02\x02\x02\u0BFE" +
		"\u0C00\x07\u012D\x02\x02\u0BFF\u0C01\x05\f\x07\x02\u0C00\u0BFF\x03\x02" +
		"\x02\x02\u0C01\u0C02\x03\x02\x02\x02\u0C02\u0C00\x03\x02\x02\x02\u0C02" +
		"\u0C03\x03\x02\x02\x02\u0C03\u0C04\x03\x02\x02\x02\u0C04\u0C0C\x05\xCA" +
		"f\x02\u0C05\u0C07\x05\f\x07\x02\u0C06\u0C05\x03\x02\x02\x02\u0C07\u0C08" +
		"\x03\x02\x02\x02\u0C08\u0C06\x03\x02\x02\x02\u0C08\u0C09\x03\x02\x02\x02" +
		"\u0C09\u0C0A\x03\x02\x02\x02\u0C0A\u0C0B\x05\u0116\x8C\x02\u0C0B\u0C0D" +
		"\x03\x02\x02\x02\u0C0C\u0C06\x03\x02\x02\x02\u0C0C\u0C0D\x03\x02\x02\x02" +
		"\u0C0D\u0C15\x03\x02\x02\x02\u0C0E\u0C10\x05\f\x07\x02\u0C0F\u0C0E\x03" +
		"\x02\x02\x02\u0C10\u0C11\x03\x02\x02\x02\u0C11\u0C0F\x03\x02\x02\x02\u0C11" +
		"\u0C12\x03\x02\x02\x02\u0C12\u0C13\x03\x02\x02\x02\u0C13\u0C14\x07\x88" +
		"\x02\x02\u0C14\u0C16\x03\x02\x02\x02\u0C15\u0C0F\x03\x02\x02\x02\u0C15" +
		"\u0C16\x03\x02\x02\x02\u0C16\xC9\x03\x02\x02\x02\u0C17\u0C18\x05\u02E8" +
		"\u0175\x02\u0C18\xCB\x03\x02\x02\x02\u0C19\u0C1C\x05\u02EA\u0176\x02\u0C1A" +
		"\u0C1C\x07\u01C2\x02\x02\u0C1B\u0C19\x03\x02\x02\x02\u0C1B\u0C1A\x03\x02" +
		"\x02\x02\u0C1C\xCD\x03\x02\x02\x02\u0C1D\u0C22\x05\xD0i\x02\u0C1E\u0C22" +
		"\x05\xD2j\x02\u0C1F\u0C22\x05\xD4k\x02\u0C20\u0C22\x05\xD6l\x02\u0C21" +
		"\u0C1D\x03\x02\x02\x02\u0C21\u0C1E\x03\x02\x02\x02\u0C21\u0C1F\x03\x02" +
		"\x02\x02\u0C21\u0C20\x03\x02\x02\x02\u0C22\xCF\x03\x02\x02\x02\u0C23\u0C36" +
		"\x07x\x02\x02\u0C24\u0C26\x05\f\x07\x02\u0C25\u0C24\x03\x02\x02\x02\u0C26" +
		"\u0C27\x03\x02\x02\x02\u0C27\u0C25\x03\x02\x02\x02\u0C27\u0C28\x03\x02" +
		"\x02\x02\u0C28\u0C29\x03\x02\x02\x02\u0C29\u0C33\x05\xD8m\x02\u0C2A\u0C2C" +
		"\x05\f\x07\x02\u0C2B\u0C2A\x03\x02\x02\x02\u0C2C\u0C2D\x03\x02\x02\x02" +
		"\u0C2D\u0C2B\x03\x02\x02\x02\u0C2D\u0C2E\x03\x02\x02\x02\u0C2E\u0C2F\x03" +
		"\x02\x02\x02\u0C2F\u0C30\x05\xE0q\x02\u0C30\u0C32\x03\x02\x02\x02\u0C31" +
		"\u0C2B\x03\x02\x02\x02\u0C32\u0C35\x03\x02\x02\x02\u0C33\u0C31\x03\x02" +
		"\x02\x02\u0C33\u0C34\x03\x02\x02\x02\u0C34\u0C37\x03\x02\x02\x02\u0C35" +
		"\u0C33\x03\x02\x02\x02\u0C36\u0C25\x03\x02\x02\x02\u0C37\u0C38\x03\x02" +
		"\x02\x02\u0C38\u0C36\x03\x02\x02\x02\u0C38\u0C39\x03\x02\x02\x02\u0C39" +
		"\u0C41\x03\x02\x02\x02\u0C3A\u0C3C\x05\f\x07\x02\u0C3B\u0C3A\x03\x02\x02" +
		"\x02\u0C3C\u0C3D\x03\x02\x02\x02\u0C3D\u0C3B\x03\x02\x02\x02\u0C3D\u0C3E" +
		"\x03\x02\x02\x02\u0C3E\u0C3F\x03\x02\x02\x02\u0C3F\u0C40\x07\x87\x02\x02" +
		"\u0C40\u0C42\x03\x02\x02\x02\u0C41\u0C3B\x03\x02\x02\x02\u0C41\u0C42\x03" +
		"\x02\x02\x02\u0C42\xD1\x03\x02\x02\x02\u0C43\u0C56\x07x\x02\x02\u0C44" +
		"\u0C46\x05\f\x07\x02\u0C45\u0C44\x03\x02\x02\x02\u0C46\u0C47\x03\x02\x02" +
		"\x02\u0C47\u0C45\x03\x02\x02\x02\u0C47\u0C48\x03\x02\x02\x02\u0C48\u0C49" +
		"\x03\x02\x02\x02\u0C49\u0C53\x05\xD8m\x02\u0C4A\u0C4C\x05\f\x07\x02\u0C4B" +
		"\u0C4A\x03\x02\x02\x02\u0C4C\u0C4D\x03\x02\x02\x02\u0C4D\u0C4B\x03\x02" +
		"\x02\x02\u0C4D\u0C4E\x03\x02\x02\x02\u0C4E\u0C4F\x03\x02\x02\x02\u0C4F" +
		"\u0C50\x05\xE2r\x02\u0C50\u0C52\x03\x02\x02\x02\u0C51\u0C4B\x03\x02\x02" +
		"\x02\u0C52\u0C55\x03\x02\x02\x02\u0C53\u0C51\x03\x02\x02\x02\u0C53\u0C54" +
		"\x03\x02\x02\x02\u0C54\u0C57\x03\x02\x02\x02\u0C55\u0C53\x03\x02\x02\x02" +
		"\u0C56\u0C45\x03\x02\x02\x02\u0C57\u0C58\x03\x02\x02\x02\u0C58\u0C56\x03" +
		"\x02\x02\x02\u0C58\u0C59\x03\x02\x02\x02\u0C59\u0C61\x03\x02\x02\x02\u0C5A" +
		"\u0C5C\x05\f\x07\x02\u0C5B\u0C5A\x03\x02\x02\x02\u0C5C\u0C5D\x03\x02\x02" +
		"\x02\u0C5D\u0C5B\x03\x02\x02\x02\u0C5D\u0C5E\x03\x02\x02\x02\u0C5E\u0C5F" +
		"\x03\x02\x02\x02\u0C5F\u0C60\x07\x87\x02\x02\u0C60\u0C62\x03\x02\x02\x02" +
		"\u0C61\u0C5B\x03\x02\x02\x02\u0C61\u0C62\x03\x02\x02\x02\u0C62\xD3\x03" +
		"\x02\x02\x02\u0C63\u0C65\x07x\x02\x02\u0C64\u0C66\x05\f\x07\x02\u0C65" +
		"\u0C64\x03\x02\x02\x02\u0C66\u0C67\x03\x02\x02\x02\u0C67\u0C65\x03\x02" +
		"\x02\x02\u0C67\u0C68\x03\x02\x02\x02\u0C68\u0C69\x03\x02\x02\x02\u0C69" +
		"\u0C8D\x05\u023E\u0120\x02\u0C6A\u0C6C\x05\f\x07\x02\u0C6B\u0C6A\x03\x02" +
		"\x02\x02\u0C6C\u0C6D\x03\x02\x02\x02\u0C6D\u0C6B\x03\x02\x02\x02\u0C6D" +
		"\u0C6E\x03\x02\x02\x02\u0C6E\u0C75\x03\x02\x02\x02\u0C6F\u0C71\x07\x1F" +
		"\x02\x02\u0C70\u0C72\x05\f\x07\x02\u0C71\u0C70\x03\x02\x02\x02\u0C72\u0C73" +
		"\x03\x02\x02\x02\u0C73\u0C71\x03\x02\x02\x02\u0C73\u0C74\x03\x02\x02\x02" +
		"\u0C74\u0C76\x03\x02\x02\x02\u0C75\u0C6F\x03\x02\x02\x02\u0C75\u0C76\x03" +
		"\x02\x02\x02\u0C76\u0C8B\x03\x02\x02\x02\u0C77\u0C7F\x05\xDCo\x02\u0C78" +
		"\u0C7A\x05\f\x07\x02\u0C79\u0C78\x03\x02\x02\x02\u0C7A\u0C7B\x03\x02\x02" +
		"\x02\u0C7B\u0C79\x03\x02\x02\x02\u0C7B\u0C7C\x03\x02\x02\x02\u0C7C\u0C7D" +
		"\x03\x02\x02\x02\u0C7D\u0C7E\x05\xDEp\x02\u0C7E\u0C80\x03\x02\x02\x02" +
		"\u0C7F\u0C79\x03\x02\x02\x02\u0C7F\u0C80\x03\x02\x02\x02\u0C80\u0C8C\x03" +
		"\x02\x02\x02\u0C81\u0C89\x05\xDEp\x02\u0C82\u0C84\x05\f\x07\x02\u0C83" +
		"\u0C82\x03\x02\x02\x02\u0C84\u0C85\x03\x02\x02\x02\u0C85\u0C83\x03\x02" +
		"\x02\x02\u0C85\u0C86\x03\x02\x02\x02\u0C86\u0C87\x03\x02\x02\x02\u0C87" +
		"\u0C88\x05\xDCo\x02\u0C88\u0C8A\x03\x02\x02\x02\u0C89\u0C83\x03\x02\x02" +
		"\x02\u0C89\u0C8A\x03\x02\x02\x02\u0C8A\u0C8C\x03\x02\x02\x02\u0C8B\u0C77" +
		"\x03\x02\x02\x02\u0C8B\u0C81\x03\x02\x02\x02\u0C8C\u0C8E\x03\x02\x02\x02" +
		"\u0C8D\u0C6B\x03\x02\x02\x02\u0C8D\u0C8E\x03\x02\x02\x02\u0C8E\u0C96\x03" +
		"\x02\x02\x02\u0C8F\u0C91\x05\f\x07\x02\u0C90\u0C8F\x03\x02\x02\x02\u0C91" +
		"\u0C92\x03\x02\x02\x02\u0C92\u0C90\x03\x02\x02\x02\u0C92\u0C93\x03\x02" +
		"\x02\x02\u0C93\u0C94\x03\x02\x02\x02\u0C94\u0C95\x07\x87\x02\x02\u0C95" +
		"\u0C97\x03\x02\x02\x02\u0C96\u0C90\x03\x02\x02\x02\u0C96\u0C97\x03\x02" +
		"\x02\x02\u0C97\xD5\x03\x02\x02\x02\u0C98\u0C9A\x07x\x02\x02\u0C99\u0C9B" +
		"\x05\f\x07\x02\u0C9A\u0C99\x03\x02\x02\x02\u0C9B\u0C9C\x03\x02\x02\x02" +
		"\u0C9C\u0C9A\x03\x02\x02\x02\u0C9C\u0C9D\x03\x02\x02\x02\u0C9D\u0C9E\x03" +
		"\x02\x02\x02\u0C9E\u0CA0\x05\xD8m\x02\u0C9F\u0CA1\x05\f\x07\x02\u0CA0" +
		"\u0C9F\x03\x02\x02\x02\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2\u0CA0\x03\x02" +
		"\x02\x02\u0CA2\u0CA3\x03\x02\x02\x02\u0CA3\u0CA4\x03\x02\x02\x02\u0CA4" +
		"\u0CA6\x07\u0181\x02\x02\u0CA5\u0CA7\x05\f\x07\x02\u0CA6\u0CA5\x03\x02" +
		"\x02\x02\u0CA7\u0CA8\x03\x02\x02\x02\u0CA8\u0CA6\x03\x02\x02\x02\u0CA8" +
		"\u0CA9\x03\x02\x02\x02\u0CA9\u0CAA\x03\x02\x02\x02\u0CAA\u0CB2\x05\xDA" +
		"n\x02\u0CAB\u0CAD\x05\f\x07\x02\u0CAC\u0CAB\x03\x02\x02\x02\u0CAD\u0CAE" +
		"\x03\x02\x02\x02\u0CAE\u0CAC\x03\x02\x02\x02\u0CAE\u0CAF\x03\x02\x02\x02" +
		"\u0CAF\u0CB0\x03\x02\x02\x02\u0CB0\u0CB1\x05\u0112\x8A\x02\u0CB1\u0CB3" +
		"\x03\x02\x02\x02\u0CB2\u0CAC\x03\x02\x02\x02\u0CB2\u0CB3\x03\x02\x02\x02" +
		"\u0CB3\u0CBB\x03\x02\x02\x02\u0CB4\u0CB6\x05\f\x07\x02\u0CB5\u0CB4\x03" +
		"\x02\x02\x02\u0CB6\u0CB7\x03\x02\x02\x02\u0CB7\u0CB5\x03\x02\x02\x02\u0CB7" +
		"\u0CB8\x03\x02\x02\x02\u0CB8\u0CB9\x03\x02\x02\x02\u0CB9\u0CBA\x07\x87" +
		"\x02\x02\u0CBA\u0CBC\x03\x02\x02\x02\u0CBB\u0CB5\x03\x02\x02\x02\u0CBB" +
		"\u0CBC\x03\x02\x02\x02\u0CBC\xD7\x03\x02\x02\x02\u0CBD\u0CC0\x05\u02EA" +
		"\u0176\x02\u0CBE\u0CC0\x05\u02D0\u0169\x02\u0CBF\u0CBD\x03\x02\x02\x02" +
		"\u0CBF\u0CBE\x03\x02\x02\x02\u0CC0\xD9\x03\x02\x02\x02\u0CC1\u0CC2\x07" +
		"\u01C4\x02\x02\u0CC2\xDB\x03\x02\x02\x02\u0CC3\u0CCB\x07\xE4\x02\x02\u0CC4" +
		"\u0CC6\x05\f\x07\x02\u0CC5\u0CC4\x03\x02\x02\x02\u0CC6\u0CC7\x03\x02\x02" +
		"\x02\u0CC7\u0CC5\x03\x02\x02\x02\u0CC7\u0CC8\x03\x02\x02\x02\u0CC8\u0CC9" +
		"\x03\x02\x02\x02\u0CC9\u0CCA\x07\xFB\x02\x02\u0CCA\u0CCC\x03\x02\x02\x02" +
		"\u0CCB\u0CC5\x03\x02\x02\x02\u0CCB\u0CCC\x03\x02\x02\x02\u0CCC\u0CCE\x03" +
		"\x02\x02\x02\u0CCD\u0CCF\x05\f\x07\x02\u0CCE\u0CCD\x03\x02\x02\x02\u0CCF" +
		"\u0CD0\x03\x02\x02\x02\u0CD0\u0CCE\x03\x02\x02\x02\u0CD0\u0CD1\x03\x02" +
		"\x02\x02\u0CD1\u0CD4\x03\x02\x02\x02\u0CD2\u0CD5\x05\u02EA\u0176\x02\u0CD3" +
		"\u0CD5\x07\u01C2\x02\x02\u0CD4\u0CD2\x03\x02\x02\x02\u0CD4\u0CD3\x03\x02" +
		"\x02\x02\u0CD5\xDD\x03\x02\x02\x02\u0CD6\u0CDE\x07A\x02\x02\u0CD7\u0CD9" +
		"\x05\f\x07\x02\u0CD8\u0CD7\x03\x02\x02\x02\u0CD9\u0CDA\x03\x02\x02\x02" +
		"\u0CDA\u0CD8\x03\x02\x02\x02\u0CDA\u0CDB\x03\x02\x02\x02\u0CDB\u0CDC\x03" +
		"\x02\x02\x02\u0CDC\u0CDD\x07\xFB\x02\x02\u0CDD\u0CDF\x03\x02\x02\x02\u0CDE" +
		"\u0CD8\x03\x02\x02\x02\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CE1\x03\x02" +
		"\x02\x02\u0CE0\u0CE2\x05\f\x07\x02\u0CE1\u0CE0\x03\x02\x02\x02\u0CE2\u0CE3" +
		"\x03\x02\x02\x02\u0CE3\u0CE1\x03\x02\x02\x02\u0CE3\u0CE4\x03\x02\x02\x02" +
		"\u0CE4\u0CE7\x03\x02\x02\x02\u0CE5\u0CE8\x05\u02EA\u0176\x02\u0CE6\u0CE8" +
		"\x07\u01C2\x02\x02\u0CE7\u0CE5\x03\x02\x02\x02\u0CE7\u0CE6\x03\x02\x02" +
		"\x02\u0CE8\xDF\x03\x02\x02\x02\u0CE9\u0CEB\x07\u018B\x02\x02\u0CEA\u0CEC" +
		"\x05\f\x07\x02\u0CEB\u0CEA\x03\x02\x02\x02\u0CEC\u0CED\x03\x02\x02\x02" +
		"\u0CED\u0CEB\x03\x02\x02\x02\u0CED\u0CEE\x03\x02\x02\x02\u0CEE\u0CF0\x03" +
		"\x02\x02\x02\u0CEF\u0CE9\x03\x02\x02\x02\u0CEF\u0CF0\x03\x02\x02\x02\u0CF0" +
		"\u0CF1\x03\x02\x02\x02\u0CF1\u0D0D\x07\\\x02\x02\u0CF2\u0CF4\x07\u0181" +
		"\x02\x02\u0CF3\u0CF5\x05\f\x07\x02\u0CF4\u0CF3\x03\x02\x02\x02\u0CF5\u0CF6" +
		"\x03\x02\x02\x02\u0CF6\u0CF4\x03\x02\x02\x02\u0CF6\u0CF7\x03\x02\x02\x02" +
		"\u0CF7\u0CF8\x03\x02\x02\x02\u0CF8\u0CF9\x05\xE8u\x02\u0CF9\u0D0D\x03" +
		"\x02\x02\x02\u0CFA\u0CFC\x07\u018B\x02\x02\u0CFB\u0CFD\x05\f\x07\x02\u0CFC" +
		"\u0CFB\x03\x02\x02\x02\u0CFD\u0CFE\x03\x02\x02\x02\u0CFE\u0CFC\x03\x02" +
		"\x02\x02\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D01\x03\x02\x02\x02\u0D00" +
		"\u0CFA\x03\x02\x02\x02\u0D00\u0D01\x03\x02\x02\x02\u0D01\u0D02\x03\x02" +
		"\x02\x02\u0D02\u0D0A\x07\xF9\x02\x02\u0D03\u0D05\x05\f\x07\x02\u0D04\u0D03" +
		"\x03\x02\x02\x02\u0D05\u0D06\x03\x02\x02\x02\u0D06\u0D04\x03\x02\x02\x02" +
		"\u0D06\u0D07\x03\x02\x02\x02\u0D07\u0D08\x03\x02\x02\x02\u0D08\u0D09\x07" +
		"\t\x02\x02\u0D09\u0D0B\x03\x02\x02\x02\u0D0A\u0D04\x03\x02\x02\x02\u0D0A" +
		"\u0D0B\x03\x02\x02\x02\u0D0B\u0D0D\x03\x02\x02\x02\u0D0C\u0CEF\x03\x02" +
		"\x02\x02\u0D0C\u0CF2\x03\x02\x02\x02\u0D0C\u0D00\x03\x02\x02\x02\u0D0D" +
		"\xE1\x03\x02\x02\x02\u0D0E\u0D63\x05\xE0q\x02\u0D0F\u0D63\x05\xE4s\x02" +
		"\u0D10\u0D63\x05\xE6t\x02\u0D11\u0D29\x07\x9D\x02\x02\u0D12\u0D14\x05" +
		"\f\x07\x02\u0D13\u0D12\x03\x02\x02\x02\u0D14\u0D15\x03\x02\x02\x02\u0D15" +
		"\u0D13\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D1D\x03\x02" +
		"\x02\x02\u0D17\u0D19\x07\u0175\x02\x02\u0D18\u0D1A\x05\f\x07\x02\u0D19" +
		"\u0D18\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02\u0D1B\u0D19\x03\x02" +
		"\x02\x02\u0D1B\u0D1C\x03\x02\x02\x02\u0D1C\u0D1E\x03\x02\x02\x02\u0D1D" +
		"\u0D17\x03\x02\x02\x02\u0D1D\u0D1E\x03\x02\x02\x02\u0D1E\u0D1F\x03\x02" +
		"\x02\x02\u0D1F\u0D27\x07\x81\x02\x02\u0D20\u0D22\x05\f\x07\x02\u0D21\u0D20" +
		"\x03\x02\x02\x02\u0D22\u0D23\x03\x02\x02\x02\u0D23\u0D21\x03\x02\x02\x02" +
		"\u0D23\u0D24\x03\x02\x02\x02\u0D24\u0D25\x03\x02\x02\x02\u0D25\u0D26\x07" +
		"\xFF\x02\x02\u0D26\u0D28\x03\x02\x02\x02\u0D27\u0D21\x03\x02\x02\x02\u0D27" +
		"\u0D28\x03\x02\x02\x02\u0D28\u0D2A\x03\x02\x02\x02\u0D29\u0D13\x03\x02" +
		"\x02\x02\u0D29\u0D2A\x03\x02\x02\x02\u0D2A\u0D2C\x03\x02\x02\x02\u0D2B" +
		"\u0D2D\x05\f\x07\x02\u0D2C\u0D2B\x03\x02\x02\x02\u0D2D\u0D2E\x03\x02\x02" +
		"\x02\u0D2E\u0D2C\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30" +
		"\x03\x02\x02\x02\u0D30\u0D31\t\x11\x02\x02\u0D31\u0D63\x03\x02\x02\x02" +
		"\u0D32\u0D34\x07\u018B\x02\x02\u0D33\u0D35\x05\f\x07\x02\u0D34\u0D33\x03" +
		"\x02\x02\x02\u0D35\u0D36\x03\x02\x02\x02\u0D36\u0D34\x03\x02\x02\x02\u0D36" +
		"\u0D37\x03\x02\x02\x02\u0D37\u0D39\x03\x02\x02\x02\u0D38\u0D32\x03\x02" +
		"\x02\x02\u0D38\u0D39\x03\x02\x02\x02\u0D39\u0D3A\x03\x02\x02\x02\u0D3A" +
		"\u0D63\x07&\x02\x02\u0D3B\u0D63\x07\u017B\x02\x02\u0D3C\u0D63\x070\x02" +
		"\x02\u0D3D\u0D3F\x07\u018B\x02\x02\u0D3E\u0D40\x05\f\x07\x02\u0D3F\u0D3E" +
		"\x03\x02\x02\x02\u0D40\u0D41\x03\x02\x02\x02\u0D41\u0D3F\x03\x02\x02\x02" +
		"\u0D41\u0D42\x03\x02\x02\x02\u0D42\u0D44\x03\x02\x02\x02\u0D43\u0D3D\x03" +
		"\x02\x02\x02\u0D43\u0D44\x03\x02\x02\x02\u0D44\u0D45\x03\x02\x02\x02\u0D45" +
		"\u0D63\x07.\x02\x02\u0D46\u0D63\x07\u013A\x02\x02\u0D47\u0D49\x07\u018B" +
		"\x02\x02\u0D48\u0D4A\x05\f\x07\x02\u0D49\u0D48\x03\x02\x02\x02\u0D4A\u0D4B" +
		"\x03\x02\x02\x02\u0D4B\u0D49\x03\x02\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02" +
		"\u0D4C\u0D4E\x03\x02\x02\x02\u0D4D\u0D47\x03\x02\x02\x02\u0D4D\u0D4E\x03" +
		"\x02\x02\x02\u0D4E\u0D4F\x03\x02\x02\x02\u0D4F\u0D63\x07\\\x02\x02\u0D50" +
		"\u0D52\x07\u018B\x02\x02\u0D51\u0D53\x05\f\x07\x02\u0D52\u0D51\x03\x02" +
		"\x02\x02\u0D53\u0D54\x03\x02\x02\x02\u0D54\u0D52\x03\x02\x02\x02\u0D54" +
		"\u0D55\x03\x02\x02\x02\u0D55\u0D57\x03\x02\x02\x02\u0D56\u0D50\x03\x02" +
		"\x02\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57\u0D58\x03\x02\x02\x02\u0D58" +
		"\u0D60\x07\xF9\x02\x02\u0D59\u0D5B\x05\f\x07\x02\u0D5A\u0D59\x03\x02\x02" +
		"\x02\u0D5B\u0D5C\x03\x02\x02\x02\u0D5C\u0D5A\x03\x02\x02\x02\u0D5C\u0D5D" +
		"\x03\x02\x02\x02\u0D5D\u0D5E\x03\x02\x02\x02\u0D5E\u0D5F\x07\t\x02\x02" +
		"\u0D5F\u0D61\x03\x02\x02\x02\u0D60\u0D5A\x03\x02\x02\x02\u0D60\u0D61\x03" +
		"\x02\x02\x02\u0D61\u0D63\x03\x02\x02\x02\u0D62\u0D0E\x03\x02\x02\x02\u0D62" +
		"\u0D0F\x03\x02\x02\x02\u0D62\u0D10\x03\x02\x02\x02\u0D62\u0D11\x03\x02" +
		"\x02\x02\u0D62\u0D38\x03\x02\x02\x02\u0D62\u0D3B\x03\x02\x02\x02\u0D62" +
		"\u0D3C\x03\x02\x02\x02\u0D62\u0D43\x03\x02\x02\x02\u0D62\u0D46\x03\x02" +
		"\x02\x02\u0D62\u0D4D\x03\x02\x02\x02\u0D62\u0D56\x03\x02\x02\x02\u0D63" +
		"\xE3\x03\x02\x02\x02\u0D64\u0D66\x07\x1F\x02\x02\u0D65\u0D67\x05\f\x07" +
		"\x02\u0D66\u0D65\x03\x02\x02\x02\u0D67\u0D68\x03\x02\x02\x02\u0D68\u0D66" +
		"\x03\x02\x02\x02\u0D68\u0D69\x03\x02\x02\x02\u0D69\u0D6B\x03\x02\x02\x02" +
		"\u0D6A\u0D64\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02\u0D6B\u0D6C\x03" +
		"\x02\x02\x02\u0D6C\u0D74\x07\xE4\x02\x02\u0D6D\u0D6F\x05\f\x07\x02\u0D6E" +
		"\u0D6D\x03\x02\x02\x02\u0D6F\u0D70\x03\x02\x02\x02\u0D70\u0D6E\x03\x02" +
		"\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D72\x03\x02\x02\x02\u0D72" +
		"\u0D73\x07\xFB\x02\x02\u0D73\u0D75\x03\x02\x02\x02\u0D74\u0D6E\x03\x02" +
		"\x02\x02\u0D74\u0D75\x03\x02\x02\x02\u0D75\u0D77\x03\x02\x02\x02\u0D76" +
		"\u0D78\x05\f\x07\x02\u0D77\u0D76\x03\x02\x02\x02\u0D78\u0D79\x03\x02\x02" +
		"\x02\u0D79\u0D77\x03\x02\x02\x02\u0D79\u0D7A\x03\x02\x02\x02\u0D7A\u0D7B" +
		"\x03\x02\x02\x02\u0D7B\u0D7C\x05\u013C\x9F\x02\u0D7C\xE5\x03\x02\x02\x02" +
		"\u0D7D\u0D7F\x07\x1F\x02\x02\u0D7E\u0D80\x05\f\x07\x02\u0D7F\u0D7E\x03" +
		"\x02\x02\x02\u0D80\u0D81\x03\x02\x02\x02\u0D81\u0D7F\x03\x02\x02\x02\u0D81" +
		"\u0D82\x03\x02\x02\x02\u0D82\u0D84\x03\x02\x02\x02\u0D83\u0D7D\x03\x02" +
		"\x02\x02\u0D83";
	private static readonly _serializedATNSegment9: string =
		"\u0D84\x03\x02\x02\x02\u0D84\u0D85\x03\x02\x02\x02\u0D85\u0D8D\x07A\x02" +
		"\x02\u0D86\u0D88\x05\f\x07\x02\u0D87\u0D86\x03\x02\x02\x02\u0D88\u0D89" +
		"\x03\x02\x02\x02\u0D89\u0D87\x03\x02\x02\x02\u0D89\u0D8A\x03\x02\x02\x02" +
		"\u0D8A\u0D8B\x03\x02\x02\x02\u0D8B\u0D8C\x07\xFB\x02\x02\u0D8C\u0D8E\x03" +
		"\x02\x02\x02\u0D8D\u0D87\x03\x02\x02\x02\u0D8D\u0D8E\x03\x02\x02\x02\u0D8E" +
		"\u0D90\x03\x02\x02\x02\u0D8F\u0D91\x05\f\x07\x02\u0D90\u0D8F\x03\x02\x02" +
		"\x02\u0D91\u0D92\x03\x02\x02\x02\u0D92\u0D90\x03\x02\x02\x02\u0D92\u0D93" +
		"\x03\x02\x02\x02\u0D93\u0D94\x03\x02\x02\x02\u0D94\u0D95\x05\u013C\x9F" +
		"\x02\u0D95\xE7\x03\x02\x02\x02\u0D96\u0D97\x07\u01C4\x02\x02\u0D97\xE9" +
		"\x03\x02\x02\x02\u0D98\u0D9A\x07q\x02\x02\u0D99\u0D9B\x05\f\x07\x02\u0D9A" +
		"\u0D99\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C\u0D9A\x03\x02" +
		"\x02\x02\u0D9C\u0D9D\x03\x02\x02\x02\u0D9D\u0D9E\x03\x02\x02\x02\u0D9E" +
		"\u0DA6\x05\u02A8\u0155\x02\u0D9F\u0DA1\x05\f\x07\x02\u0DA0\u0D9F\x03\x02" +
		"\x02\x02\u0DA1\u0DA2\x03\x02\x02\x02\u0DA2\u0DA0\x03\x02\x02\x02\u0DA2" +
		"\u0DA3\x03\x02\x02\x02\u0DA3\u0DA4\x03\x02\x02\x02\u0DA4\u0DA5\x07\u0126" +
		"\x02\x02\u0DA5\u0DA7\x03\x02\x02\x02\u0DA6\u0DA0\x03\x02\x02\x02\u0DA6" +
		"\u0DA7\x03\x02\x02\x02\u0DA7\u0DAF\x03\x02\x02\x02\u0DA8\u0DAA\x05\f\x07" +
		"\x02\u0DA9\u0DA8\x03\x02\x02\x02\u0DAA\u0DAB\x03\x02\x02\x02\u0DAB\u0DA9" +
		"\x03\x02\x02\x02\u0DAB\u0DAC\x03\x02\x02\x02\u0DAC\u0DAD\x03\x02\x02\x02" +
		"\u0DAD\u0DAE\x05\u0118\x8D\x02\u0DAE\u0DB0\x03\x02\x02\x02\u0DAF\u0DA9" +
		"\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02\u0DB0\u0DB8\x03\x02\x02\x02" +
		"\u0DB1\u0DB3\x05\f\x07\x02\u0DB2\u0DB1\x03\x02\x02\x02\u0DB3\u0DB4\x03" +
		"\x02\x02\x02\u0DB4\u0DB2\x03\x02\x02\x02\u0DB4\u0DB5\x03\x02\x02\x02\u0DB5" +
		"\u0DB6\x03\x02\x02\x02\u0DB6\u0DB7\x07\x86\x02\x02\u0DB7\u0DB9\x03\x02" +
		"\x02\x02\u0DB8\u0DB2\x03\x02\x02\x02\u0DB8\u0DB9\x03\x02\x02\x02\u0DB9" +
		"\xEB\x03\x02\x02\x02\u0DBA\u0DBB\x07Y\x02\x02\u0DBB\xED\x03\x02\x02\x02" +
		"\u0DBC\u0DCC\x07L\x02\x02\u0DBD\u0DBF\x05\f\x07\x02\u0DBE\u0DBD\x03\x02" +
		"\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02\u0DC0\u0DBE\x03\x02\x02\x02\u0DC0" +
		"\u0DC1\x03\x02\x02\x02\u0DC1\u0DC2\x03\x02\x02\x02\u0DC2\u0DCA\x05\u02E8" +
		"\u0175\x02\u0DC3\u0DC5\x05\f\x07\x02\u0DC4\u0DC3\x03\x02\x02\x02\u0DC5" +
		"\u0DC6\x03\x02\x02\x02\u0DC6\u0DC4\x03\x02\x02\x02\u0DC6\u0DC7\x03\x02" +
		"\x02\x02\u0DC7\u0DC8\x03\x02\x02\x02\u0DC8\u0DC9\x07\u0142\x02\x02\u0DC9" +
		"\u0DCB\x03\x02\x02\x02\u0DCA\u0DC4\x03\x02\x02\x02\u0DCA\u0DCB\x03\x02" +
		"\x02\x02\u0DCB\u0DCD\x03\x02\x02\x02\u0DCC\u0DBE\x03\x02\x02\x02\u0DCD" +
		"\u0DCE\x03\x02\x02\x02\u0DCE\u0DCC\x03\x02\x02\x02\u0DCE\u0DCF\x03\x02" +
		"\x02\x02\u0DCF\u0DE8\x03\x02\x02\x02\u0DD0\u0DD2\x05\f\x07\x02\u0DD1\u0DD0" +
		"\x03\x02\x02\x02\u0DD2\u0DD3\x03\x02\x02\x02\u0DD3\u0DD1\x03\x02\x02\x02" +
		"\u0DD3\u0DD4\x03\x02\x02\x02\u0DD4\u0DD5\x03\x02\x02\x02\u0DD5\u0DD7\x07" +
		"\x9C\x02\x02\u0DD6\u0DD8\x05\f\x07\x02\u0DD7\u0DD6\x03\x02\x02\x02\u0DD8" +
		"\u0DD9\x03\x02\x02\x02\u0DD9\u0DD7\x03\x02\x02\x02\u0DD9\u0DDA\x03\x02" +
		"\x02\x02\u0DDA\u0DE9\x03\x02\x02\x02\u0DDB\u0DDD\x05\f\x07\x02\u0DDC\u0DDB" +
		"\x03\x02\x02\x02\u0DDD\u0DE0\x03\x02\x02\x02\u0DDE\u0DDC\x03\x02\x02\x02" +
		"\u0DDE\u0DDF\x03\x02\x02\x02\u0DDF\u0DE1\x03\x02\x02\x02\u0DE0\u0DDE\x03" +
		"\x02\x02\x02\u0DE1\u0DE5\x07\u01B3\x02\x02\u0DE2\u0DE4\x05\f\x07\x02\u0DE3" +
		"\u0DE2\x03\x02\x02\x02\u0DE4\u0DE7\x03\x02\x02\x02\u0DE5\u0DE3\x03\x02" +
		"\x02\x02\u0DE5\u0DE6\x03\x02\x02\x02\u0DE6\u0DE9\x03\x02\x02\x02\u0DE7" +
		"\u0DE5\x03\x02\x02\x02\u0DE8\u0DD1\x03\x02\x02\x02\u0DE8\u0DDE\x03\x02" +
		"\x02\x02\u0DE9\u0DEA\x03\x02\x02\x02\u0DEA\u0DF2\x05\u02CE\u0168\x02\u0DEB" +
		"\u0DED\x05\f\x07\x02\u0DEC\u0DEB\x03\x02\x02\x02\u0DED\u0DEE\x03\x02\x02" +
		"\x02\u0DEE\u0DEC\x03\x02\x02\x02\u0DEE\u0DEF\x03\x02\x02\x02\u0DEF\u0DF0" +
		"\x03\x02\x02\x02\u0DF0\u0DF1\x05\u0116\x8C\x02\u0DF1\u0DF3\x03\x02\x02" +
		"\x02\u0DF2\u0DEC\x03\x02\x02\x02\u0DF2\u0DF3\x03\x02\x02\x02\u0DF3\u0DFB" +
		"\x03\x02\x02\x02\u0DF4\u0DF6\x05\f\x07\x02\u0DF5\u0DF4\x03\x02\x02\x02" +
		"\u0DF6\u0DF7\x03\x02\x02\x02\u0DF7\u0DF5\x03\x02\x02\x02\u0DF7\u0DF8\x03" +
		"\x02\x02\x02\u0DF8\u0DF9\x03\x02\x02\x02\u0DF9\u0DFA\x07\x85\x02\x02\u0DFA" +
		"\u0DFC\x03\x02\x02\x02\u0DFB\u0DF5\x03\x02\x02\x02\u0DFB\u0DFC\x03\x02" +
		"\x02\x02\u0DFC\xEF\x03\x02\x02\x02\u0DFD\u0E0D\x07=\x02\x02\u0DFE\u0E00" +
		"\x05\f\x07\x02\u0DFF\u0DFE\x03\x02\x02\x02\u0E00\u0E01\x03\x02\x02\x02" +
		"\u0E01\u0DFF\x03\x02\x02\x02\u0E01\u0E02\x03\x02\x02\x02\u0E02\u0E03\x03" +
		"\x02\x02\x02\u0E03\u0E0B\x05\u02A8\u0155\x02\u0E04\u0E06\x05\f\x07\x02" +
		"\u0E05\u0E04\x03\x02\x02\x02\u0E06\u0E07\x03\x02\x02\x02\u0E07\u0E05\x03" +
		"\x02\x02\x02\u0E07\u0E08\x03\x02\x02\x02\u0E08\u0E09\x03\x02\x02\x02\u0E09" +
		"\u0E0A\x05\xF2z\x02\u0E0A\u0E0C\x03\x02\x02\x02\u0E0B\u0E05\x03\x02\x02" +
		"\x02\u0E0B\u0E0C\x03\x02\x02\x02\u0E0C\u0E0E\x03\x02\x02\x02\u0E0D\u0DFF" +
		"\x03\x02\x02\x02\u0E0E\u0E0F\x03\x02\x02\x02\u0E0F\u0E0D\x03\x02\x02\x02" +
		"\u0E0F\u0E10\x03\x02\x02\x02\u0E10\xF1\x03\x02\x02\x02\u0E11\u0E32\t\x12" +
		"\x02\x02\u0E12\u0E14\x05\f\x07\x02\u0E13\u0E12\x03\x02\x02\x02\u0E14\u0E15" +
		"\x03\x02\x02\x02\u0E15\u0E13\x03\x02\x02\x02\u0E15\u0E16\x03\x02\x02\x02" +
		"\u0E16\u0E30\x03\x02\x02\x02\u0E17\u0E19\x07\xB5\x02\x02\u0E18\u0E1A\x05" +
		"\f\x07\x02\u0E19\u0E18\x03\x02\x02\x02\u0E1A\u0E1B\x03\x02\x02\x02\u0E1B" +
		"\u0E19\x03\x02\x02\x02\u0E1B\u0E1C\x03\x02\x02\x02\u0E1C\u0E1E\x03\x02" +
		"\x02\x02\u0E1D\u0E17\x03\x02\x02\x02\u0E1D\u0E1E\x03\x02\x02\x02\u0E1E" +
		"\u0E1F\x03\x02\x02\x02\u0E1F\u0E31\x07\u012E\x02\x02\u0E20\u0E22\x07\u018B" +
		"\x02\x02\u0E21\u0E23\x05\f\x07\x02\u0E22\u0E21\x03\x02\x02\x02\u0E23\u0E24" +
		"\x03\x02\x02\x02\u0E24\u0E22\x03\x02\x02\x02\u0E24\u0E25\x03\x02\x02\x02" +
		"\u0E25\u0E27\x03\x02\x02\x02\u0E26\u0E20\x03\x02\x02\x02\u0E26\u0E27\x03" +
		"\x02\x02\x02\u0E27\u0E28\x03\x02\x02\x02\u0E28\u0E2A\x07\xF9\x02\x02\u0E29" +
		"\u0E2B\x05\f\x07\x02\u0E2A\u0E29\x03\x02\x02\x02\u0E2B\u0E2C\x03\x02\x02" +
		"\x02\u0E2C\u0E2A\x03\x02\x02\x02\u0E2C\u0E2D\x03\x02\x02\x02\u0E2D\u0E2E" +
		"\x03\x02\x02\x02\u0E2E\u0E2F\x07\u013C\x02\x02\u0E2F\u0E31\x03\x02\x02" +
		"\x02\u0E30\u0E1D\x03\x02\x02\x02\u0E30\u0E26\x03\x02\x02\x02\u0E31\u0E33" +
		"\x03\x02\x02\x02\u0E32\u0E13\x03\x02\x02\x02\u0E32\u0E33\x03\x02\x02\x02" +
		"\u0E33\u0E48\x03\x02\x02\x02\u0E34\u0E36\x07\u018B\x02\x02\u0E35\u0E37" +
		"\x05\f\x07\x02\u0E36\u0E35\x03\x02\x02\x02\u0E37\u0E38\x03\x02\x02\x02" +
		"\u0E38\u0E36\x03\x02\x02\x02\u0E38\u0E39\x03\x02\x02\x02\u0E39\u0E3B\x03" +
		"\x02\x02\x02\u0E3A\u0E34\x03\x02\x02\x02\u0E3A\u0E3B\x03\x02\x02\x02\u0E3B" +
		"\u0E45\x03\x02\x02\x02\u0E3C\u0E3E\x07\xF9\x02\x02\u0E3D\u0E3F\x05\f\x07" +
		"\x02\u0E3E\u0E3D\x03\x02\x02\x02\u0E3F\u0E40\x03\x02\x02\x02\u0E40\u0E3E" +
		"\x03\x02\x02\x02\u0E40\u0E41\x03\x02\x02\x02\u0E41\u0E42\x03\x02\x02\x02" +
		"\u0E42\u0E43\x07\u013C\x02\x02\u0E43\u0E46\x03\x02\x02\x02\u0E44\u0E46" +
		"\x07\xE8\x02\x02\u0E45\u0E3C\x03\x02\x02\x02\u0E45\u0E44\x03\x02\x02\x02" +
		"\u0E46\u0E48\x03\x02\x02\x02\u0E47\u0E11\x03\x02\x02\x02\u0E47\u0E3A\x03" +
		"\x02\x02\x02\u0E48\xF3\x03\x02\x02\x02\u0E49\u0E51\x075\x02\x02\u0E4A" +
		"\u0E4C\x05\f\x07\x02\u0E4B\u0E4A\x03\x02\x02\x02\u0E4C\u0E4D\x03\x02\x02" +
		"\x02\u0E4D\u0E4B\x03\x02\x02\x02\u0E4D\u0E4E\x03\x02\x02\x02\u0E4E\u0E4F" +
		"\x03\x02\x02\x02\u0E4F\u0E50\x05\u0102\x82\x02\u0E50\u0E52\x03\x02\x02" +
		"\x02\u0E51\u0E4B\x03\x02\x02\x02\u0E52\u0E53\x03\x02\x02\x02\u0E53\u0E51" +
		"\x03\x02\x02\x02\u0E53\u0E54\x03\x02\x02\x02\u0E54\xF5\x03\x02\x02\x02" +
		"\u0E55\u0E57\x074\x02\x02\u0E56\u0E58\x05\f\x07\x02\u0E57\u0E56\x03\x02" +
		"\x02\x02\u0E58\u0E59\x03\x02\x02\x02\u0E59\u0E57\x03\x02\x02\x02\u0E59" +
		"\u0E5A\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02\x02\x02\u0E5B\u0E63\x05\u0102" +
		"\x82\x02\u0E5C\u0E5E\x05\f\x07\x02\u0E5D\u0E5C\x03\x02\x02\x02\u0E5E\u0E5F" +
		"\x03\x02\x02\x02\u0E5F\u0E5D\x03\x02\x02\x02\u0E5F\u0E60\x03\x02\x02\x02" +
		"\u0E60\u0E61\x03\x02\x02\x02\u0E61\u0E62\x05\xFA~\x02\u0E62\u0E64\x03" +
		"\x02\x02\x02\u0E63\u0E5D\x03\x02\x02\x02\u0E63\u0E64\x03\x02\x02\x02\u0E64" +
		"\u0E6C\x03\x02\x02\x02\u0E65\u0E67\x05\f\x07\x02\u0E66\u0E65\x03\x02\x02" +
		"\x02\u0E67\u0E68\x03\x02\x02\x02\u0E68\u0E66\x03\x02\x02\x02\u0E68\u0E69" +
		"\x03\x02\x02\x02\u0E69\u0E6A\x03\x02\x02\x02\u0E6A\u0E6B\x05\xF8}\x02" +
		"\u0E6B\u0E6D\x03\x02\x02\x02\u0E6C\u0E66\x03\x02\x02\x02\u0E6C\u0E6D\x03" +
		"\x02\x02\x02\u0E6D\u0E75\x03\x02\x02\x02\u0E6E\u0E70\x05\f\x07\x02\u0E6F" +
		"\u0E6E\x03\x02\x02\x02\u0E70\u0E71\x03\x02\x02\x02\u0E71\u0E6F\x03\x02" +
		"\x02\x02\u0E71\u0E72\x03\x02\x02\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73" +
		"\u0E74\x05\u0112\x8A\x02\u0E74\u0E76\x03\x02\x02\x02\u0E75\u0E6F\x03\x02" +
		"\x02\x02\u0E75\u0E76\x03\x02\x02\x02\u0E76\u0E7E\x03\x02\x02\x02\u0E77" +
		"\u0E79\x05\f\x07\x02\u0E78\u0E77\x03\x02\x02\x02\u0E79\u0E7A\x03\x02\x02" +
		"\x02\u0E7A\u0E78\x03\x02\x02\x02\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0E7C" +
		"\x03\x02\x02\x02\u0E7C\u0E7D\x07\x84\x02\x02\u0E7D\u0E7F\x03\x02\x02\x02" +
		"\u0E7E\u0E78\x03\x02\x02\x02\u0E7E\u0E7F\x03\x02\x02\x02\u0E7F\xF7\x03" +
		"\x02\x02\x02\u0E80\u0E82\x07\xBB\x02\x02\u0E81\u0E83\x05\f\x07\x02\u0E82" +
		"\u0E81\x03\x02\x02\x02\u0E83\u0E84\x03\x02\x02\x02\u0E84\u0E82\x03\x02" +
		"\x02\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85\u0E86\x03\x02\x02\x02\u0E86" +
		"\u0E87\x05\u02E8\u0175\x02\u0E87\xF9\x03\x02\x02\x02\u0E88\u0E90\x07\u0184" +
		"\x02\x02\u0E89\u0E8B\x05\f\x07\x02\u0E8A\u0E89\x03\x02\x02\x02\u0E8B\u0E8C" +
		"\x03\x02\x02\x02\u0E8C\u0E8A\x03\x02\x02\x02\u0E8C\u0E8D\x03\x02\x02\x02" +
		"\u0E8D\u0E8E\x03\x02\x02\x02\u0E8E\u0E8F\x05\xFC\x7F\x02\u0E8F\u0E91\x03" +
		"\x02\x02\x02\u0E90\u0E8A\x03\x02\x02\x02\u0E91\u0E92\x03\x02\x02\x02\u0E92" +
		"\u0E90\x03\x02\x02\x02\u0E92\u0E93\x03\x02\x02\x02\u0E93\xFB\x03\x02\x02" +
		"\x02\u0E94\u0EAB\x07\u0101\x02\x02\u0E95\u0E97\x05\xFE\x80\x02\u0E96\u0E98" +
		"\x05\f\x07\x02\u0E97\u0E96\x03\x02\x02\x02\u0E98\u0E99\x03\x02\x02\x02" +
		"\u0E99\u0E97\x03\x02\x02\x02\u0E99\u0E9A\x03\x02\x02\x02\u0E9A\u0E9C\x03" +
		"\x02\x02\x02\u0E9B\u0E95\x03\x02\x02\x02\u0E9B\u0E9C\x03\x02\x02\x02\u0E9C" +
		"\u0E9D\x03\x02\x02\x02\u0E9D\u0EA7\x05\u0100\x81\x02\u0E9E\u0EA0\x05\f" +
		"\x07\x02\u0E9F\u0E9E\x03\x02\x02\x02\u0EA0\u0EA1\x03\x02\x02\x02\u0EA1" +
		"\u0E9F\x03\x02\x02\x02\u0EA1\u0EA2\x03\x02\x02\x02\u0EA2\u0EA3\x03\x02" +
		"\x02\x02\u0EA3\u0EA4\x05\u0100\x81\x02\u0EA4\u0EA6\x03\x02\x02\x02\u0EA5" +
		"\u0E9F\x03\x02\x02\x02\u0EA6\u0EA9\x03\x02\x02\x02\u0EA7\u0EA5\x03\x02" +
		"\x02\x02\u0EA7\u0EA8\x03\x02\x02\x02\u0EA8\u0EAB\x03\x02\x02\x02\u0EA9" +
		"\u0EA7\x03\x02\x02\x02\u0EAA\u0E94\x03\x02\x02\x02\u0EAA\u0E9B\x03\x02" +
		"\x02\x02\u0EAB\xFD\x03\x02\x02\x02\u0EAC\u0EAE\x072\x02\x02\u0EAD\u0EAF" +
		"\x05\f\x07\x02\u0EAE\u0EAD\x03\x02\x02\x02\u0EAF\u0EB0\x03\x02\x02\x02" +
		"\u0EB0\u0EAE\x03\x02\x02\x02\u0EB0\u0EB1\x03\x02\x02\x02\u0EB1\u0EB3\x03" +
		"\x02\x02\x02\u0EB2\u0EAC\x03\x02\x02\x02\u0EB2\u0EB3\x03\x02\x02\x02\u0EB3" +
		"\u0EB4\x03\x02\x02\x02\u0EB4\u0ED1\x07\u012A\x02\x02\u0EB5\u0EB7\x072" +
		"\x02\x02\u0EB6\u0EB8\x05\f\x07\x02\u0EB7\u0EB6\x03\x02\x02\x02\u0EB8\u0EB9" +
		"\x03\x02\x02\x02\u0EB9\u0EB7\x03\x02\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02" +
		"\u0EBA\u0EBC\x03\x02\x02\x02\u0EBB\u0EB5\x03\x02\x02\x02\u0EBB\u0EBC\x03" +
		"\x02\x02\x02\u0EBC\u0EBD\x03\x02\x02\x02\u0EBD\u0ED1\x07V\x02\x02\u0EBE" +
		"\u0EC0\x072\x02\x02\u0EBF\u0EC1\x05\f\x07\x02\u0EC0\u0EBF\x03\x02\x02" +
		"\x02\u0EC1\u0EC2\x03\x02\x02\x02\u0EC2\u0EC0\x03\x02\x02\x02\u0EC2\u0EC3" +
		"\x03\x02\x02\x02\u0EC3\u0EC5\x03\x02\x02\x02\u0EC4\u0EBE\x03\x02\x02\x02" +
		"\u0EC4\u0EC5\x03\x02\x02\x02\u0EC5\u0EC6\x03\x02\x02\x02\u0EC6\u0ED1\x07" +
		"u\x02\x02\u0EC7\u0EC9\x072\x02\x02\u0EC8\u0ECA\x05\f\x07\x02\u0EC9\u0EC8" +
		"\x03\x02\x02\x02\u0ECA\u0ECB\x03\x02\x02\x02\u0ECB\u0EC9\x03\x02\x02\x02" +
		"\u0ECB\u0ECC\x03\x02\x02\x02\u0ECC\u0ECE\x03\x02\x02\x02\u0ECD\u0EC7\x03" +
		"\x02\x02\x02\u0ECD\u0ECE\x03\x02\x02\x02\u0ECE\u0ECF\x03\x02\x02\x02\u0ECF" +
		"\u0ED1\x07\u0185\x02\x02\u0ED0\u0EB2\x03\x02\x02\x02\u0ED0\u0EBB\x03\x02" +
		"\x02\x02\u0ED0\u0EC4\x03\x02\x02\x02\u0ED0\u0ECD\x03\x02\x02\x02\u0ED1" +
		"\xFF\x03\x02\x02\x02\u0ED2\u0ED6\x05\u023E\u0120\x02\u0ED3\u0ED6\x07\u01C2" +
		"\x02\x02\u0ED4\u0ED6\x07\u01C1\x02\x02\u0ED5\u0ED2\x03\x02\x02\x02\u0ED5" +
		"\u0ED3\x03\x02\x02\x02\u0ED5\u0ED4\x03\x02\x02\x02\u0ED6\u0101\x03\x02" +
		"\x02\x02\u0ED7\u0ED8\t\x05\x02\x02\u0ED8\u0103\x03\x02\x02\x02\u0ED9\u0EFB" +
		"\x07\x12\x02\x02\u0EDA\u0EDC\x05\f\x07\x02\u0EDB\u0EDA\x03\x02\x02\x02" +
		"\u0EDC\u0EDD\x03\x02\x02\x02\u0EDD\u0EDB\x03\x02\x02\x02\u0EDD\u0EDE\x03" +
		"\x02\x02\x02\u0EDE\u0EDF\x03\x02\x02\x02\u0EDF\u0EE1\x05\u0108\x85\x02" +
		"\u0EE0\u0EE2\x05\f\x07\x02\u0EE1\u0EE0\x03\x02\x02\x02\u0EE2\u0EE3\x03" +
		"\x02\x02\x02\u0EE3\u0EE1\x03\x02\x02\x02\u0EE3\u0EE4\x03\x02\x02\x02\u0EE4" +
		"\u0EE5\x03\x02\x02\x02\u0EE5\u0EE7\x07\u0175\x02\x02\u0EE6\u0EE8\x05\f" +
		"\x07\x02\u0EE7\u0EE6\x03\x02\x02\x02\u0EE8\u0EE9\x03\x02\x02\x02\u0EE9" +
		"\u0EE7\x03\x02\x02\x02\u0EE9\u0EEA\x03\x02\x02\x02\u0EEA\u0EF7\x03\x02" +
		"\x02\x02\u0EEB\u0EED\x07\u011D\x02\x02\u0EEC\u0EEE\x05\f\x07\x02\u0EED" +
		"\u0EEC\x03\x02\x02\x02\u0EEE\u0EEF\x03\x02\x02\x02\u0EEF\u0EED\x03\x02" +
		"\x02\x02\u0EEF\u0EF0\x03\x02\x02\x02\u0EF0\u0EF1\x03\x02\x02\x02\u0EF1" +
		"\u0EF3\x07\u0175\x02\x02\u0EF2\u0EF4\x05\f\x07\x02\u0EF3\u0EF2\x03\x02" +
		"\x02\x02\u0EF4\u0EF5\x03\x02\x02\x02\u0EF5\u0EF3\x03\x02\x02\x02\u0EF5" +
		"\u0EF6\x03\x02\x02\x02\u0EF6\u0EF8\x03\x02\x02\x02\u0EF7\u0EEB\x03\x02" +
		"\x02\x02\u0EF7\u0EF8\x03\x02\x02\x02\u0EF8\u0EF9\x03\x02\x02\x02\u0EF9" +
		"\u0EFA\x05\u0106\x84\x02\u0EFA\u0EFC\x03\x02\x02\x02\u0EFB\u0EDB\x03\x02" +
		"\x02\x02\u0EFC\u0EFD\x03\x02\x02\x02\u0EFD\u0EFB\x03\x02\x02\x02\u0EFD" +
		"\u0EFE\x03\x02\x02\x02\u0EFE\u0105\x03\x02\x02\x02\u0EFF\u0F00\x07\u01C4" +
		"\x02\x02\u0F00\u0107\x03\x02\x02\x02\u0F01\u0F02\x07\u01C4\x02\x02\u0F02" +
		"\u0109\x03\x02\x02\x02\u0F03\u0F0B\x07\b\x02\x02\u0F04\u0F06\x05\f\x07" +
		"\x02\u0F05\u0F04\x03\x02\x02\x02\u0F06\u0F07\x03\x02\x02\x02\u0F07\u0F05" +
		"\x03\x02\x02\x02\u0F07\u0F08\x03\x02\x02\x02\u0F08\u0F09\x03\x02\x02\x02" +
		"\u0F09\u0F0A\x05\u010E\x88\x02\u0F0A\u0F0C\x03\x02\x02\x02\u0F0B\u0F05" +
		"\x03\x02\x02\x02\u0F0C\u0F0D\x03\x02\x02\x02\u0F0D\u0F0B\x03\x02\x02\x02" +
		"\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E\u0F10\x03\x02\x02\x02\u0F0F\u0F11\x05" +
		"\f\x07\x02\u0F10\u0F0F\x03\x02\x02\x02\u0F11\u0F12\x03\x02\x02\x02\u0F12" +
		"\u0F10\x03\x02\x02\x02\u0F12\u0F13\x03\x02\x02\x02\u0F13\u0F14\x03\x02" +
		"\x02\x02\u0F14\u0F24\x07\u0175\x02\x02\u0F15\u0F17\x05\f\x07\x02\u0F16" +
		"\u0F15\x03\x02\x02\x02\u0F17\u0F18\x03\x02\x02\x02\u0F18\u0F16\x03\x02" +
		"\x02\x02\u0F18\u0F19\x03\x02\x02\x02\u0F19\u0F1A\x03\x02\x02\x02\u0F1A" +
		"\u0F22\x05\u02E8\u0175\x02\u0F1B\u0F1D\x05\f\x07\x02\u0F1C\u0F1B\x03\x02" +
		"\x02\x02\u0F1D\u0F1E\x03\x02\x02\x02\u0F1E\u0F1C\x03\x02\x02\x02\u0F1E" +
		"\u0F1F\x03\x02\x02\x02\u0F1F\u0F20\x03\x02\x02\x02\u0F20\u0F21\x07\u0142" +
		"\x02\x02\u0F21\u0F23\x03\x02\x02\x02\u0F22\u0F1C\x03\x02\x02\x02\u0F22" +
		"\u0F23\x03\x02\x02\x02\u0F23\u0F25\x03\x02\x02\x02\u0F24\u0F16\x03\x02" +
		"\x02\x02\u0F25\u0F26\x03\x02\x02\x02\u0F26\u0F24\x03\x02\x02\x02\u0F26" +
		"\u0F27\x03\x02\x02\x02\u0F27\u0F85\x03\x02\x02\x02\u0F28\u0F32\x07\b\x02" +
		"\x02\u0F29\u0F2B\x05\f\x07\x02\u0F2A\u0F29\x03\x02\x02\x02\u0F2B\u0F2C" +
		"\x03\x02\x02\x02\u0F2C\u0F2A\x03\x02\x02\x02\u0F2C\u0F2D\x03\x02\x02\x02" +
		"\u0F2D\u0F2E\x03\x02\x02\x02\u0F2E\u0F2F\x05\u010E\x88\x02\u0F2F\u0F31" +
		"\x03\x02\x02\x02\u0F30\u0F2A\x03\x02\x02\x02\u0F31\u0F34\x03\x02\x02\x02" +
		"\u0F32\u0F30\x03\x02\x02\x02\u0F32\u0F33\x03\x02\x02\x02\u0F33\u0F3C\x03" +
		"\x02\x02\x02\u0F34\u0F32\x03\x02\x02\x02\u0F35\u0F37\x05\f\x07\x02\u0F36" +
		"\u0F35\x03\x02\x02\x02\u0F37\u0F38\x03\x02\x02\x02\u0F38\u0F36\x03\x02" +
		"\x02\x02\u0F38\u0F39\x03\x02\x02\x02\u0F39\u0F3A\x03\x02\x02\x02\u0F3A" +
		"\u0F3B\x07\u0175\x02\x02\u0F3B\u0F3D\x03\x02\x02\x02\u0F3C\u0F36\x03\x02" +
		"\x02\x02\u0F3C\u0F3D\x03\x02\x02\x02\u0F3D\u0F45\x03\x02\x02\x02\u0F3E" +
		"\u0F40\x05\f\x07\x02\u0F3F\u0F3E\x03\x02\x02\x02\u0F40\u0F41\x03\x02\x02" +
		"\x02\u0F41\u0F3F\x03\x02\x02\x02\u0F41\u0F42\x03\x02\x02\x02\u0F42\u0F43" +
		"\x03\x02\x02\x02\u0F43\u0F44\x05\u010E\x88\x02\u0F44\u0F46\x03\x02\x02" +
		"\x02\u0F45\u0F3F\x03\x02\x02\x02\u0F46\u0F47\x03\x02\x02\x02\u0F47\u0F45" +
		"\x03\x02\x02\x02\u0F47\u0F48\x03\x02\x02\x02\u0F48\u0F4A\x03\x02\x02\x02" +
		"\u0F49\u0F4B\x05\f\x07\x02\u0F4A\u0F49\x03\x02\x02\x02\u0F4B\u0F4C\x03" +
		"\x02\x02\x02\u0F4C\u0F4A\x03\x02\x02\x02\u0F4C\u0F4D\x03\x02\x02\x02\u0F4D" +
		"\u0F4E\x03\x02\x02\x02\u0F4E\u0F5E\x07\xBB\x02\x02\u0F4F\u0F51\x05\f\x07" +
		"\x02\u0F50\u0F4F\x03\x02\x02\x02\u0F51\u0F52\x03\x02\x02\x02\u0F52\u0F50" +
		"\x03\x02\x02\x02\u0F52\u0F53\x03\x02\x02\x02\u0F53\u0F54\x03\x02\x02\x02" +
		"\u0F54\u0F5C\x05\u02E8\u0175\x02\u0F55\u0F57\x05\f\x07\x02\u0F56\u0F55" +
		"\x03\x02\x02\x02\u0F57\u0F58\x03\x02\x02\x02\u0F58\u0F56\x03\x02\x02\x02" +
		"\u0F58\u0F59\x03\x02\x02\x02\u0F59\u0F5A\x03\x02\x02\x02\u0F5A\u0F5B\x07" +
		"\u0142\x02\x02\u0F5B\u0F5D\x03\x02\x02\x02\u0F5C\u0F56\x03\x02\x02\x02" +
		"\u0F5C\u0F5D\x03\x02\x02\x02\u0F5D\u0F5F\x03\x02\x02\x02\u0F5E\u0F50\x03" +
		"\x02\x02\x02\u0F5F\u0F60\x03\x02\x02\x02\u0F60\u0F5E\x03\x02\x02\x02\u0F60" +
		"\u0F61\x03\x02\x02\x02\u0F61\u0F85\x03\x02\x02\x02\u0F62\u0F64\x07\b\x02" +
		"\x02\u0F63\u0F65\x05\f\x07\x02\u0F64\u0F63\x03\x02\x02\x02\u0F65\u0F66" +
		"\x03\x02\x02\x02\u0F66\u0F64\x03\x02\x02\x02\u0F66\u0F67\x03\x02\x02\x02" +
		"\u0F67\u0F68\x03\x02\x02\x02\u0F68\u0F6A\t\x0F\x02\x02\u0F69\u0F6B\x05" +
		"\f\x07\x02\u0F6A\u0F69\x03\x02\x02\x02\u0F6B\u0F6C\x03\x02\x02\x02\u0F6C" +
		"\u0F6A\x03\x02\x02\x02\u0F6C\u0F6D\x03\x02\x02\x02\u0F6D\u0F6E\x03\x02" +
		"\x02\x02\u0F6E\u0F70\x05\u010C\x87\x02\u0F6F\u0F71\x05\f\x07\x02\u0F70" +
		"\u0F6F\x03\x02\x02\x02\u0F71\u0F72\x03\x02\x02\x02\u0F72\u0F70\x03\x02" +
		"\x02\x02\u0F72\u0F73\x03\x02\x02\x02\u0F73\u0F74\x03\x02\x02\x02\u0F74" +
		"\u0F76\x07\u0175\x02\x02\u0F75\u0F77\x05\f\x07\x02\u0F76\u0F75\x03\x02" +
		"\x02\x02\u0F77\u0F78\x03\x02\x02\x02\u0F78\u0F76\x03\x02\x02\x02\u0F78" +
		"\u0F79\x03\x02\x02\x02\u0F79\u0F7A\x03\x02\x02\x02\u0F7A\u0F82\x05\u010C" +
		"\x87\x02\u0F7B\u0F7D\x05\f\x07\x02\u0F7C\u0F7B\x03\x02\x02\x02\u0F7D\u0F7E" +
		"\x03\x02\x02\x02\u0F7E\u0F7C\x03\x02\x02\x02\u0F7E\u0F7F\x03\x02\x02\x02" +
		"\u0F7F\u0F80\x03\x02\x02\x02\u0F80\u0F81\x07\u0142\x02\x02\u0F81\u0F83" +
		"\x03\x02\x02\x02\u0F82\u0F7C\x03\x02\x02\x02\u0F82\u0F83\x03\x02\x02\x02" +
		"\u0F83\u0F85\x03\x02\x02\x02\u0F84\u0F03\x03\x02\x02\x02\u0F84\u0F28\x03" +
		"\x02\x02\x02\u0F84\u0F62\x03\x02\x02\x02\u0F85\u0F8D\x03\x02\x02\x02\u0F86" +
		"\u0F88\x05\f\x07\x02\u0F87\u0F86\x03\x02\x02\x02\u0F88\u0F89\x03\x02\x02" +
		"\x02\u0F89\u0F87\x03\x02\x02\x02\u0F89\u0F8A\x03\x02\x02\x02\u0F8A\u0F8B" +
		"\x03\x02\x02\x02\u0F8B\u0F8C\x05\u0116\x8C\x02\u0F8C\u0F8E\x03\x02\x02" +
		"\x02\u0F8D\u0F87\x03\x02\x02\x02\u0F8D\u0F8E\x03\x02\x02\x02\u0F8E\u0F96" +
		"\x03\x02\x02\x02\u0F8F\u0F91\x05\f\x07\x02\u0F90\u0F8F\x03\x02\x02\x02" +
		"\u0F91\u0F92\x03\x02\x02\x02\u0F92\u0F90\x03\x02\x02\x02\u0F92\u0F93\x03" +
		"\x02\x02\x02\u0F93\u0F94\x03\x02\x02\x02\u0F94\u0F95\x07\x83\x02\x02\u0F95" +
		"\u0F97\x03\x02\x02\x02\u0F96\u0F90\x03\x02\x02\x02\u0F96\u0F97\x03\x02" +
		"\x02\x02\u0F97\u010B\x03\x02\x02\x02\u0F98\u0F99\x05\u023E\u0120\x02\u0F99" +
		"\u010D\x03\x02\x02\x02\u0F9A\u0F9D\x07\u01C2\x02\x02\u0F9B\u0F9D\x05\u02EA" +
		"\u0176\x02\u0F9C\u0F9A\x03\x02\x02\x02\u0F9C\u0F9B\x03\x02\x02\x02\u0F9D" +
		"\u010F\x03\x02\x02\x02\u0F9E\u0FA5\x05\u011E\x90\x02\u0F9F\u0FA5\x05\u0120" +
		"\x91\x02\u0FA0\u0FA5\x05\u0122\x92\x02\u0FA1\u0FA5\x05\u0124\x93\x02\u0FA2" +
		"\u0FA5\x05\u0126\x94\x02\u0FA3\u0FA5\x05\u011A\x8E\x02\u0FA4\u0F9E\x03" +
		"\x02\x02\x02\u0FA4\u0F9F\x03\x02\x02\x02\u0FA4\u0FA0\x03\x02\x02\x02\u0FA4" +
		"\u0FA1\x03\x02\x02\x02\u0FA4\u0FA2\x03\x02\x02\x02\u0FA4\u0FA3\x03\x02" +
		"\x02\x02\u0FA5\u0111\x03\x02\x02\x02\u0FA6\u0FB4\x05\u0146\xA4\x02\u0FA7" +
		"\u0FA9\x05\f\x07\x02\u0FA8\u0FA7\x03\x02\x02\x02\u0FA9\u0FAA\x03\x02\x02" +
		"\x02\u0FAA\u0FA8\x03\x02\x02\x02\u0FAA\u0FAB\x03\x02\x02\x02\u0FAB\u0FAC" +
		"\x03\x02\x02\x02\u0FAC\u0FAE\x07\xFA\x02\x02\u0FAD\u0FAF\x05\f\x07\x02" +
		"\u0FAE\u0FAD\x03\x02\x02\x02\u0FAF\u0FB0\x03\x02\x02\x02\u0FB0\u0FAE\x03" +
		"\x02\x02\x02\u0FB0\u0FB1\x03\x02\x02\x02\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2" +
		"\u0FB3\x05\u0146\xA4\x02\u0FB3\u0FB5\x03\x02\x02\x02\u0FB4\u0FA8\x03\x02" +
		"\x02\x02\u0FB4\u0FB5\x03\x02\x02\x02\u0FB5\u0FC7\x03\x02\x02\x02\u0FB6" +
		"\u0FB8\x07\xFA\x02\x02\u0FB7\u0FB9\x05\f\x07\x02\u0FB8\u0FB7\x03\x02\x02" +
		"\x02\u0FB9\u0FBA\x03\x02\x02\x02\u0FBA\u0FB8\x03\x02\x02\x02\u0FBA\u0FBB" +
		"\x03\x02\x02\x02\u0FBB\u0FBC\x03\x02\x02\x02\u0FBC\u0FC4\x05\u0146\xA4" +
		"\x02\u0FBD\u0FBF\x05\f\x07\x02\u0FBE\u0FBD\x03\x02\x02\x02\u0FBF\u0FC0" +
		"\x03\x02\x02\x02\u0FC0\u0FBE\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02" +
		"\u0FC1\u0FC2\x03\x02\x02\x02\u0FC2\u0FC3\x05\u0146\xA4\x02\u0FC3\u0FC5" +
		"\x03\x02\x02\x02\u0FC4\u0FBE\x03\x02\x02\x02\u0FC4\u0FC5\x03\x02\x02\x02" +
		"\u0FC5\u0FC7\x03\x02\x02\x02\u0FC6\u0FA6\x03\x02\x02\x02\u0FC6\u0FB6\x03" +
		"\x02\x02\x02\u0FC7\u0113\x03\x02\x02\x02\u0FC8\u0FD6\x05\u0144\xA3\x02" +
		"\u0FC9\u0FCB\x05\f\x07\x02\u0FCA\u0FC9\x03\x02\x02\x02\u0FCB\u0FCC\x03" +
		"\x02\x02\x02\u0FCC\u0FCA\x03\x02\x02\x02\u0FCC\u0FCD\x03\x02\x02\x02\u0FCD" +
		"\u0FCE\x03\x02\x02\x02\u0FCE\u0FD0\x07\xFA\x02\x02\u0FCF\u0FD1\x05\f\x07" +
		"\x02\u0FD0\u0FCF\x03\x02\x02\x02\u0FD1\u0FD2\x03\x02\x02\x02\u0FD2\u0FD0" +
		"\x03\x02\x02\x02\u0FD2\u0FD3\x03\x02\x02\x02\u0FD3\u0FD4\x03\x02\x02\x02" +
		"\u0FD4\u0FD5\x05\u0144\xA3\x02\u0FD5\u0FD7\x03\x02\x02\x02\u0FD6\u0FCA" +
		"\x03\x02\x02\x02\u0FD6\u0FD7\x03\x02\x02\x02\u0FD7\u0FE9\x03\x02\x02\x02" +
		"\u0FD8\u0FDA\x07\xFA\x02\x02\u0FD9\u0FDB\x05\f\x07\x02\u0FDA\u0FD9\x03" +
		"\x02\x02\x02\u0FDB\u0FDC\x03\x02\x02\x02\u0FDC\u0FDA\x03\x02\x02\x02\u0FDC" +
		"\u0FDD\x03\x02\x02\x02\u0FDD\u0FDE\x03\x02\x02\x02\u0FDE\u0FE6\x05\u0144" +
		"\xA3\x02\u0FDF\u0FE1\x05\f\x07\x02\u0FE0\u0FDF\x03\x02\x02\x02\u0FE1\u0FE2" +
		"\x03\x02\x02\x02\u0FE2\u0FE0\x03\x02\x02\x02\u0FE2\u0FE3\x03\x02\x02\x02" +
		"\u0FE3\u0FE4\x03\x02\x02\x02\u0FE4\u0FE5\x05\u0144\xA3\x02\u0FE5\u0FE7" +
		"\x03\x02\x02\x02\u0FE6\u0FE0\x03\x02\x02\x02\u0FE6\u0FE7\x03\x02\x02\x02" +
		"\u0FE7\u0FE9\x03\x02\x02\x02\u0FE8\u0FC8\x03\x02\x02\x02\u0FE8\u0FD8\x03" +
		"\x02\x02\x02\u0FE9\u0115\x03\x02\x02\x02\u0FEA\u0FF8\x05\u0148\xA5\x02" +
		"\u0FEB\u0FED\x05\f\x07\x02\u0FEC\u0FEB\x03\x02\x02\x02\u0FED\u0FEE\x03" +
		"\x02\x02\x02\u0FEE\u0FEC\x03\x02\x02\x02\u0FEE\u0FEF\x03\x02\x02\x02\u0FEF" +
		"\u0FF0\x03\x02\x02\x02\u0FF0\u0FF2\x07\xFA\x02\x02\u0FF1\u0FF3\x05\f\x07" +
		"\x02\u0FF2\u0FF1\x03\x02\x02\x02\u0FF3\u0FF4\x03\x02\x02\x02\u0FF4\u0FF2" +
		"\x03\x02\x02\x02\u0FF4\u0FF5\x03\x02\x02\x02\u0FF5\u0FF6\x03\x02\x02\x02" +
		"\u0FF6\u0FF7\x05\u0148\xA5\x02\u0FF7\u0FF9\x03\x02\x02\x02\u0FF8\u0FEC" +
		"\x03\x02\x02\x02\u0FF8\u0FF9\x03\x02\x02\x02\u0FF9\u100B\x03\x02\x02\x02" +
		"\u0FFA\u0FFC\x07\xFA\x02\x02\u0FFB\u0FFD\x05\f\x07\x02\u0FFC\u0FFB\x03" +
		"\x02\x02\x02\u0FFD\u0FFE\x03\x02\x02\x02\u0FFE\u0FFC\x03\x02\x02\x02\u0FFE" +
		"\u0FFF\x03\x02\x02\x02\u0FFF\u1000\x03\x02\x02\x02\u1000\u1008\x05\u0148" +
		"\xA5\x02\u1001\u1003\x05\f\x07\x02\u1002\u1001\x03\x02\x02\x02\u1003\u1004" +
		"\x03\x02\x02\x02\u1004\u1002\x03\x02\x02\x02\u1004\u1005\x03\x02\x02\x02" +
		"\u1005\u1006\x03\x02\x02\x02\u1006\u1007\x05\u0148\xA5\x02\u1007\u1009" +
		"\x03\x02\x02\x02\u1008\u1002\x03\x02\x02\x02\u1008\u1009\x03\x02\x02\x02" +
		"\u1009\u100B\x03\x02\x02\x02\u100A\u0FEA\x03\x02\x02\x02\u100A\u0FFA\x03" +
		"\x02\x02\x02\u100B\u0117\x03\x02\x02\x02\u100C\u101A\x05\u014A\xA6\x02" +
		"\u100D\u100F\x05\f\x07\x02\u100E\u100D\x03\x02\x02\x02\u100F\u1010\x03" +
		"\x02\x02\x02\u1010\u100E\x03\x02\x02\x02\u1010\u1011\x03\x02\x02\x02\u1011" +
		"\u1012\x03\x02\x02\x02\u1012\u1014\x07\xFA\x02\x02\u1013\u1015\x05\f\x07" +
		"\x02\u1014\u1013\x03\x02\x02\x02\u1015\u1016\x03\x02\x02\x02\u1016\u1014" +
		"\x03\x02\x02\x02\u1016\u1017\x03\x02\x02\x02\u1017\u1018\x03\x02\x02\x02" +
		"\u1018\u1019\x05\u014A\xA6\x02\u1019\u101B\x03\x02\x02\x02\u101A\u100E" +
		"\x03\x02\x02\x02\u101A\u101B\x03\x02\x02\x02\u101B\u102D\x03\x02\x02\x02" +
		"\u101C\u101E\x07\xFA\x02\x02\u101D\u101F\x05\f\x07\x02\u101E\u101D\x03" +
		"\x02\x02\x02\u101F\u1020\x03\x02\x02\x02\u1020\u101E\x03\x02\x02\x02\u1020" +
		"\u1021\x03\x02\x02\x02\u1021\u1022\x03\x02\x02\x02\u1022\u102A\x05\u014A" +
		"\xA6\x02\u1023\u1025\x05\f\x07\x02\u1024\u1023\x03\x02\x02\x02\u1025\u1026" +
		"\x03\x02\x02\x02\u1026\u1024\x03\x02\x02\x02\u1026\u1027\x03\x02\x02\x02" +
		"\u1027\u1028\x03\x02\x02\x02\u1028\u1029\x05\u014A\xA6\x02\u1029\u102B" +
		"\x03\x02\x02\x02\u102A\u1024\x03\x02\x02\x02\u102A\u102B\x03\x02\x02\x02" +
		"\u102B\u102D\x03\x02\x02\x02\u102C\u100C\x03\x02\x02\x02\u102C\u101C\x03" +
		"\x02\x02\x02\u102D\u0119\x03\x02\x02\x02\u102E\u1030\x07\x06\x02\x02\u102F" +
		"\u1031\x05\f\x07\x02\u1030\u102F\x03\x02\x02\x02\u1031\u1032\x03\x02\x02" +
		"\x02\u1032\u1030\x03\x02\x02\x02\u1032\u1033\x03\x02\x02\x02\u1033\u1034" +
		"\x03\x02\x02\x02\u1034\u1036\x05";
	private static readonly _serializedATNSegment10: string =
		"\u0140\xA1\x02\u1035\u1037\x05\f\x07\x02\u1036\u1035\x03\x02\x02\x02\u1037" +
		"\u1038\x03\x02\x02\x02\u1038\u1036\x03\x02\x02\x02\u1038\u1039\x03\x02" +
		"\x02\x02\u1039\u1040\x03\x02\x02\x02\u103A\u103C\x07\xB7\x02\x02\u103B" +
		"\u103D\x05\f\x07\x02\u103C\u103B\x03\x02\x02\x02\u103D\u103E\x03\x02\x02" +
		"\x02\u103E\u103C\x03\x02\x02\x02\u103E\u103F\x03\x02\x02\x02\u103F\u1041" +
		"\x03\x02\x02\x02\u1040\u103A\x03\x02\x02\x02\u1040\u1041\x03\x02\x02\x02" +
		"\u1041\u1042\x03\x02\x02\x02\u1042\u104A\x05\u011C\x8F\x02\u1043\u1045" +
		"\x05\f\x07\x02\u1044\u1043\x03\x02\x02\x02\u1045\u1046\x03\x02\x02\x02" +
		"\u1046\u1044\x03\x02\x02\x02\u1046\u1047\x03\x02\x02\x02\u1047\u1048\x03" +
		"\x02\x02\x02\u1048\u1049\x05\u0112\x8A\x02\u1049\u104B\x03\x02\x02\x02" +
		"\u104A\u1044\x03\x02\x02\x02\u104A\u104B\x03\x02\x02\x02\u104B\u1053\x03" +
		"\x02\x02\x02\u104C\u104E\x05\f\x07\x02\u104D\u104C\x03\x02\x02\x02\u104E" +
		"\u104F\x03\x02\x02\x02\u104F\u104D\x03\x02\x02\x02\u104F\u1050\x03\x02" +
		"\x02\x02\u1050\u1051\x03\x02\x02\x02\u1051\u1052\x07\x82\x02\x02\u1052" +
		"\u1054\x03\x02\x02\x02\u1053\u104D\x03\x02\x02\x02\u1053\u1054\x03\x02" +
		"\x02\x02\u1054\u011B\x03\x02\x02\x02\u1055\u1056\x07\u01C4\x02\x02\u1056" +
		"\u011D\x03\x02\x02\x02\u1057\u1059\x07\x06\x02\x02\u1058\u105A\x05\f\x07" +
		"\x02\u1059\u1058\x03\x02\x02\x02\u105A\u105B\x03\x02\x02\x02\u105B\u1059" +
		"\x03\x02\x02\x02\u105B\u105C\x03\x02\x02\x02\u105C\u105D\x03\x02\x02\x02" +
		"\u105D\u106B\x05\u0140\xA1\x02\u105E\u1060\x05\f\x07\x02\u105F\u105E\x03" +
		"\x02\x02\x02\u1060\u1061\x03\x02\x02\x02\u1061\u105F\x03\x02\x02\x02\u1061" +
		"\u1062\x03\x02\x02\x02\u1062\u1063\x03\x02\x02\x02\u1063\u1065\x07\xB7" +
		"\x02\x02\u1064\u1066\x05\f\x07\x02\u1065\u1064\x03\x02\x02\x02\u1066\u1067" +
		"\x03\x02\x02\x02\u1067\u1065\x03\x02\x02\x02\u1067\u1068\x03\x02\x02\x02" +
		"\u1068\u1069\x03\x02\x02\x02\u1069\u106A\x05\u0142\xA2\x02\u106A\u106C" +
		"\x03\x02\x02\x02\u106B\u105F\x03\x02\x02\x02\u106B\u106C\x03\x02\x02\x02" +
		"\u106C\u107A\x03\x02\x02\x02\u106D\u106F\x05\f\x07\x02\u106E\u106D\x03" +
		"\x02\x02\x02\u106F\u1070\x03\x02\x02\x02\u1070\u106E\x03\x02\x02\x02\u1070" +
		"\u1071\x03\x02\x02\x02\u1071\u1072\x03\x02\x02\x02\u1072\u1074\x07\u018B" +
		"\x02\x02\u1073\u1075\x05\f\x07\x02\u1074\u1073\x03\x02\x02\x02\u1075\u1076" +
		"\x03\x02\x02\x02\u1076\u1074\x03\x02\x02\x02\u1076\u1077\x03\x02\x02\x02" +
		"\u1077\u1078\x03\x02\x02\x02\u1078\u1079\x07\\\x02\x02\u1079\u107B\x03" +
		"\x02\x02\x02\u107A\u106E\x03\x02\x02\x02\u107A\u107B\x03\x02\x02\x02\u107B" +
		"\u1083\x03\x02\x02\x02\u107C\u107E\x05\f\x07\x02\u107D\u107C\x03\x02\x02" +
		"\x02\u107E\u107F\x03\x02\x02\x02\u107F\u107D\x03\x02\x02\x02\u107F\u1080" +
		"\x03\x02\x02\x02\u1080\u1081\x03\x02\x02\x02\u1081\u1082\x05\u0114\x8B" +
		"\x02\u1082\u1084\x03\x02\x02\x02\u1083\u107D\x03\x02\x02\x02\u1083\u1084" +
		"\x03\x02\x02\x02\u1084\u108C\x03\x02\x02\x02\u1085\u1087\x05\f\x07\x02" +
		"\u1086\u1085\x03\x02\x02\x02\u1087\u1088\x03\x02\x02\x02\u1088\u1086\x03" +
		"\x02\x02\x02\u1088\u1089\x03\x02\x02\x02\u1089\u108A\x03\x02\x02\x02\u108A" +
		"\u108B\x07\x82\x02\x02\u108B\u108D\x03\x02\x02\x02\u108C\u1086\x03\x02" +
		"\x02\x02\u108C\u108D\x03\x02\x02\x02\u108D\u011F\x03\x02\x02\x02\u108E" +
		"\u1090\x07\x06\x02\x02\u108F\u1091\x05\f\x07\x02\u1090\u108F\x03\x02\x02" +
		"\x02\u1091\u1092\x03\x02\x02\x02\u1092\u1090\x03\x02\x02\x02\u1092\u1093" +
		"\x03\x02\x02\x02\u1093\u1094\x03\x02\x02\x02\u1094\u1096\x05\u0140\xA1" +
		"\x02\u1095\u1097\x05\f\x07\x02\u1096\u1095\x03\x02\x02\x02\u1097\u1098" +
		"\x03\x02\x02\x02\u1098\u1096\x03\x02\x02\x02\u1098\u1099\x03\x02\x02\x02" +
		"\u1099\u109A\x03\x02\x02\x02\u109A\u109C\x07\xB7\x02\x02\u109B\u109D\x05" +
		"\f\x07\x02\u109C\u109B\x03\x02\x02\x02\u109D\u109E\x03\x02\x02\x02\u109E" +
		"\u109C\x03\x02\x02\x02\u109E\u109F\x03\x02\x02\x02\u109F\u10A0\x03\x02" +
		"\x02\x02\u10A0\u10A1\x05\u013E\xA0\x02\u10A1\u0121\x03\x02\x02\x02\u10A2" +
		"\u10A4\x07\x06\x02\x02\u10A3\u10A5\x05\f\x07\x02\u10A4\u10A3\x03\x02\x02" +
		"\x02\u10A5\u10A6\x03\x02\x02\x02\u10A6\u10A4\x03\x02\x02\x02\u10A6\u10A7" +
		"\x03\x02\x02\x02\u10A7\u10A8\x03\x02\x02\x02\u10A8\u10B0\x05\u0140\xA1" +
		"\x02\u10A9\u10AB\x05\f\x07\x02\u10AA\u10A9\x03\x02\x02\x02\u10AB\u10AC" +
		"\x03\x02\x02\x02\u10AC\u10AA\x03\x02\x02\x02\u10AC\u10AD\x03\x02\x02\x02" +
		"\u10AD\u10AE\x03\x02\x02\x02\u10AE\u10AF\x05\u0130\x99\x02\u10AF\u10B1" +
		"\x03\x02\x02\x02\u10B0\u10AA\x03\x02\x02\x02\u10B1\u10B2\x03\x02\x02\x02" +
		"\u10B2\u10B0\x03\x02\x02\x02\u10B2\u10B3\x03\x02\x02\x02\u10B3\u10BD\x03" +
		"\x02\x02\x02\u10B4\u10B6\x05\f\x07\x02\u10B5\u10B4\x03\x02\x02\x02\u10B6" +
		"\u10B7\x03\x02\x02\x02\u10B7\u10B5\x03\x02\x02\x02\u10B7\u10B8\x03\x02" +
		"\x02\x02\u10B8\u10BB\x03\x02\x02\x02\u10B9\u10BC\x05\u0112\x8A\x02\u10BA" +
		"\u10BC\x05\u0114\x8B\x02\u10BB\u10B9\x03\x02\x02\x02\u10BB\u10BA\x03\x02" +
		"\x02\x02\u10BC\u10BE\x03\x02\x02\x02\u10BD\u10B5\x03\x02\x02\x02\u10BD" +
		"\u10BE\x03\x02\x02\x02\u10BE\u10C6\x03\x02\x02\x02\u10BF\u10C1\x05\f\x07" +
		"\x02\u10C0\u10BF\x03\x02\x02\x02\u10C1\u10C2\x03\x02\x02\x02\u10C2\u10C0" +
		"\x03\x02\x02\x02\u10C2\u10C3\x03\x02\x02\x02\u10C3\u10C4\x03\x02\x02\x02" +
		"\u10C4\u10C5\x07\x82\x02\x02\u10C5\u10C7\x03\x02\x02\x02\u10C6\u10C0\x03" +
		"\x02\x02\x02\u10C6\u10C7\x03\x02\x02\x02\u10C7\u0123\x03\x02\x02\x02\u10C8" +
		"\u10CA\x07\x06\x02\x02\u10C9\u10CB\x05\f\x07\x02\u10CA\u10C9\x03\x02\x02" +
		"\x02\u10CB\u10CC\x03\x02\x02\x02\u10CC\u10CA\x03\x02\x02\x02\u10CC\u10CD" +
		"\x03\x02\x02\x02\u10CD\u10D4\x03\x02\x02\x02\u10CE\u10D0\x07Z\x02\x02" +
		"\u10CF\u10D1\x05\f\x07\x02\u10D0\u10CF\x03\x02\x02\x02\u10D1\u10D2\x03" +
		"\x02\x02\x02\u10D2\u10D0\x03\x02\x02\x02\u10D2\u10D3\x03\x02\x02\x02\u10D3" +
		"\u10D5\x03\x02\x02\x02\u10D4\u10CE\x03\x02\x02\x02\u10D4\u10D5\x03\x02" +
		"\x02\x02\u10D5\u10D6\x03\x02\x02\x02\u10D6\u10D8\x07\xDB\x02\x02\u10D7" +
		"\u10D9\x05\f\x07\x02\u10D8\u10D7\x03\x02\x02\x02\u10D9\u10DA\x03\x02\x02" +
		"\x02\u10DA\u10D8\x03\x02\x02\x02\u10DA\u10DB\x03\x02\x02\x02\u10DB\u10E2" +
		"\x03\x02\x02\x02\u10DC\u10DE\x07\xC9\x02\x02\u10DD\u10DF\x05\f\x07\x02" +
		"\u10DE\u10DD\x03\x02\x02\x02\u10DF\u10E0\x03\x02\x02\x02\u10E0\u10DE\x03" +
		"\x02\x02\x02\u10E0\u10E1\x03\x02\x02\x02\u10E1\u10E3\x03\x02\x02\x02\u10E2" +
		"\u10DC\x03\x02\x02\x02\u10E2\u10E3\x03\x02\x02\x02\u10E3\u10E4\x03\x02" +
		"\x02\x02\u10E4\u10EC\x05\u0132\x9A\x02\u10E5\u10E7\x05\f\x07\x02\u10E6" +
		"\u10E5\x03\x02\x02\x02\u10E7\u10E8\x03\x02\x02\x02\u10E8\u10E6\x03\x02" +
		"\x02\x02\u10E8\u10E9\x03\x02\x02\x02\u10E9\u10EA\x03\x02\x02\x02\u10EA" +
		"\u10EB\x05\u012E\x98\x02\u10EB\u10ED\x03\x02\x02\x02\u10EC\u10E6\x03\x02" +
		"\x02\x02\u10ED\u10EE\x03\x02\x02\x02\u10EE\u10EC\x03\x02\x02\x02\u10EE" +
		"\u10EF\x03\x02\x02\x02\u10EF\u10F9\x03\x02\x02\x02\u10F0\u10F2\x05\f\x07" +
		"\x02\u10F1\u10F0\x03\x02\x02\x02\u10F2\u10F3\x03\x02\x02\x02\u10F3\u10F1" +
		"\x03\x02\x02\x02\u10F3\u10F4\x03\x02\x02\x02\u10F4\u10F7\x03\x02\x02\x02" +
		"\u10F5\u10F8\x05\u0112\x8A\x02\u10F6\u10F8\x05\u0114\x8B\x02\u10F7\u10F5" +
		"\x03\x02\x02\x02\u10F7\u10F6\x03\x02\x02\x02\u10F8\u10FA\x03\x02\x02\x02" +
		"\u10F9\u10F1\x03\x02\x02\x02\u10F9\u10FA\x03\x02\x02\x02\u10FA\u1102\x03" +
		"\x02\x02\x02\u10FB\u10FD\x05\f\x07\x02\u10FC\u10FB\x03\x02\x02\x02\u10FD" +
		"\u10FE\x03\x02\x02\x02\u10FE\u10FC\x03\x02\x02\x02\u10FE\u10FF\x03\x02" +
		"\x02\x02\u10FF\u1100\x03\x02\x02\x02\u1100\u1101\x07\x82\x02\x02\u1101" +
		"\u1103\x03\x02\x02\x02\u1102\u10FC\x03\x02\x02\x02\u1102\u1103\x03\x02" +
		"\x02\x02\u1103\u0125\x03\x02\x02\x02\u1104\u1106\x07\x06\x02\x02\u1105" +
		"\u1107\x05\f\x07\x02\u1106\u1105\x03\x02\x02\x02\u1107\u1108\x03\x02\x02" +
		"\x02\u1108\u1106\x03\x02\x02\x02\u1108\u1109\x03\x02\x02\x02\u1109\u110A" +
		"\x03\x02\x02\x02\u110A\u1112\x05\u01F0\xF9\x02\u110B\u110D\x05\f\x07\x02" +
		"\u110C\u110B\x03\x02\x02\x02\u110D\u110E\x03\x02\x02\x02\u110E\u110C\x03" +
		"\x02\x02\x02\u110E\u110F\x03\x02\x02\x02\u110F\u1110\x03\x02\x02\x02\u1110" +
		"\u1111\x05\u0128\x95\x02\u1111\u1113\x03\x02\x02\x02\u1112\u110C\x03\x02" +
		"\x02\x02\u1112\u1113\x03\x02\x02\x02\u1113\u111B\x03\x02\x02\x02\u1114" +
		"\u1116\x05\f\x07\x02\u1115\u1114\x03\x02\x02\x02\u1116\u1117\x03\x02\x02" +
		"\x02\u1117\u1115\x03\x02\x02\x02\u1117\u1118\x03\x02\x02\x02\u1118\u1119" +
		"\x03\x02\x02\x02\u1119\u111A\x05\u0112\x8A\x02\u111A\u111C\x03\x02\x02" +
		"\x02\u111B\u1115\x03\x02\x02\x02\u111B\u111C\x03\x02\x02\x02\u111C\u1124" +
		"\x03\x02\x02\x02\u111D\u111F\x05\f\x07\x02\u111E\u111D\x03\x02\x02\x02" +
		"\u111F\u1120\x03\x02\x02\x02\u1120\u111E\x03\x02\x02\x02\u1120\u1121\x03" +
		"\x02\x02\x02\u1121\u1122\x03\x02\x02\x02\u1122\u1123\x07\x82\x02\x02\u1123" +
		"\u1125\x03\x02\x02\x02\u1124\u111E\x03\x02\x02\x02\u1124\u1125\x03\x02" +
		"\x02\x02\u1125\u0127\x03\x02\x02\x02\u1126\u1128\x07\x1F\x02\x02\u1127" +
		"\u1129\x05\f\x07\x02\u1128\u1127\x03\x02\x02\x02\u1129\u112A\x03\x02\x02" +
		"\x02\u112A\u1128\x03\x02\x02\x02\u112A\u112B\x03\x02\x02\x02\u112B\u112D" +
		"\x03\x02\x02\x02\u112C\u1126\x03\x02\x02\x02\u112C\u112D\x03\x02\x02\x02" +
		"\u112D\u1142\x03\x02\x02\x02\u112E\u1136\x05\u012A\x96\x02\u112F\u1131" +
		"\x05\f\x07\x02\u1130\u112F\x03\x02\x02\x02\u1131\u1132\x03\x02\x02\x02" +
		"\u1132\u1130\x03\x02\x02\x02\u1132\u1133\x03\x02\x02\x02\u1133\u1134\x03" +
		"\x02\x02\x02\u1134\u1135\x05\u012C\x97\x02\u1135\u1137\x03\x02\x02\x02" +
		"\u1136\u1130\x03\x02\x02\x02\u1136\u1137\x03\x02\x02\x02\u1137\u1143\x03" +
		"\x02\x02\x02\u1138\u1140\x05\u012C\x97\x02\u1139\u113B\x05\f\x07\x02\u113A" +
		"\u1139\x03\x02\x02\x02\u113B\u113C\x03\x02\x02\x02\u113C\u113A\x03\x02" +
		"\x02\x02\u113C\u113D\x03\x02\x02\x02\u113D\u113E\x03\x02\x02\x02\u113E" +
		"\u113F\x05\u012A\x96\x02\u113F\u1141\x03\x02\x02\x02\u1140\u113A\x03\x02" +
		"\x02\x02\u1140\u1141\x03\x02\x02\x02\u1141\u1143\x03\x02\x02\x02\u1142" +
		"\u112E\x03\x02\x02\x02\u1142\u1138\x03\x02\x02\x02\u1143\u0129\x03\x02" +
		"\x02\x02\u1144\u1146\x07\xE4\x02\x02\u1145\u1147\x05\f\x07\x02\u1146\u1145" +
		"\x03\x02\x02\x02\u1147\u1148\x03\x02\x02\x02\u1148\u1146\x03\x02\x02\x02" +
		"\u1148\u1149\x03\x02\x02\x02\u1149\u1150\x03\x02\x02\x02\u114A\u114C\x07" +
		"\xFB\x02\x02\u114B\u114D\x05\f\x07\x02\u114C\u114B\x03\x02\x02\x02\u114D" +
		"\u114E\x03\x02\x02\x02\u114E\u114C\x03\x02\x02\x02\u114E\u114F\x03\x02" +
		"\x02\x02\u114F\u1151\x03\x02\x02\x02\u1150\u114A\x03\x02\x02\x02\u1150" +
		"\u1151\x03\x02\x02\x02\u1151\u1154\x03\x02\x02\x02\u1152\u1155\x07\u01C2" +
		"\x02\x02\u1153\u1155\x05\u023E\u0120\x02\u1154\u1152\x03\x02\x02\x02\u1154" +
		"\u1153\x03\x02\x02\x02\u1155\u012B\x03\x02\x02\x02\u1156\u1158\x07A\x02" +
		"\x02\u1157\u1159\x05\f\x07\x02\u1158\u1157\x03\x02\x02\x02\u1159\u115A" +
		"\x03\x02\x02\x02\u115A\u1158\x03\x02\x02\x02\u115A\u115B\x03\x02\x02\x02" +
		"\u115B\u1162\x03\x02\x02\x02\u115C\u115E\x07\xFB\x02\x02\u115D\u115F\x05" +
		"\f\x07\x02\u115E\u115D\x03\x02\x02\x02\u115F\u1160\x03\x02\x02\x02\u1160" +
		"\u115E\x03\x02\x02\x02\u1160\u1161\x03\x02\x02\x02\u1161\u1163\x03\x02" +
		"\x02\x02\u1162\u115C\x03\x02\x02\x02\u1162\u1163\x03\x02\x02\x02\u1163" +
		"\u1166\x03\x02\x02\x02\u1164\u1167\x07\u01C2\x02\x02\u1165\u1167\x05\u023E" +
		"\u0120\x02\u1166\u1164\x03\x02\x02\x02\u1166\u1165\x03\x02\x02\x02\u1167" +
		"\u012D\x03\x02\x02\x02\u1168\u116A\x07\xB7\x02\x02\u1169\u116B\x05\f\x07" +
		"\x02\u116A\u1169\x03\x02\x02\x02\u116B\u116C\x03\x02\x02\x02\u116C\u116A" +
		"\x03\x02\x02\x02\u116C\u116D\x03\x02\x02\x02\u116D\u116F\x03\x02\x02\x02" +
		"\u116E\u1168\x03\x02\x02\x02\u116E\u116F\x03\x02\x02\x02\u116F\u1170\x03" +
		"\x02\x02\x02\u1170\u1178\x07\xE4\x02\x02\u1171\u1173\x05\f\x07\x02\u1172" +
		"\u1171\x03\x02\x02\x02\u1173\u1174\x03\x02\x02\x02\u1174\u1172\x03\x02" +
		"\x02\x02\u1174\u1175\x03\x02\x02\x02\u1175\u1176\x03\x02\x02\x02\u1176" +
		"\u1177\x07\xFB\x02\x02\u1177\u1179\x03\x02\x02\x02\u1178\u1172\x03\x02" +
		"\x02\x02\u1178\u1179\x03\x02\x02\x02\u1179\u117B\x03\x02\x02\x02\u117A" +
		"\u117C\x05\f\x07\x02\u117B\u117A\x03\x02\x02\x02\u117C\u117D\x03\x02\x02" +
		"\x02\u117D\u117B\x03\x02\x02\x02\u117D\u117E\x03\x02\x02\x02\u117E\u117F" +
		"\x03\x02\x02\x02\u117F\u1180\x05\u013C\x9F\x02\u1180\u11C5\x03\x02\x02" +
		"\x02\u1181\u1183\x07\xB7\x02\x02\u1182\u1184\x05\f\x07\x02\u1183\u1182" +
		"\x03\x02\x02\x02\u1184\u1185\x03\x02\x02\x02\u1185\u1183\x03\x02\x02\x02" +
		"\u1185\u1186\x03\x02\x02\x02\u1186\u1188\x03\x02\x02\x02\u1187\u1181\x03" +
		"\x02\x02\x02\u1187\u1188\x03\x02\x02\x02\u1188\u1189\x03\x02\x02\x02\u1189" +
		"\u1191\x07A\x02\x02\u118A\u118C\x05\f\x07\x02\u118B\u118A\x03\x02\x02" +
		"\x02\u118C\u118D\x03\x02\x02\x02\u118D\u118B\x03\x02\x02\x02\u118D\u118E" +
		"\x03\x02\x02\x02\u118E\u118F\x03\x02\x02\x02\u118F\u1190\x07\xFB\x02\x02" +
		"\u1190\u1192\x03\x02\x02\x02\u1191\u118B\x03\x02\x02\x02\u1191\u1192\x03" +
		"\x02\x02\x02\u1192\u1194\x03\x02\x02\x02\u1193\u1195\x05\f\x07\x02\u1194" +
		"\u1193\x03\x02\x02\x02\u1195\u1196\x03\x02\x02\x02\u1196\u1194\x03\x02" +
		"\x02\x02\u1196\u1197\x03\x02\x02\x02\u1197\u1198\x03\x02\x02\x02\u1198" +
		"\u1199\x05\u013C\x9F\x02\u1199\u11C5\x03\x02\x02\x02\u119A\u11B2\x07\x9D" +
		"\x02\x02\u119B\u119D\x05\f\x07\x02\u119C\u119B\x03\x02\x02\x02\u119D\u119E" +
		"\x03\x02\x02\x02\u119E\u119C\x03\x02\x02\x02\u119E\u119F\x03\x02\x02\x02" +
		"\u119F\u11A6\x03\x02\x02\x02\u11A0\u11A2\x07\u0175\x02\x02\u11A1\u11A3" +
		"\x05\f\x07\x02\u11A2\u11A1\x03\x02\x02\x02\u11A3\u11A4\x03\x02\x02\x02" +
		"\u11A4\u11A2\x03\x02\x02\x02\u11A4\u11A5\x03\x02\x02\x02\u11A5\u11A7\x03" +
		"\x02\x02\x02\u11A6\u11A0\x03\x02\x02\x02\u11A6\u11A7\x03\x02\x02\x02\u11A7" +
		"\u11A8\x03\x02\x02\x02\u11A8\u11B0\x07\x81\x02\x02\u11A9\u11AB\x05\f\x07" +
		"\x02\u11AA\u11A9\x03\x02\x02\x02\u11AB\u11AC\x03\x02\x02\x02\u11AC\u11AA" +
		"\x03\x02\x02\x02\u11AC\u11AD\x03\x02\x02\x02\u11AD\u11AE\x03\x02\x02\x02" +
		"\u11AE\u11AF\x07\xFF\x02\x02\u11AF\u11B1\x03\x02\x02\x02\u11B0\u11AA\x03" +
		"\x02\x02\x02\u11B0\u11B1\x03\x02\x02\x02\u11B1\u11B3\x03\x02\x02\x02\u11B2" +
		"\u119C\x03\x02\x02\x02\u11B2\u11B3\x03\x02\x02\x02\u11B3\u11B5\x03\x02" +
		"\x02\x02\u11B4\u11B6\x05\f\x07\x02\u11B5\u11B4\x03\x02\x02\x02\u11B6\u11B7" +
		"\x03\x02\x02\x02\u11B7\u11B5\x03\x02\x02\x02\u11B7\u11B8\x03\x02\x02\x02" +
		"\u11B8\u11B9\x03\x02\x02\x02\u11B9\u11BA\t\x11\x02\x02\u11BA\u11C5\x03" +
		"\x02\x02\x02\u11BB\u11BD\x07\u018B\x02\x02\u11BC\u11BE\x05\f\x07\x02\u11BD" +
		"\u11BC\x03\x02\x02\x02\u11BE\u11BF\x03\x02\x02\x02\u11BF\u11BD\x03\x02" +
		"\x02\x02\u11BF\u11C0\x03\x02\x02\x02\u11C0\u11C2\x03\x02\x02\x02\u11C1" +
		"\u11BB\x03\x02\x02\x02\u11C1\u11C2\x03\x02\x02\x02\u11C2\u11C3\x03\x02" +
		"\x02\x02\u11C3\u11C5\x07&\x02\x02\u11C4\u116E\x03\x02\x02\x02\u11C4\u1187" +
		"\x03\x02\x02\x02\u11C4\u119A\x03\x02\x02\x02\u11C4\u11C1\x03\x02\x02\x02" +
		"\u11C5\u012F\x03\x02\x02\x02\u11C6\u1220\x05\u012E\x98\x02\u11C7\u1220" +
		"\x07\u017B\x02\x02\u11C8\u1220\x070\x02\x02\u11C9\u11CB\x07\u018B\x02" +
		"\x02\u11CA\u11CC\x05\f\x07\x02\u11CB\u11CA\x03\x02\x02\x02\u11CC\u11CD" +
		"\x03\x02\x02\x02\u11CD\u11CB\x03\x02\x02\x02\u11CD\u11CE\x03\x02\x02\x02" +
		"\u11CE\u11D0\x03\x02\x02\x02\u11CF\u11C9\x03\x02\x02\x02\u11CF\u11D0\x03" +
		"\x02\x02\x02\u11D0\u11D1\x03\x02\x02\x02\u11D1\u1220\x07.\x02\x02\u11D2" +
		"\u11DA\x07\u0120\x02\x02\u11D3\u11D5\x05\f\x07\x02\u11D4\u11D3\x03\x02" +
		"\x02\x02\u11D5\u11D6\x03\x02\x02\x02\u11D6\u11D4\x03\x02\x02\x02\u11D6" +
		"\u11D7\x03\x02\x02\x02\u11D7\u11D8\x03\x02\x02\x02\u11D8\u11D9\x05\u0136" +
		"\x9C\x02\u11D9\u11DB\x03\x02\x02\x02\u11DA\u11D4\x03\x02\x02\x02\u11DA" +
		"\u11DB\x03\x02\x02\x02\u11DB\u1220\x03\x02\x02\x02\u11DC\u11DE\x07\u018B" +
		"\x02\x02\u11DD\u11DF\x05\f\x07\x02\u11DE\u11DD\x03\x02\x02\x02\u11DF\u11E0" +
		"\x03\x02\x02\x02\u11E0\u11DE\x03\x02\x02\x02\u11E0\u11E1\x03\x02\x02\x02" +
		"\u11E1\u11E3\x03\x02\x02\x02\u11E2\u11DC\x03\x02\x02\x02\u11E2\u11E3\x03" +
		"\x02\x02\x02\u11E3\u11E4\x03\x02\x02\x02\u11E4\u1220\x07\\\x02\x02\u11E5" +
		"\u1220\x07\u013A\x02\x02\u11E6\u11E8\x07\u018B\x02\x02\u11E7\u11E9\x05" +
		"\f\x07\x02\u11E8\u11E7\x03\x02\x02\x02\u11E9\u11EA\x03\x02\x02\x02\u11EA" +
		"\u11E8\x03\x02\x02\x02\u11EA\u11EB\x03\x02\x02\x02\u11EB\u11ED\x03\x02" +
		"\x02\x02\u11EC\u11E6\x03\x02\x02\x02\u11EC\u11ED\x03\x02\x02\x02\u11ED" +
		"\u11EE\x03\x02\x02\x02\u11EE\u11F0\x07\xF9\x02\x02\u11EF\u11F1\x05\f\x07" +
		"\x02\u11F0\u11EF\x03\x02\x02\x02\u11F1\u11F2\x03\x02\x02\x02\u11F2\u11F0" +
		"\x03\x02\x02\x02\u11F2\u11F3\x03\x02\x02\x02\u11F3\u11F4\x03\x02\x02\x02" +
		"\u11F4\u11F5\x07\x7F\x02\x02\u11F5\u1220\x03\x02\x02\x02\u11F6\u11F8\x07" +
		"o\x02\x02\u11F7\u11F9\x05\f\x07\x02\u11F8\u11F7\x03\x02\x02\x02\u11F9" +
		"\u11FA\x03\x02\x02\x02\u11FA\u11F8\x03\x02\x02\x02\u11FA\u11FB\x03\x02" +
		"\x02\x02\u11FB\u1202\x03\x02\x02\x02\u11FC\u11FE\x07\xD6\x02\x02\u11FD" +
		"\u11FF\x05\f\x07\x02\u11FE\u11FD\x03\x02\x02\x02\u11FF\u1200\x03\x02\x02" +
		"\x02\u1200\u11FE\x03\x02\x02\x02\u1200\u1201\x03\x02\x02\x02\u1201\u1203" +
		"\x03\x02\x02\x02\u1202\u11FC\x03\x02\x02\x02\u1202\u1203\x03\x02\x02\x02" +
		"\u1203\u1204\x03\x02\x02\x02\u1204\u1205\x05\u0134\x9B\x02\u1205\u1220" +
		"\x03\x02\x02\x02\u1206\u1208\x07Z\x02\x02\u1207\u1209\x05\f\x07\x02\u1208" +
		"\u1207\x03\x02\x02\x02\u1209\u120A\x03\x02\x02\x02\u120A\u1208\x03\x02" +
		"\x02\x02\u120A\u120B\x03\x02\x02\x02\u120B\u120D\x03\x02\x02\x02\u120C" +
		"\u1206\x03\x02\x02\x02\u120C\u120D\x03\x02\x02\x02\u120D\u120E\x03\x02" +
		"\x02\x02\u120E\u1216\x07\xDB\x02\x02\u120F\u1211\x05\f\x07\x02\u1210\u120F" +
		"\x03\x02\x02\x02\u1211\u1212\x03\x02\x02\x02\u1212\u1210\x03\x02\x02\x02" +
		"\u1212\u1213\x03\x02\x02\x02\u1213\u1214\x03\x02\x02\x02\u1214\u1215\x07" +
		"\xC9\x02\x02\u1215\u1217\x03\x02\x02\x02\u1216\u1210\x03\x02\x02\x02\u1216" +
		"\u1217\x03\x02\x02\x02\u1217\u1219\x03\x02\x02\x02\u1218\u121A\x05\f\x07" +
		"\x02\u1219\u1218\x03\x02\x02\x02\u121A\u121B\x03\x02\x02\x02\u121B\u1219" +
		"\x03\x02\x02\x02\u121B\u121C\x03\x02\x02\x02\u121C\u121D\x03\x02\x02\x02" +
		"\u121D\u121E\x05\u0132\x9A\x02\u121E\u1220\x03\x02\x02\x02\u121F\u11C6" +
		"\x03\x02\x02\x02\u121F\u11C7\x03\x02\x02\x02\u121F\u11C8\x03\x02\x02\x02" +
		"\u121F\u11CF\x03\x02\x02\x02\u121F\u11D2\x03\x02\x02\x02\u121F\u11E2\x03" +
		"\x02\x02\x02\u121F\u11E5\x03\x02\x02\x02\u121F\u11EC\x03\x02\x02\x02\u121F" +
		"\u11F6\x03\x02\x02\x02\u121F\u120C\x03\x02\x02\x02\u1220\u0131\x03\x02" +
		"\x02\x02\u1221\u1222\x05\u023E\u0120\x02\u1222\u0133\x03\x02\x02\x02\u1223" +
		"\u1231\x05\n\x06\x02\u1224\u1231\x07\u01C1\x02\x02\u1225\u1231\x05\u023E" +
		"\u0120\x02\u1226\u122E\x07c\x02\x02\u1227\u1229\x05\f\x07\x02\u1228\u1227" +
		"\x03\x02\x02\x02\u1229\u122A\x03\x02\x02\x02\u122A\u1228\x03\x02\x02\x02" +
		"\u122A\u122B\x03\x02\x02\x02\u122B\u122C\x03\x02\x02\x02\u122C\u122D\x07" +
		"\u0185\x02\x02\u122D\u122F\x03\x02\x02\x02\u122E\u1228\x03\x02\x02\x02" +
		"\u122E\u122F\x03\x02\x02\x02\u122F\u1231\x03\x02\x02\x02\u1230\u1223\x03" +
		"\x02\x02\x02\u1230\u1224\x03\x02\x02\x02\u1230\u1225\x03\x02\x02\x02\u1230" +
		"\u1226\x03\x02\x02\x02\u1231\u0135\x03\x02\x02\x02\u1232\u1234\x07\u0152" +
		"\x02\x02\u1233\u1235\x05\f\x07\x02\u1234\u1233\x03\x02\x02\x02\u1235\u1236" +
		"\x03\x02\x02\x02\u1236\u1234\x03\x02\x02\x02\u1236\u1237\x03\x02\x02\x02" +
		"\u1237\u1238\x03\x02\x02\x02\u1238\u1239\x05\u013A\x9E\x02\u1239\u126D" +
		"\x03\x02\x02\x02\u123A\u123C\x07\u018B\x02\x02\u123B\u123D\x05\f\x07\x02" +
		"\u123C\u123B\x03\x02\x02\x02\u123D\u123E\x03\x02\x02\x02\u123E\u123C\x03" +
		"\x02\x02\x02\u123E\u123F\x03\x02\x02\x02\u123F\u1241\x03\x02\x02\x02\u1240" +
		"\u123A\x03\x02\x02\x02\u1240\u1241\x03\x02\x02\x02\u1241\u1242\x03\x02" +
		"\x02\x02\u1242\u126D\x07#\x02\x02\u1243\u1245\x07\u018B\x02\x02\u1244" +
		"\u1246\x05\f\x07\x02\u1245\u1244\x03\x02\x02\x02\u1246\u1247\x03\x02\x02" +
		"\x02\u1247\u1245\x03\x02\x02\x02\u1247\u1248\x03\x02\x02\x02\u1248\u124A" +
		"\x03\x02\x02\x02\u1249\u1243\x03\x02\x02\x02\u1249\u124A\x03\x02\x02\x02" +
		"\u124A\u124B\x03\x02\x02\x02\u124B\u124D\x07\xF9\x02\x02\u124C\u124E\x05" +
		"\f\x07\x02\u124D\u124C\x03\x02\x02\x02\u124E\u124F\x03\x02\x02\x02\u124F" +
		"\u124D\x03\x02\x02\x02\u124F\u1250\x03\x02\x02\x02\u1250\u1251\x03\x02" +
		"\x02\x02\u1251\u1252\x07,\x02\x02\u1252\u126D\x03\x02\x02\x02\u1253\u1255" +
		"\x07\u018B\x02\x02\u1254\u1256\x05\f\x07\x02\u1255\u1254\x03\x02\x02\x02" +
		"\u1256\u1257\x03\x02\x02\x02\u1257\u1255\x03\x02\x02\x02\u1257\u1258\x03" +
		"\x02\x02\x02\u1258\u125A\x03\x02\x02\x02\u1259\u1253\x03\x02\x02\x02\u1259" +
		"\u125A\x03\x02\x02\x02\u125A\u125B\x03\x02\x02\x02\u125B\u126D\x07\x80" +
		"\x02\x02\u125C\u125E\x07\u018B\x02\x02\u125D\u125F\x05\f\x07\x02\u125E" +
		"\u125D\x03\x02\x02\x02\u125F\u1260\x03\x02\x02\x02\u1260\u125E\x03\x02" +
		"\x02\x02\u1260\u1261\x03\x02\x02\x02\u1261\u1263\x03\x02\x02\x02\u1262" +
		"\u125C\x03\x02\x02\x02\u1262\u1263\x03\x02\x02\x02\u1263\u1264\x03\x02" +
		"\x02\x02\u1264\u1266\x07\xAD\x02\x02\u1265\u1267\x05\f\x07\x02\u1266\u1265" +
		"\x03\x02\x02\x02\u1267\u1268\x03\x02\x02\x02\u1268\u1266\x03\x02\x02\x02" +
		"\u1268\u1269\x03\x02\x02\x02\u1269\u126A\x03\x02\x02\x02\u126A\u126B\x05" +
		"\u0138\x9D\x02\u126B\u126D\x03\x02\x02\x02\u126C\u1232\x03\x02\x02\x02" +
		"\u126C\u1240\x03\x02\x02\x02\u126C\u1249\x03\x02\x02\x02\u126C\u1259\x03" +
		"\x02\x02\x02\u126C\u1262\x03\x02\x02\x02\u126D\u0137\x03\x02\x02\x02\u126E" +
		"\u126F\x07\u01C1\x02\x02\u126F\u0139\x03\x02\x02\x02\u1270\u1273\x07\u01C2" +
		"\x02\x02\u1271\u1273\x05\u023E\u0120\x02\u1272\u1270\x03\x02\x02\x02\u1272" +
		"\u1271\x03\x02\x02\x02\u1273\u013B\x03\x02\x02\x02\u1274\u1292\x05\u01AA" +
		"\xD6\x02\u1275\u1285\x05\u023E\u0120\x02\u1276\u1278\x05\f\x07\x02\u1277" +
		"\u1276\x03\x02\x02\x02\u1278\u1279\x03\x02\x02\x02\u1279\u1277\x03\x02" +
		"\x02\x02\u1279\u127A\x03\x02\x02\x02\u127A\u127B\x03\x02\x02\x02\u127B" +
		"\u1283\x07\u0114\x02\x02\u127C\u127E\x05\f\x07\x02\u127D\u127C\x03\x02" +
		"\x02\x02\u127E\u127F\x03\x02\x02\x02\u127F\u127D\x03\x02\x02\x02\u127F" +
		"\u1280\x03\x02\x02\x02\u1280\u1281\x03\x02\x02\x02\u1281\u1282\x05\u01AA" +
		"\xD6\x02\u1282\u1284\x03\x02\x02\x02\u1283\u127D\x03\x02\x02\x02\u1283" +
		"\u1284\x03\x02\x02\x02\u1284\u1286\x03\x02\x02\x02\u1285\u1277\x03\x02" +
		"\x02\x02\u1285\u1286\x03\x02\x02\x02\u1286\u1292\x03\x02\x02\x02\u1287" +
		"\u128F\x07\u0114\x02\x02\u1288\u128A\x05\f\x07\x02\u1289\u1288\x03\x02" +
		"\x02\x02\u128A\u128B\x03\x02\x02\x02\u128B\u1289\x03\x02\x02\x02\u128B" +
		"\u128C\x03\x02\x02\x02\u128C\u128D\x03\x02\x02\x02\u128D\u128E\x05\u01AA" +
		"\xD6\x02\u128E\u1290\x03\x02\x02\x02\u128F\u1289\x03\x02\x02\x02\u128F" +
		"\u1290\x03\x02\x02\x02\u1290\u1292\x03\x02\x02\x02\u1291\u1274\x03\x02" +
		"\x02\x02\u1291\u1275\x03\x02\x02\x02\u1291\u1287\x03\x02\x02\x02\u1292" +
		"\u013D\x03\x02\x02\x02\u1293\u129B\x07f\x02\x02\u1294\u1296\x05\f\x07" +
		"\x02\u1295\u1294\x03\x02\x02\x02\u1296\u1297\x03\x02\x02\x02\u1297\u1295" +
		"\x03\x02\x02\x02\u1297\u1298\x03\x02\x02\x02\u1298\u1299\x03\x02\x02\x02" +
		"\u1299\u129A\x07\u0190\x02\x02\u129A\u129C\x03\x02\x02\x02\u129B\u1295" +
		"\x03\x02\x02\x02\u129B\u129C\x03\x02\x02\x02\u129C\u12AA\x03\x02\x02\x02" +
		"\u129D\u12A5\x07i\x02\x02\u129E\u12A0\x05\f\x07\x02\u129F\u129E\x03\x02" +
		"\x02\x02\u12A0\u12A1\x03\x02\x02\x02\u12A1\u129F\x03\x02\x02\x02\u12A1" +
		"\u12A2\x03\x02\x02\x02\u12A2\u12A3\x03\x02\x02\x02\u12A3\u12A4\x07\u018F" +
		"\x02\x02\u12A4\u12A6\x03\x02\x02\x02\u12A5\u129F\x03\x02\x02\x02\u12A5" +
		"\u12A6\x03\x02\x02\x02\u12A6\u12AA\x03\x02\x02\x02\u12A7\u12AA\x07j\x02" +
		"\x02\u12A8\u12AA\x07\u0173\x02\x02\u12A9\u1293\x03\x02\x02\x02\u12A9\u129D" +
		"\x03\x02\x02\x02\u12A9\u12A7\x03\x02\x02\x02\u12A9\u12A8\x03\x02\x02\x02" +
		"\u12AA\u013F\x03\x02\x02\x02\u12AB\u12AC\x05\u02E8\u0175\x02\u12AC\u0141" +
		"\x03\x02\x02\x02\u12AD\u12AE\x07\u01C4\x02\x02\u12AE\u0143\x03\x02\x02" +
		"\x02\u12AF\u12B1\x07\x1F\x02\x02\u12B0\u12B2\x05\f\x07\x02\u12B1\u12B0" +
		"\x03\x02\x02\x02\u12B2\u12B3\x03\x02\x02\x02\u12B3\u12B1\x03\x02\x02\x02" +
		"\u12B3\u12B4\x03\x02\x02\x02\u12B4\u12B6\x03\x02\x02\x02\u12B5\u12AF\x03" +
		"\x02\x02\x02\u12B5\u12B6\x03\x02\x02\x02\u12B6\u12B7\x03\x02\x02\x02\u12B7" +
		"\u12BF\x07\x81\x02\x02\u12B8\u12BA\x05\f\x07\x02\u12B9\u12B8\x03\x02\x02" +
		"\x02\u12BA\u12BB\x03\x02\x02\x02\u12BB\u12B9\x03\x02\x02\x02\u12BB\u12BC" +
		"\x03\x02\x02\x02\u12BC\u12BD\x03\x02\x02\x02\u12BD\u12BE\x05$\x13\x02" +
		"\u12BE\u12C0\x03\x02\x02\x02\u12BF\u12B9\x03\x02\x02\x02\u12BF\u12C0\x03" +
		"\x02\x02\x02\u12C0\u0145\x03\x02\x02\x02\u12C1\u12C3\x07\u0102\x02\x02" +
		"\u12C2\u12C4\x05\f\x07\x02\u12C3\u12C2\x03\x02\x02\x02\u12C4\u12C5\x03" +
		"\x02\x02\x02\u12C5\u12C3\x03\x02\x02\x02\u12C5\u12C6\x03\x02\x02\x02\u12C6" +
		"\u12C8\x03\x02\x02\x02\u12C7\u12C1\x03\x02\x02\x02\u12C7\u12C8\x03\x02" +
		"\x02\x02\u12C8\u12C9\x03\x02\x02\x02\u12C9\u12D1\x07\xA1\x02\x02\u12CA" +
		"\u12CC\x05\f\x07\x02\u12CB\u12CA\x03\x02\x02\x02\u12CC\u12CD\x03\x02\x02" +
		"\x02\u12CD\u12CB\x03\x02\x02\x02\u12CD\u12CE\x03\x02\x02\x02\u12CE\u12CF" +
		"\x03\x02\x02\x02\u12CF\u12D0\x05$\x13\x02\u12D0\u12D2\x03\x02\x02\x02" +
		"\u12D1\u12CB\x03\x02\x02\x02\u12D1\u12D2\x03\x02\x02\x02\u12D2\u0147\x03" +
		"\x02\x02\x02\u12D3\u12D5\x07\u0102\x02\x02\u12D4\u12D6\x05\f\x07\x02\u12D5" +
		"\u12D4\x03\x02\x02\x02\u12D6\u12D7\x03\x02\x02\x02\u12D7\u12D5\x03\x02" +
		"\x02\x02\u12D7\u12D8\x03\x02\x02\x02\u12D8\u12DA\x03\x02\x02";
	private static readonly _serializedATNSegment11: string =
		"\x02\u12D9\u12D3\x03\x02\x02\x02\u12D9\u12DA\x03\x02\x02\x02\u12DA\u12DB" +
		"\x03\x02\x02\x02\u12DB\u12DD\x07\u0152\x02\x02\u12DC\u12DE\x05\f\x07\x02" +
		"\u12DD\u12DC\x03\x02\x02\x02\u12DE\u12DF\x03\x02\x02\x02\u12DF\u12DD\x03" +
		"\x02\x02\x02\u12DF\u12E0\x03\x02\x02\x02\u12E0\u12E1\x03\x02\x02\x02\u12E1" +
		"\u12E9\x07\x9E\x02\x02\u12E2\u12E4\x05\f\x07\x02\u12E3\u12E2\x03\x02\x02" +
		"\x02\u12E4\u12E5\x03\x02\x02\x02\u12E5\u12E3\x03\x02\x02\x02\u12E5\u12E6" +
		"\x03\x02\x02\x02\u12E6\u12E7\x03\x02\x02\x02\u12E7\u12E8\x05$\x13\x02" +
		"\u12E8\u12EA\x03\x02\x02\x02\u12E9\u12E3\x03\x02\x02\x02\u12E9\u12EA\x03" +
		"\x02\x02\x02\u12EA\u0149\x03\x02\x02\x02\u12EB\u12F3\x07\xD5\x02\x02\u12EC" +
		"\u12EE\x05\f\x07\x02\u12ED\u12EC\x03\x02\x02\x02\u12EE\u12EF\x03\x02\x02" +
		"\x02\u12EF\u12ED\x03\x02\x02\x02\u12EF\u12F0\x03\x02\x02\x02\u12F0\u12F1" +
		"\x03\x02\x02\x02\u12F1\u12F2\x07\xDB\x02\x02\u12F2\u12F4\x03\x02\x02\x02" +
		"\u12F3\u12ED\x03\x02\x02\x02\u12F3\u12F4\x03\x02\x02\x02\u12F4\u12FC\x03" +
		"\x02\x02\x02\u12F5\u12F7\x05\f\x07\x02\u12F6\u12F5\x03\x02\x02\x02\u12F7" +
		"\u12F8\x03\x02\x02\x02\u12F8\u12F6\x03\x02\x02\x02\u12F8\u12F9\x03\x02" +
		"\x02\x02\u12F9\u12FA\x03\x02\x02\x02\u12FA\u12FB\x05$\x13\x02\u12FB\u12FD" +
		"\x03\x02\x02\x02\u12FC\u12F6\x03\x02\x02\x02\u12FC\u12FD\x03\x02\x02\x02" +
		"\u12FD\u014B\x03\x02\x02\x02\u12FE\u1300\x07e\x02\x02\u12FF\u1301\x05" +
		"\f\x07\x02\u1300\u12FF\x03\x02\x02\x02\u1301\u1302\x03\x02\x02\x02\u1302" +
		"\u1300\x03\x02\x02\x02\u1302\u1303\x03\x02\x02\x02\u1303\u1304\x03\x02" +
		"\x02\x02\u1304\u1308\x07z\x02\x02\u1305\u1307\x05\f\x07\x02\u1306\u1305" +
		"\x03\x02\x02\x02\u1307\u130A\x03\x02\x02\x02\u1308\u1306\x03\x02\x02\x02" +
		"\u1308\u1309\x03\x02\x02\x02\u1309\u130B\x03\x02\x02\x02\u130A\u1308\x03" +
		"\x02\x02\x02\u130B\u130F\x07\u01BE\x02\x02\u130C\u130E\x05\f\x07\x02\u130D" +
		"\u130C\x03\x02\x02\x02\u130E\u1311\x03\x02\x02\x02\u130F\u130D\x03\x02" +
		"\x02\x02\u130F\u1310\x03\x02\x02\x02\u1310\u1319\x03\x02\x02\x02\u1311" +
		"\u130F\x03\x02\x02\x02\u1312\u1316\x05\u014E\xA8\x02\u1313\u1315\x05\f" +
		"\x07\x02\u1314\u1313\x03\x02\x02\x02\u1315\u1318\x03\x02\x02\x02\u1316" +
		"\u1314\x03\x02\x02\x02\u1316\u1317\x03\x02\x02\x02\u1317\u131A\x03\x02" +
		"\x02\x02\u1318\u1316\x03\x02\x02\x02\u1319\u1312\x03\x02\x02\x02\u1319" +
		"\u131A\x03\x02\x02\x02\u131A\u1322\x03\x02\x02\x02\u131B\u131F\x05\u0150" +
		"\xA9\x02\u131C\u131E\x05\f\x07\x02\u131D\u131C\x03\x02\x02\x02\u131E\u1321" +
		"\x03\x02\x02\x02\u131F\u131D\x03\x02\x02\x02\u131F\u1320\x03\x02\x02\x02" +
		"\u1320\u1323\x03\x02\x02\x02\u1321\u131F\x03\x02\x02\x02\u1322\u131B\x03" +
		"\x02\x02\x02\u1322\u1323\x03\x02\x02\x02\u1323\u132B\x03\x02\x02\x02\u1324" +
		"\u1328\x05\u0152\xAA\x02\u1325\u1327\x05\f\x07\x02\u1326\u1325\x03\x02" +
		"\x02\x02\u1327\u132A\x03\x02\x02\x02\u1328\u1326\x03\x02\x02\x02\u1328" +
		"\u1329\x03\x02\x02\x02\u1329\u132C\x03\x02\x02\x02\u132A\u1328\x03\x02" +
		"\x02\x02\u132B\u1324\x03\x02\x02\x02\u132B\u132C\x03\x02\x02\x02\u132C" +
		"\u1334\x03\x02\x02\x02\u132D\u1331\x05\u0154\xAB\x02\u132E\u1330\x05\f" +
		"\x07\x02\u132F\u132E\x03\x02\x02\x02\u1330\u1333\x03\x02\x02\x02\u1331" +
		"\u132F\x03\x02\x02\x02\u1331\u1332\x03\x02\x02\x02\u1332\u1335\x03\x02" +
		"\x02\x02\u1333\u1331\x03\x02\x02\x02\u1334\u132D\x03\x02\x02\x02\u1334" +
		"\u1335\x03\x02\x02\x02\u1335\u133D\x03\x02\x02\x02\u1336\u133A\x05\u0156" +
		"\xAC\x02\u1337\u1339\x05\f\x07\x02\u1338\u1337\x03\x02\x02\x02\u1339\u133C" +
		"\x03\x02\x02\x02\u133A\u1338\x03\x02\x02\x02\u133A\u133B\x03\x02\x02\x02" +
		"\u133B\u133E\x03\x02\x02\x02\u133C\u133A\x03\x02\x02\x02\u133D\u1336\x03" +
		"\x02\x02\x02\u133D\u133E\x03\x02\x02\x02\u133E\u014D\x03\x02\x02\x02\u133F" +
		"\u1341\x07\xAA\x02\x02\u1340\u1342\x05\f\x07\x02\u1341\u1340\x03\x02\x02" +
		"\x02\u1342\u1343\x03\x02\x02\x02\u1343\u1341\x03\x02\x02\x02\u1343\u1344" +
		"\x03\x02\x02\x02\u1344\u1345\x03\x02\x02\x02\u1345\u1349\x07\u0147\x02" +
		"\x02\u1346\u1348\x05\f\x07\x02\u1347\u1346\x03\x02\x02\x02\u1348\u134B" +
		"\x03\x02\x02\x02\u1349\u1347\x03\x02\x02\x02\u1349\u134A\x03\x02\x02\x02" +
		"\u134A\u134C\x03\x02\x02\x02\u134B\u1349\x03\x02\x02\x02\u134C\u1350\x07" +
		"\u01BE\x02\x02\u134D\u134F\x05\f\x07\x02\u134E\u134D\x03\x02\x02\x02\u134F" +
		"\u1352\x03\x02\x02\x02\u1350\u134E\x03\x02\x02\x02\u1350\u1351\x03\x02" +
		"\x02\x02\u1351\u1378\x03\x02\x02\x02\u1352\u1350\x03\x02\x02\x02\u1353" +
		"\u135D\x05\u0158\xAD\x02\u1354\u1356\x05\f\x07\x02\u1355\u1354\x03\x02" +
		"\x02\x02\u1356\u1359\x03\x02\x02\x02\u1357\u1355\x03\x02\x02\x02\u1357" +
		"\u1358\x03\x02\x02\x02\u1358\u135A\x03\x02\x02\x02\u1359\u1357\x03\x02" +
		"\x02\x02\u135A\u135C\x05\u0160\xB1\x02\u135B\u1357\x03\x02\x02\x02\u135C" +
		"\u135F\x03\x02\x02\x02\u135D\u135B\x03\x02\x02\x02\u135D\u135E\x03\x02" +
		"\x02\x02\u135E\u136F\x03\x02\x02\x02\u135F\u135D\x03\x02\x02\x02\u1360" +
		"\u136F\x05\u015C\xAF\x02\u1361\u136B\x05\u015A\xAE\x02\u1362\u1364\x05" +
		"\f\x07\x02\u1363\u1362\x03\x02\x02\x02\u1364\u1367\x03\x02\x02\x02\u1365" +
		"\u1363\x03\x02\x02\x02\u1365\u1366\x03\x02\x02\x02\u1366\u1368\x03\x02" +
		"\x02\x02\u1367\u1365\x03\x02\x02\x02\u1368\u136A\x05\u0160\xB1\x02\u1369" +
		"\u1365\x03\x02\x02\x02\u136A\u136D\x03\x02\x02\x02\u136B\u1369\x03\x02" +
		"\x02\x02\u136B\u136C\x03\x02\x02\x02\u136C\u136F\x03\x02\x02\x02\u136D" +
		"\u136B\x03\x02\x02\x02\u136E\u1353\x03\x02\x02\x02\u136E\u1360\x03\x02" +
		"\x02\x02\u136E\u1361\x03\x02\x02\x02\u136F\u1373\x03\x02\x02\x02\u1370" +
		"\u1372\x05\f\x07\x02\u1371\u1370\x03\x02\x02\x02\u1372\u1375\x03\x02\x02" +
		"\x02\u1373\u1371\x03\x02\x02\x02\u1373\u1374\x03\x02\x02\x02\u1374\u1377" +
		"\x03\x02\x02\x02\u1375\u1373\x03\x02\x02\x02\u1376\u136E\x03\x02\x02\x02" +
		"\u1377\u137A\x03\x02\x02\x02\u1378\u1376\x03\x02\x02\x02\u1378\u1379\x03" +
		"\x02\x02\x02\u1379\u014F\x03\x02\x02\x02\u137A\u1378\x03\x02\x02\x02\u137B" +
		"\u137D\x07\u018D\x02\x02\u137C\u137E\x05\f\x07\x02\u137D\u137C\x03\x02" +
		"\x02\x02\u137E\u137F\x03\x02\x02\x02\u137F\u137D\x03\x02\x02\x02\u137F" +
		"\u1380\x03\x02\x02\x02\u1380\u1381\x03\x02\x02\x02\u1381\u1385\x07\u0147" +
		"\x02\x02\u1382\u1384\x05\f\x07\x02\u1383\u1382\x03\x02\x02\x02\u1384\u1387" +
		"\x03\x02\x02\x02\u1385\u1383\x03\x02\x02\x02\u1385\u1386\x03\x02\x02\x02" +
		"\u1386\u1388\x03\x02\x02\x02\u1387\u1385\x03\x02\x02\x02\u1388\u138C\x07" +
		"\u01BE\x02\x02\u1389\u138B\x05\f\x07\x02\u138A\u1389\x03\x02\x02\x02\u138B" +
		"\u138E\x03\x02\x02\x02\u138C\u138A\x03\x02\x02\x02\u138C\u138D\x03\x02" +
		"\x02\x02\u138D\u1398\x03\x02\x02\x02\u138E\u138C\x03\x02\x02\x02\u138F" +
		"\u1393\x05\u0160\xB1\x02\u1390\u1392\x05\f\x07\x02\u1391\u1390\x03\x02" +
		"\x02\x02\u1392\u1395\x03\x02\x02\x02\u1393\u1391\x03\x02\x02\x02\u1393" +
		"\u1394\x03\x02\x02\x02\u1394\u1397\x03\x02\x02\x02\u1395\u1393\x03\x02" +
		"\x02\x02\u1396\u138F\x03\x02\x02\x02\u1397\u139A\x03\x02\x02\x02\u1398" +
		"\u1396\x03\x02\x02\x02\u1398\u1399\x03\x02\x02\x02\u1399\u0151\x03\x02" +
		"\x02\x02\u139A\u1398\x03\x02\x02\x02\u139B\u139D\x07\xE7\x02\x02\u139C" +
		"\u139E\x05\f\x07\x02\u139D\u139C\x03\x02\x02\x02\u139E\u139F\x03\x02\x02" +
		"\x02\u139F\u139D\x03\x02\x02\x02\u139F\u13A0\x03\x02\x02\x02\u13A0\u13A1" +
		"\x03\x02\x02\x02\u13A1\u13A5\x07\u0147\x02\x02\u13A2\u13A4\x05\f\x07\x02" +
		"\u13A3\u13A2\x03\x02\x02\x02\u13A4\u13A7\x03\x02\x02\x02\u13A5\u13A3\x03" +
		"\x02\x02\x02\u13A5\u13A6\x03\x02\x02\x02\u13A6\u13A8\x03\x02\x02\x02\u13A7" +
		"\u13A5\x03\x02\x02\x02\u13A8\u13AC\x07\u01BE\x02\x02\u13A9\u13AB\x05\f" +
		"\x07\x02\u13AA\u13A9\x03\x02\x02\x02\u13AB\u13AE\x03\x02\x02\x02\u13AC" +
		"\u13AA\x03\x02\x02\x02\u13AC\u13AD\x03\x02\x02\x02\u13AD\u13B8\x03\x02" +
		"\x02\x02\u13AE\u13AC\x03\x02\x02\x02\u13AF\u13B3\x05\u0160\xB1\x02\u13B0" +
		"\u13B2\x05\f\x07\x02\u13B1\u13B0\x03\x02\x02\x02\u13B2\u13B5\x03\x02\x02" +
		"\x02\u13B3\u13B1\x03\x02\x02\x02\u13B3\u13B4\x03\x02\x02\x02\u13B4\u13B7" +
		"\x03\x02\x02\x02\u13B5\u13B3\x03\x02\x02\x02\u13B6\u13AF\x03\x02\x02\x02" +
		"\u13B7\u13BA\x03\x02\x02\x02\u13B8\u13B6\x03\x02\x02\x02\u13B8\u13B9\x03" +
		"\x02\x02\x02\u13B9\u0153\x03\x02\x02\x02\u13BA\u13B8\x03\x02\x02\x02\u13BB" +
		"\u13BD\x07\u0132\x02\x02\u13BC\u13BE\x05\f\x07\x02\u13BD\u13BC\x03\x02" +
		"\x02\x02\u13BE\u13BF\x03\x02\x02\x02\u13BF\u13BD\x03\x02\x02\x02\u13BF" +
		"\u13C0\x03\x02\x02\x02\u13C0\u13C1\x03\x02\x02\x02\u13C1\u13C5\x07\u0147" +
		"\x02\x02\u13C2\u13C4\x05\f\x07\x02\u13C3\u13C2\x03\x02\x02\x02\u13C4\u13C7" +
		"\x03\x02\x02\x02\u13C5\u13C3\x03\x02\x02\x02\u13C5\u13C6\x03\x02\x02\x02" +
		"\u13C6\u13C8\x03\x02\x02\x02\u13C7\u13C5\x03\x02\x02\x02\u13C8\u13CC\x07" +
		"\u01BE\x02\x02\u13C9\u13CB\x05\f\x07\x02\u13CA\u13C9\x03\x02\x02\x02\u13CB" +
		"\u13CE\x03\x02\x02\x02\u13CC\u13CA\x03\x02\x02\x02\u13CC\u13CD\x03\x02" +
		"\x02\x02\u13CD\u13E4\x03\x02\x02\x02\u13CE\u13CC\x03\x02\x02\x02\u13CF" +
		"\u13D9\x05\u015C\xAF\x02\u13D0\u13D2\x05\f\x07\x02\u13D1\u13D0\x03\x02" +
		"\x02\x02\u13D2\u13D5\x03\x02\x02\x02\u13D3\u13D1\x03\x02\x02\x02\u13D3" +
		"\u13D4\x03\x02\x02\x02\u13D4\u13D6\x03\x02\x02\x02\u13D5\u13D3\x03\x02" +
		"\x02\x02\u13D6\u13D8\x05\u018E\xC8\x02\u13D7\u13D3\x03\x02\x02\x02\u13D8" +
		"\u13DB\x03\x02\x02\x02\u13D9\u13D7\x03\x02\x02\x02\u13D9\u13DA\x03\x02" +
		"\x02\x02\u13DA\u13DF\x03\x02\x02\x02\u13DB\u13D9\x03\x02\x02\x02\u13DC" +
		"\u13DE\x05\f\x07\x02\u13DD\u13DC\x03\x02\x02\x02\u13DE\u13E1\x03\x02\x02" +
		"\x02\u13DF\u13DD\x03\x02\x02\x02\u13DF\u13E0\x03\x02\x02\x02\u13E0\u13E3" +
		"\x03\x02\x02\x02\u13E1\u13DF\x03\x02\x02\x02\u13E2\u13CF\x03\x02\x02\x02" +
		"\u13E3\u13E6\x03\x02\x02\x02\u13E4\u13E2\x03\x02\x02\x02\u13E4\u13E5\x03" +
		"\x02\x02\x02\u13E5\u0155\x03\x02\x02\x02\u13E6\u13E4\x03\x02\x02\x02\u13E7" +
		"\u13E9\x07\u0144\x02\x02\u13E8\u13EA\x05\f\x07\x02\u13E9\u13E8\x03\x02" +
		"\x02\x02\u13EA\u13EB\x03\x02\x02\x02\u13EB\u13E9\x03\x02\x02\x02\u13EB" +
		"\u13EC\x03\x02\x02\x02\u13EC\u13ED\x03\x02\x02\x02\u13ED\u13F1\x07\u0147" +
		"\x02\x02\u13EE\u13F0\x05\f\x07\x02\u13EF\u13EE\x03\x02\x02\x02\u13F0\u13F3" +
		"\x03\x02\x02\x02\u13F1\u13EF\x03\x02\x02\x02\u13F1\u13F2\x03\x02\x02\x02" +
		"\u13F2\u13F4\x03\x02\x02\x02\u13F3\u13F1\x03\x02\x02\x02\u13F4\u13F8\x07" +
		"\u01BE\x02\x02\u13F5\u13F7\x05\f\x07\x02\u13F6\u13F5\x03\x02\x02\x02\u13F7" +
		"\u13FA\x03\x02\x02\x02\u13F8\u13F6\x03\x02\x02\x02\u13F8\u13F9\x03\x02" +
		"\x02\x02\u13F9\u1404\x03\x02\x02\x02\u13FA\u13F8\x03\x02\x02\x02\u13FB" +
		"\u13FF\x05\u01EE\xF8\x02\u13FC\u13FE\x05\f\x07\x02\u13FD\u13FC\x03\x02" +
		"\x02\x02\u13FE\u1401\x03\x02\x02\x02\u13FF\u13FD\x03\x02\x02\x02\u13FF" +
		"\u1400\x03\x02\x02\x02\u1400\u1403\x03\x02\x02\x02\u1401\u13FF\x03\x02" +
		"\x02\x02\u1402\u13FB\x03\x02\x02\x02\u1403\u1406\x03\x02\x02\x02\u1404" +
		"\u1402\x03\x02\x02\x02\u1404\u1405\x03\x02\x02\x02\u1405\u0157\x03\x02" +
		"\x02\x02\u1406\u1404\x03\x02\x02\x02\u1407\u1409\x07\xA9\x02\x02\u1408" +
		"\u140A\x05\f\x07\x02\u1409\u1408\x03\x02\x02\x02\u140A\u140B\x03\x02\x02" +
		"\x02\u140B\u1409\x03\x02\x02\x02\u140B\u140C\x03\x02\x02\x02\u140C\u140D" +
		"\x03\x02\x02\x02\u140D\u1411\x05\u02A8\u0155\x02\u140E\u1410\x05\f\x07" +
		"\x02\u140F\u140E\x03\x02\x02\x02\u1410\u1413\x03\x02\x02\x02\u1411\u140F" +
		"\x03\x02\x02\x02\u1411\u1412\x03\x02\x02\x02\u1412\u141D\x03\x02\x02\x02" +
		"\u1413\u1411\x03\x02\x02\x02\u1414\u1418\x05\u015E\xB0\x02\u1415\u1417" +
		"\x05\f\x07\x02\u1416\u1415\x03\x02\x02\x02\u1417\u141A\x03\x02\x02\x02" +
		"\u1418\u1416\x03\x02\x02\x02\u1418\u1419\x03\x02\x02\x02\u1419\u141C\x03" +
		"\x02\x02\x02\u141A\u1418\x03\x02\x02\x02\u141B\u1414\x03\x02\x02\x02\u141C" +
		"\u141F\x03\x02\x02\x02\u141D\u141B\x03\x02\x02\x02\u141D\u141E\x03\x02" +
		"\x02\x02\u141E\u1420\x03\x02\x02\x02\u141F\u141D\x03\x02\x02\x02\u1420" +
		"\u1421\x07\u01BE\x02\x02\u1421\u0159\x03\x02\x02\x02\u1422\u1424\x07\u0145" +
		"\x02\x02\u1423\u1425\x05\f\x07\x02\u1424\u1423\x03\x02\x02\x02\u1425\u1426" +
		"\x03\x02\x02\x02\u1426\u1424\x03\x02\x02\x02\u1426\u1427\x03\x02\x02\x02" +
		"\u1427\u1428\x03\x02\x02\x02\u1428\u142C\x05\u02A8\u0155\x02\u1429\u142B" +
		"\x05\f\x07\x02\u142A\u1429\x03\x02\x02\x02\u142B\u142E\x03\x02\x02\x02" +
		"\u142C\u142A\x03\x02\x02\x02\u142C\u142D\x03\x02\x02\x02\u142D\u1438\x03" +
		"\x02\x02\x02\u142E\u142C\x03\x02\x02\x02\u142F\u1433\x05\u01CA\xE6\x02" +
		"\u1430\u1432\x05\f\x07\x02\u1431\u1430\x03\x02\x02\x02\u1432\u1435\x03" +
		"\x02\x02\x02\u1433\u1431\x03\x02\x02\x02\u1433\u1434\x03\x02\x02\x02\u1434" +
		"\u1437\x03\x02\x02\x02\u1435\u1433\x03\x02\x02\x02\u1436\u142F\x03\x02" +
		"\x02\x02\u1437\u143A\x03\x02\x02\x02\u1438\u1436\x03\x02\x02\x02\u1438" +
		"\u1439\x03\x02\x02\x02\u1439\u143B\x03\x02\x02\x02\u143A\u1438\x03\x02" +
		"\x02\x02\u143B\u143C\x07\u01BE\x02\x02\u143C\u015B\x03\x02\x02\x02\u143D" +
		"\u143F\x07\u0124\x02\x02\u143E\u1440\x05\f\x07\x02\u143F\u143E\x03\x02" +
		"\x02\x02\u1440\u1441\x03\x02\x02\x02\u1441\u143F\x03\x02\x02\x02\u1441" +
		"\u1442\x03\x02\x02\x02\u1442\u1443\x03\x02\x02\x02\u1443\u1447\x05\u01CE" +
		"\xE8\x02\u1444\u1446\x05\f\x07\x02\u1445\u1444\x03\x02\x02\x02\u1446\u1449" +
		"\x03\x02\x02\x02\u1447\u1445\x03\x02\x02\x02\u1447\u1448\x03\x02\x02\x02" +
		"\u1448\u1453\x03\x02\x02\x02\u1449\u1447\x03\x02\x02\x02\u144A\u144E\x05" +
		"\u01AC\xD7\x02\u144B\u144D\x05\f\x07\x02\u144C\u144B\x03\x02\x02\x02\u144D" +
		"\u1450\x03\x02\x02\x02\u144E\u144C\x03\x02\x02\x02\u144E\u144F\x03\x02" +
		"\x02\x02\u144F\u1452\x03\x02\x02\x02\u1450\u144E\x03\x02\x02\x02\u1451" +
		"\u144A\x03\x02\x02\x02\u1452\u1455\x03\x02\x02\x02\u1453\u1451\x03\x02" +
		"\x02\x02\u1453\u1454\x03\x02\x02\x02\u1454\u1456\x03\x02\x02\x02\u1455" +
		"\u1453\x03\x02\x02\x02\u1456\u1457\x07\u01BE\x02\x02\u1457\u015D\x03\x02" +
		"\x02\x02\u1458\u145A\x07\xD6\x02\x02\u1459\u145B\x05\f\x07\x02\u145A\u1459" +
		"\x03\x02\x02\x02\u145B\u145C\x03\x02\x02\x02\u145C\u145A\x03\x02\x02\x02" +
		"\u145C\u145D\x03\x02\x02\x02\u145D\u145F\x03\x02\x02\x02\u145E\u1458\x03" +
		"\x02\x02\x02\u145E\u145F\x03\x02\x02\x02\u145F\u1460\x03\x02\x02\x02\u1460" +
		"\u1476\x07\xA6\x02\x02\u1461\u1463\x07\xD6\x02\x02\u1462\u1464\x05\f\x07" +
		"\x02\u1463\u1462\x03\x02\x02\x02\u1464\u1465\x03\x02\x02\x02\u1465\u1463" +
		"\x03\x02\x02\x02\u1465\u1466\x03\x02\x02\x02\u1466\u1468\x03\x02\x02\x02" +
		"\u1467\u1461\x03\x02\x02\x02\u1467\u1468\x03\x02\x02\x02\u1468\u1469\x03" +
		"\x02\x02\x02\u1469\u1476\x07\xBC\x02\x02\u146A\u1476\x05\u029C\u014F\x02" +
		"\u146B\u1476\x05\u01E4\xF3\x02\u146C\u1476\x05\u01E2\xF2\x02\u146D\u1476" +
		"\x05\u01DE\xF0\x02\u146E\u1476\x05\u01DA\xEE\x02\u146F\u1476\x05\u01D0" +
		"\xE9\x02\u1470\u1476\x05\u01CC\xE7\x02\u1471\u1476\x05\u029A\u014E\x02" +
		"\u1472\u1476\x05\u0288\u0145\x02\u1473\u1476\x05\u0284\u0143\x02\u1474" +
		"\u1476\x05\u0280\u0141\x02\u1475\u145E\x03\x02\x02\x02\u1475\u1467\x03" +
		"\x02\x02\x02\u1475\u146A\x03\x02\x02\x02\u1475\u146B\x03\x02\x02\x02\u1475" +
		"\u146C\x03\x02\x02\x02\u1475\u146D\x03\x02\x02\x02\u1475\u146E\x03\x02" +
		"\x02\x02\u1475\u146F\x03\x02\x02\x02\u1475\u1470\x03\x02\x02\x02\u1475" +
		"\u1471\x03\x02\x02\x02\u1475\u1472\x03\x02\x02\x02\u1475\u1473\x03\x02" +
		"\x02\x02\u1475\u1474\x03\x02\x02\x02\u1476\u015F\x03\x02\x02\x02\u1477" +
		"\u1481\x05\u0162\xB2\x02\u1478\u147A\x05\f\x07\x02\u1479\u1478\x03\x02" +
		"\x02\x02\u147A\u147D\x03\x02\x02\x02\u147B\u1479\x03\x02\x02\x02\u147B" +
		"\u147C\x03\x02\x02\x02\u147C\u147E\x03\x02\x02\x02\u147D\u147B\x03\x02" +
		"\x02\x02\u147E\u1480\x05\u0162\xB2\x02\u147F\u147B\x03\x02\x02\x02\u1480" +
		"\u1483\x03\x02\x02\x02\u1481\u147F\x03\x02\x02\x02\u1481\u1482\x03\x02" +
		"\x02\x02\u1482\u0161\x03\x02\x02\x02\u1483\u1481\x03\x02\x02\x02\u1484" +
		"\u148E\x05\u0164\xB3\x02\u1485\u1487\x05\f\x07\x02\u1486\u1485\x03\x02" +
		"\x02\x02\u1487\u1488\x03\x02\x02\x02\u1488\u1486\x03\x02\x02\x02\u1488" +
		"\u1489\x03\x02\x02\x02\u1489\u148C\x03\x02\x02\x02\u148A\u148D\x05\u01C8" +
		"\xE5\x02\u148B\u148D\x07\xAD\x02\x02\u148C\u148A\x03\x02\x02\x02\u148C" +
		"\u148B\x03\x02\x02\x02\u148D\u148F\x03\x02\x02\x02\u148E\u1486\x03\x02" +
		"\x02\x02\u148E\u148F\x03\x02\x02\x02\u148F\u149D\x03\x02\x02\x02\u1490" +
		"\u1492\x05\f\x07\x02\u1491\u1490\x03\x02\x02\x02\u1492\u1493\x03\x02\x02" +
		"\x02\u1493\u1491\x03\x02\x02\x02\u1493\u1494\x03\x02\x02\x02\u1494\u1495" +
		"\x03\x02\x02\x02\u1495\u1497\x07\u0128\x02\x02\u1496\u1498\x05\f\x07\x02" +
		"\u1497\u1496\x03\x02\x02\x02\u1498\u1499\x03\x02\x02\x02\u1499\u1497\x03" +
		"\x02\x02\x02\u1499\u149A\x03\x02\x02\x02\u149A\u149B\x03\x02\x02\x02\u149B" +
		"\u149C\x05\u01C6\xE4\x02\u149C\u149E\x03\x02\x02\x02\u149D\u1491\x03\x02" +
		"\x02\x02\u149D\u149E\x03\x02\x02\x02\u149E\u14A8\x03\x02\x02\x02\u149F" +
		"\u14A1\x05\f\x07\x02\u14A0\u149F\x03\x02\x02\x02\u14A1\u14A2\x03\x02\x02" +
		"\x02\u14A2\u14A0\x03\x02\x02\x02\u14A2\u14A3\x03\x02\x02\x02\u14A3\u14A4" +
		"\x03\x02\x02\x02\u14A4\u14A5\x05\u0166\xB4\x02\u14A5\u14A7\x03\x02\x02" +
		"\x02\u14A6\u14A0\x03\x02\x02\x02\u14A7\u14AA\x03\x02\x02\x02\u14A8\u14A6" +
		"\x03\x02\x02\x02\u14A8\u14A9\x03\x02\x02\x02\u14A9\u14AB\x03\x02\x02\x02" +
		"\u14AA\u14A8\x03\x02\x02\x02\u14AB\u14AC\x07\u01BE\x02\x02\u14AC\u0163" +
		"\x03\x02\x02\x02\u14AD\u14AE\x07\u01C2\x02\x02\u14AE\u0165\x03\x02\x02" +
		"\x02\u14AF\u14B1\x07\xD6\x02\x02\u14B0\u14B2\x05\f\x07\x02\u14B1\u14B0" +
		"\x03\x02\x02\x02\u14B2\u14B3\x03\x02\x02\x02\u14B3\u14B1\x03\x02\x02\x02" +
		"\u14B3\u14B4\x03\x02\x02\x02\u14B4\u14B6\x03\x02\x02\x02\u14B5\u14AF\x03" +
		"\x02\x02\x02\u14B5\u14B6\x03\x02\x02\x02\u14B6\u14B7\x03\x02\x02\x02\u14B7" +
		"\u14EC\x07\xA6\x02\x02\u14B8\u14BA\x07\xD6\x02\x02\u14B9\u14BB\x05\f\x07" +
		"\x02\u14BA\u14B9\x03\x02\x02\x02\u14BB\u14BC\x03\x02\x02\x02\u14BC\u14BA" +
		"\x03\x02\x02\x02\u14BC\u14BD\x03\x02\x02\x02\u14BD\u14BF\x03\x02\x02\x02" +
		"\u14BE\u14B8\x03\x02\x02\x02\u14BE\u14BF\x03\x02\x02\x02\u14BF\u14C0\x03" +
		"\x02\x02\x02\u14C0\u14EC\x07\xBC\x02\x02\u14C1\u14EC\x05\u01C0\xE1\x02" +
		"\u14C2\u14EC\x05\u01BC\xDF\x02\u14C3\u14EC\x05\u0194\xCB\x02\u14C4\u14EC" +
		"\x05\u017C\xBF\x02\u14C5\u14CD\t\x13\x02\x02\u14C6\u14C8\x05\f\x07\x02" +
		"\u14C7\u14C6\x03\x02\x02\x02\u14C8\u14C9\x03\x02\x02\x02\u14C9\u14C7\x03" +
		"\x02\x02\x02\u14C9\u14CA\x03\x02\x02\x02\u14CA\u14CB\x03\x02\x02\x02\u14CB" +
		"\u14CC\t\x14\x02\x02\u14CC\u14CE\x03\x02\x02\x02\u14CD\u14C7\x03\x02\x02" +
		"\x02\u14CD\u14CE\x03\x02\x02\x02\u14CE\u14EC\x03\x02\x02\x02\u14CF\u14D7" +
		"\t\x15\x02\x02\u14D0\u14D2\x05\f\x07\x02\u14D1\u14D0\x03\x02\x02\x02\u14D2" +
		"\u14D3\x03\x02\x02\x02\u14D3\u14D1\x03\x02\x02\x02\u14D3\u14D4\x03\x02" +
		"\x02\x02\u14D4\u14D5\x03\x02\x02\x02\u14D5\u14D6\x07\u0140\x02\x02\u14D6" +
		"\u14D8\x03\x02\x02\x02\u14D7\u14D1\x03\x02\x02\x02\u14D7\u14D8\x03\x02" +
		"\x02\x02\u14D8\u14EC\x03\x02\x02\x02\u14D9\u14DB\x07,\x02\x02\u14DA\u14DC" +
		"\x05\f\x07\x02\u14DB\u14DA\x03\x02\x02\x02\u14DC\u14DD\x03\x02\x02\x02" +
		"\u14DD\u14DB\x03\x02\x02\x02\u14DD\u14DE\x03\x02\x02\x02\u14DE\u14E5\x03" +
		"\x02\x02\x02\u14DF\u14E1\x07\u0189\x02\x02\u14E0\u14E2\x05\f\x07\x02\u14E1" +
		"\u14E0\x03\x02\x02\x02\u14E2\u14E3\x03\x02\x02\x02\u14E3\u14E1\x03\x02" +
		"\x02\x02\u14E3\u14E4\x03\x02\x02\x02\u14E4\u14E6\x03\x02\x02\x02\u14E5" +
		"\u14DF\x03\x02\x02\x02\u14E5\u14E6\x03\x02\x02\x02\u14E6\u14E7\x03\x02" +
		"\x02\x02\u14E7\u14E8\x07\u0191\x02\x02\u14E8\u14EC\x03\x02\x02\x02\u14E9" +
		"\u14EC\x05\u016E\xB8\x02\u14EA\u14EC\x05\u0168\xB5\x02\u14EB\u14B5\x03" +
		"\x02\x02\x02\u14EB\u14BE\x03\x02\x02\x02\u14EB\u14C1\x03\x02\x02\x02\u14EB" +
		"\u14C2\x03\x02\x02\x02\u14EB\u14C3\x03\x02\x02\x02\u14EB\u14C4\x03\x02" +
		"\x02\x02\u14EB\u14C5\x03\x02\x02\x02\u14EB\u14CF\x03\x02\x02\x02\u14EB" +
		"\u14D9\x03\x02\x02\x02\u14EB\u14E9\x03\x02\x02\x02\u14EB\u14EA\x03\x02" +
		"\x02\x02\u14EC\u0167\x03\x02\x02\x02\u14ED\u14EF\x07\u012F\x02\x02\u14EE" +
		"\u14F0\x05\f\x07\x02\u14EF\u14EE\x03\x02\x02\x02\u14F0\u14F1\x03\x02\x02" +
		"\x02\u14F1\u14EF\x03\x02\x02\x02\u14F1\u14F2\x03\x02\x02\x02\u14F2\u14F3" +
		"\x03\x02\x02\x02\u14F3\u1501\x05\u016A\xB6\x02\u14F4\u14F6\x05\f\x07\x02" +
		"\u14F5\u14F4\x03\x02\x02\x02\u14F6\u14F7\x03\x02\x02\x02\u14F7\u14F5\x03" +
		"\x02\x02\x02\u14F7\u14F8\x03\x02\x02\x02\u14F8\u14F9\x03\x02\x02\x02\u14F9" +
		"\u14FB\t\x07\x02\x02\u14FA\u14FC\x05\f\x07\x02\u14FB\u14FA\x03\x02\x02" +
		"\x02\u14FC\u14FD\x03\x02\x02\x02\u14FD\u14FB\x03\x02\x02\x02\u14FD\u14FE" +
		"\x03\x02\x02\x02\u14FE\u14FF\x03\x02\x02\x02\u14FF\u1500\x05\u016C\xB7" +
		"\x02\u1500\u1502\x03\x02\x02\x02\u1501\u14F5\x03\x02\x02\x02\u1501\u1502" +
		"\x03\x02\x02\x02\u1502\u0169\x03\x02\x02\x02\u1503\u1504\x05\u023E\u0120" +
		"\x02\u1504\u016B\x03\x02\x02\x02\u1505\u1506\x05\u023E\u0120\x02\u1506" +
		"\u016D\x03\x02\x02\x02\u1507\u150F\x07\u0185\x02\x02\u1508\u150A\x05\f" +
		"\x07\x02\u1509\u1508\x03\x02\x02\x02\u150A\u150B\x03\x02\x02\x02\u150B" +
		"\u1509\x03\x02\x02\x02\u150B\u150C\x03\x02\x02\x02\u150C\u150D\x03\x02" +
		"\x02\x02\u150D\u150E\x07\xD6\x02\x02\u150E\u1510\x03\x02\x02\x02\u150F" +
		"\u1509\x03\x02\x02\x02\u150F\u1510\x03\x02\x02\x02\u1510\u151C\x03\x02" +
		"\x02\x02\u1511\u1519\x07\u0186\x02\x02\u1512\u1514\x05\f\x07\x02\u1513" +
		"\u1512\x03\x02\x02\x02\u1514\u1515\x03\x02\x02\x02\u1515\u1513\x03\x02" +
		"\x02\x02\u1515\u1516\x03\x02\x02\x02\u1516\u1517\x03\x02\x02\x02\u1517" +
		"\u1518\x07\x16\x02\x02\u1518\u151A\x03\x02\x02\x02\u1519\u1513\x03\x02" +
		"\x02\x02\u1519\u151A\x03\x02\x02\x02\u151A\u151C\x03\x02\x02\x02\u151B" +
		"\u1507\x03\x02\x02\x02\u151B\u1511\x03\x02\x02\x02\u151C\u151E\x03\x02" +
		"\x02\x02\u151D\u151F\x05\f\x07\x02\u151E\u151D\x03\x02\x02\x02\u151F\u1520" +
		"\x03\x02\x02\x02\u1520\u151E\x03\x02\x02\x02\u1520\u1521\x03\x02\x02\x02" +
		"\u1521\u1522\x03\x02\x02\x02\u1522\u152C\x05\u0170\xB9\x02\u1523\u1525" +
		"\x05\f\x07\x02\u1524\u1523\x03\x02\x02\x02\u1525\u1526\x03\x02\x02\x02" +
		"\u1526\u1524\x03\x02\x02\x02\u1526\u1527\x03\x02\x02\x02\u1527\u1528\x03" +
		"\x02\x02\x02\u1528\u1529\x05\u0170\xB9\x02\u1529\u152B\x03\x02\x02\x02" +
		"\u152A\u1524\x03\x02\x02\x02\u152B\u152E\x03\x02\x02\x02\u152C\u152A\x03" +
		"\x02\x02\x02\u152C\u152D\x03\x02\x02\x02\u152D\u016F\x03\x02\x02\x02\u152E" +
		"\u152C\x03\x02\x02\x02\u152F\u1537\x05\u0172\xBA\x02\u1530\u1532\x05\f" +
		"\x07\x02\u1531\u1530\x03\x02\x02\x02\u1532\u1533\x03\x02\x02\x02\u1533" +
		"\u1531\x03\x02\x02\x02\u1533\u1534\x03\x02\x02\x02\u1534\u1535\x03\x02" +
		"\x02\x02\u1535\u1536\x05\u0174\xBB\x02\u1536\u1538\x03\x02\x02\x02\u1537" +
		"\u1531\x03\x02\x02\x02\u1537\u1538\x03\x02\x02\x02\u1538\u0171\x03\x02" +
		"\x02\x02\u1539\u154B\x05\u017A\xBE\x02\u153A\u153C\x07\u012A\x02\x02\u153B" +
		"\u153D\x05\f\x07\x02\u153C\u153B\x03\x02\x02\x02\u153D\u153E\x03\x02\x02" +
		"\x02\u153E\u153C\x03\x02\x02\x02\u153E\u153F\x03\x02\x02\x02\u153F\u1540" +
		"\x03\x02\x02\x02\u1540\u1541\x05\u0178\xBD\x02\u1541\u154B\x03\x02\x02" +
		"\x02\u1542\u1544\x07\xA6\x02\x02\u1543\u1545\x05\f\x07\x02\u1544\u1543" +
		"\x03\x02\x02\x02\u1545\u1546\x03\x02\x02\x02\u1546\u1544\x03\x02\x02\x02" +
		"\u1546\u1547\x03\x02\x02\x02\u1547\u1548\x03\x02\x02\x02\u1548\u1549\x05" +
		"\u0176\xBC\x02\u1549\u154B\x03\x02\x02\x02\u154A\u1539\x03\x02\x02\x02" +
		"\u154A\u153A\x03\x02\x02\x02\u154A\u1542\x03\x02\x02\x02\u154B\u0173\x03" +
		"\x02\x02\x02\u154C\u154E\t\x07\x02\x02\u154D\u154F\x05\f\x07\x02\u154E" +
		"\u154D\x03\x02\x02\x02\u154F\u1550\x03\x02\x02\x02\u1550\u154E\x03\x02" +
		"\x02\x02\u1550\u1551\x03\x02\x02\x02\u1551\u1552\x03\x02\x02\x02\u1552" +
		"\u1553\x05\u0172\xBA\x02\u1553\u0175\x03\x02\x02\x02\u1554\u1555\x07\u01C4" +
		"\x02\x02\u1555\u0177\x03\x02\x02\x02\u1556\u1557\x05\u023E\u0120\x02\u1557" +
		"\u0179\x03\x02\x02\x02\u1558\u1559\t\x16\x02\x02\u1559\u017B\x03\x02\x02" +
		"\x02\u155A\u155C\x07\xFE\x02\x02\u155B\u155D\x05\f\x07\x02\u155C\u155B" +
		"\x03\x02\x02\x02\u155D\u155E\x03\x02\x02\x02\u155E\u155C\x03\x02\x02\x02" +
		"\u155E\u155F\x03\x02\x02\x02\u155F\u1560\x03\x02\x02\x02\u1560\u156A\x05" +
		"\u0186\xC4\x02\u1561\u1563\x05\f\x07\x02\u1562\u1561\x03\x02\x02\x02\u1563" +
		"\u1564\x03\x02\x02\x02\u1564\u1562\x03\x02\x02\x02\u1564\u1565\x03\x02" +
		"\x02\x02\u1565\u1566\x03\x02\x02\x02\u1566\u1567\x05\u0182\xC2\x02\u1567" +
		"\u1569\x03\x02\x02\x02\u1568\u1562\x03\x02\x02\x02\u1569\u156C\x03\x02" +
		"\x02\x02\u156A\u1568\x03\x02\x02\x02\u156A\u156B\x03\x02\x02\x02\u156B" +
		"\u1574\x03\x02\x02\x02\u156C\u156A\x03\x02\x02\x02\u156D\u156F\x05\f\x07" +
		"\x02\u156E\u156D\x03\x02\x02\x02\u156F\u1570\x03\x02\x02\x02\u1570\u156E" +
		"\x03\x02\x02\x02\u1570\u1571\x03\x02\x02\x02\u1571\u1572\x03\x02\x02\x02" +
		"\u1572\u1573\x05\u017E\xC0\x02\u1573\u1575\x03\x02\x02\x02\u1574\u156E" +
		"\x03\x02\x02\x02\u1574\u1575\x03\x02\x02\x02\u1575\u017D\x03\x02\x02\x02" +
		"\u1576\u1578\x07\xCB\x02\x02\u1577\u1579\x05\f\x07\x02\u1578\u1577\x03" +
		"\x02\x02\x02\u1579\u157A\x03\x02\x02\x02\u157A\u1578\x03\x02\x02\x02\u157A" +
		"\u157B\x03\x02\x02\x02\u157B\u1582\x03\x02\x02\x02\u157C\u157E\x072\x02" +
		"\x02\u157D\u157F\x05\f\x07\x02\u157E\u157D\x03\x02\x02\x02\u157F\u1580" +
		"\x03\x02\x02\x02\u1580\u157E\x03\x02\x02\x02\u1580\u1581\x03\x02\x02\x02" +
		"\u1581\u1583\x03\x02\x02\x02\u1582\u157C\x03\x02\x02\x02\u1582\u1583\x03" +
		"\x02\x02\x02\u1583\u1584\x03\x02\x02\x02\u1584\u158E\x05\u0180\xC1\x02" +
		"\u1585\u1587\x05\f\x07\x02\u1586\u1585\x03\x02\x02\x02\u1587\u1588\x03" +
		"\x02\x02\x02\u1588\u1586\x03\x02\x02\x02\u1588\u1589\x03\x02\x02\x02\u1589" +
		"\u158A\x03\x02\x02\x02\u158A\u158B\x05\u0180\xC1\x02\u158B\u158D\x03\x02" +
		"\x02\x02\u158C\u1586\x03\x02\x02\x02\u158D";
	private static readonly _serializedATNSegment12: string =
		"\u1590\x03\x02\x02\x02\u158E\u158C\x03\x02\x02\x02\u158E\u158F\x03\x02" +
		"\x02\x02\u158F\u017F\x03\x02\x02\x02\u1590\u158E\x03\x02\x02\x02\u1591" +
		"\u1592\x07\u01C4\x02\x02\u1592\u0181\x03\x02\x02\x02\u1593\u1595\t\v\x02" +
		"\x02\u1594\u1596\x05\f\x07\x02\u1595\u1594\x03\x02\x02\x02\u1596\u1597" +
		"\x03\x02\x02\x02\u1597\u1595\x03\x02\x02\x02\u1597\u1598\x03\x02\x02\x02" +
		"\u1598\u159F\x03\x02\x02\x02\u1599\u159B\x07\xDB\x02\x02\u159A\u159C\x05" +
		"\f\x07\x02\u159B\u159A\x03\x02\x02\x02\u159C\u159D\x03\x02\x02\x02\u159D" +
		"\u159B\x03\x02\x02\x02\u159D\u159E\x03\x02\x02\x02\u159E\u15A0\x03\x02" +
		"\x02\x02\u159F\u1599\x03\x02\x02\x02\u159F\u15A0\x03\x02\x02\x02\u15A0" +
		"\u15A7\x03\x02\x02\x02\u15A1\u15A3\x07\xD6\x02\x02\u15A2\u15A4\x05\f\x07" +
		"\x02\u15A3\u15A2\x03\x02\x02\x02\u15A4\u15A5\x03\x02\x02\x02\u15A5\u15A3" +
		"\x03\x02\x02\x02\u15A5\u15A6\x03\x02\x02\x02\u15A6\u15A8\x03\x02\x02\x02" +
		"\u15A7\u15A1\x03\x02\x02\x02\u15A7\u15A8\x03\x02\x02\x02\u15A8\u15A9\x03" +
		"\x02\x02\x02\u15A9\u15B3\x05\u0184\xC3\x02\u15AA\u15AC\x05\f\x07\x02\u15AB" +
		"\u15AA\x03\x02\x02\x02\u15AC\u15AD\x03\x02\x02\x02\u15AD\u15AB\x03\x02" +
		"\x02\x02\u15AD\u15AE\x03\x02\x02\x02\u15AE\u15AF\x03\x02\x02\x02\u15AF" +
		"\u15B0\x05\u0184\xC3\x02\u15B0\u15B2\x03\x02\x02\x02\u15B1\u15AB\x03\x02" +
		"\x02\x02\u15B2\u15B5\x03\x02\x02\x02\u15B3\u15B1\x03\x02\x02\x02\u15B3" +
		"\u15B4\x03\x02\x02\x02\u15B4\u0183\x03\x02\x02\x02\u15B5\u15B3\x03\x02" +
		"\x02\x02\u15B6\u15B7\x05\u023E\u0120\x02\u15B7\u0185\x03\x02\x02\x02\u15B8" +
		"\u15BA\x05\u0188\xC5\x02\u15B9\u15BB\x05\f\x07\x02\u15BA\u15B9\x03\x02" +
		"\x02\x02\u15BB\u15BC\x03\x02\x02\x02\u15BC\u15BA\x03\x02\x02\x02\u15BC" +
		"\u15BD\x03\x02\x02\x02\u15BD\u15BE\x03\x02\x02\x02\u15BE\u15BF\x07\u0174" +
		"\x02\x02\u15BF\u15E9\x03\x02\x02\x02\u15C0\u15C2\x05\u018A\xC6\x02\u15C1" +
		"\u15C3\x05\f\x07\x02\u15C2\u15C1\x03\x02\x02\x02\u15C3\u15C4\x03\x02\x02" +
		"\x02\u15C4\u15C2\x03\x02\x02\x02\u15C4\u15C5\x03\x02\x02\x02\u15C5\u15C6" +
		"\x03\x02\x02\x02\u15C6\u15C8\x07\u0175\x02\x02\u15C7\u15C9\x05\f\x07\x02" +
		"\u15C8\u15C7\x03\x02\x02\x02\u15C9\u15CA\x03\x02\x02\x02\u15CA\u15C8\x03" +
		"\x02\x02\x02\u15CA\u15CB\x03\x02\x02\x02\u15CB\u15CC\x03\x02\x02\x02\u15CC" +
		"\u15CE\x05\u018C\xC7\x02\u15CD\u15CF\x05\f\x07\x02\u15CE\u15CD\x03\x02" +
		"\x02\x02\u15CF\u15D0\x03\x02\x02\x02\u15D0\u15CE\x03\x02\x02\x02\u15D0" +
		"\u15D1\x03\x02\x02\x02\u15D1\u15D2\x03\x02\x02\x02\u15D2\u15D4\x07\u0174" +
		"\x02\x02\u15D3\u15D5\x05\f\x07\x02\u15D4\u15D3\x03\x02\x02\x02\u15D5\u15D6" +
		"\x03\x02\x02\x02\u15D6\u15D4\x03\x02\x02\x02\u15D6\u15D7\x03\x02\x02\x02" +
		"\u15D7\u15D8\x03\x02\x02\x02\u15D8\u15DA\x07s\x02\x02\u15D9\u15DB\x05" +
		"\f\x07\x02\u15DA\u15D9\x03\x02\x02\x02\u15DB\u15DC\x03\x02\x02\x02\u15DC" +
		"\u15DA\x03\x02\x02\x02\u15DC\u15DD\x03\x02\x02\x02\u15DD\u15E4\x03\x02" +
		"\x02\x02\u15DE\u15E0\x07\u0102\x02\x02\u15DF\u15E1\x05\f\x07\x02\u15E0" +
		"\u15DF\x03\x02\x02\x02\u15E1\u15E2\x03\x02\x02\x02\u15E2\u15E0\x03\x02" +
		"\x02\x02\u15E2\u15E3\x03\x02\x02\x02\u15E3\u15E5\x03\x02\x02\x02\u15E4" +
		"\u15DE\x03\x02\x02\x02\u15E4\u15E5\x03\x02\x02\x02\u15E5\u15E6\x03\x02" +
		"\x02\x02\u15E6\u15E7\x05\u01E8\xF5\x02\u15E7\u15E9\x03\x02\x02\x02\u15E8" +
		"\u15B8\x03\x02\x02\x02\u15E8\u15C0\x03\x02\x02\x02\u15E9\u0187\x03\x02" +
		"\x02\x02\u15EA\u15EB\x07\u01C2\x02\x02\u15EB\u0189\x03\x02\x02\x02\u15EC" +
		"\u15ED\x07\u01C2\x02\x02\u15ED\u018B\x03\x02\x02\x02\u15EE\u15EF\x07\u01C2" +
		"\x02\x02\u15EF\u018D\x03\x02\x02\x02\u15F0\u15FA\x05\u0190\xC9\x02\u15F1" +
		"\u15F3\x05\f\x07\x02\u15F2\u15F1\x03\x02\x02\x02\u15F3\u15F6\x03\x02\x02" +
		"\x02\u15F4\u15F2\x03\x02\x02\x02\u15F4\u15F5\x03\x02\x02\x02\u15F5\u15F7" +
		"\x03\x02\x02\x02\u15F6\u15F4\x03\x02\x02\x02\u15F7\u15F9\x05\u0190\xC9" +
		"\x02\u15F8\u15F4\x03\x02\x02\x02\u15F9\u15FC\x03\x02\x02\x02\u15FA\u15F8" +
		"\x03\x02\x02\x02\u15FA\u15FB\x03\x02\x02\x02\u15FB\u018F\x03\x02\x02\x02" +
		"\u15FC\u15FA\x03\x02\x02\x02\u15FD\u1605\x05\u0164\xB3\x02\u15FE\u1600" +
		"\x05\f\x07\x02\u15FF\u15FE\x03\x02\x02\x02\u1600\u1601\x03\x02\x02\x02" +
		"\u1601\u15FF\x03\x02\x02\x02\u1601\u1602\x03\x02\x02\x02\u1602\u1603\x03" +
		"\x02\x02\x02\u1603\u1604\x05\u01C8\xE5\x02\u1604\u1606\x03\x02\x02\x02" +
		"\u1605\u15FF\x03\x02\x02\x02\u1605\u1606\x03\x02\x02\x02\u1606\u1610\x03" +
		"\x02\x02\x02\u1607\u1609\x05\f\x07\x02\u1608\u1607\x03\x02\x02\x02\u1609" +
		"\u160A\x03\x02\x02\x02\u160A\u1608\x03\x02\x02\x02\u160A\u160B\x03\x02" +
		"\x02\x02\u160B\u160C\x03\x02\x02\x02\u160C\u160D\x05\u0192\xCA\x02\u160D" +
		"\u160F\x03\x02\x02\x02\u160E\u1608\x03\x02\x02\x02\u160F\u1612\x03\x02" +
		"\x02\x02\u1610\u160E\x03\x02\x02\x02\u1610\u1611\x03\x02\x02\x02\u1611" +
		"\u1613\x03\x02\x02\x02\u1612\u1610\x03\x02\x02\x02\u1613\u1614\x07\u01BE" +
		"\x02\x02\u1614\u0191\x03\x02\x02\x02\u1615\u1617\x07\xE4\x02\x02\u1616" +
		"\u1618\x05\f\x07\x02\u1617\u1616\x03\x02\x02\x02\u1618\u1619\x03\x02\x02" +
		"\x02\u1619\u1617\x03\x02\x02\x02\u1619\u161A\x03\x02\x02\x02\u161A\u1621" +
		"\x03\x02\x02\x02\u161B\u161D\x07\xFB\x02\x02\u161C\u161E\x05\f\x07\x02" +
		"\u161D\u161C\x03\x02\x02\x02\u161E\u161F\x03\x02\x02\x02\u161F\u161D\x03" +
		"\x02\x02\x02\u161F\u1620\x03\x02\x02\x02\u1620\u1622\x03\x02\x02\x02\u1621" +
		"\u161B\x03\x02\x02\x02\u1621\u1622\x03\x02\x02\x02\u1622\u1629\x03\x02" +
		"\x02\x02\u1623\u1625\x07\xD6\x02\x02\u1624\u1626\x05\f\x07\x02\u1625\u1624" +
		"\x03\x02\x02\x02\u1626\u1627\x03\x02\x02\x02\u1627\u1625\x03\x02\x02\x02" +
		"\u1627\u1628\x03\x02\x02\x02\u1628\u162A\x03\x02\x02\x02\u1629\u1623\x03" +
		"\x02\x02\x02\u1629\u162A\x03\x02\x02\x02\u162A\u162B\x03\x02\x02\x02\u162B" +
		"\u162C\x05\u01A8\xD5\x02\u162C\u16C4\x03\x02\x02\x02\u162D\u162F\x07\xF8" +
		"\x02\x02\u162E\u1630\x05\f\x07\x02\u162F\u162E\x03\x02\x02\x02\u1630\u1631" +
		"\x03\x02\x02\x02\u1631\u162F\x03\x02\x02\x02\u1631\u1632\x03\x02\x02\x02" +
		"\u1632\u1633\x03\x02\x02\x02\u1633\u1635\x07\xBF\x02\x02\u1634\u1636\x05" +
		"\f\x07\x02\u1635\u1634\x03\x02\x02\x02\u1636\u1637\x03\x02\x02\x02\u1637" +
		"\u1635\x03\x02\x02\x02\u1637\u1638\x03\x02\x02\x02\u1638\u163F\x03\x02" +
		"\x02\x02\u1639\u163B\x07\xD6\x02\x02\u163A\u163C\x05\f\x07\x02\u163B\u163A" +
		"\x03\x02\x02\x02\u163C\u163D\x03\x02\x02\x02\u163D\u163B\x03\x02\x02\x02" +
		"\u163D\u163E\x03\x02\x02\x02\u163E\u1640\x03\x02\x02\x02\u163F\u1639\x03" +
		"\x02\x02\x02\u163F\u1640\x03\x02\x02\x02\u1640\u1641\x03\x02\x02\x02\u1641" +
		"\u1642\x05\u01A6\xD4\x02\u1642\u16C4\x03\x02\x02\x02\u1643\u1645\x07\u0179" +
		"\x02\x02\u1644\u1646\x05\f\x07\x02\u1645\u1644\x03\x02\x02\x02\u1646\u1647" +
		"\x03\x02\x02\x02\u1647\u1645\x03\x02\x02\x02\u1647\u1648\x03\x02\x02\x02" +
		"\u1648\u164F\x03\x02\x02\x02\u1649\u164B\x07\xD6\x02\x02\u164A\u164C\x05" +
		"\f\x07\x02\u164B\u164A\x03\x02\x02\x02\u164C\u164D\x03\x02\x02\x02\u164D" +
		"\u164B\x03\x02\x02\x02\u164D\u164E\x03\x02\x02\x02\u164E\u1650\x03\x02" +
		"\x02\x02\u164F\u1649\x03\x02\x02\x02\u164F\u1650\x03\x02\x02\x02\u1650" +
		"\u1651\x03\x02\x02\x02\u1651\u1652\x05\u01A2\xD2\x02\u1652\u16C4\x03\x02" +
		"\x02\x02\u1653\u1655\x07\u0182\x02\x02\u1654\u1656\x05\f\x07\x02\u1655" +
		"\u1654\x03\x02\x02\x02\u1656\u1657\x03\x02\x02\x02\u1657\u1655\x03\x02" +
		"\x02\x02\u1657\u1658\x03\x02\x02\x02\u1658\u165F\x03\x02\x02\x02\u1659" +
		"\u165B\x07\xD6\x02\x02\u165A\u165C\x05\f\x07\x02\u165B\u165A\x03\x02\x02" +
		"\x02\u165C\u165D\x03\x02\x02\x02\u165D\u165B\x03\x02\x02\x02\u165D\u165E" +
		"\x03\x02\x02\x02\u165E\u1660\x03\x02\x02\x02\u165F\u1659\x03\x02\x02\x02" +
		"\u165F\u1660\x03\x02\x02\x02\u1660\u1662\x03\x02\x02\x02\u1661\u1653\x03" +
		"\x02\x02\x02\u1661\u1662\x03\x02\x02\x02\u1662\u1663\x03\x02\x02\x02\u1663" +
		"\u16C4\x07x\x02\x02\u1664\u1666\x07,\x02\x02\u1665\u1667\x05\f\x07\x02" +
		"\u1666\u1665\x03\x02\x02\x02\u1667\u1668\x03\x02\x02\x02\u1668\u1666\x03" +
		"\x02\x02\x02\u1668\u1669\x03\x02\x02\x02\u1669\u1670\x03\x02\x02\x02\u166A" +
		"\u166C\x07\u0189\x02\x02\u166B\u166D\x05\f\x07\x02\u166C\u166B\x03\x02" +
		"\x02\x02\u166D\u166E\x03\x02\x02\x02\u166E\u166C\x03\x02\x02\x02\u166E" +
		"\u166F\x03\x02\x02\x02\u166F\u1671\x03\x02\x02\x02\u1670\u166A\x03\x02" +
		"\x02\x02\u1670\u1671\x03\x02\x02\x02\u1671\u1672\x03\x02\x02\x02\u1672" +
		"\u1673\x07\u0191\x02\x02\u1673\u16C4\x03\x02\x02\x02\u1674\u1676\x07A" +
		"\x02\x02\u1675\u1677\x05\f\x07\x02\u1676\u1675\x03\x02\x02\x02\u1677\u1678" +
		"\x03\x02\x02\x02\u1678\u1676\x03\x02\x02\x02\u1678\u1679\x03\x02\x02\x02" +
		"\u1679\u1680\x03\x02\x02\x02\u167A\u167C\x07\xFB\x02\x02\u167B\u167D\x05" +
		"\f\x07\x02\u167C\u167B\x03\x02\x02\x02\u167D\u167E\x03\x02\x02\x02\u167E" +
		"\u167C\x03\x02\x02\x02\u167E\u167F\x03\x02\x02\x02\u167F\u1681\x03\x02" +
		"\x02\x02\u1680\u167A\x03\x02\x02\x02\u1680\u1681\x03\x02\x02\x02\u1681" +
		"\u1688\x03\x02\x02\x02\u1682\u1684\x07\xD6\x02\x02\u1683\u1685\x05\f\x07" +
		"\x02\u1684\u1683\x03\x02\x02\x02\u1685\u1686\x03\x02\x02\x02\u1686\u1684" +
		"\x03\x02\x02\x02\u1686\u1687\x03\x02\x02\x02\u1687\u1689\x03\x02\x02\x02" +
		"\u1688\u1682\x03\x02\x02\x02\u1688\u1689\x03\x02\x02\x02\u1689\u168A\x03" +
		"\x02\x02\x02\u168A\u168B\x05\u01A0\xD1\x02\u168B\u16C4\x03\x02\x02\x02" +
		"\u168C\u1694\x07\xBF\x02\x02\u168D\u168F\x05\f\x07\x02\u168E\u168D\x03" +
		"\x02\x02\x02\u168F\u1690\x03\x02\x02\x02\u1690\u168E\x03\x02\x02\x02\u1690" +
		"\u1691\x03\x02\x02\x02\u1691\u1692\x03\x02\x02\x02\u1692\u1693\x07\xCC" +
		"\x02\x02\u1693\u1695\x03\x02\x02\x02\u1694\u168E\x03\x02\x02\x02\u1694" +
		"\u1695\x03\x02\x02\x02\u1695\u16C4\x03\x02\x02\x02\u1696\u169E\t\x15\x02" +
		"\x02\u1697\u1699\x05\f\x07\x02\u1698\u1697\x03\x02\x02\x02\u1699\u169A" +
		"\x03\x02\x02\x02\u169A\u1698\x03\x02\x02\x02\u169A\u169B\x03\x02\x02\x02" +
		"\u169B\u169C\x03\x02\x02\x02\u169C\u169D\x07\u0140\x02\x02\u169D\u169F" +
		"\x03\x02\x02\x02\u169E\u1698\x03\x02\x02\x02\u169E\u169F\x03\x02\x02\x02" +
		"\u169F\u16C4\x03\x02\x02\x02\u16A0\u16C4\x05\u01C0\xE1\x02\u16A1\u16C4" +
		"\x05\u0194\xCB\x02\u16A2\u16A4\x07\u0155\x02\x02\u16A3\u16A5\x05\f\x07" +
		"\x02\u16A4\u16A3\x03\x02\x02\x02\u16A5\u16A6\x03\x02\x02\x02\u16A6\u16A4" +
		"\x03\x02\x02\x02\u16A6\u16A7\x03\x02\x02\x02\u16A7\u16AE\x03\x02\x02\x02" +
		"\u16A8\u16AA\x07\xD6\x02\x02\u16A9\u16AB\x05\f\x07\x02\u16AA\u16A9\x03" +
		"\x02\x02\x02\u16AB\u16AC\x03\x02\x02\x02\u16AC\u16AA\x03\x02\x02\x02\u16AC" +
		"\u16AD\x03\x02\x02\x02\u16AD\u16AF\x03\x02\x02\x02\u16AE\u16A8\x03\x02" +
		"\x02\x02\u16AE\u16AF\x03\x02\x02\x02\u16AF\u16B0\x03\x02\x02\x02\u16B0" +
		"\u16B1\x05\u019E\xD0\x02\u16B1\u16C4\x03\x02\x02\x02\u16B2\u16B4\x07\u0185" +
		"\x02\x02\u16B3\u16B5\x05\f\x07\x02\u16B4\u16B3\x03\x02\x02\x02\u16B5\u16B6" +
		"\x03\x02\x02\x02\u16B6\u16B4\x03\x02\x02\x02\u16B6\u16B7\x03\x02\x02\x02" +
		"\u16B7\u16BE\x03\x02\x02\x02\u16B8\u16BA\x07\xD6\x02\x02\u16B9\u16BB\x05" +
		"\f\x07\x02\u16BA\u16B9\x03\x02\x02\x02\u16BB\u16BC\x03\x02\x02\x02\u16BC" +
		"\u16BA\x03\x02\x02\x02\u16BC\u16BD\x03\x02\x02\x02\u16BD\u16BF\x03\x02" +
		"\x02\x02\u16BE\u16B8\x03\x02\x02\x02\u16BE\u16BF\x03\x02\x02\x02\u16BF" +
		"\u16C0\x03\x02\x02\x02\u16C0\u16C1\x05\u017A\xBE\x02\u16C1\u16C4\x03\x02" +
		"\x02\x02\u16C2\u16C4\x05\u0196\xCC\x02\u16C3\u1615\x03\x02\x02\x02\u16C3" +
		"\u162D\x03\x02\x02\x02\u16C3\u1643\x03\x02\x02\x02\u16C3\u1661\x03\x02" +
		"\x02\x02\u16C3\u1664\x03\x02\x02\x02\u16C3\u1674\x03\x02\x02\x02\u16C3" +
		"\u168C\x03\x02\x02\x02\u16C3\u1696\x03\x02\x02\x02\u16C3\u16A0\x03\x02" +
		"\x02\x02\u16C3\u16A1\x03\x02\x02\x02\u16C3\u16A2\x03\x02\x02\x02\u16C3" +
		"\u16B2\x03\x02\x02\x02\u16C3\u16C2\x03\x02\x02\x02\u16C4\u0193\x03\x02" +
		"\x02\x02\u16C5\u16CD\x07\u0150\x02\x02\u16C6\u16C8\x05\f\x07\x02\u16C7" +
		"\u16C6\x03\x02\x02\x02\u16C8\u16C9\x03\x02\x02\x02\u16C9\u16C7\x03\x02" +
		"\x02\x02\u16C9\u16CA\x03\x02\x02\x02\u16CA\u16CB\x03\x02\x02\x02\u16CB" +
		"\u16CC\x07\xD6\x02\x02\u16CC\u16CE\x03\x02\x02\x02\u16CD\u16C7\x03\x02" +
		"\x02\x02\u16CD\u16CE\x03\x02\x02\x02\u16CE\u16D0\x03\x02\x02\x02\u16CF" +
		"\u16D1\x05\f\x07\x02\u16D0\u16CF\x03\x02\x02\x02\u16D1\u16D2\x03\x02\x02" +
		"\x02\u16D2\u16D0\x03\x02\x02\x02\u16D2\u16D3\x03\x02\x02\x02\u16D3\u16D5" +
		"\x03\x02\x02\x02\u16D4\u16C5\x03\x02\x02\x02\u16D4\u16D5\x03\x02\x02\x02" +
		"\u16D5\u16D6\x03\x02\x02\x02\u16D6\u16E6\t\x17\x02\x02\u16D7\u16D9\x05" +
		"\f\x07\x02\u16D8\u16D7\x03\x02\x02\x02\u16D9\u16DA\x03\x02\x02\x02\u16DA" +
		"\u16D8\x03\x02\x02\x02\u16DA\u16DB\x03\x02\x02\x02\u16DB\u16DC\x03\x02" +
		"\x02\x02\u16DC\u16E4\x07\u014C\x02\x02\u16DD\u16DF\x05\f\x07\x02\u16DE" +
		"\u16DD\x03\x02\x02\x02\u16DF\u16E0\x03\x02\x02\x02\u16E0\u16DE\x03\x02" +
		"\x02\x02\u16E0\u16E1\x03\x02\x02\x02\u16E1\u16E2\x03\x02\x02\x02\u16E2" +
		"\u16E3\x079\x02\x02\u16E3\u16E5\x03\x02\x02\x02\u16E4\u16DE\x03\x02\x02" +
		"\x02\u16E4\u16E5\x03\x02\x02\x02\u16E5\u16E7\x03\x02\x02\x02\u16E6\u16D8" +
		"\x03\x02\x02\x02\u16E6\u16E7\x03\x02\x02\x02\u16E7\u0195\x03\x02\x02\x02" +
		"\u16E8\u16EA\x07\u0163\x02\x02\u16E9\u16EB\x05\f\x07\x02\u16EA\u16E9\x03" +
		"\x02\x02\x02\u16EB\u16EC\x03\x02\x02\x02\u16EC\u16EA\x03\x02\x02\x02\u16EC" +
		"\u16ED\x03\x02\x02\x02\u16ED\u16EE\x03\x02\x02\x02\u16EE\u16F8\x05\u019C" +
		"\xCF\x02\u16EF\u16F1\x05\f\x07\x02\u16F0\u16EF\x03\x02\x02\x02\u16F1\u16F2" +
		"\x03\x02\x02\x02\u16F2\u16F0\x03\x02\x02\x02\u16F2\u16F3\x03\x02\x02\x02" +
		"\u16F3\u16F4\x03\x02\x02\x02\u16F4\u16F5\x05\u019C\xCF\x02\u16F5\u16F7" +
		"\x03\x02\x02\x02\u16F6\u16F0\x03\x02\x02\x02\u16F7\u16FA\x03\x02\x02\x02" +
		"\u16F8\u16F6\x03\x02\x02\x02\u16F8\u16F9\x03\x02\x02\x02\u16F9\u1702\x03" +
		"\x02\x02\x02\u16FA\u16F8\x03\x02\x02\x02\u16FB\u16FD\x05\f\x07\x02\u16FC" +
		"\u16FB\x03\x02\x02\x02\u16FD\u16FE\x03\x02\x02\x02\u16FE\u16FC\x03\x02" +
		"\x02\x02\u16FE\u16FF\x03\x02\x02\x02\u16FF\u1700\x03\x02\x02\x02\u1700" +
		"\u1701\x07\u0181\x02\x02\u1701\u1703\x03\x02\x02\x02\u1702\u16FC\x03\x02" +
		"\x02\x02\u1702\u1703\x03\x02\x02\x02\u1703\u170D\x03\x02\x02\x02\u1704" +
		"\u1706\x05\f\x07\x02\u1705\u1704\x03\x02\x02\x02\u1706\u1707\x03\x02\x02" +
		"\x02\u1707\u1705\x03\x02\x02\x02\u1707\u1708\x03\x02\x02\x02\u1708\u1709" +
		"\x03\x02\x02\x02\u1709\u170A\x05\u019A\xCE\x02\u170A\u170C\x03\x02\x02" +
		"\x02\u170B\u1705\x03\x02\x02\x02\u170C\u170F\x03\x02\x02\x02\u170D\u170B" +
		"\x03\x02\x02\x02\u170D\u170E\x03\x02\x02\x02\u170E\u1711\x03\x02\x02\x02" +
		"\u170F\u170D\x03\x02\x02\x02\u1710\u16E8\x03\x02\x02\x02\u1711\u1712\x03" +
		"\x02\x02\x02\u1712\u1710\x03\x02\x02\x02\u1712\u1713\x03\x02\x02\x02\u1713" +
		"\u172A\x03\x02\x02\x02\u1714\u1716\x05\f\x07\x02\u1715\u1714\x03\x02\x02" +
		"\x02\u1716\u1719\x03\x02\x02\x02\u1717\u1715\x03\x02\x02\x02\u1717\u1718" +
		"\x03\x02\x02\x02\u1718\u171A\x03\x02\x02\x02\u1719\u1717\x03\x02\x02\x02" +
		"\u171A\u171C\x07\u0138\x02\x02\u171B\u171D\x05\f\x07\x02\u171C\u171B\x03" +
		"\x02\x02\x02\u171D\u171E\x03\x02\x02\x02\u171E\u171C\x03\x02\x02\x02\u171E" +
		"\u171F\x03\x02\x02\x02\u171F\u1726\x03\x02\x02\x02\u1720\u1722\x07\u0102" +
		"\x02\x02\u1721\u1723\x05\f\x07\x02\u1722\u1721\x03\x02\x02\x02\u1723\u1724" +
		"\x03\x02\x02\x02\u1724\u1722\x03\x02\x02\x02\u1724\u1725\x03\x02\x02\x02" +
		"\u1725\u1727\x03\x02\x02\x02\u1726\u1720\x03\x02\x02\x02\u1726\u1727\x03" +
		"\x02\x02\x02\u1727\u1728\x03\x02\x02\x02\u1728\u1729\x05\u0198\xCD\x02" +
		"\u1729\u172B\x03\x02\x02\x02\u172A\u1717\x03\x02\x02\x02\u172A\u172B\x03" +
		"\x02\x02\x02\u172B\u0197\x03\x02\x02\x02\u172C\u172D\t\x18\x02\x02\u172D" +
		"\u0199\x03\x02\x02\x02\u172E\u172F\x07\u01C4\x02\x02\u172F\u019B\x03\x02" +
		"\x02\x02\u1730\u1731\x07\u01C4\x02\x02\u1731\u019D\x03\x02\x02\x02\u1732" +
		"\u1733\x05\u023E\u0120\x02\u1733\u019F\x03\x02\x02\x02\u1734\u1735\x07" +
		"\u01C2\x02\x02\u1735\u01A1\x03\x02\x02\x02\u1736\u1738\x07\u0132\x02\x02" +
		"\u1737\u1739\x05\f\x07\x02\u1738\u1737\x03\x02\x02\x02\u1739\u173A\x03" +
		"\x02\x02\x02\u173A\u1738\x03\x02\x02\x02\u173A\u173B\x03\x02\x02\x02\u173B" +
		"\u173C\x03\x02\x02\x02\u173C\u173D\x07\xC0\x02\x02\u173D\u1781\x03\x02" +
		"\x02\x02\u173E\u1781\x07\u013F\x02\x02\u173F\u1741\x07\u010C\x02\x02\u1740" +
		"\u1742\x05\f\x07\x02\u1741\u1740\x03\x02\x02\x02\u1742\u1743\x03\x02\x02" +
		"\x02\u1743\u1741\x03\x02\x02\x02\u1743\u1744\x03\x02\x02\x02\u1744\u1745" +
		"\x03\x02\x02\x02\u1745\u1746\x07\xC0\x02\x02\u1746\u1781\x03\x02\x02\x02" +
		"\u1747\u1781\x07\u0111\x02\x02\u1748\u174A\x07Z\x02\x02\u1749\u174B\x05" +
		"\f\x07\x02\u174A\u1749\x03\x02\x02\x02\u174B\u174C\x03\x02\x02\x02\u174C" +
		"\u174A\x03\x02\x02\x02\u174C\u174D\x03\x02\x02\x02\u174D\u174E\x03\x02" +
		"\x02\x02\u174E\u174F\x07\xC0\x02\x02\u174F\u1752\x03\x02\x02\x02\u1750" +
		"\u1752\x078\x02\x02\u1751\u1748\x03\x02\x02\x02\u1751\u1750\x03\x02\x02" +
		"\x02\u1752\u1754\x03\x02\x02\x02\u1753\u1755\x05\f\x07\x02\u1754\u1753" +
		"\x03\x02\x02\x02\u1755\u1756\x03\x02\x02\x02\u1756\u1754\x03\x02\x02\x02" +
		"\u1756\u1757\x03\x02\x02\x02\u1757\u1758\x03\x02\x02\x02\u1758\u1759\x05" +
		"\u01A4\xD3\x02\u1759\u1781\x03\x02\x02\x02\u175A\u1781\x07v\x02\x02\u175B" +
		"\u1781\x07k\x02\x02\u175C\u175E\x07Z\x02\x02\u175D\u175F\x05\f\x07\x02" +
		"\u175E\u175D\x03\x02\x02\x02\u175F\u1760\x03\x02\x02\x02\u1760\u175E\x03" +
		"\x02\x02\x02\u1760\u1761\x03\x02\x02\x02\u1761\u1762\x03\x02\x02\x02\u1762" +
		"\u1763\x07\xB4\x02\x02\u1763\u1766\x03\x02\x02\x02\u1764\u1766\x077\x02" +
		"\x02\u1765\u175C\x03\x02\x02\x02\u1765\u1764\x03\x02\x02\x02\u1766\u1768" +
		"\x03\x02\x02\x02\u1767\u1769\x05\f\x07\x02\u1768\u1767\x03\x02\x02\x02" +
		"\u1769\u176A\x03\x02\x02\x02\u176A\u1768\x03\x02\x02\x02\u176A\u176B\x03" +
		"\x02\x02\x02\u176B\u176C\x03\x02\x02\x02\u176C\u176D\x05\u01A4\xD3\x02" +
		"\u176D\u1781\x03\x02\x02\x02\u176E\u1770\x07\u010C\x02\x02\u176F\u1771" +
		"\x05\f\x07\x02\u1770\u176F\x03\x02\x02\x02\u1771\u1772\x03\x02\x02\x02" +
		"\u1772\u1770\x03\x02\x02\x02\u1772\u1773\x03\x02\x02\x02\u1773\u1774\x03" +
		"\x02\x02\x02\u1774\u1775\x07\xB4\x02\x02\u1775\u1781\x03\x02\x02\x02\u1776" +
		"\u1781\x07\u0110\x02\x02\u1777\u1779\x07\u0132\x02\x02\u1778\u177A\x05" +
		"\f\x07\x02\u1779\u1778\x03\x02\x02\x02\u177A\u177B\x03\x02\x02\x02\u177B" +
		"\u1779\x03\x02\x02\x02\u177B\u177C\x03\x02\x02\x02\u177C\u177D\x03\x02" +
		"\x02\x02\u177D\u177E\x07\xB4\x02\x02\u177E\u1781\x03\x02\x02\x02\u177F" +
		"\u1781\x07\u013E\x02\x02\u1780\u1736\x03\x02\x02\x02\u1780\u173E\x03\x02" +
		"\x02\x02\u1780\u173F\x03\x02\x02\x02\u1780\u1747\x03\x02\x02\x02\u1780" +
		"\u1751\x03\x02\x02\x02\u1780\u175A\x03\x02\x02\x02\u1780\u175B\x03\x02" +
		"\x02\x02\u1780\u1765\x03\x02\x02\x02\u1780\u176E\x03\x02\x02\x02\u1780" +
		"\u1776\x03\x02\x02\x02\u1780\u1777\x03\x02\x02\x02\u1780\u177F\x03\x02" +
		"\x02\x02\u1781\u01A3\x03\x02\x02\x02\u1782\u1783\t\x18\x02\x02\u1783\u01A5" +
		"\x03\x02\x02\x02\u1784\u1796\x05\u01AA\xD6\x02\u1785\u1787\x07\u0114\x02" +
		"\x02\u1786\u1788\x05\f\x07\x02\u1787\u1786\x03\x02\x02\x02\u1788\u1789" +
		"\x03\x02\x02\x02\u1789\u1787\x03\x02\x02\x02\u1789\u178A\x03\x02\x02\x02" +
		"\u178A\u178B\x03\x02\x02\x02\u178B\u178C\x05\u01AA\xD6\x02\u178C\u1796" +
		"\x03\x02\x02\x02\u178D\u178F\x07\xF8\x02\x02\u178E\u1790\x05\f\x07\x02" +
		"\u178F\u178E\x03\x02\x02\x02\u1790\u1791\x03\x02\x02\x02\u1791\u178F\x03" +
		"\x02\x02\x02\u1791\u1792\x03\x02\x02\x02\u1792\u1793\x03\x02\x02\x02\u1793" +
		"\u1794\x07\u010C\x02\x02\u1794\u1796\x03\x02\x02\x02\u1795\u1784\x03\x02" +
		"\x02\x02\u1795\u1785\x03\x02\x02\x02\u1795\u178D\x03\x02\x02\x02\u1796" +
		"\u01A7\x03\x02\x02\x02\u1797\u17AD\x05\u01AA\xD6\x02\u1798\u179A\x05\f" +
		"\x07\x02\u1799\u1798\x03\x02\x02\x02\u179A\u179B\x03\x02\x02\x02\u179B" +
		"\u1799\x03\x02\x02\x02\u179B\u179C\x03\x02\x02\x02\u179C\u17A3\x03\x02" +
		"\x02\x02\u179D\u179F\x07\u0102\x02\x02\u179E\u17A0\x05\f\x07\x02\u179F" +
		"\u179E\x03\x02\x02\x02\u17A0\u17A1\x03\x02\x02\x02\u17A1\u179F\x03\x02" +
		"\x02\x02\u17A1\u17A2\x03\x02\x02\x02\u17A2\u17A4\x03\x02\x02\x02\u17A3" +
		"\u179D\x03\x02\x02\x02\u17A3\u17A4\x03\x02\x02\x02\u17A4\u17A5\x03\x02" +
		"\x02\x02\u17A5\u17A7\x07\xF8\x02\x02\u17A6\u17A8\x05\f\x07\x02\u17A7\u17A6" +
		"\x03\x02\x02\x02\u17A8\u17A9\x03\x02\x02\x02\u17A9\u17A7\x03\x02\x02\x02" +
		"\u17A9\u17AA\x03\x02\x02\x02\u17AA\u17AB\x03\x02\x02\x02\u17AB\u17AC\x07" +
		"\u010C\x02\x02\u17AC\u17AE\x03\x02\x02\x02\u17AD\u1799\x03\x02\x02\x02" +
		"\u17AD\u17AE\x03\x02\x02\x02\u17AE\u17B8\x03\x02\x02\x02\u17AF\u17B1\x07" +
		"\u0114\x02\x02\u17B0\u17B2\x05\f\x07\x02\u17B1\u17B0\x03\x02\x02\x02\u17B2" +
		"\u17B3\x03\x02\x02\x02\u17B3\u17B1\x03\x02\x02\x02\u17B3\u17B4\x03\x02" +
		"\x02\x02\u17B4\u17B5\x03\x02\x02\x02\u17B5\u17B6\x05\u01AA\xD6\x02\u17B6" +
		"\u17B8\x03\x02\x02\x02\u17B7\u1797\x03\x02\x02\x02\u17B7\u17AF\x03\x02" +
		"\x02\x02\u17B8\u01A9\x03\x02\x02\x02\u17B9\u17BA\x07\u01C2\x02\x02\u17BA" +
		"\u01AB\x03\x02\x02\x02\u17BB\u17BD\x07\xD6\x02\x02\u17BC\u17BE\x05\f\x07" +
		"\x02\u17BD\u17BC\x03\x02\x02\x02\u17BE\u17BF\x03\x02\x02\x02\u17BF\u17BD" +
		"\x03\x02\x02\x02\u17BF\u17C0\x03\x02\x02\x02\u17C0\u17C2\x03\x02\x02\x02" +
		"\u17C1\u17BB\x03\x02\x02\x02\u17C1\u17C2\x03\x02\x02\x02\u17C2\u17C3\x03" +
		"\x02\x02\x02\u17C3\u187A\x07\xBC\x02\x02\u17C4\u17C6\x07>\x02\x02\u17C5" +
		"\u17C7\x05\f\x07\x02\u17C6\u17C5\x03\x02\x02\x02\u17C7\u17C8\x03\x02\x02" +
		"\x02\u17C8\u17C6\x03\x02\x02\x02\u17C8\u17C9\x03\x02\x02\x02\u17C9\u17CA" +
		"\x03\x02\x02\x02\u17CA\u17CB\x05\u01BA\xDE\x02\u17CB\u187A\x03\x02\x02" +
		"\x02\u17CC\u17D4\x07Z\x02\x02\u17CD\u17CF\x05\f\x07\x02\u17CE\u17CD\x03" +
		"\x02\x02\x02\u17CF\u17D0\x03\x02\x02\x02\u17D0\u17CE\x03\x02\x02\x02\u17D0" +
		"\u17D1\x03\x02\x02\x02\u17D1\u17D2\x03\x02\x02\x02\u17D2\u17D3\x07\xD6" +
		"\x02\x02\u17D3\u17D5\x03\x02\x02\x02\u17D4\u17CE\x03\x02\x02\x02\u17D4" +
		"\u17D5\x03\x02\x02\x02\u17D5\u17E1\x03\x02\x02\x02\u17D6\u17DE\x07[\x02" +
		"\x02\u17D7\u17D9\x05\f\x07\x02\u17D8\u17D7\x03\x02\x02\x02\u17D9\u17DA" +
		"\x03\x02\x02\x02\u17DA\u17D8\x03\x02\x02\x02\u17DA\u17DB\x03\x02\x02\x02" +
		"\u17DB\u17DC\x03\x02\x02\x02\u17DC\u17DD\x07\x16\x02\x02\u17DD\u17DF\x03" +
		"\x02\x02\x02\u17DE\u17D8\x03\x02\x02\x02\u17DE\u17DF\x03\x02\x02\x02\u17DF" +
		"\u17E1\x03\x02\x02\x02\u17E0\u17CC\x03\x02\x02\x02\u17E0\u17D6\x03\x02" +
		"\x02\x02\u17E1\u17E3\x03\x02\x02\x02\u17E2\u17E4\x05\f\x07\x02\u17E3\u17E2" +
		"\x03\x02\x02\x02\u17E4\u17E5\x03\x02\x02\x02\u17E5\u17E3\x03\x02\x02\x02" +
		"\u17E5\u17E6\x03\x02\x02\x02\u17E6\u1801\x03\x02\x02\x02\u17E7\u17F1\x05" +
		"\u01B8\xDD\x02\u17E8\u17EA\x05\f\x07\x02\u17E9\u17E8\x03\x02\x02\x02\u17EA" +
		"\u17ED\x03\x02\x02\x02\u17EB\u17E9\x03\x02\x02\x02\u17EB\u17EC\x03\x02" +
		"\x02\x02\u17EC\u17EE\x03\x02\x02\x02\u17ED\u17EB\x03\x02\x02\x02\u17EE" +
		"\u17F0\x05\u01B8\xDD\x02\u17EF\u17EB\x03\x02\x02\x02\u17F0\u17F3\x03\x02" +
		"\x02\x02\u17F1\u17EF\x03\x02\x02\x02\u17F1\u17F2\x03\x02\x02\x02\u17F2" +
		"\u1802\x03\x02\x02\x02\u17F3\u17F1\x03\x02\x02\x02\u17F4\u17FE\x07\xAF" +
		"\x02\x02\u17F5\u17F7\x05\f\x07\x02\u17F6\u17F5\x03\x02\x02\x02\u17F7\u17FA" +
		"\x03\x02\x02\x02\u17F8\u17F6\x03\x02\x02\x02\u17F8\u17F9\x03\x02\x02\x02" +
		"\u17F9\u17FB\x03\x02\x02\x02\u17FA\u17F8\x03\x02\x02\x02\u17FB\u17FD\x05" +
		"\u01B8\xDD\x02\u17FC\u17F8\x03\x02\x02\x02\u17FD\u1800\x03\x02\x02\x02" +
		"\u17FE\u17FC\x03\x02\x02\x02\u17FE\u17FF\x03\x02\x02\x02\u17FF\u1802\x03" +
		"\x02\x02\x02\u1800\u17FE\x03\x02\x02\x02\u1801\u17E7\x03\x02\x02\x02\u1801" +
		"\u17F4\x03\x02\x02\x02\u1802\u187A\x03\x02\x02\x02\u1803\u1805\x07\u010C" +
		"\x02\x02\u1804\u1806\x05\f\x07\x02\u1805\u1804\x03\x02\x02\x02\u1806\u1807" +
		"\x03\x02\x02\x02\u1807\u1805\x03\x02\x02\x02\u1807\u1808\x03\x02\x02\x02" +
		"\u1808\u1825\x03\x02\x02\x02\u1809\u180B\x07\xE1\x02\x02\u180A\u180C\x05" +
		"\f\x07\x02\u180B\u180A\x03\x02\x02\x02\u180C\u180D\x03\x02\x02\x02\u180D" +
		"\u180B\x03\x02\x02\x02\u180D\u180E\x03\x02\x02\x02\u180E\u1815\x03\x02" +
		"\x02\x02\u180F\u1811\x07\xD6\x02\x02\u1810\u1812\x05\f\x07\x02\u1811\u1810" +
		"\x03\x02\x02\x02\u1812\u1813\x03\x02\x02\x02\u1813\u1811\x03\x02\x02\x02" +
		"\u1813\u1814\x03\x02\x02\x02\u1814\u1816\x03\x02\x02\x02\u1815\u180F\x03" +
		"\x02\x02\x02\u1815\u1816\x03\x02\x02\x02\u1816\u1826\x03\x02\x02\x02\u1817" +
		"\u1819\x07\xE2\x02\x02\u1818\u181A\x05\f\x07\x02\u1819\u1818\x03\x02\x02" +
		"\x02\u181A\u181B\x03\x02\x02\x02\u181B\u1819\x03\x02\x02\x02\u181B\u181C" +
		"\x03\x02\x02\x02\u181C\u1823\x03\x02\x02\x02\u181D\u181F\x07\x16\x02\x02" +
		"\u181E\u1820\x05\f\x07\x02\u181F\u181E\x03\x02\x02\x02\u1820\u1821\x03" +
		"\x02\x02\x02\u1821\u181F\x03\x02\x02\x02\u1821\u1822\x03\x02\x02\x02\u1822" +
		"\u1824\x03\x02\x02\x02\u1823\u181D\x03\x02\x02\x02\u1823\u1824\x03\x02" +
		"\x02\x02\u1824\u1826\x03\x02\x02\x02\u1825\u1809\x03\x02\x02\x02\u1825" +
		"\u1817\x03\x02\x02\x02\u1825\u1826\x03\x02\x02\x02\u1826\u1827\x03\x02" +
		"\x02\x02\u1827\u182F\x05\u01B6\xDC\x02\u1828\u182A\x05\f\x07\x02\u1829" +
		"\u1828\x03\x02\x02\x02\u182A\u182B\x03\x02\x02\x02\u182B\u1829\x03\x02" +
		"\x02\x02\u182B\u182C\x03\x02\x02\x02\u182C\u182D\x03\x02\x02\x02\u182D" +
		"\u182E\t\x19\x02\x02\u182E\u1830\x03\x02\x02\x02\u182F\u1829\x03\x02\x02" +
		"\x02\u182F\u1830\x03\x02\x02\x02\u1830\u183E\x03\x02\x02\x02\u1831\u1833" +
		"\x05\f\x07\x02\u1832\u1831\x03\x02\x02\x02\u1833\u1834\x03\x02\x02\x02" +
		"\u1834\u1832\x03\x02\x02\x02\u1834\u1835\x03\x02\x02\x02\u1835\u1836\x03" +
		"\x02\x02\x02\u1836\u1838\x07\xC0\x02\x02\u1837\u1839\x05\f\x07\x02\u1838" +
		"\u1837\x03\x02\x02\x02\u1839\u183A\x03\x02\x02\x02\u183A\u1838\x03";
	private static readonly _serializedATNSegment13: string =
		"\x02\x02\x02\u183A\u183B\x03\x02\x02\x02\u183B\u183C\x03\x02\x02\x02\u183C" +
		"\u183D\x05\u01B4\xDB\x02\u183D\u183F\x03\x02\x02\x02\u183E\u1832\x03\x02" +
		"\x02\x02\u183E\u183F\x03\x02\x02\x02\u183F\u1853\x03\x02\x02\x02\u1840" +
		"\u1842\x05\f\x07\x02\u1841\u1840\x03\x02\x02\x02\u1842\u1843\x03\x02\x02" +
		"\x02\u1843\u1841\x03\x02\x02\x02\u1843\u1844\x03\x02\x02\x02\u1844\u1845" +
		"\x03\x02\x02\x02\u1845\u1847\x07\xB0\x02\x02\u1846\u1848\x05\f\x07\x02" +
		"\u1847\u1846\x03\x02\x02\x02\u1848\u1849\x03\x02\x02\x02\u1849\u1847\x03" +
		"\x02\x02\x02\u1849\u184A\x03\x02\x02\x02\u184A\u184B\x03\x02\x02\x02\u184B" +
		"\u184D\x07v\x02\x02\u184C\u184E\x05\f\x07\x02\u184D\u184C\x03\x02\x02" +
		"\x02\u184E\u184F\x03\x02\x02\x02\u184F\u184D\x03\x02\x02\x02\u184F\u1850" +
		"\x03\x02\x02\x02\u1850\u1851\x03\x02\x02\x02\u1851\u1852\x05\u01B2\xDA" +
		"\x02\u1852\u1854\x03\x02\x02\x02\u1853\u1841\x03\x02\x02\x02\u1853\u1854" +
		"\x03\x02\x02\x02\u1854\u1868\x03\x02\x02\x02\u1855\u1857\x05\f\x07\x02" +
		"\u1856\u1855\x03\x02\x02\x02\u1857\u1858\x03\x02\x02\x02\u1858\u1856\x03" +
		"\x02\x02\x02\u1858\u1859\x03\x02\x02\x02\u1859\u185A\x03\x02\x02\x02\u185A" +
		"\u185C\x07\xDD\x02\x02\u185B\u185D\x05\f\x07\x02\u185C\u185B\x03\x02\x02" +
		"\x02\u185D\u185E\x03\x02\x02\x02\u185E\u185C\x03\x02\x02\x02\u185E\u185F" +
		"\x03\x02\x02\x02\u185F\u1860\x03\x02\x02\x02\u1860\u1862\x07v\x02\x02" +
		"\u1861\u1863\x05\f\x07\x02\u1862\u1861\x03\x02\x02\x02\u1863\u1864\x03" +
		"\x02\x02\x02\u1864\u1862\x03\x02\x02\x02\u1864\u1865\x03\x02\x02\x02\u1865" +
		"\u1866\x03\x02\x02\x02\u1866\u1867\x05\u01B0\xD9\x02\u1867\u1869\x03\x02" +
		"\x02\x02\u1868\u1856\x03\x02\x02\x02\u1868\u1869\x03\x02\x02\x02\u1869" +
		"\u1877\x03\x02\x02\x02\u186A\u186C\x05\f\x07\x02\u186B\u186A\x03\x02\x02" +
		"\x02\u186C\u186D\x03\x02\x02\x02\u186D\u186B\x03\x02\x02\x02\u186D\u186E" +
		"\x03\x02\x02\x02\u186E\u186F\x03\x02\x02\x02\u186F\u1871\x07\xB4\x02\x02" +
		"\u1870\u1872\x05\f\x07\x02\u1871\u1870\x03\x02\x02\x02\u1872\u1873\x03" +
		"\x02\x02\x02\u1873\u1871\x03\x02\x02\x02\u1873\u1874\x03\x02\x02\x02\u1874" +
		"\u1875\x03\x02\x02\x02\u1875\u1876\x05\u01AE\xD8\x02\u1876\u1878\x03\x02" +
		"\x02\x02\u1877\u186B\x03\x02\x02\x02\u1877\u1878\x03\x02\x02\x02\u1878" +
		"\u187A\x03\x02\x02\x02\u1879\u17C1\x03\x02\x02\x02\u1879\u17C4\x03\x02" +
		"\x02\x02\u1879\u17E0\x03\x02\x02\x02\u1879\u1803\x03\x02\x02\x02\u187A" +
		"\u01AD\x03\x02\x02\x02\u187B\u187C\x07\u01C2\x02\x02\u187C\u01AF\x03\x02" +
		"\x02\x02\u187D\u187E\x07\u01C2\x02\x02\u187E\u01B1\x03\x02\x02\x02\u187F" +
		"\u1880\x07\u01C2\x02\x02\u1880\u01B3\x03\x02\x02\x02\u1881\u1882\x07\u01C2" +
		"\x02\x02\u1882\u01B5\x03\x02\x02\x02\u1883\u1884\x07\u01C2\x02\x02\u1884" +
		"\u01B7\x03\x02\x02\x02\u1885\u1886\x05\u023E\u0120\x02\u1886\u01B9\x03" +
		"\x02\x02\x02\u1887\u1888\x07\u01C1\x02\x02\u1888\u01BB\x03\x02\x02\x02" +
		"\u1889\u1891\x07\u0182\x02\x02\u188A\u188C\x05\f\x07\x02\u188B\u188A\x03" +
		"\x02\x02\x02\u188C\u188D\x03\x02\x02\x02\u188D\u188B\x03\x02\x02\x02\u188D" +
		"\u188E\x03\x02\x02\x02\u188E\u188F\x03\x02\x02\x02\u188F\u1890\x07\xD6" +
		"\x02\x02\u1890\u1892\x03\x02\x02\x02\u1891\u188B\x03\x02\x02\x02\u1891" +
		"\u1892\x03\x02\x02\x02\u1892\u1894\x03\x02\x02\x02\u1893\u1895\x05\f\x07" +
		"\x02\u1894\u1893\x03\x02\x02\x02\u1895\u1896\x03\x02\x02\x02\u1896\u1894" +
		"\x03\x02\x02\x02\u1896\u1897\x03\x02\x02\x02\u1897\u1899\x03\x02\x02\x02" +
		"\u1898\u1889\x03\x02\x02\x02\u1898\u1899\x03\x02\x02\x02\u1899\u189A\x03" +
		"\x02\x02\x02\u189A\u189B\x05\u01BE\xE0\x02\u189B\u01BD\x03\x02\x02\x02" +
		"\u189C\u18DC\x07\'\x02\x02\u189D\u18A5\x07(\x02\x02\u189E\u18A0\x05\f" +
		"\x07\x02\u189F\u189E\x03\x02\x02\x02\u18A0\u18A1\x03\x02\x02\x02\u18A1" +
		"\u189F\x03\x02\x02\x02\u18A1\u18A2\x03\x02\x02\x02\u18A2\u18A3\x03\x02" +
		"\x02\x02\u18A3\u18A4\t\x1A\x02\x02\u18A4\u18A6\x03\x02\x02\x02\u18A5\u189F" +
		"\x03\x02\x02\x02\u18A5\u18A6\x03\x02\x02\x02\u18A6\u18DC\x03\x02\x02\x02" +
		"\u18A7\u18AF\x07+\x02\x02\u18A8\u18AA\x05\f\x07\x02\u18A9\u18A8\x03\x02" +
		"\x02\x02\u18AA\u18AB\x03\x02\x02\x02\u18AB\u18A9\x03\x02\x02\x02\u18AB" +
		"\u18AC\x03\x02\x02\x02\u18AC\u18AD\x03\x02\x02\x02\u18AD\u18AE\t\x1A\x02" +
		"\x02\u18AE\u18B0\x03\x02\x02\x02\u18AF\u18A9\x03\x02\x02\x02\u18AF\u18B0" +
		"\x03\x02\x02\x02\u18B0\u18DC\x03\x02\x02\x02\u18B1\u18B9\x07*\x02\x02" +
		"\u18B2\u18B4\x05\f\x07\x02\u18B3\u18B2\x03\x02\x02\x02\u18B4\u18B5\x03" +
		"\x02\x02\x02\u18B5\u18B3\x03\x02\x02\x02\u18B5\u18B6\x03\x02\x02\x02\u18B6" +
		"\u18B7\x03\x02\x02\x02\u18B7\u18B8\t\x1A\x02\x02\u18B8\u18BA\x03\x02\x02" +
		"\x02\u18B9\u18B3\x03\x02\x02\x02\u18B9\u18BA\x03\x02\x02\x02\u18BA\u18DC" +
		"\x03\x02\x02\x02\u18BB\u18C3\x07)\x02\x02\u18BC\u18BE\x05\f\x07\x02\u18BD" +
		"\u18BC\x03\x02\x02\x02\u18BE\u18BF\x03\x02\x02\x02\u18BF\u18BD\x03\x02" +
		"\x02\x02\u18BF\u18C0\x03\x02\x02\x02\u18C0\u18C1\x03\x02\x02\x02\u18C1" +
		"\u18C2\t\x1A\x02\x02\u18C2\u18C4\x03\x02\x02\x02\u18C3\u18BD\x03\x02\x02" +
		"\x02\u18C3\u18C4\x03\x02\x02\x02\u18C4\u18DC\x03\x02\x02\x02\u18C5\u18DC" +
		"\x07E\x02\x02\u18C6\u18DC\x07F\x02\x02\u18C7\u18DC\x07G\x02\x02\u18C8" +
		"\u18DC\x07H\x02\x02\u18C9\u18DC\x07I\x02\x02\u18CA\u18DC\x07J\x02\x02" +
		"\u18CB\u18DC\x07K\x02\x02\u18CC\u18DC\x07D\x02\x02\u18CD\u18DC\x07M\x02" +
		"\x02\u18CE\u18DC\x07N\x02\x02\u18CF\u18DC\x07O\x02\x02\u18D0\u18DC\x07" +
		"P\x02\x02\u18D1\u18DC\x07Q\x02\x02\u18D2\u18DC\x07R\x02\x02\u18D3\u18DC" +
		"\x07x\x02\x02\u18D4\u18DC\x07\xB3\x02\x02\u18D5\u18DC\x07\xB2\x02\x02" +
		"\u18D6\u18DC\x07\xB1\x02\x02\u18D7\u18DC\x07\xCA\x02\x02\u18D8\u18DC\x07" +
		"\u010A\x02\x02\u18D9\u18DC\x07\u0115\x02\x02\u18DA\u18DC\x07\u0116\x02" +
		"\x02\u18DB\u189C\x03\x02\x02\x02\u18DB\u189D\x03\x02\x02\x02\u18DB\u18A7" +
		"\x03\x02\x02\x02\u18DB\u18B1\x03\x02\x02\x02\u18DB\u18BB\x03\x02\x02\x02" +
		"\u18DB\u18C5\x03\x02\x02\x02\u18DB\u18C6\x03\x02\x02\x02\u18DB\u18C7\x03" +
		"\x02\x02\x02\u18DB\u18C8\x03\x02\x02\x02\u18DB\u18C9\x03\x02\x02\x02\u18DB" +
		"\u18CA\x03\x02\x02\x02\u18DB\u18CB\x03\x02\x02\x02\u18DB\u18CC\x03\x02" +
		"\x02\x02\u18DB\u18CD\x03\x02\x02\x02\u18DB\u18CE\x03\x02\x02\x02\u18DB" +
		"\u18CF\x03\x02\x02\x02\u18DB\u18D0\x03\x02\x02\x02\u18DB\u18D1\x03\x02" +
		"\x02\x02\u18DB\u18D2\x03\x02\x02\x02\u18DB\u18D3\x03\x02\x02\x02\u18DB" +
		"\u18D4\x03\x02\x02\x02\u18DB\u18D5\x03\x02\x02\x02\u18DB\u18D6\x03\x02" +
		"\x02\x02\u18DB\u18D7\x03\x02\x02\x02\u18DB\u18D8\x03\x02\x02\x02\u18DB" +
		"\u18D9\x03\x02\x02\x02\u18DB\u18DA\x03\x02\x02\x02\u18DC\u01BF\x03\x02" +
		"\x02\x02\u18DD\u18DF\t\x1B\x02\x02\u18DE\u18E0\x05\f\x07\x02\u18DF\u18DE" +
		"\x03\x02\x02\x02\u18E0\u18E1\x03\x02\x02\x02\u18E1\u18DF\x03\x02\x02\x02" +
		"\u18E1\u18E2\x03\x02\x02\x02\u18E2\u18E9\x03\x02\x02\x02\u18E3\u18E5\x07" +
		"\xD6\x02\x02\u18E4\u18E6\x05\f\x07\x02\u18E5\u18E4\x03\x02\x02\x02\u18E6" +
		"\u18E7\x03\x02\x02\x02\u18E7\u18E5\x03\x02\x02\x02\u18E7\u18E8\x03\x02" +
		"\x02\x02\u18E8\u18EA\x03\x02\x02\x02\u18E9\u18E3\x03\x02\x02\x02\u18E9" +
		"\u18EA\x03\x02\x02\x02\u18EA\u18EB\x03\x02\x02\x02\u18EB\u18EC\x05\u01C2" +
		"\xE2\x02\u18EC\u01C1\x03\x02\x02\x02\u18ED\u18EF\x05\u01C4\xE3\x02\u18EE" +
		"\u18ED\x03\x02\x02\x02\u18EF\u18F0\x03\x02\x02\x02\u18F0\u18EE\x03\x02" +
		"\x02\x02\u18F0\u18F1\x03\x02\x02\x02\u18F1\u01C3\x03\x02\x02\x02\u18F2" +
		"\u18F3\t\x1C\x02\x02\u18F3\u01C5\x03\x02\x02\x02\u18F4\u18F5\x07\u01C4" +
		"\x02\x02\u18F5\u01C7\x03\x02\x02\x02\u18F6\u18F7\x07\u01C4\x02\x02\u18F7" +
		"\u01C9\x03\x02\x02\x02\u18F8\u18FB\x05\u01E4\xF3\x02\u18F9\u18FB\x05\u01DA" +
		"\xEE\x02\u18FA\u18F8\x03\x02\x02\x02\u18FA\u18F9\x03\x02\x02\x02\u18FB" +
		"\u01CB\x03\x02\x02\x02\u18FC\u1904\x07\u0132\x02\x02\u18FD\u18FF\x05\f" +
		"\x07\x02\u18FE\u18FD\x03\x02\x02\x02\u18FF\u1900\x03\x02\x02\x02\u1900" +
		"\u18FE\x03\x02\x02\x02\u1900\u1901\x03\x02\x02\x02\u1901\u1902\x03\x02" +
		"\x02\x02\u1902\u1903\x07\xD6\x02\x02\u1903\u1905\x03\x02\x02\x02\u1904" +
		"\u18FE\x03\x02\x02\x02\u1904\u1905\x03\x02\x02\x02\u1905\u1911\x03\x02" +
		"\x02\x02\u1906\u190E\x07\u0134\x02\x02\u1907\u1909\x05\f\x07\x02\u1908" +
		"\u1907\x03\x02\x02\x02\u1909\u190A\x03\x02\x02\x02\u190A\u1908\x03\x02" +
		"\x02\x02\u190A\u190B\x03\x02\x02\x02\u190B\u190C\x03\x02\x02\x02\u190C" +
		"\u190D\x07\x16\x02\x02\u190D\u190F\x03\x02\x02\x02\u190E\u1908\x03\x02" +
		"\x02\x02\u190E\u190F\x03\x02\x02\x02\u190F\u1911\x03\x02\x02\x02\u1910" +
		"\u18FC\x03\x02\x02\x02\u1910\u1906\x03\x02\x02\x02\u1911\u1913\x03\x02" +
		"\x02\x02\u1912\u1914\x05\f\x07\x02\u1913\u1912\x03\x02\x02\x02\u1914\u1915" +
		"\x03\x02\x02\x02\u1915\u1913\x03\x02\x02\x02\u1915\u1916\x03\x02\x02\x02" +
		"\u1916\u1917\x03\x02\x02\x02\u1917\u1921\x05\u01CE\xE8\x02\u1918\u191A" +
		"\x05\f\x07\x02\u1919\u1918\x03\x02\x02\x02\u191A\u191D\x03\x02\x02\x02" +
		"\u191B\u1919\x03\x02\x02\x02\u191B\u191C\x03\x02\x02\x02\u191C\u191E\x03" +
		"\x02\x02\x02\u191D\u191B\x03\x02\x02\x02\u191E\u1920\x05\u01CE\xE8\x02" +
		"\u191F\u191B\x03\x02\x02\x02\u1920\u1923\x03\x02\x02\x02\u1921\u191F\x03" +
		"\x02\x02\x02\u1921\u1922\x03\x02\x02\x02\u1922\u01CD\x03\x02\x02\x02\u1923" +
		"\u1921\x03\x02\x02\x02\u1924\u1925\x07\u01C4\x02\x02\u1925\u01CF\x03\x02" +
		"\x02\x02\u1926\u1928\x07\xE3\x02\x02\u1927\u1929\x05\f\x07\x02\u1928\u1927" +
		"\x03\x02\x02\x02\u1929\u192A\x03\x02\x02\x02\u192A\u1928\x03\x02\x02\x02" +
		"\u192A\u192B\x03\x02\x02\x02\u192B\u1932\x03\x02\x02\x02\u192C\u192E\x07" +
		"\xD6\x02\x02\u192D\u192F\x05\f\x07\x02\u192E\u192D\x03\x02\x02\x02\u192F" +
		"\u1930\x03\x02\x02\x02\u1930\u192E\x03\x02\x02\x02\u1930\u1931\x03\x02" +
		"\x02\x02\u1931\u1933\x03\x02\x02\x02\u1932\u192C\x03\x02\x02\x02\u1932" +
		"\u1933\x03\x02\x02\x02\u1933\u1934\x03\x02\x02\x02\u1934\u193C\x05\u01D8" +
		"\xED\x02\u1935\u1937\x05\f\x07\x02\u1936\u1935\x03\x02\x02\x02\u1937\u1938" +
		"\x03\x02\x02\x02\u1938\u1936\x03\x02\x02\x02\u1938\u1939\x03\x02\x02\x02" +
		"\u1939\u193A\x03\x02\x02\x02\u193A\u193B\x07\xE5\x02\x02\u193B\u193D\x03" +
		"\x02\x02\x02\u193C\u1936\x03\x02\x02\x02\u193C\u193D\x03\x02\x02\x02\u193D" +
		"\u195B\x03\x02\x02\x02\u193E\u1940\x05\f\x07\x02\u193F\u193E\x03\x02\x02" +
		"\x02\u1940\u1941\x03\x02\x02\x02\u1941\u193F\x03\x02\x02\x02\u1941\u1942" +
		"\x03\x02\x02\x02\u1942\u1949\x03\x02\x02\x02\u1943\u1945\x07\u018B\x02" +
		"\x02\u1944\u1946\x05\f\x07\x02\u1945\u1944\x03\x02\x02\x02\u1946\u1947" +
		"\x03\x02\x02\x02\u1947\u1945\x03\x02\x02\x02\u1947\u1948\x03\x02\x02\x02" +
		"\u1948\u194A\x03\x02\x02\x02\u1949\u1943\x03\x02\x02\x02\u1949\u194A\x03" +
		"\x02\x02\x02\u194A\u194B\x03\x02\x02\x02\u194B\u194D\x07\xB4\x02\x02\u194C" +
		"\u194E\x05\f\x07\x02\u194D\u194C\x03\x02\x02\x02\u194E\u194F\x03\x02\x02" +
		"\x02\u194F\u194D\x03\x02\x02\x02\u194F\u1950\x03\x02\x02\x02\u1950\u1957" +
		"\x03\x02\x02\x02\u1951\u1953\x07\x1F\x02\x02\u1952\u1954\x05\f\x07\x02" +
		"\u1953\u1952\x03\x02\x02\x02\u1954\u1955\x03\x02\x02\x02\u1955\u1953\x03" +
		"\x02\x02\x02\u1955\u1956\x03\x02\x02\x02\u1956\u1958\x03\x02\x02\x02\u1957" +
		"\u1951\x03\x02\x02\x02\u1957\u1958\x03\x02\x02\x02\u1958\u1959\x03\x02" +
		"\x02\x02\u1959\u195A\x05\u01D6\xEC\x02\u195A\u195C\x03\x02\x02\x02\u195B" +
		"\u193F\x03\x02\x02\x02\u195B\u195C\x03\x02\x02\x02\u195C\u197A\x03\x02" +
		"\x02\x02\u195D\u195F\x05\f\x07\x02\u195E\u195D\x03\x02\x02\x02\u195F\u1960" +
		"\x03\x02\x02\x02\u1960\u195E\x03\x02\x02\x02\u1960\u1961\x03\x02\x02\x02" +
		"\u1961\u1968\x03\x02\x02\x02\u1962\u1964\x07\xE5\x02\x02\u1963\u1965\x05" +
		"\f\x07\x02\u1964\u1963\x03\x02\x02\x02\u1965\u1966\x03\x02\x02\x02\u1966" +
		"\u1964\x03\x02\x02\x02\u1966\u1967\x03\x02\x02\x02\u1967\u1969\x03\x02" +
		"\x02\x02\u1968\u1962\x03\x02\x02\x02\u1968\u1969\x03\x02\x02\x02\u1969" +
		"\u1970\x03\x02\x02\x02\u196A\u196C\x07\x1F\x02\x02\u196B\u196D\x05\f\x07" +
		"\x02\u196C\u196B\x03\x02\x02\x02\u196D\u196E\x03\x02\x02\x02\u196E\u196C" +
		"\x03\x02\x02\x02\u196E\u196F\x03\x02\x02\x02\u196F\u1971\x03\x02\x02\x02" +
		"\u1970\u196A\x03\x02\x02\x02\u1970\u1971\x03\x02\x02\x02\u1971\u1972\x03" +
		"\x02\x02\x02\u1972\u1974\x07\u0176\x02\x02\u1973\u1975\x05\f\x07\x02\u1974" +
		"\u1973\x03\x02\x02\x02\u1975\u1976\x03\x02\x02\x02\u1976\u1974\x03\x02" +
		"\x02\x02\u1976\u1977\x03\x02\x02\x02\u1977\u1978\x03\x02\x02\x02\u1978" +
		"\u1979\x05\u01D4\xEB\x02\u1979\u197B\x03\x02\x02\x02\u197A\u195E\x03\x02" +
		"\x02\x02\u197A\u197B\x03\x02\x02\x02\u197B\u1999\x03\x02\x02\x02\u197C" +
		"\u197E\x05\f\x07\x02\u197D\u197C\x03\x02\x02\x02\u197E\u197F\x03\x02\x02" +
		"\x02\u197F\u197D\x03\x02\x02\x02\u197F\u1980\x03\x02\x02\x02\u1980\u1987" +
		"\x03\x02\x02\x02\u1981\u1983\x07\xE5\x02\x02\u1982\u1984\x05\f\x07\x02" +
		"\u1983\u1982\x03\x02\x02\x02\u1984\u1985\x03\x02\x02\x02\u1985\u1983\x03" +
		"\x02\x02\x02\u1985\u1986\x03\x02\x02\x02\u1986\u1988\x03\x02\x02\x02\u1987" +
		"\u1981\x03\x02\x02\x02\u1987\u1988\x03\x02\x02\x02\u1988\u198F\x03\x02" +
		"\x02\x02\u1989\u198B\x07\x1F\x02\x02\u198A\u198C\x05\f\x07\x02\u198B\u198A" +
		"\x03\x02\x02\x02\u198C\u198D\x03\x02\x02\x02\u198D\u198B\x03\x02\x02\x02" +
		"\u198D\u198E\x03\x02\x02\x02\u198E\u1990\x03\x02\x02\x02\u198F\u1989\x03" +
		"\x02\x02\x02\u198F\u1990\x03\x02\x02\x02\u1990\u1991\x03\x02\x02\x02\u1991" +
		"\u1993\x071\x02\x02\u1992\u1994\x05\f\x07\x02\u1993\u1992\x03\x02\x02" +
		"\x02\u1994\u1995\x03\x02\x02\x02\u1995\u1993\x03\x02\x02\x02\u1995\u1996" +
		"\x03\x02\x02\x02\u1996\u1997\x03\x02\x02\x02\u1997\u1998\x05\u01D2\xEA" +
		"\x02\u1998\u199A\x03\x02\x02\x02\u1999\u197D\x03\x02\x02\x02\u1999\u199A" +
		"\x03\x02\x02\x02\u199A\u01D1\x03\x02\x02\x02\u199B\u199E\x07\u01C2\x02" +
		"\x02\u199C\u199E\x05\u023E\u0120\x02\u199D\u199B\x03\x02\x02\x02\u199D" +
		"\u199C\x03\x02\x02\x02\u199E\u01D3\x03\x02\x02\x02\u199F\u19A2\x07\u01C2" +
		"\x02\x02\u19A0\u19A2\x05\u023E\u0120\x02\u19A1\u199F\x03\x02\x02\x02\u19A1" +
		"\u19A0\x03\x02\x02\x02\u19A2\u01D5\x03\x02\x02\x02\u19A3\u19A6\x07\u01C2" +
		"\x02\x02\u19A4\u19A6\x05\u023E\u0120\x02\u19A5\u19A3\x03\x02\x02\x02\u19A5" +
		"\u19A4\x03\x02\x02\x02\u19A6\u01D7\x03\x02\x02\x02\u19A7\u19AA\x07\u01C2" +
		"\x02\x02\u19A8\u19AA\x05\u023E\u0120\x02\u19A9\u19A7\x03\x02\x02\x02\u19A9" +
		"\u19A8\x03\x02\x02\x02\u19AA\u01D9\x03\x02\x02\x02\u19AB\u19AD\x07e\x02" +
		"\x02\u19AC\u19AE\x05\f\x07\x02\u19AD\u19AC\x03\x02\x02\x02\u19AE\u19AF" +
		"\x03\x02\x02\x02\u19AF\u19AD\x03\x02\x02\x02\u19AF\u19B0\x03\x02\x02\x02" +
		"\u19B0\u19C5\x03\x02\x02\x02\u19B1\u19B9\x07\u0127\x02\x02\u19B2\u19B4" +
		"\x05\f\x07\x02\u19B3\u19B2\x03\x02\x02\x02\u19B4\u19B5\x03\x02\x02\x02" +
		"\u19B5\u19B3\x03\x02\x02\x02\u19B5\u19B6\x03\x02\x02\x02\u19B6\u19B7\x03" +
		"\x02\x02\x02\u19B7\u19B8\x07\x16\x02\x02\u19B8\u19BA\x03\x02\x02\x02\u19B9" +
		"\u19B3\x03\x02\x02\x02\u19B9\u19BA\x03\x02\x02\x02\u19BA\u19C6\x03\x02" +
		"\x02\x02\u19BB\u19C3\x07\u0126\x02\x02\u19BC\u19BE\x05\f\x07\x02\u19BD" +
		"\u19BC\x03\x02\x02\x02\u19BE\u19BF\x03\x02\x02\x02\u19BF\u19BD\x03\x02" +
		"\x02\x02\u19BF\u19C0\x03\x02\x02\x02\u19C0\u19C1\x03\x02\x02\x02\u19C1" +
		"\u19C2\x07\xD6\x02\x02\u19C2\u19C4\x03\x02\x02\x02\u19C3\u19BD\x03\x02" +
		"\x02\x02\u19C3\u19C4\x03\x02\x02\x02\u19C4\u19C6\x03\x02\x02\x02\u19C5" +
		"\u19B1\x03\x02\x02\x02\u19C5\u19BB\x03\x02\x02\x02\u19C6\u19C7\x03\x02" +
		"\x02\x02\u19C7\u19D1\x05\u01DC\xEF\x02\u19C8\u19CA\x05\f\x07\x02\u19C9" +
		"\u19C8\x03\x02\x02\x02\u19CA\u19CB\x03\x02\x02\x02\u19CB\u19C9\x03\x02" +
		"\x02\x02\u19CB\u19CC\x03\x02\x02\x02\u19CC\u19CD\x03\x02\x02\x02\u19CD" +
		"\u19CE\x05\u01DC\xEF\x02\u19CE\u19D0\x03\x02\x02\x02\u19CF\u19C9\x03\x02" +
		"\x02\x02\u19D0\u19D3\x03\x02\x02\x02\u19D1\u19CF\x03\x02\x02\x02\u19D1" +
		"\u19D2\x03\x02\x02\x02\u19D2\u01DB\x03\x02\x02\x02\u19D3\u19D1\x03\x02" +
		"\x02\x02\u19D4\u19D5\x07\u01C4\x02\x02\u19D5\u01DD\x03\x02\x02\x02\u19D6" +
		"\u19D8\x07\u0185\x02\x02\u19D7\u19D9\x05\f\x07\x02\u19D8\u19D7\x03\x02" +
		"\x02\x02\u19D9\u19DA\x03\x02\x02\x02\u19DA\u19D8\x03\x02\x02\x02\u19DA" +
		"\u19DB\x03\x02\x02\x02\u19DB\u19DC\x03\x02\x02\x02\u19DC\u19DE\x07\xFF" +
		"\x02\x02\u19DD\u19DF\x05\f\x07\x02\u19DE\u19DD\x03\x02\x02\x02\u19DF\u19E0" +
		"\x03\x02\x02\x02\u19E0\u19DE\x03\x02\x02\x02\u19E0\u19E1\x03\x02\x02\x02" +
		"\u19E1\u19E2\x03\x02\x02\x02\u19E2\u19E4\t\x1D\x02\x02\u19E3\u19E5\x05" +
		"\f\x07\x02\u19E4\u19E3\x03\x02\x02\x02\u19E5\u19E6\x03\x02\x02\x02\u19E6" +
		"\u19E4\x03\x02\x02\x02\u19E6\u19E7\x03\x02\x02\x02\u19E7\u19EE\x03\x02" +
		"\x02\x02\u19E8\u19EA\x07\xD6\x02\x02\u19E9\u19EB\x05\f\x07\x02\u19EA\u19E9" +
		"\x03\x02\x02\x02\u19EB\u19EC\x03\x02\x02\x02\u19EC\u19EA\x03\x02\x02\x02" +
		"\u19EC\u19ED\x03\x02\x02\x02\u19ED\u19EF\x03\x02\x02\x02\u19EE\u19E8\x03" +
		"\x02\x02\x02\u19EE\u19EF\x03\x02\x02\x02\u19EF\u19F0\x03\x02\x02\x02\u19F0" +
		"\u19F1\x05\u01E0\xF1\x02\u19F1\u01DF\x03\x02\x02\x02\u19F2\u19F5\x07\u01C1" +
		"\x02\x02\u19F3\u19F5\x05\u023E\u0120\x02\u19F4\u19F2\x03\x02\x02\x02\u19F4" +
		"\u19F3\x03\x02\x02\x02\u19F5\u01E1\x03\x02\x02\x02\u19F6\u19F8\x07\xDC" +
		"\x02\x02\u19F7\u19F9\x05\f\x07\x02\u19F8\u19F7\x03\x02\x02\x02\u19F9\u19FA" +
		"\x03\x02\x02\x02\u19FA\u19F8\x03\x02\x02\x02\u19FA\u19FB\x03\x02\x02\x02" +
		"\u19FB\u1A10\x03\x02\x02\x02\u19FC\u1A04\x07\u0127\x02\x02\u19FD\u19FF" +
		"\x05\f\x07\x02\u19FE\u19FD\x03\x02\x02\x02\u19FF\u1A00\x03\x02\x02\x02" +
		"\u1A00\u19FE\x03\x02\x02\x02\u1A00\u1A01\x03\x02\x02\x02\u1A01\u1A02\x03" +
		"\x02\x02\x02\u1A02\u1A03\x07\x16\x02\x02\u1A03\u1A05\x03\x02\x02\x02\u1A04" +
		"\u19FE\x03\x02\x02\x02\u1A04\u1A05\x03\x02\x02\x02\u1A05\u1A11\x03\x02" +
		"\x02\x02\u1A06\u1A0E\x07\u0126\x02\x02\u1A07\u1A09\x05\f\x07\x02\u1A08" +
		"\u1A07\x03\x02\x02\x02\u1A09\u1A0A\x03\x02\x02\x02\u1A0A\u1A08\x03\x02" +
		"\x02\x02\u1A0A\u1A0B\x03\x02\x02\x02\u1A0B\u1A0C\x03\x02\x02\x02\u1A0C" +
		"\u1A0D\x07\xD6\x02\x02\u1A0D\u1A0F\x03\x02\x02\x02\u1A0E\u1A08\x03\x02" +
		"\x02\x02\u1A0E\u1A0F\x03\x02\x02\x02\u1A0F\u1A11\x03\x02\x02\x02\u1A10" +
		"\u19FC\x03\x02\x02\x02\u1A10\u1A06\x03\x02\x02\x02\u1A11\u1A13\x03\x02" +
		"\x02\x02\u1A12\u1A14\x05\f\x07\x02\u1A13\u1A12\x03\x02\x02\x02\u1A14\u1A15" +
		"\x03\x02\x02\x02\u1A15\u1A13\x03\x02\x02\x02\u1A15\u1A16\x03\x02\x02\x02" +
		"\u1A16\u1A17\x03\x02\x02\x02\u1A17\u1A18\t\x1E\x02\x02\u1A18\u01E3\x03" +
		"\x02\x02\x02\u1A19\u1A1B\x07\u0126\x02\x02\u1A1A\u1A1C\x05\f\x07\x02\u1A1B" +
		"\u1A1A\x03\x02\x02\x02\u1A1C\u1A1D\x03\x02\x02\x02\u1A1D\u1A1B\x03\x02" +
		"\x02\x02\u1A1D\u1A1E\x03\x02\x02\x02\u1A1E\u1A1F\x03\x02\x02\x02\u1A1F" +
		"\u1A20\x05\u01E6\xF4\x02\u1A20\u01E5\x03\x02\x02\x02\u1A21\u1A23\x07U" +
		"\x02\x02\u1A22\u1A24\x05\f\x07\x02\u1A23\u1A22\x03\x02\x02\x02\u1A24\u1A25" +
		"\x03\x02\x02\x02\u1A25\u1A23\x03\x02\x02\x02\u1A25\u1A26\x03\x02\x02\x02" +
		"\u1A26\u1A28\x03\x02\x02\x02\u1A27\u1A21\x03\x02\x02\x02\u1A27\u1A28\x03" +
		"\x02\x02\x02\u1A28\u1A35\x03\x02\x02\x02\u1A29\u1A2B\x05\u01EA\xF6\x02" +
		"\u1A2A\u1A2C\x05\f\x07\x02\u1A2B\u1A2A\x03\x02\x02\x02\u1A2C\u1A2D\x03" +
		"\x02\x02\x02\u1A2D\u1A2B\x03\x02\x02\x02\u1A2D\u1A2E\x03\x02\x02\x02\u1A2E" +
		"\u1A2F\x03\x02\x02\x02\u1A2F\u1A31\x07\u0175\x02\x02\u1A30\u1A32\x05\f" +
		"\x07\x02\u1A31\u1A30\x03\x02\x02\x02\u1A32\u1A33\x03\x02\x02\x02\u1A33" +
		"\u1A31\x03\x02\x02\x02\u1A33\u1A34\x03\x02\x02\x02\u1A34\u1A36\x03\x02" +
		"\x02\x02\u1A35\u1A29\x03\x02\x02\x02\u1A35\u1A36\x03\x02\x02\x02\u1A36" +
		"\u1A37\x03\x02\x02\x02\u1A37\u1A3B\x05\u01EC\xF7\x02\u1A38\u1A3A\x05\f" +
		"\x07\x02\u1A39\u1A38\x03\x02\x02\x02\u1A3A\u1A3D\x03\x02\x02\x02\u1A3B" +
		"\u1A39\x03\x02\x02\x02\u1A3B\u1A3C\x03\x02\x02\x02\u1A3C\u1A45\x03\x02" +
		"\x02\x02\u1A3D\u1A3B\x03\x02\x02\x02\u1A3E\u1A42\x07:\x02\x02\u1A3F\u1A41" +
		"\x05\f\x07\x02\u1A40\u1A3F\x03\x02\x02\x02\u1A41\u1A44\x03\x02\x02\x02" +
		"\u1A42\u1A40\x03\x02\x02\x02\u1A42\u1A43\x03\x02\x02\x02\u1A43\u1A46\x03" +
		"\x02\x02\x02\u1A44\u1A42\x03\x02\x02\x02\u1A45\u1A3E\x03\x02\x02\x02\u1A45" +
		"\u1A46\x03\x02\x02\x02\u1A46\u1A9D\x03\x02\x02\x02\u1A47\u1A49\x07\xD6" +
		"\x02\x02\u1A48\u1A4A\x05\f\x07\x02\u1A49\u1A48\x03\x02\x02\x02\u1A4A\u1A4B" +
		"\x03\x02\x02\x02\u1A4B\u1A49\x03\x02\x02\x02\u1A4B\u1A4C\x03\x02\x02\x02" +
		"\u1A4C\u1A4E\x03\x02\x02\x02\u1A4D\u1A47\x03\x02\x02\x02\u1A4D\u1A4E\x03" +
		"\x02\x02\x02\u1A4E\u1A4F\x03\x02\x02\x02\u1A4F\u1A51\x07\u0187\x02\x02" +
		"\u1A50\u1A52\x05\f\x07\x02\u1A51\u1A50\x03\x02\x02\x02\u1A52\u1A53\x03" +
		"\x02\x02\x02\u1A53\u1A51\x03\x02\x02\x02\u1A53\u1A54\x03\x02\x02\x02\u1A54" +
		"\u1A5B\x03\x02\x02\x02\u1A55\u1A57\x07\xC9\x02\x02\u1A56\u1A58\x05\f\x07" +
		"\x02\u1A57\u1A56\x03\x02\x02\x02\u1A58\u1A59\x03\x02\x02\x02\u1A59\u1A57" +
		"\x03\x02\x02\x02\u1A59\u1A5A\x03\x02\x02\x02\u1A5A\u1A5C\x03\x02\x02\x02" +
		"\u1A5B\u1A55\x03\x02\x02\x02\u1A5B\u1A5C\x03\x02\x02\x02\u1A5C\u1A64\x03" +
		"\x02\x02\x02\u1A5D\u1A61\x07\u0152\x02\x02\u1A5E\u1A60\x05\f\x07\x02\u1A5F" +
		"\u1A5E\x03\x02\x02\x02\u1A60\u1A63\x03\x02\x02\x02\u1A61\u1A5F\x03\x02" +
		"\x02\x02\u1A61\u1A62\x03\x02\x02\x02\u1A62\u1A65\x03\x02\x02\x02\u1A63" +
		"\u1A61\x03\x02\x02\x02\u1A64\u1A5D\x03\x02\x02\x02\u1A64\u1A65\x03\x02" +
		"\x02\x02\u1A65\u1A6F\x03\x02\x02\x02\u1A66\u1A68\x07\xB7\x02\x02\u1A67" +
		"\u1A69\x05\f\x07\x02\u1A68\u1A67\x03\x02\x02\x02\u1A69\u1A6A\x03\x02\x02" +
		"\x02\u1A6A\u1A68\x03\x02\x02\x02\u1A6A\u1A6B\x03\x02\x02\x02\u1A6B\u1A6D" +
		"\x03\x02\x02\x02\u1A6C\u1A66\x03\x02\x02\x02\u1A6C\u1A6D\x03\x02\x02\x02" +
		"\u1A6D\u1A6E\x03\x02\x02\x02\u1A6E\u1A70\x05\u01EA\xF6\x02\u1A6F\u1A6C" +
		"\x03\x02\x02\x02\u1A6F\u1A70\x03\x02\x02\x02\u1A70\u1A79\x03\x02\x02\x02" +
		"\u1A71\u1A73\x07\u0175\x02\x02\u1A72\u1A74\x05\f\x07\x02\u1A73\u1A72\x03" +
		"\x02\x02\x02\u1A74\u1A75\x03\x02\x02\x02\u1A75\u1A73\x03\x02\x02\x02\u1A75" +
		"\u1A76\x03\x02\x02\x02\u1A76\u1A77\x03\x02\x02\x02\u1A77\u1A78\x05\u01EC" +
		"\xF7\x02\u1A78\u1A7A\x03\x02\x02\x02\u1A79\u1A71\x03\x02\x02\x02\u1A79" +
		"\u1A7A\x03\x02\x02\x02\u1A7A\u1A88\x03\x02\x02\x02\u1A7B\u1A7D\x05\f\x07" +
		"\x02\u1A7C\u1A7B\x03\x02\x02\x02\u1A7D\u1A80\x03\x02\x02\x02\u1A7E\u1A7C" +
		"\x03\x02\x02\x02\u1A7E\u1A7F\x03\x02\x02\x02\u1A7F\u1A81\x03\x02\x02\x02" +
		"\u1A80\u1A7E\x03\x02\x02\x02\u1A81\u1A85\x07:\x02\x02\u1A82\u1A84\x05" +
		"\f\x07\x02\u1A83\u1A82\x03\x02\x02\x02\u1A84\u1A87\x03\x02\x02\x02\u1A85" +
		"\u1A83\x03\x02\x02\x02\u1A85\u1A86\x03\x02\x02\x02\u1A86\u1A89\x03\x02" +
		"\x02\x02\u1A87\u1A85\x03\x02\x02\x02\u1A88\u1A7E\x03\x02\x02\x02\u1A88" +
		"\u1A89\x03\x02\x02\x02\u1A89\u1A9A\x03\x02\x02\x02\u1A8A\u1A8C\x07s\x02" +
		"\x02\u1A8B\u1A8D\x05\f\x07\x02\u1A8C\u1A8B\x03\x02\x02\x02\u1A8D\u1A8E" +
		"\x03\x02\x02\x02\u1A8E\u1A8C\x03\x02\x02\x02\u1A8E\u1A8F\x03\x02\x02\x02" +
		"\u1A8F\u1A96\x03\x02\x02\x02\u1A90\u1A92\x07\u0102\x02\x02\u1A91\u1A93" +
		"\x05\f\x07\x02\u1A92\u1A91\x03\x02\x02\x02\u1A93\u1A94\x03\x02\x02\x02" +
		"\u1A94\u1A92\x03\x02\x02\x02\u1A94\u1A95\x03\x02\x02\x02\u1A95\u1A97\x03" +
		"\x02\x02\x02\u1A96\u1A90\x03\x02\x02\x02\u1A96\u1A97\x03\x02\x02\x02\u1A97" +
		"\u1A98\x03\x02\x02\x02\u1A98\u1A99\x05\u01E8\xF5\x02\u1A99\u1A9B\x03\x02" +
		"\x02\x02\u1A9A\u1A8A\x03\x02\x02\x02\u1A9A\u1A9B\x03\x02\x02\x02\u1A9B" +
		"\u1A9D\x03\x02\x02\x02\u1A9C\u1A27\x03\x02\x02\x02\u1A9C\u1A4D\x03\x02" +
		"\x02\x02\u1A9D\u01E7\x03\x02\x02\x02\u1A9E\u1A9F\x05\u023E\u0120\x02\u1A9F" +
		"\u01E9\x03\x02\x02\x02\u1AA0\u1AA1\x07\u01C2\x02\x02\u1AA1\u01EB\x03\x02" +
		"\x02\x02\u1AA2\u1AA3\x07\u01C2\x02\x02\u1AA3\u01ED\x03\x02\x02\x02\u1AA4" +
		"\u1AAE\x05\u0164\xB3\x02\u1AA5\u1AA7\x05\f\x07\x02\u1AA6\u1AA5\x03\x02" +
		"\x02\x02\u1AA7\u1AA8\x03\x02\x02\x02\u1AA8\u1AA6\x03\x02\x02\x02\u1AA8" +
		"\u1AA9\x03\x02\x02\x02\u1AA9\u1AAC\x03\x02\x02\x02\u1AAA\u1AAD\x05\u01F0" +
		"\xF9\x02\u1AAB\u1AAD\x07\xAD\x02\x02\u1AAC\u1AAA\x03\x02\x02\x02\u1AAC" +
		"\u1AAB\x03\x02\x02\x02\u1AAD\u1AAF\x03\x02\x02\x02\u1AAE\u1AA6\x03\x02" +
		"\x02\x02\u1AAE\u1AAF\x03\x02\x02\x02\u1AAF\u1AB9\x03\x02\x02\x02\u1AB0" +
		"\u1AB2\x05\f\x07\x02\u1AB1\u1AB0\x03\x02\x02\x02\u1AB2\u1AB3\x03\x02\x02" +
		"\x02\u1AB3\u1AB1\x03\x02\x02\x02\u1AB3\u1AB4\x03\x02\x02\x02\u1AB4\u1AB5" +
		"\x03\x02\x02\x02\u1AB5\u1AB6\x05\u01F2\xFA\x02\u1AB6\u1AB8\x03\x02\x02" +
		"\x02\u1AB7\u1AB1\x03\x02\x02\x02\u1AB8\u1ABB\x03\x02\x02\x02\u1AB9\u1AB7" +
		"\x03\x02\x02\x02\u1AB9\u1ABA\x03\x02\x02\x02\u1ABA\u1ABC\x03\x02\x02\x02" +
		"\u1ABB\u1AB9\x03\x02\x02\x02\u1ABC\u1ABD\x07\u01BE\x02\x02\u1ABD\u01EF" +
		"\x03\x02\x02\x02\u1ABE\u1ABF\x07\u01C4\x02\x02\u1ABF\u01F1\x03\x02\x02" +
		"\x02\u1AC0\u1AC2\x07,\x02\x02\u1AC1\u1AC3\x05\f\x07\x02\u1AC2\u1AC1\x03" +
		"\x02\x02\x02\u1AC3\u1AC4\x03\x02\x02\x02\u1AC4\u1AC2\x03\x02\x02\x02\u1AC4" +
		"\u1AC5\x03\x02\x02\x02\u1AC5\u1AC6\x03\x02\x02\x02\u1AC6\u1AC7\t\x11\x02" +
		"\x02\u1AC7\u1B8B\x03\x02\x02\x02\u1AC8\u1ACA\x07\xB6\x02\x02\u1AC9\u1ACB" +
		"\x05\f\x07\x02\u1ACA\u1AC9\x03\x02\x02\x02\u1ACB\u1ACC\x03\x02\x02\x02" +
		"\u1ACC\u1ACA\x03\x02\x02\x02\u1ACC\u1ACD\x03\x02\x02\x02\u1ACD\u1AD4\x03" +
		"\x02\x02\x02\u1ACE\u1AD0\x07\xD6\x02\x02\u1ACF\u1AD1\x05\f\x07\x02\u1AD0" +
		"\u1ACF\x03\x02\x02\x02\u1AD1\u1AD2\x03\x02\x02\x02\u1AD2\u1AD0\x03\x02" +
		"\x02\x02\u1AD2\u1AD3\x03\x02\x02\x02\u1AD3\u1AD5\x03\x02\x02\x02\u1AD4" +
		"\u1ACE\x03\x02\x02\x02\u1AD4\u1AD5\x03\x02\x02\x02\u1AD5\u1AD6\x03\x02" +
		"\x02\x02\u1AD6\u1AD7\x05\u01FE\u0100\x02\u1AD7\u1B8B\x03\x02\x02\x02\u1AD8" +
		"\u1ADA\x07$\x02\x02\u1AD9\u1ADB\x05\f\x07\x02\u1ADA\u1AD9\x03\x02\x02" +
		"\x02\u1ADB\u1ADC\x03\x02\x02\x02\u1ADC\u1ADA\x03\x02\x02\x02\u1ADC\u1ADD" +
		"\x03\x02\x02\x02\u1ADD\u1AE4\x03\x02\x02\x02\u1ADE\u1AE0\x07\xD6\x02";
	private static readonly _serializedATNSegment14: string =
		"\x02\u1ADF\u1AE1\x05\f\x07\x02\u1AE0\u1ADF\x03\x02\x02\x02\u1AE1\u1AE2" +
		"\x03\x02\x02\x02\u1AE2\u1AE0\x03\x02\x02\x02\u1AE2\u1AE3\x03\x02\x02\x02" +
		"\u1AE3\u1AE5\x03\x02\x02\x02\u1AE4\u1ADE\x03\x02\x02\x02\u1AE4\u1AE5\x03" +
		"\x02\x02\x02\u1AE5\u1AE6\x03\x02\x02\x02\u1AE6\u1AE7\x05\u01FE\u0100\x02" +
		"\u1AE7\u1B8B\x03\x02\x02\x02\u1AE8\u1B8B\x07!\x02\x02\u1AE9\u1B8B\x07" +
		"\u0148\x02\x02\u1AEA\u1B8B\x07\u0135\x02\x02\u1AEB\u1AED\x07\u0182\x02" +
		"\x02\u1AEC\u1AEE\x05\f\x07\x02\u1AED\u1AEC\x03\x02\x02\x02\u1AEE\u1AEF" +
		"\x03\x02\x02\x02\u1AEF\u1AED\x03\x02\x02\x02\u1AEF\u1AF0\x03\x02\x02\x02" +
		"\u1AF0\u1AF7\x03\x02\x02\x02\u1AF1\u1AF3\x07\xD6\x02\x02\u1AF2\u1AF4\x05" +
		"\f\x07\x02\u1AF3\u1AF2\x03\x02\x02\x02\u1AF4\u1AF5\x03\x02\x02\x02\u1AF5" +
		"\u1AF3\x03\x02\x02\x02\u1AF5\u1AF6\x03\x02\x02\x02\u1AF6\u1AF8\x03\x02" +
		"\x02\x02\u1AF7\u1AF1\x03\x02\x02\x02\u1AF7\u1AF8\x03\x02\x02\x02\u1AF8" +
		"\u1AFA\x03\x02\x02\x02\u1AF9\u1AEB\x03\x02\x02\x02\u1AF9\u1AFA\x03\x02" +
		"\x02\x02\u1AFA\u1AFB\x03\x02\x02\x02\u1AFB\u1B8B\x07x\x02\x02\u1AFC\u1B8B" +
		"\x05\u0194\xCB\x02\u1AFD\u1B8B\x07\xB8\x02\x02\u1AFE\u1B8B\x07&\x02\x02" +
		"\u1AFF\u1B8B\x07-\x02\x02\u1B00\u1B02\x07\x9D\x02\x02\u1B01\u1B03\x05" +
		"\f\x07\x02\u1B02\u1B01\x03\x02\x02\x02\u1B03\u1B04\x03\x02\x02\x02\u1B04" +
		"\u1B02\x03\x02\x02\x02\u1B04\u1B05\x03\x02\x02\x02\u1B05\u1B06\x03\x02" +
		"\x02\x02\u1B06\u1B07\t\x1F\x02\x02\u1B07\u1B8B\x03\x02\x02\x02\u1B08\u1B8B" +
		"\x07\xC1\x02\x02\u1B09\u1B8B\x07\xEA\x02\x02\u1B0A\u1B8B\x07\u013B\x02" +
		"\x02\u1B0B\u1B8B\x07\u017A\x02\x02\u1B0C\u1B0E\x07\xE4\x02\x02\u1B0D\u1B0F" +
		"\x05\f\x07\x02\u1B0E\u1B0D\x03\x02\x02\x02\u1B0F\u1B10\x03\x02\x02\x02" +
		"\u1B10\u1B0E\x03\x02\x02\x02\u1B10\u1B11\x03\x02\x02\x02\u1B11\u1B18\x03" +
		"\x02\x02\x02\u1B12\u1B14\x07\xFB\x02\x02\u1B13\u1B15\x05\f\x07\x02\u1B14" +
		"\u1B13\x03\x02\x02\x02\u1B15\u1B16\x03\x02\x02\x02\u1B16\u1B14\x03\x02" +
		"\x02\x02\u1B16\u1B17\x03\x02\x02\x02\u1B17\u1B19\x03\x02\x02\x02\u1B18" +
		"\u1B12\x03\x02\x02\x02\u1B18\u1B19\x03\x02\x02\x02\u1B19\u1B20\x03\x02" +
		"\x02\x02\u1B1A\u1B1C\x07\xD6\x02\x02\u1B1B\u1B1D\x05\f\x07\x02\u1B1C\u1B1B" +
		"\x03\x02\x02\x02\u1B1D\u1B1E\x03\x02\x02\x02\u1B1E\u1B1C\x03\x02\x02\x02" +
		"\u1B1E\u1B1F\x03\x02\x02\x02\u1B1F\u1B21\x03\x02\x02\x02\u1B20\u1B1A\x03" +
		"\x02\x02\x02\u1B20\u1B21\x03\x02\x02\x02\u1B21\u1B28\x03\x02\x02\x02\u1B22" +
		"\u1B24\x07\u0114\x02\x02\u1B23\u1B25\x05\f\x07\x02\u1B24\u1B23\x03\x02" +
		"\x02\x02\u1B25\u1B26\x03\x02\x02\x02\u1B26\u1B24\x03\x02\x02\x02\u1B26" +
		"\u1B27\x03\x02\x02\x02\u1B27\u1B29\x03\x02\x02\x02\u1B28\u1B22\x03\x02" +
		"\x02\x02\u1B28\u1B29\x03\x02\x02\x02\u1B29\u1B2A\x03\x02\x02\x02\u1B2A" +
		"\u1B2B\x05\u01FC\xFF\x02\u1B2B\u1B8B\x03\x02\x02\x02\u1B2C\u1B2E\x07A" +
		"\x02\x02\u1B2D\u1B2F\x05\f\x07\x02\u1B2E\u1B2D\x03\x02\x02\x02\u1B2F\u1B30" +
		"\x03\x02\x02\x02\u1B30\u1B2E\x03\x02\x02\x02\u1B30\u1B31\x03\x02\x02\x02" +
		"\u1B31\u1B38\x03\x02\x02\x02\u1B32\u1B34\x07\xFB\x02\x02\u1B33\u1B35\x05" +
		"\f\x07\x02\u1B34\u1B33\x03\x02\x02\x02\u1B35\u1B36\x03\x02\x02\x02\u1B36" +
		"\u1B34\x03\x02\x02\x02\u1B36\u1B37\x03\x02\x02\x02\u1B37\u1B39\x03\x02" +
		"\x02\x02\u1B38\u1B32\x03\x02\x02\x02\u1B38\u1B39\x03\x02\x02\x02\u1B39" +
		"\u1B40\x03\x02\x02\x02\u1B3A\u1B3C\x07\xD6\x02\x02\u1B3B\u1B3D\x05\f\x07" +
		"\x02\u1B3C\u1B3B\x03\x02\x02\x02\u1B3D\u1B3E\x03\x02\x02\x02\u1B3E\u1B3C" +
		"\x03\x02\x02\x02\u1B3E\u1B3F\x03\x02\x02\x02\u1B3F\u1B41\x03\x02\x02\x02" +
		"\u1B40\u1B3A\x03\x02\x02\x02\u1B40\u1B41\x03\x02\x02\x02\u1B41\u1B48\x03" +
		"\x02\x02\x02\u1B42\u1B44\x07\u0114\x02\x02\u1B43\u1B45\x05\f\x07\x02\u1B44" +
		"\u1B43\x03\x02\x02\x02\u1B45\u1B46\x03\x02\x02\x02\u1B46\u1B44\x03\x02" +
		"\x02\x02\u1B46\u1B47\x03\x02\x02\x02\u1B47\u1B49\x03\x02\x02\x02\u1B48" +
		"\u1B42\x03\x02\x02\x02\u1B48\u1B49\x03\x02\x02\x02\u1B49\u1B4A\x03\x02" +
		"\x02\x02\u1B4A\u1B4B\x05\u01FC\xFF\x02\u1B4B\u1B8B\x03\x02\x02\x02\u1B4C" +
		"\u1B4E\x07\u0185\x02\x02\u1B4D\u1B4F\x05\f\x07\x02\u1B4E\u1B4D\x03\x02" +
		"\x02\x02\u1B4F\u1B50\x03\x02\x02\x02\u1B50\u1B4E\x03\x02\x02\x02\u1B50" +
		"\u1B51\x03\x02\x02\x02\u1B51\u1B58\x03\x02\x02\x02\u1B52\u1B54\x07\xD6" +
		"\x02\x02\u1B53\u1B55\x05\f\x07\x02\u1B54\u1B53\x03\x02\x02\x02\u1B55\u1B56" +
		"\x03\x02\x02\x02\u1B56\u1B54\x03\x02\x02\x02\u1B56\u1B57\x03\x02\x02\x02" +
		"\u1B57\u1B59\x03\x02\x02\x02\u1B58\u1B52\x03\x02\x02\x02\u1B58\u1B59\x03" +
		"\x02\x02\x02\u1B59\u1B5A\x03\x02\x02\x02\u1B5A\u1B5B\x05\u01FA\xFE\x02" +
		"\u1B5B\u1B8B\x03\x02\x02\x02\u1B5C\u1B5E\x07,\x02\x02\u1B5D\u1B5F\x05" +
		"\f\x07\x02\u1B5E\u1B5D\x03\x02\x02\x02\u1B5F\u1B60\x03\x02\x02\x02\u1B60" +
		"\u1B5E\x03\x02\x02\x02\u1B60\u1B61\x03\x02\x02\x02\u1B61\u1B68\x03\x02" +
		"\x02\x02\u1B62\u1B64\x07\u0189\x02\x02\u1B63\u1B65\x05\f\x07\x02\u1B64" +
		"\u1B63\x03\x02\x02\x02\u1B65\u1B66\x03\x02\x02\x02\u1B66\u1B64\x03\x02" +
		"\x02\x02\u1B66\u1B67\x03\x02\x02\x02\u1B67\u1B69\x03\x02\x02\x02\u1B68" +
		"\u1B62\x03\x02\x02\x02\u1B68\u1B69\x03\x02\x02\x02\u1B69\u1B6A\x03\x02" +
		"\x02\x02\u1B6A\u1B6B\x07\u0191\x02\x02\u1B6B\u1B8B\x03\x02\x02\x02\u1B6C" +
		"\u1B74\t\x15\x02\x02\u1B6D\u1B6F\x05\f\x07\x02\u1B6E\u1B6D\x03\x02\x02" +
		"\x02\u1B6F\u1B70\x03\x02\x02\x02\u1B70\u1B6E\x03\x02\x02\x02\u1B70\u1B71" +
		"\x03\x02\x02\x02\u1B71\u1B72\x03\x02\x02\x02\u1B72\u1B73\x07\u0140\x02" +
		"\x02\u1B73\u1B75\x03\x02\x02\x02\u1B74\u1B6E\x03\x02\x02\x02\u1B74\u1B75" +
		"\x03\x02\x02\x02\u1B75\u1B8B\x03\x02\x02\x02\u1B76\u1B78\x05\u01C0\xE1" +
		"\x02\u1B77\u1B79\x05\f\x07\x02\u1B78\u1B77\x03\x02\x02\x02\u1B79\u1B7A" +
		"\x03\x02\x02\x02\u1B7A\u1B78\x03\x02\x02\x02\u1B7A\u1B7B\x03\x02\x02\x02" +
		"\u1B7B\u1B88\x03\x02\x02\x02\u1B7C\u1B89\x05\u01F4\xFB\x02\u1B7D\u1B85" +
		"\x05\u01F6\xFC\x02\u1B7E\u1B80\x05\f\x07\x02\u1B7F\u1B7E\x03\x02\x02\x02" +
		"\u1B80\u1B81\x03\x02\x02\x02\u1B81\u1B7F\x03\x02\x02\x02\u1B81\u1B82\x03" +
		"\x02\x02\x02\u1B82\u1B83\x03\x02\x02\x02\u1B83\u1B84\x05\u01F8\xFD\x02" +
		"\u1B84\u1B86\x03\x02\x02\x02\u1B85\u1B7F\x03\x02\x02\x02\u1B85\u1B86\x03" +
		"\x02\x02\x02\u1B86\u1B89\x03\x02\x02\x02\u1B87\u1B89\x05\u01F8\xFD\x02" +
		"\u1B88\u1B7C\x03\x02\x02\x02\u1B88\u1B7D\x03\x02\x02\x02\u1B88\u1B87\x03" +
		"\x02\x02\x02\u1B89\u1B8B\x03\x02\x02\x02\u1B8A\u1AC0\x03\x02\x02\x02\u1B8A" +
		"\u1AC8\x03\x02\x02\x02\u1B8A\u1AD8\x03\x02\x02\x02\u1B8A\u1AE8\x03\x02" +
		"\x02\x02\u1B8A\u1AE9\x03\x02\x02\x02\u1B8A\u1AEA\x03\x02\x02\x02\u1B8A" +
		"\u1AF9\x03\x02\x02\x02\u1B8A\u1AFC\x03\x02\x02\x02\u1B8A\u1AFD\x03\x02" +
		"\x02\x02\u1B8A\u1AFE\x03\x02\x02\x02\u1B8A\u1AFF\x03\x02\x02\x02\u1B8A" +
		"\u1B00\x03\x02\x02\x02\u1B8A\u1B08\x03\x02\x02\x02\u1B8A\u1B09\x03\x02" +
		"\x02\x02\u1B8A\u1B0A\x03\x02\x02\x02\u1B8A\u1B0B\x03\x02\x02\x02\u1B8A" +
		"\u1B0C\x03\x02\x02\x02\u1B8A\u1B2C\x03\x02\x02\x02\u1B8A\u1B4C\x03\x02" +
		"\x02\x02\u1B8A\u1B5C\x03\x02\x02\x02\u1B8A\u1B6C\x03\x02\x02\x02\u1B8A" +
		"\u1B76\x03\x02\x02\x02\u1B8B\u01F3\x03\x02\x02\x02\u1B8C\u1B8E\x07\u0184" +
		"\x02\x02\u1B8D\u1B8F\x05\f\x07\x02\u1B8E\u1B8D\x03\x02\x02\x02\u1B8F\u1B90" +
		"\x03\x02\x02\x02\u1B90\u1B8E\x03\x02\x02\x02\u1B90\u1B91\x03\x02\x02\x02" +
		"\u1B91\u1B92\x03\x02\x02\x02\u1B92\u1B93\x05\u023E\u0120\x02\u1B93\u01F5" +
		"\x03\x02\x02\x02\u1B94\u1B96\x07\xB7\x02\x02\u1B95\u1B97\x05\f\x07\x02" +
		"\u1B96\u1B95\x03\x02\x02\x02\u1B97\u1B98\x03\x02\x02\x02\u1B98\u1B96\x03" +
		"\x02\x02\x02\u1B98\u1B99\x03\x02\x02\x02\u1B99\u1B9C\x03\x02\x02\x02\u1B9A" +
		"\u1B9D\x05\u023E\u0120\x02\u1B9B\u1B9D\x05\u01FA\xFE\x02\u1B9C\u1B9A\x03" +
		"\x02\x02\x02\u1B9C\u1B9B\x03\x02\x02\x02\u1B9D\u01F7\x03\x02\x02\x02\u1B9E" +
		"\u1BA0\x07\u0175\x02\x02\u1B9F\u1BA1\x05\f\x07\x02\u1BA0\u1B9F\x03\x02" +
		"\x02\x02\u1BA1\u1BA2\x03\x02\x02\x02\u1BA2\u1BA0\x03\x02\x02\x02\u1BA2" +
		"\u1BA3\x03\x02\x02\x02\u1BA3\u1BA4\x03\x02\x02\x02\u1BA4\u1BA5\x05\u023E" +
		"\u0120\x02\u1BA5\u01F9\x03\x02\x02\x02\u1BA6\u1BA7\x07\u01C1\x02\x02\u1BA7" +
		"\u01FB\x03\x02\x02\x02\u1BA8\u1BAB\x05\u023E\u0120\x02\u1BA9\u1BAB\x07" +
		"\u01C2\x02\x02\u1BAA\u1BA8\x03\x02\x02\x02\u1BAA\u1BA9\x03\x02\x02\x02" +
		"\u1BAB\u01FD\x03\x02\x02\x02\u1BAC\u1BAD\x07\u01C2\x02\x02\u1BAD\u01FF" +
		"\x03\x02\x02\x02\u1BAE\u1BB0\x07\x05\x02\x02\u1BAF\u1BB1\x05\f\x07\x02" +
		"\u1BB0\u1BAF\x03\x02\x02\x02\u1BB1\u1BB2\x03\x02\x02\x02\u1BB2\u1BB0\x03" +
		"\x02\x02\x02\u1BB2\u1BB3\x03\x02\x02\x02\u1BB3\u1BB4\x03\x02\x02\x02\u1BB4" +
		"\u1BB8\x07z\x02\x02\u1BB5\u1BB7\x05\f\x07\x02\u1BB6\u1BB5\x03\x02\x02" +
		"\x02\u1BB7\u1BBA\x03\x02\x02\x02\u1BB8\u1BB6\x03\x02\x02\x02\u1BB8\u1BB9" +
		"\x03\x02\x02\x02\u1BB9\u1BBB\x03\x02\x02\x02\u1BBA\u1BB8\x03\x02\x02\x02" +
		"\u1BBB\u1BBF\x07\u01BE\x02\x02\u1BBC\u1BBE\x05\f\x07\x02\u1BBD\u1BBC\x03" +
		"\x02\x02\x02\u1BBE\u1BC1\x03\x02\x02\x02\u1BBF\u1BBD\x03\x02\x02\x02\u1BBF" +
		"\u1BC0\x03\x02\x02\x02\u1BC0\u1BC5\x03\x02\x02\x02\u1BC1\u1BBF\x03\x02" +
		"\x02\x02\u1BC2\u1BC4\x05\u0202\u0102\x02\u1BC3\u1BC2\x03\x02\x02\x02\u1BC4" +
		"\u1BC7\x03\x02\x02\x02\u1BC5\u1BC3\x03\x02\x02\x02\u1BC5\u1BC6\x03\x02" +
		"\x02\x02\u1BC6\u0201\x03\x02\x02\x02\u1BC7\u1BC5\x03\x02\x02\x02\u1BC8" +
		"\u1BD1\x05\u0204\u0103\x02\u1BC9\u1BD1\x05\u0210\u0109\x02\u1BCA\u1BD1" +
		"\x05\u0212\u010A\x02\u1BCB\u1BD1\x05\u0214\u010B\x02\u1BCC\u1BD1\x05\u0216" +
		"\u010C\x02\u1BCD\u1BD1\x05\u0218\u010D\x02\u1BCE\u1BD1\x05\u021A\u010E" +
		"\x02\u1BCF\u1BD1\x05\f\x07\x02\u1BD0\u1BC8\x03\x02\x02\x02\u1BD0\u1BC9" +
		"\x03\x02\x02\x02\u1BD0\u1BCA\x03\x02\x02\x02\u1BD0\u1BCB\x03\x02\x02\x02" +
		"\u1BD0\u1BCC\x03\x02\x02\x02\u1BD0\u1BCD\x03\x02\x02\x02\u1BD0\u1BCE\x03" +
		"\x02\x02\x02\u1BD0\u1BCF\x03\x02\x02\x02\u1BD1\u0203\x03\x02\x02\x02\u1BD2" +
		"\u1BD6\x07\u011F\x02\x02\u1BD3\u1BD5\x05\f\x07\x02\u1BD4\u1BD3\x03\x02" +
		"\x02\x02\u1BD5\u1BD8\x03\x02\x02\x02\u1BD6\u1BD4\x03\x02\x02\x02\u1BD6" +
		"\u1BD7\x03\x02\x02\x02\u1BD7\u1BD9\x03\x02\x02\x02\u1BD8\u1BD6\x03\x02" +
		"\x02\x02\u1BD9\u1BDD\x07\u01BE\x02\x02\u1BDA\u1BDC\x05\f\x07\x02\u1BDB" +
		"\u1BDA\x03\x02\x02\x02\u1BDC\u1BDF\x03\x02\x02\x02\u1BDD\u1BDB\x03\x02" +
		"\x02\x02\u1BDD\u1BDE\x03\x02\x02\x02\u1BDE\u1BE0\x03\x02\x02\x02\u1BDF" +
		"\u1BDD\x03\x02\x02\x02\u1BE0\u1BE4\x05\u0206\u0104\x02\u1BE1\u1BE3\x05" +
		"\f\x07\x02\u1BE2\u1BE1\x03\x02\x02\x02\u1BE3\u1BE6\x03\x02\x02\x02\u1BE4" +
		"\u1BE2\x03\x02\x02\x02\u1BE4\u1BE5\x03\x02\x02\x02\u1BE5\u1BE8\x03\x02" +
		"\x02\x02\u1BE6\u1BE4\x03\x02\x02\x02\u1BE7\u1BE9\x05\u0208\u0105\x02\u1BE8" +
		"\u1BE7\x03\x02\x02\x02\u1BE8\u1BE9\x03\x02\x02\x02\u1BE9\u1BED\x03\x02" +
		"\x02\x02\u1BEA\u1BEC\x05\f\x07\x02\u1BEB\u1BEA\x03\x02\x02\x02\u1BEC\u1BEF" +
		"\x03\x02\x02\x02\u1BED\u1BEB\x03\x02\x02\x02\u1BED\u1BEE\x03\x02\x02\x02" +
		"\u1BEE\u1BF1\x03\x02\x02\x02\u1BEF\u1BED\x03\x02\x02\x02\u1BF0\u1BF2\x05" +
		"\u020A\u0106\x02\u1BF1\u1BF0\x03\x02\x02\x02\u1BF1\u1BF2\x03\x02\x02\x02" +
		"\u1BF2\u1BF6\x03\x02\x02\x02\u1BF3\u1BF5\x05\f\x07\x02\u1BF4\u1BF3\x03" +
		"\x02\x02\x02\u1BF5\u1BF8\x03\x02\x02\x02\u1BF6\u1BF4\x03\x02\x02\x02\u1BF6" +
		"\u1BF7\x03\x02\x02\x02\u1BF7\u1BF9\x03\x02\x02\x02\u1BF8\u1BF6\x03\x02" +
		"\x02\x02\u1BF9\u1BFA\x07\u01BE\x02\x02\u1BFA\u0205\x03\x02\x02\x02\u1BFB" +
		"\u1BFC\x07\u01C4\x02\x02\u1BFC\u0207\x03\x02\x02\x02\u1BFD\u1BFF\x07\xD6" +
		"\x02\x02\u1BFE\u1C00\x05\f\x07\x02\u1BFF\u1BFE\x03\x02\x02\x02\u1C00\u1C01" +
		"\x03\x02\x02\x02\u1C01\u1BFF\x03\x02\x02\x02\u1C01\u1C02\x03\x02\x02\x02" +
		"\u1C02\u1C04\x03\x02\x02\x02\u1C03\u1BFD\x03\x02\x02\x02\u1C03\u1C04\x03" +
		"\x02\x02\x02\u1C04\u1C05\x03\x02\x02\x02\u1C05\u1C0D\t \x02\x02\u1C06" +
		"\u1C08\x05\f\x07\x02\u1C07\u1C06\x03\x02\x02\x02\u1C08\u1C09\x03\x02\x02" +
		"\x02\u1C09\u1C07\x03\x02\x02\x02\u1C09\u1C0A\x03\x02\x02\x02\u1C0A\u1C0B" +
		"\x03\x02\x02\x02\u1C0B\u1C0C\x07\u011E\x02\x02\u1C0C\u1C0E\x03\x02\x02" +
		"\x02\u1C0D\u1C07\x03\x02\x02\x02\u1C0D\u1C0E\x03\x02\x02\x02\u1C0E\u0209" +
		"\x03\x02\x02\x02\u1C0F\u1C11\x07\u018B\x02\x02\u1C10\u1C12\x05\f\x07\x02" +
		"\u1C11\u1C10\x03\x02\x02\x02\u1C12\u1C13\x03\x02\x02\x02\u1C13\u1C11\x03" +
		"\x02\x02\x02\u1C13\u1C14\x03\x02\x02\x02\u1C14\u1C16\x03\x02\x02\x02\u1C15" +
		"\u1C0F\x03\x02\x02\x02\u1C15\u1C16\x03\x02\x02\x02\u1C16\u1C17\x03\x02" +
		"\x02\x02\u1C17\u1C19\x07\xC6\x02\x02\u1C18\u1C1A\x05\f\x07\x02\u1C19\u1C18" +
		"\x03\x02\x02\x02\u1C1A\u1C1B\x03\x02\x02\x02\u1C1B\u1C19\x03\x02\x02\x02" +
		"\u1C1B\u1C1C\x03\x02\x02\x02\u1C1C\u1C1D\x03\x02\x02\x02\u1C1D\u1C1E\x05" +
		"\u020C\u0107\x02\u1C1E\u020B\x03\x02\x02\x02\u1C1F\u1C20\x07\u01C1\x02" +
		"\x02\u1C20\u020D\x03\x02\x02\x02\u1C21\u1C25\x07\u01C5\x02\x02\u1C22\u1C24" +
		"\n\x03\x02\x02\u1C23\u1C22\x03\x02\x02\x02\u1C24\u1C27\x03\x02\x02\x02" +
		"\u1C25\u1C23\x03\x02\x02\x02\u1C25\u1C26\x03\x02\x02\x02\u1C26\u1C28\x03" +
		"\x02\x02\x02\u1C27\u1C25\x03\x02\x02\x02\u1C28\u1C2B\x07\u01C7\x02\x02" +
		"\u1C29\u1C2B\x05\x10\t\x02\u1C2A\u1C21\x03\x02\x02\x02\u1C2A\u1C29\x03" +
		"\x02\x02\x02\u1C2B\u020F\x03\x02\x02\x02\u1C2C\u1C30\x07 \x02\x02\u1C2D" +
		"\u1C2F\x05\f\x07\x02\u1C2E\u1C2D\x03\x02\x02\x02\u1C2F\u1C32\x03\x02\x02" +
		"\x02\u1C30\u1C2E\x03\x02\x02\x02\u1C30\u1C31\x03\x02\x02\x02\u1C31\u1C33" +
		"\x03\x02\x02\x02\u1C32\u1C30\x03\x02\x02\x02\u1C33\u1C37\x07\u01BE\x02" +
		"\x02\u1C34\u1C36\n\x03\x02\x02\u1C35\u1C34\x03\x02\x02\x02\u1C36\u1C39" +
		"\x03\x02\x02\x02\u1C37\u1C35\x03\x02\x02\x02\u1C37\u1C38\x03\x02\x02\x02" +
		"\u1C38\u1C3A\x03\x02\x02\x02\u1C39\u1C37\x03\x02\x02\x02\u1C3A\u1C3E\x07" +
		"\u01C7\x02\x02\u1C3B\u1C3D\x05\u020E\u0108\x02\u1C3C\u1C3B\x03\x02\x02" +
		"\x02\u1C3D\u1C40\x03\x02\x02\x02\u1C3E\u1C3C\x03\x02\x02\x02\u1C3E\u1C3F" +
		"\x03\x02\x02\x02\u1C3F\u0211\x03\x02\x02\x02\u1C40\u1C3E\x03\x02\x02\x02" +
		"\u1C41\u1C45\x07\xD3\x02\x02\u1C42\u1C44\x05\f\x07\x02\u1C43\u1C42\x03" +
		"\x02\x02\x02\u1C44\u1C47\x03\x02\x02\x02\u1C45\u1C43\x03\x02\x02\x02\u1C45" +
		"\u1C46\x03\x02\x02\x02\u1C46\u1C48\x03\x02\x02\x02\u1C47\u1C45\x03\x02" +
		"\x02\x02\u1C48\u1C4C\x07\u01BE\x02\x02\u1C49\u1C4B\n\x03\x02\x02\u1C4A" +
		"\u1C49\x03\x02\x02\x02\u1C4B\u1C4E\x03\x02\x02\x02\u1C4C\u1C4A\x03\x02" +
		"\x02\x02\u1C4C\u1C4D\x03\x02\x02\x02\u1C4D\u1C4F\x03\x02\x02\x02\u1C4E" +
		"\u1C4C\x03\x02\x02\x02\u1C4F\u1C53\x07\u01C7\x02\x02\u1C50\u1C52\x05\u020E" +
		"\u0108\x02\u1C51\u1C50\x03\x02\x02\x02\u1C52\u1C55\x03\x02\x02\x02\u1C53" +
		"\u1C51\x03\x02\x02\x02\u1C53\u1C54\x03\x02\x02\x02\u1C54\u0213\x03\x02" +
		"\x02\x02\u1C55\u1C53\x03\x02\x02\x02\u1C56\u1C5A\x07h\x02\x02\u1C57\u1C59" +
		"\x05\f\x07\x02\u1C58\u1C57\x03\x02\x02\x02\u1C59\u1C5C\x03\x02\x02\x02" +
		"\u1C5A\u1C58\x03\x02\x02\x02\u1C5A\u1C5B\x03\x02\x02\x02\u1C5B\u1C5D\x03" +
		"\x02\x02\x02\u1C5C\u1C5A\x03\x02\x02\x02\u1C5D\u1C61\x07\u01BE\x02\x02" +
		"\u1C5E\u1C60\n\x03\x02\x02\u1C5F\u1C5E\x03\x02\x02\x02\u1C60\u1C63\x03" +
		"\x02\x02\x02\u1C61\u1C5F\x03\x02\x02\x02\u1C61\u1C62\x03\x02\x02\x02\u1C62" +
		"\u1C64\x03\x02\x02\x02\u1C63\u1C61\x03\x02\x02\x02\u1C64\u1C68\x07\u01C7" +
		"\x02\x02\u1C65\u1C67\x05\u020E\u0108\x02\u1C66\u1C65\x03\x02\x02\x02\u1C67" +
		"\u1C6A\x03\x02\x02\x02\u1C68\u1C66\x03\x02\x02\x02\u1C68\u1C69\x03\x02" +
		"\x02\x02\u1C69\u0215\x03\x02\x02\x02\u1C6A\u1C68\x03\x02\x02\x02\u1C6B" +
		"\u1C6F\x07g\x02\x02\u1C6C\u1C6E\x05\f\x07\x02\u1C6D\u1C6C\x03\x02\x02" +
		"\x02\u1C6E\u1C71\x03\x02\x02\x02\u1C6F\u1C6D\x03\x02\x02\x02\u1C6F\u1C70" +
		"\x03\x02\x02\x02\u1C70\u1C72\x03\x02\x02\x02\u1C71\u1C6F\x03\x02\x02\x02" +
		"\u1C72\u1C76\x07\u01BE\x02\x02\u1C73\u1C75\n\x03\x02\x02\u1C74\u1C73\x03" +
		"\x02\x02\x02\u1C75\u1C78\x03\x02\x02\x02\u1C76\u1C74\x03\x02\x02\x02\u1C76" +
		"\u1C77\x03\x02\x02\x02\u1C77\u1C79\x03\x02\x02\x02\u1C78\u1C76\x03\x02" +
		"\x02\x02\u1C79\u1C7D\x07\u01C7\x02\x02\u1C7A\u1C7C\x05\u020E\u0108\x02" +
		"\u1C7B\u1C7A\x03\x02\x02\x02\u1C7C\u1C7F\x03\x02\x02\x02\u1C7D\u1C7B\x03" +
		"\x02\x02\x02\u1C7D\u1C7E\x03\x02\x02\x02\u1C7E\u0217\x03\x02\x02\x02\u1C7F" +
		"\u1C7D\x03\x02\x02\x02\u1C80\u1C84\x07\u0149\x02\x02\u1C81\u1C83\x05\f" +
		"\x07\x02\u1C82\u1C81\x03\x02\x02\x02\u1C83\u1C86\x03\x02\x02\x02\u1C84" +
		"\u1C82\x03\x02\x02\x02\u1C84\u1C85\x03\x02\x02\x02\u1C85\u1C87\x03\x02" +
		"\x02\x02\u1C86\u1C84\x03\x02\x02\x02\u1C87\u1C8B\x07\u01BE\x02\x02\u1C88" +
		"\u1C8A\n\x03\x02\x02\u1C89\u1C88\x03\x02\x02\x02\u1C8A\u1C8D\x03\x02\x02" +
		"\x02\u1C8B\u1C89\x03\x02\x02\x02\u1C8B\u1C8C\x03\x02\x02\x02\u1C8C\u1C8E" +
		"\x03\x02\x02\x02\u1C8D\u1C8B\x03\x02\x02\x02\u1C8E\u1C92\x07\u01C7\x02" +
		"\x02\u1C8F\u1C91\x05\u020E\u0108\x02\u1C90\u1C8F\x03\x02\x02\x02\u1C91" +
		"\u1C94\x03\x02\x02\x02\u1C92\u1C90\x03\x02\x02\x02\u1C92\u1C93\x03\x02" +
		"\x02\x02\u1C93\u0219\x03\x02\x02\x02\u1C94\u1C92\x03\x02\x02\x02\u1C95" +
		"\u1C99\x07\u0105\x02\x02\u1C96\u1C98\x05\f\x07\x02\u1C97\u1C96\x03\x02" +
		"\x02\x02\u1C98\u1C9B\x03\x02\x02\x02\u1C99\u1C97\x03\x02\x02\x02\u1C99" +
		"\u1C9A\x03\x02\x02\x02\u1C9A\u1C9C\x03\x02\x02\x02\u1C9B\u1C99\x03\x02" +
		"\x02\x02\u1C9C\u1CA0\x07\u01BE\x02\x02\u1C9D\u1C9F\x05\f\x07\x02\u1C9E" +
		"\u1C9D\x03\x02\x02\x02\u1C9F\u1CA2\x03\x02\x02\x02\u1CA0\u1C9E\x03\x02" +
		"\x02\x02\u1CA0\u1CA1\x03\x02\x02\x02\u1CA1\u1CA4\x03\x02\x02\x02\u1CA2" +
		"\u1CA0\x03\x02\x02\x02\u1CA3\u1CA5\x05\u021C\u010F\x02\u1CA4\u1CA3\x03" +
		"\x02\x02\x02\u1CA4\u1CA5\x03\x02\x02\x02\u1CA5\u1CA9\x03\x02\x02\x02\u1CA6" +
		"\u1CA8\x05\f\x07\x02\u1CA7\u1CA6\x03\x02\x02\x02\u1CA8\u1CAB\x03\x02\x02" +
		"\x02\u1CA9\u1CA7\x03\x02\x02\x02\u1CA9\u1CAA\x03\x02\x02\x02\u1CAA\u1CAD" +
		"\x03\x02\x02\x02\u1CAB\u1CA9\x03\x02\x02\x02\u1CAC\u1CAE\x07\u01BE\x02" +
		"\x02\u1CAD\u1CAC\x03\x02\x02\x02\u1CAD\u1CAE\x03\x02\x02\x02\u1CAE\u021B" +
		"\x03\x02\x02\x02\u1CAF\u1CB1\x07\x1B\x02\x02\u1CB0\u1CB2\x05\f\x07\x02" +
		"\u1CB1\u1CB0\x03\x02\x02\x02\u1CB2\u1CB3\x03\x02\x02\x02\u1CB3\u1CB1\x03" +
		"\x02\x02\x02\u1CB3\u1CB4\x03\x02\x02\x02\u1CB4\u1CBB\x03\x02\x02\x02\u1CB5" +
		"\u1CB7\x07\xD6\x02\x02\u1CB6\u1CB8\x05\f\x07\x02\u1CB7\u1CB6\x03\x02\x02" +
		"\x02\u1CB8\u1CB9\x03\x02\x02\x02\u1CB9\u1CB7\x03\x02\x02\x02\u1CB9\u1CBA" +
		"\x03\x02\x02\x02\u1CBA\u1CBC\x03\x02\x02\x02\u1CBB\u1CB5\x03\x02\x02\x02" +
		"\u1CBB\u1CBC\x03\x02\x02\x02\u1CBC\u1CBD\x03\x02\x02\x02\u1CBD\u1CC1\t" +
		"!\x02\x02\u1CBE\u1CC0\x05\f\x07\x02\u1CBF\u1CBE\x03\x02\x02\x02\u1CC0" +
		"\u1CC3\x03\x02\x02\x02\u1CC1\u1CBF\x03\x02\x02\x02\u1CC1\u1CC2\x03\x02" +
		"\x02\x02\u1CC2\u1CC4\x03\x02\x02\x02\u1CC3\u1CC1\x03\x02\x02\x02\u1CC4" +
		"\u1CC5\x07\u01BE\x02\x02\u1CC5\u021D\x03\x02\x02\x02\u1CC6\u1CC8\x07\x97" +
		"\x02\x02\u1CC7\u1CC9\x05\f\x07\x02\u1CC8\u1CC7\x03\x02\x02\x02\u1CC9\u1CCA" +
		"\x03\x02\x02\x02\u1CCA\u1CC8\x03\x02\x02\x02\u1CCA\u1CCB\x03\x02\x02\x02" +
		"\u1CCB\u1CCC\x03\x02\x02\x02\u1CCC\u1CD0\x07z\x02\x02\u1CCD\u1CCF\x05" +
		"\f\x07\x02\u1CCE\u1CCD\x03\x02\x02\x02\u1CCF\u1CD2\x03\x02\x02\x02\u1CD0" +
		"\u1CCE\x03\x02\x02\x02\u1CD0\u1CD1\x03\x02\x02\x02\u1CD1\u1CD3\x03\x02" +
		"\x02\x02\u1CD2\u1CD0\x03\x02\x02\x02\u1CD3\u1CD7\x07\u01BE\x02\x02\u1CD4" +
		"\u1CD6\x05\f\x07\x02\u1CD5\u1CD4\x03\x02\x02\x02\u1CD6\u1CD9\x03\x02\x02" +
		"\x02\u1CD7\u1CD5\x03\x02\x02\x02\u1CD7\u1CD8\x03\x02\x02\x02\u1CD8\u1CDB" +
		"\x03\x02\x02\x02\u1CD9\u1CD7\x03\x02\x02\x02\u1CDA\u1CDC\x05\u0220\u0111" +
		"\x02\u1CDB\u1CDA\x03\x02\x02\x02\u1CDB\u1CDC\x03\x02\x02\x02\u1CDC\u1CDE" +
		"\x03\x02\x02\x02\u1CDD\u1CDF\x05\u0222\u0112\x02\u1CDE\u1CDD\x03\x02\x02" +
		"\x02\u1CDE\u1CDF\x03\x02\x02\x02\u1CDF\u021F\x03\x02\x02\x02\u1CE0\u1CE2" +
		"\x07S\x02\x02\u1CE1\u1CE3\x05\f\x07\x02\u1CE2\u1CE1\x03\x02\x02\x02\u1CE3" +
		"\u1CE4\x03\x02\x02\x02\u1CE4\u1CE2\x03\x02\x02\x02\u1CE4\u1CE5\x03\x02" +
		"\x02\x02\u1CE5\u1CE6\x03\x02\x02\x02\u1CE6\u1CEA\x07\u0147\x02\x02\u1CE7" +
		"\u1CE9\x05\f\x07\x02\u1CE8\u1CE7\x03\x02\x02\x02\u1CE9\u1CEC\x03\x02\x02" +
		"\x02\u1CEA\u1CE8\x03\x02\x02\x02\u1CEA\u1CEB\x03\x02\x02\x02\u1CEB\u1CED" +
		"\x03\x02\x02\x02\u1CEC\u1CEA\x03\x02\x02\x02\u1CED\u1CF1\x07\u01BE\x02" +
		"\x02\u1CEE\u1CF0\x05\f\x07\x02\u1CEF\u1CEE\x03\x02\x02\x02\u1CF0\u1CF3" +
		"\x03\x02\x02\x02\u1CF1\u1CEF\x03\x02\x02\x02\u1CF1\u1CF2\x03\x02\x02\x02" +
		"\u1CF2\u1CF5\x03\x02\x02\x02\u1CF3\u1CF1\x03\x02\x02\x02\u1CF4\u1CF6\x05" +
		"\u0224\u0113\x02\u1CF5\u1CF4\x03\x02\x02\x02\u1CF5\u1CF6\x03\x02\x02\x02" +
		"\u1CF6\u1CFA\x03\x02\x02\x02\u1CF7\u1CF9\x05\f\x07\x02\u1CF8\u1CF7\x03" +
		"\x02\x02\x02\u1CF9\u1CFC\x03\x02\x02\x02\u1CFA\u1CF8\x03\x02\x02\x02\u1CFA" +
		"\u1CFB\x03\x02\x02\x02\u1CFB\u1CFE\x03\x02\x02\x02\u1CFC\u1CFA\x03\x02" +
		"\x02\x02\u1CFD\u1CFF\x05\u022A\u0116\x02\u1CFE\u1CFD\x03\x02\x02\x02\u1CFE" +
		"\u1CFF\x03\x02\x02\x02\u1CFF\u1D03\x03\x02\x02\x02\u1D00\u1D02\x05\f\x07" +
		"\x02\u1D01\u1D00\x03\x02\x02\x02\u1D02\u1D05\x03\x02\x02\x02\u1D03\u1D01" +
		"\x03\x02\x02\x02\u1D03\u1D04\x03\x02\x02\x02\u1D04\u1D07\x03\x02\x02\x02" +
		"\u1D05\u1D03\x03\x02\x02\x02\u1D06\u1D08\x05\u023A\u011E\x02\u1D07\u1D06" +
		"\x03\x02\x02\x02\u1D07\u1D08\x03\x02\x02\x02\u1D08\u1D0C\x03\x02\x02\x02" +
		"\u1D09\u1D0B\x05\f\x07\x02\u1D0A\u1D09\x03\x02\x02\x02\u1D0B\u1D0E\x03" +
		"\x02\x02\x02\u1D0C\u1D0A\x03\x02\x02\x02\u1D0C\u1D0D\x03\x02\x02\x02\u1D0D" +
		"\u0221\x03\x02\x02\x02\u1D0E\u1D0C\x03\x02\x02\x02\u1D0F\u1D11\x07\xD1" +
		"\x02\x02\u1D10\u1D12\x05\f\x07\x02\u1D11\u1D10\x03\x02\x02\x02\u1D12\u1D13" +
		"\x03\x02\x02\x02\u1D13\u1D11\x03\x02\x02\x02\u1D13\u1D14\x03\x02\x02\x02" +
		"\u1D14\u1D15\x03\x02\x02\x02\u1D15\u1D19\x07\u0147\x02\x02\u1D16\u1D18" +
		"\x05\f\x07\x02\u1D17\u1D16\x03\x02\x02\x02\u1D18\u1D1B\x03\x02\x02\x02" +
		"\u1D19\u1D17\x03\x02\x02\x02\u1D19\u1D1A\x03\x02\x02\x02\u1D1A\u1D1C\x03" +
		"\x02\x02\x02\u1D1B\u1D19\x03\x02\x02\x02\u1D1C\u1D20\x07\u01BE\x02\x02" +
		"\u1D1D\u1D1F\x05\f\x07\x02\u1D1E\u1D1D\x03\x02\x02\x02\u1D1F\u1D22\x03" +
		"\x02\x02\x02\u1D20\u1D1E\x03\x02\x02\x02\u1D20\u1D21\x03\x02\x02\x02\u1D21" +
		"\u1D24\x03\x02\x02\x02\u1D22\u1D20\x03\x02\x02\x02\u1D23\u1D25\x05\u027C" +
		"\u013F\x02\u1D24\u1D23\x03\x02\x02\x02\u1D24\u1D25\x03\x02\x02\x02\u1D25" +
		"\u1D27\x03\x02\x02\x02\u1D26\u1D28\x05\u02AA\u0156\x02\u1D27\u1D26\x03" +
		"\x02\x02\x02\u1D27\u1D28\x03\x02\x02\x02\u1D28\u0223\x03\x02\x02\x02\u1D29" +
		"\u1D2D\x07\u0156\x02\x02\u1D2A\u1D2C\x05\f\x07\x02\u1D2B\u1D2A\x03\x02" +
		"\x02\x02\u1D2C\u1D2F\x03\x02\x02\x02\u1D2D\u1D2B\x03\x02\x02\x02\u1D2D" +
		"\u1D2E\x03\x02\x02\x02\u1D2E\u1D30\x03\x02\x02\x02\u1D2F\u1D2D\x03\x02" +
		"\x02\x02\u1D30\u1D34\x07\u01BE\x02\x02\u1D31\u1D33\x05\f\x07\x02\u1D32" +
		"\u1D31\x03\x02\x02\x02\u1D33\u1D36\x03\x02\x02\x02\u1D34\u1D32\x03\x02" +
		"\x02\x02\u1D34\u1D35\x03\x02\x02\x02\u1D35\u1D49\x03\x02\x02\x02\u1D36" +
		"\u1D34\x03\x02\x02\x02\u1D37\u1D3F\x05\u0226\u0114\x02\u1D38\u1D3A\x05" +
		"\f\x07\x02\u1D39\u1D38\x03\x02\x02\x02\u1D3A\u1D3B\x03\x02\x02\x02\u1D3B" +
		"\u1D39\x03\x02\x02\x02\u1D3B\u1D3C\x03\x02\x02\x02\u1D3C\u1D3D\x03\x02" +
		"\x02\x02\u1D3D\u1D3E\x05\u0228\u0115\x02\u1D3E\u1D40\x03\x02\x02\x02\u1D3F" +
		"\u1D39\x03\x02\x02\x02\u1D3F\u1D40\x03\x02\x02\x02\u1D40\u1D44\x03\x02" +
		"\x02\x02\u1D41\u1D43\x05\f\x07\x02\u1D42\u1D41\x03\x02\x02\x02\u1D43\u1D46" +
		"\x03\x02\x02\x02\u1D44\u1D42\x03\x02\x02\x02\u1D44\u1D45\x03\x02\x02\x02" +
		"\u1D45\u1D47\x03\x02\x02\x02\u1D46\u1D44\x03\x02\x02\x02\u1D47\u1D48\x07" +
		"\u01BE\x02\x02\u1D48\u1D4A\x03\x02\x02\x02\u1D49\u1D37\x03\x02\x02\x02" +
		"\u1D49\u1D4A\x03\x02\x02\x02\u1D4A\u0225\x03\x02\x02\x02\u1D4B\u1D4C\t" +
		"\"\x02\x02\u1D4C\u0227\x03\x02\x02\x02\u1D4D\u1D4F\x07\u018B\x02\x02\u1D4E" +
		"\u1D50\x05\f\x07\x02\u1D4F\u1D4E\x03\x02\x02\x02\u1D50\u1D51\x03\x02\x02" +
		"\x02\u1D51\u1D4F\x03\x02\x02\x02\u1D51\u1D52\x03\x02\x02\x02\u1D52\u1D54" +
		"\x03\x02\x02\x02\u1D53\u1D4D\x03\x02\x02\x02\u1D53\u1D54\x03\x02\x02\x02" +
		"\u1D54\u1D55\x03\x02\x02\x02\u1D55\u1D57\x07l\x02\x02\u1D56\u1D58\x05" +
		"\f\x07\x02\u1D57\u1D56\x03\x02\x02\x02\u1D58\u1D59\x03\x02\x02\x02\u1D59" +
		"\u1D57\x03\x02\x02\x02\u1D59\u1D5A\x03\x02\x02\x02\u1D5A\u1D5B\x03\x02" +
		"\x02\x02\u1D5B\u1D5C\x07\xF1\x02\x02\u1D5C\u0229\x03\x02\x02\x02\u1D5D" +
		"\u1D61\x07\xFD\x02\x02\u1D5E\u1D60\x05\f\x07\x02\u1D5F\u1D5E\x03\x02\x02" +
		"\x02\u1D60\u1D63\x03\x02\x02\x02\u1D61\u1D5F\x03\x02\x02\x02\u1D61\u1D62" +
		"\x03\x02\x02\x02\u1D62\u1D64\x03\x02\x02\x02\u1D63\u1D61\x03\x02\x02\x02" +
		"\u1D64\u1D68\x07\u01BE\x02\x02\u1D65\u1D67\x05\f\x07\x02\u1D66\u1D65\x03" +
		"\x02\x02\x02\u1D67\u1D6A\x03\x02\x02\x02\u1D68\u1D66\x03\x02\x02\x02\u1D68" +
		"\u1D69\x03\x02\x02\x02\u1D69\u1D8F\x03\x02\x02\x02\u1D6A\u1D68\x03\x02" +
		"\x02\x02\u1D6B\u1D73\x05\u0226\u0114\x02\u1D6C\u1D6E\x05\f\x07\x02\u1D6D" +
		"\u1D6C\x03\x02\x02\x02\u1D6E\u1D6F\x03\x02\x02\x02\u1D6F\u1D6D\x03\x02" +
		"\x02\x02\u1D6F\u1D70\x03\x02\x02\x02\u1D70\u1D71\x03\x02\x02\x02\u1D71" +
		"\u1D72\x05\u022C\u0117\x02\u1D72\u1D74\x03\x02\x02\x02\u1D73\u1D6D\x03" +
		"\x02\x02\x02\u1D73\u1D74\x03\x02\x02\x02\u1D74\u1D7C\x03\x02\x02\x02\u1D75" +
		"\u1D77\x05\f\x07\x02\u1D76\u1D75\x03\x02\x02\x02\u1D77\u1D78\x03\x02\x02" +
		"\x02\u1D78\u1D76\x03\x02\x02\x02\u1D78\u1D79\x03\x02\x02\x02\u1D79\u1D7A" +
		"\x03\x02\x02\x02\u1D7A\u1D7B\x05\u0232\u011A\x02\u1D7B\u1D7D\x03\x02\x02" +
		"\x02\u1D7C\u1D76\x03\x02\x02\x02\u1D7C\u1D7D\x03\x02\x02\x02\u1D7D\u1D85" +
		"\x03\x02\x02\x02\u1D7E\u1D80\x05\f\x07\x02\u1D7F\u1D7E\x03\x02\x02\x02" +
		"\u1D80\u1D81\x03\x02\x02\x02\u1D81\u1D7F\x03\x02\x02\x02\u1D81\u1D82\x03" +
		"\x02\x02\x02\u1D82\u1D83\x03\x02\x02\x02\u1D83\u1D84\x05\u0236\u011C\x02" +
		"\u1D84\u1D86\x03\x02\x02\x02\u1D85\u1D7F\x03\x02\x02\x02\u1D85\u1D86\x03" +
		"\x02\x02\x02\u1D86\u1D8A\x03\x02\x02\x02\u1D87\u1D89\x05\f\x07\x02\u1D88" +
		"\u1D87\x03\x02\x02\x02\u1D89\u1D8C\x03\x02\x02\x02\u1D8A\u1D88\x03\x02" +
		"\x02\x02\u1D8A\u1D8B\x03\x02\x02\x02\u1D8B\u1D8D\x03\x02\x02\x02\u1D8C";
	private static readonly _serializedATNSegment15: string =
		"\u1D8A\x03\x02\x02\x02\u1D8D\u1D8E\x07\u01BE\x02\x02\u1D8E\u1D90\x03\x02" +
		"\x02\x02\u1D8F\u1D6B\x03\x02\x02\x02\u1D8F\u1D90\x03\x02\x02\x02\u1D90" +
		"\u022B\x03\x02\x02\x02\u1D91\u1D99\x07\xEF\x02\x02\u1D92\u1D94\x05\f\x07" +
		"\x02\u1D93\u1D92\x03\x02\x02\x02\u1D94\u1D95\x03\x02\x02\x02\u1D95\u1D93" +
		"\x03\x02\x02\x02\u1D95\u1D96\x03\x02\x02\x02\u1D96\u1D97\x03\x02\x02\x02" +
		"\u1D97\u1D98\x07\u0152\x02\x02\u1D98\u1D9A\x03\x02\x02\x02\u1D99\u1D93" +
		"\x03\x02\x02\x02\u1D99\u1D9A\x03\x02\x02\x02\u1D9A\u1D9C\x03\x02\x02\x02" +
		"\u1D9B\u1D9D\x05\f\x07\x02\u1D9C\u1D9B\x03\x02\x02\x02\u1D9D\u1D9E\x03" +
		"\x02\x02\x02\u1D9E\u1D9C\x03\x02\x02\x02\u1D9E\u1D9F\x03\x02\x02\x02\u1D9F" +
		"\u1DA0\x03\x02\x02\x02\u1DA0\u1DA2\x05\u022E\u0118\x02\u1DA1\u1DA3\x05" +
		"\f\x07\x02\u1DA2\u1DA1\x03\x02\x02\x02\u1DA3\u1DA4\x03\x02\x02\x02\u1DA4" +
		"\u1DA2\x03\x02\x02\x02\u1DA4\u1DA5\x03\x02\x02\x02\u1DA5\u1DA6\x03\x02" +
		"\x02\x02\u1DA6\u1DA7\x05\u0230\u0119\x02\u1DA7\u022D\x03\x02\x02\x02\u1DA8" +
		"\u1DA9\x07\u01C2\x02\x02\u1DA9\u022F\x03\x02\x02\x02\u1DAA\u1DAB\t#\x02" +
		"\x02\u1DAB\u0231\x03\x02\x02\x02\u1DAC\u1DAE\x07\u011E\x02\x02\u1DAD\u1DAF" +
		"\x05\f\x07\x02\u1DAE\u1DAD\x03\x02\x02\x02\u1DAF\u1DB0\x03\x02\x02\x02" +
		"\u1DB0\u1DAE\x03\x02\x02\x02\u1DB0\u1DB1\x03\x02\x02\x02\u1DB1\u1DB3\x03" +
		"\x02\x02\x02\u1DB2\u1DAC\x03\x02\x02\x02\u1DB2\u1DB3\x03\x02\x02\x02\u1DB3" +
		"\u1DBA\x03\x02\x02\x02\u1DB4\u1DB6\x07@\x02\x02\u1DB5\u1DB7\x05\f\x07" +
		"\x02\u1DB6\u1DB5\x03\x02\x02\x02\u1DB7\u1DB8\x03\x02\x02\x02\u1DB8\u1DB6" +
		"\x03\x02\x02\x02\u1DB8\u1DB9\x03\x02\x02\x02\u1DB9\u1DBB\x03\x02\x02\x02" +
		"\u1DBA\u1DB4\x03\x02\x02\x02\u1DBA\u1DBB\x03\x02\x02\x02\u1DBB\u1DBC\x03" +
		"\x02\x02\x02\u1DBC\u1DC4\x07\u014D\x02\x02\u1DBD\u1DBF\x05\f\x07\x02\u1DBE" +
		"\u1DBD\x03\x02\x02\x02\u1DBF\u1DC0\x03\x02\x02\x02\u1DC0\u1DBE\x03\x02" +
		"\x02\x02\u1DC0\u1DC1\x03\x02\x02\x02\u1DC1\u1DC2\x03\x02\x02\x02\u1DC2" +
		"\u1DC3\x07\xD6\x02\x02\u1DC3\u1DC5\x03\x02\x02\x02\u1DC4\u1DBE\x03\x02" +
		"\x02\x02\u1DC4\u1DC5\x03\x02\x02\x02\u1DC5\u1DC7\x03\x02\x02\x02\u1DC6" +
		"\u1DC8\x05\f\x07\x02\u1DC7\u1DC6\x03\x02\x02\x02\u1DC8\u1DC9\x03\x02\x02" +
		"\x02\u1DC9\u1DC7\x03\x02\x02\x02\u1DC9\u1DCA\x03\x02\x02\x02\u1DCA\u1DCB" +
		"\x03\x02\x02\x02\u1DCB\u1DCC\x05\u0234\u011B\x02\u1DCC\u0233\x03\x02\x02" +
		"\x02\u1DCD\u1DCE\x07\u01C4\x02\x02\u1DCE\u0235\x03\x02\x02\x02\u1DCF\u1DD7" +
		"\x07\u014A\x02\x02\u1DD0\u1DD2\x05\f\x07\x02\u1DD1\u1DD0\x03\x02\x02\x02" +
		"\u1DD2\u1DD3\x03\x02\x02\x02\u1DD3\u1DD1\x03\x02\x02\x02\u1DD3\u1DD4\x03" +
		"\x02\x02\x02\u1DD4\u1DD5\x03\x02\x02\x02\u1DD5\u1DD6\x07\xD6\x02\x02\u1DD6" +
		"\u1DD8\x03\x02\x02\x02\u1DD7\u1DD1\x03\x02\x02\x02\u1DD7\u1DD8\x03\x02" +
		"\x02\x02\u1DD8\u1DD9\x03\x02\x02\x02\u1DD9\u1DDA\x05\u0238\u011D\x02\u1DDA" +
		"\u0237\x03\x02\x02\x02\u1DDB\u1DDC\x07\u01C2\x02\x02\u1DDC\u0239\x03\x02" +
		"\x02\x02\u1DDD\u1DE1\x07\u0159\x02\x02\u1DDE\u1DE0\x05\f\x07\x02\u1DDF" +
		"\u1DDE\x03\x02\x02\x02\u1DE0\u1DE3\x03\x02\x02\x02\u1DE1\u1DDF\x03\x02" +
		"\x02\x02\u1DE1\u1DE2\x03\x02\x02\x02\u1DE2\u1DE4\x03\x02\x02\x02\u1DE3" +
		"\u1DE1\x03\x02\x02\x02\u1DE4\u1DE8\x07\u01BE\x02\x02\u1DE5\u1DE7\x05\f" +
		"\x07\x02\u1DE6\u1DE5\x03\x02\x02\x02\u1DE7\u1DEA\x03\x02\x02\x02\u1DE8" +
		"\u1DE6\x03\x02\x02\x02\u1DE8\u1DE9\x03\x02\x02\x02\u1DE9\u1DF8\x03\x02" +
		"\x02\x02\u1DEA\u1DE8\x03\x02\x02\x02\u1DEB\u1DEF\x05\u023C\u011F\x02\u1DEC" +
		"\u1DEE\x05\f\x07\x02\u1DED\u1DEC\x03\x02\x02\x02\u1DEE\u1DF1\x03\x02\x02" +
		"\x02\u1DEF\u1DED\x03\x02\x02\x02\u1DEF\u1DF0\x03\x02\x02\x02\u1DF0\u1DF3" +
		"\x03\x02\x02\x02\u1DF1\u1DEF\x03\x02\x02\x02\u1DF2\u1DEB\x03\x02\x02\x02" +
		"\u1DF3\u1DF4\x03\x02\x02\x02\u1DF4\u1DF2\x03\x02\x02\x02\u1DF4\u1DF5\x03" +
		"\x02\x02\x02\u1DF5\u1DF6\x03\x02\x02\x02\u1DF6\u1DF7\x07\u01BE\x02\x02" +
		"\u1DF7\u1DF9\x03\x02\x02\x02\u1DF8\u1DF2\x03\x02\x02\x02\u1DF8\u1DF9\x03" +
		"\x02\x02\x02\u1DF9\u023B\x03\x02\x02\x02\u1DFA\u1DFC\x05\u0274\u013B\x02" +
		"\u1DFB\u1DFD\x05\f\x07\x02\u1DFC\u1DFB\x03\x02\x02\x02\u1DFD\u1DFE\x03" +
		"\x02\x02\x02\u1DFE\u1DFC\x03\x02\x02\x02\u1DFE\u1DFF\x03\x02\x02\x02\u1DFF" +
		"\u1E06\x03\x02\x02\x02\u1E00\u1E02\x07\xD6\x02\x02\u1E01\u1E03\x05\f\x07" +
		"\x02\u1E02\u1E01\x03\x02\x02\x02\u1E03\u1E04\x03\x02\x02\x02\u1E04\u1E02" +
		"\x03\x02\x02\x02\u1E04\u1E05\x03\x02\x02\x02\u1E05\u1E07\x03\x02\x02\x02" +
		"\u1E06\u1E00\x03\x02\x02\x02\u1E06\u1E07\x03\x02\x02\x02\u1E07\u1E08\x03" +
		"\x02\x02\x02\u1E08\u1E09\x05\u0276\u013C\x02\u1E09\u1E66\x03\x02\x02\x02" +
		"\u1E0A\u1E0C\x05\u0278\u013D\x02\u1E0B\u1E0D\x05\f\x07\x02\u1E0C\u1E0B" +
		"\x03\x02\x02\x02\u1E0D\u1E0E\x03\x02\x02\x02\u1E0E\u1E0C\x03\x02\x02\x02" +
		"\u1E0E\u1E0F\x03\x02\x02\x02\u1E0F\u1E16\x03\x02\x02\x02\u1E10\u1E12\x07" +
		"\xD6\x02\x02\u1E11\u1E13\x05\f\x07\x02\u1E12\u1E11\x03\x02\x02\x02\u1E13" +
		"\u1E14\x03\x02\x02\x02\u1E14\u1E12\x03\x02\x02\x02\u1E14\u1E15\x03\x02" +
		"\x02\x02\u1E15\u1E17\x03\x02\x02\x02\u1E16\u1E10\x03\x02\x02\x02\u1E16" +
		"\u1E17\x03\x02\x02\x02\u1E17\u1E18\x03\x02\x02\x02\u1E18\u1E19\x05\u027A" +
		"\u013E\x02\u1E19\u1E66\x03\x02\x02\x02\u1E1A\u1E1C\x073\x02\x02\u1E1B" +
		"\u1E1D\x05\f\x07\x02\u1E1C\u1E1B\x03\x02\x02\x02\u1E1D\u1E1E\x03\x02\x02" +
		"\x02\u1E1E\u1E1C\x03\x02\x02\x02\u1E1E\u1E1F\x03\x02\x02\x02\u1E1F\u1E26" +
		"\x03\x02\x02\x02\u1E20\u1E22\x07\xD6\x02\x02\u1E21\u1E23\x05\f\x07\x02" +
		"\u1E22\u1E21\x03\x02\x02\x02\u1E23\u1E24\x03\x02\x02\x02\u1E24\u1E22\x03" +
		"\x02\x02\x02\u1E24\u1E25\x03\x02\x02\x02\u1E25\u1E27\x03\x02\x02\x02\u1E26" +
		"\u1E20\x03\x02\x02\x02\u1E26\u1E27\x03\x02\x02\x02\u1E27\u1E28\x03\x02" +
		"\x02\x02\u1E28\u1E29\x05\u0272\u013A\x02\u1E29\u1E66\x03\x02\x02\x02\u1E2A" +
		"\u1E66\x05\u0266\u0134\x02\u1E2B\u1E66\x05\u025A\u012E\x02\u1E2C\u1E66" +
		"\x05\u024E\u0128\x02\u1E2D\u1E66\x05\u0248\u0125\x02\u1E2E\u1E66\x05\u0240" +
		"\u0121\x02\u1E2F\u1E31\x07m\x02\x02\u1E30\u1E32\x05\f\x07\x02\u1E31\u1E30" +
		"\x03\x02\x02\x02\u1E32\u1E33\x03\x02\x02\x02\u1E33\u1E31\x03\x02\x02\x02" +
		"\u1E33\u1E34\x03\x02\x02\x02\u1E34\u1E3B\x03\x02\x02\x02\u1E35\u1E37\x07" +
		"\xD6\x02\x02\u1E36\u1E38\x05\f\x07\x02\u1E37\u1E36\x03\x02\x02\x02\u1E38" +
		"\u1E39\x03\x02\x02\x02\u1E39\u1E37\x03\x02\x02\x02\u1E39\u1E3A\x03\x02" +
		"\x02\x02\u1E3A\u1E3C\x03\x02\x02\x02\u1E3B\u1E35\x03\x02\x02\x02\u1E3B" +
		"\u1E3C\x03\x02\x02\x02\u1E3C\u1E3D\x03\x02\x02\x02\u1E3D\u1E3E\x07B\x02" +
		"\x02\u1E3E\u1E66\x03\x02\x02\x02\u1E3F\u1E41\x07d\x02\x02\u1E40\u1E42" +
		"\x05\f\x07\x02\u1E41\u1E40\x03\x02\x02\x02\u1E42\u1E43\x03\x02\x02\x02" +
		"\u1E43\u1E41\x03\x02\x02\x02\u1E43\u1E44\x03\x02\x02\x02\u1E44\u1E4B\x03" +
		"\x02\x02\x02\u1E45\u1E47\x07\xD6\x02\x02\u1E46\u1E48\x05\f\x07\x02\u1E47" +
		"\u1E46\x03\x02\x02\x02\u1E48\u1E49\x03\x02\x02\x02\u1E49\u1E47\x03\x02" +
		"\x02\x02\u1E49\u1E4A\x03\x02\x02\x02\u1E4A\u1E4C\x03\x02\x02\x02\u1E4B" +
		"\u1E45\x03\x02\x02\x02\u1E4B\u1E4C\x03\x02\x02\x02\u1E4C\u1E4D\x03\x02" +
		"\x02\x02\u1E4D\u1E4E\x05\u023E\u0120\x02\u1E4E\u1E66\x03\x02\x02\x02\u1E4F" +
		"\u1E51\x07a\x02\x02\u1E50\u1E52\x05\f\x07\x02\u1E51\u1E50\x03\x02\x02" +
		"\x02\u1E52\u1E53\x03\x02\x02\x02\u1E53\u1E51\x03\x02\x02\x02\u1E53\u1E54" +
		"\x03\x02\x02\x02\u1E54\u1E55\x03\x02\x02\x02\u1E55\u1E57\x07\u015E\x02" +
		"\x02\u1E56\u1E58\x05\f\x07\x02\u1E57\u1E56\x03\x02\x02\x02\u1E58\u1E59" +
		"\x03\x02\x02\x02\u1E59\u1E57\x03\x02\x02\x02\u1E59\u1E5A\x03\x02\x02\x02" +
		"\u1E5A\u1E61\x03\x02\x02\x02\u1E5B\u1E5D\x07\xD6\x02\x02\u1E5C\u1E5E\x05" +
		"\f\x07\x02\u1E5D\u1E5C\x03\x02\x02\x02\u1E5E\u1E5F\x03\x02\x02\x02\u1E5F" +
		"\u1E5D\x03\x02\x02\x02\u1E5F\u1E60\x03\x02\x02\x02\u1E60\u1E62\x03\x02" +
		"\x02\x02\u1E61\u1E5B\x03\x02\x02\x02\u1E61\u1E62\x03\x02\x02\x02\u1E62" +
		"\u1E63\x03\x02\x02\x02\u1E63\u1E64\x05\u023E\u0120\x02\u1E64\u1E66\x03" +
		"\x02\x02\x02\u1E65\u1DFA\x03\x02\x02\x02\u1E65\u1E0A\x03\x02\x02\x02\u1E65" +
		"\u1E1A\x03\x02\x02\x02\u1E65\u1E2A\x03\x02\x02\x02\u1E65\u1E2B\x03\x02" +
		"\x02\x02\u1E65\u1E2C\x03\x02\x02\x02\u1E65\u1E2D\x03\x02\x02\x02\u1E65" +
		"\u1E2E\x03\x02\x02\x02\u1E65\u1E2F\x03\x02\x02\x02\u1E65\u1E3F\x03\x02" +
		"\x02\x02\u1E65\u1E4F\x03\x02\x02\x02\u1E66\u023D\x03\x02\x02\x02\u1E67" +
		"\u1E77\x07\u01C4\x02\x02\u1E68\u1E6A\x05\f\x07\x02\u1E69\u1E68\x03\x02" +
		"\x02\x02\u1E6A\u1E6B\x03\x02\x02\x02\u1E6B\u1E69\x03\x02\x02\x02\u1E6B" +
		"\u1E6C\x03\x02\x02\x02\u1E6C\u1E6D\x03\x02\x02\x02\u1E6D\u1E6F\t$\x02" +
		"\x02\u1E6E\u1E70\x05\f\x07\x02\u1E6F\u1E6E\x03\x02\x02\x02\u1E70\u1E71" +
		"\x03\x02\x02\x02\u1E71\u1E6F\x03\x02\x02\x02\u1E71\u1E72\x03\x02\x02\x02" +
		"\u1E72\u1E73\x03\x02\x02\x02\u1E73\u1E74\x07\u01C4\x02\x02\u1E74\u1E76" +
		"\x03\x02\x02\x02\u1E75\u1E69\x03\x02\x02\x02\u1E76\u1E79\x03\x02\x02\x02" +
		"\u1E77\u1E75\x03\x02\x02\x02\u1E77\u1E78\x03\x02\x02\x02\u1E78\u023F\x03" +
		"\x02\x02\x02\u1E79\u1E77\x03\x02\x02\x02\u1E7A\u1E7C\x07b\x02\x02\u1E7B" +
		"\u1E7D\x05\f\x07\x02\u1E7C\u1E7B\x03\x02\x02\x02\u1E7D\u1E7E\x03\x02\x02" +
		"\x02\u1E7E\u1E7C\x03\x02\x02\x02\u1E7E\u1E7F\x03\x02\x02\x02\u1E7F\u1E86" +
		"\x03\x02\x02\x02\u1E80\u1E82\x07\u0150\x02\x02\u1E81\u1E83\x05\f\x07\x02" +
		"\u1E82\u1E81\x03\x02\x02\x02\u1E83\u1E84\x03\x02\x02\x02\u1E84\u1E82\x03" +
		"\x02\x02\x02\u1E84\u1E85\x03\x02\x02\x02\u1E85\u1E87\x03\x02\x02\x02\u1E86" +
		"\u1E80\x03\x02\x02\x02\u1E86\u1E87\x03\x02\x02\x02\u1E87\u1E8E\x03\x02" +
		"\x02\x02\u1E88\u1E8A\x07\xD6\x02\x02\u1E89\u1E8B\x05\f\x07\x02\u1E8A\u1E89" +
		"\x03\x02\x02\x02\u1E8B\u1E8C\x03\x02\x02\x02\u1E8C\u1E8A\x03\x02\x02\x02" +
		"\u1E8C\u1E8D\x03\x02\x02\x02\u1E8D\u1E8F\x03\x02\x02\x02\u1E8E\u1E88\x03" +
		"\x02\x02\x02\u1E8E\u1E8F\x03\x02\x02\x02\u1E8F\u1E90\x03\x02\x02\x02\u1E90" +
		"\u1E91\x05\u0242\u0122\x02\u1E91\u0241\x03\x02\x02\x02\u1E92\u1E99\x05" +
		"\u0244\u0123\x02\u1E93\u1E95\x07\u018B\x02\x02\u1E94\u1E96\x05\f\x07\x02" +
		"\u1E95\u1E94\x03\x02\x02\x02\u1E96\u1E97\x03\x02\x02\x02\u1E97\u1E95\x03" +
		"\x02\x02\x02\u1E97\u1E98\x03\x02\x02\x02\u1E98\u1E9A\x03\x02\x02\x02\u1E99" +
		"\u1E93\x03\x02\x02\x02\u1E99\u1E9A\x03\x02\x02\x02\u1E9A\u1E9B\x03\x02" +
		"\x02\x02\u1E9B\u1E9D\x07\u0113\x02\x02\u1E9C\u1E9E\x05\f\x07\x02\u1E9D" +
		"\u1E9C\x03\x02\x02\x02\u1E9E\u1E9F\x03\x02\x02\x02\u1E9F\u1E9D\x03\x02" +
		"\x02\x02\u1E9F\u1EA0\x03\x02\x02\x02\u1EA0\u1EA1\x03\x02\x02\x02\u1EA1" +
		"\u1EA3\x07\u0166\x02\x02\u1EA2\u1EA4\x05\f\x07\x02\u1EA3\u1EA2\x03\x02" +
		"\x02\x02\u1EA4\u1EA5\x03\x02\x02\x02\u1EA5\u1EA3\x03\x02\x02\x02\u1EA5" +
		"\u1EA6\x03\x02\x02\x02\u1EA6\u1EA7\x03\x02\x02\x02\u1EA7\u1EA8\x05\u0246" +
		"\u0124\x02\u1EA8\u1EAB\x03\x02\x02\x02\u1EA9\u1EAB\x07\u01C1\x02\x02\u1EAA" +
		"\u1E92\x03\x02\x02\x02\u1EAA\u1EA9\x03\x02\x02\x02\u1EAB\u0243\x03\x02" +
		"\x02\x02\u1EAC\u1EAD\x07\u01C1\x02\x02\u1EAD\u0245\x03\x02\x02\x02\u1EAE" +
		"\u1EAF\x07\u01C1\x02\x02\u1EAF\u0247\x03\x02\x02\x02\u1EB0\u1EB2\x07;" +
		"\x02\x02\u1EB1\u1EB3\x05\f\x07\x02\u1EB2\u1EB1\x03\x02\x02\x02\u1EB3\u1EB4" +
		"\x03\x02\x02\x02\u1EB4\u1EB2\x03\x02\x02\x02\u1EB4\u1EB5\x03\x02\x02\x02" +
		"\u1EB5\u1EB6\x03\x02\x02\x02\u1EB6\u1EB8\x05\u024A\u0126\x02\u1EB7\u1EB9" +
		"\x05\f\x07\x02\u1EB8\u1EB7\x03\x02\x02\x02\u1EB9\u1EBA\x03\x02\x02\x02" +
		"\u1EBA\u1EB8\x03\x02\x02\x02\u1EBA\u1EBB\x03\x02\x02\x02\u1EBB\u1EC2\x03" +
		"\x02\x02\x02\u1EBC\u1EBE\x07\xD6\x02\x02\u1EBD\u1EBF\x05\f\x07\x02\u1EBE" +
		"\u1EBD\x03\x02\x02\x02\u1EBF\u1EC0\x03\x02\x02\x02\u1EC0\u1EBE\x03\x02" +
		"\x02\x02\u1EC0\u1EC1\x03\x02\x02\x02\u1EC1\u1EC3\x03\x02\x02\x02\u1EC2" +
		"\u1EBC\x03\x02\x02\x02\u1EC2\u1EC3\x03\x02\x02\x02\u1EC3\u1ECB\x03\x02" +
		"\x02\x02\u1EC4\u1EC8\x05\u024C\u0127\x02\u1EC5\u1EC7\x05\f\x07\x02\u1EC6" +
		"\u1EC5\x03\x02\x02\x02\u1EC7\u1ECA\x03\x02\x02\x02\u1EC8\u1EC6\x03\x02" +
		"\x02\x02\u1EC8\u1EC9\x03\x02\x02\x02\u1EC9\u1ECC\x03\x02\x02\x02\u1ECA" +
		"\u1EC8\x03\x02\x02\x02\u1ECB\u1EC4\x03\x02\x02\x02\u1ECC\u1ECD\x03\x02" +
		"\x02\x02\u1ECD\u1ECB\x03\x02\x02\x02\u1ECD\u1ECE\x03\x02\x02\x02\u1ECE" +
		"\u0249\x03\x02\x02\x02\u1ECF\u1ED0\x07\u01C4\x02\x02\u1ED0\u024B\x03\x02" +
		"\x02\x02\u1ED1\u1EDF\x05\u0260\u0131\x02\u1ED2\u1ED4\x05\f\x07\x02\u1ED3" +
		"\u1ED2\x03\x02\x02\x02\u1ED4\u1ED5\x03\x02\x02\x02\u1ED5\u1ED3\x03\x02" +
		"\x02\x02\u1ED5\u1ED6\x03\x02\x02\x02\u1ED6\u1ED7\x03\x02\x02\x02\u1ED7" +
		"\u1ED9\t\x07\x02\x02\u1ED8\u1EDA\x05\f\x07\x02\u1ED9\u1ED8\x03\x02\x02" +
		"\x02\u1EDA\u1EDB\x03\x02\x02\x02\u1EDB\u1ED9\x03\x02\x02\x02\u1EDB\u1EDC" +
		"\x03\x02\x02\x02\u1EDC\u1EDD\x03\x02\x02\x02\u1EDD\u1EDE\x05\u0262\u0132" +
		"\x02\u1EDE\u1EE0\x03\x02\x02\x02\u1EDF\u1ED3\x03\x02\x02\x02\u1EDF\u1EE0" +
		"\x03\x02\x02\x02\u1EE0\u024D\x03\x02\x02\x02\u1EE1\u1EE3\x07\u0167\x02" +
		"\x02\u1EE2\u1EE4\x05\f\x07\x02\u1EE3\u1EE2\x03\x02\x02\x02\u1EE4\u1EE5" +
		"\x03\x02\x02\x02\u1EE5\u1EE3\x03\x02\x02\x02\u1EE5\u1EE6\x03\x02\x02\x02" +
		"\u1EE6\u1EED\x03\x02\x02\x02\u1EE7\u1EE9\x07:\x02\x02\u1EE8\u1EEA\x05" +
		"\f\x07\x02\u1EE9\u1EE8\x03\x02\x02\x02\u1EEA\u1EEB\x03\x02\x02\x02\u1EEB" +
		"\u1EE9\x03\x02\x02\x02\u1EEB\u1EEC\x03\x02\x02\x02\u1EEC\u1EEE\x03\x02" +
		"\x02\x02\u1EED\u1EE7\x03\x02\x02\x02\u1EED\u1EEE\x03\x02\x02\x02\u1EEE" +
		"\u1EF0\x03\x02\x02\x02\u1EEF\u1EF1\x05\u0250\u0129\x02\u1EF0\u1EEF\x03" +
		"\x02\x02\x02\u1EF1\u1EF2\x03\x02\x02\x02\u1EF2\u1EF0\x03\x02\x02\x02\u1EF2" +
		"\u1EF3\x03\x02\x02\x02\u1EF3\u024F\x03\x02\x02\x02\u1EF4\u1EF6\x05\u0252" +
		"\u012A\x02\u1EF5\u1EF4\x03\x02\x02\x02\u1EF6\u1EF7\x03\x02\x02\x02\u1EF7" +
		"\u1EF5\x03\x02\x02\x02\u1EF7\u1EF8\x03\x02\x02\x02\u1EF8\u1EFA\x03\x02" +
		"\x02\x02\u1EF9\u1EFB\x05\u0254\u012B\x02\u1EFA\u1EF9\x03\x02\x02\x02\u1EFA" +
		"\u1EFB\x03\x02\x02\x02\u1EFB\u0251\x03\x02\x02\x02\u1EFC\u1EFE\x05\u0256" +
		"\u012C\x02\u1EFD\u1EFF\x05\f\x07\x02\u1EFE\u1EFD\x03\x02\x02\x02\u1EFF" +
		"\u1F00\x03\x02\x02\x02\u1F00\u1EFE\x03\x02\x02\x02\u1F00\u1F01\x03\x02" +
		"\x02\x02\u1F01\u1F03\x03\x02\x02\x02\u1F02\u1EFC\x03\x02\x02\x02\u1F03" +
		"\u1F04\x03\x02\x02\x02\u1F04\u1F02\x03\x02\x02\x02\u1F04\u1F05\x03\x02" +
		"\x02\x02\u1F05\u1F0C\x03\x02\x02\x02\u1F06\u1F08\t%\x02\x02\u1F07\u1F09" +
		"\x05\f\x07\x02\u1F08\u1F07\x03\x02\x02\x02\u1F09\u1F0A\x03\x02\x02\x02" +
		"\u1F0A\u1F08\x03\x02\x02\x02\u1F0A\u1F0B\x03\x02\x02\x02\u1F0B\u1F0D\x03" +
		"\x02\x02\x02\u1F0C\u1F06\x03\x02\x02\x02\u1F0C\u1F0D\x03\x02\x02\x02\u1F0D" +
		"\u1F14\x03\x02\x02\x02\u1F0E\u1F10\x05\u0258\u012D\x02\u1F0F\u1F11\x05" +
		"\f\x07\x02\u1F10\u1F0F\x03\x02\x02\x02\u1F11\u1F12\x03\x02\x02\x02\u1F12" +
		"\u1F10\x03\x02\x02\x02\u1F12\u1F13\x03\x02\x02\x02\u1F13\u1F15\x03\x02" +
		"\x02\x02\u1F14\u1F0E\x03\x02\x02\x02\u1F15\u1F16\x03\x02\x02\x02\u1F16" +
		"\u1F14\x03\x02\x02\x02\u1F16\u1F17\x03\x02\x02\x02\u1F17\u0253\x03\x02" +
		"\x02\x02\u1F18\u1F1A\x07\xC9\x02\x02\u1F19\u1F1B\x05\f\x07\x02\u1F1A\u1F19" +
		"\x03\x02\x02\x02\u1F1B\u1F1C\x03\x02\x02\x02\u1F1C\u1F1A\x03\x02\x02\x02" +
		"\u1F1C\u1F1D\x03\x02\x02\x02\u1F1D\u1F1E\x03\x02\x02\x02\u1F1E\u1F22\x05" +
		"\u0234\u011B\x02\u1F1F\u1F21\x05\f\x07\x02\u1F20\u1F1F\x03\x02\x02\x02" +
		"\u1F21\u1F24\x03\x02\x02\x02\u1F22\u1F20\x03\x02\x02\x02\u1F22\u1F23\x03" +
		"\x02\x02\x02\u1F23\u0255\x03\x02\x02\x02\u1F24\u1F22\x03\x02\x02\x02\u1F25" +
		"\u1F26\x07\u01C4\x02\x02\u1F26\u0257\x03\x02\x02\x02\u1F27\u1F28\x07\u01C2" +
		"\x02\x02\u1F28\u0259\x03\x02\x02\x02\u1F29\u1F2B\x07\r\x02\x02\u1F2A\u1F2C" +
		"\x05\f\x07\x02\u1F2B\u1F2A\x03\x02\x02\x02\u1F2C\u1F2D\x03\x02\x02\x02" +
		"\u1F2D\u1F2B\x03\x02\x02\x02\u1F2D\u1F2E\x03\x02\x02\x02\u1F2E\u1F2F\x03" +
		"\x02\x02\x02\u1F2F\u1F31\x05\u0234\u011B\x02\u1F30\u1F32\x05\f\x07\x02" +
		"\u1F31\u1F30\x03\x02\x02\x02\u1F32\u1F33\x03\x02\x02\x02\u1F33\u1F31\x03" +
		"\x02\x02\x02\u1F33\u1F34\x03\x02\x02\x02\u1F34\u1F3B\x03\x02\x02\x02\u1F35" +
		"\u1F37\x07\xD6\x02\x02\u1F36\u1F38\x05\f\x07\x02\u1F37\u1F36\x03\x02\x02" +
		"\x02\u1F38\u1F39\x03\x02\x02\x02\u1F39\u1F37\x03\x02\x02\x02\u1F39\u1F3A" +
		"\x03\x02\x02\x02\u1F3A\u1F3C\x03\x02\x02\x02\u1F3B\u1F35\x03\x02\x02\x02" +
		"\u1F3B\u1F3C\x03\x02\x02\x02\u1F3C\u1F3D\x03\x02\x02\x02\u1F3D\u1F3E\x05" +
		"\u025C\u012F\x02\u1F3E\u025B\x03\x02\x02\x02\u1F3F\u1F50\x07\x1D\x02\x02" +
		"\u1F40\u1F50\x07\u015B\x02\x02\u1F41\u1F50\x07\u015C\x02\x02\u1F42\u1F50" +
		"\x07\xF6\x02\x02\u1F43\u1F50\x07~\x02\x02\u1F44\u1F48\x05\u025E\u0130" +
		"\x02\u1F45\u1F47\x05\f\x07\x02\u1F46\u1F45\x03\x02\x02\x02\u1F47\u1F4A" +
		"\x03\x02\x02\x02\u1F48\u1F46\x03\x02\x02\x02\u1F48\u1F49\x03\x02\x02\x02" +
		"\u1F49\u1F4C\x03\x02\x02\x02\u1F4A\u1F48\x03\x02\x02\x02\u1F4B\u1F44\x03" +
		"\x02\x02\x02\u1F4C\u1F4D\x03\x02\x02\x02\u1F4D\u1F4B\x03\x02\x02\x02\u1F4D" +
		"\u1F4E\x03\x02\x02\x02\u1F4E\u1F50\x03\x02\x02\x02\u1F4F\u1F3F\x03\x02" +
		"\x02\x02\u1F4F\u1F40\x03\x02\x02\x02\u1F4F\u1F41\x03\x02\x02\x02\u1F4F" +
		"\u1F42\x03\x02\x02\x02\u1F4F\u1F43\x03\x02\x02\x02\u1F4F\u1F4B\x03\x02" +
		"\x02\x02\u1F50\u025D\x03\x02\x02\x02\u1F51\u1F5F\x05\u0260\u0131\x02\u1F52" +
		"\u1F54\x05\f\x07\x02\u1F53\u1F52\x03\x02\x02\x02\u1F54\u1F55\x03\x02\x02" +
		"\x02\u1F55\u1F53\x03\x02\x02\x02\u1F55\u1F56\x03\x02\x02\x02\u1F56\u1F57" +
		"\x03\x02\x02\x02\u1F57\u1F59\t\x07\x02\x02\u1F58\u1F5A\x05\f\x07\x02\u1F59" +
		"\u1F58\x03\x02\x02\x02\u1F5A\u1F5B\x03\x02\x02\x02\u1F5B\u1F59\x03\x02" +
		"\x02\x02\u1F5B\u1F5C\x03\x02\x02\x02\u1F5C\u1F5D\x03\x02\x02\x02\u1F5D" +
		"\u1F5E\x05\u0262\u0132\x02\u1F5E\u1F60\x03\x02\x02\x02\u1F5F\u1F53\x03" +
		"\x02\x02\x02\u1F5F\u1F60\x03\x02\x02\x02\u1F60\u1F74\x03\x02\x02\x02\u1F61" +
		"\u1F6F\x05\u0260\u0131\x02\u1F62\u1F64\x05\f\x07\x02\u1F63\u1F62\x03\x02" +
		"\x02\x02\u1F64\u1F65\x03\x02\x02\x02\u1F65\u1F63\x03\x02\x02\x02\u1F65" +
		"\u1F66\x03\x02\x02\x02\u1F66\u1F67\x03\x02\x02\x02\u1F67\u1F69\x07\x11" +
		"\x02\x02\u1F68\u1F6A\x05\f\x07\x02\u1F69\u1F68\x03\x02\x02\x02\u1F6A\u1F6B" +
		"\x03\x02\x02\x02\u1F6B\u1F69\x03\x02\x02\x02\u1F6B\u1F6C\x03\x02\x02\x02" +
		"\u1F6C\u1F6D\x03\x02\x02\x02\u1F6D\u1F6E\x05\u0264\u0133\x02\u1F6E\u1F70" +
		"\x03\x02\x02\x02\u1F6F\u1F63\x03\x02\x02\x02\u1F70\u1F71\x03\x02\x02\x02" +
		"\u1F71\u1F6F\x03\x02\x02\x02\u1F71\u1F72\x03\x02\x02\x02\u1F72\u1F74\x03" +
		"\x02\x02\x02\u1F73\u1F51\x03\x02\x02\x02\u1F73\u1F61\x03\x02\x02\x02\u1F74" +
		"\u025F\x03\x02\x02\x02\u1F75\u1F76\t\x16\x02\x02\u1F76\u0261\x03\x02\x02" +
		"\x02\u1F77\u1F78\t\x16\x02\x02\u1F78\u0263\x03\x02\x02\x02\u1F79\u1F7A" +
		"\t\x16\x02\x02\u1F7A\u0265\x03\x02\x02\x02\u1F7B\u1F7D\x07\u0165\x02\x02" +
		"\u1F7C\u1F7E\x05\f\x07\x02\u1F7D\u1F7C\x03\x02\x02\x02\u1F7E\u1F7F\x03" +
		"\x02\x02\x02\u1F7F\u1F7D\x03\x02\x02\x02\u1F7F\u1F80\x03\x02\x02\x02\u1F80" +
		"\u1F81\x03\x02\x02\x02\u1F81\u1F85\x05\u0270\u0139\x02\u1F82\u1F84\x05" +
		"\f\x07\x02\u1F83\u1F82\x03\x02\x02\x02\u1F84\u1F87\x03\x02\x02\x02\u1F85" +
		"\u1F83\x03\x02\x02\x02\u1F85\u1F86\x03\x02\x02\x02\u1F86\u1F96\x03\x02" +
		"\x02\x02\u1F87\u1F85\x03\x02\x02\x02\u1F88\u1F8A\x07\xD6\x02\x02\u1F89" +
		"\u1F8B\x05\f\x07\x02\u1F8A\u1F89\x03\x02\x02\x02\u1F8B\u1F8C\x03\x02\x02" +
		"\x02\u1F8C\u1F8A\x03\x02\x02\x02\u1F8C\u1F8D\x03\x02\x02\x02\u1F8D\u1F8F" +
		"\x03\x02\x02\x02\u1F8E\u1F88\x03\x02\x02\x02\u1F8E\u1F8F\x03\x02\x02\x02" +
		"\u1F8F\u1F90\x03\x02\x02\x02\u1F90\u1F92\x05\u026E\u0138\x02\u1F91\u1F93" +
		"\x05\f\x07\x02\u1F92\u1F91\x03\x02\x02\x02\u1F93\u1F94\x03\x02\x02\x02" +
		"\u1F94\u1F92\x03\x02\x02\x02\u1F94\u1F95\x03\x02\x02\x02\u1F95\u1F97\x03" +
		"\x02\x02\x02\u1F96\u1F8E\x03\x02\x02\x02\u1F96\u1F97\x03\x02\x02\x02\u1F97" +
		"\u1FAC\x03\x02\x02\x02\u1F98\u1FA0\x05\u0268\u0135\x02\u1F99\u1F9B\x05" +
		"\f\x07\x02\u1F9A\u1F99\x03\x02\x02\x02\u1F9B\u1F9C\x03\x02\x02\x02\u1F9C" +
		"\u1F9A\x03\x02\x02\x02\u1F9C\u1F9D\x03\x02\x02\x02\u1F9D\u1F9E\x03\x02" +
		"\x02\x02\u1F9E\u1F9F\x05\u026A\u0136\x02\u1F9F\u1FA1\x03\x02\x02\x02\u1FA0" +
		"\u1F9A\x03\x02\x02\x02\u1FA0\u1FA1\x03\x02\x02\x02\u1FA1\u1FAD\x03\x02" +
		"\x02\x02\u1FA2\u1FAA\x05\u026A\u0136\x02\u1FA3\u1FA5\x05\f\x07\x02\u1FA4" +
		"\u1FA3\x03\x02\x02\x02\u1FA5\u1FA6\x03\x02\x02\x02\u1FA6\u1FA4\x03\x02" +
		"\x02\x02\u1FA6\u1FA7\x03\x02\x02\x02\u1FA7\u1FA8\x03\x02\x02\x02\u1FA8" +
		"\u1FA9\x05\u0268\u0135\x02\u1FA9\u1FAB\x03\x02\x02\x02\u1FAA\u1FA4\x03" +
		"\x02\x02\x02\u1FAA\u1FAB\x03\x02\x02\x02\u1FAB\u1FAD\x03\x02\x02\x02\u1FAC" +
		"\u1F98\x03\x02\x02\x02\u1FAC\u1FA2\x03\x02\x02\x02\u1FAC\u1FAD\x03\x02" +
		"\x02\x02\u1FAD\u1FB1\x03\x02\x02\x02\u1FAE\u1FB0\x05\f\x07\x02\u1FAF\u1FAE" +
		"\x03\x02\x02\x02\u1FB0\u1FB3\x03\x02\x02\x02\u1FB1\u1FAF\x03\x02\x02\x02" +
		"\u1FB1\u1FB2\x03\x02\x02\x02\u1FB2\u0267\x03\x02\x02\x02\u1FB3\u1FB1\x03" +
		"\x02\x02\x02\u1FB4\u1FB6\x07\u0102\x02\x02\u1FB5\u1FB7\x05\f\x07\x02\u1FB6" +
		"\u1FB5\x03\x02\x02\x02\u1FB7\u1FB8\x03\x02\x02\x02\u1FB8\u1FB6\x03\x02" +
		"\x02\x02\u1FB8\u1FB9\x03\x02\x02\x02\u1FB9\u1FC0\x03\x02\x02\x02\u1FBA" +
		"\u1FBC\x07\u015E\x02\x02\u1FBB\u1FBD\x05\f\x07\x02\u1FBC\u1FBB\x03\x02" +
		"\x02\x02\u1FBD\u1FBE\x03\x02\x02\x02\u1FBE\u1FBC\x03\x02\x02\x02\u1FBE" +
		"\u1FBF\x03\x02\x02\x02\u1FBF\u1FC1\x03\x02\x02\x02\u1FC0\u1FBA\x03\x02" +
		"\x02\x02\u1FC0\u1FC1\x03\x02\x02\x02\u1FC1\u1FC8\x03\x02\x02\x02\u1FC2" +
		"\u1FC4\x07\xD6\x02\x02\u1FC3\u1FC5\x05\f\x07\x02\u1FC4\u1FC3\x03\x02\x02" +
		"\x02\u1FC5\u1FC6\x03\x02\x02\x02\u1FC6\u1FC4\x03\x02\x02\x02\u1FC6\u1FC7" +
		"\x03\x02\x02\x02\u1FC7\u1FC9\x03\x02\x02\x02\u1FC8\u1FC2\x03\x02\x02\x02" +
		"\u1FC8\u1FC9\x03\x02\x02\x02\u1FC9\u1FCA\x03\x02\x02\x02\u1FCA\u1FCB\x05" +
		"\u026C\u0137\x02\u1FCB\u0269\x03\x02\x02\x02\u1FCC\u1FCE\x07\u0100\x02" +
		"\x02\u1FCD\u1FCF\x05\f\x07\x02\u1FCE\u1FCD\x03\x02\x02\x02\u1FCF\u1FD0" +
		"\x03\x02\x02\x02\u1FD0\u1FCE\x03\x02\x02\x02\u1FD0\u1FD1\x03\x02\x02\x02" +
		"\u1FD1\u1FD8\x03\x02\x02\x02\u1FD2\u1FD4\x07\u015E\x02\x02\u1FD3\u1FD5" +
		"\x05\f\x07\x02\u1FD4\u1FD3\x03\x02\x02\x02\u1FD5\u1FD6\x03\x02\x02\x02" +
		"\u1FD6\u1FD4\x03\x02\x02\x02\u1FD6\u1FD7\x03\x02\x02\x02\u1FD7\u1FD9\x03" +
		"\x02\x02\x02\u1FD8\u1FD2\x03\x02\x02\x02\u1FD8\u1FD9\x03\x02\x02\x02\u1FD9" +
		"\u1FE0\x03\x02\x02\x02\u1FDA\u1FDC\x07\xD6\x02\x02\u1FDB\u1FDD\x05\f\x07" +
		"\x02\u1FDC\u1FDB\x03\x02\x02\x02\u1FDD\u1FDE\x03\x02\x02\x02\u1FDE\u1FDC" +
		"\x03\x02\x02\x02\u1FDE\u1FDF\x03\x02\x02\x02\u1FDF\u1FE1\x03\x02\x02\x02" +
		"\u1FE0\u1FDA\x03\x02\x02\x02\u1FE0\u1FE1\x03\x02\x02\x02\u1FE1\u1FE2\x03" +
		"\x02\x02\x02\u1FE2\u1FE3\x05\u026C\u0137\x02\u1FE3\u026B\x03\x02\x02\x02" +
		"\u1FE4\u1FE5\x07\u01C4\x02\x02\u1FE5\u026D\x03\x02\x02\x02\u1FE6\u1FE7" +
		"\x07\u01C4\x02\x02\u1FE7\u026F\x03\x02\x02\x02\u1FE8\u1FE9\x07\u01C2\x02" +
		"\x02\u1FE9\u0271\x03\x02\x02\x02\u1FEA\u1FEB\x07\u01C4\x02\x02\u1FEB\u0273" +
		"\x03\x02\x02\x02\u1FEC\u1FED\t&\x02\x02\u1FED\u0275\x03\x02\x02\x02\u1FEE" +
		"\u1FEF\x07\u01C4\x02\x02\u1FEF\u0277\x03\x02\x02\x02\u1FF0\u1FF1\t\'\x02" +
		"\x02\u1FF1\u0279\x03\x02\x02\x02\u1FF2\u1FF3\x07\u01C4\x02\x02\u1FF3\u027B" +
		"\x03\x02\x02\x02\u1FF4\u1FF8\x07\xAB\x02\x02\u1FF5\u1FF7\x05\f\x07\x02" +
		"\u1FF6\u1FF5\x03\x02\x02\x02\u1FF7\u1FFA\x03\x02\x02\x02\u1FF8\u1FF6\x03" +
		"\x02\x02\x02\u1FF8\u1FF9\x03\x02\x02\x02\u1FF9\u1FFB\x03\x02\x02\x02\u1FFA" +
		"\u1FF8\x03\x02\x02\x02\u1FFB\u1FFF\x07\u01BE\x02\x02\u1FFC\u1FFE\x05\f" +
		"\x07\x02\u1FFD\u1FFC\x03\x02\x02\x02\u1FFE\u2001\x03\x02\x02\x02\u1FFF" +
		"\u1FFD\x03\x02\x02\x02\u1FFF\u2000\x03\x02\x02\x02\u2000\u200B\x03\x02" +
		"\x02\x02\u2001\u1FFF\x03\x02\x02\x02\u2002\u2006\x05\u027E\u0140\x02\u2003" +
		"\u2005\x05\f\x07\x02\u2004\u2003\x03\x02\x02\x02\u2005\u2008\x03\x02\x02" +
		"\x02\u2006\u2004\x03\x02\x02\x02\u2006\u2007\x03\x02\x02\x02\u2007\u200A" +
		"\x03\x02\x02\x02\u2008\u2006\x03\x02\x02\x02\u2009\u2002\x03\x02\x02\x02" +
		"\u200A\u200D\x03\x02\x02\x02\u200B\u2009\x03\x02\x02\x02\u200B\u200C\x03" +
		"\x02\x02\x02\u200C\u027D\x03\x02\x02\x02\u200D\u200B\x03\x02\x02\x02\u200E" +
		"\u2010\x07\u014B\x02\x02\u200F\u2011\x05\f\x07\x02\u2010\u200F\x03\x02" +
		"\x02\x02\u2011\u2012\x03\x02\x02\x02\u2012\u2010\x03\x02\x02\x02\u2012" +
		"\u2013\x03\x02\x02\x02\u2013\u201A\x03\x02\x02\x02\u2014\u2016\x07\u0104" +
		"\x02\x02\u2015\u2017\x05\f\x07\x02\u2016\u2015\x03\x02\x02\x02\u2017\u2018" +
		"\x03\x02\x02\x02\u2018\u2016\x03\x02\x02\x02\u2018\u2019\x03\x02\x02\x02" +
		"\u2019\u201B\x03\x02\x02\x02\u201A\u2014\x03\x02\x02\x02\u201A\u201B\x03" +
		"\x02\x02\x02\u201B\u201C\x03\x02\x02\x02\u201C\u2020\x05\u02A8\u0155\x02" +
		"\u201D\u201F\x05\f\x07\x02\u201E\u201D\x03\x02\x02\x02\u201F\u2022\x03" +
		"\x02\x02\x02\u2020\u201E\x03\x02\x02\x02\u2020\u2021\x03\x02\x02\x02\u2021" +
		"\u2023\x03\x02\x02\x02\u2022\u2020\x03\x02\x02\x02\u2023\u2027\x05\u02A2" +
		"\u0152\x02\u2024\u2026\x05\f\x07\x02\u2025\u2024\x03\x02\x02\x02\u2026" +
		"\u2029\x03\x02\x02\x02\u2027\u2025\x03\x02\x02\x02\u2027\u2028\x03\x02" +
		"\x02\x02\u2028\u2031\x03\x02\x02\x02\u2029\u2027\x03\x02\x02\x02\u202A" +
		"\u202E\x05\u028A\u0146\x02\u202B\u202D\x05\f\x07\x02\u202C\u202B\x03\x02" +
		"\x02\x02\u202D\u2030\x03\x02\x02\x02\u202E\u202C\x03\x02\x02\x02\u202E" +
		"\u202F\x03\x02\x02\x02\u202F\u2032\x03\x02\x02\x02\u2030\u202E\x03\x02" +
		"\x02\x02\u2031\u202A\x03\x02\x02\x02\u2031\u2032\x03\x02\x02\x02\u2032" +
		"\u203A\x03\x02\x02\x02\u2033\u2037\x05\u0294\u014B\x02\u2034\u2036\x05" +
		"\f\x07\x02\u2035\u2034\x03\x02\x02\x02\u2036\u2039\x03\x02\x02\x02\u2037" +
		"\u2035\x03\x02\x02\x02\u2037\u2038\x03\x02\x02\x02\u2038\u203B\x03\x02" +
		"\x02\x02\u2039\u2037\x03\x02\x02\x02\u203A\u2033\x03\x02\x02\x02\u203A" +
		"\u203B\x03\x02\x02\x02\u203B\u2043\x03\x02\x02\x02\u203C\u2040\x05\u029C" +
		"\u014F\x02\u203D\u203F\x05\f\x07\x02\u203E\u203D\x03\x02\x02\x02\u203F" +
		"\u2042\x03\x02\x02\x02\u2040\u203E\x03\x02\x02\x02\u2040\u2041\x03\x02" +
		"\x02\x02\u2041\u2044\x03\x02\x02\x02\u2042\u2040\x03";
	private static readonly _serializedATNSegment16: string =
		"\x02\x02\x02\u2043\u203C\x03\x02\x02\x02\u2043\u2044\x03\x02\x02\x02\u2044" +
		"\u204C\x03\x02\x02\x02\u2045\u2049\x05\u029A\u014E\x02\u2046\u2048\x05" +
		"\f\x07\x02\u2047\u2046\x03\x02\x02\x02\u2048\u204B\x03\x02\x02\x02\u2049" +
		"\u2047\x03\x02\x02\x02\u2049\u204A\x03\x02\x02\x02\u204A\u204D\x03\x02" +
		"\x02\x02\u204B\u2049\x03\x02\x02\x02\u204C\u2045\x03\x02\x02\x02\u204C" +
		"\u204D\x03\x02\x02\x02\u204D\u2055\x03\x02\x02\x02\u204E\u2052\x05\u0290" +
		"\u0149\x02\u204F\u2051\x05\f\x07\x02\u2050\u204F\x03\x02\x02\x02\u2051" +
		"\u2054\x03\x02\x02\x02\u2052\u2050\x03\x02\x02\x02\u2052\u2053\x03\x02" +
		"\x02\x02\u2053\u2056\x03\x02\x02\x02\u2054\u2052\x03\x02\x02\x02\u2055" +
		"\u204E\x03\x02\x02\x02\u2055\u2056\x03\x02\x02\x02\u2056\u205E\x03\x02" +
		"\x02\x02\u2057\u205B\x05\u028E\u0148\x02\u2058\u205A\x05\f\x07\x02\u2059" +
		"\u2058\x03\x02\x02\x02\u205A\u205D\x03\x02\x02\x02\u205B\u2059\x03\x02" +
		"\x02\x02\u205B\u205C\x03\x02\x02\x02\u205C\u205F\x03\x02\x02\x02\u205D" +
		"\u205B\x03\x02\x02\x02\u205E\u2057\x03\x02\x02\x02\u205E\u205F\x03\x02" +
		"\x02\x02\u205F\u2067\x03\x02\x02\x02\u2060\u2064\x05\u0288\u0145\x02\u2061" +
		"\u2063\x05\f\x07\x02\u2062\u2061\x03\x02\x02\x02\u2063\u2066\x03\x02\x02" +
		"\x02\u2064\u2062\x03\x02\x02\x02\u2064\u2065\x03\x02\x02\x02\u2065\u2068" +
		"\x03\x02\x02\x02\u2066\u2064\x03\x02\x02\x02\u2067\u2060\x03\x02\x02\x02" +
		"\u2067\u2068\x03\x02\x02\x02\u2068\u2072\x03\x02\x02\x02\u2069\u206D\x05" +
		"\u0284\u0143\x02\u206A\u206C\x05\f\x07\x02\u206B\u206A\x03\x02\x02\x02" +
		"\u206C\u206F\x03\x02\x02\x02\u206D\u206B\x03\x02\x02\x02\u206D\u206E\x03" +
		"\x02\x02\x02\u206E\u2071\x03\x02\x02\x02\u206F\u206D\x03\x02\x02\x02\u2070" +
		"\u2069\x03\x02\x02\x02\u2071\u2074\x03\x02\x02\x02\u2072\u2070\x03\x02" +
		"\x02\x02\u2072\u2073\x03\x02\x02\x02\u2073\u207C\x03\x02\x02\x02\u2074" +
		"\u2072\x03\x02\x02\x02\u2075\u2079\x05\u0296\u014C\x02\u2076\u2078\x05" +
		"\f\x07\x02\u2077\u2076\x03\x02\x02\x02\u2078\u207B\x03\x02\x02\x02\u2079" +
		"\u2077\x03\x02\x02\x02\u2079\u207A\x03\x02\x02\x02\u207A\u207D\x03\x02" +
		"\x02\x02\u207B\u2079\x03\x02\x02\x02\u207C\u2075\x03\x02\x02\x02\u207C" +
		"\u207D\x03\x02\x02\x02\u207D\u2085\x03\x02\x02\x02\u207E\u2082\x05\u0280" +
		"\u0141\x02\u207F\u2081\x05\f\x07\x02\u2080\u207F\x03\x02\x02\x02\u2081" +
		"\u2084\x03\x02\x02\x02\u2082\u2080\x03\x02\x02\x02\u2082\u2083\x03\x02" +
		"\x02\x02\u2083\u2086\x03\x02\x02\x02\u2084\u2082\x03\x02\x02\x02\u2085" +
		"\u207E\x03\x02\x02\x02\u2085\u2086\x03\x02\x02\x02\u2086\u2087\x03\x02" +
		"\x02\x02\u2087\u2088\x07\u01BE\x02\x02\u2088\u027F\x03\x02\x02\x02\u2089" +
		"\u208B\x07\xAA\x02\x02\u208A\u208C\x05\f\x07\x02\u208B\u208A\x03\x02\x02" +
		"\x02\u208C\u208D\x03\x02\x02\x02\u208D\u208B\x03\x02\x02\x02\u208D\u208E" +
		"\x03\x02\x02\x02\u208E\u2090\x03\x02\x02\x02\u208F\u2089\x03\x02\x02\x02" +
		"\u208F\u2090\x03\x02\x02\x02\u2090\u2091\x03\x02\x02\x02\u2091\u2093\x07" +
		"\u015E\x02\x02\u2092\u2094\x05\f\x07\x02\u2093\u2092\x03\x02\x02\x02\u2094" +
		"\u2095\x03\x02\x02\x02\u2095\u2093\x03\x02\x02\x02\u2095\u2096\x03\x02" +
		"\x02\x02\u2096\u209D\x03\x02\x02\x02\u2097\u2099\x07\xD6\x02\x02\u2098" +
		"\u209A\x05\f\x07\x02\u2099\u2098\x03\x02\x02\x02\u209A\u209B\x03\x02\x02" +
		"\x02\u209B\u2099\x03\x02\x02\x02\u209B\u209C\x03\x02\x02\x02\u209C\u209E" +
		"\x03\x02\x02\x02\u209D\u2097\x03\x02\x02\x02\u209D\u209E\x03\x02\x02\x02" +
		"\u209E\u209F\x03\x02\x02\x02\u209F\u20A0\x05\u0282\u0142\x02\u20A0\u0281" +
		"\x03\x02\x02\x02\u20A1\u20A2\x05\u023E\u0120\x02\u20A2\u0283\x03\x02\x02" +
		"\x02\u20A3\u20A5\x07\x13\x02\x02\u20A4\u20A6\x05\f\x07\x02\u20A5\u20A4" +
		"\x03\x02\x02\x02\u20A6\u20A7\x03\x02\x02\x02\u20A7\u20A5\x03\x02\x02\x02" +
		"\u20A7\u20A8\x03\x02\x02\x02\u20A8\u20AA\x03\x02\x02\x02\u20A9\u20A3\x03" +
		"\x02\x02\x02\u20A9\u20AA\x03\x02\x02\x02\u20AA\u20AB\x03\x02\x02\x02\u20AB" +
		"\u20AD\x07\u0126\x02\x02\u20AC\u20AE\x05\f\x07\x02\u20AD\u20AC\x03\x02" +
		"\x02\x02\u20AE\u20AF\x03\x02\x02\x02\u20AF\u20AD\x03\x02\x02\x02\u20AF" +
		"\u20B0\x03\x02\x02\x02\u20B0\u20B7\x03\x02\x02\x02\u20B1\u20B3\x07\xDB" +
		"\x02\x02\u20B2\u20B4\x05\f\x07\x02\u20B3\u20B2\x03\x02\x02\x02\u20B4\u20B5" +
		"\x03\x02\x02\x02\u20B5\u20B3\x03\x02\x02\x02\u20B5\u20B6\x03\x02\x02\x02" +
		"\u20B6\u20B8\x03\x02\x02\x02\u20B7\u20B1\x03\x02\x02\x02\u20B7\u20B8\x03" +
		"\x02\x02\x02\u20B8\u20BF\x03\x02\x02\x02\u20B9\u20BB\x07\xD6\x02\x02\u20BA" +
		"\u20BC\x05\f\x07\x02\u20BB\u20BA\x03\x02\x02\x02\u20BC\u20BD\x03\x02\x02" +
		"\x02\u20BD\u20BB\x03\x02\x02\x02\u20BD\u20BE\x03\x02\x02\x02\u20BE\u20C0" +
		"\x03\x02\x02\x02\u20BF\u20B9\x03\x02\x02\x02\u20BF\u20C0\x03\x02\x02\x02" +
		"\u20C0\u20C1\x03\x02\x02\x02\u20C1\u20D1\x05\u0286\u0144\x02\u20C2\u20C4" +
		"\x05\f\x07\x02\u20C3\u20C2\x03\x02\x02\x02\u20C4\u20C5\x03\x02\x02\x02" +
		"\u20C5\u20C3\x03\x02\x02\x02\u20C5\u20C6\x03\x02\x02\x02\u20C6\u20CD\x03" +
		"\x02\x02\x02\u20C7\u20C9\x07\u018B\x02\x02\u20C8\u20CA\x05\f\x07\x02\u20C9" +
		"\u20C8\x03\x02\x02\x02\u20CA\u20CB\x03\x02\x02\x02\u20CB\u20C9\x03\x02" +
		"\x02\x02\u20CB\u20CC\x03\x02\x02\x02\u20CC\u20CE\x03\x02\x02\x02\u20CD" +
		"\u20C7\x03\x02\x02\x02\u20CD\u20CE\x03\x02\x02\x02\u20CE\u20CF\x03\x02" +
		"\x02\x02\u20CF\u20D0\x07|\x02\x02\u20D0\u20D2\x03\x02\x02\x02\u20D1\u20C3" +
		"\x03\x02\x02\x02\u20D1\u20D2\x03\x02\x02\x02\u20D2\u20DA\x03\x02\x02\x02" +
		"\u20D3\u20D5\x05\f\x07\x02\u20D4\u20D3\x03\x02\x02\x02\u20D5\u20D6\x03" +
		"\x02\x02\x02\u20D6\u20D4\x03\x02\x02\x02\u20D6\u20D7\x03\x02\x02\x02\u20D7" +
		"\u20D8\x03\x02\x02\x02\u20D8\u20D9\t\v\x02\x02\u20D9\u20DB\x03\x02\x02" +
		"\x02\u20DA\u20D4\x03\x02\x02\x02\u20DA\u20DB\x03\x02\x02\x02\u20DB\u0285" +
		"\x03\x02\x02\x02\u20DC\u20F9\x05\u023E\u0120\x02\u20DD\u20E1\x07\u01C4" +
		"\x02\x02\u20DE\u20E0\x05\f\x07\x02\u20DF\u20DE\x03\x02\x02\x02\u20E0\u20E3" +
		"\x03\x02\x02\x02\u20E1\u20DF\x03\x02\x02\x02\u20E1\u20E2\x03\x02\x02\x02" +
		"\u20E2\u20E4\x03\x02\x02\x02\u20E3\u20E1\x03\x02\x02\x02\u20E4\u20E8\x07" +
		"\u01B3\x02\x02\u20E5\u20E7\x05\f\x07\x02\u20E6\u20E5\x03\x02\x02\x02\u20E7" +
		"\u20EA\x03\x02\x02\x02\u20E8\u20E6\x03\x02\x02\x02\u20E8\u20E9\x03\x02" +
		"\x02\x02\u20E9\u20EB\x03\x02\x02\x02\u20EA\u20E8\x03\x02\x02\x02\u20EB" +
		"\u20F5\x05\u023E\u0120\x02\u20EC\u20EE\x05\f\x07\x02\u20ED\u20EC\x03\x02" +
		"\x02\x02\u20EE\u20F1\x03\x02\x02\x02\u20EF\u20ED\x03\x02\x02\x02\u20EF" +
		"\u20F0\x03\x02\x02\x02\u20F0\u20F2\x03\x02\x02\x02\u20F1\u20EF\x03\x02" +
		"\x02\x02\u20F2\u20F4\x05\u023E\u0120\x02\u20F3\u20EF\x03\x02\x02\x02\u20F4" +
		"\u20F7\x03\x02\x02\x02\u20F5\u20F3\x03\x02\x02\x02\u20F5\u20F6\x03\x02" +
		"\x02\x02\u20F6\u20F9\x03\x02\x02\x02\u20F7\u20F5\x03\x02\x02\x02\u20F8" +
		"\u20DC\x03\x02\x02\x02\u20F8\u20DD\x03\x02\x02\x02\u20F9\u0287\x03\x02" +
		"\x02\x02\u20FA\u20FC\x07\x07\x02\x02\u20FB\u20FD\x05\f\x07\x02\u20FC\u20FB" +
		"\x03\x02\x02\x02\u20FD\u20FE\x03\x02\x02\x02\u20FE\u20FC\x03\x02\x02\x02" +
		"\u20FE\u20FF\x03\x02\x02\x02\u20FF\u2106\x03\x02\x02\x02\u2100\u2102\x07" +
		"\xF1\x02\x02\u2101\u2103\x05\f\x07\x02\u2102\u2101\x03\x02\x02\x02\u2103" +
		"\u2104\x03\x02\x02\x02\u2104\u2102\x03\x02\x02\x02\u2104\u2105\x03\x02" +
		"\x02\x02\u2105\u2107\x03\x02\x02\x02\u2106\u2100\x03\x02\x02\x02\u2106" +
		"\u2107\x03\x02\x02\x02\u2107\u210E\x03\x02\x02\x02\u2108\u210A\x07\xD6" +
		"\x02\x02\u2109\u210B\x05\f\x07\x02\u210A\u2109\x03\x02\x02\x02\u210B\u210C" +
		"\x03\x02\x02\x02\u210C\u210A\x03\x02\x02\x02\u210C\u210D\x03\x02\x02\x02" +
		"\u210D\u210F\x03\x02\x02\x02\u210E\u2108\x03\x02\x02\x02\u210E\u210F\x03" +
		"\x02\x02\x02\u210F\u2111\x03\x02\x02\x02\u2110\u20FA\x03\x02\x02\x02\u2110" +
		"\u2111\x03\x02\x02\x02\u2111\u2112\x03\x02\x02\x02\u2112\u2130\t(\x02" +
		"\x02\u2113\u2115\x05\f\x07\x02\u2114\u2113\x03\x02\x02\x02\u2115\u2116" +
		"\x03\x02\x02\x02\u2116\u2114\x03\x02\x02\x02\u2116\u2117\x03\x02\x02\x02" +
		"\u2117\u2118\x03\x02\x02\x02\u2118\u211A\x07\u012B\x02\x02\u2119\u211B" +
		"\x05\f\x07\x02\u211A\u2119\x03\x02\x02\x02\u211B\u211C\x03\x02\x02\x02" +
		"\u211C\u211A\x03\x02\x02\x02\u211C\u211D\x03\x02\x02\x02\u211D\u2124\x03" +
		"\x02\x02\x02\u211E\u2120\x07\xDB\x02\x02\u211F\u2121\x05\f\x07\x02\u2120" +
		"\u211F\x03\x02\x02\x02\u2121\u2122\x03\x02\x02\x02\u2122\u2120\x03\x02" +
		"\x02\x02\u2122\u2123\x03\x02\x02\x02\u2123\u2125\x03\x02\x02\x02\u2124" +
		"\u211E\x03\x02\x02\x02\u2124\u2125\x03\x02\x02\x02\u2125\u212C\x03\x02" +
		"\x02\x02\u2126\u2128\x07\xD6\x02\x02\u2127\u2129\x05\f\x07\x02\u2128\u2127" +
		"\x03\x02\x02\x02\u2129\u212A\x03\x02\x02\x02\u212A\u2128\x03\x02\x02\x02" +
		"\u212A\u212B\x03\x02\x02\x02\u212B\u212D\x03\x02\x02\x02\u212C\u2126\x03" +
		"\x02\x02\x02\u212C\u212D\x03\x02\x02\x02\u212D\u212E\x03\x02\x02\x02\u212E" +
		"\u212F\x05\u023E\u0120\x02\u212F\u2131\x03\x02\x02\x02\u2130\u2114\x03" +
		"\x02\x02\x02\u2130\u2131\x03\x02\x02\x02\u2131\u0289\x03\x02\x02\x02\u2132" +
		"\u2134\x07\u0137\x02\x02\u2133\u2135\x05\f\x07\x02\u2134\u2133\x03\x02" +
		"\x02\x02\u2135\u2136\x03\x02\x02\x02\u2136\u2134\x03\x02\x02\x02\u2136" +
		"\u2137\x03\x02\x02\x02\u2137\u2138\x03\x02\x02\x02\u2138\u2140\x05\u028C" +
		"\u0147\x02\u2139\u213B\x05\f\x07\x02\u213A\u2139\x03\x02\x02\x02\u213B" +
		"\u213C\x03\x02\x02\x02\u213C\u213A\x03\x02\x02\x02\u213C\u213D\x03\x02" +
		"\x02\x02\u213D\u213E\x03\x02\x02\x02\u213E\u213F\t)\x02\x02\u213F\u2141" +
		"\x03\x02\x02\x02\u2140\u213A\x03\x02\x02\x02\u2140\u2141\x03\x02\x02\x02" +
		"\u2141\u028B\x03\x02\x02\x02\u2142\u2143\x07\u01C2\x02\x02\u2143\u028D" +
		"\x03\x02\x02\x02\u2144\u2146\x07\u0126\x02\x02\u2145\u2147\x05\f\x07\x02" +
		"\u2146\u2145\x03\x02\x02\x02\u2147\u2148\x03\x02\x02\x02\u2148\u2146\x03" +
		"\x02\x02\x02\u2148\u2149\x03\x02\x02\x02\u2149\u214A\x03\x02\x02\x02\u214A" +
		"\u214C\x07r\x02\x02\u214B\u214D\x05\f\x07\x02\u214C\u214B\x03\x02\x02" +
		"\x02\u214D\u214E\x03\x02\x02\x02\u214E\u214C\x03\x02\x02\x02\u214E\u214F" +
		"\x03\x02\x02\x02\u214F\u2156\x03\x02\x02\x02\u2150\u2152\x07\xD6\x02\x02" +
		"\u2151\u2153\x05\f\x07\x02\u2152\u2151\x03\x02\x02\x02\u2153\u2154\x03" +
		"\x02\x02\x02\u2154\u2152\x03\x02\x02\x02\u2154\u2155\x03\x02\x02\x02\u2155" +
		"\u2157\x03\x02\x02\x02\u2156\u2150\x03\x02\x02\x02\u2156\u2157\x03\x02" +
		"\x02\x02\u2157\u2158\x03\x02\x02\x02\u2158\u2159\x07\u015B\x02\x02\u2159" +
		"\u028F\x03\x02\x02\x02\u215A\u215C\x07\u010B\x02\x02\u215B\u215D\x05\f" +
		"\x07\x02\u215C\u215B\x03\x02\x02\x02\u215D\u215E\x03\x02\x02\x02\u215E" +
		"\u215C\x03\x02\x02\x02\u215E\u215F\x03\x02\x02\x02\u215F\u2166\x03\x02" +
		"\x02\x02\u2160\u2162\x079\x02\x02\u2161\u2163\x05\f\x07\x02\u2162\u2161" +
		"\x03\x02\x02\x02\u2163\u2164\x03\x02\x02\x02\u2164\u2162\x03\x02\x02\x02" +
		"\u2164\u2165\x03\x02\x02\x02\u2165\u2167\x03\x02\x02\x02\u2166\u2160\x03" +
		"\x02\x02\x02\u2166\u2167\x03\x02\x02\x02\u2167\u216E\x03\x02\x02\x02\u2168" +
		"\u216A\x07\xD6\x02\x02\u2169\u216B\x05\f\x07\x02\u216A\u2169\x03\x02\x02" +
		"\x02\u216B\u216C\x03\x02\x02\x02\u216C\u216A\x03\x02\x02\x02\u216C\u216D" +
		"\x03\x02\x02\x02\u216D\u216F\x03\x02\x02\x02\u216E\u2168\x03\x02\x02\x02" +
		"\u216E\u216F\x03\x02\x02\x02\u216F\u2170\x03\x02\x02\x02\u2170\u2171\x05" +
		"\u0292\u014A\x02\u2171\u0291\x03\x02\x02\x02\u2172\u2173\x07\u01C1\x02" +
		"\x02\u2173\u0293\x03\x02\x02\x02\u2174\u2176\x07\u0107\x02\x02\u2175\u2177" +
		"\x05\f\x07\x02\u2176\u2175\x03\x02\x02\x02\u2177\u2178\x03\x02\x02\x02" +
		"\u2178\u2176\x03\x02\x02\x02\u2178\u2179\x03\x02\x02\x02\u2179\u2180\x03" +
		"\x02\x02\x02\u217A\u217C\x07\xD6\x02\x02\u217B\u217D\x05\f\x07\x02\u217C" +
		"\u217B\x03\x02\x02\x02\u217D\u217E\x03\x02\x02\x02\u217E\u217C\x03\x02" +
		"\x02\x02\u217E\u217F\x03\x02\x02\x02\u217F\u2181\x03\x02\x02\x02\u2180" +
		"\u217A\x03\x02\x02\x02\u2180\u2181\x03\x02\x02\x02\u2181\u2183\x03\x02" +
		"\x02\x02\u2182\u2174\x03\x02\x02\x02\u2182\u2183\x03\x02\x02\x02\u2183" +
		"\u218F\x03\x02\x02\x02\u2184\u2190\x07\u014E\x02\x02\u2185\u2187\x07\xE4" +
		"\x02\x02\u2186\u2188\x05\f\x07\x02\u2187\u2186\x03\x02\x02\x02\u2188\u2189" +
		"\x03\x02\x02\x02\u2189\u2187\x03\x02\x02\x02\u2189\u218A\x03\x02\x02\x02" +
		"\u218A\u218B\x03\x02\x02\x02\u218B\u218C\x07\u014E\x02\x02\u218C\u2190" +
		"\x03\x02\x02\x02\u218D\u2190\x07\u012B\x02\x02\u218E\u2190\x07\xCB\x02" +
		"\x02\u218F\u2184\x03\x02\x02\x02\u218F\u2185\x03\x02\x02\x02\u218F\u218D" +
		"\x03\x02\x02\x02\u218F\u218E\x03\x02\x02\x02\u2190\u0295\x03\x02\x02\x02" +
		"\u2191\u2193\x07\xE8\x02\x02\u2192\u2194\x05\f\x07\x02\u2193\u2192\x03" +
		"\x02\x02\x02\u2194\u2195\x03\x02\x02\x02\u2195\u2193\x03\x02\x02\x02\u2195" +
		"\u2196\x03\x02\x02\x02\u2196\u219D\x03\x02\x02\x02\u2197\u2199\x07\xF1" +
		"\x02\x02\u2198\u219A\x05\f\x07\x02\u2199\u2198\x03\x02\x02\x02\u219A\u219B" +
		"\x03\x02\x02\x02\u219B\u2199\x03\x02\x02\x02\u219B\u219C\x03\x02\x02\x02" +
		"\u219C\u219E\x03\x02\x02\x02\u219D\u2197\x03\x02\x02\x02\u219D\u219E\x03" +
		"\x02\x02\x02\u219E\u21A5\x03\x02\x02\x02\u219F\u21A1\x07\xD6\x02\x02\u21A0" +
		"\u21A2\x05\f\x07\x02\u21A1\u21A0\x03\x02\x02\x02\u21A2\u21A3\x03\x02\x02" +
		"\x02\u21A3\u21A1\x03\x02\x02\x02\u21A3\u21A4\x03\x02\x02\x02\u21A4\u21A6" +
		"\x03\x02\x02\x02\u21A5\u219F\x03\x02\x02\x02\u21A5\u21A6\x03\x02\x02\x02" +
		"\u21A6\u21A7\x03\x02\x02\x02\u21A7\u21A8\x05\u0298\u014D\x02\u21A8\u0297" +
		"\x03\x02\x02\x02\u21A9\u21AB\x07\xED\x02\x02\u21AA\u21AC\x05\f\x07\x02" +
		"\u21AB\u21AA\x03\x02\x02\x02\u21AC\u21AD\x03\x02\x02\x02\u21AD\u21AB\x03" +
		"\x02\x02\x02\u21AD\u21AE\x03\x02\x02\x02\u21AE\u21B5\x03\x02\x02\x02\u21AF" +
		"\u21B1\x07\u018B\x02\x02\u21B0\u21B2\x05\f\x07\x02\u21B1\u21B0\x03\x02" +
		"\x02\x02\u21B2\u21B3\x03\x02\x02\x02\u21B3\u21B1\x03\x02\x02\x02\u21B3" +
		"\u21B4\x03\x02\x02\x02\u21B4\u21B6\x03\x02\x02\x02\u21B5\u21AF\x03\x02" +
		"\x02\x02\u21B5\u21B6\x03\x02\x02\x02\u21B6\u21B7\x03\x02\x02\x02\u21B7" +
		"\u21B9\x07\xE8\x02\x02\u21B8\u21BA\x05\f\x07\x02\u21B9\u21B8\x03\x02\x02" +
		"\x02\u21BA\u21BB\x03\x02\x02\x02\u21BB\u21B9\x03\x02\x02\x02\u21BB\u21BC" +
		"\x03\x02\x02\x02\u21BC\u21BD\x03\x02\x02\x02\u21BD\u21BF\x07\u0102\x02" +
		"\x02\u21BE\u21C0\x05\f\x07\x02\u21BF\u21BE\x03\x02\x02\x02\u21C0\u21C1" +
		"\x03\x02\x02\x02\u21C1\u21BF\x03\x02\x02\x02\u21C1\u21C2\x03\x02\x02\x02" +
		"\u21C2\u21C3\x03\x02\x02\x02\u21C3\u21C5\x07\xF4\x02\x02\u21C4\u21C6\x05" +
		"\f\x07\x02\u21C5\u21C4\x03\x02\x02\x02\u21C6\u21C7\x03\x02\x02\x02\u21C7" +
		"\u21C5\x03\x02\x02\x02\u21C7\u21C8\x03\x02\x02\x02\u21C8\u21C9\x03\x02" +
		"\x02\x02\u21C9\u21CA\x07\u0127\x02\x02\u21CA\u21EE\x03\x02\x02\x02\u21CB" +
		"\u21EA\x07\"\x02\x02\u21CC\u21CE\x05\f\x07\x02\u21CD\u21CC\x03\x02\x02" +
		"\x02\u21CE\u21CF\x03\x02\x02\x02\u21CF\u21CD\x03\x02\x02\x02\u21CF\u21D0" +
		"\x03\x02\x02\x02\u21D0\u21D7\x03\x02\x02\x02\u21D1\u21D3\x07\u018B\x02" +
		"\x02\u21D2\u21D4\x05\f\x07\x02\u21D3\u21D2\x03\x02\x02\x02\u21D4\u21D5" +
		"\x03\x02\x02\x02\u21D5\u21D3\x03\x02\x02\x02\u21D5\u21D6\x03\x02\x02\x02" +
		"\u21D6\u21D8\x03\x02\x02\x02\u21D7\u21D1\x03\x02\x02\x02\u21D7\u21D8\x03" +
		"\x02\x02\x02\u21D8\u21E8\x03\x02\x02\x02\u21D9\u21DB\x07\xE8\x02\x02\u21DA" +
		"\u21DC\x05\f\x07\x02\u21DB\u21DA\x03\x02\x02\x02\u21DC\u21DD\x03\x02\x02" +
		"\x02\u21DD\u21DB\x03\x02\x02\x02\u21DD\u21DE\x03\x02\x02\x02\u21DE\u21DF" +
		"\x03\x02\x02\x02\u21DF\u21E1\x07\u0102\x02\x02\u21E0\u21E2\x05\f\x07\x02" +
		"\u21E1\u21E0\x03\x02\x02\x02\u21E2\u21E3\x03\x02\x02\x02\u21E3\u21E1\x03" +
		"\x02\x02\x02\u21E3\u21E4\x03\x02\x02\x02\u21E4\u21E5\x03\x02\x02\x02\u21E5" +
		"\u21E6\x07\u0126\x02\x02\u21E6\u21E9\x03\x02\x02\x02\u21E7\u21E9\x07\u0141" +
		"\x02\x02\u21E8\u21D9\x03\x02\x02\x02\u21E8\u21E7\x03\x02\x02\x02\u21E9" +
		"\u21EB\x03\x02\x02\x02\u21EA\u21CD\x03\x02\x02\x02\u21EA\u21EB\x03\x02" +
		"\x02\x02\u21EB\u21EE\x03\x02\x02\x02\u21EC\u21EE\x07\xA2\x02\x02\u21ED" +
		"\u21A9\x03\x02\x02\x02\u21ED\u21CB\x03\x02\x02\x02\u21ED\u21EC\x03\x02" +
		"\x02\x02\u21EE\u0299\x03\x02\x02\x02\u21EF\u21F1\x07?\x02\x02\u21F0\u21F2" +
		"\x05\f\x07\x02\u21F1\u21F0\x03\x02\x02\x02\u21F2\u21F3\x03\x02\x02\x02" +
		"\u21F3\u21F1\x03\x02\x02\x02\u21F3\u21F4\x03\x02\x02\x02\u21F4\u21FB\x03" +
		"\x02\x02\x02\u21F5\u21F7\x07\xD6\x02\x02\u21F6\u21F8\x05\f\x07\x02\u21F7" +
		"\u21F6\x03\x02\x02\x02\u21F8\u21F9\x03\x02\x02\x02\u21F9\u21F7\x03\x02" +
		"\x02\x02\u21F9\u21FA\x03\x02\x02\x02\u21FA\u21FC\x03\x02\x02\x02\u21FB" +
		"\u21F5\x03\x02\x02\x02\u21FB\u21FC\x03\x02\x02\x02\u21FC\u21FD\x03\x02" +
		"\x02\x02\u21FD\u21FE\x05\u0234\u011B\x02\u21FE\u029B\x03\x02\x02\x02\u21FF" +
		"\u2201\x07/\x02\x02\u2200\u2202\x05\f\x07\x02\u2201\u2200\x03\x02\x02" +
		"\x02\u2202\u2203\x03\x02\x02\x02\u2203\u2201\x03\x02\x02\x02\u2203\u2204" +
		"\x03\x02\x02\x02\u2204\u220B\x03\x02\x02\x02\u2205\u2207\x07U\x02\x02" +
		"\u2206\u2208\x05\f\x07\x02\u2207\u2206\x03\x02\x02\x02\u2208\u2209\x03" +
		"\x02\x02\x02\u2209\u2207\x03\x02\x02\x02\u2209\u220A\x03\x02\x02\x02\u220A" +
		"\u220C\x03\x02\x02\x02\u220B\u2205\x03\x02\x02\x02\u220B\u220C\x03\x02" +
		"\x02\x02\u220C\u2219\x03\x02\x02\x02\u220D\u220F\x05\u029E\u0150\x02\u220E" +
		"\u2210\x05\f\x07\x02\u220F\u220E\x03\x02\x02\x02\u2210\u2211\x03\x02\x02" +
		"\x02\u2211\u220F\x03\x02\x02\x02\u2211\u2212\x03\x02\x02\x02\u2212\u2213" +
		"\x03\x02\x02\x02\u2213\u2215\x07\u0175\x02\x02\u2214\u2216\x05\f\x07\x02" +
		"\u2215\u2214\x03\x02\x02\x02\u2216\u2217\x03\x02\x02\x02\u2217\u2215\x03" +
		"\x02\x02\x02\u2217\u2218\x03\x02\x02\x02\u2218\u221A\x03\x02\x02\x02\u2219" +
		"\u220D\x03\x02\x02\x02\u2219\u221A\x03\x02\x02\x02\u221A\u221B\x03\x02" +
		"\x02\x02\u221B\u221D\x05\u02A0\u0151\x02\u221C\u221E\x05\f\x07\x02\u221D" +
		"\u221C\x03\x02\x02\x02\u221E\u221F\x03\x02\x02\x02\u221F\u221D\x03\x02" +
		"\x02\x02\u221F\u2220\x03\x02\x02\x02\u2220\u2221\x03\x02\x02\x02\u2221" +
		"\u2222\t*\x02\x02\u2222\u029D\x03\x02\x02\x02\u2223\u2224\x07\u01C2\x02" +
		"\x02\u2224\u029F\x03\x02\x02\x02\u2225\u2226\x07\u01C2\x02\x02\u2226\u02A1" +
		"\x03\x02\x02\x02\u2227\u2229\x07\x1E\x02\x02\u2228\u222A\x05\f\x07\x02" +
		"\u2229\u2228\x03\x02\x02\x02\u222A\u222B\x03\x02\x02\x02\u222B\u2229\x03" +
		"\x02\x02\x02\u222B\u222C\x03\x02\x02\x02\u222C\u2233\x03\x02\x02\x02\u222D" +
		"\u222F\x07\u0175\x02\x02\u222E\u2230\x05\f\x07\x02\u222F\u222E\x03\x02" +
		"\x02\x02\u2230\u2231\x03\x02\x02\x02\u2231\u222F\x03\x02\x02\x02\u2231" +
		"\u2232\x03\x02\x02\x02\u2232\u2234\x03\x02\x02\x02\u2233\u222D\x03\x02" +
		"\x02\x02\u2233\u2234\x03\x02\x02\x02\u2234\u2235\x03\x02\x02\x02\u2235" +
		"\u2236\x05\u02A4\u0153\x02\u2236\u02A3\x03\x02\x02\x02\u2237\u2239\t+" +
		"\x02\x02\u2238\u223A\x05\f\x07\x02\u2239\u2238\x03\x02\x02\x02\u223A\u223B" +
		"\x03\x02\x02\x02\u223B\u2239\x03\x02\x02\x02\u223B\u223C\x03\x02\x02\x02" +
		"\u223C\u223E\x03\x02\x02\x02\u223D\u2237\x03\x02\x02\x02\u223D\u223E\x03" +
		"\x02\x02\x02\u223E\u223F\x03\x02\x02\x02\u223F\u2253\x05\u02A6\u0154\x02" +
		"\u2240\u2242\x07\xF4\x02\x02\u2241\u2243\x05\f\x07\x02\u2242\u2241\x03" +
		"\x02\x02\x02\u2243\u2244\x03\x02\x02\x02\u2244\u2242\x03\x02\x02\x02\u2244" +
		"\u2245\x03\x02\x02\x02\u2245\u2247\x03\x02\x02\x02\u2246\u2240\x03\x02" +
		"\x02\x02\u2246\u2247\x03\x02\x02\x02\u2247\u2248\x03\x02\x02\x02\u2248" +
		"\u2250\t\x12\x02\x02\u2249\u224B\x05\f\x07\x02\u224A\u2249\x03\x02\x02" +
		"\x02\u224B\u224C\x03\x02\x02\x02\u224C\u224A\x03\x02\x02\x02\u224C\u224D" +
		"\x03\x02\x02\x02\u224D\u224E\x03\x02\x02\x02\u224E\u224F\x07\xAA\x02\x02" +
		"\u224F\u2251\x03\x02\x02\x02\u2250\u224A\x03\x02\x02\x02\u2250\u2251\x03" +
		"\x02\x02\x02\u2251\u2253\x03\x02\x02\x02\u2252\u223D\x03\x02\x02\x02\u2252" +
		"\u2246\x03\x02\x02\x02\u2253\u02A5\x03\x02\x02\x02\u2254\u2259\x07\u01C1" +
		"\x02\x02\u2255\u2259\x05\u023E\u0120\x02\u2256\u2259\x07w\x02\x02\u2257" +
		"\u2259\x07\u011A\x02\x02\u2258\u2254\x03\x02\x02\x02\u2258\u2255\x03\x02" +
		"\x02\x02\u2258\u2256\x03\x02\x02\x02\u2258\u2257\x03\x02\x02\x02\u2259" +
		"\u02A7\x03\x02\x02\x02\u225A\u225B\x07\u01C4\x02\x02\u225B\u02A9\x03\x02" +
		"\x02\x02\u225C\u2260\x07\xD8\x02\x02\u225D\u225F\x05\f\x07\x02\u225E\u225D" +
		"\x03\x02\x02\x02\u225F\u2262\x03\x02\x02\x02\u2260\u225E\x03\x02\x02\x02" +
		"\u2260\u2261\x03\x02\x02\x02\u2261\u2263\x03\x02\x02\x02\u2262\u2260\x03" +
		"\x02\x02\x02\u2263\u2267\x07\u01BE\x02\x02\u2264\u2266\x05\f\x07\x02\u2265" +
		"\u2264\x03\x02\x02\x02\u2266\u2269\x03\x02\x02\x02\u2267\u2265\x03\x02" +
		"\x02\x02\u2267\u2268\x03\x02\x02\x02\u2268\u22A1\x03\x02\x02\x02\u2269" +
		"\u2267\x03\x02\x02\x02\u226A\u226E\x05\u02C4\u0163\x02\u226B\u226D\x05" +
		"\f\x07\x02\u226C\u226B\x03\x02\x02\x02\u226D\u2270\x03\x02\x02\x02\u226E" +
		"\u226C\x03\x02\x02\x02\u226E\u226F\x03\x02\x02\x02\u226F\u2272\x03\x02" +
		"\x02\x02\u2270\u226E\x03\x02\x02\x02\u2271\u226A\x03\x02\x02\x02\u2272" +
		"\u2275\x03\x02\x02\x02\u2273\u2271\x03\x02\x02\x02\u2273\u2274\x03\x02" +
		"\x02\x02\u2274\u227F\x03\x02\x02\x02\u2275\u2273\x03\x02\x02\x02\u2276" +
		"\u227A\x05\u02C0\u0161\x02\u2277\u2279\x05\f\x07\x02\u2278\u2277\x03\x02" +
		"\x02\x02\u2279\u227C\x03\x02\x02\x02\u227A\u2278\x03\x02\x02\x02\u227A" +
		"\u227B\x03\x02\x02\x02\u227B\u227E\x03\x02\x02\x02\u227C\u227A\x03\x02" +
		"\x02\x02\u227D\u2276\x03\x02\x02\x02\u227E\u2281\x03\x02\x02\x02\u227F" +
		"\u227D\x03\x02\x02\x02\u227F\u2280\x03\x02\x02\x02\u2280\u228B\x03\x02" +
		"\x02\x02\u2281\u227F\x03\x02\x02\x02\u2282\u2286\x05\u02B4\u015B\x02\u2283" +
		"\u2285\x05\f\x07\x02\u2284\u2283\x03\x02\x02\x02\u2285\u2288\x03\x02\x02" +
		"\x02\u2286\u2284\x03\x02\x02\x02\u2286\u2287\x03\x02\x02\x02\u2287\u228A" +
		"\x03\x02\x02\x02\u2288\u2286\x03\x02\x02\x02\u2289\u2282\x03\x02\x02\x02" +
		"\u228A\u228D\x03\x02\x02\x02\u228B\u2289\x03\x02\x02\x02\u228B\u228C\x03" +
		"\x02\x02\x02\u228C\u2297\x03\x02\x02\x02\u228D\u228B\x03\x02\x02\x02\u228E" +
		"\u2292\x05\u02AC\u0157\x02\u228F\u2291\x05\f\x07\x02\u2290\u228F\x03\x02" +
		"\x02\x02\u2291\u2294\x03\x02\x02\x02\u2292\u2290\x03\x02\x02\x02\u2292" +
		"\u2293\x03\x02\x02\x02\u2293\u2296\x03\x02\x02\x02\u2294\u2292\x03\x02" +
		"\x02\x02\u2295\u228E\x03\x02\x02\x02\u2296\u2299\x03\x02\x02\x02\u2297" +
		"\u2295\x03\x02\x02\x02\u2297\u2298\x03\x02\x02\x02\u2298\u229A\x03\x02" +
		"\x02\x02\u2299\u2297\x03\x02\x02\x02\u229A\u229E\x07\u01BE\x02\x02\u229B" +
		"\u229D\x05\f\x07\x02\u229C\u229B\x03\x02\x02\x02\u229D\u22A0\x03\x02\x02" +
		"\x02\u229E\u229C\x03\x02\x02\x02\u229E\u229F\x03\x02\x02\x02\u229F\u22A2" +
		"\x03\x02\x02\x02\u22A0\u229E\x03\x02\x02\x02\u22A1\u2273\x03\x02\x02\x02" +
		"\u22A1\u22A2\x03\x02\x02\x02\u22A2\u02AB\x03\x02\x02\x02\u22A3\u22A5\x07" +
		"\xF4\x02\x02\u22A4\u22A6\x05\f\x07\x02\u22A5\u22A4\x03\x02\x02\x02\u22A6" +
		"\u22A7\x03\x02\x02\x02\u22A7\u22A5\x03\x02\x02\x02\u22A7\u22A8\x03\x02" +
		"\x02\x02\u22A8\u22A9\x03\x02\x02\x02\u22A9\u22AB\x07\xAA\x02\x02\u22AA" +
		"\u22AC\x05\f\x07\x02\u22AB\u22AA\x03\x02\x02\x02\u22AC\u22AD\x03\x02\x02" +
		"\x02\u22AD\u22AB\x03\x02\x02\x02\u22AD\u22AE\x03\x02\x02\x02\u22AE\u22B5" +
		"\x03\x02\x02\x02\u22AF\u22B1\x07\u016E\x02\x02\u22B0\u22B2\x05\f\x07\x02" +
		"\u22B1\u22B0\x03\x02\x02\x02\u22B2\u22B3\x03\x02\x02\x02\u22B3\u22B1\x03" +
		"\x02\x02\x02\u22B3\u22B4\x03\x02\x02\x02\u22B4\u22B6\x03\x02\x02\x02\u22B5" +
		"\u22AF\x03\x02\x02\x02\u22B5\u22B6\x03\x02\x02\x02\u22B6\u22BD\x03\x02" +
		"\x02\x02\u22B7\u22B9\x07U\x02\x02\u22B8\u22BA\x05\f\x07\x02\u22B9\u22B8" +
		"\x03\x02\x02\x02\u22BA\u22BB\x03\x02\x02\x02\u22BB\u22B9\x03\x02\x02\x02" +
		"\u22BB\u22BC\x03\x02\x02\x02\u22BC\u22BE\x03\x02\x02\x02\u22BD\u22B7\x03" +
		"\x02\x02\x02\u22BD\u22BE\x03\x02\x02\x02\u22BE\u22C6\x03\x02\x02\x02\u22BF" +
		"\u22C3\x05\u02AE\u0158\x02\u22C0\u22C2\x05\f\x07\x02\u22C1\u22C0\x03\x02" +
		"\x02\x02\u22C2\u22C5\x03\x02\x02\x02\u22C3\u22C1\x03\x02\x02\x02\u22C3" +
		"\u22C4\x03\x02\x02\x02\u22C4\u22C7\x03\x02\x02\x02\u22C5\u22C3\x03\x02" +
		"\x02\x02\u22C6\u22BF\x03\x02\x02\x02\u22C7\u22C8\x03\x02\x02\x02\u22C8" +
		"\u22C6\x03\x02\x02\x02\u22C8\u22C9\x03\x02\x02\x02\u22C9\u02AD\x03\x02" +
		"\x02\x02\u22CA\u22D8\x05\u02B0\u0159\x02\u22CB\u22CD\x05\f\x07\x02\u22CC" +
		"\u22CB\x03\x02\x02\x02\u22CD\u22CE\x03\x02\x02\x02\u22CE\u22CC\x03\x02" +
		"\x02\x02\u22CE\u22CF\x03\x02\x02\x02\u22CF\u22D0\x03\x02\x02\x02\u22D0" +
		"\u22D2\x07\u0117\x02\x02\u22D1\u22D3\x05\f\x07\x02\u22D2\u22D1\x03\x02" +
		"\x02\x02\u22D3\u22D4\x03\x02\x02\x02\u22D4\u22D2\x03\x02\x02\x02\u22D4" +
		"\u22D5\x03\x02\x02\x02\u22D5\u22D6\x03\x02\x02\x02\u22D6\u22D7\x05\u02B2" +
		"\u015A\x02\u22D7\u22D9\x03\x02\x02\x02\u22D8\u22CC\x03\x02\x02\x02\u22D8" +
		"\u22D9\x03\x02\x02\x02\u22D9\u02AF\x03\x02\x02\x02\u22DA\u22DB\x07\u01C4" +
		"\x02\x02\u22DB\u02B1\x03\x02\x02\x02\u22DC\u22DD\x07\u01C2\x02\x02\u22DD" +
		"\u02B3\x03\x02\x02\x02\u22DE\u22E0\x07\u0136\x02\x02\u22DF\u22E1\x05\f" +
		"\x07\x02\u22E0\u22DF\x03\x02\x02\x02\u22E1\u22E2\x03\x02\x02\x02\u22E2" +
		"\u22E0\x03\x02\x02\x02\u22E2\u22E3\x03\x02\x02\x02\u22E3\u22F0\x03\x02" +
		"\x02\x02\u22E4\u22E6\x07\u0102\x02\x02\u22E5\u22E7\x05\f\x07\x02\u22E6" +
		"\u22E5\x03\x02\x02\x02\u22E7\u22E8\x03\x02\x02\x02\u22E8\u22E6\x03\x02" +
		"\x02\x02\u22E8\u22E9\x03\x02\x02\x02\u22E9\u22EA\x03\x02\x02\x02\u22EA" +
		"\u22EC\x05\u02A8\u0155\x02\u22EB\u22ED\x05\f\x07\x02\u22EC\u22EB\x03\x02" +
		"\x02\x02\u22ED\u22EE\x03\x02\x02\x02\u22EE\u22EC\x03\x02\x02\x02\u22EE" +
		"\u22EF\x03\x02\x02\x02\u22EF\u22F1\x03\x02\x02\x02\u22F0\u22E4\x03\x02" +
		"\x02\x02\u22F0\u22F1\x03\x02\x02\x02\u22F1\u22F8\x03\x02\x02\x02\u22F2" +
		"\u22F4\x07\xA0\x02\x02\u22F3\u22F5\x05\f\x07\x02\u22F4\u22F3\x03\x02\x02" +
		"\x02\u22F5\u22F6\x03\x02\x02\x02\u22F6\u22F4\x03\x02\x02";
	private static readonly _serializedATNSegment17: string =
		"\x02\u22F6\u22F7\x03\x02\x02\x02\u22F7\u22F9\x03\x02\x02\x02\u22F8\u22F2" +
		"\x03\x02\x02\x02\u22F8\u22F9\x03\x02\x02\x02\u22F9\u22FA\x03\x02\x02\x02" +
		"\u22FA\u22FB\x05\u02B6\u015C\x02\u22FB\u02B5\x03\x02\x02\x02\u22FC\u22FE" +
		"\x05\u02BC\u015F\x02\u22FD\u22FF\x05\f\x07\x02\u22FE\u22FD\x03\x02\x02" +
		"\x02\u22FF\u2300\x03\x02\x02\x02\u2300\u22FE\x03\x02\x02\x02\u2300\u2301" +
		"\x03\x02\x02\x02\u2301\u2308\x03\x02\x02\x02\u2302\u2304\x07\xFF\x02\x02" +
		"\u2303\u2305\x05\f\x07\x02\u2304\u2303\x03\x02\x02\x02\u2305\u2306\x03" +
		"\x02\x02\x02\u2306\u2304\x03\x02\x02\x02\u2306\u2307\x03\x02\x02\x02\u2307" +
		"\u2309\x03\x02\x02\x02\u2308\u2302\x03\x02\x02\x02\u2308\u2309\x03\x02" +
		"\x02\x02\u2309\u230A\x03\x02\x02\x02\u230A\u230B\x05\u02A8\u0155\x02\u230B" +
		"\u2316\x03\x02\x02\x02\u230C\u230E\x05\u02B8\u015D\x02\u230D\u230F\x05" +
		"\f\x07\x02\u230E\u230D\x03\x02\x02\x02\u230F\u2310\x03\x02\x02\x02\u2310" +
		"\u230E\x03\x02\x02\x02\u2310\u2311\x03\x02\x02\x02\u2311\u2312\x03\x02" +
		"\x02\x02\u2312\u2313\x07<\x02\x02\u2313\u2316\x03\x02\x02\x02\u2314\u2316" +
		"\x05\u02BA\u015E\x02\u2315\u22FC\x03\x02\x02\x02\u2315\u230C\x03\x02\x02" +
		"\x02\u2315\u2314\x03\x02\x02\x02\u2316\u02B7\x03\x02\x02\x02\u2317\u2318" +
		"\x07\u01C2\x02\x02\u2318\u02B9\x03\x02\x02\x02\u2319\u231A\x07\u01C4\x02" +
		"\x02\u231A\u02BB\x03\x02\x02\x02\u231B\u231D\x07\x81\x02\x02\u231C\u231E" +
		"\x05\f\x07\x02\u231D\u231C\x03\x02\x02\x02\u231E\u231F\x03\x02\x02\x02" +
		"\u231F\u231D\x03\x02\x02\x02\u231F\u2320\x03\x02\x02\x02\u2320\u2327\x03" +
		"\x02\x02\x02\u2321\u2323\x07\xFF\x02\x02\u2322\u2324\x05\f\x07\x02\u2323" +
		"\u2322\x03\x02\x02\x02\u2324\u2325\x03\x02\x02\x02\u2325\u2323\x03\x02" +
		"\x02\x02\u2325\u2326\x03\x02\x02\x02\u2326\u2328\x03\x02\x02\x02\u2327" +
		"\u2321\x03\x02\x02\x02\u2327\u2328\x03\x02\x02\x02\u2328\u232A\x03\x02" +
		"\x02\x02\u2329\u231B\x03\x02\x02\x02\u2329\u232A\x03\x02\x02\x02\u232A" +
		"\u232B\x03\x02\x02\x02\u232B\u2335\t\x12\x02\x02\u232C\u232E\x05\u02BE" +
		"\u0160\x02\u232D\u232F\x05\f\x07\x02\u232E\u232D\x03\x02\x02\x02\u232F" +
		"\u2330\x03\x02\x02\x02\u2330\u232E\x03\x02\x02\x02\u2330\u2331\x03\x02" +
		"\x02\x02\u2331\u2332\x03\x02\x02\x02\u2332\u2333\x07\u0127\x02\x02\u2333" +
		"\u2335\x03\x02\x02\x02\u2334\u2329\x03\x02\x02\x02\u2334\u232C\x03\x02" +
		"\x02\x02\u2335\u02BD\x03\x02\x02\x02\u2336\u2337\x07\u01C2\x02\x02\u2337" +
		"\u02BF\x03\x02\x02\x02\u2338\u233A\x07\u0143\x02\x02\u2339\u233B\x05\f" +
		"\x07\x02\u233A\u2339\x03\x02\x02\x02\u233B\u233C\x03\x02\x02\x02\u233C" +
		"\u233A\x03\x02\x02\x02\u233C\u233D\x03\x02\x02\x02\u233D\u2344\x03\x02" +
		"\x02\x02\u233E\u2340\t,\x02\x02\u233F\u2341\x05\f\x07\x02\u2340\u233F" +
		"\x03\x02\x02\x02\u2341\u2342\x03\x02\x02\x02\u2342\u2340\x03\x02\x02\x02" +
		"\u2342\u2343\x03\x02\x02\x02\u2343\u2345\x03\x02\x02\x02\u2344\u233E\x03" +
		"\x02\x02\x02\u2344\u2345\x03\x02\x02\x02\u2345\u234C\x03\x02\x02\x02\u2346" +
		"\u2348\x07\x17\x02\x02\u2347\u2349\x05\f\x07\x02\u2348\u2347\x03\x02\x02" +
		"\x02\u2349\u234A\x03\x02\x02\x02\u234A\u2348\x03\x02\x02\x02\u234A\u234B" +
		"\x03\x02\x02\x02\u234B\u234D\x03\x02\x02\x02\u234C\u2346\x03\x02\x02\x02" +
		"\u234C\u234D\x03\x02\x02\x02\u234D\u2354\x03\x02\x02\x02\u234E\u2350\x07" +
		"\xB5\x02\x02\u234F\u2351\x05\f\x07\x02\u2350\u234F\x03\x02\x02\x02\u2351" +
		"\u2352\x03\x02\x02\x02\u2352\u2350\x03\x02\x02\x02\u2352\u2353\x03\x02" +
		"\x02\x02\u2353\u2355\x03\x02\x02\x02\u2354\u234E\x03\x02\x02\x02\u2354" +
		"\u2355\x03\x02\x02\x02\u2355\u2356\x03\x02\x02\x02\u2356\u235E\x05\u02C2" +
		"\u0162\x02\u2357\u2359\x05\f\x07\x02\u2358\u2357\x03\x02\x02\x02\u2359" +
		"\u235A\x03\x02\x02\x02\u235A\u2358\x03\x02\x02\x02\u235A\u235B\x03\x02" +
		"\x02\x02\u235B\u235C\x03\x02\x02\x02\u235C\u235D\x05\u02C2\u0162\x02\u235D" +
		"\u235F\x03\x02\x02\x02\u235E\u2358\x03\x02\x02\x02\u235F\u2360\x03\x02" +
		"\x02\x02\u2360\u235E\x03\x02\x02\x02\u2360\u2361\x03\x02\x02\x02\u2361" +
		"\u02C1\x03\x02\x02\x02\u2362\u2363\x07\u01C4\x02\x02\u2363\u02C3\x03\x02" +
		"\x02\x02\u2364\u2366\x07\x15\x02\x02\u2365\u2367\x05\f\x07\x02\u2366\u2365" +
		"\x03\x02\x02\x02\u2367\u2368\x03\x02\x02\x02\u2368\u2366\x03\x02\x02\x02" +
		"\u2368\u2369\x03\x02\x02\x02\u2369\u2370\x03\x02\x02\x02\u236A\u236C\x05" +
		"\u02C6\u0164\x02\u236B\u236D\x05\f\x07\x02\u236C\u236B\x03\x02\x02\x02" +
		"\u236D\u236E\x03\x02\x02\x02\u236E\u236C\x03\x02\x02\x02\u236E\u236F\x03" +
		"\x02\x02\x02\u236F\u2371\x03\x02\x02\x02\u2370\u236A\x03\x02\x02\x02\u2371" +
		"\u2372\x03\x02\x02\x02\u2372\u2370\x03\x02\x02\x02\u2372\u2373\x03\x02" +
		"\x02\x02\u2373\u2374\x03\x02\x02\x02\u2374\u2376\x07\u0102\x02\x02\u2375" +
		"\u2377\x05\f\x07\x02\u2376\u2375\x03\x02\x02\x02\u2377\u2378\x03\x02\x02" +
		"\x02\u2378\u2376\x03\x02\x02\x02\u2378\u2379\x03\x02\x02\x02\u2379\u2381" +
		"\x03\x02\x02\x02\u237A\u237E\x05\u02A8\u0155\x02\u237B\u237D\x05\f\x07" +
		"\x02\u237C\u237B\x03\x02\x02\x02\u237D\u2380\x03\x02\x02\x02\u237E\u237C" +
		"\x03\x02\x02\x02\u237E\u237F\x03\x02\x02\x02\u237F\u2382\x03\x02\x02\x02" +
		"\u2380\u237E\x03\x02\x02\x02\u2381\u237A\x03\x02\x02\x02\u2382\u2383\x03" +
		"\x02\x02\x02\u2383\u2381\x03\x02\x02\x02\u2383\u2384\x03\x02\x02\x02\u2384" +
		"\u02C5\x03\x02\x02\x02\u2385\u23AB\x07p\x02\x02\u2386\u2388\x07\xA5\x02" +
		"\x02\u2387\u2389\x05\f\x07\x02\u2388\u2387\x03\x02\x02\x02\u2389\u238A" +
		"\x03\x02\x02\x02\u238A\u2388\x03\x02\x02\x02\u238A\u238B\x03\x02\x02\x02" +
		"\u238B\u238C\x03\x02\x02\x02\u238C\u238D\x05\u02CC\u0167\x02\u238D\u23AB" +
		"\x03\x02\x02\x02\u238E\u23AB\x07\xAE\x02\x02\u238F\u23AB\x07\xE9\x02\x02" +
		"\u2390\u23AB\x07\xEE\x02\x02\u2391\u2393\t-\x02\x02\u2392\u2394\x05\f" +
		"\x07\x02\u2393\u2392\x03\x02\x02\x02\u2394\u2395\x03\x02\x02\x02\u2395" +
		"\u2393\x03\x02\x02\x02\u2395\u2396\x03\x02\x02\x02\u2396\u2398\x03\x02" +
		"\x02\x02\u2397\u2391\x03\x02\x02\x02\u2397\u2398\x03\x02\x02\x02\u2398" +
		"\u2399\x03\x02\x02\x02\u2399\u239B\x07\u0119\x02\x02\u239A\u239C\x05\f" +
		"\x07\x02\u239B\u239A\x03\x02\x02\x02\u239C\u239D\x03\x02\x02\x02\u239D" +
		"\u239B\x03\x02\x02\x02\u239D\u239E\x03\x02\x02\x02\u239E\u239F\x03\x02" +
		"\x02\x02\u239F\u23A0\x05\u02CA\u0166\x02\u23A0\u23AB\x03\x02\x02\x02\u23A1" +
		"\u23AB\x07\u011B\x02\x02\u23A2\u23A4\x07\u018A\x02\x02\u23A3\u23A5\x05" +
		"\f\x07\x02\u23A4\u23A3\x03\x02\x02\x02\u23A5\u23A6\x03\x02\x02\x02\u23A6" +
		"\u23A4\x03\x02\x02\x02\u23A6\u23A7\x03\x02\x02\x02\u23A7\u23A8\x03\x02" +
		"\x02\x02\u23A8\u23A9\x05\u02C8\u0165\x02\u23A9\u23AB\x03\x02\x02\x02\u23AA" +
		"\u2385\x03\x02\x02\x02\u23AA\u2386\x03\x02\x02\x02\u23AA\u238E\x03\x02" +
		"\x02\x02\u23AA\u238F\x03\x02\x02\x02\u23AA\u2390\x03\x02\x02\x02\u23AA" +
		"\u2397\x03\x02\x02\x02\u23AA\u23A1\x03\x02\x02\x02\u23AA\u23A2\x03\x02" +
		"\x02\x02\u23AB\u02C7\x03\x02\x02\x02\u23AC\u23AD\x07\u01C2\x02\x02\u23AD" +
		"\u02C9\x03\x02\x02\x02\u23AE\u23AF\x07\u01C2\x02\x02\u23AF\u02CB\x03\x02" +
		"\x02\x02\u23B0\u23B1\x07\u01C2\x02\x02\u23B1\u02CD\x03\x02\x02\x02\u23B2" +
		"\u23B3\b\u0168\x01\x02\u23B3\u23B7\x07\u01B8\x02\x02\u23B4\u23B6\x05\x0E" +
		"\b\x02\u23B5\u23B4\x03\x02\x02\x02\u23B6\u23B9\x03\x02\x02\x02\u23B7\u23B5" +
		"\x03\x02\x02\x02\u23B7\u23B8\x03\x02\x02\x02\u23B8\u23BA\x03\x02\x02\x02" +
		"\u23B9\u23B7\x03\x02\x02\x02\u23BA\u23BE\x05\u02CE\u0168\x02\u23BB\u23BD" +
		"\x05\x0E\b\x02\u23BC\u23BB\x03\x02\x02\x02\u23BD\u23C0\x03\x02\x02\x02" +
		"\u23BE\u23BC\x03\x02\x02\x02\u23BE\u23BF\x03\x02\x02\x02\u23BF\u23C1\x03" +
		"\x02\x02\x02\u23C0\u23BE\x03\x02\x02\x02\u23C1\u23C2\x07\u01B9\x02\x02" +
		"\u23C2\u23CF\x03\x02\x02\x02\u23C3\u23C7\x05\u02D4\u016B\x02\u23C4\u23C6" +
		"\x05\x0E\b\x02\u23C5\u23C4\x03\x02\x02\x02\u23C6\u23C9\x03\x02\x02\x02" +
		"\u23C7\u23C5\x03\x02\x02\x02\u23C7\u23C8\x03\x02\x02\x02\u23C8\u23CA\x03" +
		"\x02\x02\x02\u23C9\u23C7\x03\x02\x02\x02\u23CA\u23CB\x05\u02CE\u0168\x05" +
		"\u23CB\u23CF\x03\x02\x02\x02\u23CC\u23CF\x05\u02EA\u0176\x02\u23CD\u23CF" +
		"\x05\u02D0\u0169\x02\u23CE\u23B2\x03\x02\x02\x02\u23CE\u23C3\x03\x02\x02" +
		"\x02\u23CE\u23CC\x03\x02\x02\x02\u23CE\u23CD\x03\x02\x02\x02\u23CF\u23E2" +
		"\x03\x02\x02\x02\u23D0\u23D4\f\x06\x02\x02\u23D1\u23D3\x05\x0E\b\x02\u23D2" +
		"\u23D1\x03\x02\x02\x02\u23D3\u23D6\x03\x02\x02\x02\u23D4\u23D2\x03\x02" +
		"\x02\x02\u23D4\u23D5\x03\x02\x02\x02\u23D5\u23D7\x03\x02\x02\x02\u23D6" +
		"\u23D4\x03\x02\x02\x02\u23D7\u23DB\x05\u02D2\u016A\x02\u23D8\u23DA\x05" +
		"\x0E\b\x02\u23D9\u23D8\x03\x02\x02\x02\u23DA\u23DD\x03\x02\x02\x02\u23DB" +
		"\u23D9\x03\x02\x02\x02\u23DB\u23DC\x03\x02\x02\x02\u23DC\u23DE\x03\x02" +
		"\x02\x02\u23DD\u23DB\x03\x02\x02\x02\u23DE\u23DF\x05\u02CE\u0168\x07\u23DF" +
		"\u23E1\x03\x02\x02\x02\u23E0\u23D0\x03\x02\x02\x02\u23E1\u23E4\x03\x02" +
		"\x02\x02\u23E2\u23E0\x03\x02\x02\x02\u23E2\u23E3\x03\x02\x02\x02\u23E3" +
		"\u02CF\x03\x02\x02\x02\u23E4\u23E2\x03\x02\x02\x02\u23E5\u23E9\x07\u01C2" +
		"\x02\x02\u23E6\u23E9\x07\u01C1\x02\x02\u23E7\u23E9\x05\n\x06\x02\u23E8" +
		"\u23E5\x03\x02\x02\x02\u23E8\u23E6\x03\x02\x02\x02\u23E8\u23E7\x03\x02" +
		"\x02\x02\u23E9\u02D1\x03\x02\x02\x02\u23EA\u23F1\x07\u01AC\x02\x02\u23EB" +
		"\u23F1\x07\u01AD\x02\x02\u23EC\u23F1\x07\u01AE\x02\x02\u23ED\u23F1\x07" +
		"\u01AF\x02\x02\u23EE\u23EF\x07\u01AE\x02\x02\u23EF\u23F1\x07\u01AE\x02" +
		"\x02\u23F0\u23EA\x03\x02\x02\x02\u23F0\u23EB\x03\x02\x02\x02\u23F0\u23EC" +
		"\x03\x02\x02\x02\u23F0\u23ED\x03\x02\x02\x02\u23F0\u23EE\x03\x02\x02\x02" +
		"\u23F1\u02D3\x03\x02\x02\x02\u23F2\u23F3\t.\x02\x02\u23F3\u02D5\x03\x02" +
		"\x02\x02\u23F4\u23F5\b\u016C\x01\x02\u23F5\u23F9\x07\u01B8\x02\x02\u23F6" +
		"\u23F8\x05\x0E\b\x02\u23F7\u23F6\x03\x02\x02\x02\u23F8\u23FB\x03\x02\x02" +
		"\x02\u23F9\u23F7\x03\x02\x02\x02\u23F9\u23FA\x03\x02\x02\x02\u23FA\u23FC" +
		"\x03\x02\x02\x02\u23FB\u23F9\x03\x02\x02\x02\u23FC\u2400\x05\u02D6\u016C" +
		"\x02\u23FD\u23FF\x05\x0E\b\x02\u23FE\u23FD\x03\x02\x02\x02\u23FF\u2402" +
		"\x03\x02\x02\x02\u2400\u23FE\x03\x02\x02\x02\u2400\u2401\x03\x02\x02\x02" +
		"\u2401\u2403\x03\x02\x02\x02\u2402\u2400\x03\x02\x02\x02\u2403\u2404\x07" +
		"\u01B9\x02\x02\u2404\u2412\x03\x02\x02\x02\u2405\u2409\x07\xFA\x02\x02" +
		"\u2406\u2408\x05\x0E\b\x02\u2407\u2406\x03\x02\x02\x02\u2408\u240B\x03" +
		"\x02\x02\x02\u2409\u2407\x03\x02\x02\x02\u2409\u240A\x03\x02\x02\x02\u240A" +
		"\u240C\x03\x02\x02\x02\u240B\u2409\x03\x02\x02\x02\u240C\u2412\x05\u02D6" +
		"\u016C\x07\u240D\u2412\x05\u02E2\u0172\x02\u240E\u2412\x05\u02DA\u016E" +
		"\x02\u240F\u2412\x05\u02DE\u0170\x02\u2410\u2412\x05\u02D8\u016D\x02\u2411" +
		"\u23F4\x03\x02\x02\x02\u2411\u2405\x03\x02\x02\x02\u2411\u240D\x03\x02" +
		"\x02\x02\u2411\u240E\x03\x02\x02\x02\u2411\u240F\x03\x02\x02\x02\u2411" +
		"\u2410\x03\x02\x02\x02\u2412\u2425\x03\x02\x02\x02\u2413\u2417\f\b\x02" +
		"\x02\u2414\u2416\x05\x0E\b\x02\u2415\u2414\x03\x02\x02\x02\u2416\u2419" +
		"\x03\x02\x02\x02\u2417\u2415\x03\x02\x02\x02\u2417\u2418\x03\x02\x02\x02" +
		"\u2418\u241A\x03\x02\x02\x02\u2419\u2417\x03\x02\x02\x02\u241A\u241E\x05" +
		"\u02DC\u016F\x02\u241B\u241D\x05\x0E\b\x02\u241C\u241B\x03\x02\x02\x02" +
		"\u241D\u2420\x03\x02\x02\x02\u241E\u241C\x03\x02\x02\x02\u241E\u241F\x03" +
		"\x02\x02\x02\u241F\u2421\x03\x02\x02\x02\u2420\u241E\x03\x02\x02\x02\u2421" +
		"\u2422\x05\u02D6\u016C\t\u2422\u2424\x03\x02\x02\x02\u2423\u2413\x03\x02" +
		"\x02\x02\u2424\u2427\x03\x02\x02\x02\u2425\u2423\x03\x02\x02\x02\u2425" +
		"\u2426\x03\x02\x02\x02\u2426\u02D7\x03\x02\x02\x02\u2427\u2425\x03\x02" +
		"\x02\x02\u2428\u2430\x05\u023E\u0120\x02\u2429\u242B\x05\x0E\b\x02\u242A" +
		"\u2429\x03\x02\x02\x02\u242B\u242C\x03\x02\x02\x02\u242C\u242A\x03\x02" +
		"\x02\x02\u242C\u242D\x03\x02\x02\x02\u242D\u242E\x03\x02\x02\x02\u242E" +
		"\u242F\x07\xD6\x02\x02\u242F\u2431\x03\x02\x02\x02\u2430\u242A\x03\x02" +
		"\x02\x02\u2430\u2431\x03\x02\x02\x02\u2431\u2433\x03\x02\x02\x02\u2432" +
		"\u2434\x05\x0E\b\x02\u2433\u2432\x03\x02\x02\x02\u2434\u2435\x03\x02\x02" +
		"\x02\u2435\u2433\x03\x02\x02\x02\u2435\u2436\x03\x02\x02\x02\u2436\u2437" +
		"\x03\x02\x02\x02\u2437\u2438\t/\x02\x02\u2438\u02D9\x03\x02\x02\x02\u2439" +
		"\u243A\b\u016E\x01\x02\u243A\u243E\x05\u02CE\u0168\x02\u243B\u243D\x05" +
		"\x0E\b\x02\u243C\u243B\x03\x02\x02\x02\u243D\u2440\x03\x02\x02\x02\u243E" +
		"\u243C\x03\x02\x02\x02\u243E\u243F\x03\x02\x02\x02\u243F\u2441\x03\x02" +
		"\x02\x02\u2440\u243E\x03\x02\x02\x02\u2441\u2445\x05\u02E6\u0174\x02\u2442" +
		"\u2444\x05\x0E\b\x02\u2443\u2442\x03\x02\x02\x02\u2444\u2447\x03\x02\x02" +
		"\x02\u2445\u2443\x03\x02\x02\x02\u2445\u2446\x03\x02\x02\x02\u2446\u2448" +
		"\x03\x02\x02\x02\u2447\u2445\x03\x02\x02\x02\u2448\u2449\x05\u02CE\u0168" +
		"\x02\u2449\u244D\x03\x02\x02\x02\u244A\u244D\x05\u02E2\u0172\x02\u244B" +
		"\u244D\x05\u023E\u0120\x02\u244C\u2439\x03\x02\x02\x02\u244C\u244A\x03" +
		"\x02\x02\x02\u244C\u244B\x03\x02\x02\x02\u244D\u2466\x03\x02\x02\x02\u244E" +
		"\u2450\f\x03\x02\x02\u244F\u2451\x05\x0E\b\x02\u2450\u244F\x03\x02\x02" +
		"\x02\u2451\u2452\x03\x02\x02\x02\u2452\u2450\x03\x02\x02\x02\u2452\u2453" +
		"\x03\x02\x02\x02\u2453\u2454\x03\x02\x02\x02\u2454\u2458\x05\u02DC\u016F" +
		"\x02\u2455\u2457\x05\x0E\b\x02\u2456\u2455\x03\x02\x02\x02\u2457\u245A" +
		"\x03\x02\x02\x02\u2458\u2456\x03\x02\x02\x02\u2458\u2459\x03\x02\x02\x02" +
		"\u2459\u245B\x03\x02\x02\x02\u245A\u2458\x03\x02\x02\x02\u245B\u245F\x05" +
		"\u02E6\u0174\x02\u245C\u245E\x05\x0E\b\x02\u245D\u245C\x03\x02\x02\x02" +
		"\u245E\u2461\x03\x02\x02\x02\u245F\u245D\x03\x02\x02\x02\u245F\u2460\x03" +
		"\x02\x02\x02\u2460\u2462\x03\x02\x02\x02\u2461\u245F\x03\x02\x02\x02\u2462" +
		"\u2463\x05\u02CE\u0168\x02\u2463\u2465\x03\x02\x02\x02\u2464\u244E\x03" +
		"\x02\x02\x02\u2465\u2468\x03\x02\x02\x02\u2466\u2464\x03\x02\x02\x02\u2466" +
		"\u2467\x03\x02\x02\x02\u2467\u02DB\x03\x02\x02\x02\u2468\u2466\x03\x02" +
		"\x02\x02\u2469\u246A\t0\x02\x02\u246A\u02DD\x03\x02\x02\x02\u246B\u2473" +
		"\x05\u02CE\u0168\x02\u246C\u246E\x05\x0E\b\x02\u246D\u246C\x03\x02\x02" +
		"\x02\u246E\u246F\x03\x02\x02\x02\u246F\u246D\x03\x02\x02\x02\u246F\u2470" +
		"\x03\x02\x02\x02\u2470\u2471\x03\x02\x02\x02\u2471\u2472\x07\xD6\x02\x02" +
		"\u2472\u2474\x03\x02\x02\x02\u2473\u246D\x03\x02\x02\x02\u2473\u2474\x03" +
		"\x02\x02\x02\u2474\u247C\x03\x02\x02\x02\u2475\u2477\x05\x0E\b\x02\u2476" +
		"\u2475\x03\x02\x02\x02\u2477\u2478\x03\x02\x02\x02\u2478\u2476\x03\x02" +
		"\x02\x02\u2478\u2479\x03\x02\x02\x02\u2479\u247A\x03\x02\x02\x02\u247A" +
		"\u247B\x07\xFA\x02\x02\u247B\u247D\x03\x02\x02\x02\u247C\u2476\x03\x02" +
		"\x02\x02\u247C\u247D\x03\x02\x02\x02\u247D\u247F\x03\x02\x02\x02\u247E" +
		"\u2480\x05\x0E\b\x02\u247F\u247E\x03\x02\x02\x02\u2480\u2481\x03\x02\x02" +
		"\x02\u2481\u247F\x03\x02\x02\x02\u2481\u2482\x03\x02\x02\x02\u2482\u2483" +
		"\x03\x02\x02\x02\u2483\u2484\x05\u02E0\u0171\x02\u2484\u02DF\x03\x02\x02" +
		"\x02\u2485\u2486\t1\x02\x02\u2486\u02E1\x03\x02\x02\x02\u2487\u248F\x05" +
		"\u02EA\u0176\x02\u2488\u248A\x05\x0E\b\x02\u2489\u2488\x03\x02\x02\x02" +
		"\u248A\u248B\x03\x02\x02\x02\u248B\u2489\x03\x02\x02\x02\u248B\u248C\x03" +
		"\x02\x02\x02\u248C\u248D\x03\x02\x02\x02\u248D\u248E\x07\xD6\x02\x02\u248E" +
		"\u2490\x03\x02\x02\x02\u248F\u2489\x03\x02\x02\x02\u248F\u2490\x03\x02" +
		"\x02\x02\u2490\u2498\x03\x02\x02\x02\u2491\u2493\x05\x0E\b\x02\u2492\u2491" +
		"\x03\x02\x02\x02\u2493\u2494\x03\x02\x02\x02\u2494\u2492\x03\x02\x02\x02" +
		"\u2494\u2495\x03\x02\x02\x02\u2495\u2496\x03\x02\x02\x02\u2496\u2497\x07" +
		"\xFA\x02\x02\u2497\u2499\x03\x02\x02\x02\u2498\u2492\x03\x02\x02\x02\u2498" +
		"\u2499\x03\x02\x02\x02\u2499\u249B\x03\x02\x02\x02\u249A\u249C\x05\x0E" +
		"\b\x02\u249B\u249A\x03\x02\x02\x02\u249C\u249D\x03\x02\x02\x02\u249D\u249B" +
		"\x03\x02\x02\x02\u249D\u249E\x03\x02\x02\x02\u249E\u249F\x03\x02\x02\x02" +
		"\u249F\u24A0\x05\u02E4\u0173\x02\u24A0\u02E3\x03\x02\x02\x02\u24A1\u24A2" +
		"\t2\x02\x02\u24A2\u02E5\x03\x02\x02\x02\u24A3\u24A7\x07\xD6\x02\x02\u24A4" +
		"\u24A6\x05\x0E\b\x02\u24A5\u24A4\x03\x02\x02\x02\u24A6\u24A9\x03\x02\x02" +
		"\x02\u24A7\u24A5\x03\x02\x02\x02\u24A7\u24A8\x03\x02\x02\x02\u24A8\u24AB" +
		"\x03\x02\x02\x02\u24A9\u24A7\x03\x02\x02\x02\u24AA\u24A3\x03\x02\x02\x02" +
		"\u24AA\u24AB\x03\x02\x02\x02\u24AB\u2533\x03\x02\x02\x02\u24AC\u24B0\x07" +
		"\xFA\x02\x02\u24AD\u24AF\x05\x0E\b\x02\u24AE\u24AD\x03\x02\x02\x02\u24AF" +
		"\u24B2\x03\x02\x02\x02\u24B0\u24AE\x03\x02\x02\x02\u24B0\u24B1\x03\x02" +
		"\x02\x02\u24B1\u24B4\x03\x02\x02\x02\u24B2\u24B0\x03\x02\x02\x02\u24B3" +
		"\u24AC\x03\x02\x02\x02\u24B3\u24B4\x03\x02\x02\x02\u24B4\u24F1\x03\x02" +
		"\x02\x02\u24B5\u24BD\x07\xBE\x02\x02\u24B6\u24B8\x05\x0E\b\x02\u24B7\u24B6" +
		"\x03\x02\x02\x02\u24B8\u24B9\x03\x02\x02\x02\u24B9\u24B7\x03\x02\x02\x02" +
		"\u24B9\u24BA\x03\x02\x02\x02\u24BA\u24BB\x03\x02\x02\x02\u24BB\u24BC\x07" +
		"\u0170\x02\x02\u24BC\u24BE\x03\x02\x02\x02\u24BD\u24B7\x03\x02\x02\x02" +
		"\u24BD\u24BE\x03\x02\x02\x02\u24BE\u24F2\x03\x02\x02\x02\u24BF\u24C7\x07" +
		"\u01B7\x02\x02\u24C0\u24C2\x05\x0E\b\x02\u24C1\u24C0\x03\x02\x02\x02\u24C2" +
		"\u24C3\x03\x02\x02\x02\u24C3\u24C1\x03\x02\x02\x02\u24C3\u24C4\x03\x02" +
		"\x02\x02\u24C4\u24C5\x03\x02\x02\x02\u24C5\u24C6\x07\u0170\x02\x02\u24C6" +
		"\u24C8\x03\x02\x02\x02\u24C7\u24C1\x03\x02\x02\x02\u24C7\u24C8\x03\x02" +
		"\x02\x02\u24C8\u24F2\x03\x02\x02\x02\u24C9\u24D1\x07\xE0\x02\x02\u24CA" +
		"\u24CC\x05\x0E\b\x02\u24CB\u24CA\x03\x02\x02\x02\u24CC\u24CD\x03\x02\x02" +
		"\x02\u24CD\u24CB\x03\x02\x02\x02\u24CD\u24CE\x03\x02\x02\x02\u24CE\u24CF" +
		"\x03\x02\x02\x02\u24CF\u24D0\x07\u0170\x02\x02\u24D0\u24D2\x03\x02\x02" +
		"\x02\u24D1\u24CB\x03\x02\x02\x02\u24D1\u24D2\x03\x02\x02\x02\u24D2\u24F2" +
		"\x03\x02\x02\x02\u24D3\u24DB\x07\u01B4\x02\x02\u24D4\u24D6\x05\x0E\b\x02" +
		"\u24D5\u24D4\x03\x02\x02\x02\u24D6\u24D7\x03\x02\x02\x02\u24D7\u24D5\x03" +
		"\x02\x02\x02\u24D7\u24D8\x03\x02\x02\x02\u24D8\u24D9\x03\x02\x02\x02\u24D9" +
		"\u24DA\x07\u0170\x02\x02\u24DA\u24DC\x03\x02\x02\x02\u24DB\u24D5\x03\x02" +
		"\x02\x02\u24DB\u24DC\x03\x02\x02\x02\u24DC\u24F2\x03\x02\x02\x02\u24DD" +
		"\u24E5\x07\x9C\x02\x02\u24DE\u24E0\x05\x0E\b\x02\u24DF\u24DE\x03\x02\x02" +
		"\x02\u24E0\u24E1\x03\x02\x02\x02\u24E1\u24DF\x03\x02\x02\x02\u24E1\u24E2" +
		"\x03\x02\x02\x02\u24E2\u24E3\x03\x02\x02\x02\u24E3\u24E4\x07\u0175\x02" +
		"\x02\u24E4\u24E6\x03\x02\x02\x02\u24E5\u24DF\x03\x02\x02\x02\u24E5\u24E6" +
		"\x03\x02\x02\x02\u24E6\u24F2\x03\x02\x02\x02\u24E7\u24EF\x07\u01B3\x02" +
		"\x02\u24E8\u24EA\x05\x0E\b\x02\u24E9\u24E8\x03\x02\x02\x02\u24EA\u24EB" +
		"\x03\x02\x02\x02\u24EB\u24E9\x03\x02\x02\x02\u24EB\u24EC\x03\x02\x02\x02" +
		"\u24EC\u24ED\x03\x02\x02\x02\u24ED\u24EE\x07\u0175\x02\x02\u24EE\u24F0" +
		"\x03\x02\x02\x02\u24EF\u24E9\x03\x02\x02\x02\u24EF\u24F0\x03\x02\x02\x02" +
		"\u24F0\u24F2\x03\x02\x02\x02\u24F1\u24B5\x03\x02\x02\x02\u24F1\u24BF\x03" +
		"\x02\x02\x02\u24F1\u24C9\x03\x02\x02\x02\u24F1\u24D3\x03\x02\x02\x02\u24F1" +
		"\u24DD\x03\x02\x02\x02\u24F1\u24E7\x03\x02\x02\x02\u24F2\u2534\x03\x02" +
		"\x02\x02\u24F3\u24FB\x07\xBE\x02\x02\u24F4\u24F6\x05\x0E\b\x02\u24F5\u24F4" +
		"\x03\x02\x02\x02\u24F6\u24F7\x03\x02\x02\x02\u24F7\u24F5\x03\x02\x02\x02" +
		"\u24F7\u24F8\x03\x02\x02\x02\u24F8\u24F9\x03\x02\x02\x02\u24F9\u24FA\x07" +
		"\u0170\x02\x02\u24FA\u24FC\x03\x02\x02\x02\u24FB\u24F5\x03\x02\x02\x02" +
		"\u24FB\u24FC\x03\x02\x02\x02\u24FC\u24FE\x03\x02\x02\x02\u24FD\u24FF\x05" +
		"\x0E\b\x02\u24FE\u24FD\x03\x02\x02\x02\u24FF\u2500\x03\x02\x02\x02\u2500" +
		"\u24FE\x03\x02\x02\x02\u2500\u2501\x03\x02\x02\x02\u2501\u2502\x03\x02" +
		"\x02\x02\u2502\u2504\x07\u0106\x02\x02\u2503\u2505\x05\x0E\b\x02\u2504" +
		"\u2503\x03\x02\x02\x02\u2505\u2506\x03\x02\x02\x02\u2506\u2504\x03\x02" +
		"\x02\x02\u2506\u2507\x03\x02\x02\x02\u2507\u2508\x03\x02\x02\x02\u2508" +
		"\u2510\x07\x9C\x02\x02\u2509\u250B\x05\x0E\b\x02\u250A\u2509\x03\x02\x02" +
		"\x02\u250B\u250C\x03\x02\x02\x02\u250C\u250A\x03\x02\x02\x02\u250C\u250D" +
		"\x03\x02\x02\x02\u250D\u250E\x03\x02\x02\x02\u250E\u250F\x07\u0175\x02" +
		"\x02\u250F\u2511\x03\x02\x02\x02\u2510\u250A\x03\x02\x02\x02\u2510\u2511" +
		"\x03\x02\x02\x02\u2511\u2534\x03\x02\x02\x02\u2512\u2534\x07\u01B6\x02" +
		"\x02\u2513\u251B\x07\xE0\x02\x02\u2514\u2516\x05\x0E\b\x02\u2515\u2514" +
		"\x03\x02\x02\x02\u2516\u2517\x03\x02\x02\x02\u2517\u2515\x03\x02\x02\x02" +
		"\u2517\u2518\x03\x02\x02\x02\u2518\u2519\x03\x02\x02\x02\u2519\u251A\x07" +
		"\u0170\x02\x02\u251A\u251C\x03\x02\x02\x02\u251B\u2515\x03\x02\x02\x02" +
		"\u251B\u251C\x03\x02\x02\x02\u251C\u251E\x03\x02\x02\x02\u251D\u251F\x05" +
		"\x0E\b\x02\u251E\u251D\x03\x02\x02\x02\u251F\u2520\x03\x02\x02\x02\u2520" +
		"\u251E\x03\x02\x02\x02\u2520\u2521\x03\x02\x02\x02\u2521\u2522\x03\x02" +
		"\x02\x02\u2522\u2524\x07\u0106\x02\x02\u2523\u2525\x05\x0E\b\x02\u2524" +
		"\u2523\x03\x02\x02\x02\u2525\u2526\x03\x02\x02\x02\u2526\u2524\x03\x02" +
		"\x02\x02\u2526\u2527\x03\x02\x02\x02\u2527\u2528\x03\x02\x02\x02\u2528" +
		"\u2530\x07\x9C\x02\x02\u2529\u252B\x05\x0E\b\x02\u252A\u2529\x03\x02\x02" +
		"\x02\u252B\u252C\x03\x02\x02\x02\u252C\u252A\x03\x02\x02\x02\u252C\u252D" +
		"\x03\x02\x02\x02\u252D\u252E\x03\x02\x02\x02\u252E\u252F\x07\u0175\x02" +
		"\x02\u252F\u2531\x03\x02\x02\x02\u2530\u252A\x03\x02\x02\x02\u2530\u2531" +
		"\x03\x02\x02\x02\u2531\u2534\x03\x02\x02\x02\u2532\u2534\x07\u01B5\x02" +
		"\x02\u2533\u24B3\x03\x02\x02\x02\u2533\u24F3\x03\x02\x02\x02\u2533\u2512" +
		"\x03\x02\x02\x02\u2533\u2513\x03\x02\x02\x02\u2533\u2532\x03\x02\x02\x02" +
		"\u2534\u02E7\x03\x02\x02\x02\u2535\u253D\x05\u023E\u0120\x02\u2536\u2538" +
		"\x05\x0E\b\x02\u2537\u2536\x03\x02\x02\x02\u2538\u253B\x03\x02\x02\x02" +
		"\u2539\u2537\x03\x02\x02\x02\u2539\u253A\x03\x02\x02\x02\u253A\u253C\x03" +
		"\x02\x02\x02\u253B\u2539\x03\x02\x02\x02\u253C\u253E\x05\u02EE\u0178\x02" +
		"\u253D\u2539\x03\x02\x02\x02\u253D\u253E\x03\x02\x02\x02\u253E\u2546\x03" +
		"\x02\x02\x02\u253F\u2541\x05\x0E\b\x02\u2540\u253F\x03\x02\x02\x02\u2541" +
		"\u2544\x03\x02\x02\x02\u2542\u2540\x03\x02\x02\x02\u2542\u2543\x03\x02" +
		"\x02\x02\u2543\u2545\x03\x02\x02\x02\u2544\u2542\x03\x02\x02\x02\u2545" +
		"\u2547\x05\u02F0\u0179\x02\u2546\u2542\x03\x02\x02\x02\u2546\u2547\x03" +
		"\x02\x02\x02\u2547\u02E9\x03\x02\x02\x02\u2548\u2564\x05\u02E8\u0175\x02" +
		"\u2549\u254D\x07\xB9\x02\x02\u254A\u254C\x05\x0E\b\x02\u254B\u254A\x03" +
		"\x02\x02\x02\u254C\u254F\x03\x02\x02\x02\u254D\u254B\x03\x02\x02\x02\u254D" +
		"\u254E\x03\x02\x02\x02\u254E\u2550\x03\x02\x02\x02\u254F\u254D\x03\x02" +
		"\x02\x02\u2550\u2558\x05\u02F6\u017C\x02\u2551\u2553\x05\x0E\b\x02\u2552" +
		"\u2551\x03\x02\x02\x02\u2553\u2556\x03\x02\x02\x02\u2554\u2552\x03\x02" +
		"\x02\x02\u2554\u2555\x03\x02\x02\x02\u2555\u2557\x03\x02\x02\x02\u2556" +
		"\u2554\x03\x02\x02\x02\u2557\u2559\x05\u02EC\u0177\x02\u2558\u2554\x03" +
		"\x02\x02\x02\u2558\u2559\x03\x02\x02\x02\u2559\u2561\x03\x02\x02\x02\u255A" +
		"\u255C\x05\x0E\b\x02\u255B\u255A\x03\x02\x02\x02\u255C\u255F\x03\x02\x02" +
		"\x02\u255D\u255B\x03\x02\x02\x02\u255D\u255E\x03\x02\x02\x02\u255E\u2560" +
		"\x03\x02\x02\x02\u255F\u255D\x03\x02\x02\x02\u2560\u2562\x05\u02F0\u0179" +
		"\x02\u2561\u255D\x03\x02\x02\x02\u2561\u2562\x03\x02\x02\x02\u2562\u2564" +
		"\x03\x02\x02\x02\u2563\u2548\x03\x02\x02\x02\u2563\u2549\x03\x02\x02\x02" +
		"\u2564\u02EB\x03\x02\x02\x02\u2565\u2566\x05\u02EE\u0178\x02\u2566\u02ED" +
		"\x03\x02\x02\x02\u2567\u256B\x07\u01B8\x02\x02\u2568\u256A\x05\x0E\b\x02" +
		"\u2569\u2568\x03\x02\x02\x02\u256A\u256D\x03\x02\x02\x02\u256B\u2569\x03" +
		"\x02\x02\x02\u256B\u256C\x03\x02\x02\x02\u256C\u2570\x03\x02\x02\x02\u256D" +
		"\u256B\x03\x02\x02\x02\u256E\u2571\x05\u02CE\u0168\x02\u256F\u2571\x07" +
		"\v\x02\x02\u2570\u256E\x03\x02\x02\x02\u2570\u256F\x03\x02\x02\x02\u2571" +
		"\u257E\x03\x02\x02\x02\u2572\u2574\x05\f\x07\x02\u2573\u2572\x03\x02\x02" +
		"\x02\u2574\u2577\x03\x02\x02\x02\u2575\u2573\x03\x02\x02\x02\u2575\u2576" +
		"\x03\x02\x02\x02\u2576\u257A\x03\x02\x02\x02\u2577\u2575\x03\x02\x02\x02" +
		"\u2578\u257B\x05\u02CE\u0168\x02\u2579\u257B\x07\v\x02\x02\u257A\u2578" +
		"\x03\x02\x02\x02\u257A\u2579\x03\x02\x02\x02\u257B\u257D\x03\x02\x02\x02" +
		"\u257C\u2575\x03\x02\x02\x02\u257D\u2580\x03\x02\x02\x02\u257E\u257C\x03" +
		"\x02\x02\x02\u257E\u257F\x03\x02\x02\x02\u257F\u2584\x03\x02\x02\x02\u2580" +
		"\u257E\x03\x02\x02\x02\u2581\u2583\x05\x0E\b\x02\u2582\u2581\x03\x02\x02" +
		"\x02\u2583\u2586\x03\x02\x02\x02\u2584\u2582\x03\x02\x02\x02\u2584\u2585" +
		"\x03\x02\x02\x02\u2585\u2587\x03\x02\x02\x02\u2586\u2584\x03\x02\x02\x02" +
		"\u2587\u2588\x07\u01B9\x02\x02\u2588\u02EF\x03\x02\x02\x02\u2589\u258D" +
		"\x07\u01B8\x02\x02\u258A\u258C\x05\x0E\b\x02\u258B\u258A\x03\x02\x02\x02" +
		"\u258C\u258F\x03\x02\x02\x02\u258D\u258B\x03\x02\x02\x02\u258D\u258E\x03" +
		"\x02\x02\x02\u258E\u2590\x03\x02\x02\x02\u258F\u258D\x03\x02\x02\x02\u2590" +
		"\u2594\x05\u02F2\u017A\x02\u2591\u2593\x05\x0E\b\x02\u2592\u2591\x03\x02" +
		"\x02\x02\u2593\u2596\x03\x02\x02\x02\u2594\u2592\x03\x02\x02\x02\u2594" +
		"\u2595\x03\x02\x02\x02\u2595\u2597\x03\x02\x02\x02\u2596\u2594\x03\x02" +
		"\x02\x02\u2597\u259F\x07\u01B2\x02\x02\u2598\u259A\x05\x0E\b\x02\u2599" +
		"\u2598\x03\x02\x02\x02\u259A\u259D\x03\x02\x02\x02\u259B\u2599\x03\x02" +
		"\x02\x02\u259B\u259C\x03\x02\x02\x02\u259C\u259E\x03\x02\x02\x02\u259D" +
		"\u259B\x03\x02\x02\x02\u259E\u25A0\x05\u02F4\u017B\x02\u259F\u259B\x03" +
		"\x02\x02\x02\u259F\u25A0\x03\x02\x02\x02\u25A0\u25A4\x03\x02\x02\x02\u25A1" +
		"\u25A3\x05\x0E\b\x02\u25A2\u25A1\x03\x02\x02\x02\u25A3\u25A6\x03\x02\x02" +
		"\x02\u25A4\u25A2\x03\x02\x02\x02\u25A4\u25A5\x03\x02\x02\x02\u25A5\u25A7" +
		"\x03\x02\x02\x02\u25A6";
	private static readonly _serializedATNSegment18: string =
		"\u25A4\x03\x02\x02\x02\u25A7\u25A8\x07\u01B9\x02\x02\u25A8\u02F1\x03\x02" +
		"\x02\x02\u25A9\u25AA\x05\u02CE\u0168\x02\u25AA\u02F3\x03\x02\x02\x02\u25AB" +
		"\u25AC\x05\u02CE\u0168\x02\u25AC\u02F5\x03\x02\x02\x02\u25AD\u25AE\x07" +
		"\u01C4\x02\x02\u25AE\u02F7\x03\x02\x02\x02\u067A\u02FA\u02FC\u0305\u030B" +
		"\u030F\u0317\u031D\u0323\u032B\u032F\u0333\u0336\u0339\u033D\u0343\u0348" +
		"\u034F\u0354\u0357\u035C\u0360\u0365\u036C\u0371\u0378\u037E\u0382\u0387" +
		"\u038E\u0395\u039B\u039F\u03A4\u03A8\u03AD\u03B4\u03BD\u03C4\u03CB\u03D0" +
		"\u03D6\u03DC\u03E3\u03EB\u03F1\u03FA\u0401\u0408\u040D\u0414\u0419\u041E" +
		"\u0425\u0428\u042E\u0432\u0437\u043D\u0441\u0446\u044C\u0452\u0456\u045B" +
		"\u0461\u0468\u046F\u0475\u0479\u047E\u0485\u048E\u0494\u049B\u04A1\u04A7" +
		"\u04AB\u04B0\u04B7\u04C2\u04C8\u04CE\u04D5\u04DD\u04E6\u04EC\u050C\u0512" +
		"\u0518\u051E\u0522\u0527\u052D\u0533\u0537\u0539\u053E\u0542\u0547\u054B" +
		"\u0553\u0559\u055D\u0562\u0568\u056C\u0571\u0577\u057D\u0581\u0586\u058A" +
		"\u0592\u0598\u059E\u05A2\u05AC\u05B2\u05B8\u05BE\u05C2\u05C7\u05CB\u05D0" +
		"\u05D6\u05D8\u05DC\u05E6\u05EC\u05F0\u05F5\u05F9\u05FE\u0604\u0608\u060D" +
		"\u0613\u0619\u061D\u0622\u0626\u062B\u0631\u0635\u063A\u0640\u0644\u0646" +
		"\u064B\u064F\u0651\u0656\u065A\u0660\u0662\u0668\u066A\u0671\u0675\u067A" +
		"\u067E\u0684\u068C\u0690\u0692\u0694\u069A\u06A0\u06A6\u06AA\u06AC\u06B1" +
		"\u06B6\u06B8\u06BD\u06C3\u06C8\u06CC\u06D0\u06D5\u06DD\u06DF\u06E5\u06ED" +
		"\u06EF\u06F5\u06FD\u06FF\u0705\u070B\u0711\u0717\u071D\u0723\u0729\u072F" +
		"\u0736\u073C\u0742\u0748\u074E\u0752\u075A\u0760\u0766\u076C\u0772\u0778" +
		"\u077A\u0780\u0784\u0788\u078C\u078E\u0794\u079A\u07A0\u07A2\u07A8\u07AC" +
		"\u07B1\u07B5\u07B9\u07BF\u07C1\u07C8\u07CE\u07D2\u07D9\u07DD\u07E2\u07E6" +
		"\u07EC\u07F2\u07FA\u07FE\u0803\u0807\u080D\u0813\u081B\u081F\u0824\u0828" +
		"\u082E\u0834\u0838\u083A\u083C\u0842\u0848\u084E\u0854\u0858\u085D\u0863" +
		"\u0867\u086B\u0870\u0874\u0879\u087D\u0881\u0887\u088D\u0893\u0898\u089E" +
		"\u08A0\u08A6\u08AC\u08AE\u08B2\u08B7\u08BD\u08C3\u08C8\u08CC\u08D2\u08D8" +
		"\u08DE\u08E0\u08E6\u08EC\u08F0\u08FF\u0901\u0907\u090B\u0910\u0916\u0920" +
		"\u0926\u092C\u0930\u0934\u093A\u0940\u0946\u094C\u0952\u095D\u0961\u0965" +
		"\u096B\u0971\u0977\u097D\u0983\u0988\u0990\u0996\u099C\u09A2\u09AB\u09B1" +
		"\u09B7\u09BD\u09C1\u09C5\u09CB\u09D1\u09D8\u09DC\u09E1\u09E9\u09EF\u09F5" +
		"\u09FA\u09FF\u0A0B\u0A11\u0A17\u0A1D\u0A22\u0A28\u0A2F\u0A35\u0A3B\u0A3D" +
		"\u0A43\u0A49\u0A4D\u0A55\u0A5B\u0A5D\u0A63\u0A69\u0A71\u0A77\u0A7B\u0A80" +
		"\u0A87\u0A8B\u0A90\u0A96\u0A9D\u0AA1\u0AA3\u0AA8\u0AAC\u0AB2\u0ABE\u0AC6" +
		"\u0ACA\u0ACF\u0AD3\u0AD9\u0ADD\u0AE2\u0AE8\u0AEE\u0AF2\u0AF7\u0AFB\u0B03" +
		"\u0B09\u0B0D\u0B12\u0B18\u0B1E\u0B24\u0B2A\u0B2E\u0B33\u0B39\u0B3F\u0B45" +
		"\u0B4A\u0B50\u0B56\u0B5A\u0B5F\u0B63\u0B6A\u0B6C\u0B72\u0B78\u0B7C\u0B81" +
		"\u0B87\u0B8B\u0B91\u0B97\u0B9D\u0BA3\u0BA7\u0BAC\u0BB2\u0BB6\u0BBA\u0BBF" +
		"\u0BC3\u0BC8\u0BCC\u0BD2\u0BD8\u0BDE\u0BE4\u0BE8\u0BED\u0BF3\u0BF7\u0BFC" +
		"\u0C02\u0C08\u0C0C\u0C11\u0C15\u0C1B\u0C21\u0C27\u0C2D\u0C33\u0C38\u0C3D" +
		"\u0C41\u0C47\u0C4D\u0C53\u0C58\u0C5D\u0C61\u0C67\u0C6D\u0C73\u0C75\u0C7B" +
		"\u0C7F\u0C85\u0C89\u0C8B\u0C8D\u0C92\u0C96\u0C9C\u0CA2\u0CA8\u0CAE\u0CB2" +
		"\u0CB7\u0CBB\u0CBF\u0CC7\u0CCB\u0CD0\u0CD4\u0CDA\u0CDE\u0CE3\u0CE7\u0CED" +
		"\u0CEF\u0CF6\u0CFE\u0D00\u0D06\u0D0A\u0D0C\u0D15\u0D1B\u0D1D\u0D23\u0D27" +
		"\u0D29\u0D2E\u0D36\u0D38\u0D41\u0D43\u0D4B\u0D4D\u0D54\u0D56\u0D5C\u0D60" +
		"\u0D62\u0D68\u0D6A\u0D70\u0D74\u0D79\u0D81\u0D83\u0D89\u0D8D\u0D92\u0D9C" +
		"\u0DA2\u0DA6\u0DAB\u0DAF\u0DB4\u0DB8\u0DC0\u0DC6\u0DCA\u0DCE\u0DD3\u0DD9" +
		"\u0DDE\u0DE5\u0DE8\u0DEE\u0DF2\u0DF7\u0DFB\u0E01\u0E07\u0E0B\u0E0F\u0E15" +
		"\u0E1B\u0E1D\u0E24\u0E26\u0E2C\u0E30\u0E32\u0E38\u0E3A\u0E40\u0E45\u0E47" +
		"\u0E4D\u0E53\u0E59\u0E5F\u0E63\u0E68\u0E6C\u0E71\u0E75\u0E7A\u0E7E\u0E84" +
		"\u0E8C\u0E92\u0E99\u0E9B\u0EA1\u0EA7\u0EAA\u0EB0\u0EB2\u0EB9\u0EBB\u0EC2" +
		"\u0EC4\u0ECB\u0ECD\u0ED0\u0ED5\u0EDD\u0EE3\u0EE9\u0EEF\u0EF5\u0EF7\u0EFD" +
		"\u0F07\u0F0D\u0F12\u0F18\u0F1E\u0F22\u0F26\u0F2C\u0F32\u0F38\u0F3C\u0F41" +
		"\u0F47\u0F4C\u0F52\u0F58\u0F5C\u0F60\u0F66\u0F6C\u0F72\u0F78\u0F7E\u0F82" +
		"\u0F84\u0F89\u0F8D\u0F92\u0F96\u0F9C\u0FA4\u0FAA\u0FB0\u0FB4\u0FBA\u0FC0" +
		"\u0FC4\u0FC6\u0FCC\u0FD2\u0FD6\u0FDC\u0FE2\u0FE6\u0FE8\u0FEE\u0FF4\u0FF8" +
		"\u0FFE\u1004\u1008\u100A\u1010\u1016\u101A\u1020\u1026\u102A\u102C\u1032" +
		"\u1038\u103E\u1040\u1046\u104A\u104F\u1053\u105B\u1061\u1067\u106B\u1070" +
		"\u1076\u107A\u107F\u1083\u1088\u108C\u1092\u1098\u109E\u10A6\u10AC\u10B2" +
		"\u10B7\u10BB\u10BD\u10C2\u10C6\u10CC\u10D2\u10D4\u10DA\u10E0\u10E2\u10E8" +
		"\u10EE\u10F3\u10F7\u10F9\u10FE\u1102\u1108\u110E\u1112\u1117\u111B\u1120" +
		"\u1124\u112A\u112C\u1132\u1136\u113C\u1140\u1142\u1148\u114E\u1150\u1154" +
		"\u115A\u1160\u1162\u1166\u116C\u116E\u1174\u1178\u117D\u1185\u1187\u118D" +
		"\u1191\u1196\u119E\u11A4\u11A6\u11AC\u11B0\u11B2\u11B7\u11BF\u11C1\u11C4" +
		"\u11CD\u11CF\u11D6\u11DA\u11E0\u11E2\u11EA\u11EC\u11F2\u11FA\u1200\u1202" +
		"\u120A\u120C\u1212\u1216\u121B\u121F\u122A\u122E\u1230\u1236\u123E\u1240" +
		"\u1247\u1249\u124F\u1257\u1259\u1260\u1262\u1268\u126C\u1272\u1279\u127F" +
		"\u1283\u1285\u128B\u128F\u1291\u1297\u129B\u12A1\u12A5\u12A9\u12B3\u12B5" +
		"\u12BB\u12BF\u12C5\u12C7\u12CD\u12D1\u12D7\u12D9\u12DF\u12E5\u12E9\u12EF" +
		"\u12F3\u12F8\u12FC\u1302\u1308\u130F\u1316\u1319\u131F\u1322\u1328\u132B" +
		"\u1331\u1334\u133A\u133D\u1343\u1349\u1350\u1357\u135D\u1365\u136B\u136E" +
		"\u1373\u1378\u137F\u1385\u138C\u1393\u1398\u139F\u13A5\u13AC\u13B3\u13B8" +
		"\u13BF\u13C5\u13CC\u13D3\u13D9\u13DF\u13E4\u13EB\u13F1\u13F8\u13FF\u1404" +
		"\u140B\u1411\u1418\u141D\u1426\u142C\u1433\u1438\u1441\u1447\u144E\u1453" +
		"\u145C\u145E\u1465\u1467\u1475\u147B\u1481\u1488\u148C\u148E\u1493\u1499" +
		"\u149D\u14A2\u14A8\u14B3\u14B5\u14BC\u14BE\u14C9\u14CD\u14D3\u14D7\u14DD" +
		"\u14E3\u14E5\u14EB\u14F1\u14F7\u14FD\u1501\u150B\u150F\u1515\u1519\u151B" +
		"\u1520\u1526\u152C\u1533\u1537\u153E\u1546\u154A\u1550\u155E\u1564\u156A" +
		"\u1570\u1574\u157A\u1580\u1582\u1588\u158E\u1597\u159D\u159F\u15A5\u15A7" +
		"\u15AD\u15B3\u15BC\u15C4\u15CA\u15D0\u15D6\u15DC\u15E2\u15E4\u15E8\u15F4" +
		"\u15FA\u1601\u1605\u160A\u1610\u1619\u161F\u1621\u1627\u1629\u1631\u1637" +
		"\u163D\u163F\u1647\u164D\u164F\u1657\u165D\u165F\u1661\u1668\u166E\u1670" +
		"\u1678\u167E\u1680\u1686\u1688\u1690\u1694\u169A\u169E\u16A6\u16AC\u16AE" +
		"\u16B6\u16BC\u16BE\u16C3\u16C9\u16CD\u16D2\u16D4\u16DA\u16E0\u16E4\u16E6" +
		"\u16EC\u16F2\u16F8\u16FE\u1702\u1707\u170D\u1712\u1717\u171E\u1724\u1726" +
		"\u172A\u173A\u1743\u174C\u1751\u1756\u1760\u1765\u176A\u1772\u177B\u1780" +
		"\u1789\u1791\u1795\u179B\u17A1\u17A3\u17A9\u17AD\u17B3\u17B7\u17BF\u17C1" +
		"\u17C8\u17D0\u17D4\u17DA\u17DE\u17E0\u17E5\u17EB\u17F1\u17F8\u17FE\u1801" +
		"\u1807\u180D\u1813\u1815\u181B\u1821\u1823\u1825\u182B\u182F\u1834\u183A" +
		"\u183E\u1843\u1849\u184F\u1853\u1858\u185E\u1864\u1868\u186D\u1873\u1877" +
		"\u1879\u188D\u1891\u1896\u1898\u18A1\u18A5\u18AB\u18AF\u18B5\u18B9\u18BF" +
		"\u18C3\u18DB\u18E1\u18E7\u18E9\u18F0\u18FA\u1900\u1904\u190A\u190E\u1910" +
		"\u1915\u191B\u1921\u192A\u1930\u1932\u1938\u193C\u1941\u1947\u1949\u194F" +
		"\u1955\u1957\u195B\u1960\u1966\u1968\u196E\u1970\u1976\u197A\u197F\u1985" +
		"\u1987\u198D\u198F\u1995\u1999\u199D\u19A1\u19A5\u19A9\u19AF\u19B5\u19B9" +
		"\u19BF\u19C3\u19C5\u19CB\u19D1\u19DA\u19E0\u19E6\u19EC\u19EE\u19F4\u19FA" +
		"\u1A00\u1A04\u1A0A\u1A0E\u1A10\u1A15\u1A1D\u1A25\u1A27\u1A2D\u1A33\u1A35" +
		"\u1A3B\u1A42\u1A45\u1A4B\u1A4D\u1A53\u1A59\u1A5B\u1A61\u1A64\u1A6A\u1A6C" +
		"\u1A6F\u1A75\u1A79\u1A7E\u1A85\u1A88\u1A8E\u1A94\u1A96\u1A9A\u1A9C\u1AA8" +
		"\u1AAC\u1AAE\u1AB3\u1AB9\u1AC4\u1ACC\u1AD2\u1AD4\u1ADC\u1AE2\u1AE4\u1AEF" +
		"\u1AF5\u1AF7\u1AF9\u1B04\u1B10\u1B16\u1B18\u1B1E\u1B20\u1B26\u1B28\u1B30" +
		"\u1B36\u1B38\u1B3E\u1B40\u1B46\u1B48\u1B50\u1B56\u1B58\u1B60\u1B66\u1B68" +
		"\u1B70\u1B74\u1B7A\u1B81\u1B85\u1B88\u1B8A\u1B90\u1B98\u1B9C\u1BA2\u1BAA" +
		"\u1BB2\u1BB8\u1BBF\u1BC5\u1BD0\u1BD6\u1BDD\u1BE4\u1BE8\u1BED\u1BF1\u1BF6" +
		"\u1C01\u1C03\u1C09\u1C0D\u1C13\u1C15\u1C1B\u1C25\u1C2A\u1C30\u1C37\u1C3E" +
		"\u1C45\u1C4C\u1C53\u1C5A\u1C61\u1C68\u1C6F\u1C76\u1C7D\u1C84\u1C8B\u1C92" +
		"\u1C99\u1CA0\u1CA4\u1CA9\u1CAD\u1CB3\u1CB9\u1CBB\u1CC1\u1CCA\u1CD0\u1CD7" +
		"\u1CDB\u1CDE\u1CE4\u1CEA\u1CF1\u1CF5\u1CFA\u1CFE\u1D03\u1D07\u1D0C\u1D13" +
		"\u1D19\u1D20\u1D24\u1D27\u1D2D\u1D34\u1D3B\u1D3F\u1D44\u1D49\u1D51\u1D53" +
		"\u1D59\u1D61\u1D68\u1D6F\u1D73\u1D78\u1D7C\u1D81\u1D85\u1D8A\u1D8F\u1D95" +
		"\u1D99\u1D9E\u1DA4\u1DB0\u1DB2\u1DB8\u1DBA\u1DC0\u1DC4\u1DC9\u1DD3\u1DD7" +
		"\u1DE1\u1DE8\u1DEF\u1DF4\u1DF8\u1DFE\u1E04\u1E06\u1E0E\u1E14\u1E16\u1E1E" +
		"\u1E24\u1E26\u1E33\u1E39\u1E3B\u1E43\u1E49\u1E4B\u1E53\u1E59\u1E5F\u1E61" +
		"\u1E65\u1E6B\u1E71\u1E77\u1E7E\u1E84\u1E86\u1E8C\u1E8E\u1E97\u1E99\u1E9F" +
		"\u1EA5\u1EAA\u1EB4\u1EBA\u1EC0\u1EC2\u1EC8\u1ECD\u1ED5\u1EDB\u1EDF\u1EE5" +
		"\u1EEB\u1EED\u1EF2\u1EF7\u1EFA\u1F00\u1F04\u1F0A\u1F0C\u1F12\u1F16\u1F1C" +
		"\u1F22\u1F2D\u1F33\u1F39\u1F3B\u1F48\u1F4D\u1F4F\u1F55\u1F5B\u1F5F\u1F65" +
		"\u1F6B\u1F71\u1F73\u1F7F\u1F85\u1F8C\u1F8E\u1F94\u1F96\u1F9C\u1FA0\u1FA6" +
		"\u1FAA\u1FAC\u1FB1\u1FB8\u1FBE\u1FC0\u1FC6\u1FC8\u1FD0\u1FD6\u1FD8\u1FDE" +
		"\u1FE0\u1FF8\u1FFF\u2006\u200B\u2012\u2018\u201A\u2020\u2027\u202E\u2031" +
		"\u2037\u203A\u2040\u2043\u2049\u204C\u2052\u2055\u205B\u205E\u2064\u2067" +
		"\u206D\u2072\u2079\u207C\u2082\u2085\u208D\u208F\u2095\u209B\u209D\u20A7" +
		"\u20A9\u20AF\u20B5\u20B7\u20BD\u20BF\u20C5\u20CB\u20CD\u20D1\u20D6\u20DA" +
		"\u20E1\u20E8\u20EF\u20F5\u20F8\u20FE\u2104\u2106\u210C\u210E\u2110\u2116" +
		"\u211C\u2122\u2124\u212A\u212C\u2130\u2136\u213C\u2140\u2148\u214E\u2154" +
		"\u2156\u215E\u2164\u2166\u216C\u216E\u2178\u217E\u2180\u2182\u2189\u218F" +
		"\u2195\u219B\u219D\u21A3\u21A5\u21AD\u21B3\u21B5\u21BB\u21C1\u21C7\u21CF" +
		"\u21D5\u21D7\u21DD\u21E3\u21E8\u21EA\u21ED\u21F3\u21F9\u21FB\u2203\u2209" +
		"\u220B\u2211\u2217\u2219\u221F\u222B\u2231\u2233\u223B\u223D\u2244\u2246" +
		"\u224C\u2250\u2252\u2258\u2260\u2267\u226E\u2273\u227A\u227F\u2286\u228B" +
		"\u2292\u2297\u229E\u22A1\u22A7\u22AD\u22B3\u22B5\u22BB\u22BD\u22C3\u22C8" +
		"\u22CE\u22D4\u22D8\u22E2\u22E8\u22EE\u22F0\u22F6\u22F8\u2300\u2306\u2308" +
		"\u2310\u2315\u231F\u2325\u2327\u2329\u2330\u2334\u233C\u2342\u2344\u234A" +
		"\u234C\u2352\u2354\u235A\u2360\u2368\u236E\u2372\u2378\u237E\u2383\u238A" +
		"\u2395\u2397\u239D\u23A6\u23AA\u23B7\u23BE\u23C7\u23CE\u23D4\u23DB\u23E2" +
		"\u23E8\u23F0\u23F9\u2400\u2409\u2411\u2417\u241E\u2425\u242C\u2430\u2435" +
		"\u243E\u2445\u244C\u2452\u2458\u245F\u2466\u246F\u2473\u2478\u247C\u2481" +
		"\u248B\u248F\u2494\u2498\u249D\u24A7\u24AA\u24B0\u24B3\u24B9\u24BD\u24C3" +
		"\u24C7\u24CD\u24D1\u24D7\u24DB\u24E1\u24E5\u24EB\u24EF\u24F1\u24F7\u24FB" +
		"\u2500\u2506\u250C\u2510\u2517\u251B\u2520\u2526\u252C\u2530\u2533\u2539" +
		"\u253D\u2542\u2546\u254D\u2554\u2558\u255D\u2561\u2563\u256B\u2570\u2575" +
		"\u257A\u257E\u2584\u258D\u2594\u259B\u259F\u25A4";
	public static readonly _serializedATN: string = Utils.join(
		[
			cobolParser._serializedATNSegment0,
			cobolParser._serializedATNSegment1,
			cobolParser._serializedATNSegment2,
			cobolParser._serializedATNSegment3,
			cobolParser._serializedATNSegment4,
			cobolParser._serializedATNSegment5,
			cobolParser._serializedATNSegment6,
			cobolParser._serializedATNSegment7,
			cobolParser._serializedATNSegment8,
			cobolParser._serializedATNSegment9,
			cobolParser._serializedATNSegment10,
			cobolParser._serializedATNSegment11,
			cobolParser._serializedATNSegment12,
			cobolParser._serializedATNSegment13,
			cobolParser._serializedATNSegment14,
			cobolParser._serializedATNSegment15,
			cobolParser._serializedATNSegment16,
			cobolParser._serializedATNSegment17,
			cobolParser._serializedATNSegment18,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!cobolParser.__ATN) {
			cobolParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(cobolParser._serializedATN));
		}

		return cobolParser.__ATN;
	}

}

export class Cobol_sourceContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(cobolParser.EOF, 0); }
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cobol_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCobol_source) {
			listener.enterCobol_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCobol_source) {
			listener.exitCobol_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCobol_source) {
			return visitor.visitCobol_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_witout_all_zeroContext extends ParserRuleContext {
	public SPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACE, 0); }
	public SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACES, 0); }
	public HIGH_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUE, 0); }
	public HIGH_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUES, 0); }
	public LOW_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUE, 0); }
	public LOW_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUES, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTE, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_witout_all_zero; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_witout_all_zero) {
			listener.enterFigurative_constant_witout_all_zero(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_witout_all_zero) {
			listener.exitFigurative_constant_witout_all_zero(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_witout_all_zero) {
			return visitor.visitFigurative_constant_witout_all_zero(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_witout_allContext extends ParserRuleContext {
	public figurative_constant_witout_all_zero(): Figurative_constant_witout_all_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_all_zeroContext);
	}
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_witout_all; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_witout_all) {
			listener.enterFigurative_constant_witout_all(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_witout_all) {
			listener.exitFigurative_constant_witout_all(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_witout_all) {
			return visitor.visitFigurative_constant_witout_all(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_witout_zeroContext extends ParserRuleContext {
	public figurative_constant_witout_all_zero(): Figurative_constant_witout_all_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_all_zeroContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_witout_zero; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_witout_zero) {
			listener.enterFigurative_constant_witout_zero(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_witout_zero) {
			listener.exitFigurative_constant_witout_zero(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_witout_zero) {
			return visitor.visitFigurative_constant_witout_zero(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constantContext extends ParserRuleContext {
	public figurative_constant_witout_zero(): Figurative_constant_witout_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_zeroContext);
	}
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant) {
			listener.enterFigurative_constant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant) {
			listener.exitFigurative_constant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant) {
			return visitor.visitFigurative_constant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeparatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SEMI_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEMI_, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSeparator) {
			listener.enterSeparator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSeparator) {
			listener.exitSeparator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSeparator) {
			return visitor.visitSeparator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_separatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_separator) {
			listener.enterArithmetic_separator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_separator) {
			listener.exitArithmetic_separator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_separator) {
			return visitor.visitArithmetic_separator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_commentContext extends ParserRuleContext {
	public START_SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_SLASH_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public START_STAR_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_STAR_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_comment; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_comment) {
			listener.enterLine_comment(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_comment) {
			listener.exitLine_comment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_comment) {
			return visitor.visitLine_comment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramContext extends ParserRuleContext {
	public identification_division(): Identification_divisionContext {
		return this.getRuleContext(0, Identification_divisionContext);
	}
	public environment_division(): Environment_divisionContext | undefined {
		return this.tryGetRuleContext(0, Environment_divisionContext);
	}
	public data_division(): Data_divisionContext | undefined {
		return this.tryGetRuleContext(0, Data_divisionContext);
	}
	public procedure_division(): Procedure_divisionContext | undefined {
		return this.tryGetRuleContext(0, Procedure_divisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_divisionContext extends ParserRuleContext {
	public procedure_division_header(): Procedure_division_headerContext {
		return this.getRuleContext(0, Procedure_division_headerContext);
	}
	public declaratives(): DeclarativesContext | undefined {
		return this.tryGetRuleContext(0, DeclarativesContext);
	}
	public end_program(): End_programContext | undefined {
		return this.tryGetRuleContext(0, End_programContext);
	}
	public procedure_test_line(): Procedure_test_lineContext[];
	public procedure_test_line(i: number): Procedure_test_lineContext;
	public procedure_test_line(i?: number): Procedure_test_lineContext | Procedure_test_lineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_test_lineContext);
		} else {
			return this.getRuleContext(i, Procedure_test_lineContext);
		}
	}
	public section(): SectionContext[];
	public section(i: number): SectionContext;
	public section(i?: number): SectionContext | SectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SectionContext);
		} else {
			return this.getRuleContext(i, SectionContext);
		}
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division) {
			listener.enterProcedure_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division) {
			listener.exitProcedure_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division) {
			return visitor.visitProcedure_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_programContext extends ParserRuleContext {
	public END_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.END_IN_A_AREA, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(cobolParser.PROGRAM, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public program_name(): Program_nameContext | undefined {
		return this.tryGetRuleContext(0, Program_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_program) {
			listener.enterEnd_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_program) {
			listener.exitEnd_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_program) {
			return visitor.visitEnd_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_division_headerContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public using(): UsingContext | undefined {
		return this.tryGetRuleContext(0, UsingContext);
	}
	public giving(): GivingContext | undefined {
		return this.tryGetRuleContext(0, GivingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division_header) {
			listener.enterProcedure_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division_header) {
			listener.exitProcedure_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division_header) {
			return visitor.visitProcedure_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection) {
			listener.enterSection(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection) {
			listener.exitSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection) {
			return visitor.visitSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclarativesContext extends ParserRuleContext {
	public DECLARATIVES_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES_IN_A_AREA, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public END_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.END_IN_A_AREA, 0); }
	public DECLARATIVES(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public declaratives_section(): Declaratives_sectionContext[];
	public declaratives_section(i: number): Declaratives_sectionContext;
	public declaratives_section(i?: number): Declaratives_sectionContext | Declaratives_sectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declaratives_sectionContext);
		} else {
			return this.getRuleContext(i, Declaratives_sectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives) {
			listener.enterDeclaratives(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives) {
			listener.exitDeclaratives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives) {
			return visitor.visitDeclaratives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declaratives_sectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	public use_statement(): Use_statementContext {
		return this.getRuleContext(0, Use_statementContext);
	}
	public declarative_paragraph(): Declarative_paragraphContext[];
	public declarative_paragraph(i: number): Declarative_paragraphContext;
	public declarative_paragraph(i?: number): Declarative_paragraphContext | Declarative_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declarative_paragraphContext);
		} else {
			return this.getRuleContext(i, Declarative_paragraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives_section) {
			listener.enterDeclaratives_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives_section) {
			listener.exitDeclaratives_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives_section) {
			return visitor.visitDeclaratives_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declarative_paragraphContext extends ParserRuleContext {
	public paragraph(): ParagraphContext {
		return this.getRuleContext(0, ParagraphContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declarative_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclarative_paragraph) {
			listener.enterDeclarative_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclarative_paragraph) {
			listener.exitDeclarative_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclarative_paragraph) {
			return visitor.visitDeclarative_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphContext extends ParserRuleContext {
	public paragraph_name(): Paragraph_nameContext {
		return this.getRuleContext(0, Paragraph_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph) {
			listener.enterParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph) {
			listener.exitParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph) {
			return visitor.visitParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SentenseContext extends ParserRuleContext {
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sentense; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSentense) {
			listener.enterSentense(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSentense) {
			listener.exitSentense(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSentense) {
			return visitor.visitSentense(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_statementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(cobolParser.USE, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROCEDURE, 0); }
	public use_on(): Use_onContext | undefined {
		return this.tryGetRuleContext(0, Use_onContext);
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public REPORTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTING, 0); }
	public group_data_name(): Group_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Group_data_nameContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCEPTION, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERROR, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_statement) {
			listener.enterUse_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_statement) {
			listener.exitUse_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_statement) {
			return visitor.visitUse_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_group_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGroup_data_name) {
			listener.enterGroup_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGroup_data_name) {
			listener.exitGroup_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGroup_data_name) {
			return visitor.visitGroup_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_onContext extends ParserRuleContext {
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I_O, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTEND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_on) {
			listener.enterUse_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_on) {
			listener.exitUse_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_on) {
			return visitor.visitUse_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_headerContext extends ParserRuleContext {
	public section_name(): Section_nameContext {
		return this.getRuleContext(0, Section_nameContext);
	}
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public segment_number(): Segment_numberContext | undefined {
		return this.tryGetRuleContext(0, Segment_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_header) {
			listener.enterSection_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_header) {
			listener.exitSection_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_header) {
			return visitor.visitSection_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Paragraph_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph_name) {
			listener.enterParagraph_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph_name) {
			listener.exitParagraph_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph_name) {
			return visitor.visitParagraph_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_name) {
			listener.enterSection_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_name) {
			listener.exitSection_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_name) {
			return visitor.visitSection_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing) {
			listener.enterUsing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing) {
			listener.exitUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing) {
			return visitor.visitUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GivingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGiving) {
			listener.enterGiving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGiving) {
			listener.exitGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGiving) {
			return visitor.visitGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_test_lineContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Arithmetic_expressionContext);
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_test_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_test_line) {
			listener.enterProcedure_test_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_test_line) {
			listener.exitProcedure_test_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_test_line) {
			return visitor.visitProcedure_test_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public accept_statement(): Accept_statementContext | undefined {
		return this.tryGetRuleContext(0, Accept_statementContext);
	}
	public add_statement(): Add_statementContext | undefined {
		return this.tryGetRuleContext(0, Add_statementContext);
	}
	public alter_statement(): Alter_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_statementContext);
	}
	public call_statement(): Call_statementContext | undefined {
		return this.tryGetRuleContext(0, Call_statementContext);
	}
	public cancel_statement(): Cancel_statementContext | undefined {
		return this.tryGetRuleContext(0, Cancel_statementContext);
	}
	public close_statement(): Close_statementContext | undefined {
		return this.tryGetRuleContext(0, Close_statementContext);
	}
	public compute_statement(): Compute_statementContext | undefined {
		return this.tryGetRuleContext(0, Compute_statementContext);
	}
	public continue_statement(): Continue_statementContext | undefined {
		return this.tryGetRuleContext(0, Continue_statementContext);
	}
	public delete_statement(): Delete_statementContext | undefined {
		return this.tryGetRuleContext(0, Delete_statementContext);
	}
	public display_statement(): Display_statementContext | undefined {
		return this.tryGetRuleContext(0, Display_statementContext);
	}
	public divide_statement(): Divide_statementContext | undefined {
		return this.tryGetRuleContext(0, Divide_statementContext);
	}
	public evaluate_statement(): Evaluate_statementContext | undefined {
		return this.tryGetRuleContext(0, Evaluate_statementContext);
	}
	public exit_statement(): Exit_statementContext | undefined {
		return this.tryGetRuleContext(0, Exit_statementContext);
	}
	public exit_program_statement(): Exit_program_statementContext | undefined {
		return this.tryGetRuleContext(0, Exit_program_statementContext);
	}
	public generate_statement(): Generate_statementContext | undefined {
		return this.tryGetRuleContext(0, Generate_statementContext);
	}
	public go_to_statement(): Go_to_statementContext | undefined {
		return this.tryGetRuleContext(0, Go_to_statementContext);
	}
	public if_statement(): If_statementContext | undefined {
		return this.tryGetRuleContext(0, If_statementContext);
	}
	public initialize_statement(): Initialize_statementContext | undefined {
		return this.tryGetRuleContext(0, Initialize_statementContext);
	}
	public initiate_statement(): Initiate_statementContext | undefined {
		return this.tryGetRuleContext(0, Initiate_statementContext);
	}
	public inspect_statement(): Inspect_statementContext | undefined {
		return this.tryGetRuleContext(0, Inspect_statementContext);
	}
	public merge_statement(): Merge_statementContext | undefined {
		return this.tryGetRuleContext(0, Merge_statementContext);
	}
	public move_statement(): Move_statementContext | undefined {
		return this.tryGetRuleContext(0, Move_statementContext);
	}
	public multiply_statement(): Multiply_statementContext | undefined {
		return this.tryGetRuleContext(0, Multiply_statementContext);
	}
	public open_statement(): Open_statementContext | undefined {
		return this.tryGetRuleContext(0, Open_statementContext);
	}
	public perform_statement(): Perform_statementContext | undefined {
		return this.tryGetRuleContext(0, Perform_statementContext);
	}
	public read_statement(): Read_statementContext | undefined {
		return this.tryGetRuleContext(0, Read_statementContext);
	}
	public record_statement(): Record_statementContext | undefined {
		return this.tryGetRuleContext(0, Record_statementContext);
	}
	public release_statement(): Release_statementContext | undefined {
		return this.tryGetRuleContext(0, Release_statementContext);
	}
	public return_statement(): Return_statementContext | undefined {
		return this.tryGetRuleContext(0, Return_statementContext);
	}
	public rewrite_statement(): Rewrite_statementContext | undefined {
		return this.tryGetRuleContext(0, Rewrite_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rewrite_statementContext extends ParserRuleContext {
	public REWRITE(): TerminalNode { return this.getToken(cobolParser.REWRITE, 0); }
	public rewrite_rec_name(): Rewrite_rec_nameContext {
		return this.getRuleContext(0, Rewrite_rec_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public src_item(): Src_itemContext | undefined {
		return this.tryGetRuleContext(0, Src_itemContext);
	}
	public ALLOWING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALLOWING, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public END_REWRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_REWRITE, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rewrite_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRewrite_statement) {
			listener.enterRewrite_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRewrite_statement) {
			listener.exitRewrite_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRewrite_statement) {
			return visitor.visitRewrite_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rewrite_rec_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rewrite_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRewrite_rec_name) {
			listener.enterRewrite_rec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRewrite_rec_name) {
			listener.exitRewrite_rec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRewrite_rec_name) {
			return visitor.visitRewrite_rec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Return_statementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(cobolParser.RETURN, 0); }
	public smrg_file(): Smrg_fileContext {
		return this.getRuleContext(0, Smrg_fileContext);
	}
	public at_end(): At_endContext[];
	public at_end(i: number): At_endContext;
	public at_end(i?: number): At_endContext | At_endContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_endContext);
		} else {
			return this.getRuleContext(i, At_endContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public dest_item(): Dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Dest_itemContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public END_RETURN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_RETURN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_return_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReturn_statement) {
			listener.enterReturn_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReturn_statement) {
			listener.exitReturn_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReturn_statement) {
			return visitor.visitReturn_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smrg_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smrg_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmrg_file) {
			listener.enterSmrg_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmrg_file) {
			listener.exitSmrg_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmrg_file) {
			return visitor.visitSmrg_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Release_statementContext extends ParserRuleContext {
	public RELEASE(): TerminalNode { return this.getToken(cobolParser.RELEASE, 0); }
	public release_rec(): Release_recContext {
		return this.getRuleContext(0, Release_recContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public release_src_area(): Release_src_areaContext | undefined {
		return this.tryGetRuleContext(0, Release_src_areaContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_release_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelease_statement) {
			listener.enterRelease_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelease_statement) {
			listener.exitRelease_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelease_statement) {
			return visitor.visitRelease_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Release_src_areaContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_release_src_area; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelease_src_area) {
			listener.enterRelease_src_area(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelease_src_area) {
			listener.exitRelease_src_area(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelease_src_area) {
			return visitor.visitRelease_src_area(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Release_recContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_release_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelease_rec) {
			listener.enterRelease_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelease_rec) {
			listener.exitRelease_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelease_rec) {
			return visitor.visitRelease_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_statementContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DEPENDENCY(): TerminalNode { return this.getToken(cobolParser.DEPENDENCY, 0); }
	public path_name(): Path_nameContext {
		return this.getRuleContext(0, Path_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public relation_type(): Relation_typeContext | undefined {
		return this.tryGetRuleContext(0, Relation_typeContext);
	}
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DICTIONARY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_statement) {
			listener.enterRecord_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_statement) {
			listener.exitRecord_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_statement) {
			return visitor.visitRecord_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Relation_typeContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_relation_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelation_type) {
			listener.enterRelation_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelation_type) {
			listener.exitRelation_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelation_type) {
			return visitor.visitRelation_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Path_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_path_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPath_name) {
			listener.enterPath_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPath_name) {
			listener.exitPath_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPath_name) {
			return visitor.visitPath_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Read_statementContext extends ParserRuleContext {
	public READ(): TerminalNode { return this.getToken(cobolParser.READ, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public dest_item(): Dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Dest_itemContext);
	}
	public read_options(): Read_optionsContext | undefined {
		return this.tryGetRuleContext(0, Read_optionsContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public key_name(): Key_nameContext | undefined {
		return this.tryGetRuleContext(0, Key_nameContext);
	}
	public END_READ(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_READ, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PREVIOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREVIOUS, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRIOR, 0); }
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_read_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRead_statement) {
			listener.enterRead_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRead_statement) {
			listener.exitRead_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRead_statement) {
			return visitor.visitRead_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Read_optionsContext extends ParserRuleContext {
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public REGARDLESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REGARDLESS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public ALLOWING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALLOWING, 0); }
	public UPDATERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UPDATERS, 0); }
	public READERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.READERS, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_read_options; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRead_options) {
			listener.enterRead_options(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRead_options) {
			listener.exitRead_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRead_options) {
			return visitor.visitRead_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_statementContext extends ParserRuleContext {
	public PERFORM(): TerminalNode { return this.getToken(cobolParser.PERFORM, 0); }
	public first_proc(): First_procContext | undefined {
		return this.tryGetRuleContext(0, First_procContext);
	}
	public END_PERFORM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_PERFORM, 0); }
	public perform_times(): Perform_timesContext | undefined {
		return this.tryGetRuleContext(0, Perform_timesContext);
	}
	public perform_until(): Perform_untilContext | undefined {
		return this.tryGetRuleContext(0, Perform_untilContext);
	}
	public perform_varying(): Perform_varyingContext | undefined {
		return this.tryGetRuleContext(0, Perform_varyingContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public end_proc(): End_procContext | undefined {
		return this.tryGetRuleContext(0, End_procContext);
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_statement) {
			listener.enterPerform_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_statement) {
			listener.exitPerform_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_statement) {
			return visitor.visitPerform_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_timesContext extends ParserRuleContext {
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_times) {
			listener.enterPerform_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_times) {
			listener.exitPerform_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_times) {
			return visitor.visitPerform_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_testContext extends ParserRuleContext {
	public TEST(): TerminalNode { return this.getToken(cobolParser.TEST, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_test; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_test) {
			listener.enterWith_test(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_test) {
			listener.exitWith_test(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_test) {
			return visitor.visitWith_test(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_untilContext extends ParserRuleContext {
	public UNTIL(): TerminalNode { return this.getToken(cobolParser.UNTIL, 0); }
	public logic_expression(): Logic_expressionContext {
		return this.getRuleContext(0, Logic_expressionContext);
	}
	public with_test(): With_testContext | undefined {
		return this.tryGetRuleContext(0, With_testContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_until; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_until) {
			listener.enterPerform_until(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_until) {
			listener.exitPerform_until(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_until) {
			return visitor.visitPerform_until(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_varyingContext extends ParserRuleContext {
	public VARYING(): TerminalNode { return this.getToken(cobolParser.VARYING, 0); }
	public perform_range(): Perform_rangeContext[];
	public perform_range(i: number): Perform_rangeContext;
	public perform_range(i?: number): Perform_rangeContext | Perform_rangeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Perform_rangeContext);
		} else {
			return this.getRuleContext(i, Perform_rangeContext);
		}
	}
	public UNTIL(): TerminalNode[];
	public UNTIL(i: number): TerminalNode;
	public UNTIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UNTIL);
		} else {
			return this.getToken(cobolParser.UNTIL, i);
		}
	}
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public with_test(): With_testContext | undefined {
		return this.tryGetRuleContext(0, With_testContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AFTER(): TerminalNode[];
	public AFTER(i: number): TerminalNode;
	public AFTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AFTER);
		} else {
			return this.getToken(cobolParser.AFTER, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_varying; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_varying) {
			listener.enterPerform_varying(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_varying) {
			listener.exitPerform_varying(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_varying) {
			return visitor.visitPerform_varying(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_rangeContext extends ParserRuleContext {
	public perform_var(): Perform_varContext {
		return this.getRuleContext(0, Perform_varContext);
	}
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public perform_init(): Perform_initContext {
		return this.getRuleContext(0, Perform_initContext);
	}
	public BY(): TerminalNode { return this.getToken(cobolParser.BY, 0); }
	public perform_increm(): Perform_incremContext {
		return this.getRuleContext(0, Perform_incremContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_range; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_range) {
			listener.enterPerform_range(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_range) {
			listener.exitPerform_range(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_range) {
			return visitor.visitPerform_range(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_incremContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_increm; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_increm) {
			listener.enterPerform_increm(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_increm) {
			listener.exitPerform_increm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_increm) {
			return visitor.visitPerform_increm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_initContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_init; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_init) {
			listener.enterPerform_init(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_init) {
			listener.exitPerform_init(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_init) {
			return visitor.visitPerform_init(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_varContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_var; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_var) {
			listener.enterPerform_var(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_var) {
			listener.exitPerform_var(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_var) {
			return visitor.visitPerform_var(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_statementContext extends ParserRuleContext {
	public OPEN(): TerminalNode { return this.getToken(cobolParser.OPEN, 0); }
	public open_definition(): Open_definitionContext[];
	public open_definition(i: number): Open_definitionContext;
	public open_definition(i?: number): Open_definitionContext | Open_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Open_definitionContext);
		} else {
			return this.getRuleContext(i, Open_definitionContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OUTPUT(): TerminalNode[];
	public OUTPUT(i: number): TerminalNode;
	public OUTPUT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OUTPUT);
		} else {
			return this.getToken(cobolParser.OUTPUT, i);
		}
	}
	public EXTEND(): TerminalNode[];
	public EXTEND(i: number): TerminalNode;
	public EXTEND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.EXTEND);
		} else {
			return this.getToken(cobolParser.EXTEND, i);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NO);
		} else {
			return this.getToken(cobolParser.NO, i);
		}
	}
	public REWIND(): TerminalNode[];
	public REWIND(i: number): TerminalNode;
	public REWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.REWIND);
		} else {
			return this.getToken(cobolParser.REWIND, i);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WITH);
		} else {
			return this.getToken(cobolParser.WITH, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_open_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOpen_statement) {
			listener.enterOpen_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOpen_statement) {
			listener.exitOpen_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOpen_statement) {
			return visitor.visitOpen_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_definitionContext extends ParserRuleContext {
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTEND, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I_O, 0); }
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NO);
		} else {
			return this.getToken(cobolParser.NO, i);
		}
	}
	public REWIND(): TerminalNode[];
	public REWIND(i: number): TerminalNode;
	public REWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.REWIND);
		} else {
			return this.getToken(cobolParser.REWIND, i);
		}
	}
	public open_file_attributes(): Open_file_attributesContext[];
	public open_file_attributes(i: number): Open_file_attributesContext;
	public open_file_attributes(i?: number): Open_file_attributesContext | Open_file_attributesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Open_file_attributesContext);
		} else {
			return this.getRuleContext(i, Open_file_attributesContext);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WITH);
		} else {
			return this.getToken(cobolParser.WITH, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_open_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOpen_definition) {
			listener.enterOpen_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOpen_definition) {
			listener.exitOpen_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOpen_definition) {
			return visitor.visitOpen_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_file_attributesContext extends ParserRuleContext {
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ALLOWING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALLOWING, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public READERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.READERS, 0); }
	public UPDATERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UPDATERS, 0); }
	public WRITERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WRITERS, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_open_file_attributes; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOpen_file_attributes) {
			listener.enterOpen_file_attributes(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOpen_file_attributes) {
			listener.exitOpen_file_attributes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOpen_file_attributes) {
			return visitor.visitOpen_file_attributes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiply_statementContext extends ParserRuleContext {
	public MULTIPLY(): TerminalNode { return this.getToken(cobolParser.MULTIPLY, 0); }
	public mult_num(): Mult_numContext[];
	public mult_num(i: number): Mult_numContext;
	public mult_num(i?: number): Mult_numContext | Mult_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Mult_numContext);
		} else {
			return this.getRuleContext(i, Mult_numContext);
		}
	}
	public BY(): TerminalNode { return this.getToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_MULTIPLY, 0); }
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiply_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiply_statement) {
			listener.enterMultiply_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiply_statement) {
			listener.exitMultiply_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiply_statement) {
			return visitor.visitMultiply_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Mult_numContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_mult_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMult_num) {
			listener.enterMult_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMult_num) {
			listener.exitMult_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMult_num) {
			return visitor.visitMult_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_statementContext extends ParserRuleContext {
	public MERGE(): TerminalNode { return this.getToken(cobolParser.MERGE, 0); }
	public mergefile(): MergefileContext {
		return this.getRuleContext(0, MergefileContext);
	}
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public output_proc(): Output_procContext | undefined {
		return this.tryGetRuleContext(0, Output_procContext);
	}
	public giving_file(): Giving_fileContext | undefined {
		return this.tryGetRuleContext(0, Giving_fileContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public merge_on(): Merge_onContext[];
	public merge_on(i: number): Merge_onContext;
	public merge_on(i?: number): Merge_onContext | Merge_onContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Merge_onContext);
		} else {
			return this.getRuleContext(i, Merge_onContext);
		}
	}
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext | undefined {
		return this.tryGetRuleContext(0, Alpha_nameContext);
	}
	public infile(): InfileContext[];
	public infile(i: number): InfileContext;
	public infile(i?: number): InfileContext | InfileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InfileContext);
		} else {
			return this.getRuleContext(i, InfileContext);
		}
	}
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_merge_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMerge_statement) {
			listener.enterMerge_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMerge_statement) {
			listener.exitMerge_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMerge_statement) {
			return visitor.visitMerge_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Output_procContext extends ParserRuleContext {
	public OUTPUT(): TerminalNode { return this.getToken(cobolParser.OUTPUT, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public first_proc(): First_procContext {
		return this.getRuleContext(0, First_procContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public end_proc(): End_procContext | undefined {
		return this.tryGetRuleContext(0, End_procContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_output_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOutput_proc) {
			listener.enterOutput_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOutput_proc) {
			listener.exitOutput_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOutput_proc) {
			return visitor.visitOutput_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_proc) {
			listener.enterFirst_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_proc) {
			listener.exitFirst_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_proc) {
			return visitor.visitFirst_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_proc) {
			listener.enterEnd_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_proc) {
			listener.exitEnd_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_proc) {
			return visitor.visitEnd_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Giving_fileContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_giving_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGiving_file) {
			listener.enterGiving_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGiving_file) {
			listener.exitGiving_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGiving_file) {
			return visitor.visitGiving_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InfileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_infile; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInfile) {
			listener.enterInfile(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInfile) {
			listener.exitInfile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInfile) {
			return visitor.visitInfile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_onContext extends ParserRuleContext {
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public mergekey(): MergekeyContext[];
	public mergekey(i: number): MergekeyContext;
	public mergekey(i?: number): MergekeyContext | MergekeyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MergekeyContext);
		} else {
			return this.getRuleContext(i, MergekeyContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_merge_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMerge_on) {
			listener.enterMerge_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMerge_on) {
			listener.exitMerge_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMerge_on) {
			return visitor.visitMerge_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergefileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_mergefile; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMergefile) {
			listener.enterMergefile(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMergefile) {
			listener.exitMergefile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMergefile) {
			return visitor.visitMergefile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergekeyContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_mergekey; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMergekey) {
			listener.enterMergekey(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMergekey) {
			listener.exitMergekey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMergekey) {
			return visitor.visitMergekey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_statementContext extends ParserRuleContext {
	public INSPECT(): TerminalNode { return this.getToken(cobolParser.INSPECT, 0); }
	public src_string(): Src_stringContext {
		return this.getRuleContext(0, Src_stringContext);
	}
	public inspect_tallying(): Inspect_tallyingContext | undefined {
		return this.tryGetRuleContext(0, Inspect_tallyingContext);
	}
	public inspect_replacing(): Inspect_replacingContext | undefined {
		return this.tryGetRuleContext(0, Inspect_replacingContext);
	}
	public inspect_converting(): Inspect_convertingContext | undefined {
		return this.tryGetRuleContext(0, Inspect_convertingContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_statement) {
			listener.enterInspect_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_statement) {
			listener.exitInspect_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_statement) {
			return visitor.visitInspect_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_convertingContext extends ParserRuleContext {
	public CONVERTING(): TerminalNode { return this.getToken(cobolParser.CONVERTING, 0); }
	public compare_chars(): Compare_charsContext {
		return this.getRuleContext(0, Compare_charsContext);
	}
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public convert_chars(): Convert_charsContext {
		return this.getRuleContext(0, Convert_charsContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_converting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_converting) {
			listener.enterInspect_converting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_converting) {
			listener.exitInspect_converting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_converting) {
			return visitor.visitInspect_converting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Convert_charsContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_convert_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConvert_chars) {
			listener.enterConvert_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConvert_chars) {
			listener.exitConvert_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConvert_chars) {
			return visitor.visitConvert_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compare_charsContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compare_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompare_chars) {
			listener.enterCompare_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompare_chars) {
			listener.exitCompare_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompare_chars) {
			return visitor.visitCompare_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_replacingContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(cobolParser.REPLACING, 0); }
	public replacing_characters(): Replacing_charactersContext[];
	public replacing_characters(i: number): Replacing_charactersContext;
	public replacing_characters(i?: number): Replacing_charactersContext | Replacing_charactersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replacing_charactersContext);
		} else {
			return this.getRuleContext(i, Replacing_charactersContext);
		}
	}
	public replacing_all(): Replacing_allContext[];
	public replacing_all(i: number): Replacing_allContext;
	public replacing_all(i?: number): Replacing_allContext | Replacing_allContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replacing_allContext);
		} else {
			return this.getRuleContext(i, Replacing_allContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_replacing; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_replacing) {
			listener.enterInspect_replacing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_replacing) {
			listener.exitInspect_replacing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_replacing) {
			return visitor.visitInspect_replacing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replacing_allContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public compare_val(): Compare_valContext[];
	public compare_val(i: number): Compare_valContext;
	public compare_val(i?: number): Compare_valContext | Compare_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Compare_valContext);
		} else {
			return this.getRuleContext(i, Compare_valContext);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.BY);
		} else {
			return this.getToken(cobolParser.BY, i);
		}
	}
	public replace_val(): Replace_valContext[];
	public replace_val(i: number): Replace_valContext;
	public replace_val(i?: number): Replace_valContext | Replace_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_valContext);
		} else {
			return this.getRuleContext(i, Replace_valContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replacing_all; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplacing_all) {
			listener.enterReplacing_all(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplacing_all) {
			listener.exitReplacing_all(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplacing_all) {
			return visitor.visitReplacing_all(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replace_valContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replace_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplace_val) {
			listener.enterReplace_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplace_val) {
			listener.exitReplace_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplace_val) {
			return visitor.visitReplace_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replacing_charactersContext extends ParserRuleContext {
	public CHARACTERS(): TerminalNode { return this.getToken(cobolParser.CHARACTERS, 0); }
	public BY(): TerminalNode { return this.getToken(cobolParser.BY, 0); }
	public replace_char(): Replace_charContext {
		return this.getRuleContext(0, Replace_charContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replacing_characters; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplacing_characters) {
			listener.enterReplacing_characters(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplacing_characters) {
			listener.exitReplacing_characters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplacing_characters) {
			return visitor.visitReplacing_characters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replace_charContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replace_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplace_char) {
			listener.enterReplace_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplace_char) {
			listener.exitReplace_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplace_char) {
			return visitor.visitReplace_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_tallyingContext extends ParserRuleContext {
	public TALLYING(): TerminalNode { return this.getToken(cobolParser.TALLYING, 0); }
	public tallying_for(): Tallying_forContext[];
	public tallying_for(i: number): Tallying_forContext;
	public tallying_for(i?: number): Tallying_forContext | Tallying_forContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tallying_forContext);
		} else {
			return this.getRuleContext(i, Tallying_forContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_tallying; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_tallying) {
			listener.enterInspect_tallying(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_tallying) {
			listener.exitInspect_tallying(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_tallying) {
			return visitor.visitInspect_tallying(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tallying_forContext extends ParserRuleContext {
	public tally_ctr(): Tally_ctrContext {
		return this.getRuleContext(0, Tally_ctrContext);
	}
	public FOR(): TerminalNode { return this.getToken(cobolParser.FOR, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public tallying_for_characters(): Tallying_for_charactersContext[];
	public tallying_for_characters(i: number): Tallying_for_charactersContext;
	public tallying_for_characters(i?: number): Tallying_for_charactersContext | Tallying_for_charactersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tallying_for_charactersContext);
		} else {
			return this.getRuleContext(i, Tallying_for_charactersContext);
		}
	}
	public tallying_for_all(): Tallying_for_allContext[];
	public tallying_for_all(i: number): Tallying_for_allContext;
	public tallying_for_all(i?: number): Tallying_for_allContext | Tallying_for_allContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tallying_for_allContext);
		} else {
			return this.getRuleContext(i, Tallying_for_allContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tallying_for; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTallying_for) {
			listener.enterTallying_for(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTallying_for) {
			listener.exitTallying_for(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTallying_for) {
			return visitor.visitTallying_for(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tallying_for_charactersContext extends ParserRuleContext {
	public CHARACTERS(): TerminalNode { return this.getToken(cobolParser.CHARACTERS, 0); }
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tallying_for_characters; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTallying_for_characters) {
			listener.enterTallying_for_characters(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTallying_for_characters) {
			listener.exitTallying_for_characters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTallying_for_characters) {
			return visitor.visitTallying_for_characters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delim_definitionContext extends ParserRuleContext {
	public delim_val(): Delim_valContext {
		return this.getRuleContext(0, Delim_valContext);
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delim_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelim_definition) {
			listener.enterDelim_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelim_definition) {
			listener.exitDelim_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelim_definition) {
			return visitor.visitDelim_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tallying_for_allContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public compare_val(): Compare_valContext[];
	public compare_val(i: number): Compare_valContext;
	public compare_val(i?: number): Compare_valContext | Compare_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Compare_valContext);
		} else {
			return this.getRuleContext(i, Compare_valContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tallying_for_all; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTallying_for_all) {
			listener.enterTallying_for_all(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTallying_for_all) {
			listener.exitTallying_for_all(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTallying_for_all) {
			return visitor.visitTallying_for_all(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compare_valContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public figurative_constant_witout_all(): Figurative_constant_witout_allContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_allContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compare_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompare_val) {
			listener.enterCompare_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompare_val) {
			listener.exitCompare_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompare_val) {
			return visitor.visitCompare_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delim_valContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delim_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelim_val) {
			listener.enterDelim_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelim_val) {
			listener.exitDelim_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelim_val) {
			return visitor.visitDelim_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tally_ctrContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tally_ctr; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTally_ctr) {
			listener.enterTally_ctr(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTally_ctr) {
			listener.exitTally_ctr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTally_ctr) {
			return visitor.visitTally_ctr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_stringContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_string) {
			listener.enterSrc_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_string) {
			listener.exitSrc_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_string) {
			return visitor.visitSrc_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Initiate_statementContext extends ParserRuleContext {
	public INITIATE(): TerminalNode { return this.getToken(cobolParser.INITIATE, 0); }
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_initiate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInitiate_statement) {
			listener.enterInitiate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInitiate_statement) {
			listener.exitInitiate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInitiate_statement) {
			return visitor.visitInitiate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Initialize_statementContext extends ParserRuleContext {
	public INITIALIZE(): TerminalNode { return this.getToken(cobolParser.INITIALIZE, 0); }
	public fld_name(): Fld_nameContext[];
	public fld_name(i: number): Fld_nameContext;
	public fld_name(i?: number): Fld_nameContext | Fld_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fld_nameContext);
		} else {
			return this.getRuleContext(i, Fld_nameContext);
		}
	}
	public replacing(): ReplacingContext[];
	public replacing(i: number): ReplacingContext;
	public replacing(i?: number): ReplacingContext | ReplacingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReplacingContext);
		} else {
			return this.getRuleContext(i, ReplacingContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_initialize_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInitialize_statement) {
			listener.enterInitialize_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInitialize_statement) {
			listener.exitInitialize_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInitialize_statement) {
			return visitor.visitInitialize_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplacingContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(cobolParser.REPLACING, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.BY);
		} else {
			return this.getToken(cobolParser.BY, i);
		}
	}
	public init_value(): Init_valueContext[];
	public init_value(i: number): Init_valueContext;
	public init_value(i?: number): Init_valueContext | Init_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Init_valueContext);
		} else {
			return this.getRuleContext(i, Init_valueContext);
		}
	}
	public ALPHABETIC(): TerminalNode[];
	public ALPHABETIC(i: number): TerminalNode;
	public ALPHABETIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHABETIC);
		} else {
			return this.getToken(cobolParser.ALPHABETIC, i);
		}
	}
	public ALPHANUMERIC(): TerminalNode[];
	public ALPHANUMERIC(i: number): TerminalNode;
	public ALPHANUMERIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHANUMERIC);
		} else {
			return this.getToken(cobolParser.ALPHANUMERIC, i);
		}
	}
	public NUMERIC(): TerminalNode[];
	public NUMERIC(i: number): TerminalNode;
	public NUMERIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NUMERIC);
		} else {
			return this.getToken(cobolParser.NUMERIC, i);
		}
	}
	public ALPHANUMERIC_EDITED(): TerminalNode[];
	public ALPHANUMERIC_EDITED(i: number): TerminalNode;
	public ALPHANUMERIC_EDITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHANUMERIC_EDITED);
		} else {
			return this.getToken(cobolParser.ALPHANUMERIC_EDITED, i);
		}
	}
	public NUMERIC_EDITED(): TerminalNode[];
	public NUMERIC_EDITED(i: number): TerminalNode;
	public NUMERIC_EDITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NUMERIC_EDITED);
		} else {
			return this.getToken(cobolParser.NUMERIC_EDITED, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DATA(): TerminalNode[];
	public DATA(i: number): TerminalNode;
	public DATA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DATA);
		} else {
			return this.getToken(cobolParser.DATA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replacing; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplacing) {
			listener.enterReplacing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplacing) {
			listener.exitReplacing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplacing) {
			return visitor.visitReplacing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Init_valueContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_init_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInit_value) {
			listener.enterInit_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInit_value) {
			listener.exitInit_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInit_value) {
			return visitor.visitInit_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fld_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fld_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFld_name) {
			listener.enterFld_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFld_name) {
			listener.exitFld_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFld_name) {
			return visitor.visitFld_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Move_statementContext extends ParserRuleContext {
	public MOVE(): TerminalNode { return this.getToken(cobolParser.MOVE, 0); }
	public src_item(): Src_itemContext {
		return this.getRuleContext(0, Src_itemContext);
	}
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_move_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMove_statement) {
			listener.enterMove_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMove_statement) {
			listener.exitMove_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMove_statement) {
			return visitor.visitMove_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_statementContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(cobolParser.IF, 0); }
	public logic_expression(): Logic_expressionContext {
		return this.getRuleContext(0, Logic_expressionContext);
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	public NEXT(): TerminalNode[];
	public NEXT(i: number): TerminalNode;
	public NEXT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEXT);
		} else {
			return this.getToken(cobolParser.NEXT, i);
		}
	}
	public SENTENCE(): TerminalNode[];
	public SENTENCE(i: number): TerminalNode;
	public SENTENCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SENTENCE);
		} else {
			return this.getToken(cobolParser.SENTENCE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public THEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THEN, 0); }
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ELSE, 0); }
	public END_IF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_IF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_if_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIf_statement) {
			listener.enterIf_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIf_statement) {
			listener.exitIf_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIf_statement) {
			return visitor.visitIf_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generate_statementContext extends ParserRuleContext {
	public GENERATE(): TerminalNode { return this.getToken(cobolParser.GENERATE, 0); }
	public report_item(): Report_itemContext {
		return this.getRuleContext(0, Report_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_generate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGenerate_statement) {
			listener.enterGenerate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGenerate_statement) {
			listener.exitGenerate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGenerate_statement) {
			return visitor.visitGenerate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_item) {
			listener.enterReport_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_item) {
			listener.exitReport_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_item) {
			return visitor.visitReport_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_statementContext extends ParserRuleContext {
	public EXIT(): TerminalNode { return this.getToken(cobolParser.EXIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_exit_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExit_statement) {
			listener.enterExit_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExit_statement) {
			listener.exitExit_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExit_statement) {
			return visitor.visitExit_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_program_statementContext extends ParserRuleContext {
	public EXIT(): TerminalNode { return this.getToken(cobolParser.EXIT, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_exit_program_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExit_program_statement) {
			listener.enterExit_program_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExit_program_statement) {
			listener.exitExit_program_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExit_program_statement) {
			return visitor.visitExit_program_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Go_to_statementContext extends ParserRuleContext {
	public GO(): TerminalNode { return this.getToken(cobolParser.GO, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public proc_name(): Proc_nameContext[];
	public proc_name(i: number): Proc_nameContext;
	public proc_name(i?: number): Proc_nameContext | Proc_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_nameContext);
		} else {
			return this.getRuleContext(i, Proc_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_go_to_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGo_to_statement) {
			listener.enterGo_to_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGo_to_statement) {
			listener.exitGo_to_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGo_to_statement) {
			return visitor.visitGo_to_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_proc_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProc_name) {
			listener.enterProc_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProc_name) {
			listener.exitProc_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProc_name) {
			return visitor.visitProc_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Evaluate_statementContext extends ParserRuleContext {
	public EVALUATE(): TerminalNode { return this.getToken(cobolParser.EVALUATE, 0); }
	public subj_item(): Subj_itemContext[];
	public subj_item(i: number): Subj_itemContext;
	public subj_item(i?: number): Subj_itemContext | Subj_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Subj_itemContext);
		} else {
			return this.getRuleContext(i, Subj_itemContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WHEN);
		} else {
			return this.getToken(cobolParser.WHEN, i);
		}
	}
	public when_condition(): When_conditionContext[];
	public when_condition(i: number): When_conditionContext;
	public when_condition(i?: number): When_conditionContext | When_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(When_conditionContext);
		} else {
			return this.getRuleContext(i, When_conditionContext);
		}
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	public OTHER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHER, 0); }
	public END_EVALUATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_EVALUATE, 0); }
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_evaluate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEvaluate_statement) {
			listener.enterEvaluate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEvaluate_statement) {
			listener.exitEvaluate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEvaluate_statement) {
			return visitor.visitEvaluate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class When_conditionContext extends ParserRuleContext {
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ANY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ANY, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_when_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWhen_condition) {
			listener.enterWhen_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWhen_condition) {
			listener.exitWhen_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWhen_condition) {
			return visitor.visitWhen_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Subj_itemContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Arithmetic_expressionContext);
	}
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subj_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubj_item) {
			listener.enterSubj_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubj_item) {
			listener.exitSubj_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubj_item) {
			return visitor.visitSubj_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statementContext extends ParserRuleContext {
	public divide_statement_form1(): Divide_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form1Context);
	}
	public divide_statement_form2(): Divide_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form2Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement) {
			listener.enterDivide_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement) {
			listener.exitDivide_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement) {
			return visitor.visitDivide_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form1Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form1) {
			listener.enterDivide_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form1) {
			listener.exitDivide_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form1) {
			return visitor.visitDivide_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form2Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public REMAINDER(): TerminalNode { return this.getToken(cobolParser.REMAINDER, 0); }
	public remaind(): RemaindContext {
		return this.getRuleContext(0, RemaindContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROUNDED, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form2) {
			listener.enterDivide_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form2) {
			listener.exitDivide_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form2) {
			return visitor.visitDivide_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemaindContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_remaind; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRemaind) {
			listener.enterRemaind(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRemaind) {
			listener.exitRemaind(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRemaind) {
			return visitor.visitRemaind(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_numContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_num) {
			listener.enterDivide_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_num) {
			listener.exitDivide_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_num) {
			return visitor.visitDivide_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statementContext extends ParserRuleContext {
	public display_statement_form1(): Display_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form1Context);
	}
	public display_statement_form2(): Display_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form2Context);
	}
	public display_statement_form3(): Display_statement_form3Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form3Context);
	}
	public display_statement_form4(): Display_statement_form4Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form4Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement) {
			listener.enterDisplay_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement) {
			listener.exitDisplay_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement) {
			return visitor.visitDisplay_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form1Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public display_form1_clause(): Display_form1_clauseContext[];
	public display_form1_clause(i: number): Display_form1_clauseContext;
	public display_form1_clause(i?: number): Display_form1_clauseContext | Display_form1_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form1_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form1_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form1) {
			listener.enterDisplay_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form1) {
			listener.exitDisplay_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form1) {
			return visitor.visitDisplay_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form2Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public display_form2_clause(): Display_form2_clauseContext[];
	public display_form2_clause(i: number): Display_form2_clauseContext;
	public display_form2_clause(i?: number): Display_form2_clauseContext | Display_form2_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form2_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form2_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form2) {
			listener.enterDisplay_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form2) {
			listener.exitDisplay_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form2) {
			return visitor.visitDisplay_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form3Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public disp_f3_line(): Disp_f3_lineContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_lineContext);
	}
	public disp_f3_column(): Disp_f3_columnContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form3) {
			listener.enterDisplay_statement_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form3) {
			listener.exitDisplay_statement_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form3) {
			return visitor.visitDisplay_statement_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form4Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext {
		return this.getRuleContext(0, Src_itemContext);
	}
	public UPON(): TerminalNode { return this.getToken(cobolParser.UPON, 0); }
	public display_upon(): Display_uponContext {
		return this.getRuleContext(0, Display_uponContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form4) {
			listener.enterDisplay_statement_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form4) {
			listener.exitDisplay_statement_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form4) {
			return visitor.visitDisplay_statement_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_itemContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_item) {
			listener.enterSrc_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_item) {
			listener.exitSrc_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_item) {
			return visitor.visitSrc_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_uponContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_upon; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_upon) {
			listener.enterDisplay_upon(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_upon) {
			listener.exitDisplay_upon(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_upon) {
			return visitor.visitDisplay_upon(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_line) {
			listener.enterDisp_f3_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_line) {
			listener.exitDisp_f3_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_line) {
			return visitor.visitDisp_f3_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_column) {
			listener.enterDisp_f3_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_column) {
			listener.exitDisp_f3_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_column) {
			return visitor.visitDisp_f3_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form1_clauseContext extends ParserRuleContext {
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UPON, 0); }
	public out_dest(): Out_destContext | undefined {
		return this.tryGetRuleContext(0, Out_destContext);
	}
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form1_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form1_clause) {
			listener.enterDisplay_form1_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form1_clause) {
			listener.exitDisplay_form1_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form1_clause) {
			return visitor.visitDisplay_form1_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form2_clauseContext extends ParserRuleContext {
	public display_form1_clause(): Display_form1_clauseContext | undefined {
		return this.tryGetRuleContext(0, Display_form1_clauseContext);
	}
	public at_line_number(): At_line_numberContext | undefined {
		return this.tryGetRuleContext(0, At_line_numberContext);
	}
	public at_column_number(): At_column_numberContext | undefined {
		return this.tryGetRuleContext(0, At_column_numberContext);
	}
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public UNDERLINED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINED, 0); }
	public BOLD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOLD, 0); }
	public BLINKING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINKING, 0); }
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSED, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form2_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form2_clause) {
			listener.enterDisplay_form2_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form2_clause) {
			listener.exitDisplay_form2_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form2_clause) {
			return visitor.visitDisplay_form2_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_line_numberContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_line_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_line_number) {
			listener.enterAt_line_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_line_number) {
			listener.exitAt_line_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_line_number) {
			return visitor.visitAt_line_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_column_numberContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_column_number) {
			listener.enterAt_column_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_column_number) {
			listener.exitAt_column_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_column_number) {
			return visitor.visitAt_column_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Out_destContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_out_dest; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOut_dest) {
			listener.enterOut_dest(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOut_dest) {
			listener.exitOut_dest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOut_dest) {
			return visitor.visitOut_dest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_statementContext extends ParserRuleContext {
	public DELETE(): TerminalNode { return this.getToken(cobolParser.DELETE, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public END_DELETE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delete_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelete_statement) {
			listener.enterDelete_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelete_statement) {
			listener.exitDelete_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelete_statement) {
			return visitor.visitDelete_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Continue_statementContext extends ParserRuleContext {
	public CONTINUE(): TerminalNode { return this.getToken(cobolParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_continue_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterContinue_statement) {
			listener.enterContinue_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitContinue_statement) {
			listener.exitContinue_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitContinue_statement) {
			return visitor.visitContinue_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compute_statementContext extends ParserRuleContext {
	public COMPUTE(): TerminalNode { return this.getToken(cobolParser.COMPUTE, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_COMPUTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_COMPUTE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compute_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompute_statement) {
			listener.enterCompute_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompute_statement) {
			listener.exitCompute_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompute_statement) {
			return visitor.visitCompute_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_statementContext extends ParserRuleContext {
	public CLOSE(): TerminalNode { return this.getToken(cobolParser.CLOSE, 0); }
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public close_params(): Close_paramsContext[];
	public close_params(i: number): Close_paramsContext;
	public close_params(i?: number): Close_paramsContext | Close_paramsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Close_paramsContext);
		} else {
			return this.getRuleContext(i, Close_paramsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_statement) {
			listener.enterClose_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_statement) {
			listener.exitClose_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_statement) {
			return visitor.visitClose_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_paramsContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public REMOVAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REMOVAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REWIND, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_params; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_params) {
			listener.enterClose_params(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_params) {
			listener.exitClose_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_params) {
			return visitor.visitClose_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cancel_statementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(cobolParser.CANCEL, 0); }
	public prog_name(): Prog_nameContext[];
	public prog_name(i: number): Prog_nameContext;
	public prog_name(i?: number): Prog_nameContext | Prog_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Prog_nameContext);
		} else {
			return this.getRuleContext(i, Prog_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cancel_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCancel_statement) {
			listener.enterCancel_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCancel_statement) {
			listener.exitCancel_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCancel_statement) {
			return visitor.visitCancel_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_statementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(cobolParser.CALL, 0); }
	public prog_name(): Prog_nameContext {
		return this.getRuleContext(0, Prog_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public call_using(): Call_usingContext | undefined {
		return this.tryGetRuleContext(0, Call_usingContext);
	}
	public call_giving(): Call_givingContext | undefined {
		return this.tryGetRuleContext(0, Call_givingContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_CALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_CALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_statement) {
			listener.enterCall_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_statement) {
			listener.exitCall_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_statement) {
			return visitor.visitCall_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_givingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_giving) {
			listener.enterCall_giving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_giving) {
			listener.exitCall_giving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_giving) {
			return visitor.visitCall_giving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public using_arg(): Using_argContext[];
	public using_arg(i: number): Using_argContext;
	public using_arg(i?: number): Using_argContext | Using_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Using_argContext);
		} else {
			return this.getRuleContext(i, Using_argContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_using) {
			listener.enterCall_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_using) {
			listener.exitCall_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_using) {
			return visitor.visitCall_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_argContext extends ParserRuleContext {
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public argument(): ArgumentContext[];
	public argument(i: number): ArgumentContext;
	public argument(i?: number): ArgumentContext | ArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArgumentContext);
		} else {
			return this.getRuleContext(i, ArgumentContext);
		}
	}
	public using_prefix(): Using_prefixContext | undefined {
		return this.tryGetRuleContext(0, Using_prefixContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_arg; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_arg) {
			listener.enterUsing_arg(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_arg) {
			listener.exitUsing_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_arg) {
			return visitor.visitUsing_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_prefixContext extends ParserRuleContext {
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTENT, 0); }
	public DESCRIPTOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCRIPTOR, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_prefix; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_prefix) {
			listener.enterUsing_prefix(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_prefix) {
			listener.exitUsing_prefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_prefix) {
			return visitor.visitUsing_prefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_argument; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArgument) {
			listener.enterArgument(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArgument) {
			listener.exitArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArgument) {
			return visitor.visitArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prog_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prog_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProg_name) {
			listener.enterProg_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProg_name) {
			listener.exitProg_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProg_name) {
			return visitor.visitProg_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_statementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(cobolParser.ALTER, 0); }
	public alter_proc(): Alter_procContext[];
	public alter_proc(i: number): Alter_procContext;
	public alter_proc(i?: number): Alter_procContext | Alter_procContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_procContext);
		} else {
			return this.getRuleContext(i, Alter_procContext);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.TO);
		} else {
			return this.getToken(cobolParser.TO, i);
		}
	}
	public alter_new_proc(): Alter_new_procContext[];
	public alter_new_proc(i: number): Alter_new_procContext;
	public alter_new_proc(i?: number): Alter_new_procContext | Alter_new_procContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_new_procContext);
		} else {
			return this.getRuleContext(i, Alter_new_procContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public PROCEED(): TerminalNode[];
	public PROCEED(i: number): TerminalNode;
	public PROCEED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.PROCEED);
		} else {
			return this.getToken(cobolParser.PROCEED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_statement) {
			listener.enterAlter_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_statement) {
			listener.exitAlter_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_statement) {
			return visitor.visitAlter_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_new_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_new_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_new_proc) {
			listener.enterAlter_new_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_new_proc) {
			listener.exitAlter_new_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_new_proc) {
			return visitor.visitAlter_new_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_proc) {
			listener.enterAlter_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_proc) {
			listener.exitAlter_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_proc) {
			return visitor.visitAlter_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_statementContext extends ParserRuleContext {
	public ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADD, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public add_grp(): Add_grpContext[];
	public add_grp(i: number): Add_grpContext;
	public add_grp(i?: number): Add_grpContext | Add_grpContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_grpContext);
		} else {
			return this.getRuleContext(i, Add_grpContext);
		}
	}
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ADD, 0); }
	public add_num(): Add_numContext[];
	public add_num(i: number): Add_numContext;
	public add_num(i?: number): Add_numContext | Add_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_numContext);
		} else {
			return this.getRuleContext(i, Add_numContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_statement) {
			listener.enterAdd_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_statement) {
			listener.exitAdd_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_statement) {
			return visitor.visitAdd_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_grpContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_grp; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_grp) {
			listener.enterAdd_grp(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_grp) {
			listener.exitAdd_grp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_grp) {
			return visitor.visitAdd_grp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_num) {
			listener.enterAdd_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_num) {
			listener.exitAdd_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_num) {
			return visitor.visitAdd_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_statementContext extends ParserRuleContext {
	public accept_form1(): Accept_form1Context | undefined {
		return this.tryGetRuleContext(0, Accept_form1Context);
	}
	public accept_form2(): Accept_form2Context | undefined {
		return this.tryGetRuleContext(0, Accept_form2Context);
	}
	public accept_form3(): Accept_form3Context | undefined {
		return this.tryGetRuleContext(0, Accept_form3Context);
	}
	public accept_form4(): Accept_form4Context | undefined {
		return this.tryGetRuleContext(0, Accept_form4Context);
	}
	public accept_form5(): Accept_form5Context | undefined {
		return this.tryGetRuleContext(0, Accept_form5Context);
	}
	public accept_form6(): Accept_form6Context | undefined {
		return this.tryGetRuleContext(0, Accept_form6Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_statement) {
			listener.enterAccept_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_statement) {
			listener.exitAccept_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_statement) {
			return visitor.visitAccept_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exception_variantsContext extends ParserRuleContext {
	public on_exception(): On_exceptionContext[];
	public on_exception(i: number): On_exceptionContext;
	public on_exception(i?: number): On_exceptionContext | On_exceptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_exceptionContext);
		} else {
			return this.getRuleContext(i, On_exceptionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception_variants) {
			listener.enterOn_exception_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception_variants) {
			listener.exitOn_exception_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception_variants) {
			return visitor.visitOn_exception_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_end_variantsContext extends ParserRuleContext {
	public at_end(): At_endContext[];
	public at_end(i: number): At_endContext;
	public at_end(i?: number): At_endContext | At_endContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_endContext);
		} else {
			return this.getRuleContext(i, At_endContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end_variants) {
			listener.enterAt_end_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end_variants) {
			listener.exitAt_end_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end_variants) {
			return visitor.visitAt_end_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_size_variantsContext extends ParserRuleContext {
	public on_size(): On_sizeContext[];
	public on_size(i: number): On_sizeContext;
	public on_size(i?: number): On_sizeContext | On_sizeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_sizeContext);
		} else {
			return this.getRuleContext(i, On_sizeContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size_variants) {
			listener.enterOn_size_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size_variants) {
			listener.exitOn_size_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size_variants) {
			return visitor.visitOn_size_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Invalid_key_variantsContext extends ParserRuleContext {
	public invalid_key(): Invalid_keyContext[];
	public invalid_key(i: number): Invalid_keyContext;
	public invalid_key(i?: number): Invalid_keyContext | Invalid_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Invalid_keyContext);
		} else {
			return this.getRuleContext(i, Invalid_keyContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_invalid_key_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInvalid_key_variants) {
			listener.enterInvalid_key_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInvalid_key_variants) {
			listener.exitInvalid_key_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInvalid_key_variants) {
			return visitor.visitInvalid_key_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form6Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public accept6_item(): Accept6_itemContext {
		return this.getRuleContext(0, Accept6_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form6; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form6) {
			listener.enterAccept_form6(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form6) {
			listener.exitAccept_form6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form6) {
			return visitor.visitAccept_form6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept6_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept6_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept6_item) {
			listener.enterAccept6_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept6_item) {
			listener.exitAccept6_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept6_item) {
			return visitor.visitAccept6_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form1Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public input_source(): Input_sourceContext | undefined {
		return this.tryGetRuleContext(0, Input_sourceContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form1) {
			listener.enterAccept_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form1) {
			listener.exitAccept_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form1) {
			return visitor.visitAccept_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form2Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public date_time(): Date_timeContext {
		return this.getRuleContext(0, Date_timeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form2) {
			listener.enterAccept_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form2) {
			listener.exitAccept_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form2) {
			return visitor.visitAccept_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_form3_clause(): Accept_form3_clauseContext[];
	public accept_form3_clause(i: number): Accept_form3_clauseContext;
	public accept_form3_clause(i?: number): Accept_form3_clauseContext | Accept_form3_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form3_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form3_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3) {
			listener.enterAccept_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3) {
			listener.exitAccept_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3) {
			return visitor.visitAccept_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public KEY(): TerminalNode { return this.getToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext {
		return this.getRuleContext(0, Key_dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public accept_form4_clause(): Accept_form4_clauseContext[];
	public accept_form4_clause(i: number): Accept_form4_clauseContext;
	public accept_form4_clause(i?: number): Accept_form4_clauseContext | Accept_form4_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form4_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form4_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4) {
			listener.enterAccept_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4) {
			listener.exitAccept_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4) {
			return visitor.visitAccept_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form5Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public screen_name(): Screen_nameContext {
		return this.getRuleContext(0, Screen_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_at(): Accept_atContext | undefined {
		return this.tryGetRuleContext(0, Accept_atContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form5; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form5) {
			listener.enterAccept_form5(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form5) {
			listener.exitAccept_form5(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form5) {
			return visitor.visitAccept_form5(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_atContext extends ParserRuleContext {
	public accept_at_line(): Accept_at_lineContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_lineContext);
	}
	public accept_at_column(): Accept_at_columnContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at) {
			listener.enterAccept_at(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at) {
			listener.exitAccept_at(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at) {
			return visitor.visitAccept_at(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_line) {
			listener.enterAccept_at_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_line) {
			listener.exitAccept_at_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_line) {
			return visitor.visitAccept_at_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_column) {
			listener.enterAccept_at_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_column) {
			listener.exitAccept_at_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_column) {
			return visitor.visitAccept_at_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext | undefined {
		return this.tryGetRuleContext(0, Number_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4_clause) {
			listener.enterAccept_form4_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4_clause) {
			listener.exitAccept_form4_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4_clause) {
			return visitor.visitAccept_form4_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3_clauseContext extends ParserRuleContext {
	public accept_form4_clause(): Accept_form4_clauseContext | undefined {
		return this.tryGetRuleContext(0, Accept_form4_clauseContext);
	}
	public UNDERLINED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINED, 0); }
	public BOLD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOLD, 0); }
	public BLINKING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINKING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROTECTED, 0); }
	public protected_value(): Protected_valueContext | undefined {
		return this.tryGetRuleContext(0, Protected_valueContext);
	}
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSED, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ECHO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ECHO, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFAULT, 0); }
	public def_value(): Def_valueContext | undefined {
		return this.tryGetRuleContext(0, Def_valueContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Key_dest_itemContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3_clause) {
			listener.enterAccept_form3_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3_clause) {
			listener.exitAccept_form3_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3_clause) {
			return visitor.visitAccept_form3_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_dest_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_dest_item) {
			listener.enterKey_dest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_dest_item) {
			listener.exitKey_dest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_dest_item) {
			return visitor.visitKey_dest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_valueContext extends ParserRuleContext {
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURRENT, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_def_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDef_value) {
			listener.enterDef_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDef_value) {
			listener.exitDef_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDef_value) {
			return visitor.visitDef_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Protected_valueContext extends ParserRuleContext {
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public prot_size_value(): Prot_size_valueContext | undefined {
		return this.tryGetRuleContext(0, Prot_size_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AUTOTERMINATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOTERMINATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public EDITING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EDITING, 0); }
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public prot_fill_lit(): Prot_fill_litContext | undefined {
		return this.tryGetRuleContext(0, Prot_fill_litContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_protected_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProtected_value) {
			listener.enterProtected_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProtected_value) {
			listener.exitProtected_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProtected_value) {
			return visitor.visitProtected_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_fill_litContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_fill_lit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_fill_lit) {
			listener.enterProt_fill_lit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_fill_lit) {
			listener.exitProt_fill_lit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_fill_lit) {
			return visitor.visitProt_fill_lit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_size_valueContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_size_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_size_value) {
			listener.enterProt_size_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_size_value) {
			listener.exitProt_size_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_size_value) {
			return visitor.visitProt_size_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Number_valueContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_number_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNumber_value) {
			listener.enterNumber_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNumber_value) {
			listener.exitNumber_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNumber_value) {
			return visitor.visitNumber_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_timeContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DATE, 0); }
	public YYYYMMDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYMMDD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY, 0); }
	public YYYYDDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYDDD, 0); }
	public DAY_OF_WEEK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY_OF_WEEK, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TIME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_time; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_time) {
			listener.enterDate_time(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_time) {
			listener.exitDate_time(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_time) {
			return visitor.visitDate_time(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dest_itemContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDest_item) {
			listener.enterDest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDest_item) {
			listener.exitDest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDest_item) {
			return visitor.visitDest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_sourceContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_source) {
			listener.enterInput_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_source) {
			listener.exitInput_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_source) {
			return visitor.visitInput_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_endContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(cobolParser.END, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end) {
			listener.enterAt_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end) {
			listener.exitAt_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end) {
			return visitor.visitAt_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exceptionContext extends ParserRuleContext {
	public EXCEPTION(): TerminalNode { return this.getToken(cobolParser.EXCEPTION, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception) {
			listener.enterOn_exception(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception) {
			listener.exitOn_exception(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception) {
			return visitor.visitOn_exception(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_sizeContext extends ParserRuleContext {
	public SIZE(): TerminalNode { return this.getToken(cobolParser.SIZE, 0); }
	public ERROR(): TerminalNode { return this.getToken(cobolParser.ERROR, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size) {
			listener.enterOn_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size) {
			listener.exitOn_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size) {
			return visitor.visitOn_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Invalid_keyContext extends ParserRuleContext {
	public INVALID(): TerminalNode { return this.getToken(cobolParser.INVALID, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_invalid_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInvalid_key) {
			listener.enterInvalid_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInvalid_key) {
			listener.exitInvalid_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInvalid_key) {
			return visitor.visitInvalid_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_divisionContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_section(): File_sectionContext | undefined {
		return this.tryGetRuleContext(0, File_sectionContext);
	}
	public working_storage_section(): Working_storage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Working_storage_sectionContext);
	}
	public linkage_section(): Linkage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Linkage_sectionContext);
	}
	public report_section(): Report_sectionContext | undefined {
		return this.tryGetRuleContext(0, Report_sectionContext);
	}
	public screen_section(): Screen_sectionContext | undefined {
		return this.tryGetRuleContext(0, Screen_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division) {
			listener.enterData_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division) {
			listener.exitData_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division) {
			return visitor.visitData_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_description_entry(): File_description_entryContext[];
	public file_description_entry(i: number): File_description_entryContext;
	public file_description_entry(i?: number): File_description_entryContext | File_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_description_entryContext);
		} else {
			return this.getRuleContext(i, File_description_entryContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext[];
	public sort_merge_file_description_entry(i: number): Sort_merge_file_description_entryContext;
	public sort_merge_file_description_entry(i?: number): Sort_merge_file_description_entryContext | Sort_merge_file_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_description_entryContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_description_entryContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_section) {
			listener.enterFile_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_section) {
			listener.exitFile_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_section) {
			return visitor.visitFile_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_sectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(cobolParser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_section) {
			listener.enterWorking_storage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_section) {
			listener.exitWorking_storage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_section) {
			return visitor.visitWorking_storage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Linkage_sectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(cobolParser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linkage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinkage_section) {
			listener.enterLinkage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinkage_section) {
			listener.exitLinkage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinkage_section) {
			return visitor.visitLinkage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_sectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(cobolParser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public report_group_description_entry(): Report_group_description_entryContext[];
	public report_group_description_entry(i: number): Report_group_description_entryContext;
	public report_group_description_entry(i?: number): Report_group_description_entryContext | Report_group_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_group_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_section) {
			listener.enterReport_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_section) {
			listener.exitReport_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_section) {
			return visitor.visitReport_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_sectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(cobolParser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public screen_description_entry(): Screen_description_entryContext[];
	public screen_description_entry(i: number): Screen_description_entryContext;
	public screen_description_entry(i?: number): Screen_description_entryContext | Screen_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_entryContext);
		} else {
			return this.getRuleContext(i, Screen_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_section) {
			listener.enterScreen_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_section) {
			listener.exitScreen_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_section) {
			return visitor.visitScreen_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_description_entryContext extends ParserRuleContext {
	public FD(): TerminalNode { return this.getToken(cobolParser.FD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public fd_clause(): Fd_clauseContext[];
	public fd_clause(i: number): Fd_clauseContext;
	public fd_clause(i?: number): Fd_clauseContext | Fd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fd_clauseContext);
		} else {
			return this.getRuleContext(i, Fd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description_entry) {
			listener.enterFile_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description_entry) {
			listener.exitFile_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description_entry) {
			return visitor.visitFile_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_description_entryContext extends ParserRuleContext {
	public SD(): TerminalNode { return this.getToken(cobolParser.SD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sd_clause(): Sd_clauseContext[];
	public sd_clause(i: number): Sd_clauseContext;
	public sd_clause(i?: number): Sd_clauseContext | Sd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sd_clauseContext);
		} else {
			return this.getRuleContext(i, Sd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description_entry) {
			listener.enterSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description_entry) {
			listener.exitSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description_entry) {
			return visitor.visitSort_merge_file_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_description_entryContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(cobolParser.RD, 0); }
	public report_name(): Report_nameContext {
		return this.getRuleContext(0, Report_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rd_clause(): Rd_clauseContext[];
	public rd_clause(i: number): Rd_clauseContext;
	public rd_clause(i?: number): Rd_clauseContext | Rd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rd_clauseContext);
		} else {
			return this.getRuleContext(i, Rd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description_entry) {
			listener.enterReport_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description_entry) {
			listener.exitReport_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description_entry) {
			return visitor.visitReport_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fd_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public value_of_id(): Value_of_idContext | undefined {
		return this.tryGetRuleContext(0, Value_of_idContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	public linage(): LinageContext | undefined {
		return this.tryGetRuleContext(0, LinageContext);
	}
	public report_is(): Report_isContext | undefined {
		return this.tryGetRuleContext(0, Report_isContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFd_clause) {
			listener.enterFd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFd_clause) {
			listener.exitFd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFd_clause) {
			return visitor.visitFd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_description_entryContext extends ParserRuleContext {
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_description_entry) {
			listener.enterRecord_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_description_entry) {
			listener.exitRecord_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_description_entry) {
			return visitor.visitRecord_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public REDEFINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REDEFINES, 0); }
	public other_data_item(): Other_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Other_data_itemContext);
	}
	public data_description_clause(): Data_description_clauseContext[];
	public data_description_clause(i: number): Data_description_clauseContext;
	public data_description_clause(i?: number): Data_description_clauseContext | Data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Data_description_clauseContext);
		}
	}
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_entry) {
			listener.enterData_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_entry) {
			listener.exitData_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_entry) {
			return visitor.visitData_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Level_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_level_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLevel_number) {
			listener.enterLevel_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLevel_number) {
			listener.exitLevel_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLevel_number) {
			return visitor.visitLevel_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public usage(): UsageContext | undefined {
		return this.tryGetRuleContext(0, UsageContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public occurs(): OccursContext | undefined {
		return this.tryGetRuleContext(0, OccursContext);
	}
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public value_is(): Value_isContext | undefined {
		return this.tryGetRuleContext(0, Value_isContext);
	}
	public renames(): RenamesContext | undefined {
		return this.tryGetRuleContext(0, RenamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_clause) {
			listener.enterData_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_clause) {
			listener.exitData_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_clause) {
			return visitor.visitData_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenamesContext extends ParserRuleContext {
	public RENAMES(): TerminalNode { return this.getToken(cobolParser.RENAMES, 0); }
	public rename_start(): Rename_startContext {
		return this.getRuleContext(0, Rename_startContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rename_end(): Rename_endContext | undefined {
		return this.tryGetRuleContext(0, Rename_endContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_renames; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRenames) {
			listener.enterRenames(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRenames) {
			listener.exitRenames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRenames) {
			return visitor.visitRenames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_startContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_start; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_start) {
			listener.enterRename_start(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_start) {
			listener.exitRename_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_start) {
			return visitor.visitRename_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_endContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_end) {
			listener.enterRename_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_end) {
			listener.exitRename_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_end) {
			return visitor.visitRename_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_isContext extends ParserRuleContext {
	public value_is_definition(): Value_is_definitionContext[];
	public value_is_definition(i: number): Value_is_definitionContext;
	public value_is_definition(i?: number): Value_is_definitionContext | Value_is_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Value_is_definitionContext);
		} else {
			return this.getRuleContext(i, Value_is_definitionContext);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is) {
			listener.enterValue_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is) {
			listener.exitValue_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is) {
			return visitor.visitValue_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definitionContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public value_is_definition_thru(): Value_is_definition_thruContext | undefined {
		return this.tryGetRuleContext(0, Value_is_definition_thruContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition) {
			listener.enterValue_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition) {
			listener.exitValue_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition) {
			return visitor.visitValue_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_partContext extends ParserRuleContext {
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public ref_data_name(): Ref_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Ref_data_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public external_name(): External_nameContext | undefined {
		return this.tryGetRuleContext(0, External_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_part) {
			listener.enterValue_is_definition_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_part) {
			listener.exitValue_is_definition_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_part) {
			return visitor.visitValue_is_definition_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_thruContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_thru; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_thru) {
			listener.enterValue_is_definition_thru(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_thru) {
			listener.exitValue_is_definition_thru(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_thru) {
			return visitor.visitValue_is_definition_thru(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_external_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExternal_name) {
			listener.enterExternal_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExternal_name) {
			listener.exitExternal_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExternal_name) {
			return visitor.visitExternal_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ref_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ref_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRef_data_name) {
			listener.enterRef_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRef_data_name) {
			listener.exitRef_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRef_data_name) {
			return visitor.visitRef_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_literal) {
			listener.enterValue_is_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_literal) {
			listener.exitValue_is_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_literal) {
			return visitor.visitValue_is_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OccursContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(cobolParser.OCCURS, 0); }
	public times_definition(): Times_definitionContext {
		return this.getRuleContext(0, Times_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public key_is(): Key_isContext[];
	public key_is(i: number): Key_isContext;
	public key_is(i?: number): Key_isContext | Key_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_isContext);
		} else {
			return this.getRuleContext(i, Key_isContext);
		}
	}
	public indexed_by(): Indexed_byContext | undefined {
		return this.tryGetRuleContext(0, Indexed_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_occurs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOccurs) {
			listener.enterOccurs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOccurs) {
			listener.exitOccurs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOccurs) {
			return visitor.visitOccurs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indexed_byContext extends ParserRuleContext {
	public INDEXED(): TerminalNode { return this.getToken(cobolParser.INDEXED, 0); }
	public ind_name(): Ind_nameContext[];
	public ind_name(i: number): Ind_nameContext;
	public ind_name(i?: number): Ind_nameContext | Ind_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ind_nameContext);
		} else {
			return this.getRuleContext(i, Ind_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_indexed_by; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIndexed_by) {
			listener.enterIndexed_by(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIndexed_by) {
			listener.exitIndexed_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIndexed_by) {
			return visitor.visitIndexed_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ind_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ind_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInd_name) {
			listener.enterInd_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInd_name) {
			listener.exitInd_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInd_name) {
			return visitor.visitInd_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_isContext extends ParserRuleContext {
	public key_name(): Key_nameContext[];
	public key_name(i: number): Key_nameContext;
	public key_name(i?: number): Key_nameContext | Key_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_nameContext);
		} else {
			return this.getRuleContext(i, Key_nameContext);
		}
	}
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_is) {
			listener.enterKey_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_is) {
			listener.exitKey_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_is) {
			return visitor.visitKey_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_name) {
			listener.enterKey_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_name) {
			listener.exitKey_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_name) {
			return visitor.visitKey_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Times_definitionContext extends ParserRuleContext {
	public table_size(): Table_sizeContext | undefined {
		return this.tryGetRuleContext(0, Table_sizeContext);
	}
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public min_times(): Min_timesContext | undefined {
		return this.tryGetRuleContext(0, Min_timesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public max_times(): Max_timesContext | undefined {
		return this.tryGetRuleContext(0, Max_timesContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_times_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTimes_definition) {
			listener.enterTimes_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTimes_definition) {
			listener.exitTimes_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTimes_definition) {
			return visitor.visitTimes_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_table_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTable_size) {
			listener.enterTable_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTable_size) {
			listener.exitTable_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTable_size) {
			return visitor.visitTable_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Min_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_min_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMin_times) {
			listener.enterMin_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMin_times) {
			listener.exitMin_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMin_times) {
			return visitor.visitMin_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Max_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_max_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMax_times) {
			listener.enterMax_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMax_times) {
			listener.exitMax_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMax_times) {
			return visitor.visitMax_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_description_entryContext extends ParserRuleContext {
	public report_group_data_description(): Report_group_data_descriptionContext[];
	public report_group_data_description(i: number): Report_group_data_descriptionContext;
	public report_group_data_description(i?: number): Report_group_data_descriptionContext | Report_group_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_group_data_descriptionContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_description_entry) {
			listener.enterReport_group_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_description_entry) {
			listener.exitReport_group_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_description_entry) {
			return visitor.visitReport_group_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_descriptionContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public report_group_data_description_clause(): Report_group_data_description_clauseContext[];
	public report_group_data_description_clause(i: number): Report_group_data_description_clauseContext;
	public report_group_data_description_clause(i?: number): Report_group_data_description_clauseContext | Report_group_data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Report_group_data_description_clauseContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description) {
			listener.enterReport_group_data_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description) {
			listener.exitReport_group_data_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description) {
			return visitor.visitReport_group_data_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_description_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public line_num_definition(): Line_num_definitionContext | undefined {
		return this.tryGetRuleContext(0, Line_num_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GROUP, 0); }
	public next_group_definition(): Next_group_definitionContext | undefined {
		return this.tryGetRuleContext(0, Next_group_definitionContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public type_is_definition(): Type_is_definitionContext | undefined {
		return this.tryGetRuleContext(0, Type_is_definitionContext);
	}
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public column_number(): Column_numberContext | undefined {
		return this.tryGetRuleContext(0, Column_numberContext);
	}
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDICATE, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SOURCE, 0); }
	public source_name(): Source_nameContext | undefined {
		return this.tryGetRuleContext(0, Source_nameContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public sum(): SumContext | undefined {
		return this.tryGetRuleContext(0, SumContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description_clause) {
			listener.enterReport_group_data_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description_clause) {
			listener.exitReport_group_data_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description_clause) {
			return visitor.visitReport_group_data_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_isContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_is) {
			listener.enterSign_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_is) {
			listener.exitSign_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_is) {
			return visitor.visitSign_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SumContext extends ParserRuleContext {
	public SUM(): TerminalNode[];
	public SUM(i: number): TerminalNode;
	public SUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SUM);
		} else {
			return this.getToken(cobolParser.SUM, i);
		}
	}
	public sum_name(): Sum_nameContext[];
	public sum_name(i: number): Sum_nameContext;
	public sum_name(i?: number): Sum_nameContext | Sum_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sum_nameContext);
		} else {
			return this.getRuleContext(i, Sum_nameContext);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RESET, 0); }
	public control_foot_name(): Control_foot_nameContext | undefined {
		return this.tryGetRuleContext(0, Control_foot_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode[];
	public UPON(i: number): TerminalNode;
	public UPON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UPON);
		} else {
			return this.getToken(cobolParser.UPON, i);
		}
	}
	public detail_report_group_name(): Detail_report_group_nameContext[];
	public detail_report_group_name(i: number): Detail_report_group_nameContext;
	public detail_report_group_name(i?: number): Detail_report_group_nameContext | Detail_report_group_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Detail_report_group_nameContext);
		} else {
			return this.getRuleContext(i, Detail_report_group_nameContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum) {
			listener.enterSum(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum) {
			listener.exitSum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum) {
			return visitor.visitSum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_foot_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_foot_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_foot_name) {
			listener.enterControl_foot_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_foot_name) {
			listener.exitControl_foot_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_foot_name) {
			return visitor.visitControl_foot_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Detail_report_group_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_detail_report_group_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDetail_report_group_name) {
			listener.enterDetail_report_group_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDetail_report_group_name) {
			listener.exitDetail_report_group_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDetail_report_group_name) {
			return visitor.visitDetail_report_group_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sum_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum_name) {
			listener.enterSum_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum_name) {
			listener.exitSum_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum_name) {
			return visitor.visitSum_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_name) {
			listener.enterSource_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_name) {
			listener.exitSource_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_name) {
			return visitor.visitSource_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColumn_number) {
			listener.enterColumn_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColumn_number) {
			listener.exitColumn_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColumn_number) {
			return visitor.visitColumn_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_is_definitionContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RH, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PH, 0); }
	public type_control_name(): Type_control_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CH, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CF, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PF, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_is_definition) {
			listener.enterType_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_is_definition) {
			listener.exitType_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_is_definition) {
			return visitor.visitType_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_control_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_control_name) {
			listener.enterType_control_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_control_name) {
			listener.exitType_control_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_control_name) {
			return visitor.visitType_control_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Next_group_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_next_group_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNext_group_definition) {
			listener.enterNext_group_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNext_group_definition) {
			listener.exitNext_group_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNext_group_definition) {
			return visitor.visitNext_group_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_num_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext {
		return this.getRuleContext(0, Line_numContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num_definition) {
			listener.enterLine_num_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num_definition) {
			listener.exitLine_num_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num_definition) {
			return visitor.visitLine_num_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num) {
			listener.enterLine_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num) {
			listener.exitLine_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num) {
			return visitor.visitLine_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rd_clauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CODE, 0); }
	public report_code(): Report_codeContext | undefined {
		return this.tryGetRuleContext(0, Report_codeContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CONTROLS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROLS, 0); }
	public control_name(): Control_nameContext[];
	public control_name(i: number): Control_nameContext;
	public control_name(i?: number): Control_nameContext | Control_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Control_nameContext);
		} else {
			return this.getRuleContext(i, Control_nameContext);
		}
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public page_size_rd(): Page_size_rdContext | undefined {
		return this.tryGetRuleContext(0, Page_size_rdContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMITS, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public heading_line(): Heading_lineContext | undefined {
		return this.tryGetRuleContext(0, Heading_lineContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public DETAIL(): TerminalNode[];
	public DETAIL(i: number): TerminalNode;
	public DETAIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DETAIL);
		} else {
			return this.getToken(cobolParser.DETAIL, i);
		}
	}
	public first_detail_line(): First_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, First_detail_lineContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LAST, 0); }
	public last_detail_line(): Last_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, Last_detail_lineContext);
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line_rd(): Footing_line_rdContext | undefined {
		return this.tryGetRuleContext(0, Footing_line_rdContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRd_clause) {
			listener.enterRd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRd_clause) {
			listener.exitRd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRd_clause) {
			return visitor.visitRd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_line_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line_rd) {
			listener.enterFooting_line_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line_rd) {
			listener.exitFooting_line_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line_rd) {
			return visitor.visitFooting_line_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_detail_line) {
			listener.enterLast_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_detail_line) {
			listener.exitLast_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_detail_line) {
			return visitor.visitLast_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_detail_line) {
			listener.enterFirst_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_detail_line) {
			listener.exitFirst_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_detail_line) {
			return visitor.visitFirst_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Heading_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_heading_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterHeading_line) {
			listener.enterHeading_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitHeading_line) {
			listener.exitHeading_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitHeading_line) {
			return visitor.visitHeading_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_size_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size_rd) {
			listener.enterPage_size_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size_rd) {
			listener.exitPage_size_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size_rd) {
			return visitor.visitPage_size_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_name) {
			listener.enterControl_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_name) {
			listener.exitControl_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_name) {
			return visitor.visitControl_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_codeContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_code; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_code) {
			listener.enterReport_code(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_code) {
			listener.exitReport_code(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_code) {
			return visitor.visitReport_code(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsageContext extends ParserRuleContext {
	public usage_definition(): Usage_definitionContext {
		return this.getRuleContext(0, Usage_definitionContext);
	}
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage) {
			listener.enterUsage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage) {
			listener.exitUsage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage) {
			return visitor.visitUsage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_definitionContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY, 0); }
	public BINARY_CHAR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_CHAR, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNSIGNED, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BINARY_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_SHORT, 0); }
	public BINARY_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_LONG, 0); }
	public BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_DOUBLE, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_5, 0); }
	public COMPUTATIONAL_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_X, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_5, 0); }
	public COMP_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_X, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public FLOAT_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_SHORT, 0); }
	public FLOAT_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_LONG, 0); }
	public FLOAT_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_EXTENDED, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEX, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public POINTER_64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER_64, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_definition) {
			listener.enterUsage_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_definition) {
			listener.exitUsage_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_definition) {
			return visitor.visitUsage_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureContext extends ParserRuleContext {
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPicture) {
			listener.enterPicture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPicture) {
			listener.exitPicture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPicture) {
			return visitor.visitPicture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public char_str_part(): Char_str_partContext[];
	public char_str_part(i: number): Char_str_partContext;
	public char_str_part(i?: number): Char_str_partContext | Char_str_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_str_partContext);
		} else {
			return this.getRuleContext(i, Char_str_partContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_character_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCharacter_string) {
			return visitor.visitCharacter_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_str_partContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_str_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_str_part) {
			listener.enterChar_str_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_str_part) {
			listener.exitChar_str_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_str_part) {
			return visitor.visitChar_str_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Other_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_other_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOther_data_item) {
			listener.enterOther_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOther_data_item) {
			listener.exitOther_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOther_data_item) {
			return visitor.visitOther_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_name) {
			listener.enterData_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_name) {
			listener.exitData_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_name) {
			return visitor.visitData_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sd_clauseContext extends ParserRuleContext {
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSd_clause) {
			listener.enterSd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSd_clause) {
			listener.exitSd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSd_clause) {
			return visitor.visitSd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_isContext extends ParserRuleContext {
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_is) {
			listener.enterReport_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_is) {
			listener.exitReport_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_is) {
			return visitor.visitReport_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_name) {
			listener.enterReport_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_name) {
			listener.exitReport_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_name) {
			return visitor.visitReport_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(cobolParser.LINAGE, 0); }
	public page_size(): Page_sizeContext {
		return this.getRuleContext(0, Page_sizeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.LINES);
		} else {
			return this.getToken(cobolParser.LINES, i);
		}
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line(): Footing_lineContext | undefined {
		return this.tryGetRuleContext(0, Footing_lineContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TOP, 0); }
	public top_lines(): Top_linesContext | undefined {
		return this.tryGetRuleContext(0, Top_linesContext);
	}
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOTTOM, 0); }
	public bottom_lines(): Bottom_linesContext | undefined {
		return this.tryGetRuleContext(0, Bottom_linesContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AT);
		} else {
			return this.getToken(cobolParser.AT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinage) {
			listener.enterLinage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinage) {
			listener.exitLinage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinage) {
			return visitor.visitLinage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bottom_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bottom_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBottom_lines) {
			listener.enterBottom_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBottom_lines) {
			listener.exitBottom_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBottom_lines) {
			return visitor.visitBottom_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_lines) {
			listener.enterTop_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_lines) {
			listener.exitTop_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_lines) {
			return visitor.visitTop_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line) {
			listener.enterFooting_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line) {
			listener.exitFooting_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line) {
			return visitor.visitFooting_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size) {
			listener.enterPage_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size) {
			listener.exitPage_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size) {
			return visitor.visitPage_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_recContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public rec_name(): Rec_nameContext[];
	public rec_name(i: number): Rec_nameContext;
	public rec_name(i?: number): Rec_nameContext | Rec_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_nameContext);
		} else {
			return this.getRuleContext(i, Rec_nameContext);
		}
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_rec) {
			listener.enterData_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_rec) {
			listener.exitData_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_rec) {
			return visitor.visitData_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_name) {
			listener.enterRec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_name) {
			listener.exitRec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_name) {
			return visitor.visitRec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_idContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(cobolParser.OF, 0); }
	public value_of_id_definition(): Value_of_id_definitionContext {
		return this.getRuleContext(0, Value_of_id_definitionContext);
	}
	public ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ID, 0); }
	public FILE_ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE_ID, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id) {
			listener.enterValue_of_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id) {
			listener.exitValue_of_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id) {
			return visitor.visitValue_of_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_id_definitionContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id_definition) {
			listener.enterValue_of_id_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id_definition) {
			listener.exitValue_of_id_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id_definition) {
			return visitor.visitValue_of_id_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(cobolParser.LABEL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_label; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_definition(): Record_definitionContext {
		return this.getRuleContext(0, Record_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord) {
			listener.enterRecord(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord) {
			listener.exitRecord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord) {
			return visitor.visitRecord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_definitionContext extends ParserRuleContext {
	public longest_rec(): Longest_recContext | undefined {
		return this.tryGetRuleContext(0, Longest_recContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public shortest_rec(): Shortest_recContext | undefined {
		return this.tryGetRuleContext(0, Shortest_recContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_definition) {
			listener.enterRecord_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_definition) {
			listener.exitRecord_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_definition) {
			return visitor.visitRecord_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Depending_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_depending_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDepending_item) {
			listener.enterDepending_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDepending_item) {
			listener.exitDepending_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDepending_item) {
			return visitor.visitDepending_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Shortest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_shortest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterShortest_rec) {
			listener.enterShortest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitShortest_rec) {
			listener.exitShortest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitShortest_rec) {
			return visitor.visitShortest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Longest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_longest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLongest_rec) {
			listener.enterLongest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLongest_rec) {
			listener.exitLongest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLongest_rec) {
			return visitor.visitLongest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public screen_description_clause(): Screen_description_clauseContext[];
	public screen_description_clause(i: number): Screen_description_clauseContext;
	public screen_description_clause(i?: number): Screen_description_clauseContext | Screen_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_clauseContext);
		} else {
			return this.getRuleContext(i, Screen_description_clauseContext);
		}
	}
	public screen_name(): Screen_nameContext | undefined {
		return this.tryGetRuleContext(0, Screen_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_entry) {
			listener.enterScreen_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_entry) {
			listener.exitScreen_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_entry) {
			return visitor.visitScreen_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_name) {
			listener.enterScreen_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_name) {
			listener.exitScreen_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_name) {
			return visitor.visitScreen_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_clauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOREGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOREGROUND_COLOR, 0); }
	public color_num(): Color_numContext | undefined {
		return this.tryGetRuleContext(0, Color_numContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public BACKGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BACKGROUND_COLOR, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTO, 0); }
	public SECURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SECURE, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REQUIRED, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FULL, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public BLINK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINK, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOS, 0); }
	public HIGHLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGHLIGHT, 0); }
	public LOWLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOWLIGHT, 0); }
	public REVERSE_VIDEO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSE_VIDEO, 0); }
	public UNDERLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINE, 0); }
	public src_number(): Src_numberContext | undefined {
		return this.tryGetRuleContext(0, Src_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public scr_pic_using(): Scr_pic_usingContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_usingContext);
	}
	public scr_pic_from(): Scr_pic_fromContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_fromContext);
	}
	public scr_pic_to(): Scr_pic_toContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_clause) {
			listener.enterScreen_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_clause) {
			listener.exitScreen_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_clause) {
			return visitor.visitScreen_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_using) {
			listener.enterScr_pic_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_using) {
			listener.exitScr_pic_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_using) {
			return visitor.visitScr_pic_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_fromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_from; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_from) {
			listener.enterScr_pic_from(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_from) {
			listener.exitScr_pic_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_from) {
			return visitor.visitScr_pic_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_toContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_to) {
			listener.enterScr_pic_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_to) {
			listener.exitScr_pic_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_to) {
			return visitor.visitScr_pic_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nonnumeric_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_nonnumeric_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNonnumeric_literal) {
			listener.enterNonnumeric_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNonnumeric_literal) {
			listener.exitNonnumeric_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNonnumeric_literal) {
			return visitor.visitNonnumeric_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_numberContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_number) {
			listener.enterSrc_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_number) {
			listener.exitSrc_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_number) {
			return visitor.visitSrc_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Color_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_color_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColor_num) {
			listener.enterColor_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColor_num) {
			listener.exitColor_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColor_num) {
			return visitor.visitColor_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_divisionContext extends ParserRuleContext {
	public IDENTIFICATION_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.IDENTIFICATION_IN_A_AREA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identification_division_paragraph(): Identification_division_paragraphContext[];
	public identification_division_paragraph(i: number): Identification_division_paragraphContext;
	public identification_division_paragraph(i?: number): Identification_division_paragraphContext | Identification_division_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identification_division_paragraphContext);
		} else {
			return this.getRuleContext(i, Identification_division_paragraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division) {
			listener.enterIdentification_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division) {
			listener.exitIdentification_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division) {
			return visitor.visitIdentification_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_division_paragraphContext extends ParserRuleContext {
	public program_id(): Program_idContext | undefined {
		return this.tryGetRuleContext(0, Program_idContext);
	}
	public author(): AuthorContext | undefined {
		return this.tryGetRuleContext(0, AuthorContext);
	}
	public installation(): InstallationContext | undefined {
		return this.tryGetRuleContext(0, InstallationContext);
	}
	public date_written(): Date_writtenContext | undefined {
		return this.tryGetRuleContext(0, Date_writtenContext);
	}
	public date_compiled(): Date_compiledContext | undefined {
		return this.tryGetRuleContext(0, Date_compiledContext);
	}
	public security(): SecurityContext | undefined {
		return this.tryGetRuleContext(0, SecurityContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public separator(): SeparatorContext | undefined {
		return this.tryGetRuleContext(0, SeparatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division_paragraph) {
			listener.enterIdentification_division_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division_paragraph) {
			listener.exitIdentification_division_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division_paragraph) {
			return visitor.visitIdentification_division_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_idContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(cobolParser.PROGRAM_ID, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public is_program(): Is_programContext | undefined {
		return this.tryGetRuleContext(0, Is_programContext);
	}
	public with_ident(): With_identContext | undefined {
		return this.tryGetRuleContext(0, With_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_id) {
			listener.enterProgram_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_id) {
			listener.exitProgram_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_id) {
			return visitor.visitProgram_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_name) {
			listener.enterProgram_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_name) {
			listener.exitProgram_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_name) {
			return visitor.visitProgram_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_programContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_program) {
			listener.enterIs_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_program) {
			listener.exitIs_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_program) {
			return visitor.visitIs_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_identContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(cobolParser.IDENT, 0); }
	public ident_string(): Ident_stringContext {
		return this.getRuleContext(0, Ident_stringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_ident; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_ident) {
			listener.enterWith_ident(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_ident) {
			listener.exitWith_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_ident) {
			return visitor.visitWith_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ident_stringContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ident_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdent_string) {
			listener.enterIdent_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdent_string) {
			listener.exitIdent_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdent_string) {
			return visitor.visitIdent_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_entryContext extends ParserRuleContext {
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_comment_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComment_entry) {
			listener.enterComment_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComment_entry) {
			listener.exitComment_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComment_entry) {
			return visitor.visitComment_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(cobolParser.AUTHOR, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor) {
			listener.enterAuthor(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor) {
			listener.exitAuthor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor) {
			return visitor.visitAuthor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(cobolParser.INSTALLATION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_installation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInstallation) {
			listener.enterInstallation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInstallation) {
			listener.exitInstallation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInstallation) {
			return visitor.visitInstallation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_writtenContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(cobolParser.DATE_WRITTEN, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_written; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_written) {
			listener.enterDate_written(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_written) {
			listener.exitDate_written(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_written) {
			return visitor.visitDate_written(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_compiledContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(cobolParser.DATE_COMPILED, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_compiled; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_compiled) {
			listener.enterDate_compiled(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_compiled) {
			listener.exitDate_compiled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_compiled) {
			return visitor.visitDate_compiled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(cobolParser.SECURITY, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_security; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSecurity) {
			listener.enterSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSecurity) {
			listener.exitSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSecurity) {
			return visitor.visitSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(cobolParser.OPTIONS, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public arithmetic(): ArithmeticContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_options_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticContext extends ParserRuleContext {
	public ARITHMETIC(): TerminalNode { return this.getToken(cobolParser.ARITHMETIC, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic) {
			listener.enterArithmetic(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic) {
			listener.exitArithmetic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic) {
			return visitor.visitArithmetic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_divisionContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(cobolParser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public configuration_section(): Configuration_sectionContext | undefined {
		return this.tryGetRuleContext(0, Configuration_sectionContext);
	}
	public input_output_section(): Input_output_sectionContext | undefined {
		return this.tryGetRuleContext(0, Input_output_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division) {
			listener.enterEnvironment_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division) {
			listener.exitEnvironment_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division) {
			return visitor.visitEnvironment_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Configuration_sectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(cobolParser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public source_computer(): Source_computerContext | undefined {
		return this.tryGetRuleContext(0, Source_computerContext);
	}
	public object_computer(): Object_computerContext | undefined {
		return this.tryGetRuleContext(0, Object_computerContext);
	}
	public special_names(): Special_namesContext | undefined {
		return this.tryGetRuleContext(0, Special_namesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_configuration_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConfiguration_section) {
			listener.enterConfiguration_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConfiguration_section) {
			listener.exitConfiguration_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConfiguration_section) {
			return visitor.visitConfiguration_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_output_sectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(cobolParser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_control(): File_controlContext | undefined {
		return this.tryGetRuleContext(0, File_controlContext);
	}
	public i_o_control(): I_o_controlContext | undefined {
		return this.tryGetRuleContext(0, I_o_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_output_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_output_section) {
			listener.enterInput_output_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_output_section) {
			listener.exitInput_output_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_output_section) {
			return visitor.visitInput_output_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_computerContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(cobolParser.SOURCE_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public with_debugging(): With_debuggingContext | undefined {
		return this.tryGetRuleContext(0, With_debuggingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_computer) {
			listener.enterSource_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_computer) {
			listener.exitSource_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_computer) {
			return visitor.visitSource_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Computer_typeContext extends ParserRuleContext {
	public ALPHA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHA, 0); }
	public I64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I64, 0); }
	public VAX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VAX, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_computer_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComputer_type) {
			listener.enterComputer_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComputer_type) {
			listener.exitComputer_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComputer_type) {
			return visitor.visitComputer_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_debuggingContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(cobolParser.DEBUGGING, 0); }
	public MODE(): TerminalNode { return this.getToken(cobolParser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_debugging; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_debugging) {
			listener.enterWith_debugging(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_debugging) {
			listener.exitWith_debugging(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_debugging) {
			return visitor.visitWith_debugging(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_computerContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(cobolParser.OBJECT_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public memory_size(): Memory_sizeContext | undefined {
		return this.tryGetRuleContext(0, Memory_sizeContext);
	}
	public program_collating(): Program_collatingContext | undefined {
		return this.tryGetRuleContext(0, Program_collatingContext);
	}
	public segment_limit(): Segment_limitContext | undefined {
		return this.tryGetRuleContext(0, Segment_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_object_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterObject_computer) {
			listener.enterObject_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitObject_computer) {
			listener.exitObject_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitObject_computer) {
			return visitor.visitObject_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_sizeContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(cobolParser.MEMORY, 0); }
	public memory_size_amount(): Memory_size_amountContext {
		return this.getRuleContext(0, Memory_size_amountContext);
	}
	public memory_size_unit(): Memory_size_unitContext {
		return this.getRuleContext(0, Memory_size_unitContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size) {
			listener.enterMemory_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size) {
			listener.exitMemory_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size) {
			return visitor.visitMemory_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_amountContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_amount; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_amount) {
			listener.enterMemory_size_amount(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_amount) {
			listener.exitMemory_size_amount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_amount) {
			return visitor.visitMemory_size_amount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_unitContext extends ParserRuleContext {
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_unit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_unit) {
			listener.enterMemory_size_unit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_unit) {
			listener.exitMemory_size_unit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_unit) {
			return visitor.visitMemory_size_unit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_collatingContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_collating; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_collating) {
			listener.enterProgram_collating(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_collating) {
			listener.exitProgram_collating(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_collating) {
			return visitor.visitProgram_collating(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_name) {
			listener.enterAlpha_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_name) {
			listener.exitAlpha_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_name) {
			return visitor.visitAlpha_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_limitContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(cobolParser.SEGMENT_LIMIT, 0); }
	public segment_number(): Segment_numberContext {
		return this.getRuleContext(0, Segment_numberContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_limit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_limit) {
			listener.enterSegment_limit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_limit) {
			listener.exitSegment_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_limit) {
			return visitor.visitSegment_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_number) {
			listener.enterSegment_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_number) {
			listener.exitSegment_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_number) {
			return visitor.visitSegment_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_namesContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(cobolParser.SPECIAL_NAMES, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public special_names_content(): Special_names_contentContext[];
	public special_names_content(i: number): Special_names_contentContext;
	public special_names_content(i?: number): Special_names_contentContext | Special_names_contentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Special_names_contentContext);
		} else {
			return this.getRuleContext(i, Special_names_contentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names) {
			listener.enterSpecial_names(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names) {
			listener.exitSpecial_names(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names) {
			return visitor.visitSpecial_names(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_names_contentContext extends ParserRuleContext {
	public predefined_device(): Predefined_deviceContext | undefined {
		return this.tryGetRuleContext(0, Predefined_deviceContext);
	}
	public device_name(): Device_nameContext | undefined {
		return this.tryGetRuleContext(0, Device_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arg_env(): Arg_envContext | undefined {
		return this.tryGetRuleContext(0, Arg_envContext);
	}
	public arg_env_name(): Arg_env_nameContext | undefined {
		return this.tryGetRuleContext(0, Arg_env_nameContext);
	}
	public C01(): TerminalNode | undefined { return this.tryGetToken(cobolParser.C01, 0); }
	public top_of_page_name(): Top_of_page_nameContext | undefined {
		return this.tryGetRuleContext(0, Top_of_page_nameContext);
	}
	public switch_(): Switch_Context | undefined {
		return this.tryGetRuleContext(0, Switch_Context);
	}
	public alphabet(): AlphabetContext | undefined {
		return this.tryGetRuleContext(0, AlphabetContext);
	}
	public symbolic_chars(): Symbolic_charsContext | undefined {
		return this.tryGetRuleContext(0, Symbolic_charsContext);
	}
	public class_(): Class_Context | undefined {
		return this.tryGetRuleContext(0, Class_Context);
	}
	public currency(): CurrencyContext | undefined {
		return this.tryGetRuleContext(0, CurrencyContext);
	}
	public DECIMAL_POINT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURSOR, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CRT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CRT, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names_content; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names_content) {
			listener.enterSpecial_names_content(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names_content) {
			listener.exitSpecial_names_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names_content) {
			return visitor.visitSpecial_names_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode[];
	public USER_DEFINED_WORD(i: number): TerminalNode;
	public USER_DEFINED_WORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.USER_DEFINED_WORD);
		} else {
			return this.getToken(cobolParser.USER_DEFINED_WORD, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OF);
		} else {
			return this.getToken(cobolParser.OF, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_qualified_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterQualified_data_item) {
			listener.enterQualified_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitQualified_data_item) {
			listener.exitQualified_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitQualified_data_item) {
			return visitor.visitQualified_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencyContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(cobolParser.CURRENCY, 0); }
	public currency_definition(): Currency_definitionContext {
		return this.getRuleContext(0, Currency_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency) {
			listener.enterCurrency(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency) {
			listener.exitCurrency(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency) {
			return visitor.visitCurrency(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_definitionContext extends ParserRuleContext {
	public literal_7(): Literal_7Context | undefined {
		return this.tryGetRuleContext(0, Literal_7Context);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL, 0); }
	public literal_8(): Literal_8Context | undefined {
		return this.tryGetRuleContext(0, Literal_8Context);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_definition) {
			listener.enterCurrency_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_definition) {
			listener.exitCurrency_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_definition) {
			return visitor.visitCurrency_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_7Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_7; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_7) {
			listener.enterLiteral_7(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_7) {
			listener.exitLiteral_7(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_7) {
			return visitor.visitLiteral_7(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_8Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_8; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_8) {
			listener.enterLiteral_8(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_8) {
			listener.exitLiteral_8(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_8) {
			return visitor.visitLiteral_8(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_Context extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(cobolParser.CLASS, 0); }
	public class_name(): Class_nameContext {
		return this.getRuleContext(0, Class_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public user_class(): User_classContext[];
	public user_class(i: number): User_classContext;
	public user_class(i?: number): User_classContext | User_classContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_classContext);
		} else {
			return this.getRuleContext(i, User_classContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_) {
			listener.enterClass_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_) {
			listener.exitClass_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_) {
			return visitor.visitClass_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_name) {
			listener.enterClass_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_name) {
			listener.exitClass_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_name) {
			return visitor.visitClass_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_classContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_class; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_class) {
			listener.enterUser_class(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_class) {
			listener.exitUser_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_class) {
			return visitor.visitUser_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbolic_charsContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(cobolParser.SYMBOLIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public symb_ch_definition(): Symb_ch_definitionContext[];
	public symb_ch_definition(i: number): Symb_ch_definitionContext;
	public symb_ch_definition(i?: number): Symb_ch_definitionContext | Symb_ch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_definitionContext);
		} else {
			return this.getRuleContext(i, Symb_ch_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbolic_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbolic_chars) {
			listener.enterSymbolic_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbolic_chars) {
			listener.exitSymbolic_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbolic_chars) {
			return visitor.visitSymbolic_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_definitionContext extends ParserRuleContext {
	public symb_ch_def_clause(): Symb_ch_def_clauseContext[];
	public symb_ch_def_clause(i: number): Symb_ch_def_clauseContext;
	public symb_ch_def_clause(i?: number): Symb_ch_def_clauseContext | Symb_ch_def_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_def_clauseContext);
		} else {
			return this.getRuleContext(i, Symb_ch_def_clauseContext);
		}
	}
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext | undefined {
		return this.tryGetRuleContext(0, Symb_ch_def_in_alphabetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_definition) {
			listener.enterSymb_ch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_definition) {
			listener.exitSymb_ch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_definition) {
			return visitor.visitSymb_ch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_clauseContext extends ParserRuleContext {
	public symbol_char(): Symbol_charContext[];
	public symbol_char(i: number): Symbol_charContext;
	public symbol_char(i?: number): Symbol_charContext | Symbol_charContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbol_charContext);
		} else {
			return this.getRuleContext(i, Symbol_charContext);
		}
	}
	public char_val(): Char_valContext[];
	public char_val(i: number): Char_valContext;
	public char_val(i?: number): Char_valContext | Char_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_valContext);
		} else {
			return this.getRuleContext(i, Char_valContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_clause) {
			listener.enterSymb_ch_def_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_clause) {
			listener.exitSymb_ch_def_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_clause) {
			return visitor.visitSymb_ch_def_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(cobolParser.IN, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_in_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_in_alphabet) {
			listener.enterSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_in_alphabet) {
			listener.exitSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_in_alphabet) {
			return visitor.visitSymb_ch_def_in_alphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbol_charContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbol_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbol_char) {
			listener.enterSymbol_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbol_char) {
			listener.exitSymbol_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbol_char) {
			return visitor.visitSymbol_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_valContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_val) {
			listener.enterChar_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_val) {
			listener.exitChar_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_val) {
			return visitor.visitChar_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetContext extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(cobolParser.ALPHABET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public alpha_value(): Alpha_valueContext {
		return this.getRuleContext(0, Alpha_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlphabet) {
			listener.enterAlphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlphabet) {
			listener.exitAlphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlphabet) {
			return visitor.visitAlphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_valueContext extends ParserRuleContext {
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EBCDIC, 0); }
	public user_alpha(): User_alphaContext[];
	public user_alpha(i: number): User_alphaContext;
	public user_alpha(i?: number): User_alphaContext | User_alphaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_alphaContext);
		} else {
			return this.getRuleContext(i, User_alphaContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_value) {
			listener.enterAlpha_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_value) {
			listener.exitAlpha_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_value) {
			return visitor.visitAlpha_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_alphaContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public same_literal(): Same_literalContext[];
	public same_literal(i: number): Same_literalContext;
	public same_literal(i?: number): Same_literalContext | Same_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_literalContext);
		} else {
			return this.getRuleContext(i, Same_literalContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_alpha; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_alpha) {
			listener.enterUser_alpha(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_alpha) {
			listener.exitUser_alpha(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_alpha) {
			return visitor.visitUser_alpha(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_literal) {
			listener.enterFirst_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_literal) {
			listener.exitFirst_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_literal) {
			return visitor.visitFirst_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_literal) {
			listener.enterLast_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_literal) {
			listener.exitLast_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_literal) {
			return visitor.visitLast_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_literal) {
			listener.enterSame_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_literal) {
			listener.exitSame_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_literal) {
			return visitor.visitSame_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_Context extends ParserRuleContext {
	public SWITCH(): TerminalNode { return this.getToken(cobolParser.SWITCH, 0); }
	public switch_num(): Switch_numContext {
		return this.getRuleContext(0, Switch_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public switch_name(): Switch_nameContext | undefined {
		return this.tryGetRuleContext(0, Switch_nameContext);
	}
	public switch_clause_on(): Switch_clause_onContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_onContext);
	}
	public switch_clause_off(): Switch_clause_offContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_offContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_) {
			listener.enterSwitch_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_) {
			listener.exitSwitch_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_) {
			return visitor.visitSwitch_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_onContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_on) {
			listener.enterSwitch_clause_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_on) {
			listener.exitSwitch_clause_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_on) {
			return visitor.visitSwitch_clause_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_offContext extends ParserRuleContext {
	public OFF(): TerminalNode { return this.getToken(cobolParser.OFF, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_off; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_off) {
			listener.enterSwitch_clause_off(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_off) {
			listener.exitSwitch_clause_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_off) {
			return visitor.visitSwitch_clause_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cond_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cond_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCond_name) {
			listener.enterCond_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCond_name) {
			listener.exitCond_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCond_name) {
			return visitor.visitCond_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_name) {
			listener.enterSwitch_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_name) {
			listener.exitSwitch_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_name) {
			return visitor.visitSwitch_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_num) {
			listener.enterSwitch_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_num) {
			listener.exitSwitch_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_num) {
			return visitor.visitSwitch_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_of_page_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_of_page_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_of_page_name) {
			listener.enterTop_of_page_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_of_page_name) {
			listener.exitTop_of_page_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_of_page_name) {
			return visitor.visitTop_of_page_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_deviceContext extends ParserRuleContext {
	public CARD_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CARD_READER, 0); }
	public PAPER_TAPE_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_READER, 0); }
	public CONSOLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONSOLE, 0); }
	public LINE_PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE_PRINTER, 0); }
	public PAPER_TAPE_PUNCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
	public SYSIN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSIN, 0); }
	public SYSOUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSOUT, 0); }
	public SYSERR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSERR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_device; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_device) {
			listener.enterPredefined_device(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_device) {
			listener.exitPredefined_device(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_device) {
			return visitor.visitPredefined_device(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Device_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_device_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDevice_name) {
			listener.enterDevice_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDevice_name) {
			listener.exitDevice_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDevice_name) {
			return visitor.visitDevice_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_envContext extends ParserRuleContext {
	public ARGUMENT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_NUMBER, 0); }
	public ARGUMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_VALUE, 0); }
	public ENVIRONMENT_NAME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_NAME, 0); }
	public ENVIRONMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env) {
			listener.enterArg_env(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env) {
			listener.exitArg_env(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env) {
			return visitor.visitArg_env(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_env_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env_name) {
			listener.enterArg_env_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env_name) {
			listener.exitArg_env_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env_name) {
			return visitor.visitArg_env_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_controlContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(cobolParser.FILE_CONTROL, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public select(): SelectContext[];
	public select(i: number): SelectContext;
	public select(i?: number): SelectContext | SelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectContext);
		} else {
			return this.getRuleContext(i, SelectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_control) {
			listener.enterFile_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_control) {
			listener.exitFile_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_control) {
			return visitor.visitFile_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(cobolParser.SELECT, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public assign_to(): Assign_toContext {
		return this.getRuleContext(0, Assign_toContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OPTIONAL, 0); }
	public reserve(): ReserveContext | undefined {
		return this.tryGetRuleContext(0, ReserveContext);
	}
	public organization(): OrganizationContext | undefined {
		return this.tryGetRuleContext(0, OrganizationContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public padding(): PaddingContext | undefined {
		return this.tryGetRuleContext(0, PaddingContext);
	}
	public record_delimiter(): Record_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Record_delimiterContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext[];
	public record_key(i: number): Record_keyContext;
	public record_key(i?: number): Record_keyContext | Record_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_keyContext);
		} else {
			return this.getRuleContext(i, Record_keyContext);
		}
	}
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect) {
			return visitor.visitSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public file_stat(): File_statContext {
		return this.getRuleContext(0, File_statContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_status; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_status) {
			listener.enterFile_status(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_status) {
			listener.exitFile_status(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_status) {
			return visitor.visitFile_status(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_stat; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_stat) {
			listener.enterFile_stat(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_stat) {
			listener.exitFile_stat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_stat) {
			return visitor.visitFile_stat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_keyContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_definition(): Record_key_definitionContext {
		return this.getRuleContext(0, Record_key_definitionContext);
	}
	public ALTERNATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALTERNATE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key) {
			listener.enterRecord_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key) {
			listener.exitRecord_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key) {
			return visitor.visitRecord_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_key_definitionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key_definition) {
			listener.enterRecord_key_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key_definition) {
			listener.exitRecord_key_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key_definition) {
			return visitor.visitRecord_key_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_modeContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ACCESS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IS);
		} else {
			return this.getToken(cobolParser.IS, i);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_access_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccess_mode) {
			listener.enterAccess_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccess_mode) {
			listener.exitAccess_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccess_mode) {
			return visitor.visitAccess_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(cobolParser.RESERVE, 0); }
	public reserve_num(): Reserve_numContext {
		return this.getRuleContext(0, Reserve_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve) {
			listener.enterReserve(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve) {
			listener.exitReserve(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve) {
			return visitor.visitReserve(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserve_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve_num) {
			listener.enterReserve_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve_num) {
			listener.exitReserve_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve_num) {
			return visitor.visitReserve_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_delimiterContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(cobolParser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode { return this.getToken(cobolParser.STANDARD_1, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_delimiter; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_delimiter) {
			listener.enterRecord_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_delimiter) {
			listener.exitRecord_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_delimiter) {
			return visitor.visitRecord_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(cobolParser.PADDING, 0); }
	public pad_char(): Pad_charContext {
		return this.getRuleContext(0, Pad_charContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_padding; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPadding) {
			listener.enterPadding(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPadding) {
			listener.exitPadding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPadding) {
			return visitor.visitPadding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pad_charContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pad_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPad_char) {
			listener.enterPad_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPad_char) {
			listener.exitPad_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPad_char) {
			return visitor.visitPad_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORGANIZATION, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_organization; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOrganization) {
			listener.enterOrganization(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOrganization) {
			listener.exitOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOrganization) {
			return visitor.visitOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(cobolParser.LOCK, 0); }
	public lock_mode_definition(): Lock_mode_definitionContext {
		return this.getRuleContext(0, Lock_mode_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode) {
			return visitor.visitLock_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_mode_definitionContext extends ParserRuleContext {
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MANUAL, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOMATIC, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROLLBACK, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode_definition) {
			listener.enterLock_mode_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode_definition) {
			listener.exitLock_mode_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode_definition) {
			return visitor.visitLock_mode_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Code_setContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(cobolParser.CODE_SET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_code_set; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCode_set) {
			listener.enterCode_set(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCode_set) {
			listener.exitCode_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCode_set) {
			return visitor.visitCode_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_containsContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(cobolParser.BLOCK, 0); }
	public blocksize(): BlocksizeContext {
		return this.getRuleContext(0, BlocksizeContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public smallest_block(): Smallest_blockContext | undefined {
		return this.tryGetRuleContext(0, Smallest_blockContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_block_contains; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlock_contains) {
			listener.enterBlock_contains(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlock_contains) {
			listener.exitBlock_contains(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlock_contains) {
			return visitor.visitBlock_contains(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smallest_blockContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smallest_block; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmallest_block) {
			listener.enterSmallest_block(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmallest_block) {
			listener.exitSmallest_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmallest_block) {
			return visitor.visitSmallest_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlocksizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_blocksize; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlocksize) {
			listener.enterBlocksize(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlocksize) {
			listener.exitBlocksize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlocksize) {
			return visitor.visitBlocksize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_toContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(cobolParser.ASSIGN, 0); }
	public assign_to_definition(): Assign_to_definitionContext {
		return this.getRuleContext(0, Assign_to_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to) {
			listener.enterAssign_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to) {
			listener.exitAssign_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to) {
			return visitor.visitAssign_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_to_definitionContext extends ParserRuleContext {
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to_definition) {
			listener.enterAssign_to_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to_definition) {
			listener.exitAssign_to_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to_definition) {
			return visitor.visitAssign_to_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public DISK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISK, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_controlContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(cobolParser.I_O_CONTROL, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply(): ApplyContext[];
	public apply(i: number): ApplyContext;
	public apply(i?: number): ApplyContext | ApplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ApplyContext);
		} else {
			return this.getRuleContext(i, ApplyContext);
		}
	}
	public same(): SameContext[];
	public same(i: number): SameContext;
	public same(i?: number): SameContext | SameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SameContext);
		} else {
			return this.getRuleContext(i, SameContext);
		}
	}
	public rerun(): RerunContext[];
	public rerun(i: number): RerunContext;
	public rerun(i?: number): RerunContext | RerunContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RerunContext);
		} else {
			return this.getRuleContext(i, RerunContext);
		}
	}
	public multiple_file(): Multiple_fileContext[];
	public multiple_file(i: number): Multiple_fileContext;
	public multiple_file(i?: number): Multiple_fileContext | Multiple_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_fileContext);
		} else {
			return this.getRuleContext(i, Multiple_fileContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control) {
			listener.enterI_o_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control) {
			listener.exitI_o_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control) {
			return visitor.visitI_o_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_fileContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public multiple_file_definition(): Multiple_file_definitionContext[];
	public multiple_file_definition(i: number): Multiple_file_definitionContext;
	public multiple_file_definition(i?: number): Multiple_file_definitionContext | Multiple_file_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_file_definitionContext);
		} else {
			return this.getRuleContext(i, Multiple_file_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file) {
			listener.enterMultiple_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file) {
			listener.exitMultiple_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file) {
			return visitor.visitMultiple_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_definitionContext extends ParserRuleContext {
	public multiple_file_name(): Multiple_file_nameContext {
		return this.getRuleContext(0, Multiple_file_nameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITION, 0); }
	public pos_integer(): Pos_integerContext | undefined {
		return this.tryGetRuleContext(0, Pos_integerContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_definition) {
			listener.enterMultiple_file_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_definition) {
			listener.exitMultiple_file_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_definition) {
			return visitor.visitMultiple_file_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_name) {
			listener.enterMultiple_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_name) {
			listener.exitMultiple_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_name) {
			return visitor.visitMultiple_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos_integerContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pos_integer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPos_integer) {
			listener.enterPos_integer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPos_integer) {
			listener.exitPos_integer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPos_integer) {
			return visitor.visitPos_integer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(cobolParser.RERUN, 0); }
	public rerun_definition(): Rerun_definitionContext {
		return this.getRuleContext(0, Rerun_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EVERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun) {
			listener.enterRerun(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun) {
			listener.exitRerun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun) {
			return visitor.visitRerun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_definitionContext extends ParserRuleContext {
	public rerun_def_file(): Rerun_def_fileContext | undefined {
		return this.tryGetRuleContext(0, Rerun_def_fileContext);
	}
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public clock_count(): Clock_countContext | undefined {
		return this.tryGetRuleContext(0, Clock_countContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CLOCK_UNITS, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_definition) {
			listener.enterRerun_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_definition) {
			listener.exitRerun_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_definition) {
			return visitor.visitRerun_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Clock_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_clock_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClock_count) {
			listener.enterClock_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClock_count) {
			listener.exitClock_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClock_count) {
			return visitor.visitClock_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_name) {
			listener.enterCondition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_name) {
			listener.exitCondition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_name) {
			return visitor.visitCondition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_def_fileContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public rec_count(): Rec_countContext | undefined {
		return this.tryGetRuleContext(0, Rec_countContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def_file) {
			listener.enterRerun_def_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def_file) {
			listener.exitRerun_def_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def_file) {
			return visitor.visitRerun_def_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_count) {
			listener.enterRec_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_count) {
			listener.exitRec_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_count) {
			return visitor.visitRec_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(cobolParser.SAME, 0); }
	public same_area_file(): Same_area_fileContext[];
	public same_area_file(i: number): Same_area_fileContext;
	public same_area_file(i?: number): Same_area_fileContext | Same_area_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_area_fileContext);
		} else {
			return this.getRuleContext(i, Same_area_fileContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame) {
			listener.enterSame(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame) {
			listener.exitSame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame) {
			return visitor.visitSame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_area_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_area_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_area_file) {
			listener.enterSame_area_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_area_file) {
			listener.exitSame_area_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_area_file) {
			return visitor.visitSame_area_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyContext extends ParserRuleContext {
	public APPLY(): TerminalNode { return this.getToken(cobolParser.APPLY, 0); }
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply_definition(): Apply_definitionContext[];
	public apply_definition(i: number): Apply_definitionContext;
	public apply_definition(i?: number): Apply_definitionContext | Apply_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Apply_definitionContext);
		} else {
			return this.getRuleContext(i, Apply_definitionContext);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply) {
			listener.enterApply(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply) {
			listener.exitApply(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply) {
			return visitor.visitApply(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Apply_definitionContext extends ParserRuleContext {
	public DEFERRED_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFERRED_WRITE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTENSION, 0); }
	public extend_amt(): Extend_amtContext | undefined {
		return this.tryGetRuleContext(0, Extend_amtContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FILL_SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILL_SIZE, 0); }
	public LOCK_HOLDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK_HOLDING, 0); }
	public MASS_INSERT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MASS_INSERT, 0); }
	public PREALLOCATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREALLOCATION, 0); }
	public preall_amt(): Preall_amtContext | undefined {
		return this.tryGetRuleContext(0, Preall_amtContext);
	}
	public CONTIGUOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS, 0); }
	public CONTIGUOUS_BEST_TRY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
	public PRINT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINT_CONTROL, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WINDOW, 0); }
	public window_ptrs(): Window_ptrsContext | undefined {
		return this.tryGetRuleContext(0, Window_ptrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply_definition) {
			listener.enterApply_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply_definition) {
			listener.exitApply_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply_definition) {
			return visitor.visitApply_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_ptrsContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_window_ptrs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWindow_ptrs) {
			listener.enterWindow_ptrs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWindow_ptrs) {
			listener.exitWindow_ptrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWindow_ptrs) {
			return visitor.visitWindow_ptrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Preall_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_preall_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPreall_amt) {
			listener.enterPreall_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPreall_amt) {
			listener.exitPreall_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPreall_amt) {
			return visitor.visitPreall_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extend_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_extend_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExtend_amt) {
			listener.enterExtend_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExtend_amt) {
			listener.exitExtend_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExtend_amt) {
			return visitor.visitExtend_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_arithmetic_operatorContext);
	}
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_arithmetic_operatorContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_expression) {
			listener.enterArithmetic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_expression) {
			listener.exitArithmetic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_expression) {
			return visitor.visitArithmetic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Binary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	public STAR_(): TerminalNode[];
	public STAR_(i: number): TerminalNode;
	public STAR_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.STAR_);
		} else {
			return this.getToken(cobolParser.STAR_, i);
		}
	}
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_binary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBinary_arithmetic_operator) {
			listener.enterBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBinary_arithmetic_operator) {
			listener.exitBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBinary_arithmetic_operator) {
			return visitor.visitBinary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnary_arithmetic_operator) {
			listener.enterUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnary_arithmetic_operator) {
			listener.exitUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnary_arithmetic_operator) {
			return visitor.visitUnary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public sign_condition(): Sign_conditionContext | undefined {
		return this.tryGetRuleContext(0, Sign_conditionContext);
	}
	public success_failure_condition(): Success_failure_conditionContext | undefined {
		return this.tryGetRuleContext(0, Success_failure_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_expression) {
			listener.enterLogic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_expression) {
			listener.exitLogic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_expression) {
			return visitor.visitLogic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Success_failure_conditionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SUCCESS, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FAILURE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_success_failure_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSuccess_failure_condition) {
			listener.enterSuccess_failure_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSuccess_failure_condition) {
			listener.exitSuccess_failure_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSuccess_failure_condition) {
			return visitor.visitSuccess_failure_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public condition_operator(): Condition_operatorContext | undefined {
		return this.tryGetRuleContext(0, Condition_operatorContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_condition) {
			listener.enterLogic_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_condition) {
			listener.exitLogic_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_condition) {
			return visitor.visitLogic_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_operationContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_operation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_operation) {
			listener.enterLogic_operation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_operation) {
			listener.exitLogic_operation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_operation) {
			return visitor.visitLogic_operation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public sign_condition_name(): Sign_condition_nameContext {
		return this.getRuleContext(0, Sign_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition) {
			listener.enterSign_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition) {
			listener.exitSign_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition) {
			return visitor.visitSign_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_condition_nameContext extends ParserRuleContext {
	public POSITIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITIVE, 0); }
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEGATIVE, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition_name) {
			listener.enterSign_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition_name) {
			listener.exitSign_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition_name) {
			return visitor.visitSign_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_conditionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public class_condition_name(): Class_condition_nameContext {
		return this.getRuleContext(0, Class_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition) {
			listener.enterClass_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition) {
			listener.exitClass_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition) {
			return visitor.visitClass_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_condition_nameContext extends ParserRuleContext {
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC, 0); }
	public ALPHABETIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC, 0); }
	public ALPHABETIC_LOWER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_LOWER, 0); }
	public ALPHABETIC_UPPER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_UPPER, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition_name) {
			listener.enterClass_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition_name) {
			listener.exitClass_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition_name) {
			return visitor.visitClass_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_operatorContext extends ParserRuleContext {
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GREATER, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public GE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GE_, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LESS, 0); }
	public LE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LE_, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public GT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GT_, 0); }
	public LT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LT_, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THAN, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_operator) {
			listener.enterCondition_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_operator) {
			listener.exitCondition_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_operator) {
			return visitor.visitCondition_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identifier_resultContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public subscripting(): SubscriptingContext | undefined {
		return this.tryGetRuleContext(0, SubscriptingContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier_result; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier_result) {
			listener.enterIdentifier_result(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier_result) {
			listener.exitIdentifier_result(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier_result) {
			return visitor.visitIdentifier_result(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FUNCTION, 0); }
	public function_name(): Function_nameContext | undefined {
		return this.tryGetRuleContext(0, Function_nameContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public arguments(): ArgumentsContext | undefined {
		return this.tryGetRuleContext(0, ArgumentsContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentsContext extends ParserRuleContext {
	public subscripting(): SubscriptingContext {
		return this.getRuleContext(0, SubscriptingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arguments; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArguments) {
			listener.enterArguments(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArguments) {
			listener.exitArguments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArguments) {
			return visitor.visitArguments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubscriptingContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALL);
		} else {
			return this.getToken(cobolParser.ALL, i);
		}
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subscripting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubscripting) {
			listener.enterSubscripting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubscripting) {
			listener.exitSubscripting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubscripting) {
			return visitor.visitSubscripting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reference_modificationContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public leftmost_character_position(): Leftmost_character_positionContext {
		return this.getRuleContext(0, Leftmost_character_positionContext);
	}
	public COLON_(): TerminalNode { return this.getToken(cobolParser.COLON_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public length(): LengthContext | undefined {
		return this.tryGetRuleContext(0, LengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reference_modification; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReference_modification) {
			listener.enterReference_modification(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReference_modification) {
			listener.exitReference_modification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReference_modification) {
			return visitor.visitReference_modification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Leftmost_character_positionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_leftmost_character_position; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLeftmost_character_position) {
			listener.enterLeftmost_character_position(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLeftmost_character_position) {
			listener.exitLeftmost_character_position(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLeftmost_character_position) {
			return visitor.visitLeftmost_character_position(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_length; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLength) {
			listener.enterLength(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLength) {
			listener.exitLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLength) {
			return visitor.visitLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_function_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFunction_name) {
			listener.enterFunction_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFunction_name) {
			listener.exitFunction_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFunction_name) {
			return visitor.visitFunction_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


