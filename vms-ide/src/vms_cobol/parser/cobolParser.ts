// Generated from src/vms_cobol/parser/cobol.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { cobolListener } from "./cobolListener";
import { cobolVisitor } from "./cobolVisitor";


export class cobolParser extends Parser {
	public static readonly DECLARATIVES_IN_A_AREA = 1;
	public static readonly END_IN_A_AREA = 2;
	public static readonly IDENTIFICATION_IN_A_AREA = 3;
	public static readonly ACCEPT = 4;
	public static readonly ACCESS = 5;
	public static readonly ADD = 6;
	public static readonly AFTER = 7;
	public static readonly ALL = 8;
	public static readonly ALPHA = 9;
	public static readonly ALPHABET = 10;
	public static readonly ALPHABETIC = 11;
	public static readonly ALPHABETIC_LOWER = 12;
	public static readonly ALPHABETIC_UPPER = 13;
	public static readonly ALSO = 14;
	public static readonly ALTER = 15;
	public static readonly ALTERNATE = 16;
	public static readonly AND = 17;
	public static readonly APPLY = 18;
	public static readonly ARE = 19;
	public static readonly AREA = 20;
	public static readonly AREAS = 21;
	public static readonly ARGUMENT_NUMBER = 22;
	public static readonly ARGUMENT_VALUE = 23;
	public static readonly ARITHMETIC = 24;
	public static readonly ASCENDING = 25;
	public static readonly ASCII = 26;
	public static readonly ASSIGN = 27;
	public static readonly AT = 28;
	public static readonly AUTHOR = 29;
	public static readonly AUTO = 30;
	public static readonly AUTOMATIC = 31;
	public static readonly AUTOTERMINATE = 32;
	public static readonly BACKGROUND_COLOR = 33;
	public static readonly BEFORE = 34;
	public static readonly BELL = 35;
	public static readonly BINARY = 36;
	public static readonly BINARY_CHAR = 37;
	public static readonly BINARY_DOUBLE = 38;
	public static readonly BINARY_LONG = 39;
	public static readonly BINARY_SHORT = 40;
	public static readonly BLANK = 41;
	public static readonly BLINK = 42;
	public static readonly BLINKING = 43;
	public static readonly BLOCK = 44;
	public static readonly BOLD = 45;
	public static readonly BOTTOM = 46;
	public static readonly BY = 47;
	public static readonly C01 = 48;
	public static readonly CALL = 49;
	public static readonly CANCEL = 50;
	public static readonly CARD_READER = 51;
	public static readonly CF = 52;
	public static readonly CH = 53;
	public static readonly CHARACTER = 54;
	public static readonly CHARACTERS = 55;
	public static readonly CLASS = 56;
	public static readonly CLOCK_UNITS = 57;
	public static readonly CLOSE = 58;
	public static readonly CODE = 59;
	public static readonly CODE_SET = 60;
	public static readonly COLLATING = 61;
	public static readonly COLUMN = 62;
	public static readonly COMMA = 63;
	public static readonly COMMON = 64;
	public static readonly COMP = 65;
	public static readonly COMPUTATIONAL = 66;
	public static readonly COMPUTATIONAL_1 = 67;
	public static readonly COMPUTATIONAL_2 = 68;
	public static readonly COMPUTATIONAL_3 = 69;
	public static readonly COMPUTATIONAL_4 = 70;
	public static readonly COMPUTATIONAL_5 = 71;
	public static readonly COMPUTATIONAL_X = 72;
	public static readonly COMPUTE = 73;
	public static readonly COMP_1 = 74;
	public static readonly COMP_2 = 75;
	public static readonly COMP_3 = 76;
	public static readonly COMP_4 = 77;
	public static readonly COMP_5 = 78;
	public static readonly COMP_X = 79;
	public static readonly CONFIGURATION = 80;
	public static readonly CONSOLE = 81;
	public static readonly CONTAINS = 82;
	public static readonly CONTIGUOUS = 83;
	public static readonly CONTIGUOUS_BEST_TRY = 84;
	public static readonly CONTINUE = 85;
	public static readonly CONTROL = 86;
	public static readonly CONTROLS = 87;
	public static readonly CONVERSION = 88;
	public static readonly CONVERTING = 89;
	public static readonly COPY = 90;
	public static readonly CRT = 91;
	public static readonly CURRENCY = 92;
	public static readonly CURRENT = 93;
	public static readonly CURSOR = 94;
	public static readonly DATA = 95;
	public static readonly DATE = 96;
	public static readonly DATE_COMPILED = 97;
	public static readonly DATE_WRITTEN = 98;
	public static readonly DAY = 99;
	public static readonly DAY_OF_WEEK = 100;
	public static readonly DE = 101;
	public static readonly DEBUGGING = 102;
	public static readonly DECIMAL_POINT = 103;
	public static readonly DECLARATIVES = 104;
	public static readonly DEFAULT = 105;
	public static readonly DEFERRED_WRITE = 106;
	public static readonly DELETE = 107;
	public static readonly DELIMITER = 108;
	public static readonly DEPENDING = 109;
	public static readonly DESCENDING = 110;
	public static readonly DETAIL = 111;
	public static readonly DISK = 112;
	public static readonly DISPLAY = 113;
	public static readonly DIVIDE = 114;
	public static readonly DIVISION = 115;
	public static readonly DOWN = 116;
	public static readonly DUPLICATES = 117;
	public static readonly DYNAMIC = 118;
	public static readonly EBCDIC = 119;
	public static readonly ECHO = 120;
	public static readonly EDITING = 121;
	public static readonly END = 122;
	public static readonly END_ACCEPT = 123;
	public static readonly END_ADD = 124;
	public static readonly END_CALL = 125;
	public static readonly END_COMPUTE = 126;
	public static readonly END_DELETE = 127;
	public static readonly END_DIVIDE = 128;
	public static readonly END_DISPLAY = 129;
	public static readonly END_EVALUATE = 130;
	public static readonly END_IF = 131;
	public static readonly END_MULTIPLY = 132;
	public static readonly END_OF_PAGE = 133;
	public static readonly END_PERFORM = 134;
	public static readonly END_READ = 135;
	public static readonly END_RETURN = 136;
	public static readonly END_REWRITE = 137;
	public static readonly END_SEARCH = 138;
	public static readonly END_START = 139;
	public static readonly END_STRING = 140;
	public static readonly END_SUBTRACT = 141;
	public static readonly END_UNSTRING = 142;
	public static readonly END_WRITE = 143;
	public static readonly ENVIRONMENT = 144;
	public static readonly ENVIRONMENT_NAME = 145;
	public static readonly ENVIRONMENT_VALUE = 146;
	public static readonly EOL = 147;
	public static readonly EOS = 148;
	public static readonly EQUAL = 149;
	public static readonly ERASE = 150;
	public static readonly ERROR = 151;
	public static readonly EVALUATE = 152;
	public static readonly EVERY = 153;
	public static readonly EXCEPTION = 154;
	public static readonly EXCLUSIVE = 155;
	public static readonly EXIT = 156;
	public static readonly EXTEND = 157;
	public static readonly EXTENSION = 158;
	public static readonly EXTERNAL = 159;
	public static readonly FAILURE = 160;
	public static readonly FD = 161;
	public static readonly FILE = 162;
	public static readonly FILE_CONTROL = 163;
	public static readonly FILE_ID = 164;
	public static readonly FILLER = 165;
	public static readonly FILL_SIZE = 166;
	public static readonly FINAL = 167;
	public static readonly FIRST = 168;
	public static readonly FLOAT_EXTENDED = 169;
	public static readonly FLOAT_LONG = 170;
	public static readonly FLOAT_SHORT = 171;
	public static readonly FOOTING = 172;
	public static readonly FOR = 173;
	public static readonly FOREGROUND_COLOR = 174;
	public static readonly FROM = 175;
	public static readonly FULL = 176;
	public static readonly FUNCTION = 177;
	public static readonly GENERATE = 178;
	public static readonly GIVING = 179;
	public static readonly GLOBAL = 180;
	public static readonly GO = 181;
	public static readonly GREATER = 182;
	public static readonly GROUP = 183;
	public static readonly HEADING = 184;
	public static readonly HIGHLIGHT = 185;
	public static readonly HIGH_VALUE = 186;
	public static readonly HIGH_VALUES = 187;
	public static readonly I64 = 188;
	public static readonly ID = 189;
	public static readonly IDENT = 190;
	public static readonly IDENTIFICATION = 191;
	public static readonly IF = 192;
	public static readonly IN = 193;
	public static readonly INDEX = 194;
	public static readonly INDEXED = 195;
	public static readonly INDICATE = 196;
	public static readonly INITIAL = 197;
	public static readonly INITIALIZE = 198;
	public static readonly INITIATE = 199;
	public static readonly INPUT = 200;
	public static readonly INPUT_OUTPUT = 201;
	public static readonly INSPECT = 202;
	public static readonly INSTALLATION = 203;
	public static readonly INVALID = 204;
	public static readonly IS = 205;
	public static readonly I_O = 206;
	public static readonly I_O_CONTROL = 207;
	public static readonly JUST = 208;
	public static readonly JUSTIFIED = 209;
	public static readonly KEY = 210;
	public static readonly LABEL = 211;
	public static readonly LAST = 212;
	public static readonly LEADING = 213;
	public static readonly LEFT = 214;
	public static readonly LESS = 215;
	public static readonly LIMIT = 216;
	public static readonly LIMITS = 217;
	public static readonly LINAGE = 218;
	public static readonly LINE = 219;
	public static readonly LINES = 220;
	public static readonly LINE_PRINTER = 221;
	public static readonly LINKAGE = 222;
	public static readonly LOCK = 223;
	public static readonly LOCK_HOLDING = 224;
	public static readonly LOWLIGHT = 225;
	public static readonly LOW_VALUE = 226;
	public static readonly LOW_VALUES = 227;
	public static readonly MANUAL = 228;
	public static readonly MASS_INSERT = 229;
	public static readonly MEMORY = 230;
	public static readonly MERGE = 231;
	public static readonly MODE = 232;
	public static readonly MODULES = 233;
	public static readonly MOVE = 234;
	public static readonly MULTIPLE = 235;
	public static readonly MULTIPLY = 236;
	public static readonly NATIVE = 237;
	public static readonly NEGATIVE = 238;
	public static readonly NEXT = 239;
	public static readonly NO = 240;
	public static readonly NOT = 241;
	public static readonly NUMBER = 242;
	public static readonly NUMERIC = 243;
	public static readonly OBJECT_COMPUTER = 244;
	public static readonly OCCURS = 245;
	public static readonly OF = 246;
	public static readonly OFF = 247;
	public static readonly OMITTED = 248;
	public static readonly ON = 249;
	public static readonly OPEN = 250;
	public static readonly OPTIONAL = 251;
	public static readonly OPTIONS = 252;
	public static readonly OR = 253;
	public static readonly ORGANIZATION = 254;
	public static readonly OUTPUT = 255;
	public static readonly OVERFLOW = 256;
	public static readonly PACKED_DECIMAL = 257;
	public static readonly PADDING = 258;
	public static readonly PAGE = 259;
	public static readonly PAPER_TAPE_PUNCH = 260;
	public static readonly PAPER_TAPE_READER = 261;
	public static readonly PERFORM = 262;
	public static readonly PF = 263;
	public static readonly PH = 264;
	public static readonly PIC = 265;
	public static readonly PICTURE = 266;
	public static readonly PLUS = 267;
	public static readonly POINTER = 268;
	public static readonly POINTER_64 = 269;
	public static readonly POSITION = 270;
	public static readonly POSITIVE = 271;
	public static readonly PREALLOCATION = 272;
	public static readonly PRINTER = 273;
	public static readonly PRINT_CONTROL = 274;
	public static readonly PROCEDURE = 275;
	public static readonly PROGRAM = 276;
	public static readonly PROGRAM_ID = 277;
	public static readonly PROTECTED = 278;
	public static readonly QUOTE = 279;
	public static readonly QUOTES = 280;
	public static readonly RANDOM = 281;
	public static readonly RD = 282;
	public static readonly READ = 283;
	public static readonly RECORD = 284;
	public static readonly RECORDS = 285;
	public static readonly REDEFINES = 286;
	public static readonly REEL = 287;
	public static readonly REFERENCE = 288;
	public static readonly RELATIVE = 289;
	public static readonly RELEASE = 290;
	public static readonly RENAMES = 291;
	public static readonly REPLACE = 292;
	public static readonly REPLACING = 293;
	public static readonly REPORT = 294;
	public static readonly REPORTING = 295;
	public static readonly REPORTS = 296;
	public static readonly REQUIRED = 297;
	public static readonly RERUN = 298;
	public static readonly RESERVE = 299;
	public static readonly RESET = 300;
	public static readonly RETURN = 301;
	public static readonly REVERSED = 302;
	public static readonly REVERSE_VIDEO = 303;
	public static readonly REWRITE = 304;
	public static readonly RF = 305;
	public static readonly RH = 306;
	public static readonly RIGHT = 307;
	public static readonly ROLLBACK = 308;
	public static readonly SAME = 309;
	public static readonly SCREEN = 310;
	public static readonly SD = 311;
	public static readonly SEARCH = 312;
	public static readonly SECTION = 313;
	public static readonly SECURE = 314;
	public static readonly SECURITY = 315;
	public static readonly SEGMENT_LIMIT = 316;
	public static readonly SELECT = 317;
	public static readonly SEPARATE = 318;
	public static readonly SEQUENCE = 319;
	public static readonly SEQUENTIAL = 320;
	public static readonly SET = 321;
	public static readonly SIGN = 322;
	public static readonly SIGNED = 323;
	public static readonly SIZE = 324;
	public static readonly SORT = 325;
	public static readonly SORT_MERGE = 326;
	public static readonly SOURCE = 327;
	public static readonly SOURCE_COMPUTER = 328;
	public static readonly SPACE = 329;
	public static readonly SPACES = 330;
	public static readonly SPECIAL_NAMES = 331;
	public static readonly STANDARD = 332;
	public static readonly STANDARD_1 = 333;
	public static readonly STANDARD_2 = 334;
	public static readonly START = 335;
	public static readonly STATUS = 336;
	public static readonly STOP = 337;
	public static readonly STRING = 338;
	public static readonly SUBTRACT = 339;
	public static readonly SUCCESS = 340;
	public static readonly SUM = 341;
	public static readonly SUPPRESS = 342;
	public static readonly SWITCH = 343;
	public static readonly SYMBOL = 344;
	public static readonly SYMBOLIC = 345;
	public static readonly SYNC = 346;
	public static readonly SYNCHRONIZED = 347;
	public static readonly SYSERR = 348;
	public static readonly SYSIN = 349;
	public static readonly SYSOUT = 350;
	public static readonly TALLYING = 351;
	public static readonly TAPE = 352;
	public static readonly TERMINATE = 353;
	public static readonly THAN = 354;
	public static readonly THROUGH = 355;
	public static readonly THRU = 356;
	public static readonly TIME = 357;
	public static readonly TIMES = 358;
	public static readonly TO = 359;
	public static readonly TOP = 360;
	public static readonly TRAILING = 361;
	public static readonly TRUE = 362;
	public static readonly TYPE = 363;
	public static readonly UNDERLINE = 364;
	public static readonly UNDERLINED = 365;
	public static readonly UNIT = 366;
	public static readonly UNLOCK = 367;
	public static readonly UNSIGNED = 368;
	public static readonly UNSTRING = 369;
	public static readonly UP = 370;
	public static readonly UPON = 371;
	public static readonly USAGE = 372;
	public static readonly USE = 373;
	public static readonly USING = 374;
	public static readonly VALUE = 375;
	public static readonly VALUES = 376;
	public static readonly VARYING = 377;
	public static readonly VAX = 378;
	public static readonly WHEN = 379;
	public static readonly WINDOW = 380;
	public static readonly WITH = 381;
	public static readonly WORDS = 382;
	public static readonly WORKING_STORAGE = 383;
	public static readonly WRITE = 384;
	public static readonly YYYYDDD = 385;
	public static readonly YYYYMMDD = 386;
	public static readonly ZERO = 387;
	public static readonly ZEROES = 388;
	public static readonly ZEROS = 389;
	public static readonly ROUNDED = 390;
	public static readonly CORRESPONDING = 391;
	public static readonly CORR = 392;
	public static readonly PROCEED = 393;
	public static readonly CONTENT = 394;
	public static readonly DESCRIPTOR = 395;
	public static readonly REMOVAL = 396;
	public static readonly REWIND = 397;
	public static readonly ADVANCING = 398;
	public static readonly INTO = 399;
	public static readonly REMAINDER = 400;
	public static readonly START_SLASH_ = 401;
	public static readonly START_STAR_ = 402;
	public static readonly EXCLAM_ = 403;
	public static readonly UNDER_ = 404;
	public static readonly PLUS_ = 405;
	public static readonly MINUS_ = 406;
	public static readonly STAR_ = 407;
	public static readonly SLASH_ = 408;
	public static readonly COMMA_ = 409;
	public static readonly SEMI_ = 410;
	public static readonly COLON_ = 411;
	public static readonly EQUAL_ = 412;
	public static readonly LT_ = 413;
	public static readonly LE_ = 414;
	public static readonly GE_ = 415;
	public static readonly GT_ = 416;
	public static readonly LPAREN_ = 417;
	public static readonly RPAREN_ = 418;
	public static readonly LBRACK_ = 419;
	public static readonly RBRACK_ = 420;
	public static readonly POINTER_ = 421;
	public static readonly ATP_ = 422;
	public static readonly DOT_ = 423;
	public static readonly LCURLY_ = 424;
	public static readonly RCURLY_ = 425;
	public static readonly STRING_LITERAL = 426;
	public static readonly NUMERIC_LITERAL = 427;
	public static readonly HEX_LITERAL = 428;
	public static readonly USER_DEFINED_WORD = 429;
	public static readonly START_FOUR_SPACES = 430;
	public static readonly WHITESPACE = 431;
	public static readonly NEWLINE = 432;
	public static readonly RULE_cobol_source = 0;
	public static readonly RULE_figurative_constant = 1;
	public static readonly RULE_separator = 2;
	public static readonly RULE_arithmetic_separator = 3;
	public static readonly RULE_line_comment = 4;
	public static readonly RULE_program = 5;
	public static readonly RULE_procedure_division = 6;
	public static readonly RULE_end_program = 7;
	public static readonly RULE_procedure_division_header = 8;
	public static readonly RULE_section = 9;
	public static readonly RULE_declaratives = 10;
	public static readonly RULE_declaratives_section = 11;
	public static readonly RULE_declarative_paragraph = 12;
	public static readonly RULE_paragraph = 13;
	public static readonly RULE_sentense = 14;
	public static readonly RULE_use_statement = 15;
	public static readonly RULE_group_data_name = 16;
	public static readonly RULE_use_on = 17;
	public static readonly RULE_section_header = 18;
	public static readonly RULE_paragraph_name = 19;
	public static readonly RULE_section_name = 20;
	public static readonly RULE_using = 21;
	public static readonly RULE_giving = 22;
	public static readonly RULE_procedure_test_line = 23;
	public static readonly RULE_statement = 24;
	public static readonly RULE_divide_statement = 25;
	public static readonly RULE_divide_statement_form1 = 26;
	public static readonly RULE_divide_statement_form2 = 27;
	public static readonly RULE_remaind = 28;
	public static readonly RULE_divide_num = 29;
	public static readonly RULE_display_statement = 30;
	public static readonly RULE_display_statement_form1 = 31;
	public static readonly RULE_display_statement_form2 = 32;
	public static readonly RULE_display_statement_form3 = 33;
	public static readonly RULE_display_statement_form4 = 34;
	public static readonly RULE_src_item = 35;
	public static readonly RULE_display_upon = 36;
	public static readonly RULE_disp_f3_line = 37;
	public static readonly RULE_disp_f3_column = 38;
	public static readonly RULE_display_form1_clause = 39;
	public static readonly RULE_display_form2_clause = 40;
	public static readonly RULE_at_line_number = 41;
	public static readonly RULE_at_column_number = 42;
	public static readonly RULE_out_dest = 43;
	public static readonly RULE_delete_statement = 44;
	public static readonly RULE_continue_statement = 45;
	public static readonly RULE_compute_statement = 46;
	public static readonly RULE_close_statement = 47;
	public static readonly RULE_close_params = 48;
	public static readonly RULE_cancel_statement = 49;
	public static readonly RULE_call_statement = 50;
	public static readonly RULE_call_giving = 51;
	public static readonly RULE_call_using = 52;
	public static readonly RULE_using_arg = 53;
	public static readonly RULE_using_prefix = 54;
	public static readonly RULE_argument = 55;
	public static readonly RULE_prog_name = 56;
	public static readonly RULE_alter_statement = 57;
	public static readonly RULE_alter_new_proc = 58;
	public static readonly RULE_alter_proc = 59;
	public static readonly RULE_add_statement = 60;
	public static readonly RULE_add_grp = 61;
	public static readonly RULE_add_num = 62;
	public static readonly RULE_accept_statement = 63;
	public static readonly RULE_on_exception_variants = 64;
	public static readonly RULE_at_end_variants = 65;
	public static readonly RULE_on_size_variants = 66;
	public static readonly RULE_on_key_variants = 67;
	public static readonly RULE_accept_form6 = 68;
	public static readonly RULE_accept6_item = 69;
	public static readonly RULE_accept_form1 = 70;
	public static readonly RULE_accept_form2 = 71;
	public static readonly RULE_accept_form3 = 72;
	public static readonly RULE_accept_form4 = 73;
	public static readonly RULE_accept_form5 = 74;
	public static readonly RULE_accept_at = 75;
	public static readonly RULE_accept_at_line = 76;
	public static readonly RULE_accept_at_column = 77;
	public static readonly RULE_accept_form4_clause = 78;
	public static readonly RULE_accept_form3_clause = 79;
	public static readonly RULE_key_dest_item = 80;
	public static readonly RULE_def_value = 81;
	public static readonly RULE_protected_value = 82;
	public static readonly RULE_prot_fill_lit = 83;
	public static readonly RULE_prot_size_value = 84;
	public static readonly RULE_number_value = 85;
	public static readonly RULE_date_time = 86;
	public static readonly RULE_dest_item = 87;
	public static readonly RULE_input_source = 88;
	public static readonly RULE_at_end = 89;
	public static readonly RULE_on_exception = 90;
	public static readonly RULE_on_size = 91;
	public static readonly RULE_on_key = 92;
	public static readonly RULE_data_division = 93;
	public static readonly RULE_file_section = 94;
	public static readonly RULE_working_storage_section = 95;
	public static readonly RULE_linkage_section = 96;
	public static readonly RULE_report_section = 97;
	public static readonly RULE_screen_section = 98;
	public static readonly RULE_file_description_entry = 99;
	public static readonly RULE_sort_merge_file_description_entry = 100;
	public static readonly RULE_report_description_entry = 101;
	public static readonly RULE_fd_clause = 102;
	public static readonly RULE_record_description_entry = 103;
	public static readonly RULE_data_description_entry = 104;
	public static readonly RULE_level_number = 105;
	public static readonly RULE_data_description_clause = 106;
	public static readonly RULE_renames = 107;
	public static readonly RULE_rename_start = 108;
	public static readonly RULE_rename_end = 109;
	public static readonly RULE_value_is = 110;
	public static readonly RULE_value_is_definition = 111;
	public static readonly RULE_value_is_definition_part = 112;
	public static readonly RULE_value_is_definition_thru = 113;
	public static readonly RULE_external_name = 114;
	public static readonly RULE_ref_data_name = 115;
	public static readonly RULE_value_is_literal = 116;
	public static readonly RULE_occurs = 117;
	public static readonly RULE_indexed_by = 118;
	public static readonly RULE_ind_name = 119;
	public static readonly RULE_key_is = 120;
	public static readonly RULE_key_name = 121;
	public static readonly RULE_times_definition = 122;
	public static readonly RULE_table_size = 123;
	public static readonly RULE_min_times = 124;
	public static readonly RULE_max_times = 125;
	public static readonly RULE_report_group_description_entry = 126;
	public static readonly RULE_report_group_data_description = 127;
	public static readonly RULE_report_group_data_description_clause = 128;
	public static readonly RULE_sign_is = 129;
	public static readonly RULE_sum = 130;
	public static readonly RULE_control_foot_name = 131;
	public static readonly RULE_detail_report_group_name = 132;
	public static readonly RULE_sum_name = 133;
	public static readonly RULE_source_name = 134;
	public static readonly RULE_column_number = 135;
	public static readonly RULE_type_is_definition = 136;
	public static readonly RULE_type_control_name = 137;
	public static readonly RULE_next_group_definition = 138;
	public static readonly RULE_line_num_definition = 139;
	public static readonly RULE_line_num = 140;
	public static readonly RULE_rd_clause = 141;
	public static readonly RULE_footing_line_rd = 142;
	public static readonly RULE_last_detail_line = 143;
	public static readonly RULE_first_detail_line = 144;
	public static readonly RULE_heading_line = 145;
	public static readonly RULE_page_size_rd = 146;
	public static readonly RULE_control_name = 147;
	public static readonly RULE_report_code = 148;
	public static readonly RULE_usage = 149;
	public static readonly RULE_usage_definition = 150;
	public static readonly RULE_picture = 151;
	public static readonly RULE_character_string = 152;
	public static readonly RULE_char_str_part = 153;
	public static readonly RULE_other_data_item = 154;
	public static readonly RULE_data_name = 155;
	public static readonly RULE_sd_clause = 156;
	public static readonly RULE_report_is = 157;
	public static readonly RULE_report_name = 158;
	public static readonly RULE_linage = 159;
	public static readonly RULE_bottom_lines = 160;
	public static readonly RULE_top_lines = 161;
	public static readonly RULE_footing_line = 162;
	public static readonly RULE_page_size = 163;
	public static readonly RULE_data_rec = 164;
	public static readonly RULE_rec_name = 165;
	public static readonly RULE_value_of_id = 166;
	public static readonly RULE_value_of_id_definition = 167;
	public static readonly RULE_label = 168;
	public static readonly RULE_record = 169;
	public static readonly RULE_record_definition = 170;
	public static readonly RULE_depending_item = 171;
	public static readonly RULE_shortest_rec = 172;
	public static readonly RULE_longest_rec = 173;
	public static readonly RULE_screen_description_entry = 174;
	public static readonly RULE_screen_name = 175;
	public static readonly RULE_screen_description_clause = 176;
	public static readonly RULE_scr_pic_using = 177;
	public static readonly RULE_scr_pic_from = 178;
	public static readonly RULE_scr_pic_to = 179;
	public static readonly RULE_nonnumeric_literal = 180;
	public static readonly RULE_src_number = 181;
	public static readonly RULE_color_num = 182;
	public static readonly RULE_identification_division = 183;
	public static readonly RULE_identification_division_paragraph = 184;
	public static readonly RULE_program_id = 185;
	public static readonly RULE_program_name = 186;
	public static readonly RULE_is_program = 187;
	public static readonly RULE_with_ident = 188;
	public static readonly RULE_ident_string = 189;
	public static readonly RULE_comment_entry = 190;
	public static readonly RULE_author = 191;
	public static readonly RULE_installation = 192;
	public static readonly RULE_date_written = 193;
	public static readonly RULE_date_compiled = 194;
	public static readonly RULE_security = 195;
	public static readonly RULE_options_ = 196;
	public static readonly RULE_arithmetic = 197;
	public static readonly RULE_environment_division = 198;
	public static readonly RULE_configuration_section = 199;
	public static readonly RULE_input_output_section = 200;
	public static readonly RULE_source_computer = 201;
	public static readonly RULE_computer_type = 202;
	public static readonly RULE_with_debugging = 203;
	public static readonly RULE_object_computer = 204;
	public static readonly RULE_memory_size = 205;
	public static readonly RULE_memory_size_amount = 206;
	public static readonly RULE_memory_size_unit = 207;
	public static readonly RULE_program_collating = 208;
	public static readonly RULE_alpha_name = 209;
	public static readonly RULE_segment_limit = 210;
	public static readonly RULE_segment_number = 211;
	public static readonly RULE_special_names = 212;
	public static readonly RULE_special_names_content = 213;
	public static readonly RULE_qualified_data_item = 214;
	public static readonly RULE_currency = 215;
	public static readonly RULE_currency_definition = 216;
	public static readonly RULE_literal_7 = 217;
	public static readonly RULE_literal_8 = 218;
	public static readonly RULE_class_ = 219;
	public static readonly RULE_class_name = 220;
	public static readonly RULE_user_class = 221;
	public static readonly RULE_symbolic_chars = 222;
	public static readonly RULE_symb_ch_definition = 223;
	public static readonly RULE_symb_ch_def_clause = 224;
	public static readonly RULE_symb_ch_def_in_alphabet = 225;
	public static readonly RULE_symbol_char = 226;
	public static readonly RULE_char_val = 227;
	public static readonly RULE_alphabet = 228;
	public static readonly RULE_alpha_value = 229;
	public static readonly RULE_user_alpha = 230;
	public static readonly RULE_first_literal = 231;
	public static readonly RULE_last_literal = 232;
	public static readonly RULE_same_literal = 233;
	public static readonly RULE_switch_ = 234;
	public static readonly RULE_switch_clause_on = 235;
	public static readonly RULE_switch_clause_off = 236;
	public static readonly RULE_cond_name = 237;
	public static readonly RULE_switch_name = 238;
	public static readonly RULE_switch_num = 239;
	public static readonly RULE_top_of_page_name = 240;
	public static readonly RULE_predefined_device = 241;
	public static readonly RULE_device_name = 242;
	public static readonly RULE_arg_env = 243;
	public static readonly RULE_arg_env_name = 244;
	public static readonly RULE_file_control = 245;
	public static readonly RULE_select = 246;
	public static readonly RULE_file_status = 247;
	public static readonly RULE_file_stat = 248;
	public static readonly RULE_record_key = 249;
	public static readonly RULE_record_key_definition = 250;
	public static readonly RULE_access_mode = 251;
	public static readonly RULE_reserve = 252;
	public static readonly RULE_reserve_num = 253;
	public static readonly RULE_record_delimiter = 254;
	public static readonly RULE_padding = 255;
	public static readonly RULE_pad_char = 256;
	public static readonly RULE_organization = 257;
	public static readonly RULE_lock_mode = 258;
	public static readonly RULE_lock_mode_definition = 259;
	public static readonly RULE_code_set = 260;
	public static readonly RULE_block_contains = 261;
	public static readonly RULE_smallest_block = 262;
	public static readonly RULE_blocksize = 263;
	public static readonly RULE_assign_to = 264;
	public static readonly RULE_assign_to_definition = 265;
	public static readonly RULE_file_spec = 266;
	public static readonly RULE_file_name = 267;
	public static readonly RULE_i_o_control = 268;
	public static readonly RULE_multiple_file = 269;
	public static readonly RULE_multiple_file_definition = 270;
	public static readonly RULE_multiple_file_name = 271;
	public static readonly RULE_pos_integer = 272;
	public static readonly RULE_rerun = 273;
	public static readonly RULE_rerun_definition = 274;
	public static readonly RULE_clock_count = 275;
	public static readonly RULE_condition_name = 276;
	public static readonly RULE_rerun_def_file = 277;
	public static readonly RULE_rec_count = 278;
	public static readonly RULE_same = 279;
	public static readonly RULE_same_area_file = 280;
	public static readonly RULE_apply = 281;
	public static readonly RULE_apply_definition = 282;
	public static readonly RULE_window_ptrs = 283;
	public static readonly RULE_preall_amt = 284;
	public static readonly RULE_extend_amt = 285;
	public static readonly RULE_arithmetic_expression = 286;
	public static readonly RULE_constant = 287;
	public static readonly RULE_binary_arithmetic_operator = 288;
	public static readonly RULE_unary_arithmetic_operator = 289;
	public static readonly RULE_logic_expression = 290;
	public static readonly RULE_success_failure_condition = 291;
	public static readonly RULE_logic_condition = 292;
	public static readonly RULE_logic_operation = 293;
	public static readonly RULE_sign_condition = 294;
	public static readonly RULE_sign_condition_name = 295;
	public static readonly RULE_class_condition = 296;
	public static readonly RULE_class_condition_name = 297;
	public static readonly RULE_condition_operator = 298;
	public static readonly RULE_identifier_result = 299;
	public static readonly RULE_identifier = 300;
	public static readonly RULE_arguments = 301;
	public static readonly RULE_subscripting = 302;
	public static readonly RULE_reference_modification = 303;
	public static readonly RULE_leftmost_character_position = 304;
	public static readonly RULE_length = 305;
	public static readonly RULE_function_name = 306;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"cobol_source", "figurative_constant", "separator", "arithmetic_separator", 
		"line_comment", "program", "procedure_division", "end_program", "procedure_division_header", 
		"section", "declaratives", "declaratives_section", "declarative_paragraph", 
		"paragraph", "sentense", "use_statement", "group_data_name", "use_on", 
		"section_header", "paragraph_name", "section_name", "using", "giving", 
		"procedure_test_line", "statement", "divide_statement", "divide_statement_form1", 
		"divide_statement_form2", "remaind", "divide_num", "display_statement", 
		"display_statement_form1", "display_statement_form2", "display_statement_form3", 
		"display_statement_form4", "src_item", "display_upon", "disp_f3_line", 
		"disp_f3_column", "display_form1_clause", "display_form2_clause", "at_line_number", 
		"at_column_number", "out_dest", "delete_statement", "continue_statement", 
		"compute_statement", "close_statement", "close_params", "cancel_statement", 
		"call_statement", "call_giving", "call_using", "using_arg", "using_prefix", 
		"argument", "prog_name", "alter_statement", "alter_new_proc", "alter_proc", 
		"add_statement", "add_grp", "add_num", "accept_statement", "on_exception_variants", 
		"at_end_variants", "on_size_variants", "on_key_variants", "accept_form6", 
		"accept6_item", "accept_form1", "accept_form2", "accept_form3", "accept_form4", 
		"accept_form5", "accept_at", "accept_at_line", "accept_at_column", "accept_form4_clause", 
		"accept_form3_clause", "key_dest_item", "def_value", "protected_value", 
		"prot_fill_lit", "prot_size_value", "number_value", "date_time", "dest_item", 
		"input_source", "at_end", "on_exception", "on_size", "on_key", "data_division", 
		"file_section", "working_storage_section", "linkage_section", "report_section", 
		"screen_section", "file_description_entry", "sort_merge_file_description_entry", 
		"report_description_entry", "fd_clause", "record_description_entry", "data_description_entry", 
		"level_number", "data_description_clause", "renames", "rename_start", 
		"rename_end", "value_is", "value_is_definition", "value_is_definition_part", 
		"value_is_definition_thru", "external_name", "ref_data_name", "value_is_literal", 
		"occurs", "indexed_by", "ind_name", "key_is", "key_name", "times_definition", 
		"table_size", "min_times", "max_times", "report_group_description_entry", 
		"report_group_data_description", "report_group_data_description_clause", 
		"sign_is", "sum", "control_foot_name", "detail_report_group_name", "sum_name", 
		"source_name", "column_number", "type_is_definition", "type_control_name", 
		"next_group_definition", "line_num_definition", "line_num", "rd_clause", 
		"footing_line_rd", "last_detail_line", "first_detail_line", "heading_line", 
		"page_size_rd", "control_name", "report_code", "usage", "usage_definition", 
		"picture", "character_string", "char_str_part", "other_data_item", "data_name", 
		"sd_clause", "report_is", "report_name", "linage", "bottom_lines", "top_lines", 
		"footing_line", "page_size", "data_rec", "rec_name", "value_of_id", "value_of_id_definition", 
		"label", "record", "record_definition", "depending_item", "shortest_rec", 
		"longest_rec", "screen_description_entry", "screen_name", "screen_description_clause", 
		"scr_pic_using", "scr_pic_from", "scr_pic_to", "nonnumeric_literal", "src_number", 
		"color_num", "identification_division", "identification_division_paragraph", 
		"program_id", "program_name", "is_program", "with_ident", "ident_string", 
		"comment_entry", "author", "installation", "date_written", "date_compiled", 
		"security", "options_", "arithmetic", "environment_division", "configuration_section", 
		"input_output_section", "source_computer", "computer_type", "with_debugging", 
		"object_computer", "memory_size", "memory_size_amount", "memory_size_unit", 
		"program_collating", "alpha_name", "segment_limit", "segment_number", 
		"special_names", "special_names_content", "qualified_data_item", "currency", 
		"currency_definition", "literal_7", "literal_8", "class_", "class_name", 
		"user_class", "symbolic_chars", "symb_ch_definition", "symb_ch_def_clause", 
		"symb_ch_def_in_alphabet", "symbol_char", "char_val", "alphabet", "alpha_value", 
		"user_alpha", "first_literal", "last_literal", "same_literal", "switch_", 
		"switch_clause_on", "switch_clause_off", "cond_name", "switch_name", "switch_num", 
		"top_of_page_name", "predefined_device", "device_name", "arg_env", "arg_env_name", 
		"file_control", "select", "file_status", "file_stat", "record_key", "record_key_definition", 
		"access_mode", "reserve", "reserve_num", "record_delimiter", "padding", 
		"pad_char", "organization", "lock_mode", "lock_mode_definition", "code_set", 
		"block_contains", "smallest_block", "blocksize", "assign_to", "assign_to_definition", 
		"file_spec", "file_name", "i_o_control", "multiple_file", "multiple_file_definition", 
		"multiple_file_name", "pos_integer", "rerun", "rerun_definition", "clock_count", 
		"condition_name", "rerun_def_file", "rec_count", "same", "same_area_file", 
		"apply", "apply_definition", "window_ptrs", "preall_amt", "extend_amt", 
		"arithmetic_expression", "constant", "binary_arithmetic_operator", "unary_arithmetic_operator", 
		"logic_expression", "success_failure_condition", "logic_condition", "logic_operation", 
		"sign_condition", "sign_condition_name", "class_condition", "class_condition_name", 
		"condition_operator", "identifier_result", "identifier", "arguments", 
		"subscripting", "reference_modification", "leftmost_character_position", 
		"length", "function_name",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'!'", "'_'", "'+'", "'-'", 
		undefined, undefined, "','", "';'", "':'", "'='", "'<'", "'<='", "'>='", 
		"'>'", "'('", "')'", "'['", "']'", "'^'", "'@'", "'.'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "DECLARATIVES_IN_A_AREA", "END_IN_A_AREA", "IDENTIFICATION_IN_A_AREA", 
		"ACCEPT", "ACCESS", "ADD", "AFTER", "ALL", "ALPHA", "ALPHABET", "ALPHABETIC", 
		"ALPHABETIC_LOWER", "ALPHABETIC_UPPER", "ALSO", "ALTER", "ALTERNATE", 
		"AND", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", "ARGUMENT_VALUE", 
		"ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", "AUTHOR", "AUTO", 
		"AUTOMATIC", "AUTOTERMINATE", "BACKGROUND_COLOR", "BEFORE", "BELL", "BINARY", 
		"BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", "BLANK", 
		"BLINK", "BLINKING", "BLOCK", "BOLD", "BOTTOM", "BY", "C01", "CALL", "CANCEL", 
		"CARD_READER", "CF", "CH", "CHARACTER", "CHARACTERS", "CLASS", "CLOCK_UNITS", 
		"CLOSE", "CODE", "CODE_SET", "COLLATING", "COLUMN", "COMMA", "COMMON", 
		"COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", "COMPUTATIONAL_3", 
		"COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTATIONAL_X", "COMPUTE", "COMP_1", 
		"COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", "CONFIGURATION", "CONSOLE", 
		"CONTAINS", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", "CONTINUE", "CONTROL", 
		"CONTROLS", "CONVERSION", "CONVERTING", "COPY", "CRT", "CURRENCY", "CURRENT", 
		"CURSOR", "DATA", "DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", 
		"DE", "DEBUGGING", "DECIMAL_POINT", "DECLARATIVES", "DEFAULT", "DEFERRED_WRITE", 
		"DELETE", "DELIMITER", "DEPENDING", "DESCENDING", "DETAIL", "DISK", "DISPLAY", 
		"DIVIDE", "DIVISION", "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", "ECHO", 
		"EDITING", "END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", 
		"END_DELETE", "END_DIVIDE", "END_DISPLAY", "END_EVALUATE", "END_IF", "END_MULTIPLY", 
		"END_OF_PAGE", "END_PERFORM", "END_READ", "END_RETURN", "END_REWRITE", 
		"END_SEARCH", "END_START", "END_STRING", "END_SUBTRACT", "END_UNSTRING", 
		"END_WRITE", "ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", "EOL", 
		"EOS", "EQUAL", "ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", "EXCLUSIVE", 
		"EXIT", "EXTEND", "EXTENSION", "EXTERNAL", "FAILURE", "FD", "FILE", "FILE_CONTROL", 
		"FILE_ID", "FILLER", "FILL_SIZE", "FINAL", "FIRST", "FLOAT_EXTENDED", 
		"FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", "FOREGROUND_COLOR", "FROM", 
		"FULL", "FUNCTION", "GENERATE", "GIVING", "GLOBAL", "GO", "GREATER", "GROUP", 
		"HEADING", "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES", "I64", "ID", "IDENT", 
		"IDENTIFICATION", "IF", "IN", "INDEX", "INDEXED", "INDICATE", "INITIAL", 
		"INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", "INSPECT", "INSTALLATION", 
		"INVALID", "IS", "I_O", "I_O_CONTROL", "JUST", "JUSTIFIED", "KEY", "LABEL", 
		"LAST", "LEADING", "LEFT", "LESS", "LIMIT", "LIMITS", "LINAGE", "LINE", 
		"LINES", "LINE_PRINTER", "LINKAGE", "LOCK", "LOCK_HOLDING", "LOWLIGHT", 
		"LOW_VALUE", "LOW_VALUES", "MANUAL", "MASS_INSERT", "MEMORY", "MERGE", 
		"MODE", "MODULES", "MOVE", "MULTIPLE", "MULTIPLY", "NATIVE", "NEGATIVE", 
		"NEXT", "NO", "NOT", "NUMBER", "NUMERIC", "OBJECT_COMPUTER", "OCCURS", 
		"OF", "OFF", "OMITTED", "ON", "OPEN", "OPTIONAL", "OPTIONS", "OR", "ORGANIZATION", 
		"OUTPUT", "OVERFLOW", "PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", 
		"PAPER_TAPE_READER", "PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", 
		"POINTER", "POINTER_64", "POSITION", "POSITIVE", "PREALLOCATION", "PRINTER", 
		"PRINT_CONTROL", "PROCEDURE", "PROGRAM", "PROGRAM_ID", "PROTECTED", "QUOTE", 
		"QUOTES", "RANDOM", "RD", "READ", "RECORD", "RECORDS", "REDEFINES", "REEL", 
		"REFERENCE", "RELATIVE", "RELEASE", "RENAMES", "REPLACE", "REPLACING", 
		"REPORT", "REPORTING", "REPORTS", "REQUIRED", "RERUN", "RESERVE", "RESET", 
		"RETURN", "REVERSED", "REVERSE_VIDEO", "REWRITE", "RF", "RH", "RIGHT", 
		"ROLLBACK", "SAME", "SCREEN", "SD", "SEARCH", "SECTION", "SECURE", "SECURITY", 
		"SEGMENT_LIMIT", "SELECT", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", 
		"SIGN", "SIGNED", "SIZE", "SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", 
		"SPACE", "SPACES", "SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", 
		"START", "STATUS", "STOP", "STRING", "SUBTRACT", "SUCCESS", "SUM", "SUPPRESS", 
		"SWITCH", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", 
		"SYSOUT", "TALLYING", "TAPE", "TERMINATE", "THAN", "THROUGH", "THRU", 
		"TIME", "TIMES", "TO", "TOP", "TRAILING", "TRUE", "TYPE", "UNDERLINE", 
		"UNDERLINED", "UNIT", "UNLOCK", "UNSIGNED", "UNSTRING", "UP", "UPON", 
		"USAGE", "USE", "USING", "VALUE", "VALUES", "VARYING", "VAX", "WHEN", 
		"WINDOW", "WITH", "WORDS", "WORKING_STORAGE", "WRITE", "YYYYDDD", "YYYYMMDD", 
		"ZERO", "ZEROES", "ZEROS", "ROUNDED", "CORRESPONDING", "CORR", "PROCEED", 
		"CONTENT", "DESCRIPTOR", "REMOVAL", "REWIND", "ADVANCING", "INTO", "REMAINDER", 
		"START_SLASH_", "START_STAR_", "EXCLAM_", "UNDER_", "PLUS_", "MINUS_", 
		"STAR_", "SLASH_", "COMMA_", "SEMI_", "COLON_", "EQUAL_", "LT_", "LE_", 
		"GE_", "GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", "POINTER_", 
		"ATP_", "DOT_", "LCURLY_", "RCURLY_", "STRING_LITERAL", "NUMERIC_LITERAL", 
		"HEX_LITERAL", "USER_DEFINED_WORD", "START_FOUR_SPACES", "WHITESPACE", 
		"NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(cobolParser._LITERAL_NAMES, cobolParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return cobolParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "cobol.g4"; }

	// @Override
	public get ruleNames(): string[] { return cobolParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return cobolParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(cobolParser._ATN, this);
	}
	// @RuleVersion(0)
	public cobol_source(): Cobol_sourceContext {
		let _localctx: Cobol_sourceContext = new Cobol_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, cobolParser.RULE_cobol_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 618;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IDENTIFICATION_IN_A_AREA || ((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				this.state = 616;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.IDENTIFICATION_IN_A_AREA:
					{
					this.state = 614;
					this.program();
					}
					break;
				case cobolParser.START_SLASH_:
				case cobolParser.START_STAR_:
				case cobolParser.COMMA_:
				case cobolParser.SEMI_:
				case cobolParser.START_FOUR_SPACES:
				case cobolParser.WHITESPACE:
				case cobolParser.NEWLINE:
					{
					this.state = 615;
					this.separator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 620;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 621;
			this.match(cobolParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant(): Figurative_constantContext {
		let _localctx: Figurative_constantContext = new Figurative_constantContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, cobolParser.RULE_figurative_constant);
		try {
			this.state = 635;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 623;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.SPACE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 624;
				this.match(cobolParser.SPACE);
				}
				break;
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 625;
				this.match(cobolParser.SPACES);
				}
				break;
			case cobolParser.HIGH_VALUE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 626;
				this.match(cobolParser.HIGH_VALUE);
				}
				break;
			case cobolParser.HIGH_VALUES:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 627;
				this.match(cobolParser.HIGH_VALUES);
				}
				break;
			case cobolParser.LOW_VALUE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 628;
				this.match(cobolParser.LOW_VALUE);
				}
				break;
			case cobolParser.LOW_VALUES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 629;
				this.match(cobolParser.LOW_VALUES);
				}
				break;
			case cobolParser.QUOTE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 630;
				this.match(cobolParser.QUOTE);
				}
				break;
			case cobolParser.QUOTES:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 631;
				this.match(cobolParser.QUOTES);
				}
				break;
			case cobolParser.ALL:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 632;
				this.match(cobolParser.ALL);
				this.state = 633;
				this.match(cobolParser.WHITESPACE);
				this.state = 634;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public separator(): SeparatorContext {
		let _localctx: SeparatorContext = new SeparatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, cobolParser.RULE_separator);
		try {
			this.state = 643;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 637;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 638;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 639;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.COMMA_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 640;
				this.match(cobolParser.COMMA_);
				}
				break;
			case cobolParser.SEMI_:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 641;
				this.match(cobolParser.SEMI_);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 642;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic_separator(): Arithmetic_separatorContext {
		let _localctx: Arithmetic_separatorContext = new Arithmetic_separatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, cobolParser.RULE_arithmetic_separator);
		try {
			this.state = 649;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 645;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 646;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 647;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 648;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_comment(): Line_commentContext {
		let _localctx: Line_commentContext = new Line_commentContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, cobolParser.RULE_line_comment);
		let _la: number;
		try {
			this.state = 667;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_SLASH_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 651;
				this.match(cobolParser.START_SLASH_);
				this.state = 655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 652;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 657;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 658;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 659;
				this.match(cobolParser.START_STAR_);
				this.state = 663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 660;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 665;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 666;
				this.match(cobolParser.NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, cobolParser.RULE_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 669;
			this.identification_division();
			this.state = 671;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ENVIRONMENT) {
				{
				this.state = 670;
				this.environment_division();
				}
			}

			this.state = 674;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATA) {
				{
				this.state = 673;
				this.data_division();
				}
			}

			this.state = 677;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROCEDURE) {
				{
				this.state = 676;
				this.procedure_division();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division(): Procedure_divisionContext {
		let _localctx: Procedure_divisionContext = new Procedure_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, cobolParser.RULE_procedure_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 679;
			this.procedure_division_header();
			this.state = 681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DECLARATIVES_IN_A_AREA) {
				{
				this.state = 680;
				this.declaratives();
				}
			}

			this.state = 707;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				{
				this.state = 692;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 683;
						this.section();
						this.state = 687;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 684;
								this.separator();
								}
								}
							}
							this.state = 689;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
						}
						}
						}
					}
					this.state = 694;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
				}
				}
				break;

			case 2:
				{
				this.state = 704;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 695;
						this.paragraph();
						this.state = 699;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 696;
								this.separator();
								}
								}
							}
							this.state = 701;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
						}
						}
						}
					}
					this.state = 706;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				}
				}
				break;
			}
			this.state = 716;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 18, this._ctx) ) {
			case 1:
				{
				this.state = 712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 709;
					this.separator();
					}
					}
					this.state = 714;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 715;
				this.end_program();
				}
				break;
			}
			this.state = 733;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 721;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 718;
							this.separator();
							}
							}
						}
						this.state = 723;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
					}
					this.state = 724;
					this.procedure_test_line();
					this.state = 728;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 725;
							this.separator();
							}
							}
						}
						this.state = 730;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
					}
					}
					}
				}
				this.state = 735;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public end_program(): End_programContext {
		let _localctx: End_programContext = new End_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, cobolParser.RULE_end_program);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 736;
			this.match(cobolParser.END_IN_A_AREA);
			this.state = 738;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 737;
				this.separator();
				}
				}
				this.state = 740;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 742;
			this.match(cobolParser.PROGRAM);
			this.state = 750;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				{
				this.state = 744;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 743;
					this.separator();
					}
					}
					this.state = 746;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 748;
				this.program_name();
				}
				break;
			}
			this.state = 755;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 752;
				this.separator();
				}
				}
				this.state = 757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 758;
			this.match(cobolParser.DOT_);
			this.state = 762;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 759;
					this.separator();
					}
					}
				}
				this.state = 764;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division_header(): Procedure_division_headerContext {
		let _localctx: Procedure_division_headerContext = new Procedure_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, cobolParser.RULE_procedure_division_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 765;
			this.match(cobolParser.PROCEDURE);
			this.state = 767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 766;
				this.separator();
				}
				}
				this.state = 769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 771;
			this.match(cobolParser.DIVISION);
			this.state = 779;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 29, this._ctx) ) {
			case 1:
				{
				this.state = 773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 772;
					this.separator();
					}
					}
					this.state = 775;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 777;
				this.using();
				}
				break;
			}
			this.state = 788;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 31, this._ctx) ) {
			case 1:
				{
				this.state = 782;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 781;
					this.separator();
					}
					}
					this.state = 784;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 786;
				this.giving();
				}
				break;
			}
			this.state = 793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 790;
				this.separator();
				}
				}
				this.state = 795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 796;
			this.match(cobolParser.DOT_);
			this.state = 800;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 797;
					this.separator();
					}
					}
				}
				this.state = 802;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section(): SectionContext {
		let _localctx: SectionContext = new SectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, cobolParser.RULE_section);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 803;
			this.section_header();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives(): DeclarativesContext {
		let _localctx: DeclarativesContext = new DeclarativesContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, cobolParser.RULE_declaratives);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 805;
			this.match(cobolParser.DECLARATIVES_IN_A_AREA);
			this.state = 809;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 806;
				this.separator();
				}
				}
				this.state = 811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 812;
			this.match(cobolParser.DOT_);
			this.state = 816;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 813;
				this.separator();
				}
				}
				this.state = 818;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 826;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 819;
				this.declaratives_section();
				this.state = 823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 820;
					this.separator();
					}
					}
					this.state = 825;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 828;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 830;
			this.match(cobolParser.END_IN_A_AREA);
			this.state = 832;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 831;
				this.separator();
				}
				}
				this.state = 834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 836;
			this.match(cobolParser.DECLARATIVES);
			this.state = 840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 837;
				this.separator();
				}
				}
				this.state = 842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 843;
			this.match(cobolParser.DOT_);
			this.state = 847;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 844;
					this.separator();
					}
					}
				}
				this.state = 849;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives_section(): Declaratives_sectionContext {
		let _localctx: Declaratives_sectionContext = new Declaratives_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, cobolParser.RULE_declaratives_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 850;
			this.section_header();
			this.state = 851;
			this.use_statement();
			this.state = 861;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 853;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 852;
						this.separator();
						}
						}
						this.state = 855;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 857;
					this.declarative_paragraph();
					}
					}
				}
				this.state = 863;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declarative_paragraph(): Declarative_paragraphContext {
		let _localctx: Declarative_paragraphContext = new Declarative_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, cobolParser.RULE_declarative_paragraph);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 864;
			this.paragraph();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph(): ParagraphContext {
		let _localctx: ParagraphContext = new ParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, cobolParser.RULE_paragraph);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 866;
			this.paragraph_name();
			this.state = 870;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 867;
				this.separator();
				}
				}
				this.state = 872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 873;
			this.match(cobolParser.DOT_);
			this.state = 877;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 874;
					this.separator();
					}
					}
				}
				this.state = 879;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
			}
			this.state = 889;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ADD) | (1 << cobolParser.ALTER))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (cobolParser.CALL - 49)) | (1 << (cobolParser.CANCEL - 49)) | (1 << (cobolParser.CLOSE - 49)) | (1 << (cobolParser.COMPUTE - 49)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (cobolParser.CONTINUE - 85)) | (1 << (cobolParser.DELETE - 85)) | (1 << (cobolParser.DISPLAY - 85)) | (1 << (cobolParser.DIVIDE - 85)))) !== 0)) {
				{
				{
				this.state = 880;
				this.sentense();
				this.state = 884;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 881;
						this.separator();
						}
						}
					}
					this.state = 886;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
				}
				}
				}
				this.state = 891;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sentense(): SentenseContext {
		let _localctx: SentenseContext = new SentenseContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, cobolParser.RULE_sentense);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 899;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 892;
					this.statement();
					this.state = 896;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 893;
							this.separator();
							}
							}
						}
						this.state = 898;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 901;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 916;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 51, this._ctx) ) {
			case 1:
				{
				this.state = 906;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 903;
					this.separator();
					}
					}
					this.state = 908;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 909;
				this.match(cobolParser.DOT_);
				this.state = 913;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 910;
						this.separator();
						}
						}
					}
					this.state = 915;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_statement(): Use_statementContext {
		let _localctx: Use_statementContext = new Use_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, cobolParser.RULE_use_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 918;
			this.match(cobolParser.USE);
			this.state = 926;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
			case 1:
				{
				this.state = 920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 919;
					this.separator();
					}
					}
					this.state = 922;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 924;
				this.match(cobolParser.GLOBAL);
				}
				break;
			}
			this.state = 929;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 928;
				this.separator();
				}
				}
				this.state = 931;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 997;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AFTER:
				{
				this.state = 933;
				this.match(cobolParser.AFTER);
				this.state = 941;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 56, this._ctx) ) {
				case 1:
					{
					this.state = 935;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 934;
						this.separator();
						}
						}
						this.state = 937;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 939;
					this.match(cobolParser.STANDARD);
					}
					break;
				}
				this.state = 944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 943;
					this.separator();
					}
					}
					this.state = 946;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 948;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ERROR || _la === cobolParser.EXCEPTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 949;
					this.separator();
					}
					}
					this.state = 952;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 954;
				this.match(cobolParser.PROCEDURE);
				this.state = 962;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 60, this._ctx) ) {
				case 1:
					{
					this.state = 956;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 955;
						this.separator();
						}
						}
						this.state = 958;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 960;
					this.match(cobolParser.ON);
					}
					break;
				}
				this.state = 965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 964;
					this.separator();
					}
					}
					this.state = 967;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 969;
				this.use_on();
				this.state = 973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 970;
					this.separator();
					}
					}
					this.state = 975;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 976;
				this.match(cobolParser.DOT_);
				this.state = 980;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 977;
						this.separator();
						}
						}
					}
					this.state = 982;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
				}
				}
				break;
			case cobolParser.BEFORE:
				{
				this.state = 983;
				this.match(cobolParser.BEFORE);
				this.state = 985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 984;
					this.separator();
					}
					}
					this.state = 987;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 989;
				this.match(cobolParser.REPORTING);
				this.state = 991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 990;
					this.separator();
					}
					}
					this.state = 993;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 995;
				this.group_data_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1002;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 999;
				this.separator();
				}
				}
				this.state = 1004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1005;
			this.match(cobolParser.DOT_);
			this.state = 1009;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1006;
					this.separator();
					}
					}
				}
				this.state = 1011;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_data_name(): Group_data_nameContext {
		let _localctx: Group_data_nameContext = new Group_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, cobolParser.RULE_group_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1012;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_on(): Use_onContext {
		let _localctx: Use_onContext = new Use_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, cobolParser.RULE_use_on);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1031;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1014;
				this.file_name();
				this.state = 1024;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1016;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1015;
							this.separator();
							}
							}
							this.state = 1018;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1020;
						this.file_name();
						}
						}
					}
					this.state = 1026;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
				}
				}
				break;
			case cobolParser.INPUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1027;
				this.match(cobolParser.INPUT);
				}
				break;
			case cobolParser.OUTPUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1028;
				this.match(cobolParser.OUTPUT);
				}
				break;
			case cobolParser.I_O:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1029;
				this.match(cobolParser.I_O);
				}
				break;
			case cobolParser.EXTEND:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1030;
				this.match(cobolParser.EXTEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_header(): Section_headerContext {
		let _localctx: Section_headerContext = new Section_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, cobolParser.RULE_section_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1033;
			this.section_name();
			this.state = 1035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1034;
				this.separator();
				}
				}
				this.state = 1037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1039;
			this.match(cobolParser.SECTION);
			this.state = 1047;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
			case 1:
				{
				this.state = 1041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1040;
					this.separator();
					}
					}
					this.state = 1043;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1045;
				this.segment_number();
				}
				break;
			}
			this.state = 1052;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 1049;
				this.separator();
				}
				}
				this.state = 1054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1055;
			this.match(cobolParser.DOT_);
			this.state = 1059;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1056;
					this.separator();
					}
					}
				}
				this.state = 1061;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph_name(): Paragraph_nameContext {
		let _localctx: Paragraph_nameContext = new Paragraph_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, cobolParser.RULE_paragraph_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1062;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_name(): Section_nameContext {
		let _localctx: Section_nameContext = new Section_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, cobolParser.RULE_section_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1064;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using(): UsingContext {
		let _localctx: UsingContext = new UsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, cobolParser.RULE_using);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1066;
			this.match(cobolParser.USING);
			this.state = 1068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1067;
				this.separator();
				}
				}
				this.state = 1070;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1072;
			this.qualified_data_item();
			this.state = 1082;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1074;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1073;
						this.separator();
						}
						}
						this.state = 1076;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1078;
					this.qualified_data_item();
					}
					}
				}
				this.state = 1084;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public giving(): GivingContext {
		let _localctx: GivingContext = new GivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, cobolParser.RULE_giving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1085;
			this.match(cobolParser.GIVING);
			this.state = 1087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1086;
				this.separator();
				}
				}
				this.state = 1089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1091;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_test_line(): Procedure_test_lineContext {
		let _localctx: Procedure_test_lineContext = new Procedure_test_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, cobolParser.RULE_procedure_test_line);
		let _la: number;
		try {
			this.state = 1112;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 83, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1093;
				this.arithmetic_expression(0);
				this.state = 1097;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 1094;
					this.separator();
					}
					}
					this.state = 1099;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1100;
				this.match(cobolParser.DOT_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1102;
				this.logic_expression(0);
				this.state = 1106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 1103;
					this.separator();
					}
					}
					this.state = 1108;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1109;
				this.match(cobolParser.DOT_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1111;
				this.separator();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, cobolParser.RULE_statement);
		try {
			this.state = 1125;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ACCEPT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1114;
				this.accept_statement();
				}
				break;
			case cobolParser.ADD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1115;
				this.add_statement();
				}
				break;
			case cobolParser.ALTER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1116;
				this.alter_statement();
				}
				break;
			case cobolParser.CALL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1117;
				this.call_statement();
				}
				break;
			case cobolParser.CANCEL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1118;
				this.cancel_statement();
				}
				break;
			case cobolParser.CLOSE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1119;
				this.close_statement();
				}
				break;
			case cobolParser.COMPUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1120;
				this.compute_statement();
				}
				break;
			case cobolParser.CONTINUE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1121;
				this.continue_statement();
				}
				break;
			case cobolParser.DELETE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1122;
				this.delete_statement();
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1123;
				this.display_statement();
				}
				break;
			case cobolParser.DIVIDE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1124;
				this.divide_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement(): Divide_statementContext {
		let _localctx: Divide_statementContext = new Divide_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, cobolParser.RULE_divide_statement);
		try {
			this.state = 1129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 85, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1127;
				this.divide_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1128;
				this.divide_statement_form2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement_form1(): Divide_statement_form1Context {
		let _localctx: Divide_statement_form1Context = new Divide_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 52, cobolParser.RULE_divide_statement_form1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1131;
			this.match(cobolParser.DIVIDE);
			this.state = 1133;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1132;
				this.separator();
				}
				}
				this.state = 1135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1137;
			this.divide_num();
			this.state = 1139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1138;
				this.separator();
				}
				}
				this.state = 1141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1143;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1157;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 90, this._ctx) ) {
			case 1:
				{
				this.state = 1145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1144;
					this.separator();
					}
					}
					this.state = 1147;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1149;
				this.divide_num();
				this.state = 1151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1150;
					this.separator();
					}
					}
					this.state = 1153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1155;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 1174;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1160;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1159;
						this.separator();
						}
						}
						this.state = 1162;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1164;
					this.identifier_result();
					this.state = 1172;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
					case 1:
						{
						this.state = 1166;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1165;
							this.separator();
							}
							}
							this.state = 1168;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1170;
						this.match(cobolParser.ROUNDED);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1176;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1185;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 96, this._ctx) ) {
			case 1:
				{
				this.state = 1179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1178;
					this.separator();
					}
					}
					this.state = 1181;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1183;
				this.on_size_variants();
				}
				break;
			}
			this.state = 1194;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 98, this._ctx) ) {
			case 1:
				{
				this.state = 1188;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1187;
					this.separator();
					}
					}
					this.state = 1190;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1192;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement_form2(): Divide_statement_form2Context {
		let _localctx: Divide_statement_form2Context = new Divide_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 54, cobolParser.RULE_divide_statement_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1196;
			this.match(cobolParser.DIVIDE);
			this.state = 1198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1197;
				this.separator();
				}
				}
				this.state = 1200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1202;
			this.divide_num();
			this.state = 1204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1203;
				this.separator();
				}
				}
				this.state = 1206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1208;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1222;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				{
				this.state = 1210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1209;
					this.separator();
					}
					}
					this.state = 1212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1214;
				this.divide_num();
				this.state = 1216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1215;
					this.separator();
					}
					}
					this.state = 1218;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1220;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 1225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1224;
				this.separator();
				}
				}
				this.state = 1227;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1229;
			this.identifier_result();
			this.state = 1237;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				{
				this.state = 1231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1230;
					this.separator();
					}
					}
					this.state = 1233;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1235;
				this.match(cobolParser.ROUNDED);
				}
				break;
			}
			this.state = 1240;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1239;
				this.separator();
				}
				}
				this.state = 1242;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1244;
			this.match(cobolParser.REMAINDER);
			this.state = 1246;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1245;
				this.separator();
				}
				}
				this.state = 1248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1250;
			this.remaind();
			this.state = 1258;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 110, this._ctx) ) {
			case 1:
				{
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1251;
					this.separator();
					}
					}
					this.state = 1254;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1256;
				this.on_size_variants();
				}
				break;
			}
			this.state = 1267;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 112, this._ctx) ) {
			case 1:
				{
				this.state = 1261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1260;
					this.separator();
					}
					}
					this.state = 1263;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1265;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public remaind(): RemaindContext {
		let _localctx: RemaindContext = new RemaindContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, cobolParser.RULE_remaind);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1269;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_num(): Divide_numContext {
		let _localctx: Divide_numContext = new Divide_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, cobolParser.RULE_divide_num);
		try {
			this.state = 1273;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1271;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1272;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement(): Display_statementContext {
		let _localctx: Display_statementContext = new Display_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, cobolParser.RULE_display_statement);
		try {
			this.state = 1279;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1275;
				this.display_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1276;
				this.display_statement_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1277;
				this.display_statement_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1278;
				this.display_statement_form4();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form1(): Display_statement_form1Context {
		let _localctx: Display_statement_form1Context = new Display_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 62, cobolParser.RULE_display_statement_form1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1281;
			this.match(cobolParser.DISPLAY);
			this.state = 1300;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1283;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1282;
						this.separator();
						}
						}
						this.state = 1285;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1287;
					this.src_item();
					this.state = 1297;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1289;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1288;
								this.separator();
								}
								}
								this.state = 1291;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
							this.state = 1293;
							this.display_form1_clause();
							}
							}
						}
						this.state = 1299;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1302;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 118, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1311;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				{
				this.state = 1305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1304;
					this.separator();
					}
					}
					this.state = 1307;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1309;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form2(): Display_statement_form2Context {
		let _localctx: Display_statement_form2Context = new Display_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 64, cobolParser.RULE_display_statement_form2);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1313;
			this.match(cobolParser.DISPLAY);
			this.state = 1332;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1315;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1314;
						this.separator();
						}
						}
						this.state = 1317;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1319;
					this.src_item();
					this.state = 1329;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 123, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1321;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1320;
								this.separator();
								}
								}
								this.state = 1323;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
							this.state = 1325;
							this.display_form2_clause();
							}
							}
						}
						this.state = 1331;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 123, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1334;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 124, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1343;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 126, this._ctx) ) {
			case 1:
				{
				this.state = 1337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1336;
					this.separator();
					}
					}
					this.state = 1339;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1341;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form3(): Display_statement_form3Context {
		let _localctx: Display_statement_form3Context = new Display_statement_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 66, cobolParser.RULE_display_statement_form3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1345;
			this.match(cobolParser.DISPLAY);
			this.state = 1347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1346;
				this.separator();
				}
				}
				this.state = 1349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1351;
			this.qualified_data_item();
			this.state = 1378;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 134, this._ctx) ) {
			case 1:
				{
				this.state = 1353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1352;
					this.separator();
					}
					}
					this.state = 1355;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1363;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 1357;
					this.match(cobolParser.AT);
					this.state = 1359;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1358;
						this.separator();
						}
						}
						this.state = 1361;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1376;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LINE:
					{
					this.state = 1365;
					this.disp_f3_line();
					this.state = 1373;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 132, this._ctx) ) {
					case 1:
						{
						this.state = 1367;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1366;
							this.separator();
							}
							}
							this.state = 1369;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1371;
						this.disp_f3_column();
						}
						break;
					}
					}
					break;
				case cobolParser.COLUMN:
					{
					this.state = 1375;
					this.disp_f3_column();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 1387;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
			case 1:
				{
				this.state = 1381;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1380;
					this.separator();
					}
					}
					this.state = 1383;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1385;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form4(): Display_statement_form4Context {
		let _localctx: Display_statement_form4Context = new Display_statement_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 68, cobolParser.RULE_display_statement_form4);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1389;
			this.match(cobolParser.DISPLAY);
			this.state = 1391;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1390;
				this.separator();
				}
				}
				this.state = 1393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1395;
			this.src_item();
			this.state = 1397;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1396;
				this.separator();
				}
				}
				this.state = 1399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1401;
			this.match(cobolParser.UPON);
			this.state = 1403;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1402;
				this.separator();
				}
				}
				this.state = 1405;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1407;
			this.display_upon();
			this.state = 1415;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 141, this._ctx) ) {
			case 1:
				{
				this.state = 1409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1408;
					this.separator();
					}
					}
					this.state = 1411;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1413;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 1424;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
			case 1:
				{
				this.state = 1418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1417;
					this.separator();
					}
					}
					this.state = 1420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1422;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_item(): Src_itemContext {
		let _localctx: Src_itemContext = new Src_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, cobolParser.RULE_src_item);
		try {
			this.state = 1428;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1426;
				this.identifier();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1427;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_upon(): Display_uponContext {
		let _localctx: Display_uponContext = new Display_uponContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, cobolParser.RULE_display_upon);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1430;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disp_f3_line(): Disp_f3_lineContext {
		let _localctx: Disp_f3_lineContext = new Disp_f3_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, cobolParser.RULE_disp_f3_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1432;
			this.match(cobolParser.LINE);
			{
			this.state = 1434;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1433;
				this.separator();
				}
				}
				this.state = 1436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1438;
			this.match(cobolParser.NUMBER);
			}
			this.state = 1441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1440;
				this.separator();
				}
				}
				this.state = 1443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1447;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 1445;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 1446;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disp_f3_column(): Disp_f3_columnContext {
		let _localctx: Disp_f3_columnContext = new Disp_f3_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, cobolParser.RULE_disp_f3_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1449;
			this.match(cobolParser.COLUMN);
			{
			this.state = 1451;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1450;
				this.separator();
				}
				}
				this.state = 1453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1455;
			this.match(cobolParser.NUMBER);
			}
			this.state = 1458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1457;
				this.separator();
				}
				}
				this.state = 1460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1464;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 1462;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 1463;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_form1_clause(): Display_form1_clauseContext {
		let _localctx: Display_form1_clauseContext = new Display_form1_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, cobolParser.RULE_display_form1_clause);
		let _la: number;
		try {
			this.state = 1501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 158, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1466;
					this.match(cobolParser.WITH);
					this.state = 1468;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1467;
						this.separator();
						}
						}
						this.state = 1470;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1474;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1475;
				this.match(cobolParser.UPON);
				this.state = 1477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1476;
					this.separator();
					}
					}
					this.state = 1479;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1481;
				this.out_dest();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1483;
					this.match(cobolParser.WITH);
					this.state = 1485;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1484;
						this.separator();
						}
						}
						this.state = 1487;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1491;
				this.match(cobolParser.NO);
				this.state = 1499;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
				case 1:
					{
					this.state = 1493;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1492;
						this.separator();
						}
						}
						this.state = 1495;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1497;
					this.match(cobolParser.ADVANCING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_form2_clause(): Display_form2_clauseContext {
		let _localctx: Display_form2_clauseContext = new Display_form2_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, cobolParser.RULE_display_form2_clause);
		let _la: number;
		try {
			this.state = 1587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 176, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1503;
				this.display_form1_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1504;
				this.at_line_number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1505;
				this.at_column_number();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1506;
				this.match(cobolParser.ERASE);
				this.state = 1530;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 164, this._ctx) ) {
				case 1:
					{
					this.state = 1508;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1507;
						this.separator();
						}
						}
						this.state = 1510;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1518;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 1512;
						this.match(cobolParser.TO);
						this.state = 1514;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1513;
							this.separator();
							}
							}
							this.state = 1516;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					this.state = 1520;
					this.match(cobolParser.END);
					this.state = 1528;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
					case 1:
						{
						this.state = 1522;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1521;
							this.separator();
							}
							}
							this.state = 1524;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1526;
						this.match(cobolParser.OF);
						}
						break;
					}
					}
					break;
				}
				this.state = 1533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1532;
					this.separator();
					}
					}
					this.state = 1535;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1537;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1545;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1539;
					this.match(cobolParser.WITH);
					this.state = 1541;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1540;
						this.separator();
						}
						}
						this.state = 1543;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1547;
				this.match(cobolParser.BELL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1548;
				this.match(cobolParser.UNDERLINED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1549;
				this.match(cobolParser.BOLD);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1550;
					this.match(cobolParser.WITH);
					this.state = 1552;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1551;
						this.separator();
						}
						}
						this.state = 1554;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1558;
				this.match(cobolParser.BLINKING);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1559;
				this.match(cobolParser.REVERSED);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1560;
					this.match(cobolParser.WITH);
					this.state = 1562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1561;
						this.separator();
						}
						}
						this.state = 1564;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1568;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1569;
					this.match(cobolParser.WITH);
					this.state = 1571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1570;
						this.separator();
						}
						}
						this.state = 1573;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1577;
				this.match(cobolParser.NO);
				this.state = 1585;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 175, this._ctx) ) {
				case 1:
					{
					this.state = 1579;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1578;
						this.separator();
						}
						}
						this.state = 1581;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1583;
					this.match(cobolParser.ADVANCING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_line_number(): At_line_numberContext {
		let _localctx: At_line_numberContext = new At_line_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, cobolParser.RULE_at_line_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1595;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 1589;
				this.match(cobolParser.AT);
				this.state = 1591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1590;
					this.separator();
					}
					}
					this.state = 1593;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 1597;
			this.match(cobolParser.LINE);
			this.state = 1605;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 180, this._ctx) ) {
			case 1:
				{
				this.state = 1599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1598;
					this.separator();
					}
					}
					this.state = 1601;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1603;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 1608;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1607;
				this.separator();
				}
				}
				this.state = 1610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1612;
			this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_column_number(): At_column_numberContext {
		let _localctx: At_column_numberContext = new At_column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, cobolParser.RULE_at_column_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1620;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 1614;
				this.match(cobolParser.AT);
				this.state = 1616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1615;
					this.separator();
					}
					}
					this.state = 1618;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 1622;
			this.match(cobolParser.COLUMN);
			this.state = 1630;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 185, this._ctx) ) {
			case 1:
				{
				this.state = 1624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1623;
					this.separator();
					}
					}
					this.state = 1626;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1628;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 1633;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1632;
				this.separator();
				}
				}
				this.state = 1635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1637;
			this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public out_dest(): Out_destContext {
		let _localctx: Out_destContext = new Out_destContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, cobolParser.RULE_out_dest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1639;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_statement(): Delete_statementContext {
		let _localctx: Delete_statementContext = new Delete_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, cobolParser.RULE_delete_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1641;
			this.match(cobolParser.DELETE);
			this.state = 1643;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1642;
				this.separator();
				}
				}
				this.state = 1645;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1647;
			this.file_name();
			this.state = 1655;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 189, this._ctx) ) {
			case 1:
				{
				this.state = 1649;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1648;
					this.separator();
					}
					}
					this.state = 1651;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1653;
				this.match(cobolParser.RECORD);
				}
				break;
			}
			this.state = 1664;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				{
				this.state = 1658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1657;
					this.separator();
					}
					}
					this.state = 1660;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1662;
				this.on_key_variants();
				}
				break;
			}
			this.state = 1673;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 193, this._ctx) ) {
			case 1:
				{
				this.state = 1667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1666;
					this.separator();
					}
					}
					this.state = 1669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1671;
				this.match(cobolParser.END_DELETE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public continue_statement(): Continue_statementContext {
		let _localctx: Continue_statementContext = new Continue_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, cobolParser.RULE_continue_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1675;
			this.match(cobolParser.CONTINUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compute_statement(): Compute_statementContext {
		let _localctx: Compute_statementContext = new Compute_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, cobolParser.RULE_compute_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1677;
			this.match(cobolParser.COMPUTE);
			this.state = 1693;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1679;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1678;
						this.separator();
						}
						}
						this.state = 1681;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1683;
					this.identifier_result();
					this.state = 1691;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 196, this._ctx) ) {
					case 1:
						{
						this.state = 1685;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1684;
							this.separator();
							}
							}
							this.state = 1687;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1689;
						this.match(cobolParser.ROUNDED);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1695;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1721;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 202, this._ctx) ) {
			case 1:
				{
				this.state = 1698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1697;
					this.separator();
					}
					}
					this.state = 1700;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1702;
				this.match(cobolParser.EQUAL);
				this.state = 1704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1703;
					this.separator();
					}
					}
					this.state = 1706;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
				break;

			case 2:
				{
				this.state = 1711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 1708;
					this.separator();
					}
					}
					this.state = 1713;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1714;
				this.match(cobolParser.EQUAL_);
				this.state = 1718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 1715;
					this.separator();
					}
					}
					this.state = 1720;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 1723;
			this.arithmetic_expression(0);
			this.state = 1731;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 204, this._ctx) ) {
			case 1:
				{
				this.state = 1725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1724;
					this.separator();
					}
					}
					this.state = 1727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1729;
				this.on_size_variants();
				}
				break;
			}
			this.state = 1740;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
			case 1:
				{
				this.state = 1734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1733;
					this.separator();
					}
					}
					this.state = 1736;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1738;
				this.match(cobolParser.END_COMPUTE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_statement(): Close_statementContext {
		let _localctx: Close_statementContext = new Close_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, cobolParser.RULE_close_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1742;
			this.match(cobolParser.CLOSE);
			this.state = 1758;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1744;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1743;
						this.separator();
						}
						}
						this.state = 1746;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1748;
					this.file_name();
					this.state = 1756;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 209, this._ctx) ) {
					case 1:
						{
						this.state = 1750;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1749;
							this.separator();
							}
							}
							this.state = 1752;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1754;
						this.close_params();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1760;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_params(): Close_paramsContext {
		let _localctx: Close_paramsContext = new Close_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, cobolParser.RULE_close_params);
		let _la: number;
		try {
			this.state = 1816;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1762;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1795;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 218, this._ctx) ) {
				case 1:
					{
					this.state = 1764;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1763;
						this.separator();
						}
						}
						this.state = 1766;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1793;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.FOR:
					case cobolParser.REMOVAL:
						{
						this.state = 1774;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.FOR) {
							{
							this.state = 1768;
							this.match(cobolParser.FOR);
							this.state = 1770;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1769;
								this.separator();
								}
								}
								this.state = 1772;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
							}
						}

						this.state = 1776;
						this.match(cobolParser.REMOVAL);
						}
						break;
					case cobolParser.NO:
					case cobolParser.WITH:
						{
						this.state = 1783;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.WITH) {
							{
							this.state = 1777;
							this.match(cobolParser.WITH);
							this.state = 1779;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1778;
								this.separator();
								}
								}
								this.state = 1781;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
							}
						}

						this.state = 1785;
						this.match(cobolParser.NO);
						this.state = 1787;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1786;
							this.separator();
							}
							}
							this.state = 1789;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1791;
						this.match(cobolParser.REWIND);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.LOCK:
			case cobolParser.NO:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1797;
					this.match(cobolParser.WITH);
					this.state = 1799;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1798;
						this.separator();
						}
						}
						this.state = 1801;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1814;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.NO:
					{
					this.state = 1805;
					this.match(cobolParser.NO);
					this.state = 1807;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1806;
						this.separator();
						}
						}
						this.state = 1809;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1811;
					this.match(cobolParser.REWIND);
					}
					break;
				case cobolParser.LOCK:
					{
					this.state = 1813;
					this.match(cobolParser.LOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancel_statement(): Cancel_statementContext {
		let _localctx: Cancel_statementContext = new Cancel_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, cobolParser.RULE_cancel_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1818;
			this.match(cobolParser.CANCEL);
			this.state = 1826;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1820;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1819;
						this.separator();
						}
						}
						this.state = 1822;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1824;
					this.prog_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1828;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_statement(): Call_statementContext {
		let _localctx: Call_statementContext = new Call_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, cobolParser.RULE_call_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1830;
			this.match(cobolParser.CALL);
			this.state = 1832;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1831;
				this.separator();
				}
				}
				this.state = 1834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1836;
			this.prog_name();
			this.state = 1844;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
			case 1:
				{
				this.state = 1838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1837;
					this.separator();
					}
					}
					this.state = 1840;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1842;
				this.call_using();
				}
				break;
			}
			this.state = 1853;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
			case 1:
				{
				this.state = 1847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1846;
					this.separator();
					}
					}
					this.state = 1849;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1851;
				this.call_giving();
				}
				break;
			}
			this.state = 1862;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				{
				this.state = 1856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1855;
					this.separator();
					}
					}
					this.state = 1858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1860;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 1871;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 1865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1864;
					this.separator();
					}
					}
					this.state = 1867;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 1869;
				this.match(cobolParser.END_CALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_giving(): Call_givingContext {
		let _localctx: Call_givingContext = new Call_givingContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, cobolParser.RULE_call_giving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1873;
			this.match(cobolParser.GIVING);
			this.state = 1875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1874;
				this.separator();
				}
				}
				this.state = 1877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 1879;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_using(): Call_usingContext {
		let _localctx: Call_usingContext = new Call_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, cobolParser.RULE_call_using);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1881;
			this.match(cobolParser.USING);
			this.state = 1889;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1883;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1882;
						this.separator();
						}
						}
						this.state = 1885;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1887;
					this.using_arg();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1891;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_arg(): Using_argContext {
		let _localctx: Using_argContext = new Using_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, cobolParser.RULE_using_arg);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1915;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.OMITTED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1893;
				this.match(cobolParser.OMITTED);
				}
				break;
			case cobolParser.BY:
			case cobolParser.REFERENCE:
			case cobolParser.VALUE:
			case cobolParser.CONTENT:
			case cobolParser.DESCRIPTOR:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY || _la === cobolParser.REFERENCE || ((((_la - 375)) & ~0x1F) === 0 && ((1 << (_la - 375)) & ((1 << (cobolParser.VALUE - 375)) | (1 << (cobolParser.CONTENT - 375)) | (1 << (cobolParser.DESCRIPTOR - 375)))) !== 0)) {
					{
					this.state = 1894;
					this.using_prefix();
					this.state = 1896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1895;
						this.separator();
						}
						}
						this.state = 1898;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1902;
				this.argument();
				this.state = 1912;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1904;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1903;
							this.separator();
							}
							}
							this.state = 1906;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1908;
						this.argument();
						}
						}
					}
					this.state = 1914;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_prefix(): Using_prefixContext {
		let _localctx: Using_prefixContext = new Using_prefixContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, cobolParser.RULE_using_prefix);
		let _la: number;
		try {
			this.state = 1953;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 251, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 1917;
					this.match(cobolParser.BY);
					this.state = 1919;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1918;
						this.separator();
						}
						}
						this.state = 1921;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1925;
				this.match(cobolParser.REFERENCE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 1926;
					this.match(cobolParser.BY);
					this.state = 1928;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1927;
						this.separator();
						}
						}
						this.state = 1930;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1934;
				this.match(cobolParser.CONTENT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 1935;
					this.match(cobolParser.BY);
					this.state = 1937;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1936;
						this.separator();
						}
						}
						this.state = 1939;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1943;
				this.match(cobolParser.DESCRIPTOR);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 1944;
					this.match(cobolParser.BY);
					this.state = 1946;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1945;
						this.separator();
						}
						}
						this.state = 1948;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 1952;
				this.match(cobolParser.VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public argument(): ArgumentContext {
		let _localctx: ArgumentContext = new ArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, cobolParser.RULE_argument);
		try {
			this.state = 1958;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1955;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1956;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1957;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prog_name(): Prog_nameContext {
		let _localctx: Prog_nameContext = new Prog_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, cobolParser.RULE_prog_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1960;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_statement(): Alter_statementContext {
		let _localctx: Alter_statementContext = new Alter_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, cobolParser.RULE_alter_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1962;
			this.match(cobolParser.ALTER);
			this.state = 1996;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1964;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1963;
						this.separator();
						}
						}
						this.state = 1966;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1968;
					this.alter_proc();
					this.state = 1970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1969;
						this.separator();
						}
						}
						this.state = 1972;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1974;
					this.match(cobolParser.TO);
					this.state = 1976;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1975;
						this.separator();
						}
						}
						this.state = 1978;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 1992;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.PROCEED) {
						{
						this.state = 1980;
						this.match(cobolParser.PROCEED);
						this.state = 1982;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1981;
							this.separator();
							}
							}
							this.state = 1984;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 1986;
						this.match(cobolParser.TO);
						this.state = 1988;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1987;
							this.separator();
							}
							}
							this.state = 1990;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					this.state = 1994;
					this.alter_new_proc();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1998;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_new_proc(): Alter_new_procContext {
		let _localctx: Alter_new_procContext = new Alter_new_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, cobolParser.RULE_alter_new_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2000;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_proc(): Alter_procContext {
		let _localctx: Alter_procContext = new Alter_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, cobolParser.RULE_alter_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2002;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_statement(): Add_statementContext {
		let _localctx: Add_statementContext = new Add_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, cobolParser.RULE_add_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2133;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 284, this._ctx) ) {
			case 1:
				{
				this.state = 2004;
				this.match(cobolParser.ADD);
				this.state = 2012;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2006;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2005;
							this.separator();
							}
							}
							this.state = 2008;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 2010;
						this.add_num();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2014;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2017;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2016;
					this.separator();
					}
					}
					this.state = 2019;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2021;
				this.match(cobolParser.TO);
				this.state = 2037;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2023;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2022;
							this.separator();
							}
							}
							this.state = 2025;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 2027;
						this.identifier_result();
						this.state = 2035;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 265, this._ctx) ) {
						case 1:
							{
							this.state = 2029;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2028;
								this.separator();
								}
								}
								this.state = 2031;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
							this.state = 2033;
							this.match(cobolParser.ROUNDED);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2039;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				{
				this.state = 2041;
				this.match(cobolParser.ADD);
				this.state = 2051;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2043;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2042;
							this.separator();
							}
							}
							this.state = 2045;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 2047;
						this.add_num();
						}
						}
					}
					this.state = 2053;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
				}
				this.state = 2061;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 270, this._ctx) ) {
				case 1:
					{
					this.state = 2055;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2054;
						this.separator();
						}
						}
						this.state = 2057;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2059;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 2070;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2064;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2063;
							this.separator();
							}
							}
							this.state = 2066;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 2068;
						this.add_num();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2072;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2074;
					this.separator();
					}
					}
					this.state = 2077;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2079;
				this.match(cobolParser.GIVING);
				this.state = 2095;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2081;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2080;
							this.separator();
							}
							}
							this.state = 2083;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 2085;
						this.identifier_result();
						this.state = 2093;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 276, this._ctx) ) {
						case 1:
							{
							this.state = 2087;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2086;
								this.separator();
								}
								}
								this.state = 2089;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
							this.state = 2091;
							this.match(cobolParser.ROUNDED);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2097;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 3:
				{
				this.state = 2099;
				this.match(cobolParser.ADD);
				this.state = 2101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2100;
					this.separator();
					}
					}
					this.state = 2103;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2105;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORRESPONDING || _la === cobolParser.CORR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2106;
					this.separator();
					}
					}
					this.state = 2109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2111;
				this.add_grp();
				this.state = 2113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2112;
					this.separator();
					}
					}
					this.state = 2115;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2117;
				this.match(cobolParser.TO);
				this.state = 2119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2118;
					this.separator();
					}
					}
					this.state = 2121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2123;
				this.add_grp();
				this.state = 2131;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 283, this._ctx) ) {
				case 1:
					{
					this.state = 2125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2124;
						this.separator();
						}
						}
						this.state = 2127;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2129;
					this.match(cobolParser.ROUNDED);
					}
					break;
				}
				}
				break;
			}
			this.state = 2142;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 286, this._ctx) ) {
			case 1:
				{
				this.state = 2136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2135;
					this.separator();
					}
					}
					this.state = 2138;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2140;
				this.on_size_variants();
				}
				break;
			}
			this.state = 2151;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 288, this._ctx) ) {
			case 1:
				{
				this.state = 2145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2144;
					this.separator();
					}
					}
					this.state = 2147;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2149;
				this.match(cobolParser.END_ADD);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_grp(): Add_grpContext {
		let _localctx: Add_grpContext = new Add_grpContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, cobolParser.RULE_add_grp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2153;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_num(): Add_numContext {
		let _localctx: Add_numContext = new Add_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, cobolParser.RULE_add_num);
		try {
			this.state = 2157;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2155;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2156;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_statement(): Accept_statementContext {
		let _localctx: Accept_statementContext = new Accept_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, cobolParser.RULE_accept_statement);
		try {
			this.state = 2165;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 290, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2159;
				this.accept_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2160;
				this.accept_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2161;
				this.accept_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2162;
				this.accept_form4();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2163;
				this.accept_form5();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2164;
				this.accept_form6();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception_variants(): On_exception_variantsContext {
		let _localctx: On_exception_variantsContext = new On_exception_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, cobolParser.RULE_on_exception_variants);
		let _la: number;
		try {
			this.state = 2199;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.EXCEPTION:
			case cobolParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2167;
				this.on_exception();
				this.state = 2181;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 293, this._ctx) ) {
				case 1:
					{
					this.state = 2169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2168;
						this.separator();
						}
						}
						this.state = 2171;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2173;
					this.match(cobolParser.NOT);
					this.state = 2175;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2174;
						this.separator();
						}
						}
						this.state = 2177;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2179;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2183;
				this.match(cobolParser.NOT);
				this.state = 2185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2184;
					this.separator();
					}
					}
					this.state = 2187;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2189;
				this.on_exception();
				this.state = 2197;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 296, this._ctx) ) {
				case 1:
					{
					this.state = 2191;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2190;
						this.separator();
						}
						}
						this.state = 2193;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2195;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end_variants(): At_end_variantsContext {
		let _localctx: At_end_variantsContext = new At_end_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, cobolParser.RULE_at_end_variants);
		let _la: number;
		try {
			this.state = 2233;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AT:
			case cobolParser.END:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2201;
				this.at_end();
				this.state = 2215;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 300, this._ctx) ) {
				case 1:
					{
					this.state = 2203;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2202;
						this.separator();
						}
						}
						this.state = 2205;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2207;
					this.match(cobolParser.NOT);
					this.state = 2209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2208;
						this.separator();
						}
						}
						this.state = 2211;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2213;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2217;
				this.match(cobolParser.NOT);
				this.state = 2219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2218;
					this.separator();
					}
					}
					this.state = 2221;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2223;
				this.at_end();
				this.state = 2231;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
				case 1:
					{
					this.state = 2225;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2224;
						this.separator();
						}
						}
						this.state = 2227;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2229;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_size_variants(): On_size_variantsContext {
		let _localctx: On_size_variantsContext = new On_size_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, cobolParser.RULE_on_size_variants);
		let _la: number;
		try {
			this.state = 2267;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
			case cobolParser.SIZE:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2235;
				this.on_size();
				this.state = 2249;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 307, this._ctx) ) {
				case 1:
					{
					this.state = 2237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2236;
						this.separator();
						}
						}
						this.state = 2239;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2241;
					this.match(cobolParser.NOT);
					this.state = 2243;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2242;
						this.separator();
						}
						}
						this.state = 2245;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2247;
					this.on_size();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2251;
				this.match(cobolParser.NOT);
				this.state = 2253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2252;
					this.separator();
					}
					}
					this.state = 2255;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2257;
				this.on_size();
				this.state = 2265;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 310, this._ctx) ) {
				case 1:
					{
					this.state = 2259;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2258;
						this.separator();
						}
						}
						this.state = 2261;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2263;
					this.on_size();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_key_variants(): On_key_variantsContext {
		let _localctx: On_key_variantsContext = new On_key_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, cobolParser.RULE_on_key_variants);
		let _la: number;
		try {
			this.state = 2301;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INVALID:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2269;
				this.on_key();
				this.state = 2283;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 314, this._ctx) ) {
				case 1:
					{
					this.state = 2271;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2270;
						this.separator();
						}
						}
						this.state = 2273;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2275;
					this.match(cobolParser.NOT);
					this.state = 2277;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2276;
						this.separator();
						}
						}
						this.state = 2279;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2281;
					this.on_key();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2285;
				this.match(cobolParser.NOT);
				this.state = 2287;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2286;
					this.separator();
					}
					}
					this.state = 2289;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2291;
				this.on_key();
				this.state = 2299;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 317, this._ctx) ) {
				case 1:
					{
					this.state = 2293;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2292;
						this.separator();
						}
						}
						this.state = 2295;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2297;
					this.on_key();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form6(): Accept_form6Context {
		let _localctx: Accept_form6Context = new Accept_form6Context(this._ctx, this.state);
		this.enterRule(_localctx, 136, cobolParser.RULE_accept_form6);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2303;
			this.match(cobolParser.ACCEPT);
			this.state = 2305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2304;
				this.separator();
				}
				}
				this.state = 2307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2309;
			this.dest_item();
			this.state = 2311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2310;
				this.separator();
				}
				}
				this.state = 2313;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 2315;
				this.match(cobolParser.FROM);
				this.state = 2317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2316;
					this.separator();
					}
					}
					this.state = 2319;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2323;
			this.accept6_item();
			this.state = 2331;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 324, this._ctx) ) {
			case 1:
				{
				this.state = 2325;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2324;
					this.separator();
					}
					}
					this.state = 2327;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2329;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 2340;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 326, this._ctx) ) {
			case 1:
				{
				this.state = 2334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2333;
					this.separator();
					}
					}
					this.state = 2336;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2338;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept6_item(): Accept6_itemContext {
		let _localctx: Accept6_itemContext = new Accept6_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, cobolParser.RULE_accept6_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2342;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form1(): Accept_form1Context {
		let _localctx: Accept_form1Context = new Accept_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 140, cobolParser.RULE_accept_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2344;
			this.match(cobolParser.ACCEPT);
			this.state = 2346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2345;
				this.separator();
				}
				}
				this.state = 2348;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2350;
			this.dest_item();
			this.state = 2364;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 330, this._ctx) ) {
			case 1:
				{
				this.state = 2352;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2351;
					this.separator();
					}
					}
					this.state = 2354;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2356;
				this.match(cobolParser.FROM);
				this.state = 2358;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2357;
					this.separator();
					}
					}
					this.state = 2360;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2362;
				this.input_source();
				}
				break;
			}
			this.state = 2379;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 333, this._ctx) ) {
			case 1:
				{
				this.state = 2367;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2366;
					this.separator();
					}
					}
					this.state = 2369;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2371;
				this.match(cobolParser.WITH);
				this.state = 2373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2372;
					this.separator();
					}
					}
					this.state = 2375;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2377;
				this.match(cobolParser.CONVERSION);
				}
				break;
			}
			this.state = 2388;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 335, this._ctx) ) {
			case 1:
				{
				this.state = 2382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2381;
					this.separator();
					}
					}
					this.state = 2384;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2386;
				this.at_end_variants();
				}
				break;
			}
			this.state = 2397;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 337, this._ctx) ) {
			case 1:
				{
				this.state = 2391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2390;
					this.separator();
					}
					}
					this.state = 2393;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2395;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form2(): Accept_form2Context {
		let _localctx: Accept_form2Context = new Accept_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 142, cobolParser.RULE_accept_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2399;
			this.match(cobolParser.ACCEPT);
			this.state = 2401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2400;
				this.separator();
				}
				}
				this.state = 2403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2405;
			this.dest_item();
			this.state = 2407;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2406;
				this.separator();
				}
				}
				this.state = 2409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2411;
			this.match(cobolParser.FROM);
			this.state = 2413;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2412;
				this.separator();
				}
				}
				this.state = 2415;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2417;
			this.date_time();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3(): Accept_form3Context {
		let _localctx: Accept_form3Context = new Accept_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 144, cobolParser.RULE_accept_form3);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2419;
			this.match(cobolParser.ACCEPT);
			this.state = 2421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2420;
				this.separator();
				}
				}
				this.state = 2423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2425;
			this.dest_item();
			this.state = 2433;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2427;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2426;
						this.separator();
						}
						}
						this.state = 2429;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2431;
					this.accept_form3_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2435;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2446;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 346, this._ctx) ) {
			case 1:
				{
				this.state = 2438;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2437;
					this.separator();
					}
					}
					this.state = 2440;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2444;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 345, this._ctx) ) {
				case 1:
					{
					this.state = 2442;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 2443;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 2455;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 348, this._ctx) ) {
			case 1:
				{
				this.state = 2449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2448;
					this.separator();
					}
					}
					this.state = 2451;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2453;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4(): Accept_form4Context {
		let _localctx: Accept_form4Context = new Accept_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 146, cobolParser.RULE_accept_form4);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2457;
			this.match(cobolParser.ACCEPT);
			this.state = 2459;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2458;
				this.separator();
				}
				}
				this.state = 2461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2469;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTROL) {
				{
				this.state = 2463;
				this.match(cobolParser.CONTROL);
				this.state = 2465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2464;
					this.separator();
					}
					}
					this.state = 2467;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2471;
			this.match(cobolParser.KEY);
			this.state = 2473;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2472;
				this.separator();
				}
				}
				this.state = 2475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2483;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 2477;
				this.match(cobolParser.IN);
				this.state = 2479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2478;
					this.separator();
					}
					}
					this.state = 2481;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2485;
			this.key_dest_item();
			this.state = 2493;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2487;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2486;
						this.separator();
						}
						}
						this.state = 2489;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2491;
					this.accept_form4_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2495;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2506;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 359, this._ctx) ) {
			case 1:
				{
				this.state = 2498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2497;
					this.separator();
					}
					}
					this.state = 2500;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2504;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 358, this._ctx) ) {
				case 1:
					{
					this.state = 2502;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 2503;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 2515;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 361, this._ctx) ) {
			case 1:
				{
				this.state = 2509;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2508;
					this.separator();
					}
					}
					this.state = 2511;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2513;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form5(): Accept_form5Context {
		let _localctx: Accept_form5Context = new Accept_form5Context(this._ctx, this.state);
		this.enterRule(_localctx, 148, cobolParser.RULE_accept_form5);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2517;
			this.match(cobolParser.ACCEPT);
			this.state = 2519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2518;
				this.separator();
				}
				}
				this.state = 2521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2523;
			this.screen_name();
			this.state = 2531;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
			case 1:
				{
				this.state = 2525;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2524;
					this.separator();
					}
					}
					this.state = 2527;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2529;
				this.accept_at();
				}
				break;
			}
			this.state = 2540;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 366, this._ctx) ) {
			case 1:
				{
				this.state = 2534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2533;
					this.separator();
					}
					}
					this.state = 2536;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2538;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 2549;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 368, this._ctx) ) {
			case 1:
				{
				this.state = 2543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2542;
					this.separator();
					}
					}
					this.state = 2545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2547;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at(): Accept_atContext {
		let _localctx: Accept_atContext = new Accept_atContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, cobolParser.RULE_accept_at);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2557;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 2551;
				this.match(cobolParser.AT);
				this.state = 2553;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2552;
					this.separator();
					}
					}
					this.state = 2555;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2579;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				{
				this.state = 2559;
				this.accept_at_line();
				this.state = 2567;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 372, this._ctx) ) {
				case 1:
					{
					this.state = 2561;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2560;
						this.separator();
						}
						}
						this.state = 2563;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2565;
					this.accept_at_column();
					}
					break;
				}
				}
				break;
			case cobolParser.COLUMN:
				{
				this.state = 2569;
				this.accept_at_column();
				this.state = 2577;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
				case 1:
					{
					this.state = 2571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2570;
						this.separator();
						}
						}
						this.state = 2573;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2575;
					this.accept_at_line();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_line(): Accept_at_lineContext {
		let _localctx: Accept_at_lineContext = new Accept_at_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, cobolParser.RULE_accept_at_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2581;
			this.match(cobolParser.LINE);
			this.state = 2583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2582;
				this.separator();
				}
				}
				this.state = 2585;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 2587;
				this.match(cobolParser.NUMBER);
				this.state = 2589;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2588;
					this.separator();
					}
					}
					this.state = 2591;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2597;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 2595;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 2596;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_column(): Accept_at_columnContext {
		let _localctx: Accept_at_columnContext = new Accept_at_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, cobolParser.RULE_accept_at_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2599;
			this.match(cobolParser.COLUMN);
			this.state = 2601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2600;
				this.separator();
				}
				}
				this.state = 2603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2611;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 2605;
				this.match(cobolParser.NUMBER);
				this.state = 2607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2606;
					this.separator();
					}
					}
					this.state = 2609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2615;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 2613;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 2614;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4_clause(): Accept_form4_clauseContext {
		let _localctx: Accept_form4_clauseContext = new Accept_form4_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, cobolParser.RULE_accept_form4_clause);
		let _la: number;
		try {
			this.state = 2709;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 2617;
					this.match(cobolParser.FROM);
					this.state = 2619;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2618;
						this.separator();
						}
						}
						this.state = 2621;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2625;
				this.match(cobolParser.LINE);
				this.state = 2633;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 387, this._ctx) ) {
				case 1:
					{
					this.state = 2627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2626;
						this.separator();
						}
						}
						this.state = 2629;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2631;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 2636;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2635;
					this.separator();
					}
					}
					this.state = 2638;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2640;
				this.number_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 2642;
					this.match(cobolParser.FROM);
					this.state = 2644;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2643;
						this.separator();
						}
						}
						this.state = 2646;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2650;
				this.match(cobolParser.COLUMN);
				this.state = 2658;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 392, this._ctx) ) {
				case 1:
					{
					this.state = 2652;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2651;
						this.separator();
						}
						}
						this.state = 2654;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2656;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 2661;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2660;
					this.separator();
					}
					}
					this.state = 2663;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2665;
				this.number_value();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2667;
				this.match(cobolParser.ERASE);
				this.state = 2691;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 399, this._ctx) ) {
				case 1:
					{
					this.state = 2669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2668;
						this.separator();
						}
						}
						this.state = 2671;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2679;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 2673;
						this.match(cobolParser.TO);
						this.state = 2675;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2674;
							this.separator();
							}
							}
							this.state = 2677;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					this.state = 2681;
					this.match(cobolParser.END);
					this.state = 2689;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
					case 1:
						{
						this.state = 2683;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2682;
							this.separator();
							}
							}
							this.state = 2685;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 2687;
						this.match(cobolParser.OF);
						}
						break;
					}
					}
					break;
				}
				this.state = 2694;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2693;
					this.separator();
					}
					}
					this.state = 2696;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2698;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2700;
					this.match(cobolParser.WITH);
					this.state = 2702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2701;
						this.separator();
						}
						}
						this.state = 2704;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2708;
				this.match(cobolParser.BELL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3_clause(): Accept_form3_clauseContext {
		let _localctx: Accept_form3_clauseContext = new Accept_form3_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, cobolParser.RULE_accept_form3_clause);
		let _la: number;
		try {
			this.state = 2800;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 421, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2711;
				this.accept_form4_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2712;
				this.match(cobolParser.UNDERLINED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2713;
				this.match(cobolParser.BOLD);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2714;
					this.match(cobolParser.WITH);
					this.state = 2716;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2715;
						this.separator();
						}
						}
						this.state = 2718;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2722;
				this.match(cobolParser.BLINKING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2723;
				this.match(cobolParser.PROTECTED);
				this.state = 2731;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 407, this._ctx) ) {
				case 1:
					{
					this.state = 2725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2724;
						this.separator();
						}
						}
						this.state = 2727;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2729;
					this.protected_value();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2739;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2733;
					this.match(cobolParser.WITH);
					this.state = 2735;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2734;
						this.separator();
						}
						}
						this.state = 2737;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2741;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2742;
				this.match(cobolParser.REVERSED);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2743;
					this.match(cobolParser.WITH);
					this.state = 2745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2744;
						this.separator();
						}
						}
						this.state = 2747;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2751;
				this.match(cobolParser.NO);
				this.state = 2753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2752;
					this.separator();
					}
					}
					this.state = 2755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2757;
				this.match(cobolParser.ECHO);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2759;
				this.match(cobolParser.DEFAULT);
				this.state = 2761;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2760;
					this.separator();
					}
					}
					this.state = 2763;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2765;
					this.match(cobolParser.IS);
					this.state = 2767;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2766;
						this.separator();
						}
						}
						this.state = 2769;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2773;
				this.def_value();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTROL) {
					{
					this.state = 2775;
					this.match(cobolParser.CONTROL);
					this.state = 2777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2776;
						this.separator();
						}
						}
						this.state = 2779;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2783;
				this.match(cobolParser.KEY);
				this.state = 2791;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
				case 1:
					{
					this.state = 2785;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2784;
						this.separator();
						}
						}
						this.state = 2787;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2789;
					this.match(cobolParser.IN);
					}
					break;
				}
				this.state = 2794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2793;
					this.separator();
					}
					}
					this.state = 2796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2798;
				this.key_dest_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_dest_item(): Key_dest_itemContext {
		let _localctx: Key_dest_itemContext = new Key_dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, cobolParser.RULE_key_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2802;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public def_value(): Def_valueContext {
		let _localctx: Def_valueContext = new Def_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, cobolParser.RULE_def_value);
		let _la: number;
		try {
			this.state = 2817;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2804;
				this.figurative_constant();
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2805;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2806;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CURRENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2807;
				this.match(cobolParser.CURRENT);
				this.state = 2815;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 423, this._ctx) ) {
				case 1:
					{
					this.state = 2809;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2808;
						this.separator();
						}
						}
						this.state = 2811;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2813;
					this.match(cobolParser.VALUE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public protected_value(): Protected_valueContext {
		let _localctx: Protected_valueContext = new Protected_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, cobolParser.RULE_protected_value);
		let _la: number;
		try {
			this.state = 2877;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 436, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2819;
				this.match(cobolParser.SIZE);
				this.state = 2821;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2820;
					this.separator();
					}
					}
					this.state = 2823;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2825;
				this.prot_size_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2827;
					this.match(cobolParser.WITH);
					this.state = 2829;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2828;
						this.separator();
						}
						}
						this.state = 2831;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2835;
				this.match(cobolParser.AUTOTERMINATE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2836;
					this.match(cobolParser.WITH);
					this.state = 2838;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2837;
						this.separator();
						}
						}
						this.state = 2840;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2844;
				this.match(cobolParser.NO);
				this.state = 2846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2845;
					this.separator();
					}
					}
					this.state = 2848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2850;
				this.match(cobolParser.BLANK);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2852;
					this.match(cobolParser.WITH);
					this.state = 2854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2853;
						this.separator();
						}
						}
						this.state = 2856;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2860;
				this.match(cobolParser.EDITING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2867;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2861;
					this.match(cobolParser.WITH);
					this.state = 2863;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2862;
						this.separator();
						}
						}
						this.state = 2865;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 2869;
				this.match(cobolParser.FILLER);
				this.state = 2871;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2870;
					this.separator();
					}
					}
					this.state = 2873;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2875;
				this.prot_fill_lit();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_fill_lit(): Prot_fill_litContext {
		let _localctx: Prot_fill_litContext = new Prot_fill_litContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, cobolParser.RULE_prot_fill_lit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2879;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_size_value(): Prot_size_valueContext {
		let _localctx: Prot_size_valueContext = new Prot_size_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, cobolParser.RULE_prot_size_value);
		try {
			this.state = 2883;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2881;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2882;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number_value(): Number_valueContext {
		let _localctx: Number_valueContext = new Number_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, cobolParser.RULE_number_value);
		let _la: number;
		try {
			this.state = 2914;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2885;
				this.line_num();
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2886;
				this.qualified_data_item();
				this.state = 2902;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 441, this._ctx) ) {
				case 1:
					{
					this.state = 2888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2887;
						this.separator();
						}
						}
						this.state = 2890;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2892;
					this.match(cobolParser.PLUS);
					this.state = 2900;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
					case 1:
						{
						this.state = 2894;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2893;
							this.separator();
							}
							}
							this.state = 2896;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 2898;
						this.line_num();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2904;
				this.match(cobolParser.PLUS);
				this.state = 2912;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
				case 1:
					{
					this.state = 2906;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2905;
						this.separator();
						}
						}
						this.state = 2908;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2910;
					this.line_num();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_time(): Date_timeContext {
		let _localctx: Date_timeContext = new Date_timeContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, cobolParser.RULE_date_time);
		let _la: number;
		try {
			this.state = 2938;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2916;
				this.match(cobolParser.DATE);
				this.state = 2924;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 446, this._ctx) ) {
				case 1:
					{
					this.state = 2918;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2917;
						this.separator();
						}
						}
						this.state = 2920;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2922;
					this.match(cobolParser.YYYYMMDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2926;
				this.match(cobolParser.DAY);
				this.state = 2934;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 448, this._ctx) ) {
				case 1:
					{
					this.state = 2928;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2927;
						this.separator();
						}
						}
						this.state = 2930;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 2932;
					this.match(cobolParser.YYYYDDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY_OF_WEEK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2936;
				this.match(cobolParser.DAY_OF_WEEK);
				}
				break;
			case cobolParser.TIME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2937;
				this.match(cobolParser.TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dest_item(): Dest_itemContext {
		let _localctx: Dest_itemContext = new Dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, cobolParser.RULE_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2940;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_source(): Input_sourceContext {
		let _localctx: Input_sourceContext = new Input_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, cobolParser.RULE_input_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2942;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end(): At_endContext {
		let _localctx: At_endContext = new At_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, cobolParser.RULE_at_end);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2950;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 2944;
				this.match(cobolParser.AT);
				this.state = 2946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2945;
					this.separator();
					}
					}
					this.state = 2948;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2952;
			this.match(cobolParser.END);
			this.state = 2960;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 453, this._ctx) ) {
			case 1:
				{
				this.state = 2954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2953;
					this.separator();
					}
					}
					this.state = 2956;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2958;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception(): On_exceptionContext {
		let _localctx: On_exceptionContext = new On_exceptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, cobolParser.RULE_on_exception);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 2962;
				this.match(cobolParser.ON);
				this.state = 2964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2963;
					this.separator();
					}
					}
					this.state = 2966;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2970;
			this.match(cobolParser.EXCEPTION);
			this.state = 2978;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 457, this._ctx) ) {
			case 1:
				{
				this.state = 2972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2971;
					this.separator();
					}
					}
					this.state = 2974;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 2976;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_size(): On_sizeContext {
		let _localctx: On_sizeContext = new On_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, cobolParser.RULE_on_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2986;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 2980;
				this.match(cobolParser.ON);
				this.state = 2982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2981;
					this.separator();
					}
					}
					this.state = 2984;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 2988;
			this.match(cobolParser.SIZE);
			this.state = 2990;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2989;
				this.separator();
				}
				}
				this.state = 2992;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 2994;
			this.match(cobolParser.ERROR);
			this.state = 3002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
			case 1:
				{
				this.state = 2996;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2995;
					this.separator();
					}
					}
					this.state = 2998;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3000;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_key(): On_keyContext {
		let _localctx: On_keyContext = new On_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, cobolParser.RULE_on_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3004;
			this.match(cobolParser.INVALID);
			this.state = 3012;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 464, this._ctx) ) {
			case 1:
				{
				this.state = 3006;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3005;
					this.separator();
					}
					}
					this.state = 3008;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3010;
				this.match(cobolParser.KEY);
				}
				break;
			}
			this.state = 3021;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 466, this._ctx) ) {
			case 1:
				{
				this.state = 3015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3014;
					this.separator();
					}
					}
					this.state = 3017;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3019;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_division(): Data_divisionContext {
		let _localctx: Data_divisionContext = new Data_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, cobolParser.RULE_data_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3023;
			this.match(cobolParser.DATA);
			this.state = 3025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3024;
				this.separator();
				}
				}
				this.state = 3027;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3029;
			this.match(cobolParser.DIVISION);
			this.state = 3033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3030;
				this.separator();
				}
				}
				this.state = 3035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3036;
			this.match(cobolParser.DOT_);
			this.state = 3040;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3037;
					this.separator();
					}
					}
				}
				this.state = 3042;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			}
			this.state = 3050;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 3043;
				this.file_section();
				this.state = 3047;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3044;
						this.separator();
						}
						}
					}
					this.state = 3049;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
				}
				}
			}

			this.state = 3059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WORKING_STORAGE) {
				{
				this.state = 3052;
				this.working_storage_section();
				this.state = 3056;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 472, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3053;
						this.separator();
						}
						}
					}
					this.state = 3058;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 472, this._ctx);
				}
				}
			}

			this.state = 3068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINKAGE) {
				{
				this.state = 3061;
				this.linkage_section();
				this.state = 3065;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3062;
						this.separator();
						}
						}
					}
					this.state = 3067;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
				}
				}
			}

			this.state = 3077;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REPORT) {
				{
				this.state = 3070;
				this.report_section();
				this.state = 3074;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3071;
						this.separator();
						}
						}
					}
					this.state = 3076;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
				}
				}
			}

			this.state = 3086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SCREEN) {
				{
				this.state = 3079;
				this.screen_section();
				this.state = 3083;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3080;
						this.separator();
						}
						}
					}
					this.state = 3085;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_section(): File_sectionContext {
		let _localctx: File_sectionContext = new File_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, cobolParser.RULE_file_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3088;
			this.match(cobolParser.FILE);
			this.state = 3090;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3089;
				this.separator();
				}
				}
				this.state = 3092;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3094;
			this.match(cobolParser.SECTION);
			this.state = 3098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3095;
				this.separator();
				}
				}
				this.state = 3100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3101;
			this.match(cobolParser.DOT_);
			this.state = 3105;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3102;
					this.separator();
					}
					}
				}
				this.state = 3107;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
			}
			this.state = 3145;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.FD || _la === cobolParser.RD || _la === cobolParser.SD) {
				{
				{
				this.state = 3135;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FD:
					{
					this.state = 3108;
					this.file_description_entry();
					this.state = 3118;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3112;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
								{
								{
								this.state = 3109;
								this.separator();
								}
								}
								this.state = 3114;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 3115;
							this.record_description_entry();
							}
							}
						}
						this.state = 3120;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
					}
					}
					break;
				case cobolParser.RD:
					{
					this.state = 3121;
					this.report_description_entry();
					}
					break;
				case cobolParser.SD:
					{
					this.state = 3122;
					this.sort_merge_file_description_entry();
					this.state = 3132;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 486, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3126;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
								{
								{
								this.state = 3123;
								this.separator();
								}
								}
								this.state = 3128;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 3129;
							this.record_description_entry();
							}
							}
						}
						this.state = 3134;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 486, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3140;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3137;
						this.separator();
						}
						}
					}
					this.state = 3142;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
				}
				}
				}
				this.state = 3147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public working_storage_section(): Working_storage_sectionContext {
		let _localctx: Working_storage_sectionContext = new Working_storage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, cobolParser.RULE_working_storage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3148;
			this.match(cobolParser.WORKING_STORAGE);
			this.state = 3150;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3149;
				this.separator();
				}
				}
				this.state = 3152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3154;
			this.match(cobolParser.SECTION);
			this.state = 3158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3155;
				this.separator();
				}
				}
				this.state = 3160;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3161;
			this.match(cobolParser.DOT_);
			this.state = 3165;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 492, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3162;
					this.separator();
					}
					}
				}
				this.state = 3167;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 492, this._ctx);
			}
			this.state = 3177;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 3168;
				this.record_description_entry();
				this.state = 3172;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 493, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3169;
						this.separator();
						}
						}
					}
					this.state = 3174;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 493, this._ctx);
				}
				}
				}
				this.state = 3179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linkage_section(): Linkage_sectionContext {
		let _localctx: Linkage_sectionContext = new Linkage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, cobolParser.RULE_linkage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3180;
			this.match(cobolParser.LINKAGE);
			this.state = 3182;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3181;
				this.separator();
				}
				}
				this.state = 3184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3186;
			this.match(cobolParser.SECTION);
			this.state = 3190;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3187;
				this.separator();
				}
				}
				this.state = 3192;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3193;
			this.match(cobolParser.DOT_);
			this.state = 3197;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3194;
					this.separator();
					}
					}
				}
				this.state = 3199;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
			}
			this.state = 3209;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 3200;
				this.record_description_entry();
				this.state = 3204;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3201;
						this.separator();
						}
						}
					}
					this.state = 3206;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
				}
				}
				}
				this.state = 3211;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_section(): Report_sectionContext {
		let _localctx: Report_sectionContext = new Report_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, cobolParser.RULE_report_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3212;
			this.match(cobolParser.REPORT);
			this.state = 3214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3213;
				this.separator();
				}
				}
				this.state = 3216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3218;
			this.match(cobolParser.SECTION);
			this.state = 3222;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3219;
				this.separator();
				}
				}
				this.state = 3224;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3225;
			this.match(cobolParser.DOT_);
			this.state = 3229;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3226;
					this.separator();
					}
					}
				}
				this.state = 3231;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			}
			this.state = 3253;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.RD) {
				{
				{
				this.state = 3232;
				this.report_description_entry();
				this.state = 3242;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3236;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
							{
							{
							this.state = 3233;
							this.separator();
							}
							}
							this.state = 3238;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3239;
						this.report_group_description_entry();
						}
						}
					}
					this.state = 3244;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
				}
				this.state = 3248;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 505, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3245;
						this.separator();
						}
						}
					}
					this.state = 3250;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 505, this._ctx);
				}
				}
				}
				this.state = 3255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_section(): Screen_sectionContext {
		let _localctx: Screen_sectionContext = new Screen_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, cobolParser.RULE_screen_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3256;
			this.match(cobolParser.SCREEN);
			this.state = 3258;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3257;
				this.separator();
				}
				}
				this.state = 3260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3262;
			this.match(cobolParser.SECTION);
			this.state = 3266;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3263;
				this.separator();
				}
				}
				this.state = 3268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3269;
			this.match(cobolParser.DOT_);
			this.state = 3273;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3270;
					this.separator();
					}
					}
				}
				this.state = 3275;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
			}
			this.state = 3285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 3276;
				this.screen_description_entry();
				this.state = 3280;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3277;
						this.separator();
						}
						}
					}
					this.state = 3282;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
				}
				}
				}
				this.state = 3287;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_description_entry(): File_description_entryContext {
		let _localctx: File_description_entryContext = new File_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, cobolParser.RULE_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3288;
			this.match(cobolParser.FD);
			this.state = 3290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3289;
				this.separator();
				}
				}
				this.state = 3292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3294;
			this.file_name();
			this.state = 3298;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3295;
				this.separator();
				}
				}
				this.state = 3300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3310;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ACCESS || _la === cobolParser.ALTERNATE || _la === cobolParser.BLOCK || _la === cobolParser.CODE_SET || _la === cobolParser.DATA || _la === cobolParser.DYNAMIC || ((((_la - 159)) & ~0x1F) === 0 && ((1 << (_la - 159)) & ((1 << (cobolParser.EXTERNAL - 159)) | (1 << (cobolParser.FILE - 159)) | (1 << (cobolParser.GLOBAL - 159)))) !== 0) || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & ((1 << (cobolParser.IS - 205)) | (1 << (cobolParser.LABEL - 205)) | (1 << (cobolParser.LINAGE - 205)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (cobolParser.RANDOM - 281)) | (1 << (cobolParser.RECORD - 281)) | (1 << (cobolParser.REPORT - 281)) | (1 << (cobolParser.REPORTS - 281)))) !== 0) || _la === cobolParser.SEQUENTIAL || _la === cobolParser.STATUS || _la === cobolParser.VALUE) {
				{
				{
				this.state = 3301;
				this.fd_clause();
				this.state = 3305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 3302;
					this.separator();
					}
					}
					this.state = 3307;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3313;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext {
		let _localctx: Sort_merge_file_description_entryContext = new Sort_merge_file_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, cobolParser.RULE_sort_merge_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3315;
			this.match(cobolParser.SD);
			this.state = 3317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3316;
				this.separator();
				}
				}
				this.state = 3319;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3321;
			this.file_name();
			this.state = 3325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3322;
				this.separator();
				}
				}
				this.state = 3327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.DATA || _la === cobolParser.RECORD) {
				{
				{
				this.state = 3328;
				this.sd_clause();
				this.state = 3332;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 3329;
					this.separator();
					}
					}
					this.state = 3334;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3339;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3340;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_description_entry(): Report_description_entryContext {
		let _localctx: Report_description_entryContext = new Report_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, cobolParser.RULE_report_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3342;
			this.match(cobolParser.RD);
			this.state = 3344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3343;
				this.separator();
				}
				}
				this.state = 3346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3348;
			this.report_name();
			this.state = 3352;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3349;
				this.separator();
				}
				}
				this.state = 3354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 59)) & ~0x1F) === 0 && ((1 << (_la - 59)) & ((1 << (cobolParser.CODE - 59)) | (1 << (cobolParser.CONTROL - 59)) | (1 << (cobolParser.CONTROLS - 59)))) !== 0) || _la === cobolParser.GLOBAL || _la === cobolParser.IS || _la === cobolParser.PAGE) {
				{
				{
				this.state = 3355;
				this.rd_clause();
				this.state = 3359;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 3356;
					this.separator();
					}
					}
					this.state = 3361;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3367;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fd_clause(): Fd_clauseContext {
		let _localctx: Fd_clauseContext = new Fd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, cobolParser.RULE_fd_clause);
		let _la: number;
		try {
			this.state = 3398;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 528, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3369;
					this.match(cobolParser.IS);
					this.state = 3371;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3370;
						this.separator();
						}
						}
						this.state = 3373;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3377;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3384;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3378;
					this.match(cobolParser.IS);
					this.state = 3380;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3379;
						this.separator();
						}
						}
						this.state = 3382;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3386;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3387;
				this.block_contains();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3388;
				this.record();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3389;
				this.label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3390;
				this.value_of_id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3391;
				this.data_rec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3392;
				this.linage();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3393;
				this.report_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3394;
				this.code_set();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3395;
				this.access_mode();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3396;
				this.record_key();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3397;
				this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_description_entry(): Record_description_entryContext {
		let _localctx: Record_description_entryContext = new Record_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, cobolParser.RULE_record_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3400;
			this.data_description_entry();
			this.state = 3410;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3404;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 3401;
						this.separator();
						}
						}
						this.state = 3406;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3407;
					this.data_description_entry();
					}
					}
				}
				this.state = 3412;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_entry(): Data_description_entryContext {
		let _localctx: Data_description_entryContext = new Data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, cobolParser.RULE_data_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3413;
			this.level_number();
			this.state = 3423;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 533, this._ctx) ) {
			case 1:
				{
				this.state = 3415;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3414;
					this.separator();
					}
					}
					this.state = 3417;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3421;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 3419;
					this.data_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 3420;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 3438;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 536, this._ctx) ) {
			case 1:
				{
				this.state = 3426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3425;
					this.separator();
					}
					}
					this.state = 3428;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3430;
				this.match(cobolParser.REDEFINES);
				this.state = 3432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3431;
					this.separator();
					}
					}
					this.state = 3434;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3436;
				this.other_data_item();
				}
				break;
			}
			this.state = 3449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3441;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3440;
					this.separator();
					}
					}
					this.state = 3443;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3445;
				this.data_description_clause();
				}
				}
				this.state = 3451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3452;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public level_number(): Level_numberContext {
		let _localctx: Level_numberContext = new Level_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, cobolParser.RULE_level_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3454;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_clause(): Data_description_clauseContext {
		let _localctx: Data_description_clauseContext = new Data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, cobolParser.RULE_data_description_clause);
		let _la: number;
		try {
			this.state = 3516;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 550, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3456;
					this.match(cobolParser.IS);
					this.state = 3458;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3457;
						this.separator();
						}
						}
						this.state = 3460;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3464;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3465;
					this.match(cobolParser.IS);
					this.state = 3467;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3466;
						this.separator();
						}
						}
						this.state = 3469;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3473;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3474;
				this.picture();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3475;
				this.usage();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3476;
				this.sign_is();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3477;
				this.occurs();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3478;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.SYNC || _la === cobolParser.SYNCHRONIZED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3486;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 544, this._ctx) ) {
				case 1:
					{
					this.state = 3480;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3479;
						this.separator();
						}
						}
						this.state = 3482;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3484;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LEFT || _la === cobolParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3488;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3496;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 546, this._ctx) ) {
				case 1:
					{
					this.state = 3490;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3489;
						this.separator();
						}
						}
						this.state = 3492;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3494;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3498;
				this.match(cobolParser.BLANK);
				this.state = 3500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3499;
					this.separator();
					}
					}
					this.state = 3502;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 3504;
					this.match(cobolParser.WHEN);
					this.state = 3506;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3505;
						this.separator();
						}
						}
						this.state = 3508;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3512;
				this.match(cobolParser.ZERO);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3514;
				this.value_is();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3515;
				this.renames();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renames(): RenamesContext {
		let _localctx: RenamesContext = new RenamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, cobolParser.RULE_renames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3518;
			this.match(cobolParser.RENAMES);
			this.state = 3520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3519;
				this.separator();
				}
				}
				this.state = 3522;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3524;
			this.rename_start();
			this.state = 3538;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 554, this._ctx) ) {
			case 1:
				{
				this.state = 3526;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3525;
					this.separator();
					}
					}
					this.state = 3528;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3530;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3531;
					this.separator();
					}
					}
					this.state = 3534;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3536;
				this.rename_end();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_start(): Rename_startContext {
		let _localctx: Rename_startContext = new Rename_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, cobolParser.RULE_rename_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3540;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_end(): Rename_endContext {
		let _localctx: Rename_endContext = new Rename_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, cobolParser.RULE_rename_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3542;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is(): Value_isContext {
		let _localctx: Value_isContext = new Value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, cobolParser.RULE_value_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3564;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.VALUE:
				{
				this.state = 3544;
				this.match(cobolParser.VALUE);
				this.state = 3552;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 556, this._ctx) ) {
				case 1:
					{
					this.state = 3546;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3545;
						this.separator();
						}
						}
						this.state = 3548;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3550;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.VALUES:
				{
				this.state = 3554;
				this.match(cobolParser.VALUES);
				this.state = 3562;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 558, this._ctx) ) {
				case 1:
					{
					this.state = 3556;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3555;
						this.separator();
						}
						}
						this.state = 3558;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3560;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3567;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3566;
				this.separator();
				}
				}
				this.state = 3569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3571;
			this.value_is_definition();
			this.state = 3581;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3573;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3572;
						this.separator();
						}
						}
						this.state = 3575;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3577;
					this.value_is_definition();
					}
					}
				}
				this.state = 3583;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition(): Value_is_definitionContext {
		let _localctx: Value_is_definitionContext = new Value_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, cobolParser.RULE_value_is_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3584;
			this.value_is_definition_part();
			this.state = 3592;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 564, this._ctx) ) {
			case 1:
				{
				this.state = 3586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3585;
					this.separator();
					}
					}
					this.state = 3588;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3590;
				this.value_is_definition_thru();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_part(): Value_is_definition_partContext {
		let _localctx: Value_is_definition_partContext = new Value_is_definition_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, cobolParser.RULE_value_is_definition_part);
		let _la: number;
		try {
			this.state = 3611;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3594;
				this.value_is_literal();
				}
				break;
			case cobolParser.REFERENCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3595;
				this.match(cobolParser.REFERENCE);
				this.state = 3597;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3596;
					this.separator();
					}
					}
					this.state = 3599;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3601;
				this.ref_data_name();
				}
				break;
			case cobolParser.EXTERNAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3603;
				this.match(cobolParser.EXTERNAL);
				this.state = 3605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3604;
					this.separator();
					}
					}
					this.state = 3607;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3609;
				this.external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_thru(): Value_is_definition_thruContext {
		let _localctx: Value_is_definition_thruContext = new Value_is_definition_thruContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, cobolParser.RULE_value_is_definition_thru);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3613;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3615;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3614;
				this.separator();
				}
				}
				this.state = 3617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3619;
			this.value_is_definition_part();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public external_name(): External_nameContext {
		let _localctx: External_nameContext = new External_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, cobolParser.RULE_external_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3621;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ref_data_name(): Ref_data_nameContext {
		let _localctx: Ref_data_nameContext = new Ref_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, cobolParser.RULE_ref_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3623;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_literal(): Value_is_literalContext {
		let _localctx: Value_is_literalContext = new Value_is_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, cobolParser.RULE_value_is_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3625;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public occurs(): OccursContext {
		let _localctx: OccursContext = new OccursContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, cobolParser.RULE_occurs);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3627;
			this.match(cobolParser.OCCURS);
			this.state = 3629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3628;
				this.separator();
				}
				}
				this.state = 3631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3633;
			this.times_definition();
			this.state = 3643;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3635;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3634;
						this.separator();
						}
						}
						this.state = 3637;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3639;
					this.key_is();
					}
					}
				}
				this.state = 3645;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
			}
			this.state = 3653;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 573, this._ctx) ) {
			case 1:
				{
				this.state = 3647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3646;
					this.separator();
					}
					}
					this.state = 3649;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3651;
				this.indexed_by();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexed_by(): Indexed_byContext {
		let _localctx: Indexed_byContext = new Indexed_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, cobolParser.RULE_indexed_by);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3655;
			this.match(cobolParser.INDEXED);
			this.state = 3657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3656;
				this.separator();
				}
				}
				this.state = 3659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BY) {
				{
				this.state = 3661;
				this.match(cobolParser.BY);
				this.state = 3663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3662;
					this.separator();
					}
					}
					this.state = 3665;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 3669;
			this.ind_name();
			this.state = 3679;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3671;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3670;
						this.separator();
						}
						}
						this.state = 3673;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3675;
					this.ind_name();
					}
					}
				}
				this.state = 3681;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ind_name(): Ind_nameContext {
		let _localctx: Ind_nameContext = new Ind_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, cobolParser.RULE_ind_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3682;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_is(): Key_isContext {
		let _localctx: Key_isContext = new Key_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, cobolParser.RULE_key_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3684;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3686;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3685;
				this.separator();
				}
				}
				this.state = 3688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 3696;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 3690;
				this.match(cobolParser.KEY);
				this.state = 3692;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3691;
					this.separator();
					}
					}
					this.state = 3694;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 3704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3698;
				this.match(cobolParser.IS);
				this.state = 3700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3699;
					this.separator();
					}
					}
					this.state = 3702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 3706;
			this.key_name();
			this.state = 3716;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3708;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3707;
						this.separator();
						}
						}
						this.state = 3710;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3712;
					this.key_name();
					}
					}
				}
				this.state = 3718;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_name(): Key_nameContext {
		let _localctx: Key_nameContext = new Key_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, cobolParser.RULE_key_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3719;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public times_definition(): Times_definitionContext {
		let _localctx: Times_definitionContext = new Times_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, cobolParser.RULE_times_definition);
		let _la: number;
		try {
			this.state = 3769;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 594, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3721;
				this.table_size();
				this.state = 3723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3722;
					this.separator();
					}
					}
					this.state = 3725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3727;
				this.match(cobolParser.TIMES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3729;
				this.min_times();
				this.state = 3731;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3730;
					this.separator();
					}
					}
					this.state = 3733;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3735;
				this.match(cobolParser.TO);
				this.state = 3737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3736;
					this.separator();
					}
					}
					this.state = 3739;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3741;
				this.max_times();
				this.state = 3743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3742;
					this.separator();
					}
					}
					this.state = 3745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3747;
				this.match(cobolParser.TIMES);
				this.state = 3749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3748;
					this.separator();
					}
					}
					this.state = 3751;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3753;
				this.match(cobolParser.DEPENDING);
				this.state = 3755;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3754;
					this.separator();
					}
					}
					this.state = 3757;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 3759;
					this.match(cobolParser.ON);
					this.state = 3761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3760;
						this.separator();
						}
						}
						this.state = 3763;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3767;
				this.depending_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_size(): Table_sizeContext {
		let _localctx: Table_sizeContext = new Table_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, cobolParser.RULE_table_size);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3771;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public min_times(): Min_timesContext {
		let _localctx: Min_timesContext = new Min_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, cobolParser.RULE_min_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3773;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public max_times(): Max_timesContext {
		let _localctx: Max_timesContext = new Max_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, cobolParser.RULE_max_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3775;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_description_entry(): Report_group_description_entryContext {
		let _localctx: Report_group_description_entryContext = new Report_group_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, cobolParser.RULE_report_group_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3777;
			this.report_group_data_description();
			this.state = 3787;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 596, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3781;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 3778;
						this.separator();
						}
						}
						this.state = 3783;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3784;
					this.report_group_data_description();
					}
					}
				}
				this.state = 3789;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 596, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description(): Report_group_data_descriptionContext {
		let _localctx: Report_group_data_descriptionContext = new Report_group_data_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, cobolParser.RULE_report_group_data_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3790;
			this.level_number();
			this.state = 3798;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 598, this._ctx) ) {
			case 1:
				{
				this.state = 3792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3791;
					this.separator();
					}
					}
					this.state = 3794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3796;
				this.data_name();
				}
				break;
			}
			this.state = 3809;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 3801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3800;
					this.separator();
					}
					}
					this.state = 3803;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3805;
				this.report_group_data_description_clause();
				}
				}
				this.state = 3811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3812;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description_clause(): Report_group_data_description_clauseContext {
		let _localctx: Report_group_data_description_clauseContext = new Report_group_data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, cobolParser.RULE_report_group_data_description_clause);
		let _la: number;
		try {
			this.state = 3988;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3814;
				this.match(cobolParser.LINE);
				this.state = 3816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3815;
					this.separator();
					}
					}
					this.state = 3818;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 3820;
					this.match(cobolParser.NUMBER);
					this.state = 3822;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3821;
						this.separator();
						}
						}
						this.state = 3824;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3828;
					this.match(cobolParser.IS);
					this.state = 3830;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3829;
						this.separator();
						}
						}
						this.state = 3832;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3836;
				this.line_num_definition();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3838;
				this.match(cobolParser.NEXT);
				this.state = 3840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3839;
					this.separator();
					}
					}
					this.state = 3842;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3844;
				this.match(cobolParser.GROUP);
				this.state = 3846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3845;
					this.separator();
					}
					}
					this.state = 3848;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3850;
					this.match(cobolParser.IS);
					this.state = 3852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3851;
						this.separator();
						}
						}
						this.state = 3854;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3858;
				this.next_group_definition();
				}
				break;
			case cobolParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3860;
				this.match(cobolParser.TYPE);
				this.state = 3862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3861;
					this.separator();
					}
					}
					this.state = 3864;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3866;
					this.match(cobolParser.IS);
					this.state = 3868;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3867;
						this.separator();
						}
						}
						this.state = 3870;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3874;
				this.type_is_definition();
				}
				break;
			case cobolParser.DISPLAY:
			case cobolParser.USAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 3876;
					this.match(cobolParser.USAGE);
					this.state = 3878;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3877;
						this.separator();
						}
						}
						this.state = 3880;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 3882;
						this.match(cobolParser.IS);
						this.state = 3884;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3883;
							this.separator();
							}
							}
							this.state = 3886;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					}
				}

				this.state = 3892;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.BLANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3893;
				this.match(cobolParser.BLANK);
				this.state = 3895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3894;
					this.separator();
					}
					}
					this.state = 3897;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3905;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 3899;
					this.match(cobolParser.WHEN);
					this.state = 3901;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3900;
						this.separator();
						}
						}
						this.state = 3903;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3907;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.COLUMN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3909;
				this.match(cobolParser.COLUMN);
				this.state = 3911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3910;
					this.separator();
					}
					}
					this.state = 3913;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 3915;
					this.match(cobolParser.NUMBER);
					this.state = 3917;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3916;
						this.separator();
						}
						}
						this.state = 3919;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3923;
					this.match(cobolParser.IS);
					this.state = 3925;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3924;
						this.separator();
						}
						}
						this.state = 3927;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3931;
				this.column_number();
				}
				break;
			case cobolParser.GROUP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3933;
				this.match(cobolParser.GROUP);
				this.state = 3941;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 626, this._ctx) ) {
				case 1:
					{
					this.state = 3935;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3934;
						this.separator();
						}
						}
						this.state = 3937;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3939;
					this.match(cobolParser.INDICATE);
					}
					break;
				}
				}
				break;
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3943;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3951;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 628, this._ctx) ) {
				case 1:
					{
					this.state = 3945;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3944;
						this.separator();
						}
						}
						this.state = 3947;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3949;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;
			case cobolParser.PIC:
			case cobolParser.PICTURE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3953;
				this.picture();
				}
				break;
			case cobolParser.LEADING:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3954;
				this.sign_is();
				}
				break;
			case cobolParser.SOURCE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3955;
				this.match(cobolParser.SOURCE);
				this.state = 3957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3956;
					this.separator();
					}
					}
					this.state = 3959;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3961;
					this.match(cobolParser.IS);
					this.state = 3963;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3962;
						this.separator();
						}
						}
						this.state = 3965;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3969;
				this.source_name();
				}
				break;
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3971;
				this.match(cobolParser.VALUE);
				this.state = 3973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3972;
					this.separator();
					}
					}
					this.state = 3975;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 3983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3977;
					this.match(cobolParser.IS);
					this.state = 3979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3978;
						this.separator();
						}
						}
						this.state = 3981;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 3985;
				this.value_is_literal();
				}
				break;
			case cobolParser.SUM:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3987;
				this.sum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_is(): Sign_isContext {
		let _localctx: Sign_isContext = new Sign_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, cobolParser.RULE_sign_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 3990;
				this.match(cobolParser.SIGN);
				this.state = 3998;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 637, this._ctx) ) {
				case 1:
					{
					this.state = 3992;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3991;
						this.separator();
						}
						}
						this.state = 3994;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 3996;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 4001;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4000;
					this.separator();
					}
					}
					this.state = 4003;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 4007;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4023;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 643, this._ctx) ) {
			case 1:
				{
				this.state = 4009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4008;
					this.separator();
					}
					}
					this.state = 4011;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4013;
				this.match(cobolParser.SEPARATE);
				this.state = 4021;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 642, this._ctx) ) {
				case 1:
					{
					this.state = 4015;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4014;
						this.separator();
						}
						}
						this.state = 4017;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4019;
					this.match(cobolParser.CHARACTER);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum(): SumContext {
		let _localctx: SumContext = new SumContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, cobolParser.RULE_sum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4065;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4025;
				this.match(cobolParser.SUM);
				this.state = 4027;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4026;
					this.separator();
					}
					}
					this.state = 4029;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4031;
				this.sum_name();
				this.state = 4041;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 646, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4033;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4032;
							this.separator();
							}
							}
							this.state = 4035;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 4037;
						this.sum_name();
						}
						}
					}
					this.state = 4043;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 646, this._ctx);
				}
				this.state = 4051;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 648, this._ctx) ) {
				case 1:
					{
					this.state = 4045;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4044;
						this.separator();
						}
						}
						this.state = 4047;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4049;
					this.match(cobolParser.UPON);
					}
					break;
				}
				this.state = 4062;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 650, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4054;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4053;
							this.separator();
							}
							}
							this.state = 4056;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 4058;
						this.detail_report_group_name();
						}
						}
					}
					this.state = 4064;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 650, this._ctx);
				}
				}
				}
				this.state = 4067;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.SUM);
			this.state = 4091;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 656, this._ctx) ) {
			case 1:
				{
				this.state = 4072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 4069;
					this.separator();
					}
					}
					this.state = 4074;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4075;
				this.match(cobolParser.RESET);
				this.state = 4077;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4076;
					this.separator();
					}
					}
					this.state = 4079;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 4081;
					this.match(cobolParser.ON);
					this.state = 4083;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4082;
						this.separator();
						}
						}
						this.state = 4085;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4089;
				this.control_foot_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_foot_name(): Control_foot_nameContext {
		let _localctx: Control_foot_nameContext = new Control_foot_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, cobolParser.RULE_control_foot_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4093;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public detail_report_group_name(): Detail_report_group_nameContext {
		let _localctx: Detail_report_group_nameContext = new Detail_report_group_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, cobolParser.RULE_detail_report_group_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4095;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum_name(): Sum_nameContext {
		let _localctx: Sum_nameContext = new Sum_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, cobolParser.RULE_sum_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4097;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_name(): Source_nameContext {
		let _localctx: Source_nameContext = new Source_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, cobolParser.RULE_source_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4099;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_number(): Column_numberContext {
		let _localctx: Column_numberContext = new Column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, cobolParser.RULE_column_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4101;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_is_definition(): Type_is_definitionContext {
		let _localctx: Type_is_definitionContext = new Type_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, cobolParser.RULE_type_is_definition);
		let _la: number;
		try {
			this.state = 4177;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 667, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4103;
				this.match(cobolParser.REPORT);
				this.state = 4105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4104;
					this.separator();
					}
					}
					this.state = 4107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4109;
				this.match(cobolParser.HEADING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4111;
				this.match(cobolParser.RH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4112;
				this.match(cobolParser.PAGE);
				this.state = 4114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4113;
					this.separator();
					}
					}
					this.state = 4116;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4118;
				this.match(cobolParser.HEADING);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4120;
				this.match(cobolParser.PH);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4130;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 4121;
					this.match(cobolParser.CONTROL);
					this.state = 4123;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4122;
						this.separator();
						}
						}
						this.state = 4125;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4127;
					this.match(cobolParser.HEADING);
					}
					break;
				case cobolParser.CH:
					{
					this.state = 4129;
					this.match(cobolParser.CH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4133;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4132;
					this.separator();
					}
					}
					this.state = 4135;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4137;
				this.type_control_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4139;
				this.match(cobolParser.DETAIL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4140;
				this.match(cobolParser.DE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4150;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 4141;
					this.match(cobolParser.CONTROL);
					this.state = 4143;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4142;
						this.separator();
						}
						}
						this.state = 4145;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4147;
					this.match(cobolParser.FOOTING);
					}
					break;
				case cobolParser.CF:
					{
					this.state = 4149;
					this.match(cobolParser.CF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4152;
					this.separator();
					}
					}
					this.state = 4155;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4157;
				this.type_control_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4159;
				this.match(cobolParser.PAGE);
				this.state = 4161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4160;
					this.separator();
					}
					}
					this.state = 4163;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4165;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4167;
				this.match(cobolParser.PF);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4168;
				this.match(cobolParser.REPORT);
				this.state = 4170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4169;
					this.separator();
					}
					}
					this.state = 4172;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4174;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4176;
				this.match(cobolParser.RF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_control_name(): Type_control_nameContext {
		let _localctx: Type_control_nameContext = new Type_control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, cobolParser.RULE_type_control_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4179;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public next_group_definition(): Next_group_definitionContext {
		let _localctx: Next_group_definitionContext = new Next_group_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, cobolParser.RULE_next_group_definition);
		let _la: number;
		try {
			this.state = 4198;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4181;
				this.line_num();
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4182;
				this.match(cobolParser.PLUS);
				this.state = 4184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4183;
					this.separator();
					}
					}
					this.state = 4186;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4188;
				this.line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4190;
				this.match(cobolParser.NEXT);
				this.state = 4192;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4191;
					this.separator();
					}
					}
					this.state = 4194;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4196;
				this.match(cobolParser.PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num_definition(): Line_num_definitionContext {
		let _localctx: Line_num_definitionContext = new Line_num_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, cobolParser.RULE_line_num_definition);
		let _la: number;
		try {
			this.state = 4232;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4200;
				this.line_num();
				this.state = 4222;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 675, this._ctx) ) {
				case 1:
					{
					this.state = 4202;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4201;
						this.separator();
						}
						}
						this.state = 4204;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 4206;
						this.match(cobolParser.ON);
						this.state = 4208;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4207;
							this.separator();
							}
							}
							this.state = 4210;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					this.state = 4214;
					this.match(cobolParser.NEXT);
					this.state = 4216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4215;
						this.separator();
						}
						}
						this.state = 4218;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4220;
					this.match(cobolParser.PAGE);
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4224;
				this.match(cobolParser.PLUS);
				this.state = 4226;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4225;
					this.separator();
					}
					}
					this.state = 4228;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4230;
				this.line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num(): Line_numContext {
		let _localctx: Line_numContext = new Line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, cobolParser.RULE_line_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4234;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rd_clause(): Rd_clauseContext {
		let _localctx: Rd_clauseContext = new Rd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, cobolParser.RULE_rd_clause);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4426;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.GLOBAL:
			case cobolParser.IS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4242;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4236;
					this.match(cobolParser.IS);
					this.state = 4238;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4237;
						this.separator();
						}
						}
						this.state = 4240;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4244;
				this.match(cobolParser.GLOBAL);
				}
				break;
			case cobolParser.CODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4245;
				this.match(cobolParser.CODE);
				this.state = 4247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4246;
					this.separator();
					}
					}
					this.state = 4249;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4251;
				this.report_code();
				}
				break;
			case cobolParser.CONTROL:
			case cobolParser.CONTROLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4273;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 4253;
					this.match(cobolParser.CONTROL);
					this.state = 4261;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 682, this._ctx) ) {
					case 1:
						{
						this.state = 4255;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4254;
							this.separator();
							}
							}
							this.state = 4257;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 4259;
						this.match(cobolParser.IS);
						}
						break;
					}
					}
					break;
				case cobolParser.CONTROLS:
					{
					this.state = 4263;
					this.match(cobolParser.CONTROLS);
					this.state = 4271;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 684, this._ctx) ) {
					case 1:
						{
						this.state = 4265;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4264;
							this.separator();
							}
							}
							this.state = 4267;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 4269;
						this.match(cobolParser.ARE);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4275;
					this.separator();
					}
					}
					this.state = 4278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4306;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 4280;
					this.control_name();
					this.state = 4290;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 688, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4284;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
								{
								{
								this.state = 4281;
								this.separator();
								}
								}
								this.state = 4286;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4287;
							this.control_name();
							}
							}
						}
						this.state = 4292;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 688, this._ctx);
					}
					}
					break;
				case cobolParser.FINAL:
					{
					this.state = 4293;
					this.match(cobolParser.FINAL);
					this.state = 4303;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 690, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4297;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
								{
								{
								this.state = 4294;
								this.separator();
								}
								}
								this.state = 4299;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4300;
							this.control_name();
							}
							}
						}
						this.state = 4305;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 690, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4308;
				this.match(cobolParser.PAGE);
				this.state = 4310;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4309;
					this.separator();
					}
					}
					this.state = 4312;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4342;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LIMIT:
					{
					this.state = 4314;
					this.match(cobolParser.LIMIT);
					this.state = 4316;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4315;
						this.separator();
						}
						}
						this.state = 4318;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4326;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 4320;
						this.match(cobolParser.IS);
						this.state = 4322;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4321;
							this.separator();
							}
							}
							this.state = 4324;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.LIMITS:
					{
					this.state = 4328;
					this.match(cobolParser.LIMITS);
					this.state = 4330;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4329;
						this.separator();
						}
						}
						this.state = 4332;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4340;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ARE) {
						{
						this.state = 4334;
						this.match(cobolParser.ARE);
						this.state = 4336;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4335;
							this.separator();
							}
							}
							this.state = 4338;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.NUMERIC_LITERAL:
					break;
				default:
					break;
				}
				this.state = 4344;
				this.page_size_rd();
				this.state = 4352;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 701, this._ctx) ) {
				case 1:
					{
					this.state = 4346;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4345;
						this.separator();
						}
						}
						this.state = 4348;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4350;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 4367;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 704, this._ctx) ) {
				case 1:
					{
					this.state = 4355;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4354;
						this.separator();
						}
						}
						this.state = 4357;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4359;
					this.match(cobolParser.HEADING);
					this.state = 4361;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4360;
						this.separator();
						}
						}
						this.state = 4363;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4365;
					this.heading_line();
					}
					break;
				}
				this.state = 4388;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 708, this._ctx) ) {
				case 1:
					{
					this.state = 4370;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4369;
						this.separator();
						}
						}
						this.state = 4372;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4374;
					this.match(cobolParser.FIRST);
					this.state = 4376;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4375;
						this.separator();
						}
						}
						this.state = 4378;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4380;
					this.match(cobolParser.DETAIL);
					this.state = 4382;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4381;
						this.separator();
						}
						}
						this.state = 4384;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4386;
					this.first_detail_line();
					}
					break;
				}
				this.state = 4409;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 712, this._ctx) ) {
				case 1:
					{
					this.state = 4391;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4390;
						this.separator();
						}
						}
						this.state = 4393;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4395;
					this.match(cobolParser.LAST);
					this.state = 4397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4396;
						this.separator();
						}
						}
						this.state = 4399;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4401;
					this.match(cobolParser.DETAIL);
					this.state = 4403;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4402;
						this.separator();
						}
						}
						this.state = 4405;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4407;
					this.last_detail_line();
					}
					break;
				}
				this.state = 4424;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 715, this._ctx) ) {
				case 1:
					{
					this.state = 4412;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4411;
						this.separator();
						}
						}
						this.state = 4414;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4416;
					this.match(cobolParser.FOOTING);
					this.state = 4418;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4417;
						this.separator();
						}
						}
						this.state = 4420;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4422;
					this.footing_line_rd();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line_rd(): Footing_line_rdContext {
		let _localctx: Footing_line_rdContext = new Footing_line_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, cobolParser.RULE_footing_line_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4428;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_detail_line(): Last_detail_lineContext {
		let _localctx: Last_detail_lineContext = new Last_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, cobolParser.RULE_last_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4430;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_detail_line(): First_detail_lineContext {
		let _localctx: First_detail_lineContext = new First_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, cobolParser.RULE_first_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4432;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public heading_line(): Heading_lineContext {
		let _localctx: Heading_lineContext = new Heading_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, cobolParser.RULE_heading_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4434;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size_rd(): Page_size_rdContext {
		let _localctx: Page_size_rdContext = new Page_size_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, cobolParser.RULE_page_size_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4436;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_name(): Control_nameContext {
		let _localctx: Control_nameContext = new Control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, cobolParser.RULE_control_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4438;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_code(): Report_codeContext {
		let _localctx: Report_codeContext = new Report_codeContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, cobolParser.RULE_report_code);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4440;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage(): UsageContext {
		let _localctx: UsageContext = new UsageContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, cobolParser.RULE_usage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 4442;
				this.match(cobolParser.USAGE);
				this.state = 4450;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 718, this._ctx) ) {
				case 1:
					{
					this.state = 4444;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4443;
						this.separator();
						}
						}
						this.state = 4446;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4448;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 4453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4452;
					this.separator();
					}
					}
					this.state = 4455;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 4459;
			this.usage_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage_definition(): Usage_definitionContext {
		let _localctx: Usage_definitionContext = new Usage_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, cobolParser.RULE_usage_definition);
		let _la: number;
		try {
			this.state = 4524;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4461;
				this.match(cobolParser.BINARY);
				}
				break;
			case cobolParser.BINARY_CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4462;
				this.match(cobolParser.BINARY_CHAR);
				this.state = 4470;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 722, this._ctx) ) {
				case 1:
					{
					this.state = 4464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4463;
						this.separator();
						}
						}
						this.state = 4466;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4468;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_SHORT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4472;
				this.match(cobolParser.BINARY_SHORT);
				this.state = 4480;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 724, this._ctx) ) {
				case 1:
					{
					this.state = 4474;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4473;
						this.separator();
						}
						}
						this.state = 4476;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4478;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_LONG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4482;
				this.match(cobolParser.BINARY_LONG);
				this.state = 4490;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 726, this._ctx) ) {
				case 1:
					{
					this.state = 4484;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4483;
						this.separator();
						}
						}
						this.state = 4486;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4488;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_DOUBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4492;
				this.match(cobolParser.BINARY_DOUBLE);
				this.state = 4500;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 728, this._ctx) ) {
				case 1:
					{
					this.state = 4494;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4493;
						this.separator();
						}
						}
						this.state = 4496;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4498;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.COMPUTATIONAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4502;
				this.match(cobolParser.COMPUTATIONAL);
				}
				break;
			case cobolParser.COMPUTATIONAL_1:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4503;
				this.match(cobolParser.COMPUTATIONAL_1);
				}
				break;
			case cobolParser.COMPUTATIONAL_2:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4504;
				this.match(cobolParser.COMPUTATIONAL_2);
				}
				break;
			case cobolParser.COMPUTATIONAL_3:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4505;
				this.match(cobolParser.COMPUTATIONAL_3);
				}
				break;
			case cobolParser.COMPUTATIONAL_4:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4506;
				this.match(cobolParser.COMPUTATIONAL_4);
				}
				break;
			case cobolParser.COMPUTATIONAL_5:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4507;
				this.match(cobolParser.COMPUTATIONAL_5);
				}
				break;
			case cobolParser.COMPUTATIONAL_X:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4508;
				this.match(cobolParser.COMPUTATIONAL_X);
				}
				break;
			case cobolParser.COMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4509;
				this.match(cobolParser.COMP);
				}
				break;
			case cobolParser.COMP_1:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4510;
				this.match(cobolParser.COMP_1);
				}
				break;
			case cobolParser.COMP_2:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4511;
				this.match(cobolParser.COMP_2);
				}
				break;
			case cobolParser.COMP_3:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4512;
				this.match(cobolParser.COMP_3);
				}
				break;
			case cobolParser.COMP_4:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4513;
				this.match(cobolParser.COMP_4);
				}
				break;
			case cobolParser.COMP_5:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4514;
				this.match(cobolParser.COMP_5);
				}
				break;
			case cobolParser.COMP_X:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4515;
				this.match(cobolParser.COMP_X);
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4516;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.FLOAT_SHORT:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 4517;
				this.match(cobolParser.FLOAT_SHORT);
				}
				break;
			case cobolParser.FLOAT_LONG:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 4518;
				this.match(cobolParser.FLOAT_LONG);
				}
				break;
			case cobolParser.FLOAT_EXTENDED:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 4519;
				this.match(cobolParser.FLOAT_EXTENDED);
				}
				break;
			case cobolParser.INDEX:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 4520;
				this.match(cobolParser.INDEX);
				}
				break;
			case cobolParser.PACKED_DECIMAL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 4521;
				this.match(cobolParser.PACKED_DECIMAL);
				}
				break;
			case cobolParser.POINTER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 4522;
				this.match(cobolParser.POINTER);
				}
				break;
			case cobolParser.POINTER_64:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 4523;
				this.match(cobolParser.POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public picture(): PictureContext {
		let _localctx: PictureContext = new PictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, cobolParser.RULE_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4526;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PIC || _la === cobolParser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4528;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4527;
					this.separator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4530;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 730, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4532;
				this.match(cobolParser.IS);
				this.state = 4534;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4533;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4536;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 731, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4540;
			this.character_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_string(): Character_stringContext {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, cobolParser.RULE_character_string);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4543;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4542;
					this.char_str_part();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4545;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 733, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_str_part(): Char_str_partContext {
		let _localctx: Char_str_partContext = new Char_str_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, cobolParser.RULE_char_str_part);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4547;
			_la = this._input.LA(1);
			if (!(((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & ((1 << (cobolParser.SLASH_ - 408)) | (1 << (cobolParser.COMMA_ - 408)) | (1 << (cobolParser.LPAREN_ - 408)) | (1 << (cobolParser.RPAREN_ - 408)) | (1 << (cobolParser.DOT_ - 408)) | (1 << (cobolParser.NUMERIC_LITERAL - 408)) | (1 << (cobolParser.USER_DEFINED_WORD - 408)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public other_data_item(): Other_data_itemContext {
		let _localctx: Other_data_itemContext = new Other_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, cobolParser.RULE_other_data_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4549;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_name(): Data_nameContext {
		let _localctx: Data_nameContext = new Data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, cobolParser.RULE_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4551;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sd_clause(): Sd_clauseContext {
		let _localctx: Sd_clauseContext = new Sd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, cobolParser.RULE_sd_clause);
		try {
			this.state = 4555;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4553;
				this.record();
				}
				break;
			case cobolParser.DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4554;
				this.data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_is(): Report_isContext {
		let _localctx: Report_isContext = new Report_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, cobolParser.RULE_report_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4577;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				{
				this.state = 4557;
				this.match(cobolParser.REPORT);
				this.state = 4565;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 736, this._ctx) ) {
				case 1:
					{
					this.state = 4559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4558;
						this.separator();
						}
						}
						this.state = 4561;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4563;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.REPORTS:
				{
				this.state = 4567;
				this.match(cobolParser.REPORTS);
				this.state = 4575;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 738, this._ctx) ) {
				case 1:
					{
					this.state = 4569;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4568;
						this.separator();
						}
						}
						this.state = 4571;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4573;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4580;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4579;
				this.separator();
				}
				}
				this.state = 4582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4584;
			this.report_name();
			this.state = 4594;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 742, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4588;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 4585;
						this.separator();
						}
						}
						this.state = 4590;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4591;
					this.report_name();
					}
					}
				}
				this.state = 4596;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 742, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_name(): Report_nameContext {
		let _localctx: Report_nameContext = new Report_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, cobolParser.RULE_report_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4597;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linage(): LinageContext {
		let _localctx: LinageContext = new LinageContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, cobolParser.RULE_linage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4599;
			this.match(cobolParser.LINAGE);
			this.state = 4601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4600;
				this.separator();
				}
				}
				this.state = 4603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4611;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4605;
				this.match(cobolParser.IS);
				this.state = 4607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4606;
					this.separator();
					}
					}
					this.state = 4609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 4613;
			this.page_size();
			this.state = 4621;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 747, this._ctx) ) {
			case 1:
				{
				this.state = 4615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4614;
					this.separator();
					}
					}
					this.state = 4617;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4619;
				this.match(cobolParser.LINES);
				}
				break;
			}
			this.state = 4652;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 754, this._ctx) ) {
			case 1:
				{
				this.state = 4624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4623;
					this.separator();
					}
					}
					this.state = 4626;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4634;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4628;
					this.match(cobolParser.WITH);
					this.state = 4630;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4629;
						this.separator();
						}
						}
						this.state = 4632;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4636;
				this.match(cobolParser.FOOTING);
				this.state = 4638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4637;
					this.separator();
					}
					}
					this.state = 4640;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 4642;
					this.match(cobolParser.AT);
					this.state = 4644;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4643;
						this.separator();
						}
						}
						this.state = 4646;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4650;
				this.footing_line();
				}
				break;
			}
			this.state = 4683;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 761, this._ctx) ) {
			case 1:
				{
				this.state = 4655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4654;
					this.separator();
					}
					}
					this.state = 4657;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 4659;
					this.match(cobolParser.LINES);
					this.state = 4661;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4660;
						this.separator();
						}
						}
						this.state = 4663;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4673;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 4667;
					this.match(cobolParser.AT);
					this.state = 4669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4668;
						this.separator();
						}
						}
						this.state = 4671;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4675;
				this.match(cobolParser.TOP);
				this.state = 4677;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4676;
					this.separator();
					}
					}
					this.state = 4679;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4681;
				this.top_lines();
				}
				break;
			}
			this.state = 4714;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 768, this._ctx) ) {
			case 1:
				{
				this.state = 4686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4685;
					this.separator();
					}
					}
					this.state = 4688;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 4690;
					this.match(cobolParser.LINES);
					this.state = 4692;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4691;
						this.separator();
						}
						}
						this.state = 4694;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 4698;
					this.match(cobolParser.AT);
					this.state = 4700;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4699;
						this.separator();
						}
						}
						this.state = 4702;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4706;
				this.match(cobolParser.BOTTOM);
				this.state = 4708;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4707;
					this.separator();
					}
					}
					this.state = 4710;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4712;
				this.bottom_lines();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bottom_lines(): Bottom_linesContext {
		let _localctx: Bottom_linesContext = new Bottom_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, cobolParser.RULE_bottom_lines);
		try {
			this.state = 4718;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4716;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4717;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_lines(): Top_linesContext {
		let _localctx: Top_linesContext = new Top_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, cobolParser.RULE_top_lines);
		try {
			this.state = 4722;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4720;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4721;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line(): Footing_lineContext {
		let _localctx: Footing_lineContext = new Footing_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, cobolParser.RULE_footing_line);
		try {
			this.state = 4726;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4724;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4725;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size(): Page_sizeContext {
		let _localctx: Page_sizeContext = new Page_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, cobolParser.RULE_page_size);
		try {
			this.state = 4730;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4728;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4729;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_rec(): Data_recContext {
		let _localctx: Data_recContext = new Data_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, cobolParser.RULE_data_rec);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4732;
			this.match(cobolParser.DATA);
			this.state = 4734;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4733;
				this.separator();
				}
				}
				this.state = 4736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4758;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 4738;
				this.match(cobolParser.RECORDS);
				this.state = 4746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					this.state = 4740;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4739;
						this.separator();
						}
						}
						this.state = 4742;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4744;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 4748;
				this.match(cobolParser.RECORD);
				this.state = 4756;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					this.state = 4750;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4749;
						this.separator();
						}
						}
						this.state = 4752;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4754;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4760;
			this.rec_name();
			this.state = 4770;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 780, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4762;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4761;
						this.separator();
						}
						}
						this.state = 4764;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4766;
					this.rec_name();
					}
					}
				}
				this.state = 4772;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 780, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_name(): Rec_nameContext {
		let _localctx: Rec_nameContext = new Rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, cobolParser.RULE_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4773;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id(): Value_of_idContext {
		let _localctx: Value_of_idContext = new Value_of_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, cobolParser.RULE_value_of_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4775;
			this.match(cobolParser.VALUE);
			this.state = 4777;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4776;
				this.separator();
				}
				}
				this.state = 4779;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4781;
			this.match(cobolParser.OF);
			this.state = 4783;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4782;
				this.separator();
				}
				}
				this.state = 4785;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4787;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FILE_ID || _la === cobolParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4789;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4788;
				this.separator();
				}
				}
				this.state = 4791;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4793;
				this.match(cobolParser.IS);
				this.state = 4795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4794;
					this.separator();
					}
					}
					this.state = 4797;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 4801;
			this.value_of_id_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id_definition(): Value_of_id_definitionContext {
		let _localctx: Value_of_id_definitionContext = new Value_of_id_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, cobolParser.RULE_value_of_id_definition);
		try {
			this.state = 4805;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4803;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4804;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, cobolParser.RULE_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4807;
			this.match(cobolParser.LABEL);
			this.state = 4809;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4808;
				this.separator();
				}
				}
				this.state = 4811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4833;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 4813;
				this.match(cobolParser.RECORDS);
				this.state = 4821;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 789, this._ctx) ) {
				case 1:
					{
					this.state = 4815;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4814;
						this.separator();
						}
						}
						this.state = 4817;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4819;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 4823;
				this.match(cobolParser.RECORD);
				this.state = 4831;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 791, this._ctx) ) {
				case 1:
					{
					this.state = 4825;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4824;
						this.separator();
						}
						}
						this.state = 4827;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4829;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4835;
				this.separator();
				}
				}
				this.state = 4838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4840;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.OMITTED || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record(): RecordContext {
		let _localctx: RecordContext = new RecordContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, cobolParser.RULE_record);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4842;
			this.match(cobolParser.RECORD);
			this.state = 4844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4843;
				this.separator();
				}
				}
				this.state = 4846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 4848;
			this.record_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_definition(): Record_definitionContext {
		let _localctx: Record_definitionContext = new Record_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, cobolParser.RULE_record_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4973;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTAINS:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTAINS) {
					{
					this.state = 4850;
					this.match(cobolParser.CONTAINS);
					this.state = 4852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4851;
						this.separator();
						}
						}
						this.state = 4854;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4870;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 799, this._ctx) ) {
				case 1:
					{
					this.state = 4858;
					this.shortest_rec();
					this.state = 4860;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4859;
						this.separator();
						}
						}
						this.state = 4862;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4864;
					this.match(cobolParser.TO);
					this.state = 4866;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4865;
						this.separator();
						}
						}
						this.state = 4868;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
					break;
				}
				this.state = 4872;
				this.longest_rec();
				this.state = 4876;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 800, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4873;
						this.separator();
						}
						}
					}
					this.state = 4878;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 800, this._ctx);
				}
				this.state = 4886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 4879;
					this.match(cobolParser.CHARACTERS);
					this.state = 4883;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 801, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4880;
							this.separator();
							}
							}
						}
						this.state = 4885;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 801, this._ctx);
					}
					}
				}

				}
				break;
			case cobolParser.IS:
			case cobolParser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4888;
					this.match(cobolParser.IS);
					this.state = 4890;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4889;
						this.separator();
						}
						}
						this.state = 4892;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 4896;
				this.match(cobolParser.VARYING);
				this.state = 4898;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4897;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4900;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 805, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 4908;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 4902;
					this.match(cobolParser.IN);
					this.state = 4904;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 4903;
							this.separator();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 4906;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 806, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 4917;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIZE) {
					{
					this.state = 4910;
					this.match(cobolParser.SIZE);
					this.state = 4914;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 808, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4911;
							this.separator();
							}
							}
						}
						this.state = 4916;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 808, this._ctx);
					}
					}
				}

				this.state = 4928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM || _la === cobolParser.NUMERIC_LITERAL) {
					{
					this.state = 4925;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FROM) {
						{
						this.state = 4919;
						this.match(cobolParser.FROM);
						this.state = 4921;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4920;
							this.separator();
							}
							}
							this.state = 4923;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					this.state = 4927;
					this.shortest_rec();
					}
				}

				this.state = 4938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 4930;
					this.match(cobolParser.TO);
					this.state = 4932;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4931;
						this.separator();
						}
						}
						this.state = 4934;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4936;
					this.longest_rec();
					}
				}

				this.state = 4953;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 817, this._ctx) ) {
				case 1:
					{
					this.state = 4943;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 4940;
						this.separator();
						}
						}
						this.state = 4945;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4946;
					this.match(cobolParser.CHARACTERS);
					this.state = 4950;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 816, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4947;
							this.separator();
							}
							}
						}
						this.state = 4952;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 816, this._ctx);
					}
					}
					break;
				}
				this.state = 4971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEPENDING) {
					{
					this.state = 4955;
					this.match(cobolParser.DEPENDING);
					this.state = 4957;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4956;
						this.separator();
						}
						}
						this.state = 4959;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 4967;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 4961;
						this.match(cobolParser.ON);
						this.state = 4963;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4962;
							this.separator();
							}
							}
							this.state = 4965;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					this.state = 4969;
					this.depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public depending_item(): Depending_itemContext {
		let _localctx: Depending_itemContext = new Depending_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, cobolParser.RULE_depending_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4975;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortest_rec(): Shortest_recContext {
		let _localctx: Shortest_recContext = new Shortest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, cobolParser.RULE_shortest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4977;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public longest_rec(): Longest_recContext {
		let _localctx: Longest_recContext = new Longest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, cobolParser.RULE_longest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4979;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_entry(): Screen_description_entryContext {
		let _localctx: Screen_description_entryContext = new Screen_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, cobolParser.RULE_screen_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4981;
			this.level_number();
			this.state = 4991;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 825, this._ctx) ) {
			case 1:
				{
				this.state = 4983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4982;
					this.separator();
					}
					}
					this.state = 4985;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4989;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 4987;
					this.screen_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 4988;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 5002;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 4994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4993;
					this.separator();
					}
					}
					this.state = 4996;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 4998;
				this.screen_description_clause();
				}
				}
				this.state = 5004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5005;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_name(): Screen_nameContext {
		let _localctx: Screen_nameContext = new Screen_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, cobolParser.RULE_screen_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5007;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_clause(): Screen_description_clauseContext {
		let _localctx: Screen_description_clauseContext = new Screen_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, cobolParser.RULE_screen_description_clause);
		let _la: number;
		try {
			this.state = 5211;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 866, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5009;
				this.match(cobolParser.BLANK);
				this.state = 5011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5010;
					this.separator();
					}
					}
					this.state = 5013;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5015;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5017;
				this.match(cobolParser.FOREGROUND_COLOR);
				this.state = 5019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5018;
					this.separator();
					}
					}
					this.state = 5021;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5023;
					this.match(cobolParser.IS);
					this.state = 5025;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5024;
						this.separator();
						}
						}
						this.state = 5027;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5031;
				this.color_num();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5033;
				this.match(cobolParser.BACKGROUND_COLOR);
				this.state = 5035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5034;
					this.separator();
					}
					}
					this.state = 5037;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5045;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5039;
					this.match(cobolParser.IS);
					this.state = 5041;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5040;
						this.separator();
						}
						}
						this.state = 5043;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5047;
				this.color_num();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5049;
				this.match(cobolParser.AUTO);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5050;
				this.match(cobolParser.SECURE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5051;
				this.match(cobolParser.REQUIRED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 5052;
					this.match(cobolParser.USAGE);
					this.state = 5054;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5053;
						this.separator();
						}
						}
						this.state = 5056;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5064;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 5058;
						this.match(cobolParser.IS);
						this.state = 5060;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5059;
							this.separator();
							}
							}
							this.state = 5062;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					}
				}

				this.state = 5068;
				this.match(cobolParser.DISPLAY);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5069;
				this.sign_is();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5070;
				this.match(cobolParser.FULL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5071;
				this.match(cobolParser.BELL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5072;
				this.match(cobolParser.BLINK);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5073;
				this.match(cobolParser.ERASE);
				this.state = 5075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5074;
					this.separator();
					}
					}
					this.state = 5077;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5079;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.EOL || _la === cobolParser.EOS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5081;
				this.match(cobolParser.HIGHLIGHT);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5082;
				this.match(cobolParser.LOWLIGHT);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5083;
				this.match(cobolParser.REVERSE_VIDEO);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5084;
				this.match(cobolParser.UNDERLINE);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5085;
				this.match(cobolParser.LINE);
				this.state = 5087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5086;
					this.separator();
					}
					}
					this.state = 5089;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5097;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 5091;
					this.match(cobolParser.NUMBER);
					this.state = 5093;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5092;
						this.separator();
						}
						}
						this.state = 5095;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5099;
					this.match(cobolParser.IS);
					this.state = 5101;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5100;
						this.separator();
						}
						}
						this.state = 5103;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 5107;
					this.match(cobolParser.PLUS);
					this.state = 5109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5108;
						this.separator();
						}
						}
						this.state = 5111;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5115;
				this.src_number();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5117;
				this.match(cobolParser.COLUMN);
				this.state = 5119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5118;
					this.separator();
					}
					}
					this.state = 5121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 5123;
					this.match(cobolParser.NUMBER);
					this.state = 5125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5124;
						this.separator();
						}
						}
						this.state = 5127;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5131;
					this.match(cobolParser.IS);
					this.state = 5133;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5132;
						this.separator();
						}
						}
						this.state = 5135;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 5139;
					this.match(cobolParser.PLUS);
					this.state = 5141;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5140;
						this.separator();
						}
						}
						this.state = 5143;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5147;
				this.src_number();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5149;
				this.match(cobolParser.VALUE);
				this.state = 5151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5150;
					this.separator();
					}
					}
					this.state = 5153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5155;
					this.match(cobolParser.IS);
					this.state = 5157;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5156;
						this.separator();
						}
						}
						this.state = 5159;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5163;
				this.nonnumeric_literal();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 5165;
				this.match(cobolParser.BLANK);
				this.state = 5167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5166;
					this.separator();
					}
					}
					this.state = 5169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5177;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 5171;
					this.match(cobolParser.WHEN);
					this.state = 5173;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5172;
						this.separator();
						}
						}
						this.state = 5175;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5179;
				this.match(cobolParser.ZERO);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 5181;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5189;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
				case 1:
					{
					this.state = 5183;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5182;
						this.separator();
						}
						}
						this.state = 5185;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5187;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 5191;
				this.picture();
				this.state = 5193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5192;
					this.separator();
					}
					}
					this.state = 5195;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5209;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USING:
					{
					this.state = 5197;
					this.scr_pic_using();
					}
					break;
				case cobolParser.FROM:
					{
					this.state = 5198;
					this.scr_pic_from();
					this.state = 5206;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 864, this._ctx) ) {
					case 1:
						{
						this.state = 5200;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5199;
							this.separator();
							}
							}
							this.state = 5202;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 5204;
						this.scr_pic_to();
						}
						break;
					}
					}
					break;
				case cobolParser.TO:
					{
					this.state = 5208;
					this.scr_pic_to();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_using(): Scr_pic_usingContext {
		let _localctx: Scr_pic_usingContext = new Scr_pic_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, cobolParser.RULE_scr_pic_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5213;
			this.match(cobolParser.USING);
			this.state = 5215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5214;
				this.separator();
				}
				}
				this.state = 5217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5219;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_from(): Scr_pic_fromContext {
		let _localctx: Scr_pic_fromContext = new Scr_pic_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, cobolParser.RULE_scr_pic_from);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5221;
			this.match(cobolParser.FROM);
			this.state = 5223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5222;
				this.separator();
				}
				}
				this.state = 5225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5229;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 5227;
				this.qualified_data_item();
				}
				break;
			case cobolParser.STRING_LITERAL:
				{
				this.state = 5228;
				this.nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_to(): Scr_pic_toContext {
		let _localctx: Scr_pic_toContext = new Scr_pic_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, cobolParser.RULE_scr_pic_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5231;
			this.match(cobolParser.TO);
			this.state = 5233;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5232;
				this.separator();
				}
				}
				this.state = 5235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5237;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonnumeric_literal(): Nonnumeric_literalContext {
		let _localctx: Nonnumeric_literalContext = new Nonnumeric_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, cobolParser.RULE_nonnumeric_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5239;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_number(): Src_numberContext {
		let _localctx: Src_numberContext = new Src_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, cobolParser.RULE_src_number);
		try {
			this.state = 5243;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5241;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5242;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public color_num(): Color_numContext {
		let _localctx: Color_numContext = new Color_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, cobolParser.RULE_color_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5245;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division(): Identification_divisionContext {
		let _localctx: Identification_divisionContext = new Identification_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, cobolParser.RULE_identification_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5247;
			this.match(cobolParser.IDENTIFICATION_IN_A_AREA);
			this.state = 5249;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5248;
				this.separator();
				}
				}
				this.state = 5251;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5253;
			this.match(cobolParser.DIVISION);
			this.state = 5257;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5254;
				this.separator();
				}
				}
				this.state = 5259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5260;
			this.match(cobolParser.DOT_);
			this.state = 5264;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 874, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5261;
					this.separator();
					}
					}
				}
				this.state = 5266;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 874, this._ctx);
			}
			this.state = 5270;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 875, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5267;
					this.identification_division_paragraph();
					}
					}
				}
				this.state = 5272;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 875, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division_paragraph(): Identification_division_paragraphContext {
		let _localctx: Identification_division_paragraphContext = new Identification_division_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, cobolParser.RULE_identification_division_paragraph);
		try {
			this.state = 5281;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PROGRAM_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5273;
				this.program_id();
				}
				break;
			case cobolParser.AUTHOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5274;
				this.author();
				}
				break;
			case cobolParser.INSTALLATION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5275;
				this.installation();
				}
				break;
			case cobolParser.DATE_WRITTEN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5276;
				this.date_written();
				}
				break;
			case cobolParser.DATE_COMPILED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5277;
				this.date_compiled();
				}
				break;
			case cobolParser.SECURITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5278;
				this.security();
				}
				break;
			case cobolParser.OPTIONS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5279;
				this.options_();
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5280;
				this.separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_id(): Program_idContext {
		let _localctx: Program_idContext = new Program_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, cobolParser.RULE_program_id);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5283;
			this.match(cobolParser.PROGRAM_ID);
			this.state = 5287;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5284;
				this.separator();
				}
				}
				this.state = 5289;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5290;
			this.match(cobolParser.DOT_);
			this.state = 5294;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5291;
				this.separator();
				}
				}
				this.state = 5296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5297;
			this.program_name();
			this.state = 5301;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 879, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5298;
					this.separator();
					}
					}
				}
				this.state = 5303;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 879, this._ctx);
			}
			this.state = 5305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COMMON || _la === cobolParser.INITIAL || _la === cobolParser.IS) {
				{
				this.state = 5304;
				this.is_program();
				}
			}

			this.state = 5310;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 881, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5307;
					this.separator();
					}
					}
				}
				this.state = 5312;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 881, this._ctx);
			}
			this.state = 5314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IDENT || _la === cobolParser.WITH) {
				{
				this.state = 5313;
				this.with_ident();
				}
			}

			this.state = 5319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5316;
				this.separator();
				}
				}
				this.state = 5321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5322;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_name(): Program_nameContext {
		let _localctx: Program_nameContext = new Program_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, cobolParser.RULE_program_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5324;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public is_program(): Is_programContext {
		let _localctx: Is_programContext = new Is_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, cobolParser.RULE_is_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5326;
				this.match(cobolParser.IS);
				this.state = 5328;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5327;
					this.separator();
					}
					}
					this.state = 5330;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5334;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.COMMON || _la === cobolParser.INITIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5342;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 887, this._ctx) ) {
			case 1:
				{
				this.state = 5336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5335;
					this.separator();
					}
					}
					this.state = 5338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5340;
				this.match(cobolParser.PROGRAM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_ident(): With_identContext {
		let _localctx: With_identContext = new With_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, cobolParser.RULE_with_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5350;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 5344;
				this.match(cobolParser.WITH);
				this.state = 5346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5345;
					this.separator();
					}
					}
					this.state = 5348;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5352;
			this.match(cobolParser.IDENT);
			this.state = 5354;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5353;
				this.separator();
				}
				}
				this.state = 5356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5358;
			this.ident_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident_string(): Ident_stringContext {
		let _localctx: Ident_stringContext = new Ident_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, cobolParser.RULE_ident_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5360;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_entry(): Comment_entryContext {
		let _localctx: Comment_entryContext = new Comment_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, cobolParser.RULE_comment_entry);
		let _la: number;
		try {
			this.state = 5371;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5362;
				this.match(cobolParser.START_FOUR_SPACES);
				this.state = 5366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 5363;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 5368;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5369;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5370;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public author(): AuthorContext {
		let _localctx: AuthorContext = new AuthorContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, cobolParser.RULE_author);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5373;
			this.match(cobolParser.AUTHOR);
			this.state = 5377;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5374;
				this.separator();
				}
				}
				this.state = 5379;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5380;
			this.match(cobolParser.DOT_);
			this.state = 5384;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5381;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5387;
			this.match(cobolParser.NEWLINE);
			this.state = 5391;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5388;
					this.comment_entry();
					}
					}
				}
				this.state = 5393;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installation(): InstallationContext {
		let _localctx: InstallationContext = new InstallationContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, cobolParser.RULE_installation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5394;
			this.match(cobolParser.INSTALLATION);
			this.state = 5398;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5395;
				this.separator();
				}
				}
				this.state = 5400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5401;
			this.match(cobolParser.DOT_);
			this.state = 5405;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5402;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5407;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5408;
			this.match(cobolParser.NEWLINE);
			this.state = 5412;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 898, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5409;
					this.comment_entry();
					}
					}
				}
				this.state = 5414;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 898, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_written(): Date_writtenContext {
		let _localctx: Date_writtenContext = new Date_writtenContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, cobolParser.RULE_date_written);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5415;
			this.match(cobolParser.DATE_WRITTEN);
			this.state = 5419;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5416;
				this.separator();
				}
				}
				this.state = 5421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5422;
			this.match(cobolParser.DOT_);
			this.state = 5426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5423;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5429;
			this.match(cobolParser.NEWLINE);
			this.state = 5433;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 901, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5430;
					this.comment_entry();
					}
					}
				}
				this.state = 5435;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 901, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_compiled(): Date_compiledContext {
		let _localctx: Date_compiledContext = new Date_compiledContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, cobolParser.RULE_date_compiled);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5436;
			this.match(cobolParser.DATE_COMPILED);
			this.state = 5440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5437;
				this.separator();
				}
				}
				this.state = 5442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5443;
			this.match(cobolParser.DOT_);
			this.state = 5447;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5444;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5450;
			this.match(cobolParser.NEWLINE);
			this.state = 5454;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 904, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5451;
					this.comment_entry();
					}
					}
				}
				this.state = 5456;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 904, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security(): SecurityContext {
		let _localctx: SecurityContext = new SecurityContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, cobolParser.RULE_security);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5457;
			this.match(cobolParser.SECURITY);
			this.state = 5461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5458;
				this.separator();
				}
				}
				this.state = 5463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5464;
			this.match(cobolParser.DOT_);
			this.state = 5468;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.ROUNDED - 384)) | (1 << (cobolParser.CORRESPONDING - 384)) | (1 << (cobolParser.CORR - 384)) | (1 << (cobolParser.PROCEED - 384)) | (1 << (cobolParser.CONTENT - 384)) | (1 << (cobolParser.DESCRIPTOR - 384)) | (1 << (cobolParser.REMOVAL - 384)) | (1 << (cobolParser.REWIND - 384)) | (1 << (cobolParser.ADVANCING - 384)) | (1 << (cobolParser.INTO - 384)) | (1 << (cobolParser.REMAINDER - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5465;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5470;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5471;
			this.match(cobolParser.NEWLINE);
			this.state = 5475;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 907, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5472;
					this.comment_entry();
					}
					}
				}
				this.state = 5477;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 907, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public options_(): Options_Context {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 392, cobolParser.RULE_options_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5478;
			this.match(cobolParser.OPTIONS);
			this.state = 5482;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5479;
				this.separator();
				}
				}
				this.state = 5484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5485;
			this.match(cobolParser.DOT_);
			this.state = 5489;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 909, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5486;
					this.separator();
					}
					}
				}
				this.state = 5491;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 909, this._ctx);
			}
			this.state = 5493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARITHMETIC) {
				{
				this.state = 5492;
				this.arithmetic();
				}
			}

			this.state = 5498;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 911, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5495;
					this.separator();
					}
					}
				}
				this.state = 5500;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 911, this._ctx);
			}
			this.state = 5502;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DOT_) {
				{
				this.state = 5501;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic(): ArithmeticContext {
		let _localctx: ArithmeticContext = new ArithmeticContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, cobolParser.RULE_arithmetic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5504;
			this.match(cobolParser.ARITHMETIC);
			this.state = 5506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5505;
				this.separator();
				}
				}
				this.state = 5508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5510;
				this.match(cobolParser.IS);
				this.state = 5512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5511;
					this.separator();
					}
					}
					this.state = 5514;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5518;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NATIVE || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5522;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5519;
				this.separator();
				}
				}
				this.state = 5524;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5525;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environment_division(): Environment_divisionContext {
		let _localctx: Environment_divisionContext = new Environment_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, cobolParser.RULE_environment_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5527;
			this.match(cobolParser.ENVIRONMENT);
			this.state = 5529;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5528;
				this.separator();
				}
				}
				this.state = 5531;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5533;
			this.match(cobolParser.DIVISION);
			this.state = 5537;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5534;
				this.separator();
				}
				}
				this.state = 5539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5540;
			this.match(cobolParser.DOT_);
			this.state = 5544;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 919, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5541;
					this.separator();
					}
					}
				}
				this.state = 5546;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 919, this._ctx);
			}
			this.state = 5548;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONFIGURATION) {
				{
				this.state = 5547;
				this.configuration_section();
				}
			}

			this.state = 5551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INPUT_OUTPUT) {
				{
				this.state = 5550;
				this.input_output_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configuration_section(): Configuration_sectionContext {
		let _localctx: Configuration_sectionContext = new Configuration_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, cobolParser.RULE_configuration_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5553;
			this.match(cobolParser.CONFIGURATION);
			this.state = 5555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5554;
				this.separator();
				}
				}
				this.state = 5557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5559;
			this.match(cobolParser.SECTION);
			this.state = 5563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5560;
				this.separator();
				}
				}
				this.state = 5565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5566;
			this.match(cobolParser.DOT_);
			this.state = 5570;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 924, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5567;
					this.separator();
					}
					}
				}
				this.state = 5572;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 924, this._ctx);
			}
			this.state = 5574;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SOURCE_COMPUTER) {
				{
				this.state = 5573;
				this.source_computer();
				}
			}

			this.state = 5579;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 926, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5576;
					this.separator();
					}
					}
				}
				this.state = 5581;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 926, this._ctx);
			}
			this.state = 5583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OBJECT_COMPUTER) {
				{
				this.state = 5582;
				this.object_computer();
				}
			}

			this.state = 5588;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 928, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5585;
					this.separator();
					}
					}
				}
				this.state = 5590;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 928, this._ctx);
			}
			this.state = 5592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SPECIAL_NAMES) {
				{
				this.state = 5591;
				this.special_names();
				}
			}

			this.state = 5597;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 930, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5594;
					this.separator();
					}
					}
				}
				this.state = 5599;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 930, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_output_section(): Input_output_sectionContext {
		let _localctx: Input_output_sectionContext = new Input_output_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, cobolParser.RULE_input_output_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5600;
			this.match(cobolParser.INPUT_OUTPUT);
			this.state = 5602;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5601;
				this.separator();
				}
				}
				this.state = 5604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5606;
			this.match(cobolParser.SECTION);
			this.state = 5610;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5607;
				this.separator();
				}
				}
				this.state = 5612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5613;
			this.match(cobolParser.DOT_);
			this.state = 5617;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 933, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5614;
					this.separator();
					}
					}
				}
				this.state = 5619;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 933, this._ctx);
			}
			this.state = 5621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE_CONTROL) {
				{
				this.state = 5620;
				this.file_control();
				}
			}

			this.state = 5624;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.I_O_CONTROL) {
				{
				this.state = 5623;
				this.i_o_control();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_computer(): Source_computerContext {
		let _localctx: Source_computerContext = new Source_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, cobolParser.RULE_source_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5626;
			this.match(cobolParser.SOURCE_COMPUTER);
			this.state = 5630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5627;
				this.separator();
				}
				}
				this.state = 5632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5633;
			this.match(cobolParser.DOT_);
			this.state = 5637;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 937, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5634;
					this.separator();
					}
					}
				}
				this.state = 5639;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 937, this._ctx);
			}
			this.state = 5658;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 5640;
				this.computer_type();
				this.state = 5648;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 939, this._ctx) ) {
				case 1:
					{
					this.state = 5642;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5641;
						this.separator();
						}
						}
						this.state = 5644;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5646;
					this.with_debugging();
					}
					break;
				}
				this.state = 5653;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 5650;
					this.separator();
					}
					}
					this.state = 5655;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5656;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computer_type(): Computer_typeContext {
		let _localctx: Computer_typeContext = new Computer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, cobolParser.RULE_computer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5660;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_debugging(): With_debuggingContext {
		let _localctx: With_debuggingContext = new With_debuggingContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, cobolParser.RULE_with_debugging);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5668;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 5662;
				this.match(cobolParser.WITH);
				this.state = 5664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5663;
					this.separator();
					}
					}
					this.state = 5666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5670;
			this.match(cobolParser.DEBUGGING);
			this.state = 5672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5671;
				this.separator();
				}
				}
				this.state = 5674;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5676;
			this.match(cobolParser.MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_computer(): Object_computerContext {
		let _localctx: Object_computerContext = new Object_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, cobolParser.RULE_object_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5678;
			this.match(cobolParser.OBJECT_COMPUTER);
			this.state = 5682;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5679;
				this.separator();
				}
				}
				this.state = 5684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5685;
			this.match(cobolParser.DOT_);
			this.state = 5689;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 946, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5686;
					this.separator();
					}
					}
				}
				this.state = 5691;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 946, this._ctx);
			}
			this.state = 5728;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 5692;
				this.computer_type();
				this.state = 5700;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 948, this._ctx) ) {
				case 1:
					{
					this.state = 5694;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5693;
						this.separator();
						}
						}
						this.state = 5696;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5698;
					this.memory_size();
					}
					break;
				}
				this.state = 5709;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 950, this._ctx) ) {
				case 1:
					{
					this.state = 5703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5702;
						this.separator();
						}
						}
						this.state = 5705;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5707;
					this.program_collating();
					}
					break;
				}
				this.state = 5718;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 952, this._ctx) ) {
				case 1:
					{
					this.state = 5712;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5711;
						this.separator();
						}
						}
						this.state = 5714;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5716;
					this.segment_limit();
					}
					break;
				}
				this.state = 5723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 5720;
					this.separator();
					}
					}
					this.state = 5725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5726;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size(): Memory_sizeContext {
		let _localctx: Memory_sizeContext = new Memory_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, cobolParser.RULE_memory_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5730;
			this.match(cobolParser.MEMORY);
			this.state = 5738;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 956, this._ctx) ) {
			case 1:
				{
				this.state = 5732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5731;
					this.separator();
					}
					}
					this.state = 5734;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5736;
				this.match(cobolParser.SIZE);
				}
				break;
			}
			this.state = 5741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5740;
				this.separator();
				}
				}
				this.state = 5743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5745;
			this.memory_size_amount();
			this.state = 5747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5746;
				this.separator();
				}
				}
				this.state = 5749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5751;
			this.memory_size_unit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_amount(): Memory_size_amountContext {
		let _localctx: Memory_size_amountContext = new Memory_size_amountContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, cobolParser.RULE_memory_size_amount);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5753;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_unit(): Memory_size_unitContext {
		let _localctx: Memory_size_unitContext = new Memory_size_unitContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, cobolParser.RULE_memory_size_unit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5755;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.MODULES || _la === cobolParser.WORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_collating(): Program_collatingContext {
		let _localctx: Program_collatingContext = new Program_collatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, cobolParser.RULE_program_collating);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 5757;
				this.match(cobolParser.PROGRAM);
				this.state = 5759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5758;
					this.separator();
					}
					}
					this.state = 5761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5771;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING) {
				{
				this.state = 5765;
				this.match(cobolParser.COLLATING);
				this.state = 5767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5766;
					this.separator();
					}
					}
					this.state = 5769;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5773;
			this.match(cobolParser.SEQUENCE);
			this.state = 5781;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 964, this._ctx) ) {
			case 1:
				{
				this.state = 5775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5774;
					this.separator();
					}
					}
					this.state = 5777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5779;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 5784;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5783;
				this.separator();
				}
				}
				this.state = 5786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5788;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_name(): Alpha_nameContext {
		let _localctx: Alpha_nameContext = new Alpha_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, cobolParser.RULE_alpha_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5790;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_limit(): Segment_limitContext {
		let _localctx: Segment_limitContext = new Segment_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, cobolParser.RULE_segment_limit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5792;
			this.match(cobolParser.SEGMENT_LIMIT);
			this.state = 5800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				this.state = 5794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5793;
					this.separator();
					}
					}
					this.state = 5796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5798;
				this.match(cobolParser.IS);
				}
			}

			this.state = 5802;
			this.segment_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_number(): Segment_numberContext {
		let _localctx: Segment_numberContext = new Segment_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, cobolParser.RULE_segment_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5804;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names(): Special_namesContext {
		let _localctx: Special_namesContext = new Special_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, cobolParser.RULE_special_names);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5806;
			this.match(cobolParser.SPECIAL_NAMES);
			this.state = 5810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 5807;
				this.separator();
				}
				}
				this.state = 5812;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5813;
			this.match(cobolParser.DOT_);
			this.state = 5817;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 969, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5814;
					this.separator();
					}
					}
				}
				this.state = 5819;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 969, this._ctx);
			}
			this.state = 5833;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (cobolParser.C01 - 48)) | (1 << (cobolParser.CARD_READER - 48)) | (1 << (cobolParser.CLASS - 48)))) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & ((1 << (cobolParser.CONSOLE - 81)) | (1 << (cobolParser.CRT - 81)) | (1 << (cobolParser.CURRENCY - 81)) | (1 << (cobolParser.CURSOR - 81)) | (1 << (cobolParser.DECIMAL_POINT - 81)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 343)) & ~0x1F) === 0 && ((1 << (_la - 343)) & ((1 << (cobolParser.SWITCH - 343)) | (1 << (cobolParser.SYMBOLIC - 343)) | (1 << (cobolParser.SYSERR - 343)) | (1 << (cobolParser.SYSIN - 343)) | (1 << (cobolParser.SYSOUT - 343)))) !== 0)) {
				{
				this.state = 5827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5820;
					this.special_names_content();
					this.state = 5824;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 5821;
						this.separator();
						}
						}
						this.state = 5826;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 5829;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (cobolParser.C01 - 48)) | (1 << (cobolParser.CARD_READER - 48)) | (1 << (cobolParser.CLASS - 48)))) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & ((1 << (cobolParser.CONSOLE - 81)) | (1 << (cobolParser.CRT - 81)) | (1 << (cobolParser.CURRENCY - 81)) | (1 << (cobolParser.CURSOR - 81)) | (1 << (cobolParser.DECIMAL_POINT - 81)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 343)) & ~0x1F) === 0 && ((1 << (_la - 343)) & ((1 << (cobolParser.SWITCH - 343)) | (1 << (cobolParser.SYMBOLIC - 343)) | (1 << (cobolParser.SYSERR - 343)) | (1 << (cobolParser.SYSIN - 343)) | (1 << (cobolParser.SYSOUT - 343)))) !== 0));
				this.state = 5831;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names_content(): Special_names_contentContext {
		let _localctx: Special_names_contentContext = new Special_names_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, cobolParser.RULE_special_names_content);
		let _la: number;
		try {
			this.state = 5942;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CARD_READER:
			case cobolParser.CONSOLE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5835;
				this.predefined_device();
				this.state = 5837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5836;
					this.separator();
					}
					}
					this.state = 5839;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5841;
					this.match(cobolParser.IS);
					this.state = 5843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5842;
						this.separator();
						}
						}
						this.state = 5845;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5849;
				this.device_name();
				}
				break;
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5851;
				this.arg_env();
				this.state = 5853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5852;
					this.separator();
					}
					}
					this.state = 5855;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5857;
					this.match(cobolParser.IS);
					this.state = 5859;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5858;
						this.separator();
						}
						}
						this.state = 5861;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5865;
				this.arg_env_name();
				}
				break;
			case cobolParser.C01:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5867;
				this.match(cobolParser.C01);
				this.state = 5869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5868;
					this.separator();
					}
					}
					this.state = 5871;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5873;
					this.match(cobolParser.IS);
					this.state = 5875;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5874;
						this.separator();
						}
						}
						this.state = 5877;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5881;
				this.top_of_page_name();
				}
				break;
			case cobolParser.SWITCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5883;
				this.switch_();
				}
				break;
			case cobolParser.ALPHABET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5884;
				this.alphabet();
				}
				break;
			case cobolParser.SYMBOLIC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5885;
				this.symbolic_chars();
				}
				break;
			case cobolParser.CLASS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5886;
				this.class_();
				}
				break;
			case cobolParser.CURRENCY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5887;
				this.currency();
				}
				break;
			case cobolParser.DECIMAL_POINT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5888;
				this.match(cobolParser.DECIMAL_POINT);
				this.state = 5890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5889;
					this.separator();
					}
					}
					this.state = 5892;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5894;
					this.match(cobolParser.IS);
					this.state = 5896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5895;
						this.separator();
						}
						}
						this.state = 5898;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5902;
				this.match(cobolParser.COMMA);
				}
				break;
			case cobolParser.CURSOR:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5904;
				this.match(cobolParser.CURSOR);
				this.state = 5906;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5905;
					this.separator();
					}
					}
					this.state = 5908;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5916;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5910;
					this.match(cobolParser.IS);
					this.state = 5912;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5911;
						this.separator();
						}
						}
						this.state = 5914;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5918;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CRT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5920;
				this.match(cobolParser.CRT);
				this.state = 5922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5921;
					this.separator();
					}
					}
					this.state = 5924;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5926;
				this.match(cobolParser.STATUS);
				this.state = 5928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5927;
					this.separator();
					}
					}
					this.state = 5930;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 5938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5932;
					this.match(cobolParser.IS);
					this.state = 5934;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5933;
						this.separator();
						}
						}
						this.state = 5936;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5940;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_data_item(): Qualified_data_itemContext {
		let _localctx: Qualified_data_itemContext = new Qualified_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, cobolParser.RULE_qualified_data_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5944;
			this.match(cobolParser.USER_DEFINED_WORD);
			this.state = 5960;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 995, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5946;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5945;
						this.separator();
						}
						}
						this.state = 5948;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5950;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.IN || _la === cobolParser.OF)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5952;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5951;
						this.separator();
						}
						}
						this.state = 5954;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 5956;
					this.match(cobolParser.USER_DEFINED_WORD);
					}
					}
				}
				this.state = 5962;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 995, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency(): CurrencyContext {
		let _localctx: CurrencyContext = new CurrencyContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, cobolParser.RULE_currency);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5963;
			this.match(cobolParser.CURRENCY);
			this.state = 5965;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5964;
				this.separator();
				}
				}
				this.state = 5967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 5975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 5969;
				this.match(cobolParser.SIGN);
				this.state = 5971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5970;
					this.separator();
					}
					}
					this.state = 5973;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5977;
				this.match(cobolParser.IS);
				this.state = 5979;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5978;
					this.separator();
					}
					}
					this.state = 5981;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 5985;
			this.currency_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency_definition(): Currency_definitionContext {
		let _localctx: Currency_definitionContext = new Currency_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, cobolParser.RULE_currency_definition);
		let _la: number;
		try {
			this.state = 6011;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1005, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5987;
				this.literal_7();
				this.state = 5994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 5988;
					this.match(cobolParser.WITH);
					this.state = 5990;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5989;
						this.separator();
						}
						}
						this.state = 5992;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 5996;
				this.match(cobolParser.PICTURE);
				this.state = 5998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5997;
					this.separator();
					}
					}
					this.state = 6000;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6002;
				this.match(cobolParser.SYMBOL);
				this.state = 6004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6003;
					this.separator();
					}
					}
					this.state = 6006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6008;
				this.literal_8();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6010;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_7(): Literal_7Context {
		let _localctx: Literal_7Context = new Literal_7Context(this._ctx, this.state);
		this.enterRule(_localctx, 434, cobolParser.RULE_literal_7);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6013;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_8(): Literal_8Context {
		let _localctx: Literal_8Context = new Literal_8Context(this._ctx, this.state);
		this.enterRule(_localctx, 436, cobolParser.RULE_literal_8);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6015;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_(): Class_Context {
		let _localctx: Class_Context = new Class_Context(this._ctx, this.state);
		this.enterRule(_localctx, 438, cobolParser.RULE_class_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6017;
			this.match(cobolParser.CLASS);
			this.state = 6019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6018;
				this.separator();
				}
				}
				this.state = 6021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6023;
			this.class_name();
			this.state = 6025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6024;
				this.separator();
				}
				}
				this.state = 6027;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6029;
				this.match(cobolParser.IS);
				this.state = 6031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6030;
					this.separator();
					}
					}
					this.state = 6033;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6044;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6037;
				this.user_class();
				this.state = 6041;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1010, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6038;
						this.separator();
						}
						}
					}
					this.state = 6043;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1010, this._ctx);
				}
				}
				}
				this.state = 6046;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_name(): Class_nameContext {
		let _localctx: Class_nameContext = new Class_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, cobolParser.RULE_class_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6048;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_class(): User_classContext {
		let _localctx: User_classContext = new User_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, cobolParser.RULE_user_class);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6050;
			this.first_literal();
			this.state = 6064;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1014, this._ctx) ) {
			case 1:
				{
				this.state = 6052;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6051;
					this.separator();
					}
					}
					this.state = 6054;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6056;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6058;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6057;
					this.separator();
					}
					}
					this.state = 6060;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6062;
				this.last_literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolic_chars(): Symbolic_charsContext {
		let _localctx: Symbolic_charsContext = new Symbolic_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, cobolParser.RULE_symbolic_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6066;
			this.match(cobolParser.SYMBOLIC);
			this.state = 6068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6067;
				this.separator();
				}
				}
				this.state = 6070;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTERS) {
				{
				this.state = 6072;
				this.match(cobolParser.CHARACTERS);
				this.state = 6074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6073;
					this.separator();
					}
					}
					this.state = 6076;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6080;
				this.symb_ch_definition();
				}
				}
				this.state = 6083;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_definition(): Symb_ch_definitionContext {
		let _localctx: Symb_ch_definitionContext = new Symb_ch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, cobolParser.RULE_symb_ch_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6086;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6085;
					this.symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6088;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1019, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 6091;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 6090;
				this.symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_clause(): Symb_ch_def_clauseContext {
		let _localctx: Symb_ch_def_clauseContext = new Symb_ch_def_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, cobolParser.RULE_symb_ch_def_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6093;
				this.symbol_char();
				this.state = 6095;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6094;
					this.separator();
					}
					}
					this.state = 6097;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
				}
				this.state = 6101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 6109;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARE || _la === cobolParser.IS) {
				{
				this.state = 6103;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ARE || _la === cobolParser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6104;
					this.separator();
					}
					}
					this.state = 6107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6117;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6111;
				this.char_val();
				this.state = 6113;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6112;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6115;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1025, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				}
				this.state = 6119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext {
		let _localctx: Symb_ch_def_in_alphabetContext = new Symb_ch_def_in_alphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, cobolParser.RULE_symb_ch_def_in_alphabet);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6121;
			this.match(cobolParser.IN);
			this.state = 6123;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6122;
				this.separator();
				}
				}
				this.state = 6125;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6127;
			this.alpha_name();
			this.state = 6131;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1028, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6128;
					this.separator();
					}
					}
				}
				this.state = 6133;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1028, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbol_char(): Symbol_charContext {
		let _localctx: Symbol_charContext = new Symbol_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, cobolParser.RULE_symbol_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6134;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_val(): Char_valContext {
		let _localctx: Char_valContext = new Char_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, cobolParser.RULE_char_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6136;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabet(): AlphabetContext {
		let _localctx: AlphabetContext = new AlphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, cobolParser.RULE_alphabet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6138;
			this.match(cobolParser.ALPHABET);
			this.state = 6140;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6139;
				this.separator();
				}
				}
				this.state = 6142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6144;
			this.alpha_name();
			this.state = 6146;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6145;
				this.separator();
				}
				}
				this.state = 6148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6156;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6150;
				this.match(cobolParser.IS);
				this.state = 6152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6151;
					this.separator();
					}
					}
					this.state = 6154;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6158;
			this.alpha_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_value(): Alpha_valueContext {
		let _localctx: Alpha_valueContext = new Alpha_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, cobolParser.RULE_alpha_value);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6176;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ASCII:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6160;
				this.match(cobolParser.ASCII);
				}
				break;
			case cobolParser.STANDARD_1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6161;
				this.match(cobolParser.STANDARD_1);
				}
				break;
			case cobolParser.STANDARD_2:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6162;
				this.match(cobolParser.STANDARD_2);
				}
				break;
			case cobolParser.NATIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6163;
				this.match(cobolParser.NATIVE);
				}
				break;
			case cobolParser.EBCDIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6164;
				this.match(cobolParser.EBCDIC);
				}
				break;
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6172;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6165;
					this.user_alpha();
					this.state = 6169;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1033, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6166;
							this.separator();
							}
							}
						}
						this.state = 6171;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1033, this._ctx);
					}
					}
					}
					this.state = 6174;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_alpha(): User_alphaContext {
		let _localctx: User_alphaContext = new User_alphaContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, cobolParser.RULE_user_alpha);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6212;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1042, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6178;
				this.first_literal();
				this.state = 6192;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1038, this._ctx) ) {
				case 1:
					{
					this.state = 6180;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6179;
						this.separator();
						}
						}
						this.state = 6182;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 6184;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6186;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6185;
						this.separator();
						}
						}
						this.state = 6188;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 6190;
					this.last_literal();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6194;
				this.first_literal();
				this.state = 6208;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6196;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6195;
							this.separator();
							}
							}
							this.state = 6198;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 6200;
						this.match(cobolParser.ALSO);
						this.state = 6202;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6201;
							this.separator();
							}
							}
							this.state = 6204;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 6206;
						this.same_literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6210;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1041, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_literal(): First_literalContext {
		let _localctx: First_literalContext = new First_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, cobolParser.RULE_first_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6214;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_literal(): Last_literalContext {
		let _localctx: Last_literalContext = new Last_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, cobolParser.RULE_last_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6216;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_literal(): Same_literalContext {
		let _localctx: Same_literalContext = new Same_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, cobolParser.RULE_same_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6218;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_(): Switch_Context {
		let _localctx: Switch_Context = new Switch_Context(this._ctx, this.state);
		this.enterRule(_localctx, 468, cobolParser.RULE_switch_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6220;
			this.match(cobolParser.SWITCH);
			this.state = 6222;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6221;
				this.separator();
				}
				}
				this.state = 6224;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6226;
			this.switch_num();
			this.state = 6230;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1044, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6227;
					this.separator();
					}
					}
				}
				this.state = 6232;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1044, this._ctx);
			}
			this.state = 6247;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 6239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6233;
					this.match(cobolParser.IS);
					this.state = 6235;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6234;
						this.separator();
						}
						}
						this.state = 6237;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6241;
				this.switch_name();
				this.state = 6243;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6242;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6245;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1047, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 6269;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
				{
				this.state = 6249;
				this.switch_clause_on();
				this.state = 6257;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1050, this._ctx) ) {
				case 1:
					{
					this.state = 6251;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6250;
						this.separator();
						}
						}
						this.state = 6253;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 6255;
					this.switch_clause_off();
					}
					break;
				}
				}
				break;
			case cobolParser.OFF:
				{
				this.state = 6259;
				this.switch_clause_off();
				this.state = 6267;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1052, this._ctx) ) {
				case 1:
					{
					this.state = 6261;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6260;
						this.separator();
						}
						}
						this.state = 6263;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 6265;
					this.switch_clause_on();
					}
					break;
				}
				}
				break;
			case cobolParser.ALPHABET:
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.C01:
			case cobolParser.CARD_READER:
			case cobolParser.CLASS:
			case cobolParser.CONSOLE:
			case cobolParser.CRT:
			case cobolParser.CURRENCY:
			case cobolParser.CURSOR:
			case cobolParser.DECIMAL_POINT:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SWITCH:
			case cobolParser.SYMBOLIC:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.DOT_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				break;
			default:
				break;
			}
			this.state = 6274;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1054, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6271;
					this.separator();
					}
					}
				}
				this.state = 6276;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1054, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_on(): Switch_clause_onContext {
		let _localctx: Switch_clause_onContext = new Switch_clause_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, cobolParser.RULE_switch_clause_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6277;
			this.match(cobolParser.ON);
			this.state = 6279;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6278;
				this.separator();
				}
				}
				this.state = 6281;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6289;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 6283;
				this.match(cobolParser.STATUS);
				this.state = 6285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6284;
					this.separator();
					}
					}
					this.state = 6287;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6297;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6291;
				this.match(cobolParser.IS);
				this.state = 6293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6292;
					this.separator();
					}
					}
					this.state = 6295;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6299;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_off(): Switch_clause_offContext {
		let _localctx: Switch_clause_offContext = new Switch_clause_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, cobolParser.RULE_switch_clause_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6301;
			this.match(cobolParser.OFF);
			this.state = 6303;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6302;
				this.separator();
				}
				}
				this.state = 6305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6313;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 6307;
				this.match(cobolParser.STATUS);
				this.state = 6309;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6308;
					this.separator();
					}
					}
					this.state = 6311;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6315;
				this.match(cobolParser.IS);
				this.state = 6317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6316;
					this.separator();
					}
					}
					this.state = 6319;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6323;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_name(): Cond_nameContext {
		let _localctx: Cond_nameContext = new Cond_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, cobolParser.RULE_cond_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6325;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_name(): Switch_nameContext {
		let _localctx: Switch_nameContext = new Switch_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, cobolParser.RULE_switch_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6327;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_num(): Switch_numContext {
		let _localctx: Switch_numContext = new Switch_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, cobolParser.RULE_switch_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6329;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_of_page_name(): Top_of_page_nameContext {
		let _localctx: Top_of_page_nameContext = new Top_of_page_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, cobolParser.RULE_top_of_page_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6331;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predefined_device(): Predefined_deviceContext {
		let _localctx: Predefined_deviceContext = new Predefined_deviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, cobolParser.RULE_predefined_device);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6333;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CARD_READER || _la === cobolParser.CONSOLE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (cobolParser.SYSERR - 348)) | (1 << (cobolParser.SYSIN - 348)) | (1 << (cobolParser.SYSOUT - 348)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public device_name(): Device_nameContext {
		let _localctx: Device_nameContext = new Device_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, cobolParser.RULE_device_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6335;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env(): Arg_envContext {
		let _localctx: Arg_envContext = new Arg_envContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, cobolParser.RULE_arg_env);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6337;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ARGUMENT_NUMBER || _la === cobolParser.ARGUMENT_VALUE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env_name(): Arg_env_nameContext {
		let _localctx: Arg_env_nameContext = new Arg_env_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, cobolParser.RULE_arg_env_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6339;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_control(): File_controlContext {
		let _localctx: File_controlContext = new File_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, cobolParser.RULE_file_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6341;
			this.match(cobolParser.FILE_CONTROL);
			this.state = 6345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 6342;
				this.separator();
				}
				}
				this.state = 6347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6348;
			this.match(cobolParser.DOT_);
			this.state = 6352;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1066, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6349;
					this.separator();
					}
					}
				}
				this.state = 6354;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1066, this._ctx);
			}
			this.state = 6364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SELECT) {
				{
				{
				this.state = 6355;
				this.select();
				this.state = 6359;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1067, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6356;
						this.separator();
						}
						}
					}
					this.state = 6361;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1067, this._ctx);
				}
				}
				}
				this.state = 6366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select(): SelectContext {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, cobolParser.RULE_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6367;
			this.match(cobolParser.SELECT);
			this.state = 6369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6368;
				this.separator();
				}
				}
				this.state = 6371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONAL) {
				{
				this.state = 6373;
				this.match(cobolParser.OPTIONAL);
				this.state = 6375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6374;
					this.separator();
					}
					}
					this.state = 6377;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6381;
			this.file_name();
			this.state = 6385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 6382;
				this.separator();
				}
				}
				this.state = 6387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6388;
			this.assign_to();
			this.state = 6392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 6389;
				this.separator();
				}
				}
				this.state = 6394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RESERVE) {
				{
				this.state = 6395;
				this.reserve();
				this.state = 6399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6396;
					this.separator();
					}
					}
					this.state = 6401;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6411;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1077, this._ctx) ) {
			case 1:
				{
				this.state = 6404;
				this.organization();
				this.state = 6408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6405;
					this.separator();
					}
					}
					this.state = 6410;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 6420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BLOCK) {
				{
				this.state = 6413;
				this.block_contains();
				this.state = 6417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6414;
					this.separator();
					}
					}
					this.state = 6419;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6429;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CODE_SET) {
				{
				this.state = 6422;
				this.code_set();
				this.state = 6426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6423;
					this.separator();
					}
					}
					this.state = 6428;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PADDING) {
				{
				this.state = 6431;
				this.padding();
				this.state = 6435;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6432;
					this.separator();
					}
					}
					this.state = 6437;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6447;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1085, this._ctx) ) {
			case 1:
				{
				this.state = 6440;
				this.record_delimiter();
				this.state = 6444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6441;
					this.separator();
					}
					}
					this.state = 6446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 6456;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS || _la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL) {
				{
				this.state = 6449;
				this.access_mode();
				this.state = 6453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6450;
					this.separator();
					}
					}
					this.state = 6455;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ALTERNATE || _la === cobolParser.RECORD) {
				{
				{
				this.state = 6458;
				this.record_key();
				this.state = 6462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6459;
					this.separator();
					}
					}
					this.state = 6464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 6469;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6477;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LOCK) {
				{
				this.state = 6470;
				this.lock_mode();
				this.state = 6474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6471;
					this.separator();
					}
					}
					this.state = 6476;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE || _la === cobolParser.STATUS) {
				{
				this.state = 6479;
				this.file_status();
				this.state = 6483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6480;
					this.separator();
					}
					}
					this.state = 6485;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6488;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_status(): File_statusContext {
		let _localctx: File_statusContext = new File_statusContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, cobolParser.RULE_file_status);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 6490;
				this.match(cobolParser.FILE);
				this.state = 6492;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6491;
					this.separator();
					}
					}
					this.state = 6494;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6498;
			this.match(cobolParser.STATUS);
			this.state = 6500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6499;
				this.separator();
				}
				}
				this.state = 6502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6504;
				this.match(cobolParser.IS);
				this.state = 6506;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6505;
					this.separator();
					}
					}
					this.state = 6508;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6512;
			this.file_stat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_stat(): File_statContext {
		let _localctx: File_statContext = new File_statContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, cobolParser.RULE_file_stat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6514;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key(): Record_keyContext {
		let _localctx: Record_keyContext = new Record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, cobolParser.RULE_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6522;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALTERNATE) {
				{
				this.state = 6516;
				this.match(cobolParser.ALTERNATE);
				this.state = 6518;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6517;
					this.separator();
					}
					}
					this.state = 6520;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6524;
			this.match(cobolParser.RECORD);
			this.state = 6526;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6525;
				this.separator();
				}
				}
				this.state = 6528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6536;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 6530;
				this.match(cobolParser.KEY);
				this.state = 6532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6531;
					this.separator();
					}
					}
					this.state = 6534;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6544;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6538;
				this.match(cobolParser.IS);
				this.state = 6540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6539;
					this.separator();
					}
					}
					this.state = 6542;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6546;
			this.record_key_definition();
			this.state = 6562;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1109, this._ctx) ) {
			case 1:
				{
				this.state = 6548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6547;
					this.separator();
					}
					}
					this.state = 6550;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 6552;
					this.match(cobolParser.WITH);
					this.state = 6554;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6553;
						this.separator();
						}
						}
						this.state = 6556;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6560;
				this.match(cobolParser.DUPLICATES);
				}
				break;
			}
			this.state = 6571;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1111, this._ctx) ) {
			case 1:
				{
				this.state = 6565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6564;
					this.separator();
					}
					}
					this.state = 6567;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6569;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key_definition(): Record_key_definitionContext {
		let _localctx: Record_key_definitionContext = new Record_key_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, cobolParser.RULE_record_key_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6601;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1116, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6573;
				this.qualified_data_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6574;
				this.match(cobolParser.USER_DEFINED_WORD);
				this.state = 6578;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6575;
					this.separator();
					}
					}
					this.state = 6580;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6581;
				this.match(cobolParser.EQUAL_);
				this.state = 6585;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 6582;
					this.separator();
					}
					}
					this.state = 6587;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6588;
				this.qualified_data_item();
				this.state = 6598;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1115, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6592;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
							{
							{
							this.state = 6589;
							this.separator();
							}
							}
							this.state = 6594;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 6595;
						this.qualified_data_item();
						}
						}
					}
					this.state = 6600;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1115, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public access_mode(): Access_modeContext {
		let _localctx: Access_modeContext = new Access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, cobolParser.RULE_access_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6625;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS) {
				{
				this.state = 6603;
				this.match(cobolParser.ACCESS);
				this.state = 6605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6604;
					this.separator();
					}
					}
					this.state = 6607;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MODE) {
					{
					this.state = 6609;
					this.match(cobolParser.MODE);
					this.state = 6611;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6610;
						this.separator();
						}
						}
						this.state = 6613;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6617;
					this.match(cobolParser.IS);
					this.state = 6619;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6618;
						this.separator();
						}
						}
						this.state = 6621;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				}
			}

			this.state = 6627;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6657;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1129, this._ctx) ) {
			case 1:
				{
				this.state = 6629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6628;
					this.separator();
					}
					}
					this.state = 6631;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6633;
				this.match(cobolParser.RELATIVE);
				this.state = 6635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6634;
					this.separator();
					}
					}
					this.state = 6637;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6645;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 6639;
					this.match(cobolParser.KEY);
					this.state = 6641;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6640;
						this.separator();
						}
						}
						this.state = 6643;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6653;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6647;
					this.match(cobolParser.IS);
					this.state = 6649;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6648;
						this.separator();
						}
						}
						this.state = 6651;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6655;
				this.qualified_data_item();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve(): ReserveContext {
		let _localctx: ReserveContext = new ReserveContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, cobolParser.RULE_reserve);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6659;
			this.match(cobolParser.RESERVE);
			this.state = 6661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6660;
				this.separator();
				}
				}
				this.state = 6663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6665;
			this.reserve_num();
			this.state = 6673;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1132, this._ctx) ) {
			case 1:
				{
				this.state = 6667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6666;
					this.separator();
					}
					}
					this.state = 6669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6671;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AREA || _la === cobolParser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve_num(): Reserve_numContext {
		let _localctx: Reserve_numContext = new Reserve_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, cobolParser.RULE_reserve_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6675;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_delimiter(): Record_delimiterContext {
		let _localctx: Record_delimiterContext = new Record_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, cobolParser.RULE_record_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6677;
			this.match(cobolParser.RECORD);
			this.state = 6679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6678;
				this.separator();
				}
				}
				this.state = 6681;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6683;
			this.match(cobolParser.DELIMITER);
			this.state = 6685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6684;
				this.separator();
				}
				}
				this.state = 6687;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6689;
				this.match(cobolParser.IS);
				this.state = 6691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6690;
					this.separator();
					}
					}
					this.state = 6693;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6697;
			this.match(cobolParser.STANDARD_1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public padding(): PaddingContext {
		let _localctx: PaddingContext = new PaddingContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, cobolParser.RULE_padding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6699;
			this.match(cobolParser.PADDING);
			this.state = 6701;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6700;
				this.separator();
				}
				}
				this.state = 6703;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6711;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTER) {
				{
				this.state = 6705;
				this.match(cobolParser.CHARACTER);
				this.state = 6707;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6706;
					this.separator();
					}
					}
					this.state = 6709;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6719;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6713;
				this.match(cobolParser.IS);
				this.state = 6715;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6714;
					this.separator();
					}
					}
					this.state = 6717;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6721;
			this.pad_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pad_char(): Pad_charContext {
		let _localctx: Pad_charContext = new Pad_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, cobolParser.RULE_pad_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6723;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public organization(): OrganizationContext {
		let _localctx: OrganizationContext = new OrganizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, cobolParser.RULE_organization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6739;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ORGANIZATION) {
				{
				this.state = 6725;
				this.match(cobolParser.ORGANIZATION);
				this.state = 6727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6726;
					this.separator();
					}
					}
					this.state = 6729;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6731;
					this.match(cobolParser.IS);
					this.state = 6733;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6732;
						this.separator();
						}
						}
						this.state = 6735;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				}
			}

			this.state = 6752;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SEQUENTIAL:
				{
				this.state = 6741;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.LINE:
				{
				this.state = 6742;
				this.match(cobolParser.LINE);
				this.state = 6744;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6743;
					this.separator();
					}
					}
					this.state = 6746;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6748;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.RELATIVE:
				{
				this.state = 6750;
				this.match(cobolParser.RELATIVE);
				}
				break;
			case cobolParser.INDEXED:
				{
				this.state = 6751;
				this.match(cobolParser.INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode(): Lock_modeContext {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, cobolParser.RULE_lock_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6754;
			this.match(cobolParser.LOCK);
			this.state = 6756;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6755;
				this.separator();
				}
				}
				this.state = 6758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.MODE) {
				{
				this.state = 6760;
				this.match(cobolParser.MODE);
				this.state = 6762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6761;
					this.separator();
					}
					}
					this.state = 6764;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6774;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6768;
				this.match(cobolParser.IS);
				this.state = 6770;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6769;
					this.separator();
					}
					}
					this.state = 6772;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6776;
			this.lock_mode_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode_definition(): Lock_mode_definitionContext {
		let _localctx: Lock_mode_definitionContext = new Lock_mode_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, cobolParser.RULE_lock_mode_definition);
		let _la: number;
		try {
			this.state = 6846;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.MANUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6778;
				this.match(cobolParser.MANUAL);
				this.state = 6780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6779;
					this.separator();
					}
					}
					this.state = 6782;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 6784;
					this.match(cobolParser.WITH);
					this.state = 6786;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6785;
						this.separator();
						}
						}
						this.state = 6788;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6792;
				this.match(cobolParser.LOCK);
				this.state = 6794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6793;
					this.separator();
					}
					}
					this.state = 6796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6798;
				this.match(cobolParser.ON);
				this.state = 6800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6799;
					this.separator();
					}
					}
					this.state = 6802;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6804;
				this.match(cobolParser.MULTIPLE);
				this.state = 6806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6805;
					this.separator();
					}
					}
					this.state = 6808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6810;
				this.match(cobolParser.RECORDS);
				}
				break;
			case cobolParser.AUTOMATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6812;
				this.match(cobolParser.AUTOMATIC);
				this.state = 6843;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1165, this._ctx) ) {
				case 1:
					{
					this.state = 6814;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6813;
						this.separator();
						}
						}
						this.state = 6816;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 6824;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 6818;
						this.match(cobolParser.WITH);
						this.state = 6820;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6819;
							this.separator();
							}
							}
							this.state = 6822;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					this.state = 6841;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.LOCK:
						{
						{
						this.state = 6826;
						this.match(cobolParser.LOCK);
						this.state = 6828;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6827;
							this.separator();
							}
							}
							this.state = 6830;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 6832;
						this.match(cobolParser.ON);
						this.state = 6834;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6833;
							this.separator();
							}
							}
							this.state = 6836;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 6838;
						this.match(cobolParser.RECORD);
						}
						}
						break;
					case cobolParser.ROLLBACK:
						{
						this.state = 6840;
						this.match(cobolParser.ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.EXCLUSIVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6845;
				this.match(cobolParser.EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code_set(): Code_setContext {
		let _localctx: Code_setContext = new Code_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, cobolParser.RULE_code_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6848;
			this.match(cobolParser.CODE_SET);
			this.state = 6850;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6849;
				this.separator();
				}
				}
				this.state = 6852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6860;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6854;
				this.match(cobolParser.IS);
				this.state = 6856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6855;
					this.separator();
					}
					}
					this.state = 6858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6862;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_contains(): Block_containsContext {
		let _localctx: Block_containsContext = new Block_containsContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, cobolParser.RULE_block_contains);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6864;
			this.match(cobolParser.BLOCK);
			this.state = 6866;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6865;
				this.separator();
				}
				}
				this.state = 6868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6876;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 6870;
				this.match(cobolParser.CONTAINS);
				this.state = 6872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6871;
					this.separator();
					}
					}
					this.state = 6874;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6890;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1175, this._ctx) ) {
			case 1:
				{
				this.state = 6878;
				this.smallest_block();
				this.state = 6880;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6879;
					this.separator();
					}
					}
					this.state = 6882;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 6884;
				this.match(cobolParser.TO);
				this.state = 6886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6885;
					this.separator();
					}
					}
					this.state = 6888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
				break;
			}
			this.state = 6892;
			this.blocksize();
			this.state = 6894;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6893;
				this.separator();
				}
				}
				this.state = 6896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6898;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.RECORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public smallest_block(): Smallest_blockContext {
		let _localctx: Smallest_blockContext = new Smallest_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, cobolParser.RULE_smallest_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6900;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocksize(): BlocksizeContext {
		let _localctx: BlocksizeContext = new BlocksizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, cobolParser.RULE_blocksize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6902;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to(): Assign_toContext {
		let _localctx: Assign_toContext = new Assign_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, cobolParser.RULE_assign_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6904;
			this.match(cobolParser.ASSIGN);
			this.state = 6906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6905;
				this.separator();
				}
				}
				this.state = 6908;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 6916;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TO) {
				{
				this.state = 6910;
				this.match(cobolParser.TO);
				this.state = 6912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6911;
					this.separator();
					}
					}
					this.state = 6914;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 6918;
			this.assign_to_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to_definition(): Assign_to_definitionContext {
		let _localctx: Assign_to_definitionContext = new Assign_to_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, cobolParser.RULE_assign_to_definition);
		let _la: number;
		try {
			this.state = 6947;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DISK:
			case cobolParser.DYNAMIC:
			case cobolParser.EXTERNAL:
			case cobolParser.PRINTER:
			case cobolParser.STRING_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL) {
					{
					this.state = 6920;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6922;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6921;
						this.separator();
						}
						}
						this.state = 6924;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6928;
				this.file_spec();
				}
				break;
			case cobolParser.MULTIPLE:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6935;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MULTIPLE) {
					{
					this.state = 6929;
					this.match(cobolParser.MULTIPLE);
					this.state = 6931;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6930;
						this.separator();
						}
						}
						this.state = 6933;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 6937;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6945;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1185, this._ctx) ) {
				case 1:
					{
					this.state = 6939;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6938;
						this.separator();
						}
						}
						this.state = 6941;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 6943;
					this.match(cobolParser.FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_spec(): File_specContext {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, cobolParser.RULE_file_spec);
		try {
			this.state = 6953;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6949;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6950;
				this.qualified_data_item();
				}
				break;
			case cobolParser.DISK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6951;
				this.match(cobolParser.DISK);
				}
				break;
			case cobolParser.PRINTER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6952;
				this.match(cobolParser.PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, cobolParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6955;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public i_o_control(): I_o_controlContext {
		let _localctx: I_o_controlContext = new I_o_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, cobolParser.RULE_i_o_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6957;
			this.match(cobolParser.I_O_CONTROL);
			this.state = 6961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 6958;
				this.separator();
				}
				}
				this.state = 6963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6964;
			this.match(cobolParser.DOT_);
			this.state = 6968;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1189, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6965;
					this.separator();
					}
					}
				}
				this.state = 6970;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1189, this._ctx);
			}
			this.state = 7026;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME || _la === cobolParser.DOT_) {
				{
				this.state = 6980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.APPLY) {
					{
					{
					this.state = 6971;
					this.apply();
					this.state = 6975;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 6972;
						this.separator();
						}
						}
						this.state = 6977;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 6982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6992;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.SAME) {
					{
					{
					this.state = 6983;
					this.same();
					this.state = 6987;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 6984;
						this.separator();
						}
						}
						this.state = 6989;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 6994;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.RERUN) {
					{
					{
					this.state = 6995;
					this.rerun();
					this.state = 6999;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 6996;
						this.separator();
						}
						}
						this.state = 7001;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 7006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.MULTIPLE) {
					{
					{
					this.state = 7007;
					this.multiple_file();
					this.state = 7011;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7008;
						this.separator();
						}
						}
						this.state = 7013;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 7018;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7019;
				this.match(cobolParser.DOT_);
				this.state = 7023;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1198, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7020;
						this.separator();
						}
						}
					}
					this.state = 7025;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1198, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file(): Multiple_fileContext {
		let _localctx: Multiple_fileContext = new Multiple_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, cobolParser.RULE_multiple_file);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7028;
			this.match(cobolParser.MULTIPLE);
			this.state = 7030;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7029;
				this.separator();
				}
				}
				this.state = 7032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7034;
			this.match(cobolParser.FILE);
			this.state = 7036;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7035;
				this.separator();
				}
				}
				this.state = 7038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TAPE) {
				{
				this.state = 7040;
				this.match(cobolParser.TAPE);
				this.state = 7042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7041;
					this.separator();
					}
					}
					this.state = 7044;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 7054;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 7048;
				this.match(cobolParser.CONTAINS);
				this.state = 7050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7049;
					this.separator();
					}
					}
					this.state = 7052;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 7063;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7056;
				this.multiple_file_definition();
				this.state = 7060;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1206, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7057;
						this.separator();
						}
						}
					}
					this.state = 7062;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1206, this._ctx);
				}
				}
				}
				this.state = 7065;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_definition(): Multiple_file_definitionContext {
		let _localctx: Multiple_file_definitionContext = new Multiple_file_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, cobolParser.RULE_multiple_file_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7067;
			this.multiple_file_name();
			this.state = 7081;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1210, this._ctx) ) {
			case 1:
				{
				this.state = 7069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7068;
					this.separator();
					}
					}
					this.state = 7071;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7073;
				this.match(cobolParser.POSITION);
				this.state = 7075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7074;
					this.separator();
					}
					}
					this.state = 7077;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7079;
				this.pos_integer();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_name(): Multiple_file_nameContext {
		let _localctx: Multiple_file_nameContext = new Multiple_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, cobolParser.RULE_multiple_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7083;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos_integer(): Pos_integerContext {
		let _localctx: Pos_integerContext = new Pos_integerContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, cobolParser.RULE_pos_integer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7085;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun(): RerunContext {
		let _localctx: RerunContext = new RerunContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, cobolParser.RULE_rerun);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7087;
			this.match(cobolParser.RERUN);
			this.state = 7089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7088;
				this.separator();
				}
				}
				this.state = 7091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7105;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 7093;
				this.match(cobolParser.ON);
				this.state = 7095;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7094;
					this.separator();
					}
					}
					this.state = 7097;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7099;
				this.file_name();
				this.state = 7101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7100;
					this.separator();
					}
					}
					this.state = 7103;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 7113;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EVERY) {
				{
				this.state = 7107;
				this.match(cobolParser.EVERY);
				this.state = 7109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7108;
					this.separator();
					}
					}
					this.state = 7111;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 7115;
			this.rerun_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_definition(): Rerun_definitionContext {
		let _localctx: Rerun_definitionContext = new Rerun_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, cobolParser.RULE_rerun_definition);
		let _la: number;
		try {
			this.state = 7142;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1221, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7117;
				this.rerun_def_file();
				this.state = 7119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7118;
					this.separator();
					}
					}
					this.state = 7121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 7123;
					this.match(cobolParser.OF);
					this.state = 7125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7124;
						this.separator();
						}
						}
						this.state = 7127;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 7131;
				this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7133;
				this.clock_count();
				this.state = 7135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7134;
					this.separator();
					}
					}
					this.state = 7137;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7139;
				this.match(cobolParser.CLOCK_UNITS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7141;
				this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clock_count(): Clock_countContext {
		let _localctx: Clock_countContext = new Clock_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, cobolParser.RULE_clock_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7144;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_name(): Condition_nameContext {
		let _localctx: Condition_nameContext = new Condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, cobolParser.RULE_condition_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7146;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_def_file(): Rerun_def_fileContext {
		let _localctx: Rerun_def_fileContext = new Rerun_def_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, cobolParser.RULE_rerun_def_file);
		let _la: number;
		try {
			this.state = 7173;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.END:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7162;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.END) {
					{
					this.state = 7148;
					this.match(cobolParser.END);
					this.state = 7150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7149;
						this.separator();
						}
						}
						this.state = 7152;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 7160;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OF) {
						{
						this.state = 7154;
						this.match(cobolParser.OF);
						this.state = 7156;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7155;
							this.separator();
							}
							}
							this.state = 7158;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						}
					}

					}
				}

				this.state = 7164;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7165;
				this.rec_count();
				this.state = 7167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7166;
					this.separator();
					}
					}
					this.state = 7169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7171;
				this.match(cobolParser.RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_count(): Rec_countContext {
		let _localctx: Rec_countContext = new Rec_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, cobolParser.RULE_rec_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7175;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same(): SameContext {
		let _localctx: SameContext = new SameContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, cobolParser.RULE_same);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7177;
			this.match(cobolParser.SAME);
			this.state = 7179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7178;
				this.separator();
				}
				}
				this.state = 7181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE) {
				{
				this.state = 7183;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7184;
					this.separator();
					}
					}
					this.state = 7187;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 7197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA) {
				{
				this.state = 7191;
				this.match(cobolParser.AREA);
				this.state = 7193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7192;
					this.separator();
					}
					}
					this.state = 7195;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 7205;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOR) {
				{
				this.state = 7199;
				this.match(cobolParser.FOR);
				this.state = 7201;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7200;
					this.separator();
					}
					}
					this.state = 7203;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
			}

			this.state = 7207;
			this.same_area_file();
			this.state = 7215;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7208;
						this.separator();
						}
						}
						this.state = 7211;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 7213;
					this.same_area_file();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7217;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1236, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_area_file(): Same_area_fileContext {
		let _localctx: Same_area_fileContext = new Same_area_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, cobolParser.RULE_same_area_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7219;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply(): ApplyContext {
		let _localctx: ApplyContext = new ApplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, cobolParser.RULE_apply);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7221;
			this.match(cobolParser.APPLY);
			this.state = 7223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7222;
				this.separator();
				}
				}
				this.state = 7225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7233;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7227;
				this.apply_definition();
				this.state = 7229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7228;
					this.separator();
					}
					}
					this.state = 7231;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				}
				}
				this.state = 7235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (cobolParser.CONTIGUOUS - 83)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 83)) | (1 << (cobolParser.DEFERRED_WRITE - 83)))) !== 0) || _la === cobolParser.EXTENSION || _la === cobolParser.FILL_SIZE || _la === cobolParser.LOCK_HOLDING || _la === cobolParser.MASS_INSERT || _la === cobolParser.PREALLOCATION || _la === cobolParser.PRINT_CONTROL || _la === cobolParser.WINDOW);
			this.state = 7237;
			this.match(cobolParser.ON);
			this.state = 7239;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7238;
				this.separator();
				}
				}
				this.state = 7241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7250;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7243;
				this.file_name();
				this.state = 7247;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1241, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7244;
						this.separator();
						}
						}
					}
					this.state = 7249;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1241, this._ctx);
				}
				}
				}
				this.state = 7252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply_definition(): Apply_definitionContext {
		let _localctx: Apply_definitionContext = new Apply_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, cobolParser.RULE_apply_definition);
		let _la: number;
		try {
			this.state = 7291;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DEFERRED_WRITE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7254;
				this.match(cobolParser.DEFERRED_WRITE);
				}
				break;
			case cobolParser.EXTENSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7255;
				this.match(cobolParser.EXTENSION);
				this.state = 7257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7256;
					this.separator();
					}
					}
					this.state = 7259;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7261;
				this.extend_amt();
				}
				break;
			case cobolParser.FILL_SIZE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7263;
				this.match(cobolParser.FILL_SIZE);
				}
				break;
			case cobolParser.LOCK_HOLDING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7264;
				this.match(cobolParser.LOCK_HOLDING);
				}
				break;
			case cobolParser.MASS_INSERT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7265;
				this.match(cobolParser.MASS_INSERT);
				}
				break;
			case cobolParser.CONTIGUOUS:
			case cobolParser.CONTIGUOUS_BEST_TRY:
			case cobolParser.PREALLOCATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY) {
					{
					this.state = 7266;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7268;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7267;
						this.separator();
						}
						}
						this.state = 7270;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					}
				}

				this.state = 7274;
				this.match(cobolParser.PREALLOCATION);
				this.state = 7276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7275;
					this.separator();
					}
					}
					this.state = 7278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7280;
				this.preall_amt();
				}
				break;
			case cobolParser.PRINT_CONTROL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7282;
				this.match(cobolParser.PRINT_CONTROL);
				}
				break;
			case cobolParser.WINDOW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7283;
				this.match(cobolParser.WINDOW);
				this.state = 7285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7284;
					this.separator();
					}
					}
					this.state = 7287;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7289;
				this.window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_ptrs(): Window_ptrsContext {
		let _localctx: Window_ptrsContext = new Window_ptrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, cobolParser.RULE_window_ptrs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7293;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preall_amt(): Preall_amtContext {
		let _localctx: Preall_amtContext = new Preall_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, cobolParser.RULE_preall_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7295;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extend_amt(): Extend_amtContext {
		let _localctx: Extend_amtContext = new Extend_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, cobolParser.RULE_extend_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7297;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public arithmetic_expression(): Arithmetic_expressionContext;
	public arithmetic_expression(_p: number): Arithmetic_expressionContext;
	// @RuleVersion(0)
	public arithmetic_expression(_p?: number): Arithmetic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Arithmetic_expressionContext = new Arithmetic_expressionContext(this._ctx, _parentState);
		let _prevctx: Arithmetic_expressionContext = _localctx;
		let _startState: number = 572;
		this.enterRecursionRule(_localctx, 572, cobolParser.RULE_arithmetic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7327;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LPAREN_:
				{
				this.state = 7300;
				this.match(cobolParser.LPAREN_);
				this.state = 7304;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7301;
					this.arithmetic_separator();
					}
					}
					this.state = 7306;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7307;
				this.arithmetic_expression(0);
				this.state = 7311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7308;
					this.arithmetic_separator();
					}
					}
					this.state = 7313;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7314;
				this.match(cobolParser.RPAREN_);
				}
				break;
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
				{
				this.state = 7316;
				this.unary_arithmetic_operator();
				this.state = 7320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7317;
					this.arithmetic_separator();
					}
					}
					this.state = 7322;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7323;
				this.arithmetic_expression(3);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 7325;
				this.identifier();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 7326;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7347;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1255, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_arithmetic_expression);
					this.state = 7329;
					if (!(this.precpred(this._ctx, 4))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
					}
					this.state = 7333;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7330;
						this.arithmetic_separator();
						}
						}
						this.state = 7335;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7336;
					this.binary_arithmetic_operator();
					this.state = 7340;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7337;
						this.arithmetic_separator();
						}
						}
						this.state = 7342;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7343;
					this.arithmetic_expression(5);
					}
					}
				}
				this.state = 7349;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1255, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, cobolParser.RULE_constant);
		try {
			this.state = 7353;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7350;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7351;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7352;
				this.figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext {
		let _localctx: Binary_arithmetic_operatorContext = new Binary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, cobolParser.RULE_binary_arithmetic_operator);
		try {
			this.state = 7361;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1257, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7355;
				this.match(cobolParser.PLUS_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7356;
				this.match(cobolParser.MINUS_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7357;
				this.match(cobolParser.STAR_);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7358;
				this.match(cobolParser.SLASH_);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7359;
				this.match(cobolParser.STAR_);
				this.state = 7360;
				this.match(cobolParser.STAR_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext {
		let _localctx: Unary_arithmetic_operatorContext = new Unary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, cobolParser.RULE_unary_arithmetic_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7363;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PLUS_ || _la === cobolParser.MINUS_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_expression(): Logic_expressionContext;
	public logic_expression(_p: number): Logic_expressionContext;
	// @RuleVersion(0)
	public logic_expression(_p?: number): Logic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_expressionContext = new Logic_expressionContext(this._ctx, _parentState);
		let _prevctx: Logic_expressionContext = _localctx;
		let _startState: number = 580;
		this.enterRecursionRule(_localctx, 580, cobolParser.RULE_logic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7394;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1261, this._ctx) ) {
			case 1:
				{
				this.state = 7366;
				this.match(cobolParser.LPAREN_);
				this.state = 7370;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7367;
					this.arithmetic_separator();
					}
					}
					this.state = 7372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7373;
				this.logic_expression(0);
				this.state = 7377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7374;
					this.arithmetic_separator();
					}
					}
					this.state = 7379;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7380;
				this.match(cobolParser.RPAREN_);
				}
				break;

			case 2:
				{
				this.state = 7382;
				this.match(cobolParser.NOT);
				this.state = 7386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7383;
					this.arithmetic_separator();
					}
					}
					this.state = 7388;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7389;
				this.logic_expression(5);
				}
				break;

			case 3:
				{
				this.state = 7390;
				this.class_condition();
				}
				break;

			case 4:
				{
				this.state = 7391;
				this.logic_condition(0);
				}
				break;

			case 5:
				{
				this.state = 7392;
				this.sign_condition();
				}
				break;

			case 6:
				{
				this.state = 7393;
				this.success_failure_condition();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7414;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1264, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_expression);
					this.state = 7396;
					if (!(this.precpred(this._ctx, 6))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
					}
					this.state = 7400;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7397;
						this.arithmetic_separator();
						}
						}
						this.state = 7402;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7403;
					this.logic_operation();
					this.state = 7407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7404;
						this.arithmetic_separator();
						}
						}
						this.state = 7409;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7410;
					this.logic_expression(7);
					}
					}
				}
				this.state = 7416;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1264, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public success_failure_condition(): Success_failure_conditionContext {
		let _localctx: Success_failure_conditionContext = new Success_failure_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, cobolParser.RULE_success_failure_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7417;
			this.qualified_data_item();
			this.state = 7425;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1266, this._ctx) ) {
			case 1:
				{
				this.state = 7419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7418;
					this.arithmetic_separator();
					}
					}
					this.state = 7421;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7423;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 7428;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7427;
				this.arithmetic_separator();
				}
				}
				this.state = 7430;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7432;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FAILURE || _la === cobolParser.SUCCESS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_condition(): Logic_conditionContext;
	public logic_condition(_p: number): Logic_conditionContext;
	// @RuleVersion(0)
	public logic_condition(_p?: number): Logic_conditionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_conditionContext = new Logic_conditionContext(this._ctx, _parentState);
		let _prevctx: Logic_conditionContext = _localctx;
		let _startState: number = 584;
		this.enterRecursionRule(_localctx, 584, cobolParser.RULE_logic_condition, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7453;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1270, this._ctx) ) {
			case 1:
				{
				this.state = 7435;
				this.arithmetic_expression(0);
				this.state = 7439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7436;
					this.arithmetic_separator();
					}
					}
					this.state = 7441;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7442;
				this.condition_operator();
				this.state = 7446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7443;
					this.arithmetic_separator();
					}
					}
					this.state = 7448;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7449;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				{
				this.state = 7451;
				this.class_condition();
				}
				break;

			case 3:
				{
				this.state = 7452;
				this.qualified_data_item();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7479;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1274, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_conditionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_condition);
					this.state = 7455;
					if (!(this.precpred(this._ctx, 1))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
					}
					this.state = 7457;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7456;
						this.arithmetic_separator();
						}
						}
						this.state = 7459;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 7461;
					this.logic_operation();
					this.state = 7465;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7462;
						this.arithmetic_separator();
						}
						}
						this.state = 7467;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7468;
					this.condition_operator();
					this.state = 7472;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7469;
						this.arithmetic_separator();
						}
						}
						this.state = 7474;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7475;
					this.arithmetic_expression(0);
					}
					}
				}
				this.state = 7481;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1274, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logic_operation(): Logic_operationContext {
		let _localctx: Logic_operationContext = new Logic_operationContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, cobolParser.RULE_logic_operation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7482;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AND || _la === cobolParser.OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition(): Sign_conditionContext {
		let _localctx: Sign_conditionContext = new Sign_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, cobolParser.RULE_sign_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7484;
			this.arithmetic_expression(0);
			this.state = 7492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1276, this._ctx) ) {
			case 1:
				{
				this.state = 7486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7485;
					this.arithmetic_separator();
					}
					}
					this.state = 7488;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7490;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 7501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1278, this._ctx) ) {
			case 1:
				{
				this.state = 7495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7494;
					this.arithmetic_separator();
					}
					}
					this.state = 7497;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7499;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 7504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7503;
				this.arithmetic_separator();
				}
				}
				this.state = 7506;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7508;
			this.sign_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition_name(): Sign_condition_nameContext {
		let _localctx: Sign_condition_nameContext = new Sign_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, cobolParser.RULE_sign_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7510;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NEGATIVE || _la === cobolParser.POSITIVE || _la === cobolParser.ZERO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition(): Class_conditionContext {
		let _localctx: Class_conditionContext = new Class_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, cobolParser.RULE_class_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7512;
			this.identifier();
			this.state = 7520;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1281, this._ctx) ) {
			case 1:
				{
				this.state = 7514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7513;
					this.arithmetic_separator();
					}
					}
					this.state = 7516;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7518;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 7529;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1283, this._ctx) ) {
			case 1:
				{
				this.state = 7523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7522;
					this.arithmetic_separator();
					}
					}
					this.state = 7525;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7527;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 7532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7531;
				this.arithmetic_separator();
				}
				}
				this.state = 7534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
			this.state = 7536;
			this.class_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition_name(): Class_condition_nameContext {
		let _localctx: Class_condition_nameContext = new Class_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, cobolParser.RULE_class_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7538;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER))) !== 0) || _la === cobolParser.NUMERIC || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_operator(): Condition_operatorContext {
		let _localctx: Condition_operatorContext = new Condition_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, cobolParser.RULE_condition_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7547;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7540;
				this.match(cobolParser.IS);
				this.state = 7544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7541;
					this.arithmetic_separator();
					}
					}
					this.state = 7546;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 7684;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1314, this._ctx) ) {
			case 1:
				{
				this.state = 7556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 7549;
					this.match(cobolParser.NOT);
					this.state = 7553;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7550;
						this.arithmetic_separator();
						}
						}
						this.state = 7555;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 7618;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.GREATER:
					{
					this.state = 7558;
					this.match(cobolParser.GREATER);
					this.state = 7566;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1290, this._ctx) ) {
					case 1:
						{
						this.state = 7560;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7559;
							this.arithmetic_separator();
							}
							}
							this.state = 7562;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 7564;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.GT_:
					{
					this.state = 7568;
					this.match(cobolParser.GT_);
					this.state = 7576;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1292, this._ctx) ) {
					case 1:
						{
						this.state = 7570;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7569;
							this.arithmetic_separator();
							}
							}
							this.state = 7572;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 7574;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LESS:
					{
					this.state = 7578;
					this.match(cobolParser.LESS);
					this.state = 7586;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1294, this._ctx) ) {
					case 1:
						{
						this.state = 7580;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7579;
							this.arithmetic_separator();
							}
							}
							this.state = 7582;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 7584;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LT_:
					{
					this.state = 7588;
					this.match(cobolParser.LT_);
					this.state = 7596;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1296, this._ctx) ) {
					case 1:
						{
						this.state = 7590;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7589;
							this.arithmetic_separator();
							}
							}
							this.state = 7592;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 7594;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL:
					{
					this.state = 7598;
					this.match(cobolParser.EQUAL);
					this.state = 7606;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1298, this._ctx) ) {
					case 1:
						{
						this.state = 7600;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7599;
							this.arithmetic_separator();
							}
							}
							this.state = 7602;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 7604;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL_:
					{
					this.state = 7608;
					this.match(cobolParser.EQUAL_);
					this.state = 7616;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1300, this._ctx) ) {
					case 1:
						{
						this.state = 7610;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7609;
							this.arithmetic_separator();
							}
							}
							this.state = 7612;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
						this.state = 7614;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 7620;
				this.match(cobolParser.GREATER);
				this.state = 7628;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1303, this._ctx) ) {
				case 1:
					{
					this.state = 7622;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7621;
						this.arithmetic_separator();
						}
						}
						this.state = 7624;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 7626;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 7631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7630;
					this.arithmetic_separator();
					}
					}
					this.state = 7633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7635;
				this.match(cobolParser.OR);
				this.state = 7637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7636;
					this.arithmetic_separator();
					}
					}
					this.state = 7639;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7641;
				this.match(cobolParser.EQUAL);
				this.state = 7649;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1307, this._ctx) ) {
				case 1:
					{
					this.state = 7643;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7642;
						this.arithmetic_separator();
						}
						}
						this.state = 7645;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 7647;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 7651;
				this.match(cobolParser.GE_);
				}
				break;

			case 4:
				{
				this.state = 7652;
				this.match(cobolParser.LESS);
				this.state = 7660;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1309, this._ctx) ) {
				case 1:
					{
					this.state = 7654;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7653;
						this.arithmetic_separator();
						}
						}
						this.state = 7656;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 7658;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 7663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7662;
					this.arithmetic_separator();
					}
					}
					this.state = 7665;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7667;
				this.match(cobolParser.OR);
				this.state = 7669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7668;
					this.arithmetic_separator();
					}
					}
					this.state = 7671;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
				this.state = 7673;
				this.match(cobolParser.EQUAL);
				this.state = 7681;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1313, this._ctx) ) {
				case 1:
					{
					this.state = 7675;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7674;
						this.arithmetic_separator();
						}
						}
						this.state = 7677;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0));
					this.state = 7679;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 5:
				{
				this.state = 7683;
				this.match(cobolParser.LE_);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier_result(): Identifier_resultContext {
		let _localctx: Identifier_resultContext = new Identifier_resultContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, cobolParser.RULE_identifier_result);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7686;
			this.qualified_data_item();
			this.state = 7694;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1316, this._ctx) ) {
			case 1:
				{
				this.state = 7690;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7687;
					this.arithmetic_separator();
					}
					}
					this.state = 7692;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7693;
				this.subscripting();
				}
				break;
			}
			this.state = 7703;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1318, this._ctx) ) {
			case 1:
				{
				this.state = 7699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7696;
					this.arithmetic_separator();
					}
					}
					this.state = 7701;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7702;
				this.reference_modification();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, cobolParser.RULE_identifier);
		let _la: number;
		try {
			this.state = 7732;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7705;
				this.identifier_result();
				}
				break;
			case cobolParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7706;
				this.match(cobolParser.FUNCTION);
				this.state = 7710;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7707;
					this.arithmetic_separator();
					}
					}
					this.state = 7712;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7713;
				this.function_name();
				this.state = 7721;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1321, this._ctx) ) {
				case 1:
					{
					this.state = 7717;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7714;
						this.arithmetic_separator();
						}
						}
						this.state = 7719;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7720;
					this.arguments();
					}
					break;
				}
				this.state = 7730;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1323, this._ctx) ) {
				case 1:
					{
					this.state = 7726;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7723;
						this.arithmetic_separator();
						}
						}
						this.state = 7728;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7729;
					this.reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arguments(): ArgumentsContext {
		let _localctx: ArgumentsContext = new ArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, cobolParser.RULE_arguments);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7734;
			this.subscripting();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subscripting(): SubscriptingContext {
		let _localctx: SubscriptingContext = new SubscriptingContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, cobolParser.RULE_subscripting);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7736;
			this.match(cobolParser.LPAREN_);
			this.state = 7740;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 7737;
				this.arithmetic_separator();
				}
				}
				this.state = 7742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7745;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1326, this._ctx) ) {
			case 1:
				{
				this.state = 7743;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				{
				this.state = 7744;
				this.match(cobolParser.ALL);
				}
				break;
			}
			this.state = 7759;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1329, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7750;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.COMMA_ - 401)) | (1 << (cobolParser.SEMI_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
						{
						{
						this.state = 7747;
						this.separator();
						}
						}
						this.state = 7752;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7755;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1328, this._ctx) ) {
					case 1:
						{
						this.state = 7753;
						this.arithmetic_expression(0);
						}
						break;

					case 2:
						{
						this.state = 7754;
						this.match(cobolParser.ALL);
						}
						break;
					}
					}
					}
				}
				this.state = 7761;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1329, this._ctx);
			}
			this.state = 7765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 7762;
				this.arithmetic_separator();
				}
				}
				this.state = 7767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7768;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reference_modification(): Reference_modificationContext {
		let _localctx: Reference_modificationContext = new Reference_modificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, cobolParser.RULE_reference_modification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7770;
			this.match(cobolParser.LPAREN_);
			this.state = 7774;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 7771;
				this.arithmetic_separator();
				}
				}
				this.state = 7776;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7777;
			this.leftmost_character_position();
			this.state = 7781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 7778;
				this.arithmetic_separator();
				}
				}
				this.state = 7783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7784;
			this.match(cobolParser.COLON_);
			this.state = 7792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1334, this._ctx) ) {
			case 1:
				{
				this.state = 7788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
					{
					{
					this.state = 7785;
					this.arithmetic_separator();
					}
					}
					this.state = 7790;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7791;
				this.length();
				}
				break;
			}
			this.state = 7797;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & ((1 << (cobolParser.START_SLASH_ - 401)) | (1 << (cobolParser.START_STAR_ - 401)) | (1 << (cobolParser.START_FOUR_SPACES - 401)) | (1 << (cobolParser.WHITESPACE - 401)) | (1 << (cobolParser.NEWLINE - 401)))) !== 0)) {
				{
				{
				this.state = 7794;
				this.arithmetic_separator();
				}
				}
				this.state = 7799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7800;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leftmost_character_position(): Leftmost_character_positionContext {
		let _localctx: Leftmost_character_positionContext = new Leftmost_character_positionContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, cobolParser.RULE_leftmost_character_position);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7802;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public length(): LengthContext {
		let _localctx: LengthContext = new LengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, cobolParser.RULE_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7804;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_name(): Function_nameContext {
		let _localctx: Function_nameContext = new Function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, cobolParser.RULE_function_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7806;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 286:
			return this.arithmetic_expression_sempred(_localctx as Arithmetic_expressionContext, predIndex);

		case 290:
			return this.logic_expression_sempred(_localctx as Logic_expressionContext, predIndex);

		case 292:
			return this.logic_condition_sempred(_localctx as Logic_conditionContext, predIndex);
		}
		return true;
	}
	private arithmetic_expression_sempred(_localctx: Arithmetic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private logic_expression_sempred(_localctx: Logic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 6);
		}
		return true;
	}
	private logic_condition_sempred(_localctx: Logic_conditionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 15;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u01B2\u1E83\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x03\x02\x03\x02\x07\x02\u026B\n\x02\f" +
		"\x02\x0E\x02\u026E\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03" +
		"\u027E\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u0286" +
		"\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u028C\n\x05\x03\x06\x03" +
		"\x06\x07\x06\u0290\n\x06\f\x06\x0E\x06\u0293\v\x06\x03\x06\x03\x06\x03" +
		"\x06\x07\x06\u0298\n\x06\f\x06\x0E\x06\u029B\v\x06\x03\x06\x05\x06\u029E" +
		"\n\x06\x03\x07\x03\x07\x05\x07\u02A2\n\x07\x03\x07\x05\x07\u02A5\n\x07" +
		"\x03\x07\x05\x07\u02A8\n\x07\x03\b\x03\b\x05\b\u02AC\n\b\x03\b\x03\b\x07" +
		"\b\u02B0\n\b\f\b\x0E\b\u02B3\v\b\x07\b\u02B5\n\b\f\b\x0E\b\u02B8\v\b\x03" +
		"\b\x03\b\x07\b\u02BC\n\b\f\b\x0E\b\u02BF\v\b\x07\b\u02C1\n\b\f\b\x0E\b" +
		"\u02C4\v\b\x05\b\u02C6\n\b\x03\b\x07\b\u02C9\n\b\f\b\x0E\b\u02CC\v\b\x03" +
		"\b\x05\b\u02CF\n\b\x03\b\x07\b\u02D2\n\b\f\b\x0E\b\u02D5\v\b\x03\b\x03" +
		"\b\x07\b\u02D9\n\b\f\b\x0E\b\u02DC\v\b\x07\b\u02DE\n\b\f\b\x0E\b\u02E1" +
		"\v\b\x03\t\x03\t\x06\t\u02E5\n\t\r\t\x0E\t\u02E6\x03\t\x03\t\x06\t\u02EB" +
		"\n\t\r\t\x0E\t\u02EC\x03\t\x03\t\x05\t\u02F1\n\t\x03\t\x07\t\u02F4\n\t" +
		"\f\t\x0E\t\u02F7\v\t\x03\t\x03\t\x07\t\u02FB\n\t\f\t\x0E\t\u02FE\v\t\x03" +
		"\n\x03\n\x06\n\u0302\n\n\r\n\x0E\n\u0303\x03\n\x03\n\x06\n\u0308\n\n\r" +
		"\n\x0E\n\u0309\x03\n\x03\n\x05\n\u030E\n\n\x03\n\x06\n\u0311\n\n\r\n\x0E" +
		"\n\u0312\x03\n\x03\n\x05\n\u0317\n\n\x03\n\x07\n\u031A\n\n\f\n\x0E\n\u031D" +
		"\v\n\x03\n\x03\n\x07\n\u0321\n\n\f\n\x0E\n\u0324\v\n\x03\v\x03\v\x03\f" +
		"\x03\f\x07\f\u032A\n\f\f\f\x0E\f\u032D\v\f\x03\f\x03\f\x07\f\u0331\n\f" +
		"\f\f\x0E\f\u0334\v\f\x03\f\x03\f\x07\f\u0338\n\f\f\f\x0E\f\u033B\v\f\x06" +
		"\f\u033D\n\f\r\f\x0E\f\u033E\x03\f\x03\f\x06\f\u0343\n\f\r\f\x0E\f\u0344" +
		"\x03\f\x03\f\x07\f\u0349\n\f\f\f\x0E\f\u034C\v\f\x03\f\x03\f\x07\f\u0350" +
		"\n\f\f\f\x0E\f\u0353\v\f\x03\r\x03\r\x03\r\x06\r\u0358\n\r\r\r\x0E\r\u0359" +
		"\x03\r\x03\r\x07\r\u035E\n\r\f\r\x0E\r\u0361\v\r\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x07\x0F\u0367\n\x0F\f\x0F\x0E\x0F\u036A\v\x0F\x03\x0F\x03\x0F" +
		"\x07\x0F\u036E\n\x0F\f\x0F\x0E\x0F\u0371\v\x0F\x03\x0F\x03\x0F\x07\x0F" +
		"\u0375\n\x0F\f\x0F\x0E\x0F\u0378\v\x0F\x07\x0F\u037A\n\x0F\f\x0F\x0E\x0F" +
		"\u037D\v\x0F\x03\x10\x03\x10\x07\x10\u0381\n\x10\f\x10\x0E\x10\u0384\v" +
		"\x10\x06\x10\u0386\n\x10\r\x10\x0E\x10\u0387\x03\x10\x07\x10\u038B\n\x10" +
		"\f\x10\x0E\x10\u038E\v\x10\x03\x10\x03\x10\x07\x10\u0392\n\x10\f\x10\x0E" +
		"\x10\u0395\v\x10\x05\x10\u0397\n\x10\x03\x11\x03\x11\x06\x11\u039B\n\x11" +
		"\r\x11\x0E\x11\u039C\x03\x11\x03\x11\x05\x11\u03A1\n\x11\x03\x11\x06\x11" +
		"\u03A4\n\x11\r\x11\x0E\x11\u03A5\x03\x11\x03\x11\x06\x11\u03AA\n\x11\r" +
		"\x11\x0E\x11\u03AB\x03\x11\x03\x11\x05\x11\u03B0\n\x11\x03\x11\x06\x11" +
		"\u03B3\n\x11\r\x11\x0E\x11\u03B4\x03\x11\x03\x11\x06\x11\u03B9\n\x11\r" +
		"\x11\x0E\x11\u03BA\x03\x11\x03\x11\x06\x11\u03BF\n\x11\r\x11\x0E\x11\u03C0" +
		"\x03\x11\x03\x11\x05\x11\u03C5\n\x11\x03\x11\x06\x11\u03C8\n\x11\r\x11" +
		"\x0E\x11\u03C9\x03\x11\x03\x11\x07\x11\u03CE\n\x11\f\x11\x0E\x11\u03D1" +
		"\v\x11\x03\x11\x03\x11\x07\x11\u03D5\n\x11\f\x11\x0E\x11\u03D8\v\x11\x03" +
		"\x11\x03\x11\x06\x11\u03DC\n\x11\r\x11\x0E\x11\u03DD\x03\x11\x03\x11\x06" +
		"\x11\u03E2\n\x11\r\x11\x0E\x11\u03E3\x03\x11\x03\x11\x05\x11\u03E8\n\x11" +
		"\x03\x11\x07\x11\u03EB\n\x11\f\x11\x0E\x11\u03EE\v\x11\x03\x11\x03\x11" +
		"\x07\x11\u03F2\n\x11\f\x11\x0E\x11\u03F5\v\x11\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x06\x13\u03FB\n\x13\r\x13\x0E\x13\u03FC\x03\x13\x03\x13\x07\x13" +
		"\u0401\n\x13\f\x13\x0E\x13\u0404\v\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x05\x13\u040A\n\x13\x03\x14\x03\x14\x06\x14\u040E\n\x14\r\x14\x0E\x14" +
		"\u040F\x03\x14\x03\x14\x06\x14\u0414\n\x14\r\x14\x0E\x14\u0415\x03\x14" +
		"\x03\x14\x05\x14\u041A\n\x14\x03\x14\x07\x14\u041D\n\x14\f\x14\x0E\x14" +
		"\u0420\v\x14\x03\x14\x03\x14\x07\x14\u0424\n\x14\f\x14\x0E\x14\u0427\v" +
		"\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x06\x17\u042F\n\x17" +
		"\r\x17\x0E\x17\u0430\x03\x17\x03\x17\x06\x17\u0435\n\x17\r\x17\x0E\x17" +
		"\u0436\x03\x17\x03\x17\x07\x17\u043B\n\x17\f\x17\x0E\x17\u043E\v\x17\x03" +
		"\x18\x03\x18\x06\x18\u0442\n\x18\r\x18\x0E\x18\u0443\x03\x18\x03\x18\x03" +
		"\x19\x03\x19\x07\x19\u044A\n\x19\f\x19\x0E\x19\u044D\v\x19\x03\x19\x03" +
		"\x19\x03\x19\x03\x19\x07\x19\u0453\n\x19\f\x19\x0E\x19\u0456\v\x19\x03" +
		"\x19\x03\x19\x03\x19\x05\x19\u045B\n\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u0468" +
		"\n\x1A\x03\x1B\x03\x1B\x05\x1B\u046C\n\x1B\x03\x1C\x03\x1C\x06\x1C\u0470" +
		"\n\x1C\r\x1C\x0E\x1C\u0471\x03\x1C\x03\x1C\x06\x1C\u0476\n\x1C\r\x1C\x0E" +
		"\x1C\u0477\x03\x1C\x03\x1C\x06\x1C\u047C\n\x1C\r\x1C\x0E\x1C\u047D\x03" +
		"\x1C\x03\x1C\x06\x1C\u0482\n\x1C\r\x1C\x0E\x1C\u0483\x03\x1C\x03\x1C\x05" +
		"\x1C\u0488\n\x1C\x03\x1C\x06\x1C\u048B\n\x1C\r\x1C\x0E\x1C\u048C\x03\x1C" +
		"\x03\x1C\x06\x1C\u0491\n\x1C\r\x1C\x0E\x1C\u0492\x03\x1C\x03\x1C\x05\x1C" +
		"\u0497\n\x1C\x06\x1C\u0499\n\x1C\r\x1C\x0E\x1C\u049A\x03\x1C\x06\x1C\u049E" +
		"\n\x1C\r\x1C\x0E\x1C\u049F\x03\x1C\x03\x1C\x05\x1C\u04A4\n\x1C\x03\x1C" +
		"\x06\x1C\u04A7\n\x1C\r\x1C\x0E\x1C\u04A8\x03\x1C\x03\x1C\x05\x1C\u04AD" +
		"\n\x1C\x03\x1D\x03\x1D\x06\x1D\u04B1\n\x1D\r\x1D\x0E\x1D\u04B2\x03\x1D" +
		"\x03\x1D\x06\x1D\u04B7\n\x1D\r\x1D\x0E\x1D\u04B8\x03\x1D\x03\x1D\x06\x1D" +
		"\u04BD\n\x1D\r\x1D\x0E\x1D\u04BE\x03\x1D\x03\x1D\x06\x1D\u04C3\n\x1D\r" +
		"\x1D\x0E\x1D\u04C4\x03\x1D\x03\x1D\x05\x1D\u04C9\n\x1D\x03\x1D\x06\x1D" +
		"\u04CC\n\x1D\r\x1D\x0E\x1D\u04CD\x03\x1D\x03\x1D\x06\x1D\u04D2\n\x1D\r" +
		"\x1D\x0E\x1D\u04D3\x03\x1D\x03\x1D\x05\x1D\u04D8\n\x1D\x03\x1D\x06\x1D" +
		"\u04DB\n\x1D\r\x1D\x0E\x1D\u04DC\x03\x1D\x03\x1D\x06\x1D\u04E1\n\x1D\r" +
		"\x1D\x0E\x1D\u04E2\x03\x1D\x03\x1D\x06\x1D\u04E7\n\x1D\r\x1D\x0E\x1D\u04E8" +
		"\x03\x1D\x03\x1D\x05\x1D\u04ED\n\x1D\x03\x1D\x06\x1D\u04F0\n\x1D\r\x1D" +
		"\x0E\x1D\u04F1\x03\x1D\x03\x1D\x05\x1D\u04F6\n\x1D\x03\x1E\x03\x1E\x03" +
		"\x1F\x03\x1F\x05\x1F\u04FC\n\x1F\x03 \x03 \x03 \x03 \x05 \u0502\n \x03" +
		"!\x03!\x06!\u0506\n!\r!\x0E!\u0507\x03!\x03!\x06!\u050C\n!\r!\x0E!\u050D" +
		"\x03!\x03!\x07!\u0512\n!\f!\x0E!\u0515\v!\x06!\u0517\n!\r!\x0E!\u0518" +
		"\x03!\x06!\u051C\n!\r!\x0E!\u051D\x03!\x03!\x05!\u0522\n!\x03\"\x03\"" +
		"\x06\"\u0526\n\"\r\"\x0E\"\u0527\x03\"\x03\"\x06\"\u052C\n\"\r\"\x0E\"" +
		"\u052D\x03\"\x03\"\x07\"\u0532\n\"\f\"\x0E\"\u0535\v\"\x06\"\u0537\n\"" +
		"\r\"\x0E\"\u0538\x03\"\x06\"\u053C\n\"\r\"\x0E\"\u053D\x03\"\x03\"\x05" +
		"\"\u0542\n\"\x03#\x03#\x06#\u0546\n#\r#\x0E#\u0547\x03#\x03#\x06#\u054C" +
		"\n#\r#\x0E#\u054D\x03#\x03#\x06#\u0552\n#\r#\x0E#\u0553\x05#\u0556\n#" +
		"\x03#\x03#\x06#\u055A\n#\r#\x0E#\u055B\x03#\x03#\x05#\u0560\n#\x03#\x05" +
		"#\u0563\n#\x05#\u0565\n#\x03#\x06#\u0568\n#\r#\x0E#\u0569\x03#\x03#\x05" +
		"#\u056E\n#\x03$\x03$\x06$\u0572\n$\r$\x0E$\u0573\x03$\x03$\x06$\u0578" +
		"\n$\r$\x0E$\u0579\x03$\x03$\x06$\u057E\n$\r$\x0E$\u057F\x03$\x03$\x06" +
		"$\u0584\n$\r$\x0E$\u0585\x03$\x03$\x05$\u058A\n$\x03$\x06$\u058D\n$\r" +
		"$\x0E$\u058E\x03$\x03$\x05$\u0593\n$\x03%\x03%\x05%\u0597\n%\x03&\x03" +
		"&\x03\'\x03\'\x06\'\u059D\n\'\r\'\x0E\'\u059E\x03\'\x03\'\x03\'\x06\'" +
		"\u05A4\n\'\r\'\x0E\'\u05A5\x03\'\x03\'\x05\'\u05AA\n\'\x03(\x03(\x06(" +
		"\u05AE\n(\r(\x0E(\u05AF\x03(\x03(\x03(\x06(\u05B5\n(\r(\x0E(\u05B6\x03" +
		"(\x03(\x05(\u05BB\n(\x03)\x03)\x06)\u05BF\n)\r)\x0E)\u05C0\x05)\u05C3" +
		"\n)\x03)\x03)\x03)\x06)\u05C8\n)\r)\x0E)\u05C9\x03)\x03)\x03)\x03)\x06" +
		")\u05D0\n)\r)\x0E)\u05D1\x05)\u05D4\n)\x03)\x03)\x06)\u05D8\n)\r)\x0E" +
		")\u05D9\x03)\x03)\x05)\u05DE\n)\x05)\u05E0\n)\x03*\x03*\x03*\x03*\x03" +
		"*\x06*\u05E7\n*\r*\x0E*\u05E8\x03*\x03*\x06*\u05ED\n*\r*\x0E*\u05EE\x05" +
		"*\u05F1\n*\x03*\x03*\x06*\u05F5\n*\r*\x0E*\u05F6\x03*\x03*\x05*\u05FB" +
		"\n*\x05*\u05FD\n*\x03*\x06*\u0600\n*\r*\x0E*\u0601\x03*\x03*\x03*\x03" +
		"*\x06*\u0608\n*\r*\x0E*\u0609\x05*\u060C\n*\x03*\x03*\x03*\x03*\x03*\x06" +
		"*\u0613\n*\r*\x0E*\u0614\x05*\u0617\n*\x03*\x03*\x03*\x03*\x06*\u061D" +
		"\n*\r*\x0E*\u061E\x05*\u0621\n*\x03*\x03*\x03*\x06*\u0626\n*\r*\x0E*\u0627" +
		"\x05*\u062A\n*\x03*\x03*\x06*\u062E\n*\r*\x0E*\u062F\x03*\x03*\x05*\u0634" +
		"\n*\x05*\u0636\n*\x03+\x03+\x06+\u063A\n+\r+\x0E+\u063B\x05+\u063E\n+" +
		"\x03+\x03+\x06+\u0642\n+\r+\x0E+\u0643\x03+\x03+\x05+\u0648\n+\x03+\x06" +
		"+\u064B\n+\r+\x0E+\u064C\x03+\x03+\x03,\x03,\x06,\u0653\n,\r,\x0E,\u0654" +
		"\x05,\u0657\n,\x03,\x03,\x06,\u065B\n,\r,\x0E,\u065C\x03,\x03,\x05,\u0661" +
		"\n,\x03,\x06,\u0664\n,\r,\x0E,\u0665\x03,\x03,\x03-\x03-\x03.\x03.\x06" +
		".\u066E\n.\r.\x0E.\u066F\x03.\x03.\x06.\u0674\n.\r.\x0E.\u0675\x03.\x03" +
		".\x05.\u067A\n.\x03.\x06.\u067D\n.\r.\x0E.\u067E\x03.\x03.\x05.\u0683" +
		"\n.\x03.\x06.\u0686\n.\r.\x0E.\u0687\x03.\x03.\x05.\u068C\n.\x03/\x03" +
		"/\x030\x030\x060\u0692\n0\r0\x0E0\u0693\x030\x030\x060\u0698\n0\r0\x0E" +
		"0\u0699\x030\x030\x050\u069E\n0\x060\u06A0\n0\r0\x0E0\u06A1\x030\x060" +
		"\u06A5\n0\r0\x0E0\u06A6\x030\x030\x060\u06AB\n0\r0\x0E0\u06AC\x030\x07" +
		"0\u06B0\n0\f0\x0E0\u06B3\v0\x030\x030\x070\u06B7\n0\f0\x0E0\u06BA\v0\x05" +
		"0\u06BC\n0\x030\x030\x060\u06C0\n0\r0\x0E0\u06C1\x030\x030\x050\u06C6" +
		"\n0\x030\x060\u06C9\n0\r0\x0E0\u06CA\x030\x030\x050\u06CF\n0\x031\x03" +
		"1\x061\u06D3\n1\r1\x0E1\u06D4\x031\x031\x061\u06D9\n1\r1\x0E1\u06DA\x03" +
		"1\x031\x051\u06DF\n1\x061\u06E1\n1\r1\x0E1\u06E2\x032\x032\x062\u06E7" +
		"\n2\r2\x0E2\u06E8\x032\x032\x062\u06ED\n2\r2\x0E2\u06EE\x052\u06F1\n2" +
		"\x032\x032\x032\x062\u06F6\n2\r2\x0E2\u06F7\x052\u06FA\n2\x032\x032\x06" +
		"2\u06FE\n2\r2\x0E2\u06FF\x032\x032\x052\u0704\n2\x052\u0706\n2\x032\x03" +
		"2\x062\u070A\n2\r2\x0E2\u070B\x052\u070E\n2\x032\x032\x062\u0712\n2\r" +
		"2\x0E2\u0713\x032\x032\x032\x052\u0719\n2\x052\u071B\n2\x033\x033\x06" +
		"3\u071F\n3\r3\x0E3\u0720\x033\x033\x063\u0725\n3\r3\x0E3\u0726\x034\x03" +
		"4\x064\u072B\n4\r4\x0E4\u072C\x034\x034\x064\u0731\n4\r4\x0E4\u0732\x03" +
		"4\x034\x054\u0737\n4\x034\x064\u073A\n4\r4\x0E4\u073B\x034\x034\x054\u0740" +
		"\n4\x034\x064\u0743\n4\r4\x0E4\u0744\x034\x034\x054\u0749\n4\x034\x06" +
		"4\u074C\n4\r4\x0E4\u074D\x034\x034\x054\u0752\n4\x035\x035\x065\u0756" +
		"\n5\r5\x0E5\u0757\x035\x035\x036\x036\x066\u075E\n6\r6\x0E6\u075F\x03" +
		"6\x036\x066\u0764\n6\r6\x0E6\u0765\x037\x037\x037\x067\u076B\n7\r7\x0E" +
		"7\u076C\x057\u076F\n7\x037\x037\x067\u0773\n7\r7\x0E7\u0774\x037\x037" +
		"\x077\u0779\n7\f7\x0E7\u077C\v7\x057\u077E\n7\x038\x038\x068\u0782\n8" +
		"\r8\x0E8\u0783\x058\u0786\n8\x038\x038\x038\x068\u078B\n8\r8\x0E8\u078C" +
		"\x058\u078F\n8\x038\x038\x038\x068\u0794\n8\r8\x0E8\u0795\x058\u0798\n" +
		"8\x038\x038\x038\x068\u079D\n8\r8\x0E8\u079E\x058\u07A1\n8\x038\x058\u07A4" +
		"\n8\x039\x039\x039\x059\u07A9\n9\x03:\x03:\x03;\x03;\x06;\u07AF\n;\r;" +
		"\x0E;\u07B0\x03;\x03;\x06;\u07B5\n;\r;\x0E;\u07B6\x03;\x03;\x06;\u07BB" +
		"\n;\r;\x0E;\u07BC\x03;\x03;\x06;\u07C1\n;\r;\x0E;\u07C2\x03;\x03;\x06" +
		";\u07C7\n;\r;\x0E;\u07C8\x05;\u07CB\n;\x03;\x03;\x06;\u07CF\n;\r;\x0E" +
		";\u07D0\x03<\x03<\x03=\x03=\x03>\x03>\x06>\u07D9\n>\r>\x0E>\u07DA\x03" +
		">\x03>\x06>\u07DF\n>\r>\x0E>\u07E0\x03>\x06>\u07E4\n>\r>\x0E>\u07E5\x03" +
		">\x03>\x06>\u07EA\n>\r>\x0E>\u07EB\x03>\x03>\x06>\u07F0\n>\r>\x0E>\u07F1" +
		"\x03>\x03>\x05>\u07F6\n>\x06>\u07F8\n>\r>\x0E>\u07F9\x03>\x03>\x06>\u07FE" +
		"\n>\r>\x0E>\u07FF\x03>\x03>\x07>\u0804\n>\f>\x0E>\u0807\v>\x03>\x06>\u080A" +
		"\n>\r>\x0E>\u080B\x03>\x03>\x05>\u0810\n>\x03>\x06>\u0813\n>\r>\x0E>\u0814" +
		"\x03>\x03>\x06>\u0819\n>\r>\x0E>\u081A\x03>\x06>\u081E\n>\r>\x0E>\u081F" +
		"\x03>\x03>\x06>\u0824\n>\r>\x0E>\u0825\x03>\x03>\x06>\u082A\n>\r>\x0E" +
		">\u082B\x03>\x03>\x05>\u0830\n>\x06>\u0832\n>\r>\x0E>\u0833\x03>\x03>" +
		"\x06>\u0838\n>\r>\x0E>\u0839\x03>\x03>\x06>\u083E\n>\r>\x0E>\u083F\x03" +
		">\x03>\x06>\u0844\n>\r>\x0E>\u0845\x03>\x03>\x06>\u084A\n>\r>\x0E>\u084B" +
		"\x03>\x03>\x06>\u0850\n>\r>\x0E>\u0851\x03>\x03>\x05>\u0856\n>\x05>\u0858" +
		"\n>\x03>\x06>\u085B\n>\r>\x0E>\u085C\x03>\x03>\x05>\u0861\n>\x03>\x06" +
		">\u0864\n>\r>\x0E>\u0865\x03>\x03>\x05>\u086A\n>\x03?\x03?\x03@\x03@\x05" +
		"@\u0870\n@\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u0878\nA\x03B\x03B\x06B" +
		"\u087C\nB\rB\x0EB\u087D\x03B\x03B\x06B\u0882\nB\rB\x0EB\u0883\x03B\x03" +
		"B\x05B\u0888\nB\x03B\x03B\x06B\u088C\nB\rB\x0EB\u088D\x03B\x03B\x06B\u0892" +
		"\nB\rB\x0EB\u0893\x03B\x03B\x05B\u0898\nB\x05B\u089A\nB\x03C\x03C\x06" +
		"C\u089E\nC\rC\x0EC\u089F\x03C\x03C\x06C\u08A4\nC\rC\x0EC\u08A5\x03C\x03" +
		"C\x05C\u08AA\nC\x03C\x03C\x06C\u08AE\nC\rC\x0EC\u08AF\x03C\x03C\x06C\u08B4" +
		"\nC\rC\x0EC\u08B5\x03C\x03C\x05C\u08BA\nC\x05C\u08BC\nC\x03D\x03D\x06" +
		"D\u08C0\nD\rD\x0ED\u08C1\x03";
	private static readonly _serializedATNSegment1: string =
		"D\x03D\x06D\u08C6\nD\rD\x0ED\u08C7\x03D\x03D\x05D\u08CC\nD\x03D\x03D\x06" +
		"D\u08D0\nD\rD\x0ED\u08D1\x03D\x03D\x06D\u08D6\nD\rD\x0ED\u08D7\x03D\x03" +
		"D\x05D\u08DC\nD\x05D\u08DE\nD\x03E\x03E\x06E\u08E2\nE\rE\x0EE\u08E3\x03" +
		"E\x03E\x06E\u08E8\nE\rE\x0EE\u08E9\x03E\x03E\x05E\u08EE\nE\x03E\x03E\x06" +
		"E\u08F2\nE\rE\x0EE\u08F3\x03E\x03E\x06E\u08F8\nE\rE\x0EE\u08F9\x03E\x03" +
		"E\x05E\u08FE\nE\x05E\u0900\nE\x03F\x03F\x06F\u0904\nF\rF\x0EF\u0905\x03" +
		"F\x03F\x06F\u090A\nF\rF\x0EF\u090B\x03F\x03F\x06F\u0910\nF\rF\x0EF\u0911" +
		"\x05F\u0914\nF\x03F\x03F\x06F\u0918\nF\rF\x0EF\u0919\x03F\x03F\x05F\u091E" +
		"\nF\x03F\x06F\u0921\nF\rF\x0EF\u0922\x03F\x03F\x05F\u0927\nF\x03G\x03" +
		"G\x03H\x03H\x06H\u092D\nH\rH\x0EH\u092E\x03H\x03H\x06H\u0933\nH\rH\x0E" +
		"H\u0934\x03H\x03H\x06H\u0939\nH\rH\x0EH\u093A\x03H\x03H\x05H\u093F\nH" +
		"\x03H\x06H\u0942\nH\rH\x0EH\u0943\x03H\x03H\x06H\u0948\nH\rH\x0EH\u0949" +
		"\x03H\x03H\x05H\u094E\nH\x03H\x06H\u0951\nH\rH\x0EH\u0952\x03H\x03H\x05" +
		"H\u0957\nH\x03H\x06H\u095A\nH\rH\x0EH\u095B\x03H\x03H\x05H\u0960\nH\x03" +
		"I\x03I\x06I\u0964\nI\rI\x0EI\u0965\x03I\x03I\x06I\u096A\nI\rI\x0EI\u096B" +
		"\x03I\x03I\x06I\u0970\nI\rI\x0EI\u0971\x03I\x03I\x03J\x03J\x06J\u0978" +
		"\nJ\rJ\x0EJ\u0979\x03J\x03J\x06J\u097E\nJ\rJ\x0EJ\u097F\x03J\x03J\x06" +
		"J\u0984\nJ\rJ\x0EJ\u0985\x03J\x06J\u0989\nJ\rJ\x0EJ\u098A\x03J\x03J\x05" +
		"J\u098F\nJ\x05J\u0991\nJ\x03J\x06J\u0994\nJ\rJ\x0EJ\u0995\x03J\x03J\x05" +
		"J\u099A\nJ\x03K\x03K\x06K\u099E\nK\rK\x0EK\u099F\x03K\x03K\x06K\u09A4" +
		"\nK\rK\x0EK\u09A5\x05K\u09A8\nK\x03K\x03K\x06K\u09AC\nK\rK\x0EK\u09AD" +
		"\x03K\x03K\x06K\u09B2\nK\rK\x0EK\u09B3\x05K\u09B6\nK\x03K\x03K\x06K\u09BA" +
		"\nK\rK\x0EK\u09BB\x03K\x03K\x06K\u09C0\nK\rK\x0EK\u09C1\x03K\x06K\u09C5" +
		"\nK\rK\x0EK\u09C6\x03K\x03K\x05K\u09CB\nK\x05K\u09CD\nK\x03K\x06K\u09D0" +
		"\nK\rK\x0EK\u09D1\x03K\x03K\x05K\u09D6\nK\x03L\x03L\x06L\u09DA\nL\rL\x0E" +
		"L\u09DB\x03L\x03L\x06L\u09E0\nL\rL\x0EL\u09E1\x03L\x03L\x05L\u09E6\nL" +
		"\x03L\x06L\u09E9\nL\rL\x0EL\u09EA\x03L\x03L\x05L\u09EF\nL\x03L\x06L\u09F2" +
		"\nL\rL\x0EL\u09F3\x03L\x03L\x05L\u09F8\nL\x03M\x03M\x06M\u09FC\nM\rM\x0E" +
		"M\u09FD\x05M\u0A00\nM\x03M\x03M\x06M\u0A04\nM\rM\x0EM\u0A05\x03M\x03M" +
		"\x05M\u0A0A\nM\x03M\x03M\x06M\u0A0E\nM\rM\x0EM\u0A0F\x03M\x03M\x05M\u0A14" +
		"\nM\x05M\u0A16\nM\x03N\x03N\x06N\u0A1A\nN\rN\x0EN\u0A1B\x03N\x03N\x06" +
		"N\u0A20\nN\rN\x0EN\u0A21\x05N\u0A24\nN\x03N\x03N\x05N\u0A28\nN\x03O\x03" +
		"O\x06O\u0A2C\nO\rO\x0EO\u0A2D\x03O\x03O\x06O\u0A32\nO\rO\x0EO\u0A33\x05" +
		"O\u0A36\nO\x03O\x03O\x05O\u0A3A\nO\x03P\x03P\x06P\u0A3E\nP\rP\x0EP\u0A3F" +
		"\x05P\u0A42\nP\x03P\x03P\x06P\u0A46\nP\rP\x0EP\u0A47\x03P\x03P\x05P\u0A4C" +
		"\nP\x03P\x06P\u0A4F\nP\rP\x0EP\u0A50\x03P\x03P\x03P\x03P\x06P\u0A57\n" +
		"P\rP\x0EP\u0A58\x05P\u0A5B\nP\x03P\x03P\x06P\u0A5F\nP\rP\x0EP\u0A60\x03" +
		"P\x03P\x05P\u0A65\nP\x03P\x06P\u0A68\nP\rP\x0EP\u0A69\x03P\x03P\x03P\x03" +
		"P\x06P\u0A70\nP\rP\x0EP\u0A71\x03P\x03P\x06P\u0A76\nP\rP\x0EP\u0A77\x05" +
		"P\u0A7A\nP\x03P\x03P\x06P\u0A7E\nP\rP\x0EP\u0A7F\x03P\x03P\x05P\u0A84" +
		"\nP\x05P\u0A86\nP\x03P\x06P\u0A89\nP\rP\x0EP\u0A8A\x03P\x03P\x03P\x03" +
		"P\x06P\u0A91\nP\rP\x0EP\u0A92\x05P\u0A95\nP\x03P\x05P\u0A98\nP\x03Q\x03" +
		"Q\x03Q\x03Q\x03Q\x06Q\u0A9F\nQ\rQ\x0EQ\u0AA0\x05Q\u0AA3\nQ\x03Q\x03Q\x03" +
		"Q\x06Q\u0AA8\nQ\rQ\x0EQ\u0AA9\x03Q\x03Q\x05Q\u0AAE\nQ\x03Q\x03Q\x06Q\u0AB2" +
		"\nQ\rQ\x0EQ\u0AB3\x05Q\u0AB6\nQ\x03Q\x03Q\x03Q\x03Q\x06Q\u0ABC\nQ\rQ\x0E" +
		"Q\u0ABD\x05Q\u0AC0\nQ\x03Q\x03Q\x06Q\u0AC4\nQ\rQ\x0EQ\u0AC5\x03Q\x03Q" +
		"\x03Q\x03Q\x06Q\u0ACC\nQ\rQ\x0EQ\u0ACD\x03Q\x03Q\x06Q\u0AD2\nQ\rQ\x0E" +
		"Q\u0AD3\x05Q\u0AD6\nQ\x03Q\x03Q\x03Q\x03Q\x06Q\u0ADC\nQ\rQ\x0EQ\u0ADD" +
		"\x05Q\u0AE0\nQ\x03Q\x03Q\x06Q\u0AE4\nQ\rQ\x0EQ\u0AE5\x03Q\x03Q\x05Q\u0AEA" +
		"\nQ\x03Q\x06Q\u0AED\nQ\rQ\x0EQ\u0AEE\x03Q\x03Q\x05Q\u0AF3\nQ\x03R\x03" +
		"R\x03S\x03S\x03S\x03S\x03S\x06S\u0AFC\nS\rS\x0ES\u0AFD\x03S\x03S\x05S" +
		"\u0B02\nS\x05S\u0B04\nS\x03T\x03T\x06T\u0B08\nT\rT\x0ET\u0B09\x03T\x03" +
		"T\x03T\x03T\x06T\u0B10\nT\rT\x0ET\u0B11\x05T\u0B14\nT\x03T\x03T\x03T\x06" +
		"T\u0B19\nT\rT\x0ET\u0B1A\x05T\u0B1D\nT\x03T\x03T\x06T\u0B21\nT\rT\x0E" +
		"T\u0B22\x03T\x03T\x03T\x03T\x06T\u0B29\nT\rT\x0ET\u0B2A\x05T\u0B2D\nT" +
		"\x03T\x03T\x03T\x06T\u0B32\nT\rT\x0ET\u0B33\x05T\u0B36\nT\x03T\x03T\x06" +
		"T\u0B3A\nT\rT\x0ET\u0B3B\x03T\x03T\x05T\u0B40\nT\x03U\x03U\x03V\x03V\x05" +
		"V\u0B46\nV\x03W\x03W\x03W\x06W\u0B4B\nW\rW\x0EW\u0B4C\x03W\x03W\x06W\u0B51" +
		"\nW\rW\x0EW\u0B52\x03W\x03W\x05W\u0B57\nW\x05W\u0B59\nW\x03W\x03W\x06" +
		"W\u0B5D\nW\rW\x0EW\u0B5E\x03W\x03W\x05W\u0B63\nW\x05W\u0B65\nW\x03X\x03" +
		"X\x06X\u0B69\nX\rX\x0EX\u0B6A\x03X\x03X\x05X\u0B6F\nX\x03X\x03X\x06X\u0B73" +
		"\nX\rX\x0EX\u0B74\x03X\x03X\x05X\u0B79\nX\x03X\x03X\x05X\u0B7D\nX\x03" +
		"Y\x03Y\x03Z\x03Z\x03[\x03[\x06[\u0B85\n[\r[\x0E[\u0B86\x05[\u0B89\n[\x03" +
		"[\x03[\x06[\u0B8D\n[\r[\x0E[\u0B8E\x03[\x03[\x05[\u0B93\n[\x03\\\x03\\" +
		"\x06\\\u0B97\n\\\r\\\x0E\\\u0B98\x05\\\u0B9B\n\\\x03\\\x03\\\x06\\\u0B9F" +
		"\n\\\r\\\x0E\\\u0BA0\x03\\\x03\\\x05\\\u0BA5\n\\\x03]\x03]\x06]\u0BA9" +
		"\n]\r]\x0E]\u0BAA\x05]\u0BAD\n]\x03]\x03]\x06]\u0BB1\n]\r]\x0E]\u0BB2" +
		"\x03]\x03]\x06]\u0BB7\n]\r]\x0E]\u0BB8\x03]\x03]\x05]\u0BBD\n]\x03^\x03" +
		"^\x06^\u0BC1\n^\r^\x0E^\u0BC2\x03^\x03^\x05^\u0BC7\n^\x03^\x06^\u0BCA" +
		"\n^\r^\x0E^\u0BCB\x03^\x03^\x05^\u0BD0\n^\x03_\x03_\x06_\u0BD4\n_\r_\x0E" +
		"_\u0BD5\x03_\x03_\x07_\u0BDA\n_\f_\x0E_\u0BDD\v_\x03_\x03_\x07_\u0BE1" +
		"\n_\f_\x0E_\u0BE4\v_\x03_\x03_\x07_\u0BE8\n_\f_\x0E_\u0BEB\v_\x05_\u0BED" +
		"\n_\x03_\x03_\x07_\u0BF1\n_\f_\x0E_\u0BF4\v_\x05_\u0BF6\n_\x03_\x03_\x07" +
		"_\u0BFA\n_\f_\x0E_\u0BFD\v_\x05_\u0BFF\n_\x03_\x03_\x07_\u0C03\n_\f_\x0E" +
		"_\u0C06\v_\x05_\u0C08\n_\x03_\x03_\x07_\u0C0C\n_\f_\x0E_\u0C0F\v_\x05" +
		"_\u0C11\n_\x03`\x03`\x06`\u0C15\n`\r`\x0E`\u0C16\x03`\x03`\x07`\u0C1B" +
		"\n`\f`\x0E`\u0C1E\v`\x03`\x03`\x07`\u0C22\n`\f`\x0E`\u0C25\v`\x03`\x03" +
		"`\x07`\u0C29\n`\f`\x0E`\u0C2C\v`\x03`\x07`\u0C2F\n`\f`\x0E`\u0C32\v`\x03" +
		"`\x03`\x03`\x07`\u0C37\n`\f`\x0E`\u0C3A\v`\x03`\x07`\u0C3D\n`\f`\x0E`" +
		"\u0C40\v`\x05`\u0C42\n`\x03`\x07`\u0C45\n`\f`\x0E`\u0C48\v`\x07`\u0C4A" +
		"\n`\f`\x0E`\u0C4D\v`\x03a\x03a\x06a\u0C51\na\ra\x0Ea\u0C52\x03a\x03a\x07" +
		"a\u0C57\na\fa\x0Ea\u0C5A\va\x03a\x03a\x07a\u0C5E\na\fa\x0Ea\u0C61\va\x03" +
		"a\x03a\x07a\u0C65\na\fa\x0Ea\u0C68\va\x07a\u0C6A\na\fa\x0Ea\u0C6D\va\x03" +
		"b\x03b\x06b\u0C71\nb\rb\x0Eb\u0C72\x03b\x03b\x07b\u0C77\nb\fb\x0Eb\u0C7A" +
		"\vb\x03b\x03b\x07b\u0C7E\nb\fb\x0Eb\u0C81\vb\x03b\x03b\x07b\u0C85\nb\f" +
		"b\x0Eb\u0C88\vb\x07b\u0C8A\nb\fb\x0Eb\u0C8D\vb\x03c\x03c\x06c\u0C91\n" +
		"c\rc\x0Ec\u0C92\x03c\x03c\x07c\u0C97\nc\fc\x0Ec\u0C9A\vc\x03c\x03c\x07" +
		"c\u0C9E\nc\fc\x0Ec\u0CA1\vc\x03c\x03c\x07c\u0CA5\nc\fc\x0Ec\u0CA8\vc\x03" +
		"c\x07c\u0CAB\nc\fc\x0Ec\u0CAE\vc\x03c\x07c\u0CB1\nc\fc\x0Ec\u0CB4\vc\x07" +
		"c\u0CB6\nc\fc\x0Ec\u0CB9\vc\x03d\x03d\x06d\u0CBD\nd\rd\x0Ed\u0CBE\x03" +
		"d\x03d\x07d\u0CC3\nd\fd\x0Ed\u0CC6\vd\x03d\x03d\x07d\u0CCA\nd\fd\x0Ed" +
		"\u0CCD\vd\x03d\x03d\x07d\u0CD1\nd\fd\x0Ed\u0CD4\vd\x07d\u0CD6\nd\fd\x0E" +
		"d\u0CD9\vd\x03e\x03e\x06e\u0CDD\ne\re\x0Ee\u0CDE\x03e\x03e\x07e\u0CE3" +
		"\ne\fe\x0Ee\u0CE6\ve\x03e\x03e\x07e\u0CEA\ne\fe\x0Ee\u0CED\ve\x07e\u0CEF" +
		"\ne\fe\x0Ee\u0CF2\ve\x03e\x03e\x03f\x03f\x06f\u0CF8\nf\rf\x0Ef\u0CF9\x03" +
		"f\x03f\x07f\u0CFE\nf\ff\x0Ef\u0D01\vf\x03f\x03f\x07f\u0D05\nf\ff\x0Ef" +
		"\u0D08\vf\x07f\u0D0A\nf\ff\x0Ef\u0D0D\vf\x03f\x03f\x03g\x03g\x06g\u0D13" +
		"\ng\rg\x0Eg\u0D14\x03g\x03g\x07g\u0D19\ng\fg\x0Eg\u0D1C\vg\x03g\x03g\x07" +
		"g\u0D20\ng\fg\x0Eg\u0D23\vg\x07g\u0D25\ng\fg\x0Eg\u0D28\vg\x03g\x03g\x03" +
		"h\x03h\x06h\u0D2E\nh\rh\x0Eh\u0D2F\x05h\u0D32\nh\x03h\x03h\x03h\x06h\u0D37" +
		"\nh\rh\x0Eh\u0D38\x05h\u0D3B\nh\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03" +
		"h\x03h\x03h\x03h\x03h\x05h\u0D49\nh\x03i\x03i\x07i\u0D4D\ni\fi\x0Ei\u0D50" +
		"\vi\x03i\x07i\u0D53\ni\fi\x0Ei\u0D56\vi\x03j\x03j\x06j\u0D5A\nj\rj\x0E" +
		"j\u0D5B\x03j\x03j\x05j\u0D60\nj\x05j\u0D62\nj\x03j\x06j\u0D65\nj\rj\x0E" +
		"j\u0D66\x03j\x03j\x06j\u0D6B\nj\rj\x0Ej\u0D6C\x03j\x03j\x05j\u0D71\nj" +
		"\x03j\x06j\u0D74\nj\rj\x0Ej\u0D75\x03j\x03j\x07j\u0D7A\nj\fj\x0Ej\u0D7D" +
		"\vj\x03j\x03j\x03k\x03k\x03l\x03l\x06l\u0D85\nl\rl\x0El\u0D86\x05l\u0D89" +
		"\nl\x03l\x03l\x03l\x06l\u0D8E\nl\rl\x0El\u0D8F\x05l\u0D92\nl\x03l\x03" +
		"l\x03l\x03l\x03l\x03l\x03l\x06l\u0D9B\nl\rl\x0El\u0D9C\x03l\x03l\x05l" +
		"\u0DA1\nl\x03l\x03l\x06l\u0DA5\nl\rl\x0El\u0DA6\x03l\x03l\x05l\u0DAB\n" +
		"l\x03l\x03l\x06l\u0DAF\nl\rl\x0El\u0DB0\x03l\x03l\x06l\u0DB5\nl\rl\x0E" +
		"l\u0DB6\x05l\u0DB9\nl\x03l\x03l\x03l\x03l\x05l\u0DBF\nl\x03m\x03m\x06" +
		"m\u0DC3\nm\rm\x0Em\u0DC4\x03m\x03m\x06m\u0DC9\nm\rm\x0Em\u0DCA\x03m\x03" +
		"m\x06m\u0DCF\nm\rm\x0Em\u0DD0\x03m\x03m\x05m\u0DD5\nm\x03n\x03n\x03o\x03" +
		"o\x03p\x03p\x06p\u0DDD\np\rp\x0Ep\u0DDE\x03p\x03p\x05p\u0DE3\np\x03p\x03" +
		"p\x06p\u0DE7\np\rp\x0Ep\u0DE8\x03p\x03p\x05p\u0DED\np\x05p\u0DEF\np\x03" +
		"p\x06p\u0DF2\np\rp\x0Ep\u0DF3\x03p\x03p\x06p\u0DF8\np\rp\x0Ep\u0DF9\x03" +
		"p\x03p\x07p\u0DFE\np\fp\x0Ep\u0E01\vp\x03q\x03q\x06q\u0E05\nq\rq\x0Eq" +
		"\u0E06\x03q\x03q\x05q\u0E0B\nq\x03r\x03r\x03r\x06r\u0E10\nr\rr\x0Er\u0E11" +
		"\x03r\x03r\x03r\x03r\x06r\u0E18\nr\rr\x0Er\u0E19\x03r\x03r\x05r\u0E1E" +
		"\nr\x03s\x03s\x06s\u0E22\ns\rs\x0Es\u0E23\x03s\x03s\x03t\x03t\x03u\x03" +
		"u\x03v\x03v\x03w\x03w\x06w\u0E30\nw\rw\x0Ew\u0E31\x03w\x03w\x06w\u0E36" +
		"\nw\rw\x0Ew\u0E37\x03w\x03w\x07w\u0E3C\nw\fw\x0Ew\u0E3F\vw\x03w\x06w\u0E42" +
		"\nw\rw\x0Ew\u0E43\x03w\x03w\x05w\u0E48\nw\x03x\x03x\x06x\u0E4C\nx\rx\x0E" +
		"x\u0E4D\x03x\x03x\x06x\u0E52\nx\rx\x0Ex\u0E53\x05x\u0E56\nx\x03x\x03x" +
		"\x06x\u0E5A\nx\rx\x0Ex\u0E5B\x03x\x03x\x07x\u0E60\nx\fx\x0Ex\u0E63\vx" +
		"\x03y\x03y\x03z\x03z\x06z\u0E69\nz\rz\x0Ez\u0E6A\x03z\x03z\x06z\u0E6F" +
		"\nz\rz\x0Ez\u0E70\x05z\u0E73\nz\x03z\x03z\x06z\u0E77\nz\rz\x0Ez\u0E78" +
		"\x05z\u0E7B\nz\x03z\x03z\x06z\u0E7F\nz\rz\x0Ez\u0E80\x03z\x03z\x07z\u0E85" +
		"\nz\fz\x0Ez\u0E88\vz\x03{\x03{\x03|\x03|\x06|\u0E8E\n|\r|\x0E|\u0E8F\x03" +
		"|\x03|\x03|\x03|\x06|\u0E96\n|\r|\x0E|\u0E97\x03|\x03|\x06|\u0E9C\n|\r" +
		"|\x0E|\u0E9D\x03|\x03|\x06|\u0EA2\n|\r|\x0E|\u0EA3\x03|\x03|\x06|\u0EA8" +
		"\n|\r|\x0E|\u0EA9\x03|\x03|\x06|\u0EAE\n|\r|\x0E|\u0EAF\x03|\x03|\x06" +
		"|\u0EB4\n|\r|\x0E|\u0EB5\x05|\u0EB8\n|\x03|\x03|\x05|\u0EBC\n|\x03}\x03" +
		"}\x03~\x03~\x03\x7F\x03\x7F\x03\x80\x03\x80\x07\x80\u0EC6\n\x80\f\x80" +
		"\x0E\x80\u0EC9\v\x80\x03\x80\x07\x80\u0ECC\n\x80\f\x80\x0E\x80\u0ECF\v" +
		"\x80\x03\x81\x03\x81\x06\x81\u0ED3\n\x81\r\x81\x0E\x81\u0ED4\x03\x81\x03" +
		"\x81\x05\x81\u0ED9\n\x81\x03\x81\x06\x81\u0EDC\n\x81\r\x81\x0E\x81\u0EDD" +
		"\x03\x81\x03\x81\x07\x81\u0EE2\n\x81\f\x81\x0E\x81\u0EE5\v\x81\x03\x81" +
		"\x03\x81\x03\x82\x03\x82\x06\x82\u0EEB\n\x82\r\x82\x0E\x82\u0EEC\x03\x82" +
		"\x03\x82\x06\x82\u0EF1\n\x82\r\x82\x0E\x82\u0EF2\x05\x82\u0EF5\n\x82\x03" +
		"\x82\x03\x82\x06\x82\u0EF9\n\x82\r\x82\x0E\x82\u0EFA\x05\x82\u0EFD\n\x82" +
		"\x03\x82\x03\x82\x03\x82\x03\x82\x06\x82\u0F03\n\x82\r\x82\x0E\x82\u0F04" +
		"\x03\x82\x03\x82\x06\x82\u0F09\n\x82\r\x82\x0E\x82\u0F0A\x03\x82\x03\x82" +
		"\x06\x82\u0F0F\n\x82\r\x82\x0E\x82\u0F10\x05\x82\u0F13\n\x82\x03\x82\x03" +
		"\x82\x03\x82\x03\x82\x06\x82\u0F19\n\x82\r\x82\x0E\x82\u0F1A\x03\x82\x03" +
		"\x82\x06\x82\u0F1F\n\x82\r\x82\x0E\x82\u0F20\x05\x82\u0F23\n\x82\x03\x82" +
		"\x03\x82\x03\x82\x03\x82\x06\x82\u0F29\n\x82\r\x82\x0E\x82\u0F2A\x03\x82" +
		"\x03\x82\x06\x82\u0F2F\n\x82\r\x82\x0E\x82\u0F30\x05\x82\u0F33\n\x82\x05" +
		"\x82\u0F35\n\x82\x03\x82\x03\x82\x03\x82\x06\x82\u0F3A\n\x82\r\x82\x0E" +
		"\x82\u0F3B\x03\x82\x03\x82\x06\x82\u0F40\n\x82\r\x82\x0E\x82\u0F41\x05" +
		"\x82\u0F44\n\x82\x03\x82\x03\x82\x03\x82\x03\x82\x06\x82\u0F4A\n\x82\r" +
		"\x82\x0E\x82\u0F4B\x03\x82\x03\x82\x06\x82\u0F50\n\x82\r\x82\x0E\x82\u0F51" +
		"\x05\x82\u0F54\n\x82\x03\x82\x03\x82\x06\x82\u0F58\n\x82\r\x82\x0E\x82" +
		"\u0F59\x05\x82\u0F5C\n\x82\x03\x82\x03\x82\x03\x82\x03\x82\x06\x82\u0F62" +
		"\n\x82\r\x82\x0E\x82\u0F63\x03\x82\x03\x82\x05\x82\u0F68\n\x82\x03\x82" +
		"\x03\x82\x06\x82\u0F6C\n\x82\r\x82\x0E\x82\u0F6D\x03\x82\x03\x82\x05\x82" +
		"\u0F72\n\x82\x03\x82\x03\x82\x03\x82\x03\x82\x06\x82\u0F78\n\x82\r\x82" +
		"\x0E\x82\u0F79\x03\x82\x03\x82\x06\x82\u0F7E\n\x82\r\x82\x0E\x82\u0F7F" +
		"\x05\x82\u0F82\n\x82\x03\x82\x03\x82\x03\x82\x03\x82\x06\x82\u0F88\n\x82" +
		"\r\x82\x0E\x82\u0F89\x03\x82\x03\x82\x06\x82\u0F8E\n\x82\r\x82\x0E\x82" +
		"\u0F8F\x05\x82\u0F92\n\x82\x03\x82\x03\x82\x03\x82\x05\x82\u0F97\n\x82" +
		"\x03\x83\x03\x83\x06\x83\u0F9B\n\x83\r\x83\x0E\x83\u0F9C\x03\x83\x03\x83" +
		"\x05\x83\u0FA1\n\x83\x03\x83\x06\x83\u0FA4\n\x83\r\x83\x0E\x83\u0FA5\x05" +
		"\x83\u0FA8\n\x83\x03\x83\x03\x83\x06\x83\u0FAC\n\x83\r\x83\x0E\x83\u0FAD" +
		"\x03\x83\x03\x83\x06\x83\u0FB2\n\x83\r\x83\x0E\x83\u0FB3\x03\x83\x03\x83" +
		"\x05\x83\u0FB8\n\x83\x05\x83\u0FBA\n\x83\x03\x84\x03\x84\x06\x84\u0FBE" +
		"\n\x84\r\x84\x0E\x84\u0FBF\x03\x84\x03\x84\x06\x84\u0FC4\n\x84\r\x84\x0E" +
		"\x84\u0FC5\x03\x84\x03\x84\x07\x84\u0FCA\n\x84\f\x84\x0E\x84\u0FCD\v\x84" +
		"\x03\x84\x06\x84\u0FD0\n\x84\r\x84\x0E\x84\u0FD1\x03\x84\x03\x84\x05\x84" +
		"\u0FD6\n\x84\x03\x84\x06\x84\u0FD9\n\x84\r\x84\x0E\x84\u0FDA\x03\x84\x03" +
		"\x84\x07\x84\u0FDF\n\x84\f\x84\x0E\x84\u0FE2\v\x84\x06\x84\u0FE4\n\x84" +
		"\r\x84\x0E\x84\u0FE5\x03\x84\x07\x84\u0FE9\n\x84\f\x84\x0E\x84\u0FEC\v" +
		"\x84\x03\x84\x03\x84\x06\x84\u0FF0\n\x84\r\x84\x0E\x84\u0FF1\x03\x84\x03" +
		"\x84\x06\x84\u0FF6\n\x84\r\x84\x0E\x84\u0FF7\x05\x84\u0FFA\n\x84\x03\x84" +
		"\x03\x84\x05\x84\u0FFE\n\x84\x03\x85\x03\x85\x03\x86\x03\x86\x03\x87\x03" +
		"\x87\x03\x88\x03\x88\x03\x89\x03\x89\x03\x8A\x03\x8A\x06\x8A\u100C\n\x8A" +
		"\r\x8A\x0E\x8A\u100D\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x06\x8A\u1015" +
		"\n\x8A\r\x8A\x0E\x8A\u1016\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x06" +
		"\x8A\u101E\n\x8A\r\x8A\x0E\x8A\u101F\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u1025" +
		"\n\x8A\x03\x8A\x06\x8A\u1028\n\x8A\r\x8A\x0E\x8A\u1029\x03\x8A\x03\x8A" +
		"\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x06\x8A\u1032\n\x8A\r\x8A\x0E\x8A\u1033" +
		"\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u1039\n\x8A\x03\x8A\x06\x8A\u103C\n\x8A" +
		"\r\x8A\x0E\x8A\u103D\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x06\x8A\u1044\n\x8A" +
		"\r\x8A\x0E\x8A\u1045\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x06\x8A\u104D" +
		"\n\x8A\r\x8A\x0E\x8A\u104E\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u1054\n\x8A" +
		"\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8C\x06\x8C\u105B\n\x8C\r\x8C\x0E" +
		"\x8C\u105C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x06\x8C\u1063\n\x8C\r\x8C\x0E" +
		"\x8C\u1064\x03\x8C\x03\x8C\x05\x8C\u1069\n\x8C\x03\x8D\x03\x8D\x06\x8D" +
		"\u106D\n\x8D\r\x8D\x0E\x8D\u106E\x03\x8D\x03\x8D\x06\x8D\u1073\n\x8D\r" +
		"\x8D\x0E\x8D\u1074\x05\x8D\u1077\n\x8D\x03\x8D\x03\x8D\x06\x8D\u107B\n" +
		"\x8D\r\x8D\x0E\x8D\u107C\x03\x8D\x03\x8D\x05\x8D\u1081\n\x8D\x03\x8D\x03" +
		"\x8D\x06\x8D\u1085\n\x8D\r\x8D\x0E\x8D\u1086\x03\x8D\x03\x8D\x05\x8D\u108B" +
		"\n\x8D\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x06\x8F\u1091\n\x8F\r\x8F\x0E\x8F" +
		"\u1092\x05\x8F\u1095\n\x8F\x03\x8F\x03\x8F\x03\x8F\x06\x8F\u109A\n\x8F" +
		"\r\x8F\x0E\x8F\u109B\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x06\x8F\u10A2\n\x8F" +
		"\r\x8F\x0E\x8F\u10A3\x03\x8F\x03\x8F\x05\x8F\u10A8\n\x8F\x03\x8F\x03\x8F" +
		"\x06\x8F\u10AC\n\x8F\r\x8F\x0E\x8F\u10AD\x03\x8F\x03\x8F\x05\x8F\u10B2" +
		"\n\x8F\x05\x8F\u10B4\n\x8F\x03\x8F\x06\x8F\u10B7\n\x8F\r\x8F\x0E\x8F\u10B8" +
		"\x03\x8F\x03\x8F\x07\x8F\u10BD\n\x8F\f\x8F\x0E\x8F\u10C0\v\x8F\x03\x8F" +
		"\x07\x8F\u10C3\n\x8F\f\x8F\x0E\x8F\u10C6\v\x8F\x03\x8F\x03\x8F\x07\x8F" +
		"\u10CA\n\x8F\f\x8F\x0E\x8F\u10CD\v\x8F\x03\x8F\x07\x8F\u10D0\n\x8F\f\x8F" +
		"\x0E\x8F\u10D3\v\x8F\x05\x8F\u10D5\n\x8F\x03\x8F\x03\x8F\x06\x8F\u10D9" +
		"\n\x8F\r\x8F\x0E\x8F\u10DA\x03\x8F\x03\x8F\x06\x8F\u10DF\n\x8F\r\x8F\x0E" +
		"\x8F\u10E0\x03\x8F\x03\x8F\x06\x8F\u10E5\n\x8F\r\x8F\x0E\x8F\u10E6\x05" +
		"\x8F\u10E9\n\x8F\x03\x8F\x03\x8F\x06\x8F\u10ED\n\x8F\r\x8F\x0E\x8F\u10EE" +
		"\x03\x8F\x03\x8F\x06\x8F\u10F3\n\x8F\r\x8F\x0E\x8F\u10F4\x05\x8F\u10F7" +
		"\n\x8F\x05\x8F\u10F9\n\x8F\x03\x8F\x03\x8F\x06\x8F\u10FD\n\x8F\r\x8F\x0E" +
		"\x8F\u10FE\x03\x8F\x03\x8F\x05\x8F\u1103\n\x8F\x03\x8F\x06\x8F\u1106\n" +
		"\x8F\r\x8F\x0E\x8F\u1107\x03\x8F\x03\x8F\x06\x8F\u110C\n\x8F\r\x8F\x0E" +
		"\x8F\u110D\x03\x8F\x03\x8F\x05\x8F\u1112\n\x8F\x03\x8F\x06\x8F\u1115\n" +
		"\x8F\r\x8F\x0E\x8F\u1116\x03\x8F\x03\x8F\x06\x8F\u111B\n\x8F\r\x8F\x0E" +
		"\x8F\u111C\x03\x8F\x03\x8F\x06\x8F\u1121\n\x8F\r\x8F\x0E\x8F\u1122\x03" +
		"\x8F\x03\x8F\x05\x8F\u1127\n\x8F\x03\x8F\x06\x8F\u112A\n\x8F\r\x8F\x0E" +
		"\x8F\u112B\x03\x8F\x03\x8F\x06\x8F\u1130\n\x8F\r\x8F\x0E\x8F\u1131\x03" +
		"\x8F\x03\x8F\x06\x8F\u1136\n\x8F\r\x8F\x0E\x8F";
	private static readonly _serializedATNSegment2: string =
		"\u1137\x03\x8F\x03\x8F\x05\x8F\u113C\n\x8F\x03\x8F\x06\x8F\u113F\n\x8F" +
		"\r\x8F\x0E\x8F\u1140\x03\x8F\x03\x8F\x06\x8F\u1145\n\x8F\r\x8F\x0E\x8F" +
		"\u1146\x03\x8F\x03\x8F\x05\x8F\u114B\n\x8F\x05\x8F\u114D\n\x8F\x03\x90" +
		"\x03\x90\x03\x91\x03\x91\x03\x92\x03\x92\x03\x93\x03\x93\x03\x94\x03\x94" +
		"\x03\x95\x03\x95\x03\x96\x03\x96\x03\x97\x03\x97\x06\x97\u115F\n\x97\r" +
		"\x97\x0E\x97\u1160\x03\x97\x03\x97\x05\x97\u1165\n\x97\x03\x97\x06\x97" +
		"\u1168\n\x97\r\x97\x0E\x97\u1169\x05\x97\u116C\n\x97\x03\x97\x03\x97\x03" +
		"\x98\x03\x98\x03\x98\x06\x98\u1173\n\x98\r\x98\x0E\x98\u1174\x03\x98\x03" +
		"\x98\x05\x98\u1179\n\x98\x03\x98\x03\x98\x06\x98\u117D\n\x98\r\x98\x0E" +
		"\x98\u117E\x03\x98\x03\x98\x05\x98\u1183\n\x98\x03\x98\x03\x98\x06\x98" +
		"\u1187\n\x98\r\x98\x0E\x98\u1188\x03\x98\x03\x98\x05\x98\u118D\n\x98\x03" +
		"\x98\x03\x98\x06\x98\u1191\n\x98\r\x98\x0E\x98\u1192\x03\x98\x03\x98\x05" +
		"\x98\u1197\n\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98" +
		"\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98" +
		"\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x05\x98\u11AF\n\x98\x03" +
		"\x99\x03\x99\x06\x99\u11B3\n\x99\r\x99\x0E\x99\u11B4\x03\x99\x03\x99\x06" +
		"\x99\u11B9\n\x99\r\x99\x0E\x99\u11BA\x05\x99\u11BD\n\x99\x03\x99\x03\x99" +
		"\x03\x9A\x06\x9A\u11C2\n\x9A\r\x9A\x0E\x9A\u11C3\x03\x9B\x03\x9B\x03\x9C" +
		"\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x05\x9E\u11CE\n\x9E\x03\x9F\x03" +
		"\x9F\x06\x9F\u11D2\n\x9F\r\x9F\x0E\x9F\u11D3\x03\x9F\x03\x9F\x05\x9F\u11D8" +
		"\n\x9F\x03\x9F\x03\x9F\x06\x9F\u11DC\n\x9F\r\x9F\x0E\x9F\u11DD\x03\x9F" +
		"\x03\x9F\x05\x9F\u11E2\n\x9F\x05\x9F\u11E4\n\x9F\x03\x9F\x06\x9F\u11E7" +
		"\n\x9F\r\x9F\x0E\x9F\u11E8\x03\x9F\x03\x9F\x07\x9F\u11ED\n\x9F\f\x9F\x0E" +
		"\x9F\u11F0\v\x9F\x03\x9F\x07\x9F\u11F3\n\x9F\f\x9F\x0E\x9F\u11F6\v\x9F" +
		"\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x06\xA1\u11FC\n\xA1\r\xA1\x0E\xA1\u11FD" +
		"\x03\xA1\x03\xA1\x06\xA1\u1202\n\xA1\r\xA1\x0E\xA1\u1203\x05\xA1\u1206" +
		"\n\xA1\x03\xA1\x03\xA1\x06\xA1\u120A\n\xA1\r\xA1\x0E\xA1\u120B\x03\xA1" +
		"\x03\xA1\x05\xA1\u1210\n\xA1\x03\xA1\x06\xA1\u1213\n\xA1\r\xA1\x0E\xA1" +
		"\u1214\x03\xA1\x03\xA1\x06\xA1\u1219\n\xA1\r\xA1\x0E\xA1\u121A\x05\xA1" +
		"\u121D\n\xA1\x03\xA1\x03\xA1\x06\xA1\u1221\n\xA1\r\xA1\x0E\xA1\u1222\x03" +
		"\xA1\x03\xA1\x06\xA1\u1227\n\xA1\r\xA1\x0E\xA1\u1228\x05\xA1\u122B\n\xA1" +
		"\x03\xA1\x03\xA1\x05\xA1\u122F\n\xA1\x03\xA1\x06\xA1\u1232\n\xA1\r\xA1" +
		"\x0E\xA1\u1233\x03\xA1\x03\xA1\x06\xA1\u1238\n\xA1\r\xA1\x0E\xA1\u1239" +
		"\x05\xA1\u123C\n\xA1\x03\xA1\x03\xA1\x06\xA1\u1240\n\xA1\r\xA1\x0E\xA1" +
		"\u1241\x05\xA1\u1244\n\xA1\x03\xA1\x03\xA1\x06\xA1\u1248\n\xA1\r\xA1\x0E" +
		"\xA1\u1249\x03\xA1\x03\xA1\x05\xA1\u124E\n\xA1\x03\xA1\x06\xA1\u1251\n" +
		"\xA1\r\xA1\x0E\xA1\u1252\x03\xA1\x03\xA1\x06\xA1\u1257\n\xA1\r\xA1\x0E" +
		"\xA1\u1258\x05\xA1\u125B\n\xA1\x03\xA1\x03\xA1\x06\xA1\u125F\n\xA1\r\xA1" +
		"\x0E\xA1\u1260\x05\xA1\u1263\n\xA1\x03\xA1\x03\xA1\x06\xA1\u1267\n\xA1" +
		"\r\xA1\x0E\xA1\u1268\x03\xA1\x03\xA1\x05\xA1\u126D\n\xA1\x03\xA2\x03\xA2" +
		"\x05\xA2\u1271\n\xA2\x03\xA3\x03\xA3\x05\xA3\u1275\n\xA3\x03\xA4\x03\xA4" +
		"\x05\xA4\u1279\n\xA4\x03\xA5\x03\xA5\x05\xA5\u127D\n\xA5\x03\xA6\x03\xA6" +
		"\x06\xA6\u1281\n\xA6\r\xA6\x0E\xA6\u1282\x03\xA6\x03\xA6\x06\xA6\u1287" +
		"\n\xA6\r\xA6\x0E\xA6\u1288\x03\xA6\x03\xA6\x05\xA6\u128D\n\xA6\x03\xA6" +
		"\x03\xA6\x06\xA6\u1291\n\xA6\r\xA6\x0E\xA6\u1292\x03\xA6\x03\xA6\x05\xA6" +
		"\u1297\n\xA6\x05\xA6\u1299\n\xA6\x03\xA6\x03\xA6\x06\xA6\u129D\n\xA6\r" +
		"\xA6\x0E\xA6\u129E\x03\xA6\x03\xA6\x07\xA6\u12A3\n\xA6\f\xA6\x0E\xA6\u12A6" +
		"\v\xA6\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x06\xA8\u12AC\n\xA8\r\xA8\x0E\xA8" +
		"\u12AD\x03\xA8\x03\xA8\x06\xA8\u12B2\n\xA8\r\xA8\x0E\xA8\u12B3\x03\xA8" +
		"\x03\xA8\x06\xA8\u12B8\n\xA8\r\xA8\x0E\xA8\u12B9\x03\xA8\x03\xA8\x06\xA8" +
		"\u12BE\n\xA8\r\xA8\x0E\xA8\u12BF\x05\xA8\u12C2\n\xA8\x03\xA8\x03\xA8\x03" +
		"\xA9\x03\xA9\x05\xA9\u12C8\n\xA9\x03\xAA\x03\xAA\x06\xAA\u12CC\n\xAA\r" +
		"\xAA\x0E\xAA\u12CD\x03\xAA\x03\xAA\x06\xAA\u12D2\n\xAA\r\xAA\x0E\xAA\u12D3" +
		"\x03\xAA\x03\xAA\x05\xAA\u12D8\n\xAA\x03\xAA\x03\xAA\x06\xAA\u12DC\n\xAA" +
		"\r\xAA\x0E\xAA\u12DD\x03\xAA\x03\xAA\x05\xAA\u12E2\n\xAA\x05\xAA\u12E4" +
		"\n\xAA\x03\xAA\x06\xAA\u12E7\n\xAA\r\xAA\x0E\xAA\u12E8\x03\xAA\x03\xAA" +
		"\x03\xAB\x03\xAB\x06\xAB\u12EF\n\xAB\r\xAB\x0E\xAB\u12F0\x03\xAB\x03\xAB" +
		"\x03\xAC\x03\xAC\x06\xAC\u12F7\n\xAC\r\xAC\x0E\xAC\u12F8\x05\xAC\u12FB" +
		"\n\xAC\x03\xAC\x03\xAC\x06\xAC\u12FF\n\xAC\r\xAC\x0E\xAC\u1300\x03\xAC" +
		"\x03\xAC\x06\xAC\u1305\n\xAC\r\xAC\x0E\xAC\u1306\x05\xAC\u1309\n\xAC\x03" +
		"\xAC\x03\xAC\x07\xAC\u130D\n\xAC\f\xAC\x0E\xAC\u1310\v\xAC\x03\xAC\x03" +
		"\xAC\x07\xAC\u1314\n\xAC\f\xAC\x0E\xAC\u1317\v\xAC\x05\xAC\u1319\n\xAC" +
		"\x03\xAC\x03\xAC\x06\xAC\u131D\n\xAC\r\xAC\x0E\xAC\u131E\x05\xAC\u1321" +
		"\n\xAC\x03\xAC\x03\xAC\x06\xAC\u1325\n\xAC\r\xAC\x0E\xAC\u1326\x03\xAC" +
		"\x03\xAC\x06\xAC\u132B\n\xAC\r\xAC\x0E\xAC\u132C\x05\xAC\u132F\n\xAC\x03" +
		"\xAC\x03\xAC\x07\xAC\u1333\n\xAC\f\xAC\x0E\xAC\u1336\v\xAC\x05\xAC\u1338" +
		"\n\xAC\x03\xAC\x03\xAC\x06\xAC\u133C\n\xAC\r\xAC\x0E\xAC\u133D\x05\xAC" +
		"\u1340\n\xAC\x03\xAC\x05\xAC\u1343\n\xAC\x03\xAC\x03\xAC\x06\xAC\u1347" +
		"\n\xAC\r\xAC\x0E\xAC\u1348\x03\xAC\x03\xAC\x05\xAC\u134D\n\xAC\x03\xAC" +
		"\x07\xAC\u1350\n\xAC\f\xAC\x0E\xAC\u1353\v\xAC\x03\xAC\x03\xAC\x07\xAC" +
		"\u1357\n\xAC\f\xAC\x0E\xAC\u135A\v\xAC\x05\xAC\u135C\n\xAC\x03\xAC\x03" +
		"\xAC\x06\xAC\u1360\n\xAC\r\xAC\x0E\xAC\u1361\x03\xAC\x03\xAC\x06\xAC\u1366" +
		"\n\xAC\r\xAC\x0E\xAC\u1367\x05\xAC\u136A\n\xAC\x03\xAC\x03\xAC\x05\xAC" +
		"\u136E\n\xAC\x05\xAC\u1370\n\xAC\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAF" +
		"\x03\xAF\x03\xB0\x03\xB0\x06\xB0\u137A\n\xB0\r\xB0\x0E\xB0\u137B\x03\xB0" +
		"\x03\xB0\x05\xB0\u1380\n\xB0\x05\xB0\u1382\n\xB0\x03\xB0\x06\xB0\u1385" +
		"\n\xB0\r\xB0\x0E\xB0\u1386\x03\xB0\x03\xB0\x07\xB0\u138B\n\xB0\f\xB0\x0E" +
		"\xB0\u138E\v\xB0\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x06\xB2" +
		"\u1396\n\xB2\r\xB2\x0E\xB2\u1397\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x06\xB2" +
		"\u139E\n\xB2\r\xB2\x0E\xB2\u139F\x03\xB2\x03\xB2\x06\xB2\u13A4\n\xB2\r" +
		"\xB2\x0E\xB2\u13A5\x05\xB2\u13A8\n\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2" +
		"\x06\xB2\u13AE\n\xB2\r\xB2\x0E\xB2\u13AF\x03\xB2\x03\xB2\x06\xB2\u13B4" +
		"\n\xB2\r\xB2\x0E\xB2\u13B5\x05\xB2\u13B8\n\xB2\x03\xB2\x03\xB2\x03\xB2" +
		"\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x06\xB2\u13C1\n\xB2\r\xB2\x0E\xB2\u13C2" +
		"\x03\xB2\x03\xB2\x06\xB2\u13C7\n\xB2\r\xB2\x0E\xB2\u13C8\x05\xB2\u13CB" +
		"\n\xB2\x05\xB2\u13CD\n\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03" +
		"\xB2\x03\xB2\x06\xB2\u13D6\n\xB2\r\xB2\x0E\xB2\u13D7\x03\xB2\x03\xB2\x03" +
		"\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x06\xB2\u13E2\n\xB2\r\xB2" +
		"\x0E\xB2\u13E3\x03\xB2\x03\xB2\x06\xB2\u13E8\n\xB2\r\xB2\x0E\xB2\u13E9" +
		"\x05\xB2\u13EC\n\xB2\x03\xB2\x03\xB2\x06\xB2\u13F0\n\xB2\r\xB2\x0E\xB2" +
		"\u13F1\x05\xB2\u13F4\n\xB2\x03\xB2\x03\xB2\x06\xB2\u13F8\n\xB2\r\xB2\x0E" +
		"\xB2\u13F9\x05\xB2\u13FC\n\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x06\xB2" +
		"\u1402\n\xB2\r\xB2\x0E\xB2\u1403\x03\xB2\x03\xB2\x06\xB2\u1408\n\xB2\r" +
		"\xB2\x0E\xB2\u1409\x05\xB2\u140C\n\xB2\x03\xB2\x03\xB2\x06\xB2\u1410\n" +
		"\xB2\r\xB2\x0E\xB2\u1411\x05\xB2\u1414\n\xB2\x03\xB2\x03\xB2\x06\xB2\u1418" +
		"\n\xB2\r\xB2\x0E\xB2\u1419\x05\xB2\u141C\n\xB2\x03\xB2\x03\xB2\x03\xB2" +
		"\x03\xB2\x06\xB2\u1422\n\xB2\r\xB2\x0E\xB2\u1423\x03\xB2\x03\xB2\x06\xB2" +
		"\u1428\n\xB2\r\xB2\x0E\xB2\u1429\x05\xB2\u142C\n\xB2\x03\xB2\x03\xB2\x03" +
		"\xB2\x03\xB2\x06\xB2\u1432\n\xB2\r\xB2\x0E\xB2\u1433\x03\xB2\x03\xB2\x06" +
		"\xB2\u1438\n\xB2\r\xB2\x0E\xB2\u1439\x05\xB2\u143C\n\xB2\x03\xB2\x03\xB2" +
		"\x03\xB2\x03\xB2\x06\xB2\u1442\n\xB2\r\xB2\x0E\xB2\u1443\x03\xB2\x03\xB2" +
		"\x05\xB2\u1448\n\xB2\x03\xB2\x03\xB2\x06\xB2\u144C\n\xB2\r\xB2\x0E\xB2" +
		"\u144D\x03\xB2\x03\xB2\x03\xB2\x06\xB2\u1453\n\xB2\r\xB2\x0E\xB2\u1454" +
		"\x03\xB2\x03\xB2\x05\xB2\u1459\n\xB2\x03\xB2\x05\xB2\u145C\n\xB2\x05\xB2" +
		"\u145E\n\xB2\x03\xB3\x03\xB3\x06\xB3\u1462\n\xB3\r\xB3\x0E\xB3\u1463\x03" +
		"\xB3\x03\xB3\x03\xB4\x03\xB4\x06\xB4\u146A\n\xB4\r\xB4\x0E\xB4\u146B\x03" +
		"\xB4\x03\xB4\x05\xB4\u1470\n\xB4\x03\xB5\x03\xB5\x06\xB5\u1474\n\xB5\r" +
		"\xB5\x0E\xB5\u1475\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x05" +
		"\xB7\u147E\n\xB7\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x06\xB9\u1484\n\xB9\r" +
		"\xB9\x0E\xB9\u1485\x03\xB9\x03\xB9\x07\xB9\u148A\n\xB9\f\xB9\x0E\xB9\u148D" +
		"\v\xB9\x03\xB9\x03\xB9\x07\xB9\u1491\n\xB9\f\xB9\x0E\xB9\u1494\v\xB9\x03" +
		"\xB9\x07\xB9\u1497\n\xB9\f\xB9\x0E\xB9\u149A\v\xB9\x03\xBA\x03\xBA\x03" +
		"\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u14A4\n\xBA\x03\xBB" +
		"\x03\xBB\x07\xBB\u14A8\n\xBB\f\xBB\x0E\xBB\u14AB\v\xBB\x03\xBB\x03\xBB" +
		"\x07\xBB\u14AF\n\xBB\f\xBB\x0E\xBB\u14B2\v\xBB\x03\xBB\x03\xBB\x07\xBB" +
		"\u14B6\n\xBB\f\xBB\x0E\xBB\u14B9\v\xBB\x03\xBB\x05\xBB\u14BC\n\xBB\x03" +
		"\xBB\x07\xBB\u14BF\n\xBB\f\xBB\x0E\xBB\u14C2\v\xBB\x03\xBB\x05\xBB\u14C5" +
		"\n\xBB\x03\xBB\x07\xBB\u14C8\n\xBB\f\xBB\x0E\xBB\u14CB\v\xBB\x03\xBB\x03" +
		"\xBB\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x06\xBD\u14D3\n\xBD\r\xBD\x0E\xBD" +
		"\u14D4\x05\xBD\u14D7\n\xBD\x03\xBD\x03\xBD\x06\xBD\u14DB\n\xBD\r\xBD\x0E" +
		"\xBD\u14DC\x03\xBD\x03\xBD\x05\xBD\u14E1\n\xBD\x03\xBE\x03\xBE\x06\xBE" +
		"\u14E5\n\xBE\r\xBE\x0E\xBE\u14E6\x05\xBE\u14E9\n\xBE\x03\xBE\x03\xBE\x06" +
		"\xBE\u14ED\n\xBE\r\xBE\x0E\xBE\u14EE\x03\xBE\x03\xBE\x03\xBF\x03\xBF\x03" +
		"\xC0\x03\xC0\x07\xC0\u14F7\n\xC0\f\xC0\x0E\xC0\u14FA\v\xC0\x03\xC0\x03" +
		"\xC0\x05\xC0\u14FE\n\xC0\x03\xC1\x03\xC1\x07\xC1\u1502\n\xC1\f\xC1\x0E" +
		"\xC1\u1505\v\xC1\x03\xC1\x03\xC1\x07\xC1\u1509\n\xC1\f\xC1\x0E\xC1\u150C" +
		"\v\xC1\x03\xC1\x03\xC1\x07\xC1\u1510\n\xC1\f\xC1\x0E\xC1\u1513\v\xC1\x03" +
		"\xC2\x03\xC2\x07\xC2\u1517\n\xC2\f\xC2\x0E\xC2\u151A\v\xC2\x03\xC2\x03" +
		"\xC2\x07\xC2\u151E\n\xC2\f\xC2\x0E\xC2\u1521\v\xC2\x03\xC2\x03\xC2\x07" +
		"\xC2\u1525\n\xC2\f\xC2\x0E\xC2\u1528\v\xC2\x03\xC3\x03\xC3\x07\xC3\u152C" +
		"\n\xC3\f\xC3\x0E\xC3\u152F\v\xC3\x03\xC3\x03\xC3\x07\xC3\u1533\n\xC3\f" +
		"\xC3\x0E\xC3\u1536\v\xC3\x03\xC3\x03\xC3\x07\xC3\u153A\n\xC3\f\xC3\x0E" +
		"\xC3\u153D\v\xC3\x03\xC4\x03\xC4\x07\xC4\u1541\n\xC4\f\xC4\x0E\xC4\u1544" +
		"\v\xC4\x03\xC4\x03\xC4\x07\xC4\u1548\n\xC4\f\xC4\x0E\xC4\u154B\v\xC4\x03" +
		"\xC4\x03\xC4\x07\xC4\u154F\n\xC4\f\xC4\x0E\xC4\u1552\v\xC4\x03\xC5\x03" +
		"\xC5\x07\xC5\u1556\n\xC5\f\xC5\x0E\xC5\u1559\v\xC5\x03\xC5\x03\xC5\x07" +
		"\xC5\u155D\n\xC5\f\xC5\x0E\xC5\u1560\v\xC5\x03\xC5\x03\xC5\x07\xC5\u1564" +
		"\n\xC5\f\xC5\x0E\xC5\u1567\v\xC5\x03\xC6\x03\xC6\x07\xC6\u156B\n\xC6\f" +
		"\xC6\x0E\xC6\u156E\v\xC6\x03\xC6\x03\xC6\x07\xC6\u1572\n\xC6\f\xC6\x0E" +
		"\xC6\u1575\v\xC6\x03\xC6\x05\xC6\u1578\n\xC6\x03\xC6\x07\xC6\u157B\n\xC6" +
		"\f\xC6\x0E\xC6\u157E\v\xC6\x03\xC6\x05\xC6\u1581\n\xC6\x03\xC7\x03\xC7" +
		"\x06\xC7\u1585\n\xC7\r\xC7\x0E\xC7\u1586\x03\xC7\x03\xC7\x06\xC7\u158B" +
		"\n\xC7\r\xC7\x0E\xC7\u158C\x05\xC7\u158F\n\xC7\x03\xC7\x03\xC7\x07\xC7" +
		"\u1593\n\xC7\f\xC7\x0E\xC7\u1596\v\xC7\x03\xC7\x03\xC7\x03\xC8\x03\xC8" +
		"\x06\xC8\u159C\n\xC8\r\xC8\x0E\xC8\u159D\x03\xC8\x03\xC8\x07\xC8\u15A2" +
		"\n\xC8\f\xC8\x0E\xC8\u15A5\v\xC8\x03\xC8\x03\xC8\x07\xC8\u15A9\n\xC8\f" +
		"\xC8\x0E\xC8\u15AC\v\xC8\x03\xC8\x05\xC8\u15AF\n\xC8\x03\xC8\x05\xC8\u15B2" +
		"\n\xC8\x03\xC9\x03\xC9\x06\xC9\u15B6\n\xC9\r\xC9\x0E\xC9\u15B7\x03\xC9" +
		"\x03\xC9\x07\xC9\u15BC\n\xC9\f\xC9\x0E\xC9\u15BF\v\xC9\x03\xC9\x03\xC9" +
		"\x07\xC9\u15C3\n\xC9\f\xC9\x0E\xC9\u15C6\v\xC9\x03\xC9\x05\xC9\u15C9\n" +
		"\xC9\x03\xC9\x07\xC9\u15CC\n\xC9\f\xC9\x0E\xC9\u15CF\v\xC9\x03\xC9\x05" +
		"\xC9\u15D2\n\xC9\x03\xC9\x07\xC9\u15D5\n\xC9\f\xC9\x0E\xC9\u15D8\v\xC9" +
		"\x03\xC9\x05\xC9\u15DB\n\xC9\x03\xC9\x07\xC9\u15DE\n\xC9\f\xC9\x0E\xC9" +
		"\u15E1\v\xC9\x03\xCA\x03\xCA\x06\xCA\u15E5\n\xCA\r\xCA\x0E\xCA\u15E6\x03" +
		"\xCA\x03\xCA\x07\xCA\u15EB\n\xCA\f\xCA\x0E\xCA\u15EE\v\xCA\x03\xCA\x03" +
		"\xCA\x07\xCA\u15F2\n\xCA\f\xCA\x0E\xCA\u15F5\v\xCA\x03\xCA\x05\xCA\u15F8" +
		"\n\xCA\x03\xCA\x05\xCA\u15FB\n\xCA\x03\xCB\x03\xCB\x07\xCB\u15FF\n\xCB" +
		"\f\xCB\x0E\xCB\u1602\v\xCB\x03\xCB\x03\xCB\x07\xCB\u1606\n\xCB\f\xCB\x0E" +
		"\xCB\u1609\v\xCB\x03\xCB\x03\xCB\x06\xCB\u160D\n\xCB\r\xCB\x0E\xCB\u160E" +
		"\x03\xCB\x03\xCB\x05\xCB\u1613\n\xCB\x03\xCB\x07\xCB\u1616\n\xCB\f\xCB" +
		"\x0E\xCB\u1619\v\xCB\x03\xCB\x03\xCB\x05\xCB\u161D\n\xCB\x03\xCC\x03\xCC" +
		"\x03\xCD\x03\xCD\x06\xCD\u1623\n\xCD\r\xCD\x0E\xCD\u1624\x05\xCD\u1627" +
		"\n\xCD\x03\xCD\x03\xCD\x06\xCD\u162B\n\xCD\r\xCD\x0E\xCD\u162C\x03\xCD" +
		"\x03\xCD\x03\xCE\x03\xCE\x07\xCE\u1633\n\xCE\f\xCE\x0E\xCE\u1636\v\xCE" +
		"\x03\xCE\x03\xCE\x07\xCE\u163A\n\xCE\f\xCE\x0E\xCE\u163D\v\xCE\x03\xCE" +
		"\x03\xCE\x06\xCE\u1641\n\xCE\r\xCE\x0E\xCE\u1642\x03\xCE\x03\xCE\x05\xCE" +
		"\u1647\n\xCE\x03\xCE\x06\xCE\u164A\n\xCE\r\xCE\x0E\xCE\u164B\x03\xCE\x03" +
		"\xCE\x05\xCE\u1650\n\xCE\x03\xCE\x06\xCE\u1653\n\xCE\r\xCE\x0E\xCE\u1654" +
		"\x03\xCE\x03\xCE\x05\xCE\u1659\n\xCE\x03\xCE\x07\xCE\u165C\n\xCE\f\xCE" +
		"\x0E\xCE\u165F\v\xCE\x03\xCE\x03\xCE\x05\xCE\u1663\n\xCE\x03\xCF\x03\xCF" +
		"\x06\xCF\u1667\n\xCF\r\xCF\x0E\xCF\u1668\x03\xCF\x03\xCF\x05\xCF\u166D" +
		"\n\xCF\x03\xCF\x06\xCF\u1670\n\xCF\r\xCF\x0E\xCF\u1671\x03\xCF\x03\xCF" +
		"\x06\xCF\u1676\n\xCF\r\xCF\x0E\xCF\u1677\x03\xCF\x03\xCF\x03\xD0\x03\xD0" +
		"\x03\xD1\x03\xD1\x03\xD2\x03\xD2\x06\xD2\u1682\n\xD2\r\xD2\x0E\xD2\u1683" +
		"\x05\xD2\u1686\n\xD2\x03\xD2\x03\xD2\x06\xD2\u168A\n\xD2\r\xD2\x0E\xD2" +
		"\u168B\x05\xD2\u168E\n\xD2\x03\xD2\x03\xD2\x06\xD2\u1692\n\xD2\r\xD2\x0E" +
		"\xD2\u1693\x03\xD2\x03\xD2\x05\xD2\u1698\n\xD2\x03\xD2\x06\xD2\u169B\n" +
		"\xD2\r\xD2\x0E\xD2\u169C\x03\xD2\x03\xD2\x03\xD3\x03\xD3\x03\xD4\x03\xD4" +
		"\x06\xD4\u16A5\n\xD4\r\xD4\x0E\xD4\u16A6\x03\xD4\x03\xD4\x05\xD4\u16AB" +
		"\n\xD4\x03\xD4\x03\xD4\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x07\xD6\u16B3\n" +
		"\xD6\f\xD6\x0E\xD6\u16B6\v\xD6\x03\xD6\x03\xD6\x07\xD6\u16BA\n\xD6\f\xD6" +
		"\x0E\xD6\u16BD\v\xD6\x03\xD6\x03\xD6\x07\xD6\u16C1\n\xD6\f\xD6\x0E\xD6" +
		"\u16C4\v\xD6\x06\xD6\u16C6\n\xD6\r\xD6\x0E\xD6\u16C7\x03\xD6\x03\xD6\x05" +
		"\xD6\u16CC\n\xD6\x03\xD7\x03\xD7\x06\xD7\u16D0\n\xD7\r\xD7\x0E\xD7\u16D1" +
		"\x03\xD7\x03\xD7\x06\xD7\u16D6\n\xD7\r\xD7\x0E\xD7\u16D7\x05\xD7\u16DA" +
		"\n\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x06\xD7\u16E0\n\xD7\r\xD7\x0E\xD7" +
		"\u16E1\x03\xD7\x03\xD7\x06\xD7\u16E6\n\xD7\r\xD7\x0E\xD7\u16E7\x05\xD7" +
		"\u16EA\n\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x06\xD7\u16F0\n\xD7\r\xD7" +
		"\x0E\xD7\u16F1\x03\xD7\x03\xD7\x06\xD7\u16F6\n\xD7\r\xD7\x0E\xD7\u16F7" +
		"\x05\xD7\u16FA\n\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03" +
		"\xD7\x03\xD7\x03\xD7\x06\xD7\u1705\n\xD7\r\xD7\x0E\xD7\u1706\x03\xD7\x03" +
		"\xD7\x06\xD7\u170B\n\xD7\r\xD7\x0E\xD7\u170C\x05\xD7\u170F\n\xD7\x03\xD7" +
		"\x03\xD7\x03\xD7\x03\xD7\x06\xD7\u1715\n\xD7\r\xD7\x0E\xD7\u1716\x03\xD7" +
		"\x03\xD7\x06\xD7\u171B\n\xD7\r\xD7\x0E\xD7\u171C\x05\xD7\u171F\n\xD7\x03" +
		"\xD7\x03\xD7\x03\xD7\x03\xD7\x06\xD7\u1725\n\xD7\r\xD7\x0E\xD7\u1726\x03" +
		"\xD7\x03\xD7\x06\xD7\u172B\n\xD7\r\xD7\x0E\xD7\u172C\x03\xD7\x03\xD7\x06" +
		"\xD7\u1731\n\xD7\r\xD7\x0E\xD7\u1732\x05\xD7\u1735\n\xD7\x03\xD7\x03\xD7" +
		"\x05\xD7\u1739\n\xD7\x03\xD8\x03\xD8\x06\xD8\u173D\n\xD8\r\xD8\x0E\xD8" +
		"\u173E\x03\xD8\x03\xD8\x06\xD8\u1743\n\xD8\r\xD8\x0E\xD8\u1744\x03\xD8" +
		"\x03\xD8\x07\xD8\u1749\n\xD8\f\xD8\x0E\xD8\u174C\v\xD8\x03\xD9\x03\xD9" +
		"\x06\xD9\u1750\n\xD9\r\xD9\x0E\xD9\u1751\x03\xD9\x03\xD9\x06\xD9\u1756" +
		"\n\xD9\r\xD9\x0E\xD9\u1757\x05\xD9\u175A\n\xD9\x03\xD9\x03\xD9\x06\xD9" +
		"\u175E\n\xD9\r\xD9\x0E\xD9\u175F\x05\xD9\u1762\n\xD9\x03\xD9\x03\xD9\x03" +
		"\xDA\x03\xDA\x03\xDA\x06\xDA\u1769\n\xDA\r\xDA\x0E\xDA\u176A\x05\xDA\u176D" +
		"\n\xDA\x03\xDA\x03\xDA\x06\xDA\u1771\n\xDA\r\xDA\x0E\xDA\u1772\x03\xDA" +
		"\x03\xDA\x06\xDA\u1777\n\xDA\r\xDA\x0E\xDA\u1778\x03\xDA\x03\xDA\x03\xDA" +
		"\x05\xDA\u177E\n\xDA\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x03\xDD\x03\xDD\x06" +
		"\xDD\u1786\n\xDD\r\xDD\x0E\xDD\u1787\x03\xDD\x03\xDD\x06\xDD\u178C\n\xDD" +
		"\r\xDD\x0E\xDD\u178D\x03\xDD\x03\xDD\x06\xDD\u1792\n\xDD\r\xDD\x0E\xDD" +
		"\u1793\x05\xDD\u1796\n\xDD\x03\xDD\x03\xDD\x07\xDD\u179A\n\xDD\f\xDD\x0E" +
		"\xDD\u179D\v\xDD\x06\xDD\u179F\n\xDD\r\xDD\x0E\xDD\u17A0\x03\xDE\x03\xDE" +
		"\x03\xDF\x03\xDF\x06\xDF\u17A7\n\xDF\r\xDF\x0E\xDF\u17A8\x03\xDF\x03\xDF" +
		"\x06\xDF\u17AD\n\xDF\r\xDF\x0E\xDF\u17AE\x03\xDF\x03\xDF\x05\xDF\u17B3" +
		"\n\xDF\x03\xE0\x03\xE0\x06\xE0\u17B7\n\xE0\r\xE0\x0E\xE0\u17B8\x03\xE0" +
		"\x03\xE0\x06\xE0\u17BD\n\xE0\r\xE0\x0E\xE0\u17BE\x05\xE0\u17C1\n\xE0\x03" +
		"\xE0\x06\xE0\u17C4\n\xE0\r\xE0\x0E\xE0\u17C5\x03\xE1\x06\xE1\u17C9\n\xE1" +
		"\r\xE1\x0E\xE1\u17CA\x03\xE1\x05\xE1\u17CE\n\xE1\x03\xE2\x03\xE2\x06\xE2" +
		"\u17D2\n\xE2\r\xE2\x0E\xE2\u17D3\x06\xE2\u17D6\n\xE2\r\xE2\x0E\xE2\u17D7" +
		"\x03\xE2\x03\xE2\x06\xE2\u17DC\n\xE2\r\xE2\x0E\xE2\u17DD\x05\xE2\u17E0" +
		"\n\xE2\x03\xE2\x03\xE2\x06\xE2\u17E4\n\xE2\r\xE2\x0E\xE2\u17E5\x06\xE2" +
		"\u17E8\n\xE2\r\xE2\x0E\xE2\u17E9\x03\xE3\x03\xE3\x06\xE3\u17EE\n\xE3\r" +
		"\xE3\x0E\xE3\u17EF\x03\xE3\x03\xE3\x07\xE3\u17F4\n\xE3\f\xE3\x0E\xE3\u17F7" +
		"\v\xE3\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x06\xE6\u17FF\n" +
		"\xE6\r\xE6\x0E\xE6\u1800\x03\xE6\x03\xE6\x06\xE6\u1805\n\xE6\r\xE6\x0E" +
		"\xE6\u1806\x03\xE6\x03\xE6\x06\xE6\u180B\n\xE6\r\xE6\x0E\xE6\u180C\x05" +
		"\xE6\u180F\n\xE6\x03\xE6\x03\xE6\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7" +
		"\x03\xE7\x03\xE7\x07\xE7\u181A\n\xE7\f\xE7\x0E\xE7\u181D\v\xE7\x06\xE7" +
		"\u181F\n\xE7\r\xE7\x0E\xE7\u1820\x05\xE7\u1823\n\xE7\x03\xE8\x03\xE8\x06" +
		"\xE8\u1827\n\xE8\r\xE8\x0E\xE8\u1828\x03\xE8\x03\xE8\x06\xE8\u182D\n\xE8" +
		"\r\xE8\x0E\xE8\u182E\x03\xE8\x03\xE8\x05\xE8\u1833\n\xE8\x03\xE8\x03\xE8" +
		"\x06\xE8\u1837\n\xE8\r\xE8\x0E\xE8\u1838\x03\xE8\x03\xE8\x06\xE8\u183D" +
		"\n\xE8\r\xE8\x0E\xE8\u183E\x03\xE8\x03\xE8\x06\xE8\u1843\n\xE8\r\xE8\x0E" +
		"\xE8\u1844\x05\xE8\u1847\n\xE8\x03\xE9\x03\xE9\x03\xEA\x03\xEA\x03\xEB" +
		"\x03\xEB\x03\xEC\x03\xEC\x06\xEC\u1851\n\xEC\r\xEC\x0E\xEC\u1852\x03\xEC" +
		"\x03\xEC\x07\xEC\u1857\n\xEC\f\xEC\x0E\xEC\u185A\v\xEC\x03\xEC\x03\xEC" +
		"\x06\xEC\u185E\n\xEC\r\xEC\x0E\xEC\u185F\x05\xEC\u1862\n\xEC\x03\xEC\x03" +
		"\xEC\x06\xEC\u1866\n\xEC\r\xEC\x0E\xEC\u1867\x05\xEC\u186A\n\xEC\x03\xEC" +
		"\x03\xEC\x06\xEC\u186E\n\xEC\r\xEC\x0E\xEC\u186F\x03\xEC\x03\xEC\x05\xEC" +
		"\u1874\n\xEC\x03\xEC\x03\xEC\x06\xEC\u1878\n\xEC\r\xEC\x0E\xEC\u1879\x03" +
		"\xEC\x03\xEC\x05\xEC\u187E\n\xEC\x05\xEC\u1880\n\xEC\x03\xEC\x07\xEC\u1883" +
		"\n\xEC\f\xEC\x0E\xEC\u1886\v\xEC\x03\xED\x03\xED\x06\xED\u188A\n\xED\r" +
		"\xED\x0E\xED\u188B\x03\xED\x03\xED\x06\xED\u1890\n\xED\r\xED\x0E\xED\u1891" +
		"\x05\xED\u1894\n\xED\x03\xED\x03\xED\x06\xED\u1898\n\xED\r\xED\x0E\xED" +
		"\u1899\x05\xED\u189C\n\xED\x03\xED\x03\xED\x03\xEE\x03\xEE\x06\xEE\u18A2" +
		"\n\xEE\r\xEE\x0E\xEE\u18A3\x03\xEE\x03\xEE\x06\xEE\u18A8\n\xEE\r\xEE\x0E" +
		"\xEE\u18A9\x05\xEE\u18AC\n\xEE\x03\xEE\x03\xEE\x06\xEE\u18B0\n\xEE\r\xEE" +
		"\x0E\xEE\u18B1\x05\xEE\u18B4\n\xEE\x03\xEE\x03\xEE\x03\xEF\x03\xEF\x03" +
		"\xF0\x03\xF0\x03\xF1\x03\xF1\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF4\x03" +
		"\xF4\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x07\xF7\u18CA\n\xF7" +
		"\f\xF7\x0E\xF7\u18CD\v\xF7\x03\xF7\x03\xF7\x07\xF7\u18D1\n\xF7\f\xF7\x0E" +
		"\xF7\u18D4\v\xF7\x03\xF7\x03\xF7\x07\xF7\u18D8\n\xF7\f\xF7\x0E\xF7\u18DB" +
		"\v\xF7\x07\xF7\u18DD\n\xF7\f\xF7\x0E\xF7\u18E0\v\xF7\x03\xF8\x03\xF8\x06" +
		"\xF8\u18E4\n\xF8\r\xF8\x0E\xF8\u18E5\x03\xF8\x03\xF8\x06\xF8\u18EA\n\xF8" +
		"\r\xF8\x0E\xF8\u18EB\x05\xF8\u18EE\n\xF8\x03\xF8\x03\xF8\x07\xF8\u18F2" +
		"\n\xF8\f\xF8\x0E\xF8\u18F5\v\xF8\x03\xF8\x03\xF8\x07\xF8\u18F9\n\xF8\f" +
		"\xF8\x0E\xF8\u18FC\v\xF8\x03\xF8\x03\xF8\x07\xF8\u1900\n\xF8\f\xF8\x0E" +
		"\xF8\u1903\v\xF8\x05\xF8\u1905\n\xF8\x03\xF8\x03\xF8\x07\xF8\u1909\n\xF8" +
		"\f\xF8\x0E\xF8\u190C\v\xF8\x05\xF8\u190E\n\xF8\x03\xF8\x03\xF8\x07\xF8" +
		"\u1912\n\xF8\f\xF8\x0E\xF8\u1915\v\xF8\x05\xF8\u1917\n\xF8\x03\xF8\x03" +
		"\xF8\x07\xF8\u191B\n\xF8\f\xF8\x0E\xF8\u191E\v\xF8\x05\xF8\u1920\n\xF8" +
		"\x03\xF8\x03\xF8\x07\xF8\u1924\n\xF8\f\xF8\x0E\xF8\u1927\v\xF8\x05\xF8" +
		"\u1929\n\xF8\x03\xF8\x03\xF8\x07\xF8\u192D\n\xF8\f\xF8\x0E\xF8\u1930\v" +
		"\xF8\x05\xF8\u1932\n\xF8\x03\xF8\x03\xF8\x07\xF8\u1936\n\xF8\f\xF8\x0E" +
		"\xF8\u1939\v\xF8\x05\xF8\u193B\n\xF8\x03\xF8\x03\xF8\x07\xF8\u193F\n\xF8" +
		"\f\xF8\x0E\xF8\u1942\v\xF8\x07\xF8\u1944\n\xF8\f\xF8\x0E\xF8\u1947\v\xF8" +
		"\x03\xF8\x03\xF8\x07\xF8\u194B\n\xF8\f\xF8\x0E\xF8\u194E\v\xF8\x05\xF8" +
		"\u1950\n\xF8\x03\xF8\x03\xF8\x07\xF8\u1954\n\xF8\f\xF8\x0E\xF8\u1957\v" +
		"\xF8\x05\xF8\u1959\n\xF8\x03\xF8\x03\xF8\x03\xF9\x03\xF9\x06\xF9\u195F" +
		"\n\xF9\r\xF9\x0E\xF9\u1960\x05\xF9\u1963\n\xF9\x03\xF9\x03\xF9\x06\xF9" +
		"\u1967\n\xF9\r\xF9\x0E\xF9\u1968\x03\xF9\x03\xF9\x06\xF9\u196D\n\xF9\r" +
		"\xF9\x0E\xF9\u196E\x05\xF9\u1971\n\xF9\x03\xF9\x03\xF9\x03\xFA\x03\xFA" +
		"\x03\xFB\x03\xFB\x06\xFB\u1979\n\xFB\r\xFB\x0E\xFB\u197A\x05\xFB\u197D" +
		"\n\xFB\x03\xFB\x03\xFB\x06\xFB\u1981\n\xFB\r\xFB\x0E\xFB\u1982\x03\xFB" +
		"\x03\xFB\x06\xFB\u1987\n\xFB\r\xFB\x0E\xFB\u1988\x05\xFB\u198B\n\xFB\x03" +
		"\xFB\x03\xFB\x06\xFB\u198F\n\xFB\r\xFB\x0E\xFB\u1990\x05\xFB\u1993\n\xFB" +
		"\x03\xFB\x03\xFB\x06\xFB\u1997\n\xFB\r\xFB\x0E\xFB\u1998\x03\xFB\x03\xFB" +
		"\x06\xFB\u199D\n\xFB\r\xFB\x0E\xFB\u199E\x05\xFB\u19A1\n\xFB\x03\xFB\x03" +
		"\xFB\x05\xFB\u19A5\n\xFB\x03\xFB\x06\xFB\u19A8\n\xFB\r\xFB\x0E\xFB\u19A9" +
		"\x03\xFB\x03\xFB\x05\xFB\u19AE\n\xFB\x03\xFC\x03\xFC\x03\xFC\x07\xFC\u19B3" +
		"\n\xFC\f\xFC\x0E\xFC";
	private static readonly _serializedATNSegment3: string =
		"\u19B6\v\xFC\x03\xFC\x03\xFC\x07\xFC\u19BA\n\xFC\f\xFC\x0E\xFC\u19BD\v" +
		"\xFC\x03\xFC\x03\xFC\x07\xFC\u19C1\n\xFC\f\xFC\x0E\xFC\u19C4\v\xFC\x03" +
		"\xFC\x07\xFC\u19C7\n\xFC\f\xFC\x0E\xFC\u19CA\v\xFC\x05\xFC\u19CC\n\xFC" +
		"\x03\xFD\x03\xFD\x06\xFD\u19D0\n\xFD\r\xFD\x0E\xFD\u19D1\x03\xFD\x03\xFD" +
		"\x06\xFD\u19D6\n\xFD\r\xFD\x0E\xFD\u19D7\x05\xFD\u19DA\n\xFD\x03\xFD\x03" +
		"\xFD\x06\xFD\u19DE\n\xFD\r\xFD\x0E\xFD\u19DF\x05\xFD\u19E2\n\xFD\x05\xFD" +
		"\u19E4\n\xFD\x03\xFD\x03\xFD\x06\xFD\u19E8\n\xFD\r\xFD\x0E\xFD\u19E9\x03" +
		"\xFD\x03\xFD\x06\xFD\u19EE\n\xFD\r\xFD\x0E\xFD\u19EF\x03\xFD\x03\xFD\x06" +
		"\xFD\u19F4\n\xFD\r\xFD\x0E\xFD\u19F5\x05\xFD\u19F8\n\xFD\x03\xFD\x03\xFD" +
		"\x06\xFD\u19FC\n\xFD\r\xFD\x0E\xFD\u19FD\x05\xFD\u1A00\n\xFD\x03\xFD\x03" +
		"\xFD\x05\xFD\u1A04\n\xFD\x03\xFE\x03\xFE\x06\xFE\u1A08\n\xFE\r\xFE\x0E" +
		"\xFE\u1A09\x03\xFE\x03\xFE\x06\xFE\u1A0E\n\xFE\r\xFE\x0E\xFE\u1A0F\x03" +
		"\xFE\x03\xFE\x05\xFE\u1A14\n\xFE\x03\xFF\x03\xFF\x03\u0100\x03\u0100\x06" +
		"\u0100\u1A1A\n\u0100\r\u0100\x0E\u0100\u1A1B\x03\u0100\x03\u0100\x06\u0100" +
		"\u1A20\n\u0100\r\u0100\x0E\u0100\u1A21\x03\u0100\x03\u0100\x06\u0100\u1A26" +
		"\n\u0100\r\u0100\x0E\u0100\u1A27\x05\u0100\u1A2A\n\u0100\x03\u0100\x03" +
		"\u0100\x03\u0101\x03\u0101\x06\u0101\u1A30\n\u0101\r\u0101\x0E\u0101\u1A31" +
		"\x03\u0101\x03\u0101\x06\u0101\u1A36\n\u0101\r\u0101\x0E\u0101\u1A37\x05" +
		"\u0101\u1A3A\n\u0101\x03\u0101\x03\u0101\x06\u0101\u1A3E\n\u0101\r\u0101" +
		"\x0E\u0101\u1A3F\x05\u0101\u1A42\n\u0101\x03\u0101\x03\u0101\x03\u0102" +
		"\x03\u0102\x03\u0103\x03\u0103\x06\u0103\u1A4A\n\u0103\r\u0103\x0E\u0103" +
		"\u1A4B\x03\u0103\x03\u0103\x06\u0103\u1A50\n\u0103\r\u0103\x0E\u0103\u1A51" +
		"\x05\u0103\u1A54\n\u0103\x05\u0103\u1A56\n\u0103\x03\u0103\x03\u0103\x03" +
		"\u0103\x06\u0103\u1A5B\n\u0103\r\u0103\x0E\u0103\u1A5C\x03\u0103\x03\u0103" +
		"\x03\u0103\x03\u0103\x05\u0103\u1A63\n\u0103\x03\u0104\x03\u0104\x06\u0104" +
		"\u1A67\n\u0104\r\u0104\x0E\u0104\u1A68\x03\u0104\x03\u0104\x06\u0104\u1A6D" +
		"\n\u0104\r\u0104\x0E\u0104\u1A6E\x05\u0104\u1A71\n\u0104\x03\u0104\x03" +
		"\u0104\x06\u0104\u1A75\n\u0104\r\u0104\x0E\u0104\u1A76\x05\u0104\u1A79" +
		"\n\u0104\x03\u0104\x03\u0104\x03\u0105\x03\u0105\x06\u0105\u1A7F\n\u0105" +
		"\r\u0105\x0E\u0105\u1A80\x03\u0105\x03\u0105\x06\u0105\u1A85\n\u0105\r" +
		"\u0105\x0E\u0105\u1A86\x05\u0105\u1A89\n\u0105\x03\u0105\x03\u0105\x06" +
		"\u0105\u1A8D\n\u0105\r\u0105\x0E\u0105\u1A8E\x03\u0105\x03\u0105\x06\u0105" +
		"\u1A93\n\u0105\r\u0105\x0E\u0105\u1A94\x03\u0105\x03\u0105\x06\u0105\u1A99" +
		"\n\u0105\r\u0105\x0E\u0105\u1A9A\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x06\u0105\u1AA1\n\u0105\r\u0105\x0E\u0105\u1AA2\x03\u0105\x03\u0105\x06" +
		"\u0105\u1AA7\n\u0105\r\u0105\x0E\u0105\u1AA8\x05\u0105\u1AAB\n\u0105\x03" +
		"\u0105\x03\u0105\x06\u0105\u1AAF\n\u0105\r\u0105\x0E\u0105\u1AB0\x03\u0105" +
		"\x03\u0105\x06\u0105\u1AB5\n\u0105\r\u0105\x0E\u0105\u1AB6\x03\u0105\x03" +
		"\u0105\x03\u0105\x05\u0105\u1ABC\n\u0105\x05\u0105\u1ABE\n\u0105\x03\u0105" +
		"\x05\u0105\u1AC1\n\u0105\x03\u0106\x03\u0106\x06\u0106\u1AC5\n\u0106\r" +
		"\u0106\x0E\u0106\u1AC6\x03\u0106\x03\u0106\x06\u0106\u1ACB\n\u0106\r\u0106" +
		"\x0E\u0106\u1ACC\x05\u0106\u1ACF\n\u0106\x03\u0106\x03\u0106\x03\u0107" +
		"\x03\u0107\x06\u0107\u1AD5\n\u0107\r\u0107\x0E\u0107\u1AD6\x03\u0107\x03" +
		"\u0107\x06\u0107\u1ADB\n\u0107\r\u0107\x0E\u0107\u1ADC\x05\u0107\u1ADF" +
		"\n\u0107\x03\u0107\x03\u0107\x06\u0107\u1AE3\n\u0107\r\u0107\x0E\u0107" +
		"\u1AE4\x03\u0107\x03\u0107\x06\u0107\u1AE9\n\u0107\r\u0107\x0E\u0107\u1AEA" +
		"\x05\u0107\u1AED\n\u0107\x03\u0107\x03\u0107\x06\u0107\u1AF1\n\u0107\r" +
		"\u0107\x0E\u0107\u1AF2\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x03\u0109" +
		"\x03\u0109\x03\u010A\x03\u010A\x06\u010A\u1AFD\n\u010A\r\u010A\x0E\u010A" +
		"\u1AFE\x03\u010A\x03\u010A\x06\u010A\u1B03\n\u010A\r\u010A\x0E\u010A\u1B04" +
		"\x05\u010A\u1B07\n\u010A\x03\u010A\x03\u010A\x03\u010B\x03\u010B\x06\u010B" +
		"\u1B0D\n\u010B\r\u010B\x0E\u010B\u1B0E\x05\u010B\u1B11\n\u010B\x03\u010B" +
		"\x03\u010B\x03\u010B\x06\u010B\u1B16\n\u010B\r\u010B\x0E\u010B\u1B17\x05" +
		"\u010B\u1B1A\n\u010B\x03\u010B\x03\u010B\x06\u010B\u1B1E\n\u010B\r\u010B" +
		"\x0E\u010B\u1B1F\x03\u010B\x03\u010B\x05\u010B\u1B24\n\u010B\x05\u010B" +
		"\u1B26\n\u010B\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x05\u010C\u1B2C" +
		"\n\u010C\x03\u010D\x03\u010D\x03\u010E\x03\u010E\x07\u010E\u1B32\n\u010E" +
		"\f\u010E\x0E\u010E\u1B35\v\u010E\x03\u010E\x03\u010E\x07\u010E\u1B39\n" +
		"\u010E\f\u010E\x0E\u010E\u1B3C\v\u010E\x03\u010E\x03\u010E\x07\u010E\u1B40" +
		"\n\u010E\f\u010E\x0E\u010E\u1B43\v\u010E\x07\u010E\u1B45\n\u010E\f\u010E" +
		"\x0E\u010E\u1B48\v\u010E\x03\u010E\x03\u010E\x07\u010E\u1B4C\n\u010E\f" +
		"\u010E\x0E\u010E\u1B4F\v\u010E\x07\u010E\u1B51\n\u010E\f\u010E\x0E\u010E" +
		"\u1B54\v\u010E\x03\u010E\x03\u010E\x07\u010E\u1B58\n\u010E\f\u010E\x0E" +
		"\u010E\u1B5B\v\u010E\x07\u010E\u1B5D\n\u010E\f\u010E\x0E\u010E\u1B60\v" +
		"\u010E\x03\u010E\x03\u010E\x07\u010E\u1B64\n\u010E\f\u010E\x0E\u010E\u1B67" +
		"\v\u010E\x07\u010E\u1B69\n\u010E\f\u010E\x0E\u010E\u1B6C\v\u010E\x03\u010E" +
		"\x03\u010E\x07\u010E\u1B70\n\u010E\f\u010E\x0E\u010E\u1B73\v\u010E\x05" +
		"\u010E\u1B75\n\u010E\x03\u010F\x03\u010F\x06\u010F\u1B79\n\u010F\r\u010F" +
		"\x0E\u010F\u1B7A\x03\u010F\x03\u010F\x06\u010F\u1B7F\n\u010F\r\u010F\x0E" +
		"\u010F\u1B80\x03\u010F\x03\u010F\x06\u010F\u1B85\n\u010F\r\u010F\x0E\u010F" +
		"\u1B86\x05\u010F\u1B89\n\u010F\x03\u010F\x03\u010F\x06\u010F\u1B8D\n\u010F" +
		"\r\u010F\x0E\u010F\u1B8E\x05\u010F\u1B91\n\u010F\x03\u010F\x03\u010F\x07" +
		"\u010F\u1B95\n\u010F\f\u010F\x0E\u010F\u1B98\v\u010F\x06\u010F\u1B9A\n" +
		"\u010F\r\u010F\x0E\u010F\u1B9B\x03\u0110\x03\u0110\x06\u0110\u1BA0\n\u0110" +
		"\r\u0110\x0E\u0110\u1BA1\x03\u0110\x03\u0110\x06\u0110\u1BA6\n\u0110\r" +
		"\u0110\x0E\u0110\u1BA7\x03\u0110\x03\u0110\x05\u0110\u1BAC\n\u0110\x03" +
		"\u0111\x03\u0111\x03\u0112\x03\u0112\x03\u0113\x03\u0113\x06\u0113\u1BB4" +
		"\n\u0113\r\u0113\x0E\u0113\u1BB5\x03\u0113\x03\u0113\x06\u0113\u1BBA\n" +
		"\u0113\r\u0113\x0E\u0113\u1BBB\x03\u0113\x03\u0113\x06\u0113\u1BC0\n\u0113" +
		"\r\u0113\x0E\u0113\u1BC1\x05\u0113\u1BC4\n\u0113\x03\u0113\x03\u0113\x06" +
		"\u0113\u1BC8\n\u0113\r\u0113\x0E\u0113\u1BC9\x05\u0113\u1BCC\n\u0113\x03" +
		"\u0113\x03\u0113\x03\u0114\x03\u0114\x06\u0114\u1BD2\n\u0114\r\u0114\x0E" +
		"\u0114\u1BD3\x03\u0114\x03\u0114\x06\u0114\u1BD8\n\u0114\r\u0114\x0E\u0114" +
		"\u1BD9\x05\u0114\u1BDC\n\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114" +
		"\x06\u0114\u1BE2\n\u0114\r\u0114\x0E\u0114\u1BE3\x03\u0114\x03\u0114\x03" +
		"\u0114\x05\u0114\u1BE9\n\u0114\x03\u0115\x03\u0115\x03\u0116\x03\u0116" +
		"\x03\u0117\x03\u0117\x06\u0117\u1BF1\n\u0117\r\u0117\x0E\u0117\u1BF2\x03" +
		"\u0117\x03\u0117\x06\u0117\u1BF7\n\u0117\r\u0117\x0E\u0117\u1BF8\x05\u0117" +
		"\u1BFB\n\u0117\x05\u0117\u1BFD\n\u0117\x03\u0117\x03\u0117\x03\u0117\x06" +
		"\u0117\u1C02\n\u0117\r\u0117\x0E\u0117\u1C03\x03\u0117\x03\u0117\x05\u0117" +
		"\u1C08\n\u0117\x03\u0118\x03\u0118\x03\u0119\x03\u0119\x06\u0119\u1C0E" +
		"\n\u0119\r\u0119\x0E\u0119\u1C0F\x03\u0119\x03\u0119\x06\u0119\u1C14\n" +
		"\u0119\r\u0119\x0E\u0119\u1C15\x05\u0119\u1C18\n\u0119\x03\u0119\x03\u0119" +
		"\x06\u0119\u1C1C\n\u0119\r\u0119\x0E\u0119\u1C1D\x05\u0119\u1C20\n\u0119" +
		"\x03\u0119\x03\u0119\x06\u0119\u1C24\n\u0119\r\u0119\x0E\u0119\u1C25\x05" +
		"\u0119\u1C28\n\u0119\x03\u0119\x03\u0119\x06\u0119\u1C2C\n\u0119\r\u0119" +
		"\x0E\u0119\u1C2D\x03\u0119\x03\u0119\x06\u0119\u1C32\n\u0119\r\u0119\x0E" +
		"\u0119\u1C33\x03\u011A\x03\u011A\x03\u011B\x03\u011B\x06\u011B\u1C3A\n" +
		"\u011B\r\u011B\x0E\u011B\u1C3B\x03\u011B\x03\u011B\x06\u011B\u1C40\n\u011B" +
		"\r\u011B\x0E\u011B\u1C41\x06\u011B\u1C44\n\u011B\r\u011B\x0E\u011B\u1C45" +
		"\x03\u011B\x03\u011B\x06\u011B\u1C4A\n\u011B\r\u011B\x0E\u011B\u1C4B\x03" +
		"\u011B\x03\u011B\x07\u011B\u1C50\n\u011B\f\u011B\x0E\u011B\u1C53\v\u011B" +
		"\x06\u011B\u1C55\n\u011B\r\u011B\x0E\u011B\u1C56\x03\u011C\x03\u011C\x03" +
		"\u011C\x06\u011C\u1C5C\n\u011C\r\u011C\x0E\u011C\u1C5D\x03\u011C\x03\u011C" +
		"\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x06\u011C\u1C67\n\u011C" +
		"\r\u011C\x0E\u011C\u1C68\x05\u011C\u1C6B\n\u011C\x03\u011C\x03\u011C\x06" +
		"\u011C\u1C6F\n\u011C\r\u011C\x0E\u011C\u1C70\x03\u011C\x03\u011C\x03\u011C" +
		"\x03\u011C\x03\u011C\x06\u011C\u1C78\n\u011C\r\u011C\x0E\u011C\u1C79\x03" +
		"\u011C\x03\u011C\x05\u011C\u1C7E\n\u011C\x03\u011D\x03\u011D\x03\u011E" +
		"\x03\u011E\x03\u011F\x03\u011F\x03\u0120\x03\u0120\x03\u0120\x07\u0120" +
		"\u1C89\n\u0120\f\u0120\x0E\u0120\u1C8C\v\u0120\x03\u0120\x03\u0120\x07" +
		"\u0120\u1C90\n\u0120\f\u0120\x0E\u0120\u1C93\v\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x07\u0120\u1C99\n\u0120\f\u0120\x0E\u0120\u1C9C\v" +
		"\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x05\u0120\u1CA2\n\u0120" +
		"\x03\u0120\x03\u0120\x07\u0120\u1CA6\n\u0120\f\u0120\x0E\u0120\u1CA9\v" +
		"\u0120\x03\u0120\x03\u0120\x07\u0120\u1CAD\n\u0120\f\u0120\x0E\u0120\u1CB0" +
		"\v\u0120\x03\u0120\x03\u0120\x07\u0120\u1CB4\n\u0120\f\u0120\x0E\u0120" +
		"\u1CB7\v\u0120\x03\u0121\x03\u0121\x03\u0121\x05\u0121\u1CBC\n\u0121\x03" +
		"\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x05\u0122\u1CC4" +
		"\n\u0122\x03\u0123\x03\u0123\x03\u0124\x03\u0124\x03\u0124\x07\u0124\u1CCB" +
		"\n\u0124\f\u0124\x0E\u0124\u1CCE\v\u0124\x03\u0124\x03\u0124\x07\u0124" +
		"\u1CD2\n\u0124\f\u0124\x0E\u0124\u1CD5\v\u0124\x03\u0124\x03\u0124\x03" +
		"\u0124\x03\u0124\x07\u0124\u1CDB\n\u0124\f\u0124\x0E\u0124\u1CDE\v\u0124" +
		"\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u1CE5\n\u0124" +
		"\x03\u0124\x03\u0124\x07\u0124\u1CE9\n\u0124\f\u0124\x0E\u0124\u1CEC\v" +
		"\u0124\x03\u0124\x03\u0124\x07\u0124\u1CF0\n\u0124\f\u0124\x0E\u0124\u1CF3" +
		"\v\u0124\x03\u0124\x03\u0124\x07\u0124\u1CF7\n\u0124\f\u0124\x0E\u0124" +
		"\u1CFA\v\u0124\x03\u0125\x03\u0125\x06\u0125\u1CFE\n\u0125\r\u0125\x0E" +
		"\u0125\u1CFF\x03\u0125\x03\u0125\x05\u0125\u1D04\n\u0125\x03\u0125\x06" +
		"\u0125\u1D07\n\u0125\r\u0125\x0E\u0125\u1D08\x03\u0125\x03\u0125\x03\u0126" +
		"\x03\u0126\x03\u0126\x07\u0126\u1D10\n\u0126\f\u0126\x0E\u0126\u1D13\v" +
		"\u0126\x03\u0126\x03\u0126\x07\u0126\u1D17\n\u0126\f\u0126\x0E\u0126\u1D1A" +
		"\v\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x05\u0126\u1D20\n\u0126" +
		"\x03\u0126\x03\u0126\x06\u0126\u1D24\n\u0126\r\u0126\x0E\u0126\u1D25\x03" +
		"\u0126\x03\u0126\x07\u0126\u1D2A\n\u0126\f\u0126\x0E\u0126\u1D2D\v\u0126" +
		"\x03\u0126\x03\u0126\x07\u0126\u1D31\n\u0126\f\u0126\x0E\u0126\u1D34\v" +
		"\u0126\x03\u0126\x03\u0126\x07\u0126\u1D38\n\u0126\f\u0126\x0E\u0126\u1D3B" +
		"\v\u0126\x03\u0127\x03\u0127\x03\u0128\x03\u0128\x06\u0128\u1D41\n\u0128" +
		"\r\u0128\x0E\u0128\u1D42\x03\u0128\x03\u0128\x05\u0128\u1D47\n\u0128\x03" +
		"\u0128\x06\u0128\u1D4A\n\u0128\r\u0128\x0E\u0128\u1D4B\x03\u0128\x03\u0128" +
		"\x05\u0128\u1D50\n\u0128\x03\u0128\x06\u0128\u1D53\n\u0128\r\u0128\x0E" +
		"\u0128\u1D54\x03\u0128\x03\u0128\x03\u0129\x03\u0129\x03\u012A\x03\u012A" +
		"\x06\u012A\u1D5D\n\u012A\r\u012A\x0E\u012A\u1D5E\x03\u012A\x03\u012A\x05" +
		"\u012A\u1D63\n\u012A\x03\u012A\x06\u012A\u1D66\n\u012A\r\u012A\x0E\u012A" +
		"\u1D67\x03\u012A\x03\u012A\x05\u012A\u1D6C\n\u012A\x03\u012A\x06\u012A" +
		"\u1D6F\n\u012A\r\u012A\x0E\u012A\u1D70\x03\u012A\x03\u012A\x03\u012B\x03" +
		"\u012B\x03\u012C\x03\u012C\x07\u012C\u1D79\n\u012C\f\u012C\x0E\u012C\u1D7C" +
		"\v\u012C\x05\u012C\u1D7E\n\u012C\x03\u012C\x03\u012C\x07\u012C\u1D82\n" +
		"\u012C\f\u012C\x0E\u012C\u1D85\v\u012C\x05\u012C\u1D87\n\u012C\x03\u012C" +
		"\x03\u012C\x06\u012C\u1D8B\n\u012C\r\u012C\x0E\u012C\u1D8C\x03\u012C\x03" +
		"\u012C\x05\u012C\u1D91\n\u012C\x03\u012C\x03\u012C\x06\u012C\u1D95\n\u012C" +
		"\r\u012C\x0E\u012C\u1D96\x03\u012C\x03\u012C\x05\u012C\u1D9B\n\u012C\x03" +
		"\u012C\x03\u012C\x06\u012C\u1D9F\n\u012C\r\u012C\x0E\u012C\u1DA0\x03\u012C" +
		"\x03\u012C\x05\u012C\u1DA5\n\u012C\x03\u012C\x03\u012C\x06\u012C\u1DA9" +
		"\n\u012C\r\u012C\x0E\u012C\u1DAA\x03\u012C\x03\u012C\x05\u012C\u1DAF\n" +
		"\u012C\x03\u012C\x03\u012C\x06\u012C\u1DB3\n\u012C\r\u012C\x0E\u012C\u1DB4" +
		"\x03\u012C\x03\u012C\x05\u012C\u1DB9\n\u012C\x03\u012C\x03\u012C\x06\u012C" +
		"\u1DBD\n\u012C\r\u012C\x0E\u012C\u1DBE\x03\u012C\x03\u012C\x05\u012C\u1DC3" +
		"\n\u012C\x05\u012C\u1DC5\n\u012C\x03\u012C\x03\u012C\x06\u012C\u1DC9\n" +
		"\u012C\r\u012C\x0E\u012C\u1DCA\x03\u012C\x03\u012C\x05\u012C\u1DCF\n\u012C" +
		"\x03\u012C\x06\u012C\u1DD2\n\u012C\r\u012C\x0E\u012C\u1DD3\x03\u012C\x03" +
		"\u012C\x06\u012C\u1DD8\n\u012C\r\u012C\x0E\u012C\u1DD9\x03\u012C\x03\u012C" +
		"\x06\u012C\u1DDE\n\u012C\r\u012C\x0E\u012C\u1DDF\x03\u012C\x03\u012C\x05" +
		"\u012C\u1DE4\n\u012C\x03\u012C\x03\u012C\x03\u012C\x06\u012C\u1DE9\n\u012C" +
		"\r\u012C\x0E\u012C\u1DEA\x03\u012C\x03\u012C\x05\u012C\u1DEF\n\u012C\x03" +
		"\u012C\x06\u012C\u1DF2\n\u012C\r\u012C\x0E\u012C\u1DF3\x03\u012C\x03\u012C" +
		"\x06\u012C\u1DF8\n\u012C\r\u012C\x0E\u012C\u1DF9\x03\u012C\x03\u012C\x06" +
		"\u012C\u1DFE\n\u012C\r\u012C\x0E\u012C\u1DFF\x03\u012C\x03\u012C\x05\u012C" +
		"\u1E04\n\u012C\x03\u012C\x05\u012C\u1E07\n\u012C\x03\u012D\x03\u012D\x07" +
		"\u012D\u1E0B\n\u012D\f\u012D\x0E\u012D\u1E0E\v\u012D\x03\u012D\x05\u012D" +
		"\u1E11\n\u012D\x03\u012D\x07\u012D\u1E14\n\u012D\f\u012D\x0E\u012D\u1E17" +
		"\v\u012D\x03\u012D\x05\u012D\u1E1A\n\u012D\x03\u012E\x03\u012E\x03\u012E" +
		"\x07\u012E\u1E1F\n\u012E\f\u012E\x0E\u012E\u1E22\v\u012E\x03\u012E\x03" +
		"\u012E\x07\u012E\u1E26\n\u012E\f\u012E\x0E\u012E\u1E29\v\u012E\x03\u012E" +
		"\x05\u012E\u1E2C\n\u012E\x03\u012E\x07\u012E\u1E2F\n\u012E\f\u012E\x0E" +
		"\u012E\u1E32\v\u012E\x03\u012E\x05\u012E\u1E35\n\u012E\x05\u012E\u1E37" +
		"\n\u012E\x03\u012F\x03\u012F\x03\u0130\x03\u0130\x07\u0130\u1E3D\n\u0130" +
		"\f\u0130\x0E\u0130\u1E40\v\u0130\x03\u0130\x03\u0130\x05\u0130\u1E44\n" +
		"\u0130\x03\u0130\x07\u0130\u1E47\n\u0130\f\u0130\x0E\u0130\u1E4A\v\u0130" +
		"\x03\u0130\x03\u0130\x05\u0130\u1E4E\n\u0130\x07\u0130\u1E50\n\u0130\f" +
		"\u0130\x0E\u0130\u1E53\v\u0130\x03\u0130\x07\u0130\u1E56\n\u0130\f\u0130" +
		"\x0E\u0130\u1E59\v\u0130\x03\u0130\x03\u0130\x03\u0131\x03\u0131\x07\u0131" +
		"\u1E5F\n\u0131\f\u0131\x0E\u0131\u1E62\v\u0131\x03\u0131\x03\u0131\x07" +
		"\u0131\u1E66\n\u0131\f\u0131\x0E\u0131\u1E69\v\u0131\x03\u0131\x03\u0131" +
		"\x07\u0131\u1E6D\n\u0131\f\u0131\x0E\u0131\u1E70\v\u0131\x03\u0131\x05" +
		"\u0131\u1E73\n\u0131\x03\u0131\x07\u0131\u1E76\n\u0131\f\u0131\x0E\u0131" +
		"\u1E79\v\u0131\x03\u0131\x03\u0131\x03\u0132\x03\u0132\x03\u0133\x03\u0133" +
		"\x03\u0134\x03\u0134\x03\u0134\x02\x02\x05\u023E\u0246\u024A\u0135\x02" +
		"\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02" +
		"\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02" +
		",\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02" +
		"H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02" +
		"d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02" +
		"\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02" +
		"\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02" +
		"\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02" +
		"\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02" +
		"\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02" +
		"\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02" +
		"\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02" +
		"\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
		"\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
		"\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
		"\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
		"\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
		"\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
		"\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
		"\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E" +
		"\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C" +
		"\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A" +
		"\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198" +
		"\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6" +
		"\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4" +
		"\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2" +
		"\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0" +
		"\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE" +
		"\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC" +
		"\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA" +
		"\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208" +
		"\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216" +
		"\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224" +
		"\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232" +
		"\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240" +
		"\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E" +
		"\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C" +
		"\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\x02+\x03\x02\u01B2" +
		"\u01B2\x04\x02\x99\x99\x9C\x9C\x04\x0211\u0191\u0191\x04\x02\xDD\xDD\u0138" +
		"\u0138\x04\x02\u0121\u0121\u0170\u0170\x04\x02\u01AC\u01AC\u01AF\u01AF" +
		"\x03\x02\u0189\u018A\x03\x02\u015C\u015D\x04\x02\xD8\xD8\u0135\u0135\x03" +
		"\x02\xD2\xD3\x03\x02\u0165\u0166\x03\x02\u01AC\u01AD\x04\x02\x1B\x1Bp" +
		"p\x04\x02\xD7\xD7\u016B\u016B\x04\x02\xA9\xA9\u01AF\u01AF\x03\x02\xDD" +
		"\xDE\x04\x02\u0145\u0145\u0172\u0172\x03\x02\u010B\u010C\x07\x02\u019A" +
		"\u019B\u01A3\u01A4\u01A9\u01A9\u01AD\u01AD\u01AF\u01AF\x04\x02\xA6\xA6" +
		"\xBF\xBF\x04\x02\xFA\xFA\u014E\u014E\x03\x02\x95\x96\x04\x02BB\xC7\xC7" +
		"\x04\x02\xEF\xEF\u014E\u014E\x06\x02\v\v\xBE\xBE\u017C\u017C\u01AF\u01AF" +
		"\x05\x0299\xEB\xEB\u0180\u0180\x04\x02\xC3\xC3\xF8\xF8\x04\x02\x15\x15" +
		"\xCF\xCF\x07\x0255SS\xDF\xDF\u0106\u0107\u015E\u0160\x04\x02\x18\x19\x93" +
		"\x94\x05\x02xx\u011B\u011B\u0142\u0142\x03\x02\x16\x17\x04\x0299\u011F" +
		"\u011F\x04\x02xx\xA1\xA1\x04\x02\u011E\u011E\u0147\u0148\x03\x02UV\x03" +
		"\x02\u0197\u0198\x04\x02\xA2\xA2\u0156\u0156\x04\x02\x13\x13\xFF\xFF\x05" +
		"\x02\xF0\xF0\u0111\u0111\u0185\u0185\x05\x02\r\x0F\xF5\xF5\u01AF\u01AF" +
		"\x02\u2357\x02\u026C\x03\x02\x02\x02\x04\u027D\x03\x02\x02\x02\x06\u0285" +
		"\x03\x02\x02\x02\b\u028B\x03\x02\x02\x02\n\u029D\x03\x02\x02\x02\f\u029F" +
		"\x03\x02\x02\x02\x0E\u02A9\x03\x02\x02\x02\x10\u02E2\x03\x02\x02\x02\x12" +
		"\u02FF\x03\x02\x02\x02\x14\u0325\x03\x02\x02\x02\x16\u0327\x03\x02\x02" +
		"\x02\x18\u0354\x03\x02\x02\x02\x1A\u0362\x03\x02\x02\x02\x1C\u0364\x03" +
		"\x02\x02\x02\x1E\u0385\x03\x02\x02\x02 \u0398\x03\x02\x02\x02\"\u03F6" +
		"\x03\x02\x02\x02$\u0409\x03\x02\x02\x02&\u040B\x03\x02\x02\x02(\u0428" +
		"\x03\x02\x02\x02*\u042A\x03\x02\x02\x02,\u042C\x03\x02\x02\x02.\u043F" +
		"\x03\x02\x02\x020\u045A\x03\x02\x02\x022\u0467\x03\x02\x02\x024\u046B" +
		"\x03\x02\x02\x026\u046D\x03\x02\x02\x028\u04AE\x03\x02\x02\x02:\u04F7" +
		"\x03\x02\x02\x02<\u04FB\x03\x02\x02\x02>\u0501\x03\x02\x02\x02@\u0503" +
		"\x03\x02\x02\x02B\u0523\x03\x02\x02\x02D\u0543\x03\x02\x02\x02F\u056F" +
		"\x03\x02\x02\x02H\u0596\x03\x02\x02\x02J\u0598\x03\x02\x02\x02L\u059A" +
		"\x03\x02\x02\x02N\u05AB\x03\x02\x02\x02P\u05DF\x03\x02\x02\x02R\u0635" +
		"\x03\x02\x02\x02T\u063D\x03\x02\x02\x02V\u0656\x03\x02\x02\x02X\u0669" +
		"\x03\x02\x02\x02Z\u066B\x03\x02\x02\x02\\\u068D\x03\x02\x02\x02^\u068F" +
		"\x03\x02\x02\x02`\u06D0\x03\x02\x02\x02b\u071A\x03\x02\x02\x02d\u071C" +
		"\x03\x02\x02\x02f\u0728\x03\x02\x02\x02h\u0753\x03\x02\x02\x02j\u075B" +
		"\x03\x02\x02\x02l\u077D\x03\x02\x02\x02n\u07A3\x03\x02\x02\x02p\u07A8" +
		"\x03\x02\x02\x02r\u07AA\x03\x02\x02\x02t\u07AC\x03\x02\x02\x02v\u07D2" +
		"\x03\x02\x02\x02x\u07D4\x03\x02\x02\x02z\u0857\x03\x02\x02\x02|\u086B" +
		"\x03\x02\x02\x02~\u086F\x03\x02\x02\x02\x80\u0877\x03\x02\x02\x02\x82" +
		"\u0899\x03\x02\x02\x02\x84\u08BB\x03\x02\x02\x02\x86\u08DD\x03\x02\x02" +
		"\x02\x88\u08FF\x03\x02\x02\x02\x8A\u0901\x03\x02\x02\x02\x8C\u0928\x03" +
		"\x02\x02\x02\x8E\u092A\x03\x02\x02\x02\x90\u0961\x03\x02\x02\x02\x92\u0975" +
		"\x03\x02\x02\x02\x94\u099B\x03\x02\x02\x02\x96\u09D7\x03\x02\x02\x02\x98" +
		"\u09FF\x03\x02\x02\x02\x9A\u0A17\x03\x02\x02\x02\x9C\u0A29\x03\x02\x02" +
		"\x02\x9E\u0A97\x03\x02\x02\x02\xA0\u0AF2\x03\x02\x02\x02\xA2\u0AF4\x03" +
		"\x02\x02\x02\xA4\u0B03\x03\x02\x02\x02\xA6\u0B3F\x03\x02\x02\x02\xA8\u0B41" +
		"\x03\x02\x02\x02\xAA\u0B45\x03\x02\x02\x02\xAC\u0B64\x03\x02\x02\x02\xAE" +
		"\u0B7C\x03\x02\x02\x02\xB0\u0B7E\x03\x02\x02\x02\xB2\u0B80\x03\x02\x02" +
		"\x02\xB4\u0B88\x03\x02\x02\x02\xB6\u0B9A\x03\x02\x02\x02\xB8\u0BAC\x03" +
		"\x02\x02\x02\xBA\u0BBE\x03\x02\x02\x02\xBC\u0BD1\x03\x02\x02\x02\xBE\u0C12" +
		"\x03\x02\x02\x02\xC0\u0C4E\x03\x02\x02\x02\xC2\u0C6E\x03\x02\x02\x02\xC4" +
		"\u0C8E\x03\x02\x02\x02\xC6\u0CBA\x03\x02\x02\x02\xC8\u0CDA\x03\x02\x02" +
		"\x02\xCA\u0CF5\x03\x02\x02\x02\xCC\u0D10\x03\x02\x02\x02\xCE\u0D48\x03" +
		"\x02\x02\x02\xD0\u0D4A\x03\x02\x02\x02\xD2\u0D57\x03\x02\x02\x02\xD4\u0D80" +
		"\x03\x02\x02\x02\xD6\u0DBE\x03\x02\x02\x02\xD8\u0DC0\x03\x02\x02\x02\xDA" +
		"\u0DD6\x03\x02\x02\x02\xDC\u0DD8\x03\x02\x02\x02\xDE\u0DEE\x03\x02\x02" +
		"\x02\xE0\u0E02\x03\x02\x02\x02\xE2\u0E1D\x03\x02\x02\x02\xE4\u0E1F\x03" +
		"\x02\x02\x02\xE6\u0E27\x03\x02\x02\x02\xE8\u0E29\x03\x02\x02\x02\xEA\u0E2B" +
		"\x03\x02\x02\x02\xEC\u0E2D\x03\x02\x02\x02\xEE\u0E49\x03\x02\x02\x02\xF0" +
		"\u0E64\x03\x02\x02\x02\xF2\u0E66\x03\x02\x02\x02\xF4\u0E89\x03\x02\x02" +
		"\x02\xF6\u0EBB\x03\x02\x02\x02\xF8\u0EBD\x03\x02\x02\x02\xFA\u0EBF\x03" +
		"\x02\x02\x02\xFC\u0EC1\x03\x02\x02\x02\xFE\u0EC3\x03\x02\x02\x02\u0100" +
		"\u0ED0\x03\x02\x02\x02\u0102\u0F96\x03\x02\x02\x02\u0104\u0FA7\x03\x02" +
		"\x02\x02\u0106\u0FE3\x03\x02\x02\x02\u0108\u0FFF\x03\x02\x02\x02\u010A" +
		"\u1001\x03\x02\x02\x02\u010C\u1003\x03\x02\x02\x02\u010E\u1005\x03\x02" +
		"\x02\x02\u0110\u1007\x03\x02\x02\x02\u0112\u1053\x03\x02\x02\x02\u0114" +
		"\u1055\x03\x02\x02\x02\u0116\u1068\x03\x02\x02\x02\u0118\u108A\x03\x02" +
		"\x02\x02\u011A\u108C\x03\x02\x02\x02\u011C\u114C\x03\x02\x02\x02\u011E" +
		"\u114E\x03\x02\x02\x02\u0120\u1150\x03\x02\x02\x02\u0122\u1152\x03\x02" +
		"\x02\x02\u0124\u1154\x03\x02\x02\x02\u0126\u1156\x03\x02\x02\x02\u0128" +
		"\u1158\x03\x02\x02\x02\u012A\u115A\x03\x02\x02\x02\u012C\u116B\x03\x02" +
		"\x02\x02\u012E\u11AE\x03\x02\x02\x02\u0130\u11B0\x03\x02\x02\x02\u0132" +
		"\u11C1\x03\x02\x02\x02\u0134\u11C5\x03\x02\x02\x02\u0136\u11C7\x03\x02" +
		"\x02\x02\u0138\u11C9\x03\x02\x02\x02\u013A\u11CD\x03\x02\x02\x02\u013C" +
		"\u11E3\x03\x02\x02\x02\u013E\u11F7\x03\x02\x02\x02\u0140\u11F9\x03\x02" +
		"\x02\x02\u0142\u1270\x03\x02\x02\x02\u0144\u1274\x03\x02\x02\x02\u0146" +
		"\u1278\x03\x02\x02\x02\u0148\u127C\x03\x02\x02\x02\u014A\u127E\x03\x02" +
		"\x02\x02\u014C\u12A7\x03\x02\x02\x02\u014E\u12A9\x03\x02\x02\x02\u0150" +
		"\u12C7\x03\x02\x02\x02\u0152\u12C9\x03\x02\x02\x02\u0154\u12EC\x03\x02" +
		"\x02\x02\u0156\u136F\x03\x02\x02\x02\u0158\u1371\x03\x02\x02\x02\u015A" +
		"\u1373\x03\x02\x02\x02\u015C\u1375\x03\x02\x02\x02\u015E\u1377\x03\x02" +
		"\x02\x02\u0160\u1391\x03\x02\x02\x02\u0162\u145D\x03\x02\x02\x02\u0164" +
		"\u145F\x03\x02\x02\x02\u0166\u1467\x03\x02\x02\x02\u0168\u1471\x03\x02" +
		"\x02\x02\u016A\u1479\x03\x02\x02\x02\u016C\u147D\x03\x02\x02\x02\u016E" +
		"\u147F\x03\x02\x02\x02\u0170\u1481\x03\x02\x02\x02\u0172\u14A3\x03\x02" +
		"\x02\x02\u0174\u14A5\x03\x02\x02\x02\u0176\u14CE\x03\x02\x02\x02\u0178" +
		"\u14D6\x03\x02\x02\x02\u017A\u14E8\x03\x02\x02\x02\u017C\u14F2\x03\x02" +
		"\x02\x02\u017E\u14FD\x03\x02\x02\x02\u0180\u14FF\x03\x02\x02\x02\u0182" +
		"\u1514\x03\x02\x02\x02\u0184\u1529\x03\x02\x02\x02\u0186\u153E\x03\x02" +
		"\x02\x02\u0188\u1553\x03\x02\x02\x02\u018A\u1568\x03\x02\x02\x02\u018C" +
		"\u1582\x03\x02\x02\x02\u018E\u1599\x03\x02\x02\x02\u0190\u15B3\x03\x02" +
		"\x02\x02\u0192\u15E2\x03\x02\x02\x02\u0194\u15FC\x03\x02\x02\x02\u0196" +
		"\u161E\x03\x02\x02\x02\u0198\u1626\x03\x02\x02\x02\u019A\u1630\x03\x02" +
		"\x02\x02\u019C\u1664\x03\x02\x02\x02\u019E\u167B\x03\x02\x02\x02\u01A0" +
		"\u167D\x03\x02\x02\x02\u01A2\u1685\x03\x02\x02\x02\u01A4\u16A0\x03\x02" +
		"\x02\x02\u01A6\u16A2\x03\x02\x02\x02\u01A8\u16AE\x03\x02\x02\x02\u01AA" +
		"\u16B0\x03\x02\x02\x02\u01AC\u1738\x03\x02\x02\x02\u01AE\u173A\x03\x02" +
		"\x02\x02\u01B0\u174D\x03\x02\x02\x02\u01B2\u177D\x03\x02\x02\x02";
	private static readonly _serializedATNSegment4: string =
		"\u01B4\u177F\x03\x02\x02\x02\u01B6\u1781\x03\x02\x02\x02\u01B8\u1783\x03" +
		"\x02\x02\x02\u01BA\u17A2\x03\x02\x02\x02\u01BC\u17A4\x03\x02\x02\x02\u01BE" +
		"\u17B4\x03\x02\x02\x02\u01C0\u17C8\x03\x02\x02\x02\u01C2\u17D5\x03\x02" +
		"\x02\x02\u01C4\u17EB\x03\x02\x02\x02\u01C6\u17F8\x03\x02\x02\x02\u01C8" +
		"\u17FA\x03\x02\x02\x02\u01CA\u17FC\x03\x02\x02\x02\u01CC\u1822\x03\x02" +
		"\x02\x02\u01CE\u1846\x03\x02\x02\x02\u01D0\u1848\x03\x02\x02\x02\u01D2" +
		"\u184A\x03\x02\x02\x02\u01D4\u184C\x03\x02\x02\x02\u01D6\u184E\x03\x02" +
		"\x02\x02\u01D8\u1887\x03\x02\x02\x02\u01DA\u189F\x03\x02\x02\x02\u01DC" +
		"\u18B7\x03\x02\x02\x02\u01DE\u18B9\x03\x02\x02\x02\u01E0\u18BB\x03\x02" +
		"\x02\x02\u01E2\u18BD\x03\x02\x02\x02\u01E4\u18BF\x03\x02\x02\x02\u01E6" +
		"\u18C1\x03\x02\x02\x02\u01E8\u18C3\x03\x02\x02\x02\u01EA\u18C5\x03\x02" +
		"\x02\x02\u01EC\u18C7\x03\x02\x02\x02\u01EE\u18E1\x03\x02\x02\x02\u01F0" +
		"\u1962\x03\x02\x02\x02\u01F2\u1974\x03\x02\x02\x02\u01F4\u197C\x03\x02" +
		"\x02\x02\u01F6\u19CB\x03\x02\x02\x02\u01F8\u19E3\x03\x02\x02\x02\u01FA" +
		"\u1A05\x03\x02\x02\x02\u01FC\u1A15\x03\x02\x02\x02\u01FE\u1A17\x03\x02" +
		"\x02\x02\u0200\u1A2D\x03\x02\x02\x02\u0202\u1A45\x03\x02\x02\x02\u0204" +
		"\u1A55\x03\x02\x02\x02\u0206\u1A64\x03\x02\x02\x02\u0208\u1AC0\x03\x02" +
		"\x02\x02\u020A\u1AC2\x03\x02\x02\x02\u020C\u1AD2\x03\x02\x02\x02\u020E" +
		"\u1AF6\x03\x02\x02\x02\u0210\u1AF8\x03\x02\x02\x02\u0212\u1AFA\x03\x02" +
		"\x02\x02\u0214\u1B25\x03\x02\x02\x02\u0216\u1B2B\x03\x02\x02\x02\u0218" +
		"\u1B2D\x03\x02\x02\x02\u021A\u1B2F\x03\x02\x02\x02\u021C\u1B76\x03\x02" +
		"\x02\x02\u021E\u1B9D\x03\x02\x02\x02\u0220\u1BAD\x03\x02\x02\x02\u0222" +
		"\u1BAF\x03\x02\x02\x02\u0224\u1BB1\x03\x02\x02\x02\u0226\u1BE8\x03\x02" +
		"\x02\x02\u0228\u1BEA\x03\x02\x02\x02\u022A\u1BEC\x03\x02\x02\x02\u022C" +
		"\u1C07\x03\x02\x02\x02\u022E\u1C09\x03\x02\x02\x02\u0230\u1C0B\x03\x02" +
		"\x02\x02\u0232\u1C35\x03\x02\x02\x02\u0234\u1C37\x03\x02\x02\x02\u0236" +
		"\u1C7D\x03\x02\x02\x02\u0238\u1C7F\x03\x02\x02\x02\u023A\u1C81\x03\x02" +
		"\x02\x02\u023C\u1C83\x03\x02\x02\x02\u023E\u1CA1\x03\x02\x02\x02\u0240" +
		"\u1CBB\x03\x02\x02\x02\u0242\u1CC3\x03\x02\x02\x02\u0244\u1CC5\x03\x02" +
		"\x02\x02\u0246\u1CE4\x03\x02\x02\x02\u0248\u1CFB\x03\x02\x02\x02\u024A" +
		"\u1D1F\x03\x02\x02\x02\u024C\u1D3C\x03\x02\x02\x02\u024E\u1D3E\x03\x02" +
		"\x02\x02\u0250\u1D58\x03\x02\x02\x02\u0252\u1D5A\x03\x02\x02\x02\u0254" +
		"\u1D74\x03\x02\x02\x02\u0256\u1D7D\x03\x02\x02\x02\u0258\u1E08\x03\x02" +
		"\x02\x02\u025A\u1E36\x03\x02\x02\x02\u025C\u1E38\x03\x02\x02\x02\u025E" +
		"\u1E3A\x03\x02\x02\x02\u0260\u1E5C\x03\x02\x02\x02\u0262\u1E7C\x03\x02" +
		"\x02\x02\u0264\u1E7E\x03\x02\x02\x02\u0266\u1E80\x03\x02\x02\x02\u0268" +
		"\u026B\x05\f\x07\x02\u0269\u026B\x05\x06\x04\x02\u026A\u0268\x03\x02\x02" +
		"\x02\u026A\u0269\x03\x02\x02\x02\u026B\u026E\x03\x02\x02\x02\u026C\u026A" +
		"\x03\x02\x02\x02\u026C\u026D\x03\x02\x02\x02\u026D\u026F\x03\x02\x02\x02" +
		"\u026E\u026C\x03\x02\x02\x02\u026F\u0270\x07\x02\x02\x03\u0270\x03\x03" +
		"\x02\x02\x02\u0271\u027E\x07\u0185\x02\x02\u0272\u027E\x07\u014B\x02\x02" +
		"\u0273\u027E\x07\u014C\x02\x02\u0274\u027E\x07\xBC\x02\x02\u0275\u027E" +
		"\x07\xBD\x02\x02\u0276\u027E\x07\xE4\x02\x02\u0277\u027E\x07\xE5\x02\x02" +
		"\u0278\u027E\x07\u0119\x02\x02\u0279\u027E\x07\u011A\x02\x02\u027A\u027B" +
		"\x07\n\x02\x02\u027B\u027C\x07\u01B1\x02\x02\u027C\u027E\x07\u01AC\x02" +
		"\x02\u027D\u0271\x03\x02\x02\x02\u027D\u0272\x03\x02\x02\x02\u027D\u0273" +
		"\x03\x02\x02\x02\u027D\u0274\x03\x02\x02\x02\u027D\u0275\x03\x02\x02\x02" +
		"\u027D\u0276\x03\x02\x02\x02\u027D\u0277\x03\x02\x02\x02\u027D\u0278\x03" +
		"\x02\x02\x02\u027D\u0279\x03\x02\x02\x02\u027D\u027A\x03\x02\x02\x02\u027E" +
		"\x05\x03\x02\x02\x02\u027F\u0286\x07\u01B1\x02\x02\u0280\u0286\x07\u01B2" +
		"\x02\x02\u0281\u0286\x07\u01B0\x02\x02\u0282\u0286\x07\u019B\x02\x02\u0283" +
		"\u0286\x07\u019C\x02\x02\u0284\u0286\x05\n\x06\x02\u0285\u027F\x03\x02" +
		"\x02\x02\u0285\u0280\x03\x02\x02\x02\u0285\u0281\x03\x02\x02\x02\u0285" +
		"\u0282\x03\x02\x02\x02\u0285\u0283\x03\x02\x02\x02\u0285\u0284\x03\x02" +
		"\x02\x02\u0286\x07\x03\x02\x02\x02\u0287\u028C\x07\u01B1\x02\x02\u0288" +
		"\u028C\x07\u01B2\x02\x02\u0289\u028C\x07\u01B0\x02\x02\u028A\u028C\x05" +
		"\n\x06\x02\u028B\u0287\x03\x02\x02\x02\u028B\u0288\x03\x02\x02\x02\u028B" +
		"\u0289\x03\x02\x02\x02\u028B\u028A\x03\x02\x02\x02\u028C\t\x03\x02\x02" +
		"\x02\u028D\u0291\x07\u0193\x02\x02\u028E\u0290\n\x02\x02\x02\u028F\u028E" +
		"\x03\x02\x02\x02\u0290\u0293\x03\x02\x02\x02\u0291\u028F\x03\x02\x02\x02" +
		"\u0291\u0292\x03\x02\x02\x02\u0292\u0294\x03\x02\x02\x02\u0293\u0291\x03" +
		"\x02\x02\x02\u0294\u029E\x07\u01B2\x02\x02\u0295\u0299\x07\u0194\x02\x02" +
		"\u0296\u0298\n\x02\x02\x02\u0297\u0296\x03\x02\x02\x02\u0298\u029B\x03" +
		"\x02\x02\x02\u0299\u0297\x03\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A" +
		"\u029C\x03\x02\x02\x02\u029B\u0299\x03\x02\x02\x02\u029C\u029E\x07\u01B2" +
		"\x02\x02\u029D\u028D\x03\x02\x02\x02\u029D\u0295\x03\x02\x02\x02\u029E" +
		"\v\x03\x02\x02\x02\u029F\u02A1\x05\u0170\xB9\x02\u02A0\u02A2\x05\u018E" +
		"\xC8\x02\u02A1\u02A0\x03\x02\x02\x02\u02A1\u02A2\x03\x02\x02\x02\u02A2" +
		"\u02A4\x03\x02\x02\x02\u02A3\u02A5\x05\xBC_\x02\u02A4\u02A3\x03\x02\x02" +
		"\x02\u02A4\u02A5\x03\x02\x02\x02\u02A5\u02A7\x03\x02\x02\x02\u02A6\u02A8" +
		"\x05\x0E\b\x02\u02A7\u02A6\x03\x02\x02\x02\u02A7\u02A8\x03\x02\x02\x02" +
		"\u02A8\r\x03\x02\x02\x02\u02A9\u02AB\x05\x12\n\x02\u02AA\u02AC\x05\x16" +
		"\f\x02\u02AB\u02AA\x03\x02\x02\x02\u02AB\u02AC\x03\x02\x02\x02\u02AC\u02C5" +
		"\x03\x02\x02\x02\u02AD\u02B1\x05\x14\v\x02\u02AE\u02B0\x05\x06\x04\x02" +
		"\u02AF\u02AE\x03\x02\x02\x02\u02B0\u02B3\x03\x02\x02\x02\u02B1\u02AF\x03" +
		"\x02\x02\x02\u02B1\u02B2\x03\x02\x02\x02\u02B2\u02B5\x03\x02\x02\x02\u02B3" +
		"\u02B1\x03\x02\x02\x02\u02B4\u02AD\x03\x02\x02\x02\u02B5\u02B8\x03\x02" +
		"\x02\x02\u02B6\u02B4\x03\x02\x02\x02\u02B6\u02B7\x03\x02\x02\x02\u02B7" +
		"\u02C6\x03\x02\x02\x02\u02B8\u02B6\x03\x02\x02\x02\u02B9\u02BD\x05\x1C" +
		"\x0F\x02\u02BA\u02BC\x05\x06\x04\x02\u02BB\u02BA\x03\x02\x02\x02\u02BC" +
		"\u02BF\x03\x02\x02\x02\u02BD\u02BB\x03\x02\x02\x02\u02BD\u02BE\x03\x02" +
		"\x02\x02\u02BE\u02C1\x03\x02\x02\x02\u02BF\u02BD\x03\x02\x02\x02\u02C0" +
		"\u02B9\x03\x02\x02\x02\u02C1\u02C4\x03\x02\x02\x02\u02C2\u02C0\x03\x02" +
		"\x02\x02\u02C2\u02C3\x03\x02\x02\x02\u02C3\u02C6\x03\x02\x02\x02\u02C4" +
		"\u02C2\x03\x02\x02\x02\u02C5\u02B6\x03\x02\x02\x02\u02C5\u02C2\x03\x02" +
		"\x02\x02\u02C6\u02CE\x03\x02\x02\x02\u02C7\u02C9\x05\x06\x04\x02\u02C8" +
		"\u02C7\x03\x02\x02\x02\u02C9\u02CC\x03\x02\x02\x02\u02CA\u02C8\x03\x02" +
		"\x02\x02\u02CA\u02CB\x03\x02\x02\x02\u02CB\u02CD\x03\x02\x02\x02\u02CC" +
		"\u02CA\x03\x02\x02\x02\u02CD\u02CF\x05\x10\t\x02\u02CE\u02CA\x03\x02\x02" +
		"\x02\u02CE\u02CF\x03\x02\x02\x02\u02CF\u02DF\x03\x02\x02\x02\u02D0\u02D2" +
		"\x05\x06\x04\x02\u02D1\u02D0\x03\x02\x02\x02\u02D2\u02D5\x03\x02\x02\x02" +
		"\u02D3\u02D1\x03\x02\x02\x02\u02D3\u02D4\x03\x02\x02\x02\u02D4\u02D6\x03" +
		"\x02\x02\x02\u02D5\u02D3\x03\x02\x02\x02\u02D6\u02DA\x050\x19\x02\u02D7" +
		"\u02D9\x05\x06\x04\x02\u02D8\u02D7\x03\x02\x02\x02\u02D9\u02DC\x03\x02" +
		"\x02\x02\u02DA\u02D8\x03\x02\x02\x02\u02DA\u02DB\x03\x02\x02\x02\u02DB" +
		"\u02DE\x03\x02\x02\x02\u02DC\u02DA\x03\x02\x02\x02\u02DD\u02D3\x03\x02" +
		"\x02\x02\u02DE\u02E1\x03\x02\x02\x02\u02DF\u02DD\x03\x02\x02\x02\u02DF" +
		"\u02E0\x03\x02\x02\x02\u02E0\x0F\x03\x02\x02\x02\u02E1\u02DF\x03\x02\x02" +
		"\x02\u02E2\u02E4\x07\x04\x02\x02\u02E3\u02E5\x05\x06\x04\x02\u02E4\u02E3" +
		"\x03\x02\x02\x02\u02E5\u02E6\x03\x02\x02\x02\u02E6\u02E4\x03\x02\x02\x02" +
		"\u02E6\u02E7\x03\x02\x02\x02\u02E7\u02E8\x03\x02\x02\x02\u02E8\u02F0\x07" +
		"\u0116\x02\x02\u02E9\u02EB\x05\x06\x04\x02\u02EA\u02E9\x03\x02\x02\x02" +
		"\u02EB\u02EC\x03\x02\x02\x02\u02EC\u02EA\x03\x02\x02\x02\u02EC\u02ED\x03" +
		"\x02\x02\x02\u02ED\u02EE\x03\x02\x02\x02\u02EE\u02EF\x05\u0176\xBC\x02" +
		"\u02EF\u02F1\x03\x02\x02\x02\u02F0\u02EA\x03\x02\x02\x02\u02F0\u02F1\x03" +
		"\x02\x02\x02\u02F1\u02F5\x03\x02\x02\x02\u02F2\u02F4\x05\x06\x04\x02\u02F3" +
		"\u02F2\x03\x02\x02\x02\u02F4\u02F7\x03\x02\x02\x02\u02F5\u02F3\x03\x02" +
		"\x02\x02\u02F5\u02F6\x03\x02\x02\x02\u02F6\u02F8\x03\x02\x02\x02\u02F7" +
		"\u02F5\x03\x02\x02\x02\u02F8\u02FC\x07\u01A9\x02\x02\u02F9\u02FB\x05\x06" +
		"\x04\x02\u02FA\u02F9\x03\x02\x02\x02\u02FB\u02FE\x03\x02\x02\x02\u02FC" +
		"\u02FA\x03\x02\x02\x02\u02FC\u02FD\x03\x02\x02\x02\u02FD\x11\x03\x02\x02" +
		"\x02\u02FE\u02FC\x03\x02\x02\x02\u02FF\u0301\x07\u0115\x02\x02\u0300\u0302" +
		"\x05\x06\x04\x02\u0301\u0300\x03\x02\x02\x02\u0302\u0303\x03\x02\x02\x02" +
		"\u0303\u0301\x03\x02\x02\x02\u0303\u0304\x03\x02\x02\x02\u0304\u0305\x03" +
		"\x02\x02\x02\u0305\u030D\x07u\x02\x02\u0306\u0308\x05\x06\x04\x02\u0307" +
		"\u0306\x03\x02\x02\x02\u0308\u0309\x03\x02\x02\x02\u0309\u0307\x03\x02" +
		"\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\u030B\x03\x02\x02\x02\u030B" +
		"\u030C\x05,\x17\x02\u030C\u030E\x03\x02\x02\x02\u030D\u0307\x03\x02\x02" +
		"\x02\u030D\u030E\x03\x02\x02\x02\u030E\u0316\x03\x02\x02\x02\u030F\u0311" +
		"\x05\x06\x04\x02\u0310\u030F\x03\x02\x02\x02\u0311\u0312\x03\x02\x02\x02" +
		"\u0312\u0310\x03\x02\x02\x02\u0312\u0313\x03\x02\x02\x02\u0313\u0314\x03" +
		"\x02\x02\x02\u0314\u0315\x05.\x18\x02\u0315\u0317\x03\x02\x02\x02\u0316" +
		"\u0310\x03\x02\x02\x02\u0316\u0317\x03\x02\x02\x02\u0317\u031B\x03\x02" +
		"\x02\x02\u0318\u031A\x05\x06\x04\x02\u0319\u0318\x03\x02\x02\x02\u031A" +
		"\u031D\x03\x02\x02\x02\u031B\u0319\x03\x02\x02\x02\u031B\u031C\x03\x02" +
		"\x02\x02\u031C\u031E\x03\x02\x02\x02\u031D\u031B\x03\x02\x02\x02\u031E" +
		"\u0322\x07\u01A9\x02\x02\u031F\u0321\x05\x06\x04\x02\u0320\u031F\x03\x02" +
		"\x02\x02\u0321\u0324\x03\x02\x02\x02\u0322\u0320\x03\x02\x02\x02\u0322" +
		"\u0323\x03\x02\x02\x02\u0323\x13\x03\x02\x02\x02\u0324\u0322\x03\x02\x02" +
		"\x02\u0325\u0326\x05&\x14\x02\u0326\x15\x03\x02\x02\x02\u0327\u032B\x07" +
		"\x03\x02\x02\u0328\u032A\x05\x06\x04\x02\u0329\u0328\x03\x02\x02\x02\u032A" +
		"\u032D\x03\x02\x02\x02\u032B\u0329\x03\x02\x02\x02\u032B\u032C\x03\x02" +
		"\x02\x02\u032C\u032E\x03\x02\x02\x02\u032D\u032B\x03\x02\x02\x02\u032E" +
		"\u0332\x07\u01A9\x02\x02\u032F\u0331\x05\x06\x04\x02\u0330\u032F\x03\x02" +
		"\x02\x02\u0331\u0334\x03\x02\x02\x02\u0332\u0330\x03\x02\x02\x02\u0332" +
		"\u0333\x03\x02\x02\x02\u0333\u033C\x03\x02\x02\x02\u0334\u0332\x03\x02" +
		"\x02\x02\u0335\u0339\x05\x18\r\x02\u0336\u0338\x05\x06\x04\x02\u0337\u0336" +
		"\x03\x02\x02\x02\u0338\u033B\x03\x02\x02\x02\u0339\u0337\x03\x02\x02\x02" +
		"\u0339\u033A\x03\x02\x02\x02\u033A\u033D\x03\x02\x02\x02\u033B\u0339\x03" +
		"\x02\x02\x02\u033C\u0335\x03\x02\x02\x02\u033D\u033E\x03\x02\x02\x02\u033E" +
		"\u033C\x03\x02\x02\x02\u033E\u033F\x03\x02\x02\x02\u033F\u0340\x03\x02" +
		"\x02\x02\u0340\u0342\x07\x04\x02\x02\u0341\u0343\x05\x06\x04\x02\u0342" +
		"\u0341\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344\u0342\x03\x02" +
		"\x02\x02\u0344\u0345\x03\x02\x02\x02\u0345\u0346\x03\x02\x02\x02\u0346" +
		"\u034A\x07j\x02\x02\u0347\u0349\x05\x06\x04\x02\u0348\u0347\x03\x02\x02" +
		"\x02\u0349\u034C\x03\x02\x02\x02\u034A\u0348\x03\x02\x02\x02\u034A\u034B" +
		"\x03\x02\x02\x02\u034B\u034D\x03\x02\x02\x02\u034C\u034A\x03\x02\x02\x02" +
		"\u034D\u0351\x07\u01A9\x02\x02\u034E\u0350\x05\x06\x04\x02\u034F\u034E" +
		"\x03\x02\x02\x02\u0350\u0353\x03\x02\x02\x02\u0351\u034F\x03\x02\x02\x02" +
		"\u0351\u0352\x03\x02\x02\x02\u0352\x17\x03\x02\x02\x02\u0353\u0351\x03" +
		"\x02\x02\x02\u0354\u0355\x05&\x14\x02\u0355\u035F\x05 \x11\x02\u0356\u0358" +
		"\x05\x06\x04\x02\u0357\u0356\x03\x02\x02\x02\u0358\u0359\x03\x02\x02\x02" +
		"\u0359\u0357\x03\x02\x02\x02\u0359\u035A\x03\x02\x02\x02\u035A\u035B\x03" +
		"\x02\x02\x02\u035B\u035C\x05\x1A\x0E\x02\u035C\u035E\x03\x02\x02\x02\u035D" +
		"\u0357\x03\x02\x02\x02\u035E\u0361\x03\x02\x02\x02\u035F\u035D\x03\x02" +
		"\x02\x02\u035F\u0360\x03\x02\x02\x02\u0360\x19\x03\x02\x02\x02\u0361\u035F" +
		"\x03\x02\x02\x02\u0362\u0363\x05\x1C\x0F\x02\u0363\x1B\x03\x02\x02\x02" +
		"\u0364\u0368\x05(\x15\x02\u0365\u0367\x05\x06\x04\x02\u0366\u0365\x03" +
		"\x02\x02\x02\u0367\u036A\x03\x02\x02\x02\u0368\u0366\x03\x02\x02\x02\u0368" +
		"\u0369\x03\x02\x02\x02\u0369\u036B\x03\x02\x02\x02\u036A\u0368\x03\x02" +
		"\x02\x02\u036B\u036F\x07\u01A9\x02\x02\u036C\u036E\x05\x06\x04\x02\u036D" +
		"\u036C\x03\x02\x02\x02\u036E\u0371\x03\x02\x02\x02\u036F\u036D\x03\x02" +
		"\x02\x02\u036F\u0370\x03\x02\x02\x02\u0370\u037B\x03\x02\x02\x02\u0371" +
		"\u036F\x03\x02\x02\x02\u0372\u0376\x05\x1E\x10\x02\u0373\u0375\x05\x06" +
		"\x04\x02\u0374\u0373\x03\x02\x02\x02\u0375\u0378\x03\x02\x02\x02\u0376" +
		"\u0374\x03\x02\x02\x02\u0376\u0377\x03\x02\x02\x02\u0377\u037A\x03\x02" +
		"\x02\x02\u0378\u0376\x03\x02\x02\x02\u0379\u0372\x03\x02\x02\x02\u037A" +
		"\u037D\x03\x02\x02\x02\u037B\u0379\x03\x02\x02\x02\u037B\u037C\x03\x02" +
		"\x02\x02\u037C\x1D\x03\x02\x02\x02\u037D\u037B\x03\x02\x02\x02\u037E\u0382" +
		"\x052\x1A\x02\u037F\u0381\x05\x06\x04\x02\u0380\u037F\x03\x02\x02\x02" +
		"\u0381\u0384\x03\x02\x02\x02\u0382\u0380\x03\x02\x02\x02\u0382\u0383\x03" +
		"\x02\x02\x02\u0383\u0386\x03\x02\x02\x02\u0384\u0382\x03\x02\x02\x02\u0385" +
		"\u037E\x03\x02\x02\x02\u0386\u0387\x03\x02\x02\x02\u0387\u0385\x03\x02" +
		"\x02\x02\u0387\u0388\x03\x02\x02\x02\u0388\u0396\x03\x02\x02\x02\u0389" +
		"\u038B\x05\x06\x04\x02\u038A\u0389\x03\x02\x02\x02\u038B\u038E\x03\x02" +
		"\x02\x02\u038C\u038A\x03\x02\x02\x02\u038C\u038D\x03\x02\x02\x02\u038D" +
		"\u038F\x03\x02\x02\x02\u038E\u038C\x03\x02\x02\x02\u038F\u0393\x07\u01A9" +
		"\x02\x02\u0390\u0392\x05\x06\x04\x02\u0391\u0390\x03\x02\x02\x02\u0392" +
		"\u0395\x03\x02\x02\x02\u0393\u0391\x03\x02\x02\x02\u0393\u0394\x03\x02" +
		"\x02\x02\u0394\u0397\x03\x02\x02\x02\u0395\u0393\x03\x02\x02\x02\u0396" +
		"\u038C\x03\x02\x02\x02\u0396\u0397\x03\x02\x02\x02\u0397\x1F\x03\x02\x02" +
		"\x02\u0398\u03A0\x07\u0177\x02\x02\u0399\u039B\x05\x06\x04\x02\u039A\u0399" +
		"\x03\x02\x02\x02\u039B\u039C\x03\x02\x02\x02\u039C\u039A\x03\x02\x02\x02" +
		"\u039C\u039D\x03\x02\x02\x02\u039D\u039E\x03\x02\x02\x02\u039E\u039F\x07" +
		"\xB6\x02\x02\u039F\u03A1\x03\x02\x02\x02\u03A0\u039A\x03\x02\x02\x02\u03A0" +
		"\u03A1\x03\x02\x02\x02\u03A1\u03A3\x03\x02\x02\x02\u03A2\u03A4\x05\x06" +
		"\x04\x02\u03A3\u03A2\x03\x02\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5" +
		"\u03A3\x03\x02\x02\x02\u03A5\u03A6\x03\x02\x02\x02\u03A6\u03E7\x03\x02" +
		"\x02\x02\u03A7\u03AF\x07\t\x02\x02\u03A8\u03AA\x05\x06\x04\x02\u03A9\u03A8" +
		"\x03\x02\x02\x02\u03AA\u03AB\x03\x02\x02\x02\u03AB\u03A9\x03\x02\x02\x02" +
		"\u03AB\u03AC\x03\x02\x02\x02\u03AC\u03AD\x03\x02\x02\x02\u03AD\u03AE\x07" +
		"\u014E\x02\x02\u03AE\u03B0\x03\x02\x02\x02\u03AF\u03A9\x03\x02\x02\x02" +
		"\u03AF\u03B0\x03\x02\x02\x02\u03B0\u03B2\x03\x02\x02\x02\u03B1\u03B3\x05" +
		"\x06\x04\x02\u03B2\u03B1\x03\x02\x02\x02\u03B3\u03B4\x03\x02\x02\x02\u03B4" +
		"\u03B2\x03\x02\x02\x02\u03B4\u03B5\x03\x02\x02\x02\u03B5\u03B6\x03\x02" +
		"\x02\x02\u03B6\u03B8\t\x03\x02\x02\u03B7\u03B9\x05\x06\x04\x02\u03B8\u03B7" +
		"\x03\x02\x02\x02\u03B9\u03BA\x03\x02\x02\x02\u03BA\u03B8\x03\x02\x02\x02" +
		"\u03BA\u03BB\x03\x02\x02\x02\u03BB\u03BC\x03\x02\x02\x02\u03BC\u03C4\x07" +
		"\u0115\x02\x02\u03BD\u03BF\x05\x06\x04\x02\u03BE\u03BD\x03\x02\x02\x02" +
		"\u03BF\u03C0\x03\x02\x02\x02\u03C0\u03BE\x03\x02\x02\x02\u03C0\u03C1\x03" +
		"\x02\x02\x02\u03C1\u03C2\x03\x02\x02\x02\u03C2\u03C3\x07\xFB\x02\x02\u03C3" +
		"\u03C5\x03\x02\x02\x02\u03C4\u03BE\x03\x02\x02\x02\u03C4\u03C5\x03\x02" +
		"\x02\x02\u03C5\u03C7\x03\x02\x02\x02\u03C6\u03C8\x05\x06\x04\x02\u03C7" +
		"\u03C6\x03\x02\x02\x02\u03C8\u03C9\x03\x02\x02\x02\u03C9\u03C7\x03\x02" +
		"\x02\x02\u03C9\u03CA\x03\x02\x02\x02\u03CA\u03CB\x03\x02\x02\x02\u03CB" +
		"\u03CF\x05$\x13\x02\u03CC\u03CE\x05\x06\x04\x02\u03CD\u03CC\x03\x02\x02" +
		"\x02\u03CE\u03D1\x03\x02\x02\x02\u03CF\u03CD\x03\x02\x02\x02\u03CF\u03D0" +
		"\x03\x02\x02\x02\u03D0\u03D2\x03\x02\x02\x02\u03D1\u03CF\x03\x02\x02\x02" +
		"\u03D2\u03D6\x07\u01A9\x02\x02\u03D3\u03D5\x05\x06\x04\x02\u03D4\u03D3" +
		"\x03\x02\x02\x02\u03D5\u03D8\x03\x02\x02\x02\u03D6\u03D4\x03\x02\x02\x02" +
		"\u03D6\u03D7\x03\x02\x02\x02\u03D7\u03E8\x03\x02\x02\x02\u03D8\u03D6\x03" +
		"\x02\x02\x02\u03D9\u03DB\x07$\x02\x02\u03DA\u03DC\x05\x06\x04\x02\u03DB" +
		"\u03DA\x03\x02\x02\x02\u03DC\u03DD\x03\x02\x02\x02\u03DD\u03DB\x03\x02" +
		"\x02\x02\u03DD\u03DE\x03\x02\x02\x02\u03DE\u03DF\x03\x02\x02\x02\u03DF" +
		"\u03E1\x07\u0129\x02\x02\u03E0\u03E2\x05\x06\x04\x02\u03E1\u03E0\x03\x02" +
		"\x02\x02\u03E2\u03E3\x03\x02\x02\x02\u03E3\u03E1\x03\x02\x02\x02\u03E3" +
		"\u03E4\x03\x02\x02\x02\u03E4\u03E5\x03\x02\x02\x02\u03E5\u03E6\x05\"\x12" +
		"\x02\u03E6\u03E8\x03\x02\x02\x02\u03E7\u03A7\x03\x02\x02\x02\u03E7\u03D9" +
		"\x03\x02\x02\x02\u03E8\u03EC\x03\x02\x02\x02\u03E9\u03EB\x05\x06\x04\x02" +
		"\u03EA\u03E9\x03\x02\x02\x02\u03EB\u03EE\x03\x02\x02\x02\u03EC\u03EA\x03" +
		"\x02\x02\x02\u03EC\u03ED\x03\x02\x02\x02\u03ED\u03EF\x03\x02\x02\x02\u03EE" +
		"\u03EC\x03\x02\x02\x02\u03EF\u03F3\x07\u01A9\x02\x02\u03F0\u03F2\x05\x06" +
		"\x04\x02\u03F1\u03F0\x03\x02\x02\x02\u03F2\u03F5\x03\x02\x02\x02\u03F3" +
		"\u03F1\x03\x02\x02\x02\u03F3\u03F4\x03\x02\x02\x02\u03F4!\x03\x02\x02" +
		"\x02\u03F5\u03F3\x03\x02\x02\x02\u03F6\u03F7\x05\u01AE\xD8\x02\u03F7#" +
		"\x03\x02\x02\x02\u03F8\u0402\x05\u0218\u010D\x02\u03F9\u03FB\x05\x06\x04" +
		"\x02\u03FA\u03F9\x03\x02\x02\x02\u03FB\u03FC\x03\x02\x02\x02\u03FC\u03FA" +
		"\x03\x02\x02\x02\u03FC\u03FD\x03\x02\x02\x02\u03FD\u03FE\x03\x02\x02\x02" +
		"\u03FE\u03FF\x05\u0218\u010D\x02\u03FF\u0401\x03\x02\x02\x02\u0400\u03FA" +
		"\x03\x02\x02\x02\u0401\u0404\x03\x02\x02\x02\u0402\u0400\x03\x02\x02\x02" +
		"\u0402\u0403\x03\x02\x02\x02\u0403\u040A\x03\x02\x02\x02\u0404\u0402\x03" +
		"\x02\x02\x02\u0405\u040A\x07\xCA\x02\x02\u0406\u040A\x07\u0101\x02\x02" +
		"\u0407\u040A\x07\xD0\x02\x02\u0408\u040A\x07\x9F\x02\x02\u0409\u03F8\x03" +
		"\x02\x02\x02\u0409\u0405\x03\x02\x02\x02\u0409\u0406\x03\x02\x02\x02\u0409" +
		"\u0407\x03\x02\x02\x02\u0409\u0408\x03\x02\x02\x02\u040A%\x03\x02\x02" +
		"\x02\u040B\u040D\x05*\x16\x02\u040C\u040E\x05\x06\x04\x02\u040D\u040C" +
		"\x03\x02\x02\x02\u040E\u040F\x03\x02\x02\x02\u040F\u040D\x03\x02\x02\x02" +
		"\u040F\u0410\x03\x02\x02\x02\u0410\u0411\x03\x02\x02\x02\u0411\u0419\x07" +
		"\u013B\x02\x02\u0412\u0414\x05\x06\x04\x02\u0413\u0412\x03\x02\x02\x02" +
		"\u0414\u0415\x03\x02\x02\x02\u0415\u0413\x03\x02\x02\x02\u0415\u0416\x03" +
		"\x02\x02\x02\u0416\u0417\x03\x02\x02\x02\u0417\u0418\x05\u01A8\xD5\x02" +
		"\u0418\u041A\x03\x02\x02\x02\u0419\u0413\x03\x02\x02\x02\u0419\u041A\x03" +
		"\x02\x02\x02\u041A\u041E\x03\x02\x02\x02\u041B\u041D\x05\x06\x04\x02\u041C" +
		"\u041B\x03\x02\x02\x02\u041D\u0420\x03\x02\x02\x02\u041E\u041C\x03\x02" +
		"\x02\x02\u041E\u041F\x03\x02\x02\x02\u041F\u0421\x03\x02\x02\x02\u0420" +
		"\u041E\x03\x02\x02\x02\u0421\u0425\x07\u01A9\x02\x02\u0422\u0424\x05\x06" +
		"\x04\x02\u0423\u0422\x03\x02\x02\x02\u0424\u0427\x03\x02\x02\x02\u0425" +
		"\u0423\x03\x02\x02\x02\u0425\u0426\x03\x02\x02\x02\u0426\'\x03\x02\x02" +
		"\x02\u0427\u0425\x03\x02\x02\x02\u0428\u0429\x07\u01AF\x02\x02\u0429)" +
		"\x03\x02\x02\x02\u042A\u042B\x07\u01AF\x02\x02\u042B+\x03\x02\x02\x02" +
		"\u042C\u042E\x07\u0178\x02\x02\u042D\u042F\x05\x06\x04\x02\u042E\u042D" +
		"\x03\x02\x02\x02\u042F\u0430\x03\x02\x02\x02\u0430\u042E\x03\x02\x02\x02" +
		"\u0430\u0431\x03\x02\x02\x02\u0431\u0432\x03\x02\x02\x02\u0432\u043C\x05" +
		"\u01AE\xD8\x02\u0433\u0435\x05\x06\x04\x02\u0434\u0433\x03\x02\x02\x02" +
		"\u0435\u0436\x03\x02\x02\x02\u0436\u0434\x03\x02\x02\x02\u0436\u0437\x03" +
		"\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438\u0439\x05\u01AE\xD8\x02" +
		"\u0439\u043B\x03\x02\x02\x02\u043A\u0434\x03\x02\x02\x02\u043B\u043E\x03" +
		"\x02\x02\x02\u043C\u043A\x03\x02\x02\x02\u043C\u043D\x03\x02\x02\x02\u043D" +
		"-\x03\x02\x02\x02\u043E\u043C\x03\x02\x02\x02\u043F\u0441\x07\xB5\x02" +
		"\x02\u0440\u0442\x05\x06\x04\x02\u0441\u0440\x03\x02\x02\x02\u0442\u0443" +
		"\x03\x02\x02\x02\u0443\u0441\x03\x02\x02\x02\u0443\u0444\x03\x02\x02\x02" +
		"\u0444\u0445\x03\x02\x02\x02\u0445\u0446\x05\u01AE\xD8\x02\u0446/\x03" +
		"\x02\x02\x02\u0447\u044B\x05\u023E\u0120\x02\u0448\u044A\x05\x06\x04\x02" +
		"\u0449\u0448\x03\x02\x02\x02\u044A\u044D\x03\x02\x02\x02\u044B\u0449\x03" +
		"\x02\x02\x02\u044B\u044C\x03\x02\x02\x02\u044C\u044E\x03\x02\x02\x02\u044D" +
		"\u044B\x03\x02\x02\x02\u044E\u044F\x07\u01A9\x02\x02\u044F\u045B\x03\x02" +
		"\x02\x02\u0450\u0454\x05\u0246\u0124\x02\u0451\u0453\x05\x06\x04\x02\u0452" +
		"\u0451\x03\x02\x02\x02\u0453\u0456\x03\x02\x02\x02\u0454\u0452\x03\x02" +
		"\x02\x02\u0454\u0455\x03\x02\x02\x02\u0455\u0457\x03\x02\x02\x02\u0456" +
		"\u0454\x03\x02\x02\x02\u0457\u0458\x07\u01A9\x02\x02\u0458\u045B\x03\x02" +
		"\x02\x02\u0459\u045B\x05\x06\x04\x02\u045A\u0447\x03\x02\x02\x02\u045A" +
		"\u0450\x03\x02\x02\x02\u045A\u0459\x03\x02\x02\x02\u045B1\x03\x02\x02" +
		"\x02\u045C\u0468\x05\x80A\x02\u045D\u0468\x05z>\x02\u045E\u0468\x05t;" +
		"\x02\u045F\u0468\x05f4\x02\u0460\u0468\x05d3\x02\u0461\u0468\x05`1\x02" +
		"\u0462\u0468\x05^0\x02\u0463\u0468\x05\\/\x02\u0464\u0468\x05Z.\x02\u0465" +
		"\u0468\x05> \x02\u0466\u0468\x054\x1B\x02\u0467\u045C\x03\x02\x02\x02" +
		"\u0467\u045D\x03\x02\x02\x02\u0467\u045E\x03\x02\x02\x02\u0467\u045F\x03" +
		"\x02\x02\x02\u0467\u0460\x03\x02\x02\x02\u0467\u0461\x03\x02\x02\x02\u0467" +
		"\u0462\x03\x02\x02\x02\u0467\u0463\x03\x02\x02\x02\u0467\u0464\x03\x02" +
		"\x02\x02\u0467\u0465\x03\x02\x02\x02\u0467\u0466\x03\x02\x02\x02\u0468" +
		"3\x03\x02\x02\x02\u0469\u046C\x056\x1C\x02\u046A\u046C\x058\x1D\x02\u046B" +
		"\u0469\x03\x02\x02\x02\u046B\u046A\x03\x02\x02\x02\u046C5\x03\x02\x02" +
		"\x02\u046D\u046F\x07t\x02\x02\u046E\u0470\x05\x06\x04\x02\u046F\u046E" +
		"\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u046F\x03\x02\x02\x02" +
		"\u0471\u0472\x03\x02\x02\x02\u0472\u0473\x03\x02\x02\x02\u0473\u0475\x05" +
		"<\x1F\x02\u0474\u0476\x05\x06\x04\x02\u0475\u0474\x03\x02\x02\x02\u0476" +
		"\u0477\x03\x02\x02\x02\u0477\u0475\x03\x02\x02\x02\u0477\u0478\x03\x02" +
		"\x02\x02\u0478\u0479\x03\x02\x02\x02\u0479\u0487\t\x04\x02\x02\u047A\u047C" +
		"\x05\x06\x04\x02\u047B\u047A\x03\x02\x02\x02\u047C\u047D\x03\x02\x02\x02" +
		"\u047D\u047B\x03\x02\x02\x02\u047D\u047E\x03\x02\x02\x02\u047E\u047F\x03" +
		"\x02\x02\x02\u047F\u0481\x05<\x1F\x02\u0480\u0482\x05\x06\x04\x02\u0481" +
		"\u0480\x03\x02\x02\x02\u0482\u0483\x03\x02\x02\x02\u0483\u0481\x03\x02" +
		"\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484\u0485\x03\x02\x02\x02\u0485" +
		"\u0486\x07\xB5\x02\x02\u0486\u0488\x03\x02\x02\x02\u0487\u047B\x03\x02" +
		"\x02\x02\u0487\u0488\x03\x02\x02\x02\u0488\u0498\x03\x02\x02\x02\u0489" +
		"\u048B\x05\x06\x04\x02\u048A\u0489\x03\x02\x02\x02\u048B\u048C\x03\x02" +
		"\x02\x02\u048C\u048A\x03\x02\x02\x02\u048C\u048D\x03\x02\x02\x02\u048D" +
		"\u048E\x03\x02\x02\x02\u048E\u0496\x05\u0258\u012D\x02\u048F\u0491\x05" +
		"\x06\x04\x02\u0490\u048F\x03\x02\x02\x02\u0491\u0492\x03\x02\x02\x02\u0492" +
		"\u0490\x03\x02\x02\x02\u0492\u0493\x03\x02\x02\x02\u0493\u0494\x03\x02" +
		"\x02\x02\u0494\u0495\x07\u0188\x02\x02\u0495\u0497\x03\x02\x02\x02\u0496" +
		"\u0490\x03\x02\x02\x02\u0496\u0497\x03\x02\x02\x02\u0497\u0499\x03\x02" +
		"\x02\x02\u0498\u048A\x03\x02\x02\x02\u0499\u049A\x03\x02\x02\x02\u049A" +
		"\u0498\x03\x02\x02\x02\u049A\u049B\x03\x02\x02\x02\u049B\u04A3\x03\x02" +
		"\x02\x02\u049C\u049E\x05\x06\x04\x02\u049D\u049C\x03\x02\x02\x02\u049E" +
		"\u049F\x03\x02\x02\x02\u049F\u049D\x03\x02\x02\x02\u049F\u04A0\x03\x02" +
		"\x02\x02\u04A0\u04A1\x03\x02\x02\x02\u04A1\u04A2\x05\x86D\x02\u04A2\u04A4" +
		"\x03\x02\x02\x02\u04A3\u049D\x03\x02\x02\x02\u04A3\u04A4\x03\x02\x02\x02" +
		"\u04A4\u04AC\x03\x02\x02\x02\u04A5\u04A7\x05\x06\x04\x02\u04A6\u04A5\x03" +
		"\x02\x02\x02\u04A7\u04A8\x03\x02\x02\x02\u04A8\u04A6\x03\x02\x02\x02\u04A8" +
		"\u04A9\x03\x02\x02\x02\u04A9\u04AA\x03\x02\x02\x02\u04AA\u04AB\x07\x82" +
		"\x02\x02\u04AB\u04AD\x03\x02\x02\x02\u04AC\u04A6\x03\x02\x02\x02\u04AC" +
		"\u04AD\x03\x02\x02\x02\u04AD7\x03\x02\x02\x02\u04AE\u04B0\x07t\x02\x02" +
		"\u04AF\u04B1\x05\x06\x04\x02\u04B0\u04AF\x03\x02\x02\x02\u04B1\u04B2\x03" +
		"\x02\x02\x02\u04B2\u04B0\x03\x02\x02\x02\u04B2\u04B3\x03\x02\x02\x02\u04B3" +
		"\u04B4\x03\x02\x02\x02\u04B4\u04B6\x05<\x1F\x02\u04B5\u04B7\x05\x06\x04" +
		"\x02\u04B6\u04B5\x03\x02\x02\x02\u04B7\u04B8\x03\x02\x02\x02\u04B8\u04B6" +
		"\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BA\x03\x02\x02\x02" +
		"\u04BA\u04C8\t\x04\x02\x02\u04BB\u04BD\x05\x06\x04\x02\u04BC\u04BB\x03" +
		"\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE\u04BC\x03\x02\x02\x02\u04BE" +
		"\u04BF\x03\x02\x02\x02\u04BF\u04C0\x03\x02\x02\x02\u04C0\u04C2\x05<\x1F" +
		"\x02\u04C1\u04C3\x05\x06\x04\x02\u04C2\u04C1\x03\x02\x02\x02\u04C3\u04C4" +
		"\x03\x02\x02\x02\u04C4\u04C2\x03\x02\x02\x02\u04C4\u04C5\x03\x02\x02\x02" +
		"\u04C5\u04C6\x03\x02\x02\x02\u04C6\u04C7\x07\xB5\x02\x02\u04C7\u04C9\x03" +
		"\x02\x02\x02\u04C8\u04BC\x03\x02\x02\x02\u04C8\u04C9\x03\x02\x02\x02\u04C9" +
		"\u04CB\x03\x02\x02\x02\u04CA\u04CC\x05\x06\x04\x02\u04CB\u04CA\x03\x02" +
		"\x02\x02\u04CC\u04CD";
	private static readonly _serializedATNSegment5: string =
		"\x03\x02\x02\x02\u04CD\u04CB\x03\x02\x02\x02\u04CD\u04CE\x03\x02\x02\x02" +
		"\u04CE\u04CF\x03\x02\x02\x02\u04CF\u04D7\x05\u0258\u012D\x02\u04D0\u04D2" +
		"\x05\x06\x04\x02\u04D1\u04D0\x03\x02\x02\x02\u04D2\u04D3\x03\x02\x02\x02" +
		"\u04D3\u04D1\x03\x02\x02\x02\u04D3\u04D4\x03\x02\x02\x02\u04D4\u04D5\x03" +
		"\x02\x02\x02\u04D5\u04D6\x07\u0188\x02\x02\u04D6\u04D8\x03\x02\x02\x02" +
		"\u04D7\u04D1\x03\x02\x02\x02\u04D7\u04D8\x03\x02\x02\x02\u04D8\u04DA\x03" +
		"\x02\x02\x02\u04D9\u04DB\x05\x06\x04\x02\u04DA\u04D9\x03\x02\x02\x02\u04DB" +
		"\u04DC\x03\x02\x02\x02\u04DC\u04DA\x03\x02\x02\x02\u04DC\u04DD\x03\x02" +
		"\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE\u04E0\x07\u0192\x02\x02\u04DF" +
		"\u04E1\x05\x06\x04\x02\u04E0\u04DF\x03\x02\x02\x02\u04E1\u04E2\x03\x02" +
		"\x02\x02\u04E2\u04E0\x03\x02\x02\x02\u04E2\u04E3\x03\x02\x02\x02\u04E3" +
		"\u04E4\x03\x02\x02\x02\u04E4\u04EC\x05:\x1E\x02\u04E5\u04E7\x05\x06\x04" +
		"\x02\u04E6\u04E5\x03\x02\x02\x02\u04E7\u04E8\x03\x02\x02\x02\u04E8\u04E6" +
		"\x03\x02\x02\x02\u04E8\u04E9\x03\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02" +
		"\u04EA\u04EB\x05\x86D\x02\u04EB\u04ED\x03\x02\x02\x02\u04EC\u04E6\x03" +
		"\x02\x02\x02\u04EC\u04ED\x03\x02\x02\x02\u04ED\u04F5\x03\x02\x02\x02\u04EE" +
		"\u04F0\x05\x06\x04\x02\u04EF\u04EE\x03\x02\x02\x02\u04F0\u04F1\x03\x02" +
		"\x02\x02\u04F1\u04EF\x03\x02\x02\x02\u04F1\u04F2\x03\x02\x02\x02\u04F2" +
		"\u04F3\x03\x02\x02\x02\u04F3\u04F4\x07\x82\x02\x02\u04F4\u04F6\x03\x02" +
		"\x02\x02\u04F5\u04EF\x03\x02\x02\x02\u04F5\u04F6\x03\x02\x02\x02\u04F6" +
		"9\x03\x02\x02\x02\u04F7\u04F8\x05\u0258\u012D\x02\u04F8;\x03\x02\x02\x02" +
		"\u04F9\u04FC\x05\u025A\u012E\x02\u04FA\u04FC\x07\u01AD\x02\x02\u04FB\u04F9" +
		"\x03\x02\x02\x02\u04FB\u04FA\x03\x02\x02\x02\u04FC=\x03\x02\x02\x02\u04FD" +
		"\u0502\x05@!\x02\u04FE\u0502\x05B\"\x02\u04FF\u0502\x05D#\x02\u0500\u0502" +
		"\x05F$\x02\u0501\u04FD\x03\x02\x02\x02\u0501\u04FE\x03\x02\x02\x02\u0501" +
		"\u04FF\x03\x02\x02\x02\u0501\u0500\x03\x02\x02\x02\u0502?\x03\x02\x02" +
		"\x02\u0503\u0516\x07s\x02\x02\u0504\u0506\x05\x06\x04\x02\u0505\u0504" +
		"\x03\x02\x02\x02\u0506\u0507\x03\x02\x02\x02\u0507\u0505\x03\x02\x02\x02" +
		"\u0507\u0508\x03\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509\u0513\x05" +
		"H%\x02\u050A\u050C\x05\x06\x04\x02\u050B\u050A\x03\x02\x02\x02\u050C\u050D" +
		"\x03\x02\x02\x02\u050D\u050B\x03\x02\x02\x02\u050D\u050E\x03\x02\x02\x02" +
		"\u050E\u050F\x03\x02\x02\x02\u050F\u0510\x05P)\x02\u0510\u0512\x03\x02" +
		"\x02\x02\u0511\u050B\x03\x02\x02\x02\u0512\u0515\x03\x02\x02\x02\u0513" +
		"\u0511\x03\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514\u0517\x03\x02" +
		"\x02\x02\u0515\u0513\x03\x02\x02\x02\u0516\u0505\x03\x02\x02\x02\u0517" +
		"\u0518\x03\x02\x02\x02\u0518\u0516\x03\x02\x02\x02\u0518\u0519\x03\x02" +
		"\x02\x02\u0519\u0521\x03\x02\x02\x02\u051A\u051C\x05\x06\x04\x02\u051B" +
		"\u051A\x03\x02\x02\x02\u051C\u051D\x03\x02\x02\x02\u051D\u051B\x03\x02" +
		"\x02\x02\u051D\u051E\x03\x02\x02\x02\u051E\u051F\x03\x02\x02\x02\u051F" +
		"\u0520\x07\x83\x02\x02\u0520\u0522\x03\x02\x02\x02\u0521\u051B\x03\x02" +
		"\x02\x02\u0521\u0522\x03\x02\x02\x02\u0522A\x03\x02\x02\x02\u0523\u0536" +
		"\x07s\x02\x02\u0524\u0526\x05\x06\x04\x02\u0525\u0524\x03\x02\x02\x02" +
		"\u0526\u0527\x03\x02\x02\x02\u0527\u0525\x03\x02\x02\x02\u0527\u0528\x03" +
		"\x02\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\u0533\x05H%\x02\u052A\u052C" +
		"\x05\x06\x04\x02\u052B\u052A\x03\x02\x02\x02\u052C\u052D\x03\x02\x02\x02" +
		"\u052D\u052B\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02\u052E\u052F\x03" +
		"\x02\x02\x02\u052F\u0530\x05R*\x02\u0530\u0532\x03\x02\x02\x02\u0531\u052B" +
		"\x03\x02\x02\x02\u0532\u0535\x03\x02\x02\x02\u0533\u0531\x03\x02\x02\x02" +
		"\u0533\u0534\x03\x02\x02\x02\u0534\u0537\x03\x02\x02\x02\u0535\u0533\x03" +
		"\x02\x02\x02\u0536\u0525\x03\x02\x02\x02\u0537\u0538\x03\x02\x02\x02\u0538" +
		"\u0536\x03\x02\x02\x02\u0538\u0539\x03\x02\x02\x02\u0539\u0541\x03\x02" +
		"\x02\x02\u053A\u053C\x05\x06\x04\x02\u053B\u053A\x03\x02\x02\x02\u053C" +
		"\u053D\x03\x02\x02\x02\u053D\u053B\x03\x02\x02\x02\u053D\u053E\x03\x02" +
		"\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F\u0540\x07\x83\x02\x02\u0540" +
		"\u0542\x03\x02\x02\x02\u0541\u053B\x03\x02\x02\x02\u0541\u0542\x03\x02" +
		"\x02\x02\u0542C\x03\x02\x02\x02\u0543\u0545\x07s\x02\x02\u0544\u0546\x05" +
		"\x06\x04\x02\u0545\u0544\x03\x02\x02\x02\u0546\u0547\x03\x02\x02\x02\u0547" +
		"\u0545\x03\x02\x02\x02\u0547\u0548\x03\x02\x02\x02\u0548\u0549\x03\x02" +
		"\x02\x02\u0549\u0564\x05\u01AE\xD8\x02\u054A\u054C\x05\x06\x04\x02\u054B" +
		"\u054A\x03\x02\x02\x02\u054C\u054D\x03\x02\x02\x02\u054D\u054B\x03\x02" +
		"\x02\x02\u054D\u054E\x03\x02\x02\x02\u054E\u0555\x03\x02\x02\x02\u054F" +
		"\u0551\x07\x1E\x02\x02\u0550\u0552\x05\x06\x04\x02\u0551\u0550\x03\x02" +
		"\x02\x02\u0552\u0553\x03\x02\x02\x02\u0553\u0551\x03\x02\x02\x02\u0553" +
		"\u0554\x03\x02\x02\x02\u0554\u0556\x03\x02\x02\x02\u0555\u054F\x03\x02" +
		"\x02\x02\u0555\u0556\x03\x02\x02\x02\u0556\u0562\x03\x02\x02\x02\u0557" +
		"\u055F\x05L\'\x02\u0558\u055A\x05\x06\x04\x02\u0559\u0558\x03\x02\x02" +
		"\x02\u055A\u055B\x03\x02\x02\x02\u055B\u0559\x03\x02\x02\x02\u055B\u055C" +
		"\x03\x02\x02\x02\u055C\u055D\x03\x02\x02\x02\u055D\u055E\x05N(\x02\u055E" +
		"\u0560\x03\x02\x02\x02\u055F\u0559\x03\x02\x02\x02\u055F\u0560\x03\x02" +
		"\x02\x02\u0560\u0563\x03\x02\x02\x02\u0561\u0563\x05N(\x02\u0562\u0557" +
		"\x03\x02\x02\x02\u0562\u0561\x03\x02\x02\x02\u0563\u0565\x03\x02\x02\x02" +
		"\u0564\u054B\x03\x02\x02\x02\u0564\u0565\x03\x02\x02\x02\u0565\u056D\x03" +
		"\x02\x02\x02\u0566\u0568\x05\x06\x04\x02\u0567\u0566\x03\x02\x02\x02\u0568" +
		"\u0569\x03\x02\x02\x02\u0569\u0567\x03\x02\x02\x02\u0569\u056A\x03\x02" +
		"\x02\x02\u056A\u056B\x03\x02\x02\x02\u056B\u056C\x07\x83\x02\x02\u056C" +
		"\u056E\x03\x02\x02\x02\u056D\u0567\x03\x02\x02\x02\u056D\u056E\x03\x02" +
		"\x02\x02\u056EE\x03\x02\x02\x02\u056F\u0571\x07s\x02\x02\u0570\u0572\x05" +
		"\x06\x04\x02\u0571\u0570\x03\x02\x02\x02\u0572\u0573\x03\x02\x02\x02\u0573" +
		"\u0571\x03\x02\x02\x02\u0573\u0574\x03\x02\x02\x02\u0574\u0575\x03\x02" +
		"\x02\x02\u0575\u0577\x05H%\x02\u0576\u0578\x05\x06\x04\x02\u0577\u0576" +
		"\x03\x02\x02\x02\u0578\u0579\x03\x02\x02\x02\u0579\u0577\x03\x02\x02\x02" +
		"\u0579\u057A\x03\x02\x02\x02\u057A\u057B\x03\x02\x02\x02\u057B\u057D\x07" +
		"\u0175\x02\x02\u057C\u057E\x05\x06\x04\x02\u057D\u057C\x03\x02\x02\x02" +
		"\u057E\u057F\x03\x02\x02\x02\u057F\u057D\x03\x02\x02\x02\u057F\u0580\x03" +
		"\x02\x02\x02\u0580\u0581\x03\x02\x02\x02\u0581\u0589\x05J&\x02\u0582\u0584" +
		"\x05\x06\x04\x02\u0583\u0582\x03\x02\x02\x02\u0584\u0585\x03\x02\x02\x02" +
		"\u0585\u0583\x03\x02\x02\x02\u0585\u0586\x03\x02\x02\x02\u0586\u0587\x03" +
		"\x02\x02\x02\u0587\u0588\x05\x82B\x02\u0588\u058A\x03\x02\x02\x02\u0589" +
		"\u0583\x03\x02\x02\x02\u0589\u058A\x03\x02\x02\x02\u058A\u0592\x03\x02" +
		"\x02\x02\u058B\u058D\x05\x06\x04\x02\u058C\u058B\x03\x02\x02\x02\u058D" +
		"\u058E\x03\x02\x02\x02\u058E\u058C\x03\x02\x02\x02\u058E\u058F\x03\x02" +
		"\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590\u0591\x07\x83\x02\x02\u0591" +
		"\u0593\x03\x02\x02\x02\u0592\u058C\x03\x02\x02\x02\u0592\u0593\x03\x02" +
		"\x02\x02\u0593G\x03\x02\x02\x02\u0594\u0597\x05\u025A\u012E\x02\u0595" +
		"\u0597\x05\u0240\u0121\x02\u0596\u0594\x03\x02\x02\x02\u0596\u0595\x03" +
		"\x02\x02\x02\u0597I\x03\x02\x02\x02\u0598\u0599\x07\u01AF\x02\x02\u0599" +
		"K\x03\x02\x02\x02\u059A\u059C\x07\xDD\x02\x02\u059B\u059D\x05\x06\x04" +
		"\x02\u059C\u059B\x03\x02\x02\x02\u059D\u059E\x03\x02\x02\x02\u059E\u059C" +
		"\x03\x02\x02\x02\u059E\u059F\x03\x02\x02\x02\u059F\u05A0\x03\x02\x02\x02" +
		"\u05A0\u05A1\x07\xF4\x02\x02\u05A1\u05A3\x03\x02\x02\x02\u05A2\u05A4\x05" +
		"\x06\x04\x02\u05A3\u05A2\x03\x02\x02\x02\u05A4\u05A5\x03\x02\x02\x02\u05A5" +
		"\u05A3\x03\x02\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6\u05A9\x03\x02" +
		"\x02\x02\u05A7\u05AA\x05\u025A\u012E\x02\u05A8\u05AA\x07\u01AD\x02\x02" +
		"\u05A9\u05A7\x03\x02\x02\x02\u05A9\u05A8\x03\x02\x02\x02\u05AAM\x03\x02" +
		"\x02\x02\u05AB\u05AD\x07@\x02\x02\u05AC\u05AE\x05\x06\x04\x02\u05AD\u05AC" +
		"\x03\x02\x02\x02\u05AE\u05AF\x03\x02\x02\x02\u05AF\u05AD\x03\x02\x02\x02" +
		"\u05AF\u05B0\x03\x02\x02\x02\u05B0\u05B1\x03\x02\x02\x02\u05B1\u05B2\x07" +
		"\xF4\x02\x02\u05B2\u05B4\x03\x02\x02\x02\u05B3\u05B5\x05\x06\x04\x02\u05B4" +
		"\u05B3\x03\x02\x02\x02\u05B5\u05B6\x03\x02\x02\x02\u05B6\u05B4\x03\x02" +
		"\x02\x02\u05B6\u05B7\x03\x02\x02\x02\u05B7\u05BA\x03\x02\x02\x02\u05B8" +
		"\u05BB\x05\u025A\u012E\x02\u05B9\u05BB\x07\u01AD\x02\x02\u05BA\u05B8\x03" +
		"\x02\x02\x02\u05BA\u05B9\x03\x02\x02\x02\u05BBO\x03\x02\x02\x02\u05BC" +
		"\u05BE\x07\u017F\x02\x02\u05BD\u05BF\x05\x06\x04\x02\u05BE\u05BD\x03\x02" +
		"\x02\x02\u05BF\u05C0\x03\x02\x02\x02\u05C0\u05BE\x03\x02\x02\x02\u05C0" +
		"\u05C1\x03\x02\x02\x02\u05C1\u05C3\x03\x02\x02\x02\u05C2\u05BC\x03\x02" +
		"\x02\x02\u05C2\u05C3\x03\x02\x02\x02\u05C3\u05C4\x03\x02\x02\x02\u05C4" +
		"\u05E0\x07Z\x02\x02\u05C5\u05C7\x07\u0175\x02\x02\u05C6\u05C8\x05\x06" +
		"\x04\x02\u05C7\u05C6\x03\x02\x02\x02\u05C8\u05C9\x03\x02\x02\x02\u05C9" +
		"\u05C7\x03\x02\x02\x02\u05C9\u05CA\x03\x02\x02\x02\u05CA\u05CB\x03\x02" +
		"\x02\x02\u05CB\u05CC\x05X-\x02\u05CC\u05E0\x03\x02\x02\x02\u05CD\u05CF" +
		"\x07\u017F\x02\x02\u05CE\u05D0\x05\x06\x04\x02\u05CF\u05CE\x03\x02\x02" +
		"\x02\u05D0\u05D1\x03\x02\x02\x02\u05D1\u05CF\x03\x02\x02\x02\u05D1\u05D2" +
		"\x03\x02\x02\x02\u05D2\u05D4\x03\x02\x02\x02\u05D3\u05CD\x03\x02\x02\x02" +
		"\u05D3\u05D4\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02\x02\u05D5\u05DD\x07" +
		"\xF2\x02\x02\u05D6\u05D8\x05\x06\x04\x02\u05D7\u05D6\x03\x02\x02\x02\u05D8" +
		"\u05D9\x03\x02\x02\x02\u05D9\u05D7\x03\x02\x02\x02\u05D9\u05DA\x03\x02" +
		"\x02\x02\u05DA\u05DB\x03\x02\x02\x02\u05DB\u05DC\x07\u0190\x02\x02\u05DC" +
		"\u05DE\x03\x02\x02\x02\u05DD\u05D7\x03\x02\x02\x02\u05DD\u05DE\x03\x02" +
		"\x02\x02\u05DE\u05E0\x03\x02\x02\x02\u05DF\u05C2\x03\x02\x02\x02\u05DF" +
		"\u05C5\x03\x02\x02\x02\u05DF\u05D3\x03\x02\x02\x02\u05E0Q\x03\x02\x02" +
		"\x02\u05E1\u0636\x05P)\x02\u05E2\u0636\x05T+\x02\u05E3\u0636\x05V,\x02" +
		"\u05E4\u05FC\x07\x98\x02\x02\u05E5\u05E7\x05\x06\x04\x02\u05E6\u05E5\x03" +
		"\x02\x02\x02\u05E7\u05E8\x03\x02\x02\x02\u05E8\u05E6\x03\x02\x02\x02\u05E8" +
		"\u05E9\x03\x02\x02\x02\u05E9\u05F0\x03\x02\x02\x02\u05EA\u05EC\x07\u0169" +
		"\x02\x02\u05EB\u05ED\x05\x06\x04\x02\u05EC\u05EB\x03\x02\x02\x02\u05ED" +
		"\u05EE\x03\x02\x02\x02\u05EE\u05EC\x03\x02\x02\x02\u05EE\u05EF\x03\x02" +
		"\x02\x02\u05EF\u05F1\x03\x02\x02\x02\u05F0\u05EA\x03\x02\x02\x02\u05F0" +
		"\u05F1\x03\x02\x02\x02\u05F1\u05F2\x03\x02\x02\x02\u05F2\u05FA\x07|\x02" +
		"\x02\u05F3\u05F5\x05\x06\x04\x02\u05F4\u05F3\x03\x02\x02\x02\u05F5\u05F6" +
		"\x03\x02\x02\x02\u05F6\u05F4\x03\x02\x02\x02\u05F6\u05F7\x03\x02\x02\x02" +
		"\u05F7\u05F8\x03\x02\x02\x02\u05F8\u05F9\x07\xF8\x02\x02\u05F9\u05FB\x03" +
		"\x02\x02\x02\u05FA\u05F4\x03\x02\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FB" +
		"\u05FD\x03\x02\x02\x02\u05FC\u05E6\x03\x02\x02\x02\u05FC\u05FD\x03\x02" +
		"\x02\x02\u05FD\u05FF\x03\x02\x02\x02\u05FE\u0600\x05\x06\x04\x02\u05FF" +
		"\u05FE\x03\x02\x02\x02\u0600\u0601\x03\x02\x02\x02\u0601\u05FF\x03\x02" +
		"\x02\x02\u0601\u0602\x03\x02\x02\x02\u0602\u0603\x03\x02\x02\x02\u0603" +
		"\u0604\t\x05\x02\x02\u0604\u0636\x03\x02\x02\x02\u0605\u0607\x07\u017F" +
		"\x02\x02\u0606\u0608\x05\x06\x04\x02\u0607\u0606\x03\x02\x02\x02\u0608" +
		"\u0609\x03\x02\x02\x02\u0609\u0607\x03\x02\x02\x02\u0609\u060A\x03\x02" +
		"\x02\x02\u060A\u060C\x03\x02\x02\x02\u060B\u0605\x03\x02\x02\x02\u060B" +
		"\u060C\x03\x02\x02\x02\u060C\u060D\x03\x02\x02\x02\u060D\u0636\x07%\x02" +
		"\x02\u060E\u0636\x07\u016F\x02\x02\u060F\u0636\x07/\x02\x02\u0610\u0612" +
		"\x07\u017F\x02\x02\u0611\u0613\x05\x06\x04\x02\u0612\u0611\x03\x02\x02" +
		"\x02\u0613\u0614\x03\x02\x02\x02\u0614\u0612\x03\x02\x02\x02\u0614\u0615" +
		"\x03\x02\x02\x02\u0615\u0617\x03\x02\x02\x02\u0616\u0610\x03\x02\x02\x02" +
		"\u0616\u0617\x03\x02\x02\x02\u0617\u0618\x03\x02\x02\x02\u0618\u0636\x07" +
		"-\x02\x02\u0619\u0636\x07\u0130\x02\x02\u061A\u061C\x07\u017F\x02\x02" +
		"\u061B\u061D\x05\x06\x04\x02\u061C\u061B\x03\x02\x02\x02\u061D\u061E\x03" +
		"\x02\x02\x02\u061E\u061C\x03\x02\x02\x02\u061E\u061F\x03\x02\x02\x02\u061F" +
		"\u0621\x03\x02\x02\x02\u0620\u061A\x03\x02\x02\x02\u0620\u0621\x03\x02" +
		"\x02\x02\u0621\u0622\x03\x02\x02\x02\u0622\u0636\x07Z\x02\x02\u0623\u0625" +
		"\x07\u017F\x02\x02\u0624\u0626\x05\x06\x04\x02\u0625\u0624\x03\x02\x02" +
		"\x02\u0626\u0627\x03\x02\x02\x02\u0627\u0625\x03\x02\x02\x02\u0627\u0628" +
		"\x03\x02\x02\x02\u0628\u062A\x03\x02\x02\x02\u0629\u0623\x03\x02\x02\x02" +
		"\u0629\u062A\x03\x02\x02\x02\u062A\u062B\x03\x02\x02\x02\u062B\u0633\x07" +
		"\xF2\x02\x02\u062C\u062E\x05\x06\x04\x02\u062D\u062C\x03\x02\x02\x02\u062E" +
		"\u062F\x03\x02\x02\x02\u062F\u062D\x03\x02\x02\x02\u062F\u0630\x03\x02" +
		"\x02\x02\u0630\u0631\x03\x02\x02\x02\u0631\u0632\x07\u0190\x02\x02\u0632" +
		"\u0634\x03\x02\x02\x02\u0633\u062D\x03\x02\x02\x02\u0633\u0634\x03\x02" +
		"\x02\x02\u0634\u0636\x03\x02\x02\x02\u0635\u05E1\x03\x02\x02\x02\u0635" +
		"\u05E2\x03\x02\x02\x02\u0635\u05E3\x03\x02\x02\x02\u0635\u05E4\x03\x02" +
		"\x02\x02\u0635\u060B\x03\x02\x02\x02\u0635\u060E\x03\x02\x02\x02\u0635" +
		"\u060F\x03\x02\x02\x02\u0635\u0616\x03\x02\x02\x02\u0635\u0619\x03\x02" +
		"\x02\x02\u0635\u0620\x03\x02\x02\x02\u0635\u0629\x03\x02\x02\x02\u0636" +
		"S\x03\x02\x02\x02\u0637\u0639\x07\x1E\x02\x02\u0638\u063A\x05\x06\x04" +
		"\x02\u0639\u0638\x03\x02\x02\x02\u063A\u063B\x03\x02\x02\x02\u063B\u0639" +
		"\x03\x02\x02\x02\u063B\u063C\x03\x02\x02\x02\u063C\u063E\x03\x02\x02\x02" +
		"\u063D\u0637\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u063F\x03" +
		"\x02\x02\x02\u063F\u0647\x07\xDD\x02\x02\u0640\u0642\x05\x06\x04\x02\u0641" +
		"\u0640\x03\x02\x02\x02\u0642\u0643\x03\x02\x02\x02\u0643\u0641\x03\x02" +
		"\x02\x02\u0643\u0644\x03\x02\x02\x02\u0644\u0645\x03\x02\x02\x02\u0645" +
		"\u0646\x07\xF4\x02\x02\u0646\u0648\x03\x02\x02\x02\u0647\u0641\x03\x02" +
		"\x02\x02\u0647\u0648\x03\x02\x02\x02\u0648\u064A\x03\x02\x02\x02\u0649" +
		"\u064B\x05\x06\x04\x02\u064A\u0649\x03\x02\x02\x02\u064B\u064C\x03\x02" +
		"\x02\x02\u064C\u064A\x03\x02\x02\x02\u064C\u064D\x03\x02\x02\x02\u064D" +
		"\u064E\x03\x02\x02\x02\u064E\u064F\x05\xACW\x02\u064FU\x03\x02\x02\x02" +
		"\u0650\u0652\x07\x1E\x02\x02\u0651\u0653\x05\x06\x04\x02\u0652\u0651\x03" +
		"\x02\x02\x02\u0653\u0654\x03\x02\x02\x02\u0654\u0652\x03\x02\x02\x02\u0654" +
		"\u0655\x03\x02\x02\x02\u0655\u0657\x03\x02\x02\x02\u0656\u0650\x03\x02" +
		"\x02\x02\u0656\u0657\x03\x02\x02\x02\u0657\u0658\x03\x02\x02\x02\u0658" +
		"\u0660\x07@\x02\x02\u0659\u065B\x05\x06\x04\x02\u065A\u0659\x03\x02\x02" +
		"\x02\u065B\u065C\x03\x02\x02\x02\u065C\u065A\x03\x02\x02\x02\u065C\u065D" +
		"\x03\x02\x02\x02\u065D\u065E\x03\x02\x02\x02\u065E\u065F\x07\xF4\x02\x02" +
		"\u065F\u0661\x03\x02\x02\x02\u0660\u065A\x03\x02\x02\x02\u0660\u0661\x03" +
		"\x02\x02\x02\u0661\u0663\x03\x02\x02\x02\u0662\u0664\x05\x06\x04\x02\u0663" +
		"\u0662\x03\x02\x02\x02\u0664\u0665\x03\x02\x02\x02\u0665\u0663\x03\x02" +
		"\x02\x02\u0665\u0666\x03\x02\x02\x02\u0666\u0667\x03\x02\x02\x02\u0667" +
		"\u0668\x05\xACW\x02\u0668W\x03\x02\x02\x02\u0669\u066A\x07\u01AF\x02\x02" +
		"\u066AY\x03\x02\x02\x02\u066B\u066D\x07m\x02\x02\u066C\u066E\x05\x06\x04" +
		"\x02\u066D\u066C\x03\x02\x02\x02\u066E\u066F\x03\x02\x02\x02\u066F\u066D" +
		"\x03\x02\x02\x02\u066F\u0670\x03\x02\x02\x02\u0670\u0671\x03\x02\x02\x02" +
		"\u0671\u0679\x05\u0218\u010D\x02\u0672\u0674\x05\x06\x04\x02\u0673\u0672" +
		"\x03\x02\x02\x02\u0674\u0675\x03\x02\x02\x02\u0675\u0673\x03\x02\x02\x02" +
		"\u0675\u0676\x03\x02\x02\x02\u0676\u0677\x03\x02\x02\x02\u0677\u0678\x07" +
		"\u011E\x02\x02\u0678\u067A\x03\x02\x02\x02\u0679\u0673\x03\x02\x02\x02" +
		"\u0679\u067A\x03\x02\x02\x02\u067A\u0682\x03\x02\x02\x02\u067B\u067D\x05" +
		"\x06\x04\x02\u067C\u067B\x03\x02\x02\x02\u067D\u067E\x03\x02\x02\x02\u067E" +
		"\u067C\x03\x02\x02\x02\u067E\u067F\x03\x02\x02\x02\u067F\u0680\x03\x02" +
		"\x02\x02\u0680\u0681\x05\x88E\x02\u0681\u0683\x03\x02\x02\x02\u0682\u067C" +
		"\x03\x02\x02\x02\u0682\u0683\x03\x02\x02\x02\u0683\u068B\x03\x02\x02\x02" +
		"\u0684\u0686\x05\x06\x04\x02\u0685\u0684\x03\x02\x02\x02\u0686\u0687\x03" +
		"\x02\x02\x02\u0687\u0685\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688" +
		"\u0689\x03\x02\x02\x02\u0689\u068A\x07\x81\x02\x02\u068A\u068C\x03\x02" +
		"\x02\x02\u068B\u0685\x03\x02\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C" +
		"[\x03\x02\x02\x02\u068D\u068E\x07W\x02\x02\u068E]\x03\x02\x02\x02\u068F" +
		"\u069F\x07K\x02\x02\u0690\u0692\x05\x06\x04\x02\u0691\u0690\x03\x02\x02" +
		"\x02\u0692\u0693\x03\x02\x02\x02\u0693\u0691\x03\x02\x02\x02\u0693\u0694" +
		"\x03\x02\x02\x02\u0694\u0695\x03\x02\x02\x02\u0695\u069D\x05\u0258\u012D" +
		"\x02\u0696\u0698\x05\x06\x04\x02\u0697\u0696\x03\x02\x02\x02\u0698\u0699" +
		"\x03\x02\x02\x02\u0699\u0697\x03\x02\x02\x02\u0699\u069A\x03\x02\x02\x02" +
		"\u069A\u069B\x03\x02\x02\x02\u069B\u069C\x07\u0188\x02\x02\u069C\u069E" +
		"\x03\x02\x02\x02\u069D\u0697\x03\x02\x02\x02\u069D\u069E\x03\x02\x02\x02" +
		"\u069E\u06A0\x03\x02\x02\x02\u069F\u0691\x03\x02\x02\x02\u06A0\u06A1\x03" +
		"\x02\x02\x02\u06A1\u069F\x03\x02\x02\x02\u06A1\u06A2\x03\x02\x02\x02\u06A2" +
		"\u06BB\x03\x02\x02\x02\u06A3\u06A5\x05\x06\x04\x02\u06A4\u06A3\x03\x02" +
		"\x02\x02\u06A5\u06A6\x03\x02\x02\x02\u06A6\u06A4\x03\x02\x02\x02\u06A6" +
		"\u06A7\x03\x02\x02\x02\u06A7\u06A8\x03\x02\x02\x02\u06A8\u06AA\x07\x97" +
		"\x02\x02\u06A9\u06AB\x05\x06\x04\x02\u06AA\u06A9\x03\x02\x02\x02\u06AB" +
		"\u06AC\x03\x02\x02\x02\u06AC\u06AA\x03\x02\x02\x02\u06AC\u06AD\x03\x02" +
		"\x02\x02\u06AD\u06BC\x03\x02\x02\x02\u06AE\u06B0\x05\x06\x04\x02\u06AF" +
		"\u06AE\x03\x02\x02\x02\u06B0\u06B3\x03\x02\x02\x02\u06B1\u06AF\x03\x02" +
		"\x02\x02\u06B1\u06B2\x03\x02\x02\x02\u06B2\u06B4\x03\x02\x02\x02\u06B3" +
		"\u06B1\x03\x02\x02\x02\u06B4\u06B8\x07\u019E\x02\x02\u06B5\u06B7\x05\x06" +
		"\x04\x02\u06B6\u06B5\x03\x02\x02\x02\u06B7\u06BA\x03\x02\x02\x02\u06B8" +
		"\u06B6\x03\x02\x02\x02\u06B8\u06B9\x03\x02\x02\x02\u06B9\u06BC\x03\x02" +
		"\x02\x02\u06BA\u06B8\x03\x02\x02\x02\u06BB\u06A4\x03\x02\x02\x02\u06BB" +
		"\u06B1\x03\x02\x02\x02\u06BC\u06BD\x03\x02\x02\x02\u06BD\u06C5\x05\u023E" +
		"\u0120\x02\u06BE\u06C0\x05\x06\x04\x02\u06BF\u06BE\x03\x02\x02\x02\u06C0" +
		"\u06C1\x03\x02\x02\x02\u06C1\u06BF\x03\x02\x02\x02\u06C1\u06C2\x03\x02" +
		"\x02\x02\u06C2\u06C3\x03\x02\x02\x02\u06C3\u06C4\x05\x86D\x02\u06C4\u06C6" +
		"\x03\x02\x02\x02\u06C5\u06BF\x03\x02\x02\x02\u06C5\u06C6\x03\x02\x02\x02" +
		"\u06C6\u06CE\x03\x02\x02\x02\u06C7\u06C9\x05\x06\x04\x02\u06C8\u06C7\x03" +
		"\x02\x02\x02\u06C9\u06CA\x03\x02\x02\x02\u06CA\u06C8\x03\x02\x02\x02\u06CA" +
		"\u06CB\x03\x02\x02\x02\u06CB\u06CC\x03\x02\x02\x02\u06CC\u06CD\x07\x80" +
		"\x02\x02\u06CD\u06CF\x03\x02\x02\x02\u06CE\u06C8\x03\x02\x02\x02\u06CE" +
		"\u06CF\x03\x02\x02\x02\u06CF_\x03\x02\x02\x02\u06D0\u06E0\x07<\x02\x02" +
		"\u06D1\u06D3\x05\x06\x04\x02\u06D2\u06D1\x03\x02\x02\x02\u06D3\u06D4\x03" +
		"\x02\x02\x02\u06D4\u06D2\x03\x02\x02\x02\u06D4\u06D5\x03\x02\x02\x02\u06D5" +
		"\u06D6\x03\x02\x02\x02\u06D6\u06DE\x05\u0218\u010D\x02\u06D7\u06D9\x05" +
		"\x06\x04\x02\u06D8\u06D7\x03\x02\x02\x02\u06D9\u06DA\x03\x02\x02\x02\u06DA" +
		"\u06D8\x03\x02\x02\x02\u06DA\u06DB\x03\x02\x02\x02\u06DB\u06DC\x03\x02" +
		"\x02\x02\u06DC\u06DD\x05b2\x02\u06DD\u06DF\x03\x02\x02\x02\u06DE\u06D8" +
		"\x03\x02\x02\x02\u06DE\u06DF\x03\x02\x02\x02\u06DF\u06E1\x03\x02\x02\x02" +
		"\u06E0\u06D2\x03\x02\x02\x02\u06E1\u06E2\x03\x02\x02\x02\u06E2\u06E0\x03" +
		"\x02\x02\x02\u06E2\u06E3\x03\x02\x02\x02\u06E3a\x03\x02\x02\x02\u06E4" +
		"\u0705\t\x06\x02\x02\u06E5\u06E7\x05\x06\x04\x02\u06E6\u06E5\x03\x02\x02" +
		"\x02\u06E7\u06E8\x03\x02\x02\x02\u06E8\u06E6\x03\x02\x02\x02\u06E8\u06E9" +
		"\x03\x02\x02\x02\u06E9\u0703\x03\x02\x02\x02\u06EA\u06EC\x07\xAF\x02\x02" +
		"\u06EB\u06ED\x05\x06\x04\x02\u06EC\u06EB\x03\x02\x02\x02\u06ED\u06EE\x03" +
		"\x02\x02\x02\u06EE\u06EC\x03\x02\x02\x02\u06EE\u06EF\x03\x02\x02\x02\u06EF" +
		"\u06F1\x03\x02\x02\x02\u06F0\u06EA\x03\x02\x02\x02\u06F0\u06F1\x03\x02" +
		"\x02\x02\u06F1\u06F2\x03\x02\x02\x02\u06F2\u0704\x07\u018E\x02\x02\u06F3" +
		"\u06F5\x07\u017F\x02\x02\u06F4\u06F6\x05\x06\x04\x02\u06F5\u06F4\x03\x02" +
		"\x02\x02\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06F5\x03\x02\x02\x02\u06F7" +
		"\u06F8\x03\x02\x02\x02\u06F8\u06FA\x03\x02\x02\x02\u06F9\u06F3\x03\x02" +
		"\x02\x02\u06F9\u06FA\x03\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02\u06FB" +
		"\u06FD\x07\xF2\x02\x02\u06FC\u06FE\x05\x06\x04\x02\u06FD\u06FC\x03\x02" +
		"\x02\x02\u06FE\u06FF\x03\x02\x02\x02\u06FF\u06FD\x03\x02\x02\x02\u06FF" +
		"\u0700\x03\x02\x02\x02\u0700\u0701\x03\x02\x02\x02\u0701\u0702\x07\u018F" +
		"\x02\x02\u0702\u0704\x03\x02\x02\x02\u0703\u06F0\x03\x02\x02\x02\u0703" +
		"\u06F9\x03\x02\x02\x02\u0704\u0706\x03\x02\x02\x02\u0705\u06E6\x03\x02" +
		"\x02\x02\u0705\u0706\x03\x02\x02\x02\u0706\u071B\x03\x02\x02\x02\u0707" +
		"\u0709\x07\u017F\x02\x02\u0708\u070A\x05\x06\x04\x02\u0709\u0708\x03\x02" +
		"\x02\x02\u070A\u070B\x03\x02\x02\x02\u070B\u0709\x03\x02\x02\x02\u070B" +
		"\u070C\x03\x02\x02\x02\u070C\u070E\x03\x02\x02\x02\u070D\u0707\x03\x02" +
		"\x02\x02\u070D\u070E\x03\x02\x02\x02\u070E\u0718\x03\x02\x02\x02\u070F" +
		"\u0711\x07\xF2\x02\x02\u0710\u0712\x05\x06\x04\x02\u0711\u0710\x03\x02" +
		"\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713\u0711\x03\x02\x02\x02\u0713" +
		"\u0714\x03\x02\x02\x02\u0714\u0715\x03\x02\x02\x02\u0715\u0716\x07\u018F" +
		"\x02\x02\u0716\u0719\x03\x02\x02\x02\u0717\u0719\x07\xE1\x02\x02\u0718" +
		"\u070F\x03\x02\x02\x02\u0718\u0717\x03\x02\x02\x02\u0719\u071B\x03\x02" +
		"\x02\x02\u071A\u06E4\x03\x02\x02\x02\u071A\u070D\x03\x02\x02\x02\u071B" +
		"c\x03\x02\x02\x02\u071C\u0724\x074\x02\x02\u071D\u071F\x05\x06\x04\x02" +
		"\u071E\u071D\x03\x02\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720\u071E\x03" +
		"\x02\x02\x02\u0720\u0721\x03\x02\x02\x02\u0721\u0722\x03\x02\x02\x02\u0722" +
		"\u0723\x05r:\x02\u0723\u0725\x03\x02\x02\x02\u0724\u071E\x03\x02\x02\x02" +
		"\u0725\u0726\x03\x02\x02\x02\u0726\u0724\x03\x02\x02\x02\u0726\u0727\x03" +
		"\x02\x02\x02\u0727e\x03\x02\x02\x02\u0728\u072A\x073\x02\x02\u0729\u072B" +
		"\x05\x06\x04\x02\u072A\u0729\x03\x02\x02\x02\u072B\u072C\x03\x02\x02\x02" +
		"\u072C\u072A\x03\x02\x02\x02\u072C\u072D\x03\x02\x02\x02\u072D\u072E\x03" +
		"\x02\x02\x02\u072E\u0736\x05r:\x02\u072F\u0731\x05\x06\x04\x02\u0730\u072F" +
		"\x03\x02\x02\x02\u0731\u0732\x03\x02\x02\x02\u0732\u0730\x03\x02\x02\x02" +
		"\u0732\u0733\x03\x02\x02\x02\u0733\u0734\x03\x02\x02\x02\u0734\u0735\x05" +
		"j6\x02\u0735\u0737\x03\x02\x02\x02\u0736\u0730\x03\x02\x02\x02\u0736\u0737" +
		"\x03\x02\x02\x02\u0737\u073F\x03\x02\x02\x02\u0738\u073A\x05\x06\x04\x02" +
		"\u0739\u0738\x03\x02\x02\x02\u073A\u073B\x03\x02\x02\x02\u073B\u0739\x03" +
		"\x02\x02\x02\u073B\u073C\x03\x02\x02\x02\u073C\u073D\x03\x02\x02\x02\u073D" +
		"\u073E\x05h5\x02\u073E\u0740\x03\x02\x02\x02\u073F\u0739\x03\x02\x02\x02" +
		"\u073F\u0740\x03\x02\x02\x02\u0740\u0748\x03\x02\x02\x02\u0741\u0743\x05" +
		"\x06\x04\x02\u0742\u0741\x03\x02\x02\x02\u0743\u0744\x03\x02\x02\x02\u0744" +
		"\u0742\x03\x02\x02\x02\u0744\u0745\x03\x02\x02\x02\u0745\u0746\x03\x02" +
		"\x02\x02\u0746\u0747\x05\x82B\x02\u0747\u0749\x03\x02\x02\x02\u0748\u0742" +
		"\x03\x02\x02\x02\u0748\u0749\x03\x02\x02\x02\u0749\u0751\x03\x02\x02\x02" +
		"\u074A\u074C\x05\x06\x04\x02\u074B\u074A\x03\x02\x02\x02\u074C\u074D\x03" +
		"\x02\x02\x02\u074D\u074B\x03\x02\x02\x02\u074D\u074E\x03\x02\x02\x02\u074E" +
		"\u074F\x03\x02\x02\x02\u074F\u0750\x07\x7F\x02\x02\u0750\u0752\x03\x02" +
		"\x02\x02\u0751\u074B\x03\x02\x02\x02\u0751\u0752\x03\x02\x02\x02\u0752" +
		"g\x03\x02\x02\x02\u0753\u0755\x07\xB5\x02\x02\u0754\u0756\x05\x06\x04" +
		"\x02\u0755\u0754\x03\x02\x02\x02\u0756\u0757\x03\x02\x02\x02\u0757\u0755" +
		"\x03\x02\x02\x02\u0757\u0758\x03\x02\x02\x02\u0758\u0759\x03\x02\x02\x02" +
		"\u0759\u075A\x05\u0258\u012D\x02\u075Ai\x03\x02\x02\x02\u075B\u0763\x07" +
		"\u0178\x02\x02\u075C\u075E\x05\x06\x04\x02\u075D\u075C\x03\x02\x02\x02" +
		"\u075E\u075F\x03\x02\x02\x02\u075F\u075D\x03\x02\x02\x02\u075F\u0760\x03" +
		"\x02\x02\x02\u0760\u0761\x03\x02\x02\x02\u0761\u0762\x05l7\x02\u0762\u0764" +
		"\x03\x02\x02\x02\u0763\u075D\x03\x02\x02\x02\u0764\u0765\x03\x02\x02\x02" +
		"\u0765\u0763\x03\x02\x02\x02\u0765\u0766\x03\x02\x02\x02\u0766k\x03\x02" +
		"\x02\x02\u0767\u077E\x07\xFA\x02\x02\u0768\u076A\x05n8\x02\u0769\u076B" +
		"\x05\x06\x04\x02\u076A\u0769\x03\x02\x02\x02\u076B\u076C\x03\x02\x02\x02" +
		"\u076C\u076A\x03\x02\x02\x02\u076C\u076D\x03\x02\x02\x02\u076D\u076F\x03" +
		"\x02\x02\x02\u076E\u0768\x03\x02\x02\x02\u076E\u076F\x03\x02\x02\x02\u076F" +
		"\u0770\x03\x02\x02\x02\u0770\u077A\x05p9\x02\u0771\u0773\x05\x06\x04\x02" +
		"\u0772\u0771\x03\x02\x02\x02\u0773\u0774\x03\x02\x02\x02\u0774\u0772\x03" +
		"\x02\x02\x02\u0774\u0775\x03\x02\x02\x02\u0775\u0776\x03\x02\x02\x02\u0776" +
		"\u0777\x05p9\x02\u0777\u0779\x03\x02\x02\x02\u0778\u0772\x03\x02";
	private static readonly _serializedATNSegment6: string =
		"\x02\x02\u0779\u077C\x03\x02\x02\x02\u077A\u0778\x03\x02\x02\x02\u077A" +
		"\u077B\x03\x02\x02\x02\u077B\u077E\x03\x02\x02\x02\u077C\u077A\x03\x02" +
		"\x02\x02\u077D\u0767\x03\x02\x02\x02\u077D\u076E\x03\x02\x02\x02\u077E" +
		"m\x03\x02\x02\x02\u077F\u0781\x071\x02\x02\u0780\u0782\x05\x06\x04\x02" +
		"\u0781\u0780\x03\x02\x02\x02\u0782\u0783\x03\x02\x02\x02\u0783\u0781\x03" +
		"\x02\x02\x02\u0783\u0784\x03\x02\x02\x02\u0784\u0786\x03\x02\x02\x02\u0785" +
		"\u077F\x03\x02\x02\x02\u0785\u0786\x03\x02\x02\x02\u0786\u0787\x03\x02" +
		"\x02\x02\u0787\u07A4\x07\u0122\x02\x02\u0788\u078A\x071\x02\x02\u0789" +
		"\u078B\x05\x06\x04\x02\u078A\u0789\x03\x02\x02\x02\u078B\u078C\x03\x02" +
		"\x02\x02\u078C\u078A\x03\x02\x02\x02\u078C\u078D\x03\x02\x02\x02\u078D" +
		"\u078F\x03\x02\x02\x02\u078E\u0788\x03\x02\x02\x02\u078E\u078F\x03\x02" +
		"\x02\x02\u078F\u0790\x03\x02\x02\x02\u0790\u07A4\x07\u018C\x02\x02\u0791" +
		"\u0793\x071\x02\x02\u0792\u0794\x05\x06\x04\x02\u0793\u0792\x03\x02\x02" +
		"\x02\u0794\u0795\x03\x02\x02\x02\u0795\u0793\x03\x02\x02\x02\u0795\u0796" +
		"\x03\x02\x02\x02\u0796\u0798\x03\x02\x02\x02\u0797\u0791\x03\x02\x02\x02" +
		"\u0797\u0798\x03\x02\x02\x02\u0798\u0799\x03\x02\x02\x02\u0799\u07A4\x07" +
		"\u018D\x02\x02\u079A\u079C\x071\x02\x02\u079B\u079D\x05\x06\x04\x02\u079C" +
		"\u079B\x03\x02\x02\x02\u079D\u079E\x03\x02\x02\x02\u079E\u079C\x03\x02" +
		"\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F\u07A1\x03\x02\x02\x02\u07A0" +
		"\u079A\x03\x02\x02\x02\u07A0\u07A1\x03\x02\x02\x02\u07A1\u07A2\x03\x02" +
		"\x02\x02\u07A2\u07A4\x07\u0179\x02\x02\u07A3\u0785\x03\x02\x02\x02\u07A3" +
		"\u078E\x03\x02\x02\x02\u07A3\u0797\x03\x02\x02\x02\u07A3\u07A0\x03\x02" +
		"\x02\x02\u07A4o\x03\x02\x02\x02\u07A5\u07A9\x05\u01AE\xD8\x02\u07A6\u07A9" +
		"\x07\u01AD\x02\x02\u07A7\u07A9\x07\u01AC\x02\x02\u07A8\u07A5\x03\x02\x02" +
		"\x02\u07A8\u07A6\x03\x02\x02\x02\u07A8\u07A7\x03\x02\x02\x02\u07A9q\x03" +
		"\x02\x02\x02\u07AA\u07AB\t\x07\x02\x02\u07ABs\x03\x02\x02\x02\u07AC\u07CE" +
		"\x07\x11\x02\x02\u07AD\u07AF\x05\x06\x04\x02\u07AE\u07AD\x03\x02\x02\x02" +
		"\u07AF\u07B0\x03\x02\x02\x02\u07B0\u07AE\x03\x02\x02\x02\u07B0\u07B1\x03" +
		"\x02\x02\x02\u07B1\u07B2\x03\x02\x02\x02\u07B2\u07B4\x05x=\x02\u07B3\u07B5" +
		"\x05\x06\x04\x02\u07B4\u07B3\x03\x02\x02\x02\u07B5\u07B6\x03\x02\x02\x02" +
		"\u07B6\u07B4\x03\x02\x02\x02\u07B6\u07B7\x03\x02\x02\x02\u07B7\u07B8\x03" +
		"\x02\x02\x02\u07B8\u07BA\x07\u0169\x02\x02\u07B9\u07BB\x05\x06\x04\x02" +
		"\u07BA\u07B9\x03\x02\x02\x02\u07BB\u07BC\x03\x02\x02\x02\u07BC\u07BA\x03" +
		"\x02\x02\x02\u07BC\u07BD\x03\x02\x02\x02\u07BD\u07CA\x03\x02\x02\x02\u07BE" +
		"\u07C0\x07\u018B\x02\x02\u07BF\u07C1\x05\x06\x04\x02\u07C0\u07BF\x03\x02" +
		"\x02\x02\u07C1\u07C2\x03\x02\x02\x02\u07C2\u07C0\x03\x02\x02\x02\u07C2" +
		"\u07C3\x03\x02\x02\x02\u07C3\u07C4\x03\x02\x02\x02\u07C4\u07C6\x07\u0169" +
		"\x02\x02\u07C5\u07C7\x05\x06\x04\x02\u07C6\u07C5\x03\x02\x02\x02\u07C7" +
		"\u07C8\x03\x02\x02\x02\u07C8\u07C6\x03\x02\x02\x02\u07C8\u07C9\x03\x02" +
		"\x02\x02\u07C9\u07CB\x03\x02\x02\x02\u07CA\u07BE\x03\x02\x02\x02\u07CA" +
		"\u07CB\x03\x02\x02\x02\u07CB\u07CC\x03\x02\x02\x02\u07CC\u07CD\x05v<\x02" +
		"\u07CD\u07CF\x03\x02\x02\x02\u07CE\u07AE\x03\x02\x02\x02\u07CF\u07D0\x03" +
		"\x02\x02\x02\u07D0\u07CE\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1" +
		"u\x03\x02\x02\x02\u07D2\u07D3\x07\u01AF\x02\x02\u07D3w\x03\x02\x02\x02" +
		"\u07D4\u07D5\x07\u01AF\x02\x02\u07D5y\x03\x02\x02\x02\u07D6\u07DE\x07" +
		"\b\x02\x02\u07D7\u07D9\x05\x06\x04\x02\u07D8\u07D7\x03\x02\x02\x02\u07D9" +
		"\u07DA\x03\x02\x02\x02\u07DA\u07D8\x03\x02\x02\x02\u07DA\u07DB\x03\x02" +
		"\x02\x02\u07DB\u07DC\x03\x02\x02\x02\u07DC\u07DD\x05~@\x02\u07DD\u07DF" +
		"\x03\x02\x02\x02\u07DE\u07D8\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02" +
		"\u07E0\u07DE\x03\x02\x02\x02\u07E0\u07E1\x03\x02\x02\x02\u07E1\u07E3\x03" +
		"\x02\x02\x02\u07E2\u07E4\x05\x06\x04\x02\u07E3\u07E2\x03\x02\x02\x02\u07E4" +
		"\u07E5\x03\x02\x02\x02\u07E5\u07E3\x03\x02\x02\x02\u07E5\u07E6\x03\x02" +
		"\x02\x02\u07E6\u07E7\x03\x02\x02\x02\u07E7\u07F7\x07\u0169\x02\x02\u07E8" +
		"\u07EA\x05\x06\x04\x02\u07E9\u07E8\x03\x02\x02\x02\u07EA\u07EB\x03\x02" +
		"\x02\x02\u07EB\u07E9\x03\x02\x02\x02\u07EB\u07EC\x03\x02\x02\x02\u07EC" +
		"\u07ED\x03\x02\x02\x02\u07ED\u07F5\x05\u0258\u012D\x02\u07EE\u07F0\x05" +
		"\x06\x04\x02\u07EF\u07EE\x03\x02\x02\x02\u07F0\u07F1\x03\x02\x02\x02\u07F1" +
		"\u07EF\x03\x02\x02\x02\u07F1\u07F2\x03\x02\x02\x02\u07F2\u07F3\x03\x02" +
		"\x02\x02\u07F3\u07F4\x07\u0188\x02\x02\u07F4\u07F6\x03\x02\x02\x02\u07F5" +
		"\u07EF\x03\x02\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u07F8\x03\x02" +
		"\x02\x02\u07F7\u07E9\x03\x02\x02\x02\u07F8\u07F9\x03\x02\x02\x02\u07F9" +
		"\u07F7\x03\x02\x02\x02\u07F9\u07FA\x03\x02\x02\x02\u07FA\u0858\x03\x02" +
		"\x02\x02\u07FB\u0805\x07\b\x02\x02\u07FC\u07FE\x05\x06\x04\x02\u07FD\u07FC" +
		"\x03\x02\x02\x02\u07FE\u07FF\x03\x02\x02\x02\u07FF\u07FD\x03\x02\x02\x02" +
		"\u07FF\u0800\x03\x02\x02\x02\u0800\u0801\x03\x02\x02\x02\u0801\u0802\x05" +
		"~@\x02\u0802\u0804\x03\x02\x02\x02\u0803\u07FD\x03\x02\x02\x02\u0804\u0807" +
		"\x03\x02\x02\x02\u0805\u0803\x03\x02\x02\x02\u0805\u0806\x03\x02\x02\x02" +
		"\u0806\u080F\x03\x02\x02\x02\u0807\u0805\x03\x02\x02\x02\u0808\u080A\x05" +
		"\x06\x04\x02\u0809\u0808\x03\x02\x02\x02\u080A\u080B\x03\x02\x02\x02\u080B" +
		"\u0809\x03\x02\x02\x02\u080B\u080C\x03\x02\x02\x02\u080C\u080D\x03\x02" +
		"\x02\x02\u080D\u080E\x07\u0169\x02\x02\u080E\u0810\x03\x02\x02\x02\u080F" +
		"\u0809\x03\x02\x02\x02\u080F\u0810\x03\x02\x02\x02\u0810\u0818\x03\x02" +
		"\x02\x02\u0811\u0813\x05\x06\x04\x02\u0812\u0811\x03\x02\x02\x02\u0813" +
		"\u0814\x03\x02\x02\x02\u0814\u0812\x03\x02\x02\x02\u0814\u0815\x03\x02" +
		"\x02\x02\u0815\u0816\x03\x02\x02\x02\u0816\u0817\x05~@\x02\u0817\u0819" +
		"\x03\x02\x02\x02\u0818\u0812\x03\x02\x02\x02\u0819\u081A\x03\x02\x02\x02" +
		"\u081A\u0818\x03\x02\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u081D\x03" +
		"\x02\x02\x02\u081C\u081E\x05\x06\x04\x02\u081D\u081C\x03\x02\x02\x02\u081E" +
		"\u081F\x03\x02\x02\x02\u081F\u081D\x03\x02\x02\x02\u081F\u0820\x03\x02" +
		"\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u0831\x07\xB5\x02\x02\u0822" +
		"\u0824\x05\x06\x04\x02\u0823\u0822\x03\x02\x02\x02\u0824\u0825\x03\x02" +
		"\x02\x02\u0825\u0823\x03\x02\x02\x02\u0825\u0826\x03\x02\x02\x02\u0826" +
		"\u0827\x03\x02\x02\x02\u0827\u082F\x05\u0258\u012D\x02\u0828\u082A\x05" +
		"\x06\x04\x02\u0829\u0828\x03\x02\x02\x02\u082A\u082B\x03\x02\x02\x02\u082B" +
		"\u0829\x03\x02\x02\x02\u082B\u082C\x03\x02\x02\x02\u082C\u082D\x03\x02" +
		"\x02\x02\u082D\u082E\x07\u0188\x02\x02\u082E\u0830\x03\x02\x02\x02\u082F" +
		"\u0829\x03\x02\x02\x02\u082F\u0830\x03\x02\x02\x02\u0830\u0832\x03\x02" +
		"\x02\x02\u0831\u0823\x03\x02\x02\x02\u0832\u0833\x03\x02\x02\x02\u0833" +
		"\u0831\x03\x02\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834\u0858\x03\x02" +
		"\x02\x02\u0835\u0837\x07\b\x02\x02\u0836\u0838\x05\x06\x04\x02\u0837\u0836" +
		"\x03\x02\x02\x02\u0838\u0839\x03\x02\x02\x02\u0839\u0837\x03\x02\x02\x02" +
		"\u0839\u083A\x03\x02\x02\x02\u083A\u083B\x03\x02\x02\x02\u083B\u083D\t" +
		"\b\x02\x02\u083C\u083E\x05\x06\x04\x02\u083D\u083C\x03\x02\x02\x02\u083E" +
		"\u083F\x03\x02\x02\x02\u083F\u083D\x03\x02\x02\x02\u083F\u0840\x03\x02" +
		"\x02\x02\u0840\u0841\x03\x02\x02\x02\u0841\u0843\x05|?\x02\u0842\u0844" +
		"\x05\x06\x04\x02\u0843\u0842\x03\x02\x02\x02\u0844\u0845\x03\x02\x02\x02" +
		"\u0845\u0843\x03\x02\x02\x02\u0845\u0846\x03\x02\x02\x02\u0846\u0847\x03" +
		"\x02\x02\x02\u0847\u0849\x07\u0169\x02\x02\u0848\u084A\x05\x06\x04\x02" +
		"\u0849\u0848\x03\x02\x02\x02\u084A\u084B\x03\x02\x02\x02\u084B\u0849\x03" +
		"\x02\x02\x02\u084B\u084C\x03\x02\x02\x02\u084C\u084D\x03\x02\x02\x02\u084D" +
		"\u0855\x05|?\x02\u084E\u0850\x05\x06\x04\x02\u084F\u084E\x03\x02\x02\x02" +
		"\u0850\u0851\x03\x02\x02\x02\u0851\u084F\x03\x02\x02\x02\u0851\u0852\x03" +
		"\x02\x02\x02\u0852\u0853\x03\x02\x02\x02\u0853\u0854\x07\u0188\x02\x02" +
		"\u0854\u0856\x03\x02\x02\x02\u0855\u084F\x03\x02\x02\x02\u0855\u0856\x03" +
		"\x02\x02\x02\u0856\u0858\x03\x02\x02\x02\u0857\u07D6\x03\x02\x02\x02\u0857" +
		"\u07FB\x03\x02\x02\x02\u0857\u0835\x03\x02\x02\x02\u0858\u0860\x03\x02" +
		"\x02\x02\u0859\u085B\x05\x06\x04\x02\u085A\u0859\x03\x02\x02\x02\u085B" +
		"\u085C\x03\x02\x02\x02\u085C\u085A\x03\x02\x02\x02\u085C\u085D\x03\x02" +
		"\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E\u085F\x05\x86D\x02\u085F\u0861" +
		"\x03\x02\x02\x02\u0860\u085A\x03\x02\x02\x02\u0860\u0861\x03\x02\x02\x02" +
		"\u0861\u0869\x03\x02\x02\x02\u0862\u0864\x05\x06\x04\x02\u0863\u0862\x03" +
		"\x02\x02\x02\u0864\u0865\x03\x02\x02\x02\u0865\u0863\x03\x02\x02\x02\u0865" +
		"\u0866\x03\x02\x02\x02\u0866\u0867\x03\x02\x02\x02\u0867\u0868\x07~\x02" +
		"\x02\u0868\u086A\x03\x02\x02\x02\u0869\u0863\x03\x02\x02\x02\u0869\u086A" +
		"\x03\x02\x02\x02\u086A{\x03\x02\x02\x02\u086B\u086C\x05\u01AE\xD8\x02" +
		"\u086C}\x03\x02\x02\x02\u086D\u0870\x07\u01AD\x02\x02\u086E\u0870\x05" +
		"\u025A\u012E\x02\u086F\u086D\x03\x02\x02\x02\u086F\u086E\x03\x02\x02\x02" +
		"\u0870\x7F\x03\x02\x02\x02\u0871\u0878\x05\x8EH\x02\u0872\u0878\x05\x90" +
		"I\x02\u0873\u0878\x05\x92J\x02\u0874\u0878\x05\x94K\x02\u0875\u0878\x05" +
		"\x96L\x02\u0876\u0878\x05\x8AF\x02\u0877\u0871\x03\x02\x02\x02\u0877\u0872" +
		"\x03\x02\x02\x02\u0877\u0873\x03\x02\x02\x02\u0877\u0874\x03\x02\x02\x02" +
		"\u0877\u0875\x03\x02\x02\x02\u0877\u0876\x03\x02\x02\x02\u0878\x81\x03" +
		"\x02\x02\x02\u0879\u0887\x05\xB6\\\x02\u087A\u087C\x05\x06\x04\x02\u087B" +
		"\u087A\x03\x02\x02\x02\u087C\u087D\x03\x02\x02\x02\u087D\u087B\x03\x02" +
		"\x02\x02\u087D\u087E\x03\x02\x02\x02\u087E\u087F\x03\x02\x02\x02\u087F" +
		"\u0881\x07\xF3\x02\x02\u0880\u0882\x05\x06\x04\x02\u0881\u0880\x03\x02" +
		"\x02\x02\u0882\u0883\x03\x02\x02\x02\u0883\u0881\x03\x02\x02\x02\u0883" +
		"\u0884\x03\x02\x02\x02\u0884\u0885\x03\x02\x02\x02\u0885\u0886\x05\xB6" +
		"\\\x02\u0886\u0888\x03\x02\x02\x02\u0887\u087B\x03\x02\x02\x02\u0887\u0888" +
		"\x03\x02\x02\x02\u0888\u089A\x03\x02\x02\x02\u0889\u088B\x07\xF3\x02\x02" +
		"\u088A\u088C\x05\x06\x04\x02\u088B\u088A\x03\x02\x02\x02\u088C\u088D\x03" +
		"\x02\x02\x02\u088D\u088B\x03\x02\x02\x02\u088D\u088E\x03\x02\x02\x02\u088E" +
		"\u088F\x03\x02\x02\x02\u088F\u0897\x05\xB6\\\x02\u0890\u0892\x05\x06\x04" +
		"\x02\u0891\u0890\x03\x02\x02\x02\u0892\u0893\x03\x02\x02\x02\u0893\u0891" +
		"\x03\x02\x02\x02\u0893\u0894\x03\x02\x02\x02\u0894\u0895\x03\x02\x02\x02" +
		"\u0895\u0896\x05\xB6\\\x02\u0896\u0898\x03\x02\x02\x02\u0897\u0891\x03" +
		"\x02\x02\x02\u0897\u0898\x03\x02\x02\x02\u0898\u089A\x03\x02\x02\x02\u0899" +
		"\u0879\x03\x02\x02\x02\u0899\u0889\x03\x02\x02\x02\u089A\x83\x03\x02\x02" +
		"\x02\u089B\u08A9\x05\xB4[\x02\u089C\u089E\x05\x06\x04\x02\u089D\u089C" +
		"\x03\x02\x02\x02\u089E\u089F\x03\x02\x02\x02\u089F\u089D\x03\x02\x02\x02" +
		"\u089F\u08A0\x03\x02\x02\x02\u08A0\u08A1\x03\x02\x02\x02\u08A1\u08A3\x07" +
		"\xF3\x02\x02\u08A2\u08A4\x05\x06\x04\x02\u08A3\u08A2\x03\x02\x02\x02\u08A4" +
		"\u08A5\x03\x02\x02\x02\u08A5\u08A3\x03\x02\x02\x02\u08A5\u08A6\x03\x02" +
		"\x02\x02\u08A6\u08A7\x03\x02\x02\x02\u08A7\u08A8\x05\xB4[\x02\u08A8\u08AA" +
		"\x03\x02\x02\x02\u08A9\u089D\x03\x02\x02\x02\u08A9\u08AA\x03\x02\x02\x02" +
		"\u08AA\u08BC\x03\x02\x02\x02\u08AB\u08AD\x07\xF3\x02\x02\u08AC\u08AE\x05" +
		"\x06\x04\x02\u08AD\u08AC\x03\x02\x02\x02\u08AE\u08AF\x03\x02\x02\x02\u08AF" +
		"\u08AD\x03\x02\x02\x02\u08AF\u08B0\x03\x02\x02\x02\u08B0\u08B1\x03\x02" +
		"\x02\x02\u08B1\u08B9\x05\xB4[\x02\u08B2\u08B4\x05\x06\x04\x02\u08B3\u08B2" +
		"\x03\x02\x02\x02\u08B4\u08B5\x03\x02\x02\x02\u08B5\u08B3\x03\x02\x02\x02" +
		"\u08B5\u08B6\x03\x02\x02\x02\u08B6\u08B7\x03\x02\x02\x02\u08B7\u08B8\x05" +
		"\xB4[\x02\u08B8\u08BA\x03\x02\x02\x02\u08B9\u08B3\x03\x02\x02\x02\u08B9" +
		"\u08BA\x03\x02\x02\x02\u08BA\u08BC\x03\x02\x02\x02\u08BB\u089B\x03\x02" +
		"\x02\x02\u08BB\u08AB\x03\x02\x02\x02\u08BC\x85\x03\x02\x02\x02\u08BD\u08CB" +
		"\x05\xB8]\x02\u08BE\u08C0\x05\x06\x04\x02\u08BF\u08BE\x03\x02\x02\x02" +
		"\u08C0\u08C1\x03\x02\x02\x02\u08C1\u08BF\x03\x02\x02\x02\u08C1\u08C2\x03" +
		"\x02\x02\x02\u08C2\u08C3\x03\x02\x02\x02\u08C3\u08C5\x07\xF3\x02\x02\u08C4" +
		"\u08C6\x05\x06\x04\x02\u08C5\u08C4\x03\x02\x02\x02\u08C6\u08C7\x03\x02" +
		"\x02\x02\u08C7\u08C5\x03\x02\x02\x02\u08C7\u08C8\x03\x02\x02\x02\u08C8" +
		"\u08C9\x03\x02\x02\x02\u08C9\u08CA\x05\xB8]\x02\u08CA\u08CC\x03\x02\x02" +
		"\x02\u08CB\u08BF\x03\x02\x02\x02\u08CB\u08CC\x03\x02\x02\x02\u08CC\u08DE" +
		"\x03\x02\x02\x02\u08CD\u08CF\x07\xF3\x02\x02\u08CE\u08D0\x05\x06\x04\x02" +
		"\u08CF\u08CE\x03\x02\x02\x02\u08D0\u08D1\x03\x02\x02\x02\u08D1\u08CF\x03" +
		"\x02\x02\x02\u08D1\u08D2\x03\x02\x02\x02\u08D2\u08D3\x03\x02\x02\x02\u08D3" +
		"\u08DB\x05\xB8]\x02\u08D4\u08D6\x05\x06\x04\x02\u08D5\u08D4\x03\x02\x02" +
		"\x02\u08D6\u08D7\x03\x02\x02\x02\u08D7\u08D5\x03\x02\x02\x02\u08D7\u08D8" +
		"\x03\x02\x02\x02\u08D8\u08D9\x03\x02\x02\x02\u08D9\u08DA\x05\xB8]\x02" +
		"\u08DA\u08DC\x03\x02\x02\x02\u08DB\u08D5\x03\x02\x02\x02\u08DB\u08DC\x03" +
		"\x02\x02\x02\u08DC\u08DE\x03\x02\x02\x02\u08DD\u08BD\x03\x02\x02\x02\u08DD" +
		"\u08CD\x03\x02\x02\x02\u08DE\x87\x03\x02\x02\x02\u08DF\u08ED\x05\xBA^" +
		"\x02\u08E0\u08E2\x05\x06\x04\x02\u08E1\u08E0\x03\x02\x02\x02\u08E2\u08E3" +
		"\x03\x02\x02\x02\u08E3\u08E1\x03\x02\x02\x02\u08E3\u08E4\x03\x02\x02\x02" +
		"\u08E4\u08E5\x03\x02\x02\x02\u08E5\u08E7\x07\xF3\x02\x02\u08E6\u08E8\x05" +
		"\x06\x04\x02\u08E7\u08E6\x03\x02\x02\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9" +
		"\u08E7\x03\x02\x02\x02\u08E9\u08EA\x03\x02\x02\x02\u08EA\u08EB\x03\x02" +
		"\x02\x02\u08EB\u08EC\x05\xBA^\x02\u08EC\u08EE\x03\x02\x02\x02\u08ED\u08E1" +
		"\x03\x02\x02\x02\u08ED\u08EE\x03\x02\x02\x02\u08EE\u0900\x03\x02\x02\x02" +
		"\u08EF\u08F1\x07\xF3\x02\x02\u08F0\u08F2\x05\x06\x04\x02\u08F1\u08F0\x03" +
		"\x02\x02\x02\u08F2\u08F3\x03\x02\x02\x02\u08F3\u08F1\x03\x02\x02\x02\u08F3" +
		"\u08F4\x03\x02\x02\x02\u08F4\u08F5\x03\x02\x02\x02\u08F5\u08FD\x05\xBA" +
		"^\x02\u08F6\u08F8\x05\x06\x04\x02\u08F7\u08F6\x03\x02\x02\x02\u08F8\u08F9" +
		"\x03\x02\x02\x02\u08F9\u08F7\x03\x02\x02\x02\u08F9\u08FA\x03\x02\x02\x02" +
		"\u08FA\u08FB\x03\x02\x02\x02\u08FB\u08FC\x05\xBA^\x02\u08FC\u08FE\x03" +
		"\x02\x02\x02\u08FD\u08F7\x03\x02\x02\x02\u08FD\u08FE\x03\x02\x02\x02\u08FE" +
		"\u0900\x03\x02\x02\x02\u08FF\u08DF\x03\x02\x02\x02\u08FF\u08EF\x03\x02" +
		"\x02\x02\u0900\x89\x03\x02\x02\x02\u0901\u0903\x07\x06\x02\x02\u0902\u0904" +
		"\x05\x06\x04\x02\u0903\u0902\x03\x02\x02\x02\u0904\u0905\x03\x02\x02\x02" +
		"\u0905\u0903\x03\x02\x02\x02\u0905\u0906\x03\x02\x02\x02\u0906\u0907\x03" +
		"\x02\x02\x02\u0907\u0909\x05\xB0Y\x02\u0908\u090A\x05\x06\x04\x02\u0909" +
		"\u0908\x03\x02\x02\x02\u090A\u090B\x03\x02\x02\x02\u090B\u0909\x03\x02" +
		"\x02\x02\u090B\u090C\x03\x02\x02\x02\u090C\u0913\x03\x02\x02\x02\u090D" +
		"\u090F\x07\xB1\x02\x02\u090E\u0910\x05\x06\x04\x02\u090F\u090E\x03\x02" +
		"\x02\x02\u0910\u0911\x03\x02\x02\x02\u0911\u090F\x03\x02\x02\x02\u0911" +
		"\u0912\x03\x02\x02\x02\u0912\u0914\x03\x02\x02\x02\u0913\u090D\x03\x02" +
		"\x02\x02\u0913\u0914\x03\x02\x02\x02\u0914\u0915\x03\x02\x02\x02\u0915" +
		"\u091D\x05\x8CG\x02\u0916\u0918\x05\x06\x04\x02\u0917\u0916\x03\x02\x02" +
		"\x02\u0918\u0919\x03\x02\x02\x02\u0919\u0917\x03\x02\x02\x02\u0919\u091A" +
		"\x03\x02\x02\x02\u091A\u091B\x03\x02\x02\x02\u091B\u091C\x05\x82B\x02" +
		"\u091C\u091E\x03\x02\x02\x02\u091D\u0917\x03\x02\x02\x02\u091D\u091E\x03" +
		"\x02\x02\x02\u091E\u0926\x03\x02\x02\x02\u091F\u0921\x05\x06\x04\x02\u0920" +
		"\u091F\x03\x02\x02\x02\u0921\u0922\x03\x02\x02\x02\u0922\u0920\x03\x02" +
		"\x02\x02\u0922\u0923\x03\x02\x02\x02\u0923\u0924\x03\x02\x02\x02\u0924" +
		"\u0925\x07}\x02\x02\u0925\u0927\x03\x02\x02\x02\u0926\u0920\x03\x02\x02" +
		"\x02\u0926\u0927\x03\x02\x02\x02\u0927\x8B\x03\x02\x02\x02\u0928\u0929" +
		"\x07\u01AF\x02\x02\u0929\x8D\x03\x02\x02\x02\u092A\u092C\x07\x06\x02\x02" +
		"\u092B\u092D\x05\x06\x04\x02\u092C\u092B\x03\x02\x02\x02\u092D\u092E\x03" +
		"\x02\x02\x02\u092E\u092C\x03\x02\x02\x02\u092E\u092F\x03\x02\x02\x02\u092F" +
		"\u0930\x03\x02\x02\x02\u0930\u093E\x05\xB0Y\x02\u0931\u0933\x05\x06\x04" +
		"\x02\u0932\u0931\x03\x02\x02\x02\u0933\u0934\x03\x02\x02\x02\u0934\u0932" +
		"\x03\x02\x02\x02\u0934\u0935\x03\x02\x02\x02\u0935\u0936\x03\x02\x02\x02" +
		"\u0936\u0938\x07\xB1\x02\x02\u0937\u0939\x05\x06\x04\x02\u0938\u0937\x03" +
		"\x02\x02\x02\u0939\u093A\x03\x02\x02\x02\u093A\u0938\x03\x02\x02\x02\u093A" +
		"\u093B\x03\x02\x02\x02\u093B\u093C\x03\x02\x02\x02\u093C\u093D\x05\xB2" +
		"Z\x02\u093D\u093F\x03\x02\x02\x02\u093E\u0932\x03\x02\x02\x02\u093E\u093F" +
		"\x03\x02\x02\x02\u093F\u094D\x03\x02\x02\x02\u0940\u0942\x05\x06\x04\x02" +
		"\u0941\u0940\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943\u0941\x03" +
		"\x02\x02\x02\u0943\u0944\x03\x02\x02\x02\u0944\u0945\x03\x02\x02\x02\u0945" +
		"\u0947\x07\u017F\x02\x02\u0946\u0948\x05\x06\x04\x02\u0947\u0946\x03\x02" +
		"\x02\x02\u0948\u0949\x03\x02\x02\x02\u0949\u0947\x03\x02\x02\x02\u0949" +
		"\u094A\x03\x02\x02\x02\u094A\u094B\x03\x02\x02\x02\u094B\u094C\x07Z\x02" +
		"\x02\u094C\u094E\x03\x02\x02\x02\u094D\u0941\x03\x02\x02\x02\u094D\u094E" +
		"\x03\x02\x02\x02\u094E\u0956\x03\x02\x02\x02\u094F\u0951\x05\x06\x04\x02" +
		"\u0950\u094F\x03\x02\x02\x02\u0951\u0952\x03\x02\x02\x02\u0952\u0950\x03" +
		"\x02\x02\x02\u0952\u0953\x03\x02\x02\x02\u0953\u0954\x03\x02\x02\x02\u0954" +
		"\u0955\x05\x84C\x02\u0955\u0957\x03\x02\x02\x02\u0956\u0950\x03\x02\x02" +
		"\x02\u0956\u0957\x03\x02\x02\x02\u0957\u095F\x03\x02\x02\x02\u0958\u095A" +
		"\x05\x06\x04\x02\u0959\u0958\x03\x02\x02\x02\u095A\u095B\x03\x02\x02\x02" +
		"\u095B\u0959\x03\x02\x02\x02\u095B\u095C\x03\x02\x02\x02\u095C\u095D\x03" +
		"\x02\x02\x02\u095D\u095E\x07}\x02\x02\u095E\u0960\x03\x02\x02\x02\u095F" +
		"\u0959\x03\x02\x02\x02\u095F\u0960\x03\x02\x02\x02\u0960\x8F\x03\x02\x02" +
		"\x02\u0961\u0963\x07\x06\x02\x02\u0962\u0964\x05\x06\x04\x02\u0963\u0962" +
		"\x03\x02\x02\x02\u0964\u0965\x03\x02\x02\x02\u0965\u0963\x03\x02\x02\x02" +
		"\u0965\u0966\x03\x02\x02\x02\u0966\u0967\x03\x02\x02\x02\u0967\u0969\x05" +
		"\xB0Y\x02\u0968\u096A\x05\x06\x04\x02\u0969\u0968\x03\x02\x02\x02\u096A" +
		"\u096B\x03\x02\x02\x02\u096B\u0969\x03\x02\x02\x02\u096B\u096C\x03\x02" +
		"\x02\x02\u096C\u096D\x03\x02\x02\x02\u096D\u096F\x07\xB1\x02\x02\u096E" +
		"\u0970\x05\x06\x04\x02\u096F\u096E\x03\x02\x02\x02\u0970\u0971\x03\x02" +
		"\x02\x02\u0971\u096F\x03\x02\x02\x02\u0971\u0972\x03\x02\x02\x02\u0972" +
		"\u0973\x03\x02\x02\x02\u0973\u0974\x05\xAEX\x02\u0974\x91\x03\x02\x02" +
		"\x02\u0975\u0977\x07\x06\x02\x02\u0976\u0978\x05\x06\x04\x02\u0977\u0976" +
		"\x03\x02\x02\x02\u0978\u0979\x03\x02\x02\x02\u0979\u0977\x03\x02\x02\x02" +
		"\u0979\u097A\x03\x02\x02\x02\u097A\u097B\x03\x02\x02\x02\u097B\u0983\x05" +
		"\xB0Y\x02\u097C\u097E\x05\x06\x04\x02\u097D\u097C\x03\x02\x02\x02\u097E" +
		"\u097F\x03\x02\x02\x02\u097F\u097D\x03\x02\x02\x02\u097F\u0980\x03\x02" +
		"\x02\x02\u0980\u0981\x03\x02\x02\x02\u0981\u0982\x05\xA0Q\x02\u0982\u0984" +
		"\x03\x02\x02\x02\u0983\u097D\x03\x02\x02\x02\u0984\u0985\x03\x02\x02\x02" +
		"\u0985\u0983\x03\x02\x02\x02\u0985\u0986\x03\x02\x02\x02\u0986\u0990\x03" +
		"\x02\x02\x02\u0987\u0989\x05\x06\x04\x02\u0988\u0987\x03\x02\x02\x02\u0989" +
		"\u098A\x03\x02\x02\x02\u098A\u0988\x03\x02\x02\x02\u098A\u098B\x03\x02" +
		"\x02\x02\u098B\u098E\x03\x02\x02\x02\u098C\u098F\x05\x82B\x02\u098D\u098F" +
		"\x05\x84C\x02\u098E\u098C\x03\x02\x02\x02\u098E\u098D\x03\x02\x02\x02" +
		"\u098F\u0991\x03\x02\x02\x02\u0990\u0988\x03\x02\x02\x02\u0990\u0991\x03" +
		"\x02\x02\x02\u0991\u0999\x03\x02\x02\x02\u0992\u0994\x05\x06\x04\x02\u0993" +
		"\u0992\x03\x02\x02\x02\u0994\u0995\x03\x02\x02\x02\u0995\u0993\x03\x02" +
		"\x02\x02\u0995\u0996\x03\x02\x02\x02\u0996\u0997\x03\x02\x02\x02\u0997" +
		"\u0998\x07}\x02\x02\u0998\u099A\x03\x02\x02\x02\u0999\u0993\x03\x02\x02" +
		"\x02\u0999\u099A\x03\x02\x02\x02\u099A\x93\x03\x02\x02\x02\u099B\u099D" +
		"\x07\x06\x02\x02\u099C\u099E\x05\x06\x04\x02\u099D\u099C\x03\x02\x02\x02" +
		"\u099E\u099F\x03\x02\x02\x02\u099F\u099D\x03\x02\x02\x02\u099F\u09A0\x03" +
		"\x02\x02\x02\u09A0\u09A7\x03\x02\x02\x02\u09A1\u09A3\x07X\x02\x02\u09A2" +
		"\u09A4\x05\x06\x04\x02\u09A3\u09A2\x03\x02\x02\x02\u09A4\u09A5\x03\x02" +
		"\x02\x02\u09A5\u09A3\x03\x02\x02\x02\u09A5\u09A6\x03\x02\x02\x02\u09A6" +
		"\u09A8\x03\x02\x02\x02\u09A7\u09A1\x03\x02\x02\x02\u09A7\u09A8\x03\x02" +
		"\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9\u09AB\x07\xD4\x02\x02\u09AA" +
		"\u09AC\x05\x06\x04\x02\u09AB\u09AA\x03\x02\x02\x02\u09AC\u09AD\x03\x02" +
		"\x02\x02\u09AD\u09AB\x03\x02\x02\x02\u09AD\u09AE\x03\x02\x02\x02\u09AE" +
		"\u09B5\x03\x02\x02\x02\u09AF\u09B1\x07\xC3\x02\x02\u09B0\u09B2\x05\x06" +
		"\x04\x02\u09B1\u09B0\x03\x02\x02\x02\u09B2\u09B3\x03\x02\x02\x02\u09B3" +
		"\u09B1\x03\x02\x02\x02\u09B3\u09B4\x03\x02\x02\x02\u09B4\u09B6\x03\x02" +
		"\x02\x02\u09B5\u09AF\x03\x02\x02\x02\u09B5\u09B6\x03\x02\x02\x02\u09B6" +
		"\u09B7\x03\x02\x02\x02\u09B7\u09BF\x05\xA2R\x02\u09B8\u09BA\x05\x06\x04" +
		"\x02\u09B9\u09B8\x03\x02\x02\x02\u09BA\u09BB\x03\x02\x02\x02\u09BB\u09B9" +
		"\x03\x02\x02\x02\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BD\x03\x02\x02\x02" +
		"\u09BD\u09BE\x05\x9EP\x02\u09BE\u09C0\x03\x02\x02\x02\u09BF\u09B9\x03" +
		"\x02\x02\x02\u09C0\u09C1\x03\x02\x02\x02\u09C1\u09BF\x03\x02\x02\x02\u09C1" +
		"\u09C2\x03\x02\x02\x02\u09C2\u09CC\x03\x02\x02\x02\u09C3\u09C5\x05\x06" +
		"\x04\x02\u09C4\u09C3\x03\x02\x02\x02\u09C5\u09C6\x03\x02\x02\x02\u09C6" +
		"\u09C4\x03\x02\x02\x02\u09C6\u09C7\x03\x02\x02\x02\u09C7\u09CA\x03\x02" +
		"\x02\x02\u09C8\u09CB\x05\x82B\x02\u09C9\u09CB\x05\x84C\x02\u09CA\u09C8" +
		"\x03\x02\x02\x02\u09CA\u09C9\x03\x02\x02\x02\u09CB\u09CD\x03\x02\x02\x02" +
		"\u09CC\u09C4\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02\x02\u09CD\u09D5\x03" +
		"\x02\x02\x02\u09CE\u09D0\x05\x06\x04\x02\u09CF\u09CE\x03\x02\x02\x02\u09D0" +
		"\u09D1\x03\x02\x02\x02\u09D1\u09CF\x03\x02\x02\x02\u09D1\u09D2\x03\x02" +
		"\x02\x02\u09D2\u09D3\x03\x02\x02\x02\u09D3\u09D4\x07}\x02\x02\u09D4\u09D6" +
		"\x03\x02\x02\x02\u09D5\u09CF\x03\x02\x02\x02\u09D5\u09D6\x03\x02\x02\x02" +
		"\u09D6\x95\x03\x02\x02\x02\u09D7\u09D9\x07\x06\x02\x02\u09D8\u09DA\x05" +
		"\x06\x04\x02\u09D9\u09D8\x03\x02\x02\x02\u09DA\u09DB\x03\x02\x02\x02\u09DB" +
		"\u09D9\x03\x02\x02\x02\u09DB\u09DC\x03\x02\x02\x02\u09DC\u09DD\x03\x02" +
		"\x02\x02\u09DD\u09E5\x05\u0160\xB1\x02\u09DE\u09E0\x05\x06\x04\x02\u09DF" +
		"\u09DE\x03\x02\x02\x02\u09E0\u09E1\x03\x02\x02\x02\u09E1\u09DF\x03\x02" +
		"\x02\x02\u09E1\u09E2\x03\x02\x02\x02\u09E2\u09E3\x03\x02\x02\x02\u09E3" +
		"\u09E4\x05\x98M\x02\u09E4\u09E6\x03\x02\x02\x02\u09E5\u09DF\x03\x02\x02" +
		"\x02\u09E5\u09E6\x03\x02\x02\x02\u09E6\u09EE\x03\x02\x02\x02\u09E7\u09E9" +
		"\x05\x06\x04\x02\u09E8\u09E7\x03\x02\x02\x02\u09E9\u09EA\x03\x02\x02\x02" +
		"\u09EA\u09E8\x03\x02\x02\x02\u09EA\u09EB\x03\x02\x02\x02\u09EB\u09EC\x03" +
		"\x02\x02\x02\u09EC\u09ED\x05\x82B\x02\u09ED\u09EF\x03\x02\x02\x02\u09EE" +
		"\u09E8\x03\x02\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09F7\x03\x02" +
		"\x02\x02\u09F0\u09F2\x05\x06\x04\x02\u09F1\u09F0\x03\x02\x02\x02\u09F2" +
		"\u09F3\x03\x02\x02\x02\u09F3\u09F1\x03\x02\x02\x02\u09F3\u09F4\x03\x02" +
		"\x02\x02\u09F4\u09F5\x03\x02\x02\x02\u09F5\u09F6\x07}\x02\x02\u09F6\u09F8" +
		"\x03\x02\x02\x02\u09F7\u09F1\x03\x02\x02\x02\u09F7\u09F8\x03\x02\x02\x02" +
		"\u09F8\x97\x03\x02\x02\x02\u09F9\u09FB\x07\x1E\x02\x02\u09FA\u09FC\x05" +
		"\x06\x04\x02\u09FB\u09FA\x03\x02\x02\x02\u09FC\u09FD\x03\x02\x02\x02\u09FD" +
		"\u09FB\x03\x02\x02\x02\u09FD\u09FE\x03\x02\x02\x02\u09FE\u0A00\x03\x02" +
		"\x02\x02\u09FF\u09F9\x03\x02\x02\x02\u09FF\u0A00\x03\x02\x02\x02\u0A00" +
		"\u0A15\x03\x02\x02\x02\u0A01\u0A09\x05\x9AN\x02\u0A02\u0A04\x05\x06\x04" +
		"\x02\u0A03\u0A02\x03\x02\x02\x02\u0A04\u0A05\x03\x02\x02\x02\u0A05\u0A03" +
		"\x03\x02\x02\x02\u0A05\u0A06\x03\x02\x02\x02\u0A06\u0A07\x03\x02\x02\x02" +
		"\u0A07\u0A08\x05\x9CO\x02\u0A08\u0A0A\x03\x02\x02\x02\u0A09\u0A03\x03" +
		"\x02\x02\x02\u0A09\u0A0A\x03\x02\x02\x02\u0A0A\u0A16\x03\x02\x02\x02\u0A0B" +
		"\u0A13\x05\x9CO\x02\u0A0C\u0A0E\x05\x06\x04\x02\u0A0D\u0A0C\x03\x02\x02" +
		"\x02\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F\u0A0D\x03\x02\x02\x02\u0A0F\u0A10" +
		"\x03\x02\x02\x02\u0A10\u0A11\x03\x02\x02\x02\u0A11\u0A12\x05\x9AN\x02" +
		"\u0A12\u0A14\x03\x02\x02\x02\u0A13\u0A0D\x03\x02\x02\x02\u0A13\u0A14\x03" +
		"\x02\x02\x02\u0A14\u0A16\x03\x02\x02\x02\u0A15\u0A01\x03\x02\x02\x02\u0A15" +
		"\u0A0B\x03\x02\x02\x02\u0A16\x99\x03\x02\x02\x02\u0A17\u0A19\x07\xDD\x02" +
		"\x02\u0A18\u0A1A\x05\x06\x04\x02\u0A19\u0A18\x03\x02\x02\x02\u0A1A\u0A1B" +
		"\x03\x02\x02\x02\u0A1B\u0A19\x03\x02\x02\x02\u0A1B\u0A1C\x03\x02\x02\x02" +
		"\u0A1C\u0A23\x03\x02\x02\x02\u0A1D\u0A1F\x07\xF4\x02\x02\u0A1E\u0A20\x05" +
		"\x06\x04\x02\u0A1F\u0A1E\x03\x02\x02\x02\u0A20\u0A21\x03\x02\x02\x02\u0A21" +
		"\u0A1F\x03\x02\x02\x02\u0A21\u0A22\x03\x02\x02\x02\u0A22\u0A24\x03\x02" +
		"\x02\x02\u0A23\u0A1D\x03\x02\x02\x02\u0A23\u0A24\x03\x02\x02\x02\u0A24" +
		"\u0A27\x03\x02\x02\x02\u0A25\u0A28\x07\u01AD\x02\x02\u0A26\u0A28\x05\u01AE" +
		"\xD8\x02\u0A27\u0A25\x03\x02\x02\x02";
	private static readonly _serializedATNSegment7: string =
		"\u0A27\u0A26\x03\x02\x02\x02\u0A28\x9B\x03\x02\x02\x02\u0A29\u0A2B\x07" +
		"@\x02\x02\u0A2A\u0A2C\x05\x06\x04\x02\u0A2B\u0A2A\x03\x02\x02\x02\u0A2C" +
		"\u0A2D\x03\x02\x02\x02\u0A2D\u0A2B\x03\x02\x02\x02\u0A2D\u0A2E\x03\x02" +
		"\x02\x02\u0A2E\u0A35\x03\x02\x02\x02\u0A2F\u0A31\x07\xF4\x02\x02\u0A30" +
		"\u0A32\x05\x06\x04\x02\u0A31\u0A30\x03\x02\x02\x02\u0A32\u0A33\x03\x02" +
		"\x02\x02\u0A33\u0A31\x03\x02\x02\x02\u0A33\u0A34\x03\x02\x02\x02\u0A34" +
		"\u0A36\x03\x02\x02\x02\u0A35\u0A2F\x03\x02\x02\x02\u0A35\u0A36\x03\x02" +
		"\x02\x02\u0A36\u0A39\x03\x02\x02\x02\u0A37\u0A3A\x07\u01AD\x02\x02\u0A38" +
		"\u0A3A\x05\u01AE\xD8\x02\u0A39\u0A37\x03\x02\x02\x02\u0A39\u0A38\x03\x02" +
		"\x02\x02\u0A3A\x9D\x03\x02\x02\x02\u0A3B\u0A3D\x07\xB1\x02\x02\u0A3C\u0A3E" +
		"\x05\x06\x04\x02\u0A3D\u0A3C\x03\x02\x02\x02\u0A3E\u0A3F\x03\x02\x02\x02" +
		"\u0A3F\u0A3D\x03\x02\x02\x02\u0A3F\u0A40\x03\x02\x02\x02\u0A40\u0A42\x03" +
		"\x02\x02\x02\u0A41\u0A3B\x03\x02\x02\x02\u0A41\u0A42\x03\x02\x02\x02\u0A42" +
		"\u0A43\x03\x02\x02\x02\u0A43\u0A4B\x07\xDD\x02\x02\u0A44\u0A46\x05\x06" +
		"\x04\x02\u0A45\u0A44\x03\x02\x02\x02\u0A46\u0A47\x03\x02\x02\x02\u0A47" +
		"\u0A45\x03\x02\x02\x02\u0A47\u0A48\x03\x02\x02\x02\u0A48\u0A49\x03\x02" +
		"\x02\x02\u0A49\u0A4A\x07\xF4\x02\x02\u0A4A\u0A4C\x03\x02\x02\x02\u0A4B" +
		"\u0A45\x03\x02\x02\x02\u0A4B\u0A4C\x03\x02\x02\x02\u0A4C\u0A4E\x03\x02" +
		"\x02\x02\u0A4D\u0A4F\x05\x06\x04\x02\u0A4E\u0A4D\x03\x02\x02\x02\u0A4F" +
		"\u0A50\x03\x02\x02\x02\u0A50\u0A4E\x03\x02\x02\x02\u0A50\u0A51\x03\x02" +
		"\x02\x02\u0A51\u0A52\x03\x02\x02\x02\u0A52\u0A53\x05\xACW\x02\u0A53\u0A98" +
		"\x03\x02\x02\x02\u0A54\u0A56\x07\xB1\x02\x02\u0A55\u0A57\x05\x06\x04\x02" +
		"\u0A56\u0A55\x03\x02\x02\x02\u0A57\u0A58\x03\x02\x02\x02\u0A58\u0A56\x03" +
		"\x02\x02\x02\u0A58\u0A59\x03\x02\x02\x02\u0A59\u0A5B\x03\x02\x02\x02\u0A5A" +
		"\u0A54\x03\x02\x02\x02\u0A5A\u0A5B\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02" +
		"\x02\x02\u0A5C\u0A64\x07@\x02\x02\u0A5D\u0A5F\x05\x06\x04\x02\u0A5E\u0A5D" +
		"\x03\x02\x02\x02\u0A5F\u0A60\x03\x02\x02\x02\u0A60\u0A5E\x03\x02\x02\x02" +
		"\u0A60\u0A61\x03\x02\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62\u0A63\x07" +
		"\xF4\x02\x02\u0A63\u0A65\x03\x02\x02\x02\u0A64\u0A5E\x03\x02\x02\x02\u0A64" +
		"\u0A65\x03\x02\x02\x02\u0A65\u0A67\x03\x02\x02\x02\u0A66\u0A68\x05\x06" +
		"\x04\x02\u0A67\u0A66\x03\x02\x02\x02\u0A68\u0A69\x03\x02\x02\x02\u0A69" +
		"\u0A67\x03\x02\x02\x02\u0A69\u0A6A\x03\x02\x02\x02\u0A6A\u0A6B\x03\x02" +
		"\x02\x02\u0A6B\u0A6C\x05\xACW\x02\u0A6C\u0A98\x03\x02\x02\x02\u0A6D\u0A85" +
		"\x07\x98\x02\x02\u0A6E\u0A70\x05\x06\x04\x02\u0A6F\u0A6E\x03\x02\x02\x02" +
		"\u0A70\u0A71\x03\x02\x02\x02\u0A71\u0A6F\x03\x02\x02\x02\u0A71\u0A72\x03" +
		"\x02\x02\x02\u0A72\u0A79\x03\x02\x02\x02\u0A73\u0A75\x07\u0169\x02\x02" +
		"\u0A74\u0A76\x05\x06\x04\x02\u0A75\u0A74\x03\x02\x02\x02\u0A76\u0A77\x03" +
		"\x02\x02\x02\u0A77\u0A75\x03\x02\x02\x02\u0A77\u0A78\x03\x02\x02\x02\u0A78" +
		"\u0A7A\x03\x02\x02\x02\u0A79\u0A73\x03\x02\x02\x02\u0A79\u0A7A\x03\x02" +
		"\x02\x02\u0A7A\u0A7B\x03\x02\x02\x02\u0A7B\u0A83\x07|\x02\x02\u0A7C\u0A7E" +
		"\x05\x06\x04\x02\u0A7D\u0A7C\x03\x02\x02\x02\u0A7E\u0A7F\x03\x02\x02\x02" +
		"\u0A7F\u0A7D\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02\x02\u0A80\u0A81\x03" +
		"\x02\x02\x02\u0A81\u0A82\x07\xF8\x02\x02\u0A82\u0A84\x03\x02\x02\x02\u0A83" +
		"\u0A7D\x03\x02\x02\x02\u0A83\u0A84\x03\x02\x02\x02\u0A84\u0A86\x03\x02" +
		"\x02\x02\u0A85\u0A6F\x03\x02\x02\x02\u0A85\u0A86\x03\x02\x02\x02\u0A86" +
		"\u0A88\x03\x02\x02\x02\u0A87\u0A89\x05\x06\x04\x02\u0A88\u0A87\x03\x02" +
		"\x02\x02\u0A89\u0A8A\x03\x02\x02\x02\u0A8A\u0A88\x03\x02\x02\x02\u0A8A" +
		"\u0A8B\x03\x02\x02\x02\u0A8B\u0A8C\x03\x02\x02\x02\u0A8C\u0A8D\t\x05\x02" +
		"\x02\u0A8D\u0A98\x03\x02\x02\x02\u0A8E\u0A90\x07\u017F\x02\x02\u0A8F\u0A91" +
		"\x05\x06\x04\x02\u0A90\u0A8F\x03\x02\x02\x02\u0A91\u0A92\x03\x02\x02\x02" +
		"\u0A92\u0A90\x03\x02\x02\x02\u0A92\u0A93\x03\x02\x02\x02\u0A93\u0A95\x03" +
		"\x02\x02\x02\u0A94\u0A8E\x03\x02\x02\x02\u0A94\u0A95\x03\x02\x02\x02\u0A95" +
		"\u0A96\x03\x02\x02\x02\u0A96\u0A98\x07%\x02\x02\u0A97\u0A41\x03\x02\x02" +
		"\x02\u0A97\u0A5A\x03\x02\x02\x02\u0A97\u0A6D\x03\x02\x02\x02\u0A97\u0A94" +
		"\x03\x02\x02\x02\u0A98\x9F\x03\x02\x02\x02\u0A99\u0AF3\x05\x9EP\x02\u0A9A" +
		"\u0AF3\x07\u016F\x02\x02\u0A9B\u0AF3\x07/\x02\x02\u0A9C\u0A9E\x07\u017F" +
		"\x02\x02\u0A9D\u0A9F\x05\x06\x04\x02\u0A9E\u0A9D\x03\x02\x02\x02\u0A9F" +
		"\u0AA0\x03\x02\x02\x02\u0AA0\u0A9E\x03\x02\x02\x02\u0AA0\u0AA1\x03\x02" +
		"\x02\x02\u0AA1\u0AA3\x03\x02\x02\x02\u0AA2\u0A9C\x03\x02\x02\x02\u0AA2" +
		"\u0AA3\x03\x02\x02\x02\u0AA3\u0AA4\x03\x02\x02\x02\u0AA4\u0AF3\x07-\x02" +
		"\x02\u0AA5\u0AAD\x07\u0118\x02\x02\u0AA6\u0AA8\x05\x06\x04\x02\u0AA7\u0AA6" +
		"\x03\x02\x02\x02\u0AA8\u0AA9\x03\x02\x02\x02\u0AA9\u0AA7\x03\x02\x02\x02" +
		"\u0AA9\u0AAA\x03\x02\x02\x02\u0AAA\u0AAB\x03\x02\x02\x02\u0AAB\u0AAC\x05" +
		"\xA6T\x02\u0AAC\u0AAE\x03\x02\x02\x02\u0AAD\u0AA7\x03\x02\x02\x02\u0AAD" +
		"\u0AAE\x03\x02\x02\x02\u0AAE\u0AF3\x03\x02\x02\x02\u0AAF\u0AB1\x07\u017F" +
		"\x02\x02\u0AB0\u0AB2\x05\x06\x04\x02\u0AB1\u0AB0\x03\x02\x02\x02\u0AB2" +
		"\u0AB3\x03\x02\x02\x02\u0AB3\u0AB1\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02" +
		"\x02\x02\u0AB4\u0AB6\x03\x02\x02\x02\u0AB5\u0AAF\x03\x02\x02\x02\u0AB5" +
		"\u0AB6\x03\x02\x02\x02\u0AB6\u0AB7\x03\x02\x02\x02\u0AB7\u0AF3\x07Z\x02" +
		"\x02\u0AB8\u0AF3\x07\u0130\x02\x02\u0AB9\u0ABB\x07\u017F\x02\x02\u0ABA" +
		"\u0ABC\x05\x06\x04\x02\u0ABB\u0ABA\x03\x02\x02\x02\u0ABC\u0ABD\x03\x02" +
		"\x02\x02\u0ABD\u0ABB\x03\x02\x02\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE" +
		"\u0AC0\x03\x02\x02\x02\u0ABF\u0AB9\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02" +
		"\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u0AC3\x07\xF2\x02\x02\u0AC2" +
		"\u0AC4\x05\x06\x04\x02\u0AC3\u0AC2\x03\x02\x02\x02\u0AC4\u0AC5\x03\x02" +
		"\x02\x02\u0AC5\u0AC3\x03\x02\x02\x02\u0AC5\u0AC6\x03\x02\x02\x02\u0AC6" +
		"\u0AC7\x03\x02\x02\x02\u0AC7\u0AC8\x07z\x02\x02\u0AC8\u0AF3\x03\x02\x02" +
		"\x02\u0AC9\u0ACB\x07k\x02\x02\u0ACA\u0ACC\x05\x06\x04\x02\u0ACB\u0ACA" +
		"\x03\x02\x02\x02\u0ACC\u0ACD\x03\x02\x02\x02\u0ACD\u0ACB\x03\x02\x02\x02" +
		"\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE\u0AD5\x03\x02\x02\x02\u0ACF\u0AD1\x07" +
		"\xCF\x02\x02\u0AD0\u0AD2\x05\x06\x04\x02\u0AD1\u0AD0\x03\x02\x02\x02\u0AD2" +
		"\u0AD3\x03\x02\x02\x02\u0AD3\u0AD1\x03\x02\x02\x02\u0AD3\u0AD4\x03\x02" +
		"\x02\x02\u0AD4\u0AD6\x03\x02\x02\x02\u0AD5\u0ACF\x03\x02\x02\x02\u0AD5" +
		"\u0AD6\x03\x02\x02\x02\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7\u0AD8\x05\xA4" +
		"S\x02\u0AD8\u0AF3\x03\x02\x02\x02\u0AD9\u0ADB\x07X\x02\x02\u0ADA\u0ADC" +
		"\x05\x06\x04\x02\u0ADB\u0ADA\x03\x02\x02\x02\u0ADC\u0ADD\x03\x02\x02\x02" +
		"\u0ADD\u0ADB\x03\x02\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0AE0\x03" +
		"\x02\x02\x02\u0ADF\u0AD9\x03\x02\x02\x02\u0ADF\u0AE0\x03\x02\x02\x02\u0AE0" +
		"\u0AE1\x03\x02\x02\x02\u0AE1\u0AE9\x07\xD4\x02\x02\u0AE2\u0AE4\x05\x06" +
		"\x04\x02\u0AE3\u0AE2\x03\x02\x02\x02\u0AE4\u0AE5\x03\x02\x02\x02\u0AE5" +
		"\u0AE3\x03\x02\x02\x02\u0AE5\u0AE6\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02" +
		"\x02\x02\u0AE7\u0AE8\x07\xC3\x02\x02\u0AE8\u0AEA\x03\x02\x02\x02\u0AE9" +
		"\u0AE3\x03\x02\x02\x02\u0AE9\u0AEA\x03\x02\x02\x02\u0AEA\u0AEC\x03\x02" +
		"\x02\x02\u0AEB\u0AED\x05\x06\x04\x02\u0AEC\u0AEB\x03\x02\x02\x02\u0AED" +
		"\u0AEE\x03\x02\x02\x02\u0AEE\u0AEC\x03\x02\x02\x02\u0AEE\u0AEF\x03\x02" +
		"\x02\x02\u0AEF\u0AF0\x03\x02\x02\x02\u0AF0\u0AF1\x05\xA2R\x02\u0AF1\u0AF3" +
		"\x03\x02\x02\x02\u0AF2\u0A99\x03\x02\x02\x02\u0AF2\u0A9A\x03\x02\x02\x02" +
		"\u0AF2\u0A9B\x03\x02\x02\x02\u0AF2\u0AA2\x03\x02\x02\x02\u0AF2\u0AA5\x03" +
		"\x02\x02\x02\u0AF2\u0AB5\x03\x02\x02\x02\u0AF2\u0AB8\x03\x02\x02\x02\u0AF2" +
		"\u0ABF\x03\x02\x02\x02\u0AF2\u0AC9\x03\x02\x02\x02\u0AF2\u0ADF\x03\x02" +
		"\x02\x02\u0AF3\xA1\x03\x02\x02\x02\u0AF4\u0AF5\x05\u01AE\xD8\x02\u0AF5" +
		"\xA3\x03\x02\x02\x02\u0AF6\u0B04\x05\x04\x03\x02\u0AF7\u0B04\x07\u01AC" +
		"\x02\x02\u0AF8\u0B04\x05\u01AE\xD8\x02\u0AF9\u0B01\x07_\x02\x02\u0AFA" +
		"\u0AFC\x05\x06\x04\x02\u0AFB\u0AFA\x03\x02\x02\x02\u0AFC\u0AFD\x03\x02" +
		"\x02\x02\u0AFD\u0AFB\x03\x02\x02\x02\u0AFD\u0AFE\x03\x02\x02\x02\u0AFE" +
		"\u0AFF\x03\x02\x02\x02\u0AFF\u0B00\x07\u0179\x02\x02\u0B00\u0B02\x03\x02" +
		"\x02\x02\u0B01\u0AFB\x03\x02\x02\x02\u0B01\u0B02\x03\x02\x02\x02\u0B02" +
		"\u0B04\x03\x02\x02\x02\u0B03\u0AF6\x03\x02\x02\x02\u0B03\u0AF7\x03\x02" +
		"\x02\x02\u0B03\u0AF8\x03\x02\x02\x02\u0B03\u0AF9\x03\x02\x02\x02\u0B04" +
		"\xA5\x03\x02\x02\x02\u0B05\u0B07\x07\u0146\x02\x02\u0B06\u0B08\x05\x06" +
		"\x04\x02\u0B07\u0B06\x03\x02\x02\x02\u0B08\u0B09\x03\x02\x02\x02\u0B09" +
		"\u0B07\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A\u0B0B\x03\x02" +
		"\x02\x02\u0B0B\u0B0C\x05\xAAV\x02\u0B0C\u0B40\x03\x02\x02\x02\u0B0D\u0B0F" +
		"\x07\u017F\x02\x02\u0B0E\u0B10\x05\x06\x04\x02\u0B0F\u0B0E\x03\x02\x02" +
		"\x02\u0B10\u0B11\x03\x02\x02\x02\u0B11\u0B0F\x03\x02\x02\x02\u0B11\u0B12" +
		"\x03\x02\x02\x02\u0B12\u0B14\x03\x02\x02\x02\u0B13\u0B0D\x03\x02\x02\x02" +
		"\u0B13\u0B14\x03\x02\x02\x02\u0B14\u0B15\x03\x02\x02\x02\u0B15\u0B40\x07" +
		"\"\x02\x02\u0B16\u0B18\x07\u017F\x02\x02\u0B17\u0B19\x05\x06\x04\x02\u0B18" +
		"\u0B17\x03\x02\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A\u0B18\x03\x02" +
		"\x02\x02\u0B1A\u0B1B\x03\x02\x02\x02\u0B1B\u0B1D\x03\x02\x02\x02\u0B1C" +
		"\u0B16\x03\x02\x02\x02\u0B1C\u0B1D\x03\x02\x02\x02\u0B1D\u0B1E\x03\x02" +
		"\x02\x02\u0B1E\u0B20\x07\xF2\x02\x02\u0B1F\u0B21\x05\x06\x04\x02\u0B20" +
		"\u0B1F\x03\x02\x02\x02\u0B21\u0B22\x03\x02\x02\x02\u0B22\u0B20\x03\x02" +
		"\x02\x02\u0B22\u0B23\x03\x02\x02\x02\u0B23\u0B24\x03\x02\x02\x02\u0B24" +
		"\u0B25\x07+\x02\x02\u0B25\u0B40\x03\x02\x02\x02\u0B26\u0B28\x07\u017F" +
		"\x02\x02\u0B27\u0B29\x05\x06\x04\x02\u0B28\u0B27\x03\x02\x02\x02\u0B29" +
		"\u0B2A\x03\x02\x02\x02\u0B2A\u0B28\x03\x02\x02\x02\u0B2A\u0B2B\x03\x02" +
		"\x02\x02\u0B2B\u0B2D\x03\x02\x02\x02\u0B2C\u0B26\x03\x02\x02\x02\u0B2C" +
		"\u0B2D\x03\x02\x02\x02\u0B2D\u0B2E\x03\x02\x02\x02\u0B2E\u0B40\x07{\x02" +
		"\x02\u0B2F\u0B31\x07\u017F\x02\x02\u0B30\u0B32\x05\x06\x04\x02\u0B31\u0B30" +
		"\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33\u0B31\x03\x02\x02\x02" +
		"\u0B33\u0B34\x03\x02\x02\x02\u0B34\u0B36\x03\x02\x02\x02\u0B35\u0B2F\x03" +
		"\x02\x02\x02\u0B35\u0B36\x03\x02\x02\x02\u0B36\u0B37\x03\x02\x02\x02\u0B37" +
		"\u0B39\x07\xA7\x02\x02\u0B38\u0B3A\x05\x06\x04\x02\u0B39\u0B38\x03\x02" +
		"\x02\x02\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u0B39\x03\x02\x02\x02\u0B3B" +
		"\u0B3C\x03\x02\x02\x02\u0B3C\u0B3D\x03\x02\x02\x02\u0B3D\u0B3E\x05\xA8" +
		"U\x02\u0B3E\u0B40\x03\x02\x02\x02\u0B3F\u0B05\x03\x02\x02\x02\u0B3F\u0B13" +
		"\x03\x02\x02\x02\u0B3F\u0B1C\x03\x02\x02\x02\u0B3F\u0B2C\x03\x02\x02\x02" +
		"\u0B3F\u0B35\x03\x02\x02\x02\u0B40\xA7\x03\x02\x02\x02\u0B41\u0B42\x07" +
		"\u01AC\x02\x02\u0B42\xA9\x03\x02\x02\x02\u0B43\u0B46\x07\u01AD\x02\x02" +
		"\u0B44\u0B46\x05\u01AE\xD8\x02\u0B45\u0B43\x03\x02\x02\x02\u0B45\u0B44" +
		"\x03\x02\x02\x02\u0B46\xAB\x03\x02\x02\x02\u0B47\u0B65\x05\u011A\x8E\x02" +
		"\u0B48\u0B58\x05\u01AE\xD8\x02\u0B49\u0B4B\x05\x06\x04\x02\u0B4A\u0B49" +
		"\x03\x02\x02\x02\u0B4B\u0B4C\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02" +
		"\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\u0B4E\x03\x02\x02\x02\u0B4E\u0B56\x07" +
		"\u010D\x02\x02\u0B4F\u0B51\x05\x06\x04\x02\u0B50\u0B4F\x03\x02\x02\x02" +
		"\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B50\x03\x02\x02\x02\u0B52\u0B53\x03" +
		"\x02\x02\x02\u0B53\u0B54\x03\x02\x02\x02\u0B54\u0B55\x05\u011A\x8E\x02" +
		"\u0B55\u0B57\x03\x02\x02\x02\u0B56\u0B50\x03\x02\x02\x02\u0B56\u0B57\x03" +
		"\x02\x02\x02\u0B57\u0B59\x03\x02\x02\x02\u0B58\u0B4A\x03\x02\x02\x02\u0B58" +
		"\u0B59\x03\x02\x02\x02\u0B59\u0B65\x03\x02\x02\x02\u0B5A\u0B62\x07\u010D" +
		"\x02\x02\u0B5B\u0B5D\x05\x06\x04\x02\u0B5C\u0B5B\x03\x02\x02\x02\u0B5D" +
		"\u0B5E\x03\x02\x02\x02\u0B5E\u0B5C\x03\x02\x02\x02\u0B5E\u0B5F\x03\x02" +
		"\x02\x02\u0B5F\u0B60\x03\x02\x02\x02\u0B60\u0B61\x05\u011A\x8E\x02\u0B61" +
		"\u0B63\x03\x02\x02\x02\u0B62\u0B5C\x03\x02\x02\x02\u0B62\u0B63\x03\x02" +
		"\x02\x02\u0B63\u0B65\x03\x02\x02\x02\u0B64\u0B47\x03\x02\x02\x02\u0B64" +
		"\u0B48\x03\x02\x02\x02\u0B64\u0B5A\x03\x02\x02\x02\u0B65\xAD\x03\x02\x02" +
		"\x02\u0B66\u0B6E\x07b\x02\x02\u0B67\u0B69\x05\x06\x04\x02\u0B68\u0B67" +
		"\x03\x02\x02\x02\u0B69\u0B6A\x03\x02\x02\x02\u0B6A\u0B68\x03\x02\x02\x02" +
		"\u0B6A\u0B6B\x03\x02\x02\x02\u0B6B\u0B6C\x03\x02\x02\x02\u0B6C\u0B6D\x07" +
		"\u0184\x02\x02\u0B6D\u0B6F\x03\x02\x02\x02\u0B6E\u0B68\x03\x02\x02\x02" +
		"\u0B6E\u0B6F\x03\x02\x02\x02\u0B6F\u0B7D\x03\x02\x02\x02\u0B70\u0B78\x07" +
		"e\x02\x02\u0B71\u0B73\x05\x06\x04\x02\u0B72\u0B71\x03\x02\x02\x02\u0B73" +
		"\u0B74\x03\x02\x02\x02\u0B74\u0B72\x03\x02\x02\x02\u0B74\u0B75\x03\x02" +
		"\x02\x02\u0B75\u0B76\x03\x02\x02\x02\u0B76\u0B77\x07\u0183\x02\x02\u0B77" +
		"\u0B79\x03\x02\x02\x02\u0B78\u0B72\x03\x02\x02\x02\u0B78\u0B79\x03\x02" +
		"\x02\x02\u0B79\u0B7D\x03\x02\x02\x02\u0B7A\u0B7D\x07f\x02\x02\u0B7B\u0B7D" +
		"\x07\u0167\x02\x02\u0B7C\u0B66\x03\x02\x02\x02\u0B7C\u0B70\x03\x02\x02" +
		"\x02\u0B7C\u0B7A\x03\x02\x02\x02\u0B7C\u0B7B\x03\x02\x02\x02\u0B7D\xAF" +
		"\x03\x02\x02\x02\u0B7E\u0B7F\x05\u0258\u012D\x02\u0B7F\xB1\x03\x02\x02" +
		"\x02\u0B80\u0B81\x07\u01AF\x02\x02\u0B81\xB3\x03\x02\x02\x02\u0B82\u0B84" +
		"\x07\x1E\x02\x02\u0B83\u0B85\x05\x06\x04\x02\u0B84\u0B83\x03\x02\x02\x02" +
		"\u0B85\u0B86\x03\x02\x02\x02\u0B86\u0B84\x03\x02\x02\x02\u0B86\u0B87\x03" +
		"\x02\x02\x02\u0B87\u0B89\x03\x02\x02\x02\u0B88\u0B82\x03\x02\x02\x02\u0B88" +
		"\u0B89\x03\x02\x02\x02\u0B89\u0B8A\x03\x02\x02\x02\u0B8A\u0B92\x07|\x02" +
		"\x02\u0B8B\u0B8D\x05\x06\x04\x02\u0B8C\u0B8B\x03\x02\x02\x02\u0B8D\u0B8E" +
		"\x03\x02\x02\x02\u0B8E\u0B8C\x03\x02\x02\x02\u0B8E\u0B8F\x03\x02\x02\x02" +
		"\u0B8F\u0B90\x03\x02\x02\x02\u0B90\u0B91\x05\x1E\x10\x02\u0B91\u0B93\x03" +
		"\x02\x02\x02\u0B92\u0B8C\x03\x02\x02\x02\u0B92\u0B93\x03\x02\x02\x02\u0B93" +
		"\xB5\x03\x02\x02\x02\u0B94\u0B96\x07\xFB\x02\x02\u0B95\u0B97\x05\x06\x04" +
		"\x02\u0B96\u0B95\x03\x02\x02\x02\u0B97\u0B98\x03\x02\x02\x02\u0B98\u0B96" +
		"\x03\x02\x02\x02\u0B98\u0B99\x03\x02\x02\x02\u0B99\u0B9B\x03\x02\x02\x02" +
		"\u0B9A\u0B94\x03\x02\x02\x02\u0B9A\u0B9B\x03\x02\x02\x02\u0B9B\u0B9C\x03" +
		"\x02\x02\x02\u0B9C\u0BA4\x07\x9C\x02\x02\u0B9D\u0B9F\x05\x06\x04\x02\u0B9E" +
		"\u0B9D\x03\x02\x02\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0B9E\x03\x02" +
		"\x02\x02\u0BA0\u0BA1\x03\x02\x02\x02\u0BA1\u0BA2\x03\x02\x02\x02\u0BA2" +
		"\u0BA3\x05\x1E\x10\x02\u0BA3\u0BA5\x03\x02\x02\x02\u0BA4\u0B9E\x03\x02" +
		"\x02\x02\u0BA4\u0BA5\x03\x02\x02\x02\u0BA5\xB7\x03\x02\x02\x02\u0BA6\u0BA8" +
		"\x07\xFB\x02\x02\u0BA7\u0BA9\x05\x06\x04\x02\u0BA8\u0BA7\x03\x02\x02\x02" +
		"\u0BA9\u0BAA\x03\x02\x02\x02\u0BAA\u0BA8\x03\x02\x02\x02\u0BAA\u0BAB\x03" +
		"\x02\x02\x02\u0BAB\u0BAD\x03\x02\x02\x02\u0BAC\u0BA6\x03\x02\x02\x02\u0BAC" +
		"\u0BAD\x03\x02\x02\x02\u0BAD\u0BAE\x03\x02\x02\x02\u0BAE\u0BB0\x07\u0146" +
		"\x02\x02\u0BAF\u0BB1\x05\x06\x04\x02\u0BB0\u0BAF\x03\x02\x02\x02\u0BB1" +
		"\u0BB2\x03\x02\x02\x02\u0BB2\u0BB0\x03\x02\x02\x02\u0BB2\u0BB3\x03\x02" +
		"\x02\x02\u0BB3\u0BB4\x03\x02\x02\x02\u0BB4\u0BBC\x07\x99\x02\x02\u0BB5" +
		"\u0BB7\x05\x06\x04\x02\u0BB6\u0BB5\x03\x02\x02\x02\u0BB7\u0BB8\x03\x02" +
		"\x02\x02\u0BB8\u0BB6\x03\x02\x02\x02\u0BB8\u0BB9\x03\x02\x02\x02\u0BB9" +
		"\u0BBA\x03\x02\x02\x02\u0BBA\u0BBB\x05\x1E\x10\x02\u0BBB\u0BBD\x03\x02" +
		"\x02\x02\u0BBC\u0BB6\x03\x02\x02\x02\u0BBC\u0BBD\x03\x02\x02\x02\u0BBD" +
		"\xB9\x03\x02\x02\x02\u0BBE\u0BC6\x07\xCE\x02\x02\u0BBF\u0BC1\x05\x06\x04" +
		"\x02\u0BC0\u0BBF\x03\x02\x02\x02\u0BC1\u0BC2\x03\x02\x02\x02\u0BC2\u0BC0" +
		"\x03\x02\x02\x02\u0BC2\u0BC3\x03\x02\x02\x02\u0BC3\u0BC4\x03\x02\x02\x02" +
		"\u0BC4\u0BC5\x07\xD4\x02\x02\u0BC5\u0BC7\x03\x02\x02\x02\u0BC6\u0BC0\x03" +
		"\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7\u0BCF\x03\x02\x02\x02\u0BC8" +
		"\u0BCA\x05\x06\x04\x02\u0BC9\u0BC8\x03\x02\x02\x02\u0BCA\u0BCB\x03\x02" +
		"\x02\x02\u0BCB\u0BC9\x03\x02\x02\x02\u0BCB\u0BCC\x03\x02\x02\x02\u0BCC" +
		"\u0BCD\x03\x02\x02\x02\u0BCD\u0BCE\x05\x1E\x10\x02\u0BCE\u0BD0\x03\x02" +
		"\x02\x02\u0BCF\u0BC9\x03\x02\x02\x02\u0BCF\u0BD0\x03\x02\x02\x02\u0BD0" +
		"\xBB\x03\x02\x02\x02\u0BD1\u0BD3\x07a\x02\x02\u0BD2\u0BD4\x05\x06\x04" +
		"\x02\u0BD3\u0BD2\x03\x02\x02\x02\u0BD4\u0BD5\x03\x02\x02\x02\u0BD5\u0BD3" +
		"\x03\x02\x02\x02\u0BD5\u0BD6\x03\x02\x02\x02\u0BD6\u0BD7\x03\x02\x02\x02" +
		"\u0BD7\u0BDB\x07u\x02\x02\u0BD8\u0BDA\x05\x06\x04\x02\u0BD9\u0BD8\x03" +
		"\x02\x02\x02\u0BDA\u0BDD\x03\x02\x02\x02\u0BDB\u0BD9\x03\x02\x02\x02\u0BDB" +
		"\u0BDC\x03\x02\x02\x02\u0BDC\u0BDE\x03\x02\x02\x02\u0BDD\u0BDB\x03\x02" +
		"\x02\x02\u0BDE\u0BE2\x07\u01A9\x02\x02\u0BDF\u0BE1\x05\x06\x04\x02\u0BE0" +
		"\u0BDF\x03\x02\x02\x02\u0BE1\u0BE4\x03\x02\x02\x02\u0BE2\u0BE0\x03\x02" +
		"\x02\x02\u0BE2\u0BE3\x03\x02\x02\x02\u0BE3\u0BEC\x03\x02\x02\x02\u0BE4" +
		"\u0BE2\x03\x02\x02\x02\u0BE5\u0BE9\x05\xBE`\x02\u0BE6\u0BE8\x05\x06\x04" +
		"\x02\u0BE7\u0BE6\x03\x02\x02\x02\u0BE8\u0BEB\x03\x02\x02\x02\u0BE9\u0BE7" +
		"\x03\x02\x02\x02\u0BE9\u0BEA\x03\x02\x02\x02\u0BEA\u0BED\x03\x02\x02\x02" +
		"\u0BEB\u0BE9\x03\x02\x02\x02\u0BEC\u0BE5\x03\x02\x02\x02\u0BEC\u0BED\x03" +
		"\x02\x02\x02\u0BED\u0BF5\x03\x02\x02\x02\u0BEE\u0BF2\x05\xC0a\x02\u0BEF" +
		"\u0BF1\x05\x06\x04\x02\u0BF0\u0BEF\x03\x02\x02\x02\u0BF1\u0BF4\x03\x02" +
		"\x02\x02\u0BF2\u0BF0\x03\x02\x02\x02\u0BF2\u0BF3\x03\x02\x02\x02\u0BF3" +
		"\u0BF6\x03\x02\x02\x02\u0BF4\u0BF2\x03\x02\x02\x02\u0BF5\u0BEE\x03\x02" +
		"\x02\x02\u0BF5\u0BF6\x03\x02\x02\x02\u0BF6\u0BFE\x03\x02\x02\x02\u0BF7" +
		"\u0BFB\x05\xC2b\x02\u0BF8\u0BFA\x05\x06\x04\x02\u0BF9\u0BF8\x03\x02\x02" +
		"\x02\u0BFA\u0BFD\x03\x02\x02\x02\u0BFB\u0BF9\x03\x02\x02\x02\u0BFB\u0BFC" +
		"\x03\x02\x02\x02\u0BFC\u0BFF\x03\x02\x02\x02\u0BFD\u0BFB\x03\x02\x02\x02" +
		"\u0BFE\u0BF7\x03\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF\u0C07\x03" +
		"\x02\x02\x02\u0C00\u0C04\x05\xC4c\x02\u0C01\u0C03\x05\x06\x04\x02\u0C02" +
		"\u0C01\x03\x02\x02\x02\u0C03\u0C06\x03\x02\x02\x02\u0C04\u0C02\x03\x02" +
		"\x02\x02\u0C04\u0C05\x03\x02\x02\x02\u0C05\u0C08\x03\x02\x02\x02\u0C06" +
		"\u0C04\x03\x02\x02\x02\u0C07\u0C00\x03\x02\x02\x02\u0C07\u0C08\x03\x02" +
		"\x02\x02\u0C08\u0C10\x03\x02\x02\x02\u0C09\u0C0D\x05\xC6d\x02\u0C0A\u0C0C" +
		"\x05\x06\x04\x02\u0C0B\u0C0A\x03\x02\x02\x02\u0C0C\u0C0F\x03\x02\x02\x02" +
		"\u0C0D\u0C0B\x03\x02\x02\x02\u0C0D\u0C0E\x03\x02\x02\x02\u0C0E\u0C11\x03" +
		"\x02\x02\x02\u0C0F\u0C0D\x03\x02\x02\x02\u0C10\u0C09\x03\x02\x02\x02\u0C10" +
		"\u0C11\x03\x02\x02\x02\u0C11\xBD\x03\x02\x02\x02\u0C12\u0C14\x07\xA4\x02" +
		"\x02\u0C13\u0C15\x05\x06\x04\x02\u0C14\u0C13\x03\x02\x02\x02\u0C15\u0C16" +
		"\x03\x02\x02\x02\u0C16\u0C14\x03\x02\x02\x02\u0C16\u0C17\x03\x02\x02\x02" +
		"\u0C17\u0C18\x03\x02\x02\x02\u0C18\u0C1C\x07\u013B\x02\x02\u0C19\u0C1B" +
		"\x05\x06\x04\x02\u0C1A\u0C19\x03\x02\x02\x02\u0C1B\u0C1E\x03\x02\x02\x02" +
		"\u0C1C\u0C1A\x03\x02\x02\x02\u0C1C\u0C1D\x03\x02\x02\x02\u0C1D\u0C1F\x03" +
		"\x02\x02\x02\u0C1E\u0C1C\x03\x02\x02\x02\u0C1F\u0C23\x07\u01A9\x02\x02" +
		"\u0C20\u0C22\x05\x06\x04\x02\u0C21\u0C20\x03\x02\x02\x02\u0C22\u0C25\x03" +
		"\x02\x02\x02\u0C23\u0C21\x03\x02\x02\x02\u0C23\u0C24\x03\x02\x02\x02\u0C24" +
		"\u0C4B\x03\x02\x02\x02\u0C25\u0C23\x03\x02\x02\x02\u0C26\u0C30\x05\xC8" +
		"e\x02\u0C27\u0C29\x05\x06\x04\x02\u0C28\u0C27\x03\x02\x02\x02\u0C29\u0C2C" +
		"\x03\x02\x02\x02\u0C2A\u0C28\x03\x02\x02\x02\u0C2A\u0C2B\x03\x02\x02\x02" +
		"\u0C2B\u0C2D\x03\x02\x02\x02\u0C2C\u0C2A\x03\x02\x02\x02\u0C2D\u0C2F\x05" +
		"\xD0i\x02\u0C2E\u0C2A\x03\x02\x02\x02\u0C2F\u0C32\x03\x02\x02\x02\u0C30" +
		"\u0C2E\x03\x02\x02\x02\u0C30\u0C31\x03\x02\x02\x02\u0C31\u0C42\x03\x02" +
		"\x02\x02\u0C32\u0C30\x03\x02\x02\x02\u0C33\u0C42\x05\xCCg\x02\u0C34\u0C3E" +
		"\x05\xCAf\x02\u0C35\u0C37\x05\x06\x04\x02\u0C36\u0C35\x03\x02\x02\x02" +
		"\u0C37\u0C3A\x03\x02\x02\x02\u0C38\u0C36\x03\x02\x02\x02\u0C38\u0C39\x03" +
		"\x02\x02\x02\u0C39\u0C3B\x03\x02\x02\x02\u0C3A\u0C38\x03\x02\x02\x02\u0C3B" +
		"\u0C3D\x05\xD0i\x02\u0C3C\u0C38\x03\x02\x02\x02\u0C3D\u0C40\x03\x02\x02" +
		"\x02\u0C3E\u0C3C\x03\x02\x02\x02\u0C3E\u0C3F\x03\x02\x02\x02\u0C3F\u0C42" +
		"\x03\x02\x02\x02\u0C40\u0C3E\x03\x02\x02\x02\u0C41\u0C26\x03\x02\x02\x02" +
		"\u0C41\u0C33\x03\x02\x02\x02\u0C41\u0C34\x03\x02\x02\x02\u0C42\u0C46\x03" +
		"\x02\x02\x02\u0C43\u0C45\x05\x06\x04\x02\u0C44\u0C43\x03\x02\x02\x02\u0C45" +
		"\u0C48\x03\x02\x02\x02\u0C46\u0C44\x03\x02\x02\x02\u0C46\u0C47\x03\x02" +
		"\x02\x02\u0C47\u0C4A\x03\x02\x02\x02\u0C48\u0C46\x03\x02\x02\x02\u0C49" +
		"\u0C41\x03\x02\x02\x02\u0C4A\u0C4D\x03\x02\x02\x02\u0C4B\u0C49\x03\x02" +
		"\x02\x02\u0C4B\u0C4C\x03\x02\x02\x02\u0C4C\xBF\x03\x02\x02\x02\u0C4D\u0C4B" +
		"\x03\x02\x02\x02\u0C4E\u0C50\x07\u0181\x02\x02\u0C4F\u0C51\x05\x06\x04" +
		"\x02\u0C50\u0C4F\x03\x02\x02\x02\u0C51\u0C52\x03\x02\x02\x02\u0C52\u0C50" +
		"\x03\x02\x02\x02\u0C52\u0C53\x03\x02\x02\x02\u0C53\u0C54\x03\x02\x02\x02" +
		"\u0C54\u0C58\x07\u013B\x02\x02\u0C55\u0C57\x05\x06\x04\x02\u0C56\u0C55" +
		"\x03\x02\x02\x02\u0C57\u0C5A\x03\x02\x02\x02\u0C58\u0C56\x03\x02\x02\x02" +
		"\u0C58\u0C59\x03\x02\x02\x02\u0C59\u0C5B\x03\x02\x02\x02\u0C5A\u0C58\x03" +
		"\x02\x02\x02\u0C5B\u0C5F\x07\u01A9\x02\x02\u0C5C\u0C5E\x05\x06\x04\x02" +
		"\u0C5D\u0C5C\x03\x02\x02\x02\u0C5E\u0C61\x03\x02\x02\x02\u0C5F\u0C5D\x03" +
		"\x02\x02\x02\u0C5F\u0C60\x03\x02\x02\x02\u0C60\u0C6B\x03\x02\x02\x02\u0C61" +
		"\u0C5F\x03\x02\x02\x02\u0C62\u0C66\x05\xD0i\x02\u0C63\u0C65\x05\x06\x04" +
		"\x02\u0C64\u0C63\x03\x02\x02\x02\u0C65\u0C68\x03\x02\x02\x02\u0C66\u0C64" +
		"\x03\x02\x02\x02\u0C66\u0C67\x03\x02\x02\x02\u0C67\u0C6A\x03\x02\x02\x02" +
		"\u0C68\u0C66\x03\x02\x02\x02\u0C69\u0C62\x03\x02\x02\x02\u0C6A\u0C6D\x03" +
		"\x02\x02\x02\u0C6B\u0C69\x03\x02\x02\x02\u0C6B\u0C6C\x03\x02\x02\x02\u0C6C" +
		"\xC1\x03\x02\x02\x02\u0C6D\u0C6B\x03\x02\x02\x02\u0C6E\u0C70\x07\xE0\x02" +
		"\x02\u0C6F\u0C71\x05\x06\x04\x02\u0C70\u0C6F\x03\x02\x02\x02\u0C71\u0C72" +
		"\x03\x02\x02\x02\u0C72\u0C70\x03\x02\x02\x02\u0C72\u0C73\x03\x02\x02\x02" +
		"\u0C73\u0C74\x03\x02\x02\x02\u0C74\u0C78\x07\u013B\x02\x02\u0C75\u0C77" +
		"\x05\x06\x04\x02\u0C76\u0C75\x03\x02\x02\x02\u0C77\u0C7A\x03\x02\x02\x02" +
		"\u0C78\u0C76\x03\x02\x02\x02\u0C78\u0C79\x03\x02\x02\x02\u0C79\u0C7B\x03" +
		"\x02\x02\x02\u0C7A\u0C78\x03\x02\x02\x02\u0C7B\u0C7F\x07\u01A9\x02\x02" +
		"\u0C7C\u0C7E\x05\x06\x04\x02\u0C7D\u0C7C\x03\x02\x02\x02\u0C7E\u0C81\x03" +
		"\x02\x02\x02\u0C7F\u0C7D\x03\x02\x02\x02\u0C7F\u0C80\x03\x02\x02\x02\u0C80" +
		"\u0C8B\x03\x02\x02\x02\u0C81\u0C7F\x03\x02\x02\x02\u0C82\u0C86\x05\xD0" +
		"i\x02\u0C83\u0C85\x05\x06\x04\x02\u0C84\u0C83\x03\x02\x02\x02\u0C85\u0C88" +
		"\x03\x02\x02\x02\u0C86\u0C84\x03\x02\x02\x02\u0C86\u0C87\x03\x02\x02\x02" +
		"\u0C87\u0C8A\x03\x02\x02\x02\u0C88\u0C86\x03\x02\x02\x02\u0C89\u0C82\x03" +
		"\x02\x02\x02\u0C8A\u0C8D\x03\x02\x02\x02\u0C8B\u0C89\x03\x02\x02\x02\u0C8B" +
		"\u0C8C\x03\x02\x02\x02\u0C8C\xC3\x03\x02\x02\x02\u0C8D\u0C8B\x03\x02\x02" +
		"\x02\u0C8E\u0C90\x07\u0128\x02\x02\u0C8F\u0C91\x05\x06\x04\x02\u0C90\u0C8F" +
		"\x03\x02\x02\x02\u0C91\u0C92\x03\x02\x02\x02\u0C92\u0C90\x03\x02\x02\x02" +
		"\u0C92\u0C93\x03\x02\x02\x02\u0C93\u0C94\x03\x02\x02\x02\u0C94\u0C98\x07" +
		"\u013B\x02\x02\u0C95\u0C97\x05\x06\x04\x02\u0C96\u0C95\x03\x02\x02\x02" +
		"\u0C97\u0C9A\x03\x02\x02\x02\u0C98\u0C96\x03\x02\x02\x02\u0C98\u0C99\x03" +
		"\x02\x02\x02\u0C99\u0C9B\x03\x02\x02\x02\u0C9A\u0C98\x03\x02\x02\x02\u0C9B" +
		"\u0C9F\x07\u01A9\x02\x02\u0C9C\u0C9E\x05\x06\x04\x02\u0C9D\u0C9C\x03\x02" +
		"\x02\x02\u0C9E\u0CA1\x03\x02\x02\x02\u0C9F\u0C9D\x03\x02\x02\x02\u0C9F" +
		"\u0CA0\x03\x02\x02\x02\u0CA0\u0CB7\x03\x02\x02\x02\u0CA1\u0C9F\x03\x02" +
		"\x02\x02\u0CA2\u0CAC\x05\xCCg\x02\u0CA3\u0CA5\x05\x06\x04\x02\u0CA4\u0CA3" +
		"\x03\x02\x02\x02\u0CA5\u0CA8\x03\x02\x02\x02\u0CA6\u0CA4\x03\x02\x02\x02" +
		"\u0CA6\u0CA7\x03\x02\x02\x02\u0CA7\u0CA9\x03\x02\x02\x02\u0CA8\u0CA6\x03" +
		"\x02\x02\x02\u0CA9\u0CAB\x05\xFE\x80\x02\u0CAA\u0CA6\x03\x02\x02\x02\u0CAB" +
		"\u0CAE\x03\x02\x02\x02\u0CAC\u0CAA\x03\x02\x02\x02\u0CAC\u0CAD\x03\x02" +
		"\x02\x02\u0CAD\u0CB2\x03\x02\x02\x02\u0CAE\u0CAC\x03\x02\x02\x02\u0CAF" +
		"\u0CB1\x05\x06\x04\x02\u0CB0\u0CAF\x03\x02\x02\x02\u0CB1\u0CB4\x03\x02" +
		"\x02\x02\u0CB2\u0CB0\x03\x02\x02\x02\u0CB2\u0CB3\x03\x02\x02\x02\u0CB3" +
		"\u0CB6\x03\x02\x02\x02\u0CB4\u0CB2\x03\x02\x02\x02\u0CB5\u0CA2\x03\x02" +
		"\x02\x02\u0CB6\u0CB9\x03\x02\x02\x02\u0CB7\u0CB5\x03\x02\x02\x02\u0CB7" +
		"\u0CB8\x03\x02\x02\x02\u0CB8\xC5\x03\x02\x02\x02\u0CB9\u0CB7\x03\x02\x02" +
		"\x02\u0CBA\u0CBC\x07\u0138\x02\x02\u0CBB\u0CBD\x05\x06\x04\x02\u0CBC\u0CBB" +
		"\x03\x02\x02\x02\u0CBD\u0CBE\x03\x02\x02\x02\u0CBE\u0CBC\x03\x02\x02\x02" +
		"\u0CBE\u0CBF\x03\x02\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u0CC4\x07" +
		"\u013B\x02\x02\u0CC1\u0CC3\x05\x06\x04\x02\u0CC2\u0CC1\x03\x02\x02\x02" +
		"\u0CC3\u0CC6\x03\x02\x02\x02\u0CC4\u0CC2\x03\x02\x02\x02\u0CC4\u0CC5\x03" +
		"\x02\x02\x02\u0CC5\u0CC7\x03\x02\x02\x02\u0CC6\u0CC4\x03\x02\x02\x02\u0CC7" +
		"\u0CCB\x07\u01A9\x02\x02\u0CC8\u0CCA\x05\x06\x04\x02\u0CC9\u0CC8\x03\x02" +
		"\x02\x02\u0CCA\u0CCD\x03\x02\x02\x02\u0CCB\u0CC9\x03\x02\x02\x02\u0CCB" +
		"\u0CCC\x03\x02\x02\x02\u0CCC\u0CD7\x03\x02\x02\x02\u0CCD\u0CCB\x03\x02" +
		"\x02\x02\u0CCE\u0CD2\x05\u015E\xB0\x02\u0CCF\u0CD1\x05\x06\x04\x02\u0CD0" +
		"\u0CCF\x03\x02\x02\x02\u0CD1\u0CD4\x03\x02\x02\x02\u0CD2\u0CD0\x03\x02" +
		"\x02\x02\u0CD2\u0CD3";
	private static readonly _serializedATNSegment8: string =
		"\x03\x02\x02\x02\u0CD3\u0CD6\x03\x02\x02\x02\u0CD4\u0CD2\x03\x02\x02\x02" +
		"\u0CD5\u0CCE\x03\x02\x02\x02\u0CD6\u0CD9\x03\x02\x02\x02\u0CD7\u0CD5\x03" +
		"\x02\x02\x02\u0CD7\u0CD8\x03\x02\x02\x02\u0CD8\xC7\x03\x02\x02\x02\u0CD9" +
		"\u0CD7\x03\x02\x02\x02\u0CDA\u0CDC\x07\xA3\x02\x02\u0CDB\u0CDD\x05\x06" +
		"\x04\x02\u0CDC\u0CDB\x03\x02\x02\x02\u0CDD\u0CDE\x03\x02\x02\x02\u0CDE" +
		"\u0CDC\x03\x02\x02\x02\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CE0\x03\x02" +
		"\x02\x02\u0CE0\u0CE4\x05\u0218\u010D\x02\u0CE1\u0CE3\x05\x06\x04\x02\u0CE2" +
		"\u0CE1\x03\x02\x02\x02\u0CE3\u0CE6\x03\x02\x02\x02\u0CE4\u0CE2\x03\x02" +
		"\x02\x02\u0CE4\u0CE5\x03\x02\x02\x02\u0CE5\u0CF0\x03\x02\x02\x02\u0CE6" +
		"\u0CE4\x03\x02\x02\x02\u0CE7\u0CEB\x05\xCEh\x02\u0CE8\u0CEA\x05\x06\x04" +
		"\x02\u0CE9\u0CE8\x03\x02\x02\x02\u0CEA\u0CED\x03\x02\x02\x02\u0CEB\u0CE9" +
		"\x03\x02\x02\x02\u0CEB\u0CEC\x03\x02\x02\x02\u0CEC\u0CEF\x03\x02\x02\x02" +
		"\u0CED\u0CEB\x03\x02\x02\x02\u0CEE\u0CE7\x03\x02\x02\x02\u0CEF\u0CF2\x03" +
		"\x02\x02\x02\u0CF0\u0CEE\x03\x02\x02\x02\u0CF0\u0CF1\x03\x02\x02\x02\u0CF1" +
		"\u0CF3\x03\x02\x02\x02\u0CF2\u0CF0\x03\x02\x02\x02\u0CF3\u0CF4\x07\u01A9" +
		"\x02\x02\u0CF4\xC9\x03\x02\x02\x02\u0CF5\u0CF7\x07\u0139\x02\x02\u0CF6" +
		"\u0CF8\x05\x06\x04\x02\u0CF7\u0CF6\x03\x02\x02\x02\u0CF8\u0CF9\x03\x02" +
		"\x02\x02\u0CF9\u0CF7\x03\x02\x02\x02\u0CF9\u0CFA\x03\x02\x02\x02\u0CFA" +
		"\u0CFB\x03\x02\x02\x02\u0CFB\u0CFF\x05\u0218\u010D\x02\u0CFC\u0CFE\x05" +
		"\x06\x04\x02\u0CFD\u0CFC\x03\x02\x02\x02\u0CFE\u0D01\x03\x02\x02\x02\u0CFF" +
		"\u0CFD\x03\x02\x02\x02\u0CFF\u0D00\x03\x02\x02\x02\u0D00\u0D0B\x03\x02" +
		"\x02\x02\u0D01\u0CFF\x03\x02\x02\x02\u0D02\u0D06\x05\u013A\x9E\x02\u0D03" +
		"\u0D05\x05\x06\x04\x02\u0D04\u0D03\x03\x02\x02\x02\u0D05\u0D08\x03\x02" +
		"\x02\x02\u0D06\u0D04\x03\x02\x02\x02\u0D06\u0D07\x03\x02\x02\x02\u0D07" +
		"\u0D0A\x03\x02\x02\x02\u0D08\u0D06\x03\x02\x02\x02\u0D09\u0D02\x03\x02" +
		"\x02\x02\u0D0A\u0D0D\x03\x02\x02\x02\u0D0B\u0D09\x03\x02\x02\x02\u0D0B" +
		"\u0D0C\x03\x02\x02\x02\u0D0C\u0D0E\x03\x02\x02\x02\u0D0D\u0D0B\x03\x02" +
		"\x02\x02\u0D0E\u0D0F\x07\u01A9\x02\x02\u0D0F\xCB\x03\x02\x02\x02\u0D10" +
		"\u0D12\x07\u011C\x02\x02\u0D11\u0D13\x05\x06\x04\x02\u0D12\u0D11\x03\x02" +
		"\x02\x02\u0D13\u0D14\x03\x02\x02\x02\u0D14\u0D12\x03\x02\x02\x02\u0D14" +
		"\u0D15\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D1A\x05\u013E" +
		"\xA0\x02\u0D17\u0D19\x05\x06\x04\x02\u0D18\u0D17\x03\x02\x02\x02\u0D19" +
		"\u0D1C\x03\x02\x02\x02\u0D1A\u0D18\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02" +
		"\x02\x02\u0D1B\u0D26\x03\x02\x02\x02\u0D1C\u0D1A\x03\x02\x02\x02\u0D1D" +
		"\u0D21\x05\u011C\x8F\x02\u0D1E\u0D20\x05\x06\x04\x02\u0D1F\u0D1E\x03\x02" +
		"\x02\x02\u0D20\u0D23\x03\x02\x02\x02\u0D21\u0D1F\x03\x02\x02\x02\u0D21" +
		"\u0D22\x03\x02\x02\x02\u0D22\u0D25\x03\x02\x02\x02\u0D23\u0D21\x03\x02" +
		"\x02\x02\u0D24\u0D1D\x03\x02\x02\x02\u0D25\u0D28\x03\x02\x02\x02\u0D26" +
		"\u0D24\x03\x02\x02\x02\u0D26\u0D27\x03\x02\x02\x02\u0D27\u0D29\x03\x02" +
		"\x02\x02\u0D28\u0D26\x03\x02\x02\x02\u0D29\u0D2A\x07\u01A9\x02\x02\u0D2A" +
		"\xCD\x03\x02\x02\x02\u0D2B\u0D2D\x07\xCF\x02\x02\u0D2C\u0D2E\x05\x06\x04" +
		"\x02\u0D2D\u0D2C\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D2D" +
		"\x03\x02\x02\x02\u0D2F\u0D30\x03\x02\x02\x02\u0D30\u0D32\x03\x02\x02\x02" +
		"\u0D31\u0D2B\x03\x02\x02\x02\u0D31\u0D32\x03\x02\x02\x02\u0D32\u0D33\x03" +
		"\x02\x02\x02\u0D33\u0D49\x07\xA1\x02\x02\u0D34\u0D36\x07\xCF\x02\x02\u0D35" +
		"\u0D37\x05\x06\x04\x02\u0D36\u0D35\x03\x02\x02\x02\u0D37\u0D38\x03\x02" +
		"\x02\x02\u0D38\u0D36\x03\x02\x02\x02\u0D38\u0D39\x03\x02\x02\x02\u0D39" +
		"\u0D3B\x03\x02\x02\x02\u0D3A\u0D34\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02" +
		"\x02\x02\u0D3B\u0D3C\x03\x02\x02\x02\u0D3C\u0D49\x07\xB6\x02\x02\u0D3D" +
		"\u0D49\x05\u020C\u0107\x02\u0D3E\u0D49\x05\u0154\xAB\x02\u0D3F\u0D49\x05" +
		"\u0152\xAA\x02\u0D40\u0D49\x05\u014E\xA8\x02\u0D41\u0D49\x05\u014A\xA6" +
		"\x02\u0D42\u0D49\x05\u0140\xA1\x02\u0D43\u0D49\x05\u013C\x9F\x02\u0D44" +
		"\u0D49\x05\u020A\u0106\x02\u0D45\u0D49\x05\u01F8\xFD\x02\u0D46\u0D49\x05" +
		"\u01F4\xFB\x02\u0D47\u0D49\x05\u01F0\xF9\x02\u0D48\u0D31\x03\x02\x02\x02" +
		"\u0D48\u0D3A\x03\x02\x02\x02\u0D48\u0D3D\x03\x02\x02\x02\u0D48\u0D3E\x03" +
		"\x02\x02\x02\u0D48\u0D3F\x03\x02\x02\x02\u0D48\u0D40\x03\x02\x02\x02\u0D48" +
		"\u0D41\x03\x02\x02\x02\u0D48\u0D42\x03\x02\x02\x02\u0D48\u0D43\x03\x02" +
		"\x02\x02\u0D48\u0D44\x03\x02\x02\x02\u0D48\u0D45\x03\x02\x02\x02\u0D48" +
		"\u0D46\x03\x02\x02\x02\u0D48\u0D47\x03\x02\x02\x02\u0D49\xCF\x03\x02\x02" +
		"\x02\u0D4A\u0D54\x05\xD2j\x02\u0D4B\u0D4D\x05\x06\x04\x02\u0D4C\u0D4B" +
		"\x03\x02\x02\x02\u0D4D\u0D50\x03\x02\x02\x02\u0D4E\u0D4C\x03\x02\x02\x02" +
		"\u0D4E\u0D4F\x03\x02\x02\x02\u0D4F\u0D51\x03\x02\x02\x02\u0D50\u0D4E\x03" +
		"\x02\x02\x02\u0D51\u0D53\x05\xD2j\x02\u0D52\u0D4E\x03\x02\x02\x02\u0D53" +
		"\u0D56\x03\x02\x02\x02\u0D54\u0D52\x03\x02\x02\x02\u0D54\u0D55\x03\x02" +
		"\x02\x02\u0D55\xD1\x03\x02\x02\x02\u0D56\u0D54\x03\x02\x02\x02\u0D57\u0D61" +
		"\x05\xD4k\x02\u0D58\u0D5A\x05\x06\x04\x02\u0D59\u0D58\x03\x02\x02\x02" +
		"\u0D5A\u0D5B\x03\x02\x02\x02\u0D5B\u0D59\x03\x02\x02\x02\u0D5B\u0D5C\x03" +
		"\x02\x02\x02\u0D5C\u0D5F\x03\x02\x02\x02\u0D5D\u0D60\x05\u0138\x9D\x02" +
		"\u0D5E\u0D60\x07\xA7\x02\x02\u0D5F\u0D5D\x03\x02\x02\x02\u0D5F\u0D5E\x03" +
		"\x02\x02\x02\u0D60\u0D62\x03\x02\x02\x02\u0D61\u0D59\x03\x02\x02\x02\u0D61" +
		"\u0D62\x03\x02\x02\x02\u0D62\u0D70\x03\x02\x02\x02\u0D63\u0D65\x05\x06" +
		"\x04\x02\u0D64\u0D63\x03\x02\x02\x02\u0D65\u0D66\x03\x02\x02\x02\u0D66" +
		"\u0D64\x03\x02\x02\x02\u0D66\u0D67\x03\x02\x02\x02\u0D67\u0D68\x03\x02" +
		"\x02\x02\u0D68\u0D6A\x07\u0120\x02\x02\u0D69\u0D6B\x05\x06\x04\x02\u0D6A" +
		"\u0D69\x03\x02\x02\x02\u0D6B\u0D6C\x03\x02\x02\x02\u0D6C\u0D6A\x03\x02" +
		"\x02\x02\u0D6C\u0D6D\x03\x02\x02\x02\u0D6D\u0D6E\x03\x02\x02\x02\u0D6E" +
		"\u0D6F\x05\u0136\x9C\x02\u0D6F\u0D71\x03\x02\x02\x02\u0D70\u0D64\x03\x02" +
		"\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D7B\x03\x02\x02\x02\u0D72" +
		"\u0D74\x05\x06\x04\x02\u0D73\u0D72\x03\x02\x02\x02\u0D74\u0D75\x03\x02" +
		"\x02\x02\u0D75\u0D73\x03\x02\x02\x02\u0D75\u0D76\x03\x02\x02\x02\u0D76" +
		"\u0D77\x03\x02\x02\x02\u0D77\u0D78\x05\xD6l\x02\u0D78\u0D7A\x03\x02\x02" +
		"\x02\u0D79\u0D73\x03\x02\x02\x02\u0D7A\u0D7D\x03\x02\x02\x02\u0D7B\u0D79" +
		"\x03\x02\x02\x02\u0D7B\u0D7C\x03\x02\x02\x02\u0D7C\u0D7E\x03\x02\x02\x02" +
		"\u0D7D\u0D7B\x03\x02\x02\x02\u0D7E\u0D7F\x07\u01A9\x02\x02\u0D7F\xD3\x03" +
		"\x02\x02\x02\u0D80\u0D81\x07\u01AD\x02\x02\u0D81\xD5\x03\x02\x02\x02\u0D82" +
		"\u0D84\x07\xCF\x02\x02\u0D83\u0D85\x05\x06\x04\x02\u0D84\u0D83\x03\x02" +
		"\x02\x02\u0D85\u0D86\x03\x02\x02\x02\u0D86\u0D84\x03\x02\x02\x02\u0D86" +
		"\u0D87\x03\x02\x02\x02\u0D87\u0D89\x03\x02\x02\x02\u0D88\u0D82\x03\x02" +
		"\x02\x02\u0D88\u0D89\x03\x02\x02\x02\u0D89\u0D8A\x03\x02\x02\x02\u0D8A" +
		"\u0DBF\x07\xA1\x02\x02\u0D8B\u0D8D\x07\xCF\x02\x02\u0D8C\u0D8E\x05\x06" +
		"\x04\x02\u0D8D\u0D8C\x03\x02\x02\x02\u0D8E\u0D8F\x03\x02\x02\x02\u0D8F" +
		"\u0D8D\x03\x02\x02\x02\u0D8F\u0D90\x03\x02\x02\x02\u0D90\u0D92\x03\x02" +
		"\x02\x02\u0D91\u0D8B\x03\x02\x02\x02\u0D91\u0D92\x03\x02\x02\x02\u0D92" +
		"\u0D93\x03\x02\x02\x02\u0D93\u0DBF\x07\xB6\x02\x02\u0D94\u0DBF\x05\u0130" +
		"\x99\x02\u0D95\u0DBF\x05\u012C\x97\x02\u0D96\u0DBF\x05\u0104\x83\x02\u0D97" +
		"\u0DBF\x05\xECw\x02\u0D98\u0DA0\t\t\x02\x02\u0D99\u0D9B\x05\x06\x04\x02" +
		"\u0D9A\u0D99\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C\u0D9A\x03" +
		"\x02\x02\x02\u0D9C\u0D9D\x03\x02\x02\x02\u0D9D\u0D9E\x03\x02\x02\x02\u0D9E" +
		"\u0D9F\t\n\x02\x02\u0D9F\u0DA1\x03\x02\x02\x02\u0DA0\u0D9A\x03\x02\x02" +
		"\x02\u0DA0\u0DA1\x03\x02\x02\x02\u0DA1\u0DBF\x03\x02\x02\x02\u0DA2\u0DAA" +
		"\t\v\x02\x02\u0DA3\u0DA5\x05\x06\x04\x02\u0DA4\u0DA3\x03\x02\x02\x02\u0DA5" +
		"\u0DA6\x03\x02\x02\x02\u0DA6\u0DA4\x03\x02\x02\x02\u0DA6\u0DA7\x03\x02" +
		"\x02\x02\u0DA7\u0DA8\x03\x02\x02\x02\u0DA8\u0DA9\x07\u0135\x02\x02\u0DA9" +
		"\u0DAB\x03\x02\x02\x02\u0DAA\u0DA4\x03\x02\x02\x02\u0DAA\u0DAB\x03\x02" +
		"\x02\x02\u0DAB\u0DBF\x03\x02\x02\x02\u0DAC\u0DAE\x07+\x02\x02\u0DAD\u0DAF" +
		"\x05\x06\x04\x02\u0DAE\u0DAD\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02" +
		"\u0DB0\u0DAE\x03\x02\x02\x02\u0DB0\u0DB1\x03\x02\x02\x02\u0DB1\u0DB8\x03" +
		"\x02\x02\x02\u0DB2\u0DB4\x07\u017D\x02\x02\u0DB3\u0DB5\x05\x06\x04\x02" +
		"\u0DB4\u0DB3\x03\x02\x02\x02\u0DB5\u0DB6\x03\x02\x02\x02\u0DB6\u0DB4\x03" +
		"\x02\x02\x02\u0DB6\u0DB7\x03\x02\x02\x02\u0DB7\u0DB9\x03\x02\x02\x02\u0DB8" +
		"\u0DB2\x03\x02\x02\x02\u0DB8\u0DB9\x03\x02\x02\x02\u0DB9\u0DBA\x03\x02" +
		"\x02\x02\u0DBA\u0DBB\x07\u0185\x02\x02\u0DBB\u0DBF\x03\x02\x02\x02\u0DBC" +
		"\u0DBF\x05\xDEp\x02\u0DBD\u0DBF\x05\xD8m\x02\u0DBE\u0D88\x03\x02\x02\x02" +
		"\u0DBE\u0D91\x03\x02\x02\x02\u0DBE\u0D94\x03\x02\x02\x02\u0DBE\u0D95\x03" +
		"\x02\x02\x02\u0DBE\u0D96\x03\x02\x02\x02\u0DBE\u0D97\x03\x02\x02\x02\u0DBE" +
		"\u0D98\x03\x02\x02\x02\u0DBE\u0DA2\x03\x02\x02\x02\u0DBE\u0DAC\x03\x02" +
		"\x02\x02\u0DBE\u0DBC\x03\x02\x02\x02\u0DBE\u0DBD\x03\x02\x02\x02\u0DBF" +
		"\xD7\x03\x02\x02\x02\u0DC0\u0DC2\x07\u0125\x02\x02\u0DC1\u0DC3\x05\x06" +
		"\x04\x02\u0DC2\u0DC1\x03\x02\x02\x02\u0DC3\u0DC4\x03\x02\x02\x02\u0DC4" +
		"\u0DC2\x03\x02\x02\x02\u0DC4\u0DC5\x03\x02\x02\x02\u0DC5\u0DC6\x03\x02" +
		"\x02\x02\u0DC6\u0DD4\x05\xDAn\x02\u0DC7\u0DC9\x05\x06\x04\x02\u0DC8\u0DC7" +
		"\x03\x02\x02\x02\u0DC9\u0DCA\x03\x02\x02\x02\u0DCA\u0DC8\x03\x02\x02\x02" +
		"\u0DCA\u0DCB\x03\x02\x02\x02\u0DCB\u0DCC\x03\x02\x02\x02\u0DCC\u0DCE\t" +
		"\f\x02\x02\u0DCD\u0DCF\x05\x06\x04\x02\u0DCE\u0DCD\x03\x02\x02\x02\u0DCF" +
		"\u0DD0\x03\x02\x02\x02\u0DD0\u0DCE\x03\x02\x02\x02\u0DD0\u0DD1\x03\x02" +
		"\x02\x02\u0DD1\u0DD2\x03\x02\x02\x02\u0DD2\u0DD3\x05\xDCo\x02\u0DD3\u0DD5" +
		"\x03\x02\x02\x02\u0DD4\u0DC8\x03\x02\x02\x02\u0DD4\u0DD5\x03\x02\x02\x02" +
		"\u0DD5\xD9\x03\x02\x02\x02\u0DD6\u0DD7\x05\u01AE\xD8\x02\u0DD7\xDB\x03" +
		"\x02\x02\x02\u0DD8\u0DD9\x05\u01AE\xD8\x02\u0DD9\xDD\x03\x02\x02\x02\u0DDA" +
		"\u0DE2\x07\u0179\x02\x02\u0DDB\u0DDD\x05\x06\x04\x02\u0DDC\u0DDB\x03\x02" +
		"\x02\x02\u0DDD\u0DDE\x03\x02\x02\x02\u0DDE\u0DDC\x03\x02\x02\x02\u0DDE" +
		"\u0DDF\x03\x02\x02\x02\u0DDF\u0DE0\x03\x02\x02\x02\u0DE0\u0DE1\x07\xCF" +
		"\x02\x02\u0DE1\u0DE3\x03\x02\x02\x02\u0DE2\u0DDC\x03\x02\x02\x02\u0DE2" +
		"\u0DE3\x03\x02\x02\x02\u0DE3\u0DEF\x03\x02\x02\x02\u0DE4\u0DEC\x07\u017A" +
		"\x02\x02\u0DE5\u0DE7\x05\x06\x04\x02\u0DE6\u0DE5\x03\x02\x02\x02\u0DE7" +
		"\u0DE8\x03\x02\x02\x02\u0DE8\u0DE6\x03\x02\x02\x02\u0DE8\u0DE9\x03\x02" +
		"\x02\x02\u0DE9\u0DEA\x03\x02\x02\x02\u0DEA\u0DEB\x07\x15\x02\x02\u0DEB" +
		"\u0DED\x03\x02\x02\x02\u0DEC\u0DE6\x03\x02\x02\x02\u0DEC\u0DED\x03\x02" +
		"\x02\x02\u0DED\u0DEF\x03\x02\x02\x02\u0DEE\u0DDA\x03\x02\x02\x02\u0DEE" +
		"\u0DE4\x03\x02\x02\x02\u0DEF\u0DF1\x03\x02\x02\x02\u0DF0\u0DF2\x05\x06" +
		"\x04\x02\u0DF1\u0DF0\x03\x02\x02\x02\u0DF2\u0DF3\x03\x02\x02\x02\u0DF3" +
		"\u0DF1\x03\x02\x02\x02\u0DF3\u0DF4\x03\x02\x02\x02\u0DF4\u0DF5\x03\x02" +
		"\x02\x02\u0DF5\u0DFF\x05\xE0q\x02\u0DF6\u0DF8\x05\x06\x04\x02\u0DF7\u0DF6" +
		"\x03\x02\x02\x02\u0DF8\u0DF9\x03\x02\x02\x02\u0DF9\u0DF7\x03\x02\x02\x02" +
		"\u0DF9\u0DFA\x03\x02\x02\x02\u0DFA\u0DFB\x03\x02\x02\x02\u0DFB\u0DFC\x05" +
		"\xE0q\x02\u0DFC\u0DFE\x03\x02\x02\x02\u0DFD\u0DF7\x03\x02\x02\x02\u0DFE" +
		"\u0E01\x03\x02\x02\x02\u0DFF\u0DFD\x03\x02\x02\x02\u0DFF\u0E00\x03\x02" +
		"\x02\x02\u0E00\xDF\x03\x02\x02\x02\u0E01\u0DFF\x03\x02\x02\x02\u0E02\u0E0A" +
		"\x05\xE2r\x02\u0E03\u0E05\x05\x06\x04\x02\u0E04\u0E03\x03\x02\x02\x02" +
		"\u0E05\u0E06\x03\x02\x02\x02\u0E06\u0E04\x03\x02\x02\x02\u0E06\u0E07\x03" +
		"\x02\x02\x02\u0E07\u0E08\x03\x02\x02\x02\u0E08\u0E09\x05\xE4s\x02\u0E09" +
		"\u0E0B\x03\x02\x02\x02\u0E0A\u0E04\x03\x02\x02\x02\u0E0A\u0E0B\x03\x02" +
		"\x02\x02\u0E0B\xE1\x03\x02\x02\x02\u0E0C\u0E1E\x05\xEAv\x02\u0E0D\u0E0F" +
		"\x07\u0122\x02\x02\u0E0E\u0E10\x05\x06\x04\x02\u0E0F\u0E0E\x03\x02\x02" +
		"\x02\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E0F\x03\x02\x02\x02\u0E11\u0E12" +
		"\x03\x02\x02\x02\u0E12\u0E13\x03\x02\x02\x02\u0E13\u0E14\x05\xE8u\x02" +
		"\u0E14\u0E1E\x03\x02\x02\x02\u0E15\u0E17\x07\xA1\x02\x02\u0E16\u0E18\x05" +
		"\x06\x04\x02\u0E17\u0E16\x03\x02\x02\x02\u0E18\u0E19\x03\x02\x02\x02\u0E19" +
		"\u0E17\x03\x02\x02\x02\u0E19\u0E1A\x03\x02\x02\x02\u0E1A\u0E1B\x03\x02" +
		"\x02\x02\u0E1B\u0E1C\x05\xE6t\x02\u0E1C\u0E1E\x03\x02\x02\x02\u0E1D\u0E0C" +
		"\x03\x02\x02\x02\u0E1D\u0E0D\x03\x02\x02\x02\u0E1D\u0E15\x03\x02\x02\x02" +
		"\u0E1E\xE3\x03\x02\x02\x02\u0E1F\u0E21\t\f\x02\x02\u0E20\u0E22\x05\x06" +
		"\x04\x02\u0E21\u0E20\x03\x02\x02\x02\u0E22\u0E23\x03\x02\x02\x02\u0E23" +
		"\u0E21\x03\x02\x02\x02\u0E23\u0E24\x03\x02\x02\x02\u0E24\u0E25\x03\x02" +
		"\x02\x02\u0E25\u0E26\x05\xE2r\x02\u0E26\xE5\x03\x02\x02\x02\u0E27\u0E28" +
		"\x07\u01AF\x02\x02\u0E28\xE7\x03\x02\x02\x02\u0E29\u0E2A\x05\u01AE\xD8" +
		"\x02\u0E2A\xE9\x03\x02\x02\x02\u0E2B\u0E2C\t\r\x02\x02\u0E2C\xEB\x03\x02" +
		"\x02\x02\u0E2D\u0E2F\x07\xF7\x02\x02\u0E2E\u0E30\x05\x06\x04\x02\u0E2F" +
		"\u0E2E\x03\x02\x02\x02\u0E30\u0E31\x03\x02\x02\x02\u0E31\u0E2F\x03\x02" +
		"\x02\x02\u0E31\u0E32\x03\x02\x02\x02\u0E32\u0E33\x03\x02\x02\x02\u0E33" +
		"\u0E3D\x05\xF6|\x02\u0E34\u0E36\x05\x06\x04\x02\u0E35\u0E34\x03\x02\x02" +
		"\x02\u0E36\u0E37\x03\x02\x02\x02\u0E37\u0E35\x03\x02\x02\x02\u0E37\u0E38" +
		"\x03\x02\x02\x02\u0E38\u0E39\x03\x02\x02\x02\u0E39\u0E3A\x05\xF2z\x02" +
		"\u0E3A\u0E3C\x03\x02\x02\x02\u0E3B\u0E35\x03\x02\x02\x02\u0E3C\u0E3F\x03" +
		"\x02\x02\x02\u0E3D\u0E3B\x03\x02\x02\x02\u0E3D\u0E3E\x03\x02\x02\x02\u0E3E" +
		"\u0E47\x03\x02\x02\x02\u0E3F\u0E3D\x03\x02\x02\x02\u0E40\u0E42\x05\x06" +
		"\x04\x02\u0E41\u0E40\x03\x02\x02\x02\u0E42\u0E43\x03\x02\x02\x02\u0E43" +
		"\u0E41\x03\x02\x02\x02\u0E43\u0E44\x03\x02\x02\x02\u0E44\u0E45\x03\x02" +
		"\x02\x02\u0E45\u0E46\x05\xEEx\x02\u0E46\u0E48\x03\x02\x02\x02\u0E47\u0E41" +
		"\x03\x02\x02\x02\u0E47\u0E48\x03\x02\x02\x02\u0E48\xED\x03\x02\x02\x02" +
		"\u0E49\u0E4B\x07\xC5\x02\x02\u0E4A\u0E4C\x05\x06\x04\x02\u0E4B\u0E4A\x03" +
		"\x02\x02\x02\u0E4C\u0E4D\x03\x02\x02\x02\u0E4D\u0E4B\x03\x02\x02\x02\u0E4D" +
		"\u0E4E\x03\x02\x02\x02\u0E4E\u0E55\x03\x02\x02\x02\u0E4F\u0E51\x071\x02" +
		"\x02\u0E50\u0E52\x05\x06\x04\x02\u0E51\u0E50\x03\x02\x02\x02\u0E52\u0E53" +
		"\x03\x02\x02\x02\u0E53\u0E51\x03\x02\x02\x02\u0E53\u0E54\x03\x02\x02\x02" +
		"\u0E54\u0E56\x03\x02\x02\x02\u0E55\u0E4F\x03\x02\x02\x02\u0E55\u0E56\x03" +
		"\x02\x02\x02\u0E56\u0E57\x03\x02\x02\x02\u0E57\u0E61\x05\xF0y\x02\u0E58" +
		"\u0E5A\x05\x06\x04\x02\u0E59\u0E58\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02" +
		"\x02\x02\u0E5B\u0E59\x03\x02\x02\x02\u0E5B\u0E5C\x03\x02\x02\x02\u0E5C" +
		"\u0E5D\x03\x02\x02\x02\u0E5D\u0E5E\x05\xF0y\x02\u0E5E\u0E60\x03\x02\x02" +
		"\x02\u0E5F\u0E59\x03\x02\x02\x02\u0E60\u0E63\x03\x02\x02\x02\u0E61\u0E5F" +
		"\x03\x02\x02\x02\u0E61\u0E62\x03\x02\x02\x02\u0E62\xEF\x03\x02\x02\x02" +
		"\u0E63\u0E61\x03\x02\x02\x02\u0E64\u0E65\x07\u01AF\x02\x02\u0E65\xF1\x03" +
		"\x02\x02\x02\u0E66\u0E68\t\x0E\x02\x02\u0E67\u0E69\x05\x06\x04\x02\u0E68" +
		"\u0E67\x03\x02\x02\x02\u0E69\u0E6A\x03\x02\x02\x02\u0E6A\u0E68\x03\x02" +
		"\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02\u0E6B\u0E72\x03\x02\x02\x02\u0E6C" +
		"\u0E6E\x07\xD4\x02\x02\u0E6D\u0E6F\x05\x06\x04\x02\u0E6E\u0E6D\x03\x02" +
		"\x02\x02\u0E6F\u0E70\x03\x02\x02\x02\u0E70\u0E6E\x03\x02\x02\x02\u0E70" +
		"\u0E71\x03\x02\x02\x02\u0E71\u0E73\x03\x02\x02\x02\u0E72\u0E6C\x03\x02" +
		"\x02\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73\u0E7A\x03\x02\x02\x02\u0E74" +
		"\u0E76\x07\xCF\x02\x02\u0E75\u0E77\x05\x06\x04\x02\u0E76\u0E75\x03\x02" +
		"\x02\x02\u0E77\u0E78\x03\x02\x02\x02\u0E78\u0E76\x03\x02\x02\x02\u0E78" +
		"\u0E79\x03\x02\x02\x02\u0E79\u0E7B\x03\x02\x02\x02\u0E7A\u0E74\x03\x02" +
		"\x02\x02\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0E7C\x03\x02\x02\x02\u0E7C" +
		"\u0E86\x05\xF4{\x02\u0E7D\u0E7F\x05\x06\x04\x02\u0E7E\u0E7D\x03\x02\x02" +
		"\x02\u0E7F\u0E80\x03\x02\x02\x02\u0E80\u0E7E\x03\x02\x02\x02\u0E80\u0E81" +
		"\x03\x02\x02\x02\u0E81\u0E82\x03\x02\x02\x02\u0E82\u0E83\x05\xF4{\x02" +
		"\u0E83\u0E85\x03\x02\x02\x02\u0E84\u0E7E\x03\x02\x02\x02\u0E85\u0E88\x03" +
		"\x02\x02\x02\u0E86\u0E84\x03\x02\x02\x02\u0E86\u0E87\x03\x02\x02\x02\u0E87" +
		"\xF3\x03\x02\x02\x02\u0E88\u0E86\x03\x02\x02\x02\u0E89\u0E8A\x05\u01AE" +
		"\xD8\x02\u0E8A\xF5\x03\x02\x02\x02\u0E8B\u0E8D\x05\xF8}\x02\u0E8C\u0E8E" +
		"\x05\x06\x04\x02\u0E8D\u0E8C\x03\x02\x02\x02\u0E8E\u0E8F\x03\x02\x02\x02" +
		"\u0E8F\u0E8D\x03\x02\x02\x02\u0E8F\u0E90\x03\x02\x02\x02\u0E90\u0E91\x03" +
		"\x02\x02\x02\u0E91\u0E92\x07\u0168\x02\x02\u0E92\u0EBC\x03\x02\x02\x02" +
		"\u0E93\u0E95\x05\xFA~\x02\u0E94\u0E96\x05\x06\x04\x02\u0E95\u0E94\x03" +
		"\x02\x02\x02\u0E96\u0E97\x03\x02\x02\x02\u0E97\u0E95\x03\x02\x02\x02\u0E97" +
		"\u0E98\x03\x02\x02\x02\u0E98\u0E99\x03\x02\x02\x02\u0E99\u0E9B\x07\u0169" +
		"\x02\x02\u0E9A\u0E9C\x05\x06\x04\x02\u0E9B\u0E9A\x03\x02\x02\x02\u0E9C" +
		"\u0E9D\x03\x02\x02\x02\u0E9D\u0E9B\x03\x02\x02\x02\u0E9D\u0E9E\x03\x02" +
		"\x02\x02\u0E9E\u0E9F\x03\x02\x02\x02\u0E9F\u0EA1\x05\xFC\x7F\x02\u0EA0" +
		"\u0EA2\x05\x06\x04\x02\u0EA1\u0EA0\x03\x02\x02\x02\u0EA2\u0EA3\x03\x02" +
		"\x02\x02\u0EA3\u0EA1\x03\x02\x02\x02\u0EA3\u0EA4\x03\x02\x02\x02\u0EA4" +
		"\u0EA5\x03\x02\x02\x02\u0EA5\u0EA7\x07\u0168\x02\x02\u0EA6\u0EA8\x05\x06" +
		"\x04\x02\u0EA7\u0EA6\x03\x02\x02\x02\u0EA8\u0EA9\x03\x02\x02\x02\u0EA9" +
		"\u0EA7\x03\x02\x02\x02\u0EA9\u0EAA\x03\x02\x02\x02\u0EAA\u0EAB\x03\x02" +
		"\x02\x02\u0EAB\u0EAD\x07o\x02\x02\u0EAC\u0EAE\x05\x06\x04\x02\u0EAD\u0EAC" +
		"\x03\x02\x02\x02\u0EAE\u0EAF\x03\x02\x02\x02\u0EAF\u0EAD\x03\x02\x02\x02" +
		"\u0EAF\u0EB0\x03\x02\x02\x02\u0EB0\u0EB7\x03\x02\x02\x02\u0EB1\u0EB3\x07" +
		"\xFB\x02\x02\u0EB2\u0EB4\x05\x06\x04\x02\u0EB3\u0EB2\x03\x02\x02\x02\u0EB4" +
		"\u0EB5\x03\x02\x02\x02\u0EB5\u0EB3\x03\x02\x02\x02\u0EB5\u0EB6\x03\x02" +
		"\x02\x02\u0EB6\u0EB8\x03\x02\x02\x02\u0EB7\u0EB1\x03\x02\x02\x02\u0EB7" +
		"\u0EB8\x03\x02\x02\x02\u0EB8\u0EB9\x03\x02\x02\x02\u0EB9\u0EBA\x05\u0158" +
		"\xAD\x02\u0EBA\u0EBC\x03\x02\x02\x02\u0EBB\u0E8B\x03\x02\x02\x02\u0EBB" +
		"\u0E93\x03\x02\x02\x02\u0EBC\xF7\x03\x02\x02\x02\u0EBD\u0EBE\x07\u01AD" +
		"\x02\x02\u0EBE\xF9\x03\x02\x02\x02\u0EBF\u0EC0\x07\u01AD\x02\x02\u0EC0" +
		"\xFB\x03\x02\x02\x02\u0EC1\u0EC2\x07\u01AD\x02\x02\u0EC2\xFD\x03\x02\x02" +
		"\x02\u0EC3\u0ECD\x05\u0100\x81\x02\u0EC4\u0EC6\x05\x06\x04\x02\u0EC5\u0EC4" +
		"\x03\x02\x02\x02\u0EC6\u0EC9\x03\x02\x02\x02\u0EC7\u0EC5\x03\x02\x02\x02" +
		"\u0EC7\u0EC8\x03\x02\x02\x02\u0EC8\u0ECA\x03\x02\x02\x02\u0EC9\u0EC7\x03" +
		"\x02\x02\x02\u0ECA\u0ECC\x05\u0100\x81\x02\u0ECB\u0EC7\x03\x02\x02\x02" +
		"\u0ECC\u0ECF\x03\x02\x02\x02\u0ECD\u0ECB\x03\x02\x02\x02\u0ECD\u0ECE\x03" +
		"\x02\x02\x02\u0ECE\xFF\x03\x02\x02\x02\u0ECF\u0ECD\x03\x02\x02\x02\u0ED0" +
		"\u0ED8\x05\xD4k\x02\u0ED1\u0ED3\x05\x06\x04\x02\u0ED2\u0ED1\x03\x02\x02" +
		"\x02\u0ED3\u0ED4\x03\x02\x02\x02\u0ED4\u0ED2\x03\x02\x02\x02\u0ED4\u0ED5" +
		"\x03\x02\x02\x02\u0ED5\u0ED6\x03\x02\x02\x02\u0ED6\u0ED7\x05\u0138\x9D" +
		"\x02\u0ED7\u0ED9\x03\x02\x02\x02\u0ED8\u0ED2\x03\x02\x02\x02\u0ED8\u0ED9" +
		"\x03\x02\x02\x02\u0ED9\u0EE3\x03\x02\x02\x02\u0EDA\u0EDC\x05\x06\x04\x02" +
		"\u0EDB\u0EDA\x03\x02\x02\x02\u0EDC\u0EDD\x03\x02\x02\x02\u0EDD\u0EDB\x03" +
		"\x02\x02\x02\u0EDD\u0EDE\x03\x02\x02\x02\u0EDE\u0EDF\x03\x02\x02\x02\u0EDF" +
		"\u0EE0\x05\u0102\x82\x02\u0EE0\u0EE2\x03\x02\x02\x02\u0EE1\u0EDB\x03\x02" +
		"\x02\x02\u0EE2\u0EE5\x03\x02\x02\x02\u0EE3\u0EE1\x03\x02\x02\x02\u0EE3" +
		"\u0EE4\x03\x02\x02\x02\u0EE4\u0EE6\x03\x02\x02\x02\u0EE5\u0EE3\x03\x02" +
		"\x02\x02\u0EE6\u0EE7\x07\u01A9\x02\x02\u0EE7\u0101\x03\x02\x02\x02\u0EE8" +
		"\u0EEA\x07\xDD\x02\x02\u0EE9\u0EEB\x05\x06\x04\x02\u0EEA\u0EE9\x03\x02" +
		"\x02\x02\u0EEB\u0EEC\x03\x02\x02\x02\u0EEC\u0EEA\x03\x02\x02\x02\u0EEC" +
		"\u0EED\x03\x02\x02\x02\u0EED\u0EF4\x03\x02\x02\x02\u0EEE\u0EF0\x07\xF4" +
		"\x02\x02\u0EEF\u0EF1\x05\x06\x04\x02\u0EF0\u0EEF\x03\x02\x02\x02\u0EF1" +
		"\u0EF2\x03\x02\x02\x02\u0EF2\u0EF0\x03\x02\x02\x02\u0EF2\u0EF3\x03\x02" +
		"\x02\x02\u0EF3\u0EF5\x03\x02\x02\x02\u0EF4\u0EEE\x03\x02\x02\x02\u0EF4" +
		"\u0EF5\x03\x02\x02\x02\u0EF5\u0EFC\x03\x02\x02\x02\u0EF6\u0EF8\x07\xCF" +
		"\x02\x02\u0EF7\u0EF9\x05\x06\x04\x02\u0EF8\u0EF7\x03\x02\x02\x02\u0EF9" +
		"\u0EFA\x03\x02\x02\x02\u0EFA\u0EF8\x03\x02\x02\x02\u0EFA\u0EFB\x03\x02" +
		"\x02\x02\u0EFB\u0EFD\x03\x02\x02\x02\u0EFC\u0EF6\x03\x02\x02\x02\u0EFC" +
		"\u0EFD\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02\x02\x02\u0EFE\u0EFF\x05\u0118" +
		"\x8D\x02\u0EFF\u0F97\x03\x02\x02\x02\u0F00\u0F02\x07\xF1\x02\x02\u0F01" +
		"\u0F03\x05\x06\x04\x02\u0F02\u0F01\x03\x02\x02\x02\u0F03\u0F04\x03\x02" +
		"\x02\x02\u0F04\u0F02\x03\x02\x02\x02\u0F04\u0F05\x03\x02\x02\x02\u0F05" +
		"\u0F06\x03\x02\x02\x02\u0F06\u0F08\x07\xB9\x02\x02\u0F07\u0F09\x05\x06" +
		"\x04\x02\u0F08\u0F07\x03\x02\x02\x02\u0F09\u0F0A\x03\x02\x02\x02\u0F0A" +
		"\u0F08\x03\x02\x02\x02\u0F0A\u0F0B\x03\x02\x02\x02\u0F0B\u0F12\x03\x02" +
		"\x02\x02\u0F0C\u0F0E\x07\xCF\x02\x02\u0F0D\u0F0F\x05\x06\x04\x02\u0F0E" +
		"\u0F0D\x03\x02\x02\x02\u0F0F\u0F10\x03\x02\x02\x02\u0F10\u0F0E\x03\x02" +
		"\x02\x02\u0F10\u0F11\x03\x02\x02\x02\u0F11\u0F13\x03\x02\x02\x02\u0F12" +
		"\u0F0C\x03\x02\x02\x02\u0F12\u0F13\x03\x02\x02\x02\u0F13\u0F14\x03\x02" +
		"\x02\x02\u0F14\u0F15\x05\u0116\x8C\x02\u0F15\u0F97\x03\x02\x02\x02\u0F16" +
		"\u0F18\x07\u016D\x02\x02\u0F17\u0F19\x05\x06\x04\x02\u0F18\u0F17\x03\x02" +
		"\x02\x02\u0F19\u0F1A\x03\x02\x02\x02\u0F1A\u0F18\x03\x02\x02\x02\u0F1A" +
		"\u0F1B\x03\x02\x02\x02\u0F1B\u0F22\x03\x02\x02\x02\u0F1C\u0F1E\x07\xCF" +
		"\x02\x02\u0F1D\u0F1F\x05\x06\x04\x02\u0F1E\u0F1D\x03\x02\x02\x02\u0F1F" +
		"\u0F20\x03\x02\x02\x02\u0F20\u0F1E\x03\x02\x02\x02\u0F20\u0F21\x03\x02" +
		"\x02\x02\u0F21\u0F23\x03\x02\x02\x02\u0F22\u0F1C\x03\x02\x02\x02\u0F22" +
		"\u0F23\x03\x02\x02\x02\u0F23\u0F24\x03\x02\x02\x02\u0F24\u0F25\x05\u0112" +
		"\x8A\x02\u0F25\u0F97\x03\x02\x02\x02\u0F26\u0F28\x07\u0176\x02\x02\u0F27" +
		"\u0F29\x05\x06\x04\x02\u0F28\u0F27\x03\x02\x02\x02\u0F29\u0F2A\x03\x02" +
		"\x02\x02\u0F2A\u0F28\x03\x02\x02\x02\u0F2A\u0F2B\x03\x02\x02\x02\u0F2B" +
		"\u0F32\x03\x02\x02\x02\u0F2C\u0F2E\x07\xCF\x02\x02\u0F2D\u0F2F\x05\x06" +
		"\x04\x02\u0F2E\u0F2D\x03\x02\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30" +
		"\u0F2E\x03\x02\x02\x02\u0F30\u0F31\x03\x02\x02\x02\u0F31\u0F33\x03\x02" +
		"\x02\x02\u0F32\u0F2C\x03\x02\x02\x02\u0F32\u0F33\x03\x02\x02\x02\u0F33" +
		"\u0F35\x03\x02\x02\x02\u0F34\u0F26\x03\x02\x02\x02\u0F34\u0F35\x03\x02" +
		"\x02\x02\u0F35\u0F36\x03\x02\x02\x02\u0F36\u0F97\x07s\x02\x02\u0F37\u0F39" +
		"\x07+\x02\x02\u0F38\u0F3A\x05\x06\x04\x02\u0F39\u0F38\x03\x02\x02\x02" +
		"\u0F3A\u0F3B\x03\x02\x02\x02\u0F3B\u0F39\x03\x02\x02\x02\u0F3B\u0F3C\x03" +
		"\x02\x02\x02\u0F3C\u0F43\x03\x02\x02\x02\u0F3D\u0F3F\x07\u017D\x02\x02" +
		"\u0F3E\u0F40\x05\x06\x04\x02\u0F3F\u0F3E\x03\x02\x02\x02\u0F40\u0F41\x03" +
		"\x02\x02\x02\u0F41\u0F3F\x03\x02\x02\x02\u0F41\u0F42\x03\x02\x02\x02\u0F42" +
		"\u0F44\x03\x02\x02\x02\u0F43\u0F3D\x03\x02\x02\x02\u0F43\u0F44\x03\x02" +
		"\x02\x02\u0F44\u0F45\x03\x02\x02\x02\u0F45\u0F46\x07\u0185\x02\x02\u0F46" +
		"\u0F97\x03\x02\x02\x02\u0F47\u0F49\x07@\x02\x02\u0F48\u0F4A\x05\x06\x04" +
		"\x02\u0F49\u0F48\x03\x02\x02\x02\u0F4A\u0F4B\x03\x02\x02\x02\u0F4B\u0F49" +
		"\x03\x02\x02\x02\u0F4B\u0F4C\x03\x02\x02\x02\u0F4C\u0F53\x03\x02\x02\x02" +
		"\u0F4D\u0F4F\x07\xF4\x02\x02\u0F4E\u0F50\x05\x06\x04\x02\u0F4F\u0F4E\x03" +
		"\x02\x02\x02\u0F50\u0F51\x03\x02\x02\x02\u0F51\u0F4F\x03\x02\x02\x02\u0F51" +
		"\u0F52\x03\x02\x02\x02\u0F52\u0F54\x03\x02\x02\x02\u0F53\u0F4D\x03\x02" +
		"\x02\x02\u0F53\u0F54\x03\x02\x02\x02\u0F54\u0F5B\x03\x02\x02\x02\u0F55" +
		"\u0F57\x07\xCF\x02\x02\u0F56\u0F58\x05\x06\x04\x02\u0F57\u0F56\x03\x02" +
		"\x02\x02\u0F58\u0F59\x03\x02\x02\x02\u0F59\u0F57\x03\x02\x02\x02\u0F59" +
		"\u0F5A\x03\x02\x02\x02\u0F5A\u0F5C\x03\x02\x02\x02\u0F5B\u0F55\x03\x02" +
		"\x02\x02\u0F5B\u0F5C\x03\x02\x02\x02\u0F5C\u0F5D\x03\x02\x02\x02\u0F5D" +
		"\u0F5E\x05\u0110\x89\x02\u0F5E\u0F97\x03\x02\x02\x02\u0F5F\u0F67\x07\xB9" +
		"\x02\x02\u0F60\u0F62\x05\x06\x04\x02\u0F61\u0F60\x03\x02\x02\x02\u0F62" +
		"\u0F63\x03\x02\x02\x02\u0F63\u0F61\x03\x02\x02\x02\u0F63\u0F64\x03\x02" +
		"\x02\x02\u0F64\u0F65\x03\x02\x02\x02\u0F65\u0F66\x07\xC6\x02\x02\u0F66" +
		"\u0F68\x03\x02\x02\x02\u0F67\u0F61\x03\x02\x02\x02\u0F67\u0F68\x03\x02" +
		"\x02\x02\u0F68\u0F97\x03\x02\x02\x02\u0F69\u0F71\t\v\x02\x02\u0F6A\u0F6C" +
		"\x05\x06\x04\x02\u0F6B\u0F6A\x03\x02\x02\x02\u0F6C\u0F6D\x03\x02\x02\x02" +
		"\u0F6D\u0F6B\x03\x02\x02\x02\u0F6D\u0F6E\x03\x02\x02\x02\u0F6E\u0F6F\x03" +
		"\x02\x02\x02\u0F6F\u0F70\x07\u0135\x02\x02\u0F70\u0F72\x03\x02\x02\x02" +
		"\u0F71\u0F6B\x03\x02\x02\x02\u0F71\u0F72\x03\x02\x02\x02\u0F72\u0F97\x03" +
		"\x02\x02\x02\u0F73\u0F97\x05\u0130\x99\x02\u0F74\u0F97\x05\u0104\x83\x02" +
		"\u0F75\u0F77\x07\u0149\x02\x02\u0F76\u0F78\x05\x06\x04\x02\u0F77\u0F76" +
		"\x03\x02\x02\x02\u0F78\u0F79\x03\x02\x02\x02\u0F79\u0F77\x03\x02\x02\x02" +
		"\u0F79\u0F7A\x03\x02\x02\x02\u0F7A\u0F81\x03\x02\x02\x02\u0F7B\u0F7D\x07" +
		"\xCF\x02\x02\u0F7C\u0F7E\x05\x06\x04\x02\u0F7D\u0F7C\x03\x02\x02\x02\u0F7E" +
		"\u0F7F\x03\x02\x02\x02\u0F7F\u0F7D\x03\x02\x02\x02\u0F7F\u0F80\x03\x02" +
		"\x02\x02\u0F80\u0F82\x03\x02\x02\x02\u0F81\u0F7B\x03\x02\x02\x02\u0F81" +
		"\u0F82\x03\x02\x02\x02\u0F82\u0F83\x03\x02\x02\x02\u0F83\u0F84\x05\u010E" +
		"\x88\x02\u0F84\u0F97\x03\x02\x02\x02\u0F85\u0F87\x07\u0179";
	private static readonly _serializedATNSegment9: string =
		"\x02\x02\u0F86\u0F88\x05\x06\x04\x02\u0F87\u0F86\x03\x02\x02\x02\u0F88" +
		"\u0F89\x03\x02\x02\x02\u0F89\u0F87\x03\x02\x02\x02\u0F89\u0F8A\x03\x02" +
		"\x02\x02\u0F8A\u0F91\x03\x02\x02\x02\u0F8B\u0F8D\x07\xCF\x02\x02\u0F8C" +
		"\u0F8E\x05\x06\x04\x02\u0F8D\u0F8C\x03\x02\x02\x02\u0F8E\u0F8F\x03\x02" +
		"\x02\x02\u0F8F\u0F8D\x03\x02\x02\x02\u0F8F\u0F90\x03\x02\x02\x02\u0F90" +
		"\u0F92\x03\x02\x02\x02\u0F91\u0F8B\x03\x02\x02\x02\u0F91\u0F92\x03\x02" +
		"\x02\x02\u0F92\u0F93\x03\x02\x02\x02\u0F93\u0F94\x05\xEAv\x02\u0F94\u0F97" +
		"\x03\x02\x02\x02\u0F95\u0F97\x05\u0106\x84\x02\u0F96\u0EE8\x03\x02\x02" +
		"\x02\u0F96\u0F00\x03\x02\x02\x02\u0F96\u0F16\x03\x02\x02\x02\u0F96\u0F34" +
		"\x03\x02\x02\x02\u0F96\u0F37\x03\x02\x02\x02\u0F96\u0F47\x03\x02\x02\x02" +
		"\u0F96\u0F5F\x03\x02\x02\x02\u0F96\u0F69\x03\x02\x02\x02\u0F96\u0F73\x03" +
		"\x02\x02\x02\u0F96\u0F74\x03\x02\x02\x02\u0F96\u0F75\x03\x02\x02\x02\u0F96" +
		"\u0F85\x03\x02\x02\x02\u0F96\u0F95\x03\x02\x02\x02\u0F97\u0103\x03\x02" +
		"\x02\x02\u0F98\u0FA0\x07\u0144\x02\x02\u0F99\u0F9B\x05\x06\x04\x02\u0F9A" +
		"\u0F99\x03\x02\x02\x02\u0F9B\u0F9C\x03\x02\x02\x02\u0F9C\u0F9A\x03\x02" +
		"\x02\x02\u0F9C\u0F9D\x03\x02\x02\x02\u0F9D\u0F9E\x03\x02\x02\x02\u0F9E" +
		"\u0F9F\x07\xCF\x02\x02\u0F9F\u0FA1\x03\x02\x02\x02\u0FA0\u0F9A\x03\x02" +
		"\x02\x02\u0FA0\u0FA1\x03\x02\x02\x02\u0FA1\u0FA3\x03\x02\x02\x02\u0FA2" +
		"\u0FA4\x05\x06\x04\x02\u0FA3\u0FA2\x03\x02\x02\x02\u0FA4\u0FA5\x03\x02" +
		"\x02\x02\u0FA5\u0FA3\x03\x02\x02\x02\u0FA5\u0FA6\x03\x02\x02\x02\u0FA6" +
		"\u0FA8\x03\x02\x02\x02\u0FA7\u0F98\x03\x02\x02\x02\u0FA7\u0FA8\x03\x02" +
		"\x02\x02\u0FA8\u0FA9\x03\x02\x02\x02\u0FA9\u0FB9\t\x0F\x02\x02\u0FAA\u0FAC" +
		"\x05\x06\x04\x02\u0FAB\u0FAA\x03\x02\x02\x02\u0FAC\u0FAD\x03\x02\x02\x02" +
		"\u0FAD\u0FAB\x03\x02\x02\x02\u0FAD\u0FAE\x03\x02\x02\x02\u0FAE\u0FAF\x03" +
		"\x02\x02\x02\u0FAF\u0FB7\x07\u0140\x02\x02\u0FB0\u0FB2\x05\x06\x04\x02" +
		"\u0FB1\u0FB0\x03\x02\x02\x02\u0FB2\u0FB3\x03\x02\x02\x02\u0FB3\u0FB1\x03" +
		"\x02\x02\x02\u0FB3\u0FB4\x03\x02\x02\x02\u0FB4\u0FB5\x03\x02\x02\x02\u0FB5" +
		"\u0FB6\x078\x02\x02\u0FB6\u0FB8\x03\x02\x02\x02\u0FB7\u0FB1\x03\x02\x02" +
		"\x02\u0FB7\u0FB8\x03\x02\x02\x02\u0FB8\u0FBA\x03\x02\x02\x02\u0FB9\u0FAB" +
		"\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02\x02\x02\u0FBA\u0105\x03\x02\x02\x02" +
		"\u0FBB\u0FBD\x07\u0157\x02\x02\u0FBC\u0FBE\x05\x06\x04\x02\u0FBD\u0FBC" +
		"\x03\x02\x02\x02\u0FBE\u0FBF\x03\x02\x02\x02\u0FBF\u0FBD\x03\x02\x02\x02" +
		"\u0FBF\u0FC0\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02\u0FC1\u0FCB\x05" +
		"\u010C\x87\x02\u0FC2\u0FC4\x05\x06\x04\x02\u0FC3\u0FC2\x03\x02\x02\x02" +
		"\u0FC4\u0FC5\x03\x02\x02\x02\u0FC5\u0FC3\x03\x02\x02\x02\u0FC5\u0FC6\x03" +
		"\x02\x02\x02\u0FC6\u0FC7\x03\x02\x02\x02\u0FC7\u0FC8\x05\u010C\x87\x02" +
		"\u0FC8\u0FCA\x03\x02\x02\x02\u0FC9\u0FC3\x03\x02\x02\x02\u0FCA\u0FCD\x03" +
		"\x02\x02\x02\u0FCB\u0FC9\x03\x02\x02\x02\u0FCB\u0FCC\x03\x02\x02\x02\u0FCC" +
		"\u0FD5\x03\x02\x02\x02\u0FCD\u0FCB\x03\x02\x02\x02\u0FCE\u0FD0\x05\x06" +
		"\x04\x02\u0FCF\u0FCE\x03\x02\x02\x02\u0FD0\u0FD1\x03\x02\x02\x02\u0FD1" +
		"\u0FCF\x03\x02\x02\x02\u0FD1\u0FD2\x03\x02\x02\x02\u0FD2\u0FD3\x03\x02" +
		"\x02\x02\u0FD3\u0FD4\x07\u0175\x02\x02\u0FD4\u0FD6\x03\x02\x02\x02\u0FD5" +
		"\u0FCF\x03\x02\x02\x02\u0FD5\u0FD6\x03\x02\x02\x02\u0FD6\u0FE0\x03\x02" +
		"\x02\x02\u0FD7\u0FD9\x05\x06\x04\x02\u0FD8\u0FD7\x03\x02\x02\x02\u0FD9" +
		"\u0FDA\x03\x02\x02\x02\u0FDA\u0FD8\x03\x02\x02\x02\u0FDA\u0FDB\x03\x02" +
		"\x02\x02\u0FDB\u0FDC\x03\x02\x02\x02\u0FDC\u0FDD\x05\u010A\x86\x02\u0FDD" +
		"\u0FDF\x03\x02\x02\x02\u0FDE\u0FD8\x03\x02\x02\x02\u0FDF\u0FE2\x03\x02" +
		"\x02\x02\u0FE0\u0FDE\x03\x02\x02\x02\u0FE0\u0FE1\x03\x02\x02\x02\u0FE1" +
		"\u0FE4\x03\x02\x02\x02\u0FE2\u0FE0\x03\x02\x02\x02\u0FE3\u0FBB\x03\x02" +
		"\x02\x02\u0FE4\u0FE5\x03\x02\x02\x02\u0FE5\u0FE3\x03\x02\x02\x02\u0FE5" +
		"\u0FE6\x03\x02\x02\x02\u0FE6\u0FFD\x03\x02\x02\x02\u0FE7\u0FE9\x05\x06" +
		"\x04\x02\u0FE8\u0FE7\x03\x02\x02\x02\u0FE9\u0FEC\x03\x02\x02\x02\u0FEA" +
		"\u0FE8\x03\x02\x02\x02\u0FEA\u0FEB\x03\x02\x02\x02\u0FEB\u0FED\x03\x02" +
		"\x02\x02\u0FEC\u0FEA\x03\x02\x02\x02\u0FED\u0FEF\x07\u012E\x02\x02\u0FEE" +
		"\u0FF0\x05\x06\x04\x02\u0FEF\u0FEE\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02" +
		"\x02\x02\u0FF1\u0FEF\x03\x02\x02\x02\u0FF1\u0FF2\x03\x02\x02\x02\u0FF2" +
		"\u0FF9\x03\x02\x02\x02\u0FF3\u0FF5\x07\xFB\x02\x02\u0FF4\u0FF6\x05\x06" +
		"\x04\x02\u0FF5\u0FF4\x03\x02\x02\x02\u0FF6\u0FF7\x03\x02\x02\x02\u0FF7" +
		"\u0FF5\x03\x02\x02\x02\u0FF7\u0FF8\x03\x02\x02\x02\u0FF8\u0FFA\x03\x02" +
		"\x02\x02\u0FF9\u0FF3\x03\x02\x02\x02\u0FF9\u0FFA\x03\x02\x02\x02\u0FFA" +
		"\u0FFB\x03\x02\x02\x02\u0FFB\u0FFC\x05\u0108\x85\x02\u0FFC\u0FFE\x03\x02" +
		"\x02\x02\u0FFD\u0FEA\x03\x02\x02\x02\u0FFD\u0FFE\x03\x02\x02\x02\u0FFE" +
		"\u0107\x03\x02\x02\x02\u0FFF\u1000\t\x10\x02\x02\u1000\u0109\x03\x02\x02" +
		"\x02\u1001\u1002\x07\u01AF\x02\x02\u1002\u010B\x03\x02\x02\x02\u1003\u1004" +
		"\x07\u01AF\x02\x02\u1004\u010D\x03\x02\x02\x02\u1005\u1006\x05\u01AE\xD8" +
		"\x02\u1006\u010F\x03\x02\x02\x02\u1007\u1008\x07\u01AD\x02\x02\u1008\u0111" +
		"\x03\x02\x02\x02\u1009\u100B\x07\u0128\x02\x02\u100A\u100C\x05\x06\x04" +
		"\x02\u100B\u100A\x03\x02\x02\x02\u100C\u100D\x03\x02\x02\x02\u100D\u100B" +
		"\x03\x02\x02\x02\u100D\u100E\x03\x02\x02\x02\u100E\u100F\x03\x02\x02\x02" +
		"\u100F\u1010\x07\xBA\x02\x02\u1010\u1054\x03\x02\x02\x02\u1011\u1054\x07" +
		"\u0134\x02\x02\u1012\u1014\x07\u0105\x02\x02\u1013\u1015\x05\x06\x04\x02" +
		"\u1014\u1013\x03\x02\x02\x02\u1015\u1016\x03\x02\x02\x02\u1016\u1014\x03" +
		"\x02\x02\x02\u1016\u1017\x03\x02\x02\x02\u1017\u1018\x03\x02\x02\x02\u1018" +
		"\u1019\x07\xBA\x02\x02\u1019\u1054\x03\x02\x02\x02\u101A\u1054\x07\u010A" +
		"\x02\x02\u101B\u101D\x07X\x02\x02\u101C\u101E\x05\x06\x04\x02\u101D\u101C" +
		"\x03\x02\x02\x02\u101E\u101F\x03\x02\x02\x02\u101F\u101D\x03\x02\x02\x02" +
		"\u101F\u1020\x03\x02\x02\x02\u1020\u1021\x03\x02\x02\x02\u1021\u1022\x07" +
		"\xBA\x02\x02\u1022\u1025\x03\x02\x02\x02\u1023\u1025\x077\x02\x02\u1024" +
		"\u101B\x03\x02\x02\x02\u1024\u1023\x03\x02\x02\x02\u1025\u1027\x03\x02" +
		"\x02\x02\u1026\u1028\x05\x06\x04\x02\u1027\u1026\x03\x02\x02\x02\u1028" +
		"\u1029\x03\x02\x02\x02\u1029\u1027\x03\x02\x02\x02\u1029\u102A\x03\x02" +
		"\x02\x02\u102A\u102B\x03\x02\x02\x02\u102B\u102C\x05\u0114\x8B\x02\u102C" +
		"\u1054\x03\x02\x02\x02\u102D\u1054\x07q\x02\x02\u102E\u1054\x07g\x02\x02" +
		"\u102F\u1031\x07X\x02\x02\u1030\u1032\x05\x06\x04\x02\u1031\u1030\x03" +
		"\x02\x02\x02\u1032\u1033\x03\x02\x02\x02\u1033\u1031\x03\x02\x02\x02\u1033" +
		"\u1034\x03\x02\x02\x02\u1034\u1035\x03\x02\x02\x02\u1035\u1036\x07\xAE" +
		"\x02\x02\u1036\u1039\x03\x02\x02\x02\u1037\u1039\x076\x02\x02\u1038\u102F" +
		"\x03\x02\x02\x02\u1038\u1037\x03\x02\x02\x02\u1039\u103B\x03\x02\x02\x02" +
		"\u103A\u103C\x05\x06\x04\x02\u103B\u103A\x03\x02\x02\x02\u103C\u103D\x03" +
		"\x02\x02\x02\u103D\u103B\x03\x02\x02\x02\u103D\u103E\x03\x02\x02\x02\u103E" +
		"\u103F\x03\x02\x02\x02\u103F\u1040\x05\u0114\x8B\x02\u1040\u1054\x03\x02" +
		"\x02\x02\u1041\u1043\x07\u0105\x02\x02\u1042\u1044\x05\x06\x04\x02\u1043" +
		"\u1042\x03\x02\x02\x02\u1044\u1045\x03\x02\x02\x02\u1045\u1043\x03\x02" +
		"\x02\x02\u1045\u1046\x03\x02\x02\x02\u1046\u1047\x03\x02\x02\x02\u1047" +
		"\u1048\x07\xAE\x02\x02\u1048\u1054\x03\x02\x02\x02\u1049\u1054\x07\u0109" +
		"\x02\x02\u104A\u104C\x07\u0128\x02\x02\u104B\u104D\x05\x06\x04\x02\u104C" +
		"\u104B\x03\x02\x02\x02\u104D\u104E\x03\x02\x02\x02\u104E\u104C\x03\x02" +
		"\x02\x02\u104E\u104F\x03\x02\x02\x02\u104F\u1050\x03\x02\x02\x02\u1050" +
		"\u1051\x07\xAE\x02\x02\u1051\u1054\x03\x02\x02\x02\u1052\u1054\x07\u0133" +
		"\x02\x02\u1053\u1009\x03\x02\x02\x02\u1053\u1011\x03\x02\x02\x02\u1053" +
		"\u1012\x03\x02\x02\x02\u1053\u101A\x03\x02\x02\x02\u1053\u1024\x03\x02" +
		"\x02\x02\u1053\u102D\x03\x02\x02\x02\u1053\u102E\x03\x02\x02\x02\u1053" +
		"\u1038\x03\x02\x02\x02\u1053\u1041\x03\x02\x02\x02\u1053\u1049\x03\x02" +
		"\x02\x02\u1053\u104A\x03\x02\x02\x02\u1053\u1052\x03\x02\x02\x02\u1054" +
		"\u0113\x03\x02\x02\x02\u1055\u1056\t\x10\x02\x02\u1056\u0115\x03\x02\x02" +
		"\x02\u1057\u1069\x05\u011A\x8E\x02\u1058\u105A\x07\u010D\x02\x02\u1059" +
		"\u105B\x05\x06\x04\x02\u105A\u1059\x03\x02\x02\x02\u105B\u105C\x03\x02" +
		"\x02\x02\u105C\u105A\x03\x02\x02\x02\u105C\u105D\x03\x02\x02\x02\u105D" +
		"\u105E\x03\x02\x02\x02\u105E\u105F\x05\u011A\x8E\x02\u105F\u1069\x03\x02" +
		"\x02\x02\u1060\u1062\x07\xF1\x02\x02\u1061\u1063\x05\x06\x04\x02\u1062" +
		"\u1061\x03\x02\x02\x02\u1063\u1064\x03\x02\x02\x02\u1064\u1062\x03\x02" +
		"\x02\x02\u1064\u1065\x03\x02\x02\x02\u1065\u1066\x03\x02\x02\x02\u1066" +
		"\u1067\x07\u0105\x02\x02\u1067\u1069\x03\x02\x02\x02\u1068\u1057\x03\x02" +
		"\x02\x02\u1068\u1058\x03\x02\x02\x02\u1068\u1060\x03\x02\x02\x02\u1069" +
		"\u0117\x03\x02\x02\x02\u106A\u1080\x05\u011A\x8E\x02\u106B\u106D\x05\x06" +
		"\x04\x02\u106C\u106B\x03\x02\x02\x02\u106D\u106E\x03\x02\x02\x02\u106E" +
		"\u106C\x03\x02\x02\x02\u106E\u106F\x03\x02\x02\x02\u106F\u1076\x03\x02" +
		"\x02\x02\u1070\u1072\x07\xFB\x02\x02\u1071\u1073\x05\x06\x04\x02\u1072" +
		"\u1071\x03\x02\x02\x02\u1073\u1074\x03\x02\x02\x02\u1074\u1072\x03\x02" +
		"\x02\x02\u1074\u1075\x03\x02\x02\x02\u1075\u1077\x03\x02\x02\x02\u1076" +
		"\u1070\x03\x02\x02\x02\u1076\u1077\x03\x02\x02\x02\u1077\u1078\x03\x02" +
		"\x02\x02\u1078\u107A\x07\xF1\x02\x02\u1079\u107B\x05\x06\x04\x02\u107A" +
		"\u1079\x03\x02\x02\x02\u107B\u107C\x03\x02\x02\x02\u107C\u107A\x03\x02" +
		"\x02\x02\u107C\u107D\x03\x02\x02\x02\u107D\u107E\x03\x02\x02\x02\u107E" +
		"\u107F\x07\u0105\x02\x02\u107F\u1081\x03\x02\x02\x02\u1080\u106C\x03\x02" +
		"\x02\x02\u1080\u1081\x03\x02\x02\x02\u1081\u108B\x03\x02\x02\x02\u1082" +
		"\u1084\x07\u010D\x02\x02\u1083\u1085\x05\x06\x04\x02\u1084\u1083\x03\x02" +
		"\x02\x02\u1085\u1086\x03\x02\x02\x02\u1086\u1084\x03\x02\x02\x02\u1086" +
		"\u1087\x03\x02\x02\x02\u1087\u1088\x03\x02\x02\x02\u1088\u1089\x05\u011A" +
		"\x8E\x02\u1089\u108B\x03\x02\x02\x02\u108A\u106A\x03\x02\x02\x02\u108A" +
		"\u1082\x03\x02\x02\x02\u108B\u0119\x03\x02\x02\x02\u108C\u108D\x07\u01AD" +
		"\x02\x02\u108D\u011B\x03\x02\x02\x02\u108E\u1090\x07\xCF\x02\x02\u108F" +
		"\u1091\x05\x06\x04\x02\u1090\u108F\x03\x02\x02\x02\u1091\u1092\x03\x02" +
		"\x02\x02\u1092\u1090\x03\x02\x02\x02\u1092\u1093\x03\x02\x02\x02\u1093" +
		"\u1095\x03\x02\x02\x02\u1094\u108E\x03\x02\x02\x02\u1094\u1095\x03\x02" +
		"\x02\x02\u1095\u1096\x03\x02\x02\x02\u1096\u114D\x07\xB6\x02\x02\u1097" +
		"\u1099\x07=\x02\x02\u1098\u109A\x05\x06\x04\x02\u1099\u1098\x03\x02\x02" +
		"\x02\u109A\u109B\x03\x02\x02\x02\u109B\u1099\x03\x02\x02\x02\u109B\u109C" +
		"\x03\x02\x02\x02\u109C\u109D\x03\x02\x02\x02\u109D\u109E\x05\u012A\x96" +
		"\x02\u109E\u114D\x03\x02\x02\x02\u109F\u10A7\x07X\x02\x02\u10A0\u10A2" +
		"\x05\x06\x04\x02\u10A1\u10A0\x03\x02\x02\x02\u10A2\u10A3\x03\x02\x02\x02" +
		"\u10A3\u10A1\x03\x02\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4\u10A5\x03" +
		"\x02\x02\x02\u10A5\u10A6\x07\xCF\x02\x02\u10A6\u10A8\x03\x02\x02\x02\u10A7" +
		"\u10A1\x03\x02\x02\x02\u10A7\u10A8\x03\x02\x02\x02\u10A8\u10B4\x03\x02" +
		"\x02\x02\u10A9\u10B1\x07Y\x02\x02\u10AA\u10AC\x05\x06\x04\x02\u10AB\u10AA" +
		"\x03\x02\x02\x02\u10AC\u10AD\x03\x02\x02\x02\u10AD\u10AB\x03\x02\x02\x02" +
		"\u10AD\u10AE\x03\x02\x02\x02\u10AE\u10AF\x03\x02\x02\x02\u10AF\u10B0\x07" +
		"\x15\x02\x02\u10B0\u10B2\x03\x02\x02\x02\u10B1\u10AB\x03\x02\x02\x02\u10B1" +
		"\u10B2\x03\x02\x02\x02\u10B2\u10B4\x03\x02\x02\x02\u10B3\u109F\x03\x02" +
		"\x02\x02\u10B3\u10A9\x03\x02\x02\x02\u10B4\u10B6\x03\x02\x02\x02\u10B5" +
		"\u10B7\x05\x06\x04\x02\u10B6\u10B5\x03\x02\x02\x02\u10B7\u10B8\x03\x02" +
		"\x02\x02\u10B8\u10B6\x03\x02\x02\x02\u10B8\u10B9\x03\x02\x02\x02\u10B9" +
		"\u10D4\x03\x02\x02\x02\u10BA\u10C4\x05\u0128\x95\x02\u10BB\u10BD\x05\x06" +
		"\x04\x02\u10BC\u10BB\x03\x02\x02\x02\u10BD\u10C0\x03\x02\x02\x02\u10BE" +
		"\u10BC\x03\x02\x02\x02\u10BE\u10BF\x03\x02\x02\x02\u10BF\u10C1\x03\x02" +
		"\x02\x02\u10C0\u10BE\x03\x02\x02\x02\u10C1\u10C3\x05\u0128\x95\x02\u10C2" +
		"\u10BE\x03\x02\x02\x02\u10C3\u10C6\x03\x02\x02\x02\u10C4\u10C2\x03\x02" +
		"\x02\x02\u10C4\u10C5\x03\x02\x02\x02\u10C5\u10D5\x03\x02\x02\x02\u10C6" +
		"\u10C4\x03\x02\x02\x02\u10C7\u10D1\x07\xA9\x02\x02\u10C8\u10CA\x05\x06" +
		"\x04\x02\u10C9\u10C8\x03\x02\x02\x02\u10CA\u10CD\x03\x02\x02\x02\u10CB" +
		"\u10C9\x03\x02\x02\x02\u10CB\u10CC\x03\x02\x02\x02\u10CC\u10CE\x03\x02" +
		"\x02\x02\u10CD\u10CB\x03\x02\x02\x02\u10CE\u10D0\x05\u0128\x95\x02\u10CF" +
		"\u10CB\x03\x02\x02\x02\u10D0\u10D3\x03\x02\x02\x02\u10D1\u10CF\x03\x02" +
		"\x02\x02\u10D1\u10D2\x03\x02\x02\x02\u10D2\u10D5\x03\x02\x02\x02\u10D3" +
		"\u10D1\x03\x02\x02\x02\u10D4\u10BA\x03\x02\x02\x02\u10D4\u10C7\x03\x02" +
		"\x02\x02\u10D5\u114D\x03\x02\x02\x02\u10D6\u10D8\x07\u0105\x02\x02\u10D7" +
		"\u10D9\x05\x06\x04\x02\u10D8\u10D7\x03\x02\x02\x02\u10D9\u10DA\x03\x02" +
		"\x02\x02\u10DA\u10D8\x03\x02\x02\x02\u10DA\u10DB\x03\x02\x02\x02\u10DB" +
		"\u10F8\x03\x02\x02\x02\u10DC\u10DE\x07\xDA\x02\x02\u10DD\u10DF\x05\x06" +
		"\x04\x02\u10DE\u10DD\x03\x02\x02\x02\u10DF\u10E0\x03\x02\x02\x02\u10E0" +
		"\u10DE\x03\x02\x02\x02\u10E0\u10E1\x03\x02\x02\x02\u10E1\u10E8\x03\x02" +
		"\x02\x02\u10E2\u10E4\x07\xCF\x02\x02\u10E3\u10E5\x05\x06\x04\x02\u10E4" +
		"\u10E3\x03\x02\x02\x02\u10E5\u10E6\x03\x02\x02\x02\u10E6\u10E4\x03\x02" +
		"\x02\x02\u10E6\u10E7\x03\x02\x02\x02\u10E7\u10E9\x03\x02\x02\x02\u10E8" +
		"\u10E2\x03\x02\x02\x02\u10E8\u10E9\x03\x02\x02\x02\u10E9\u10F9\x03\x02" +
		"\x02\x02\u10EA\u10EC\x07\xDB\x02\x02\u10EB\u10ED\x05\x06\x04\x02\u10EC" +
		"\u10EB\x03\x02\x02\x02\u10ED\u10EE\x03\x02\x02\x02\u10EE\u10EC\x03\x02" +
		"\x02\x02\u10EE\u10EF\x03\x02\x02\x02\u10EF\u10F6\x03\x02\x02\x02\u10F0" +
		"\u10F2\x07\x15\x02\x02\u10F1\u10F3\x05\x06\x04\x02\u10F2\u10F1\x03\x02" +
		"\x02\x02\u10F3\u10F4\x03\x02\x02\x02\u10F4\u10F2\x03\x02\x02\x02\u10F4" +
		"\u10F5\x03\x02\x02\x02\u10F5\u10F7\x03\x02\x02\x02\u10F6\u10F0\x03\x02" +
		"\x02\x02\u10F6\u10F7\x03\x02\x02\x02\u10F7\u10F9\x03\x02\x02\x02\u10F8" +
		"\u10DC\x03\x02\x02\x02\u10F8\u10EA\x03\x02\x02\x02\u10F8\u10F9\x03\x02" +
		"\x02\x02\u10F9\u10FA\x03\x02\x02\x02\u10FA\u1102\x05\u0126\x94\x02\u10FB" +
		"\u10FD\x05\x06\x04\x02\u10FC\u10FB\x03\x02\x02\x02\u10FD\u10FE\x03\x02" +
		"\x02\x02\u10FE\u10FC\x03\x02\x02\x02\u10FE\u10FF\x03\x02\x02\x02\u10FF" +
		"\u1100\x03\x02\x02\x02\u1100\u1101\t\x11\x02\x02\u1101\u1103\x03\x02\x02" +
		"\x02\u1102\u10FC\x03\x02\x02\x02\u1102\u1103\x03\x02\x02\x02\u1103\u1111" +
		"\x03\x02\x02\x02\u1104\u1106\x05\x06\x04\x02\u1105\u1104\x03\x02\x02\x02" +
		"\u1106\u1107\x03\x02\x02\x02\u1107\u1105\x03\x02\x02\x02\u1107\u1108\x03" +
		"\x02\x02\x02\u1108\u1109\x03\x02\x02\x02\u1109\u110B\x07\xBA\x02\x02\u110A" +
		"\u110C\x05\x06\x04\x02\u110B\u110A\x03\x02\x02\x02\u110C\u110D\x03\x02" +
		"\x02\x02\u110D\u110B\x03\x02\x02\x02\u110D\u110E\x03\x02\x02\x02\u110E" +
		"\u110F\x03\x02\x02\x02\u110F\u1110\x05\u0124\x93\x02\u1110\u1112\x03\x02" +
		"\x02\x02\u1111\u1105\x03\x02\x02\x02\u1111\u1112\x03\x02\x02\x02\u1112" +
		"\u1126\x03\x02\x02\x02\u1113\u1115\x05\x06\x04\x02\u1114\u1113\x03\x02" +
		"\x02\x02\u1115\u1116\x03\x02\x02\x02\u1116\u1114\x03\x02\x02\x02\u1116" +
		"\u1117\x03\x02\x02\x02\u1117\u1118\x03\x02\x02\x02\u1118\u111A\x07\xAA" +
		"\x02\x02\u1119\u111B\x05\x06\x04\x02\u111A\u1119\x03\x02\x02\x02\u111B" +
		"\u111C\x03\x02\x02\x02\u111C\u111A\x03\x02\x02\x02\u111C\u111D\x03\x02" +
		"\x02\x02\u111D\u111E\x03\x02\x02\x02\u111E\u1120\x07q\x02\x02\u111F\u1121" +
		"\x05\x06\x04\x02\u1120\u111F\x03\x02\x02\x02\u1121\u1122\x03\x02\x02\x02" +
		"\u1122\u1120\x03\x02\x02\x02\u1122\u1123\x03\x02\x02\x02\u1123\u1124\x03" +
		"\x02\x02\x02\u1124\u1125\x05\u0122\x92\x02\u1125\u1127\x03\x02\x02\x02" +
		"\u1126\u1114\x03\x02\x02\x02\u1126\u1127\x03\x02\x02\x02\u1127\u113B\x03" +
		"\x02\x02\x02\u1128\u112A\x05\x06\x04\x02\u1129\u1128\x03\x02\x02\x02\u112A" +
		"\u112B\x03\x02\x02\x02\u112B\u1129\x03\x02\x02\x02\u112B\u112C\x03\x02" +
		"\x02\x02\u112C\u112D\x03\x02\x02\x02\u112D\u112F\x07\xD6\x02\x02\u112E" +
		"\u1130\x05\x06\x04\x02\u112F\u112E\x03\x02\x02\x02\u1130\u1131\x03\x02" +
		"\x02\x02\u1131\u112F\x03\x02\x02\x02\u1131\u1132\x03\x02\x02\x02\u1132" +
		"\u1133\x03\x02\x02\x02\u1133\u1135\x07q\x02\x02\u1134\u1136\x05\x06\x04" +
		"\x02\u1135\u1134\x03\x02\x02\x02\u1136\u1137\x03\x02\x02\x02\u1137\u1135" +
		"\x03\x02\x02\x02\u1137\u1138\x03\x02\x02\x02\u1138\u1139\x03\x02\x02\x02" +
		"\u1139\u113A\x05\u0120\x91\x02\u113A\u113C\x03\x02\x02\x02\u113B\u1129" +
		"\x03\x02\x02\x02\u113B\u113C\x03\x02\x02\x02\u113C\u114A\x03\x02\x02\x02" +
		"\u113D\u113F\x05\x06\x04\x02\u113E\u113D\x03\x02\x02\x02\u113F\u1140\x03" +
		"\x02\x02\x02\u1140\u113E\x03\x02\x02\x02\u1140\u1141\x03\x02\x02\x02\u1141" +
		"\u1142\x03\x02\x02\x02\u1142\u1144\x07\xAE\x02\x02\u1143\u1145\x05\x06" +
		"\x04\x02\u1144\u1143\x03\x02\x02\x02\u1145\u1146\x03\x02\x02\x02\u1146" +
		"\u1144\x03\x02\x02\x02\u1146\u1147\x03\x02\x02\x02\u1147\u1148\x03\x02" +
		"\x02\x02\u1148\u1149\x05\u011E\x90\x02\u1149\u114B\x03\x02\x02\x02\u114A" +
		"\u113E\x03\x02\x02\x02\u114A\u114B\x03\x02\x02\x02\u114B\u114D\x03\x02" +
		"\x02\x02\u114C\u1094\x03\x02\x02\x02\u114C\u1097\x03\x02\x02\x02\u114C" +
		"\u10B3\x03\x02\x02\x02\u114C\u10D6\x03\x02\x02\x02\u114D\u011D\x03\x02" +
		"\x02\x02\u114E\u114F\x07\u01AD\x02\x02\u114F\u011F\x03\x02\x02\x02\u1150" +
		"\u1151\x07\u01AD\x02\x02\u1151\u0121\x03\x02\x02\x02\u1152\u1153\x07\u01AD" +
		"\x02\x02\u1153\u0123\x03\x02\x02\x02\u1154\u1155\x07\u01AD\x02\x02\u1155" +
		"\u0125\x03\x02\x02\x02\u1156\u1157\x07\u01AD\x02\x02\u1157\u0127\x03\x02" +
		"\x02\x02\u1158\u1159\x05\u01AE\xD8\x02\u1159\u0129\x03\x02\x02\x02\u115A" +
		"\u115B\x07\u01AC\x02\x02\u115B\u012B\x03\x02\x02\x02\u115C\u1164\x07\u0176" +
		"\x02\x02\u115D\u115F\x05\x06\x04\x02\u115E\u115D\x03\x02\x02\x02\u115F" +
		"\u1160\x03\x02\x02\x02\u1160\u115E\x03\x02\x02\x02\u1160\u1161\x03\x02" +
		"\x02\x02\u1161\u1162\x03\x02\x02\x02\u1162\u1163\x07\xCF\x02\x02\u1163" +
		"\u1165\x03\x02\x02\x02\u1164\u115E\x03\x02\x02\x02\u1164\u1165\x03\x02" +
		"\x02\x02\u1165\u1167\x03\x02\x02\x02\u1166\u1168\x05\x06\x04\x02\u1167" +
		"\u1166\x03\x02\x02\x02\u1168\u1169\x03\x02\x02\x02\u1169\u1167\x03\x02" +
		"\x02\x02\u1169\u116A\x03\x02\x02\x02\u116A\u116C\x03\x02\x02\x02\u116B" +
		"\u115C\x03\x02\x02\x02\u116B\u116C\x03\x02\x02\x02\u116C\u116D\x03\x02" +
		"\x02\x02\u116D\u116E\x05\u012E\x98\x02\u116E\u012D\x03\x02\x02\x02\u116F" +
		"\u11AF\x07&\x02\x02\u1170\u1178\x07\'\x02\x02\u1171\u1173\x05\x06\x04" +
		"\x02\u1172\u1171\x03\x02\x02\x02\u1173\u1174\x03\x02\x02\x02\u1174\u1172" +
		"\x03\x02\x02\x02\u1174\u1175\x03\x02\x02\x02\u1175\u1176\x03\x02\x02\x02" +
		"\u1176\u1177\t\x12\x02\x02\u1177\u1179\x03\x02\x02\x02\u1178\u1172\x03" +
		"\x02\x02\x02\u1178\u1179\x03\x02\x02\x02\u1179\u11AF\x03\x02\x02\x02\u117A" +
		"\u1182\x07*\x02\x02\u117B\u117D\x05\x06\x04\x02\u117C\u117B\x03\x02\x02" +
		"\x02\u117D\u117E\x03\x02\x02\x02\u117E\u117C\x03\x02\x02\x02\u117E\u117F" +
		"\x03\x02\x02\x02\u117F\u1180\x03\x02\x02\x02\u1180\u1181\t\x12\x02\x02" +
		"\u1181\u1183\x03\x02\x02\x02\u1182\u117C\x03\x02\x02\x02\u1182\u1183\x03" +
		"\x02\x02\x02\u1183\u11AF\x03\x02\x02\x02\u1184\u118C\x07)\x02\x02\u1185" +
		"\u1187\x05\x06\x04\x02\u1186\u1185\x03\x02\x02\x02\u1187\u1188\x03\x02" +
		"\x02\x02\u1188\u1186\x03\x02\x02\x02\u1188\u1189\x03\x02\x02\x02\u1189" +
		"\u118A\x03\x02\x02\x02\u118A\u118B\t\x12\x02\x02\u118B\u118D\x03\x02\x02" +
		"\x02\u118C\u1186\x03\x02\x02\x02\u118C\u118D\x03\x02\x02\x02\u118D\u11AF" +
		"\x03\x02\x02\x02\u118E\u1196\x07(\x02\x02\u118F\u1191\x05\x06\x04\x02" +
		"\u1190\u118F\x03\x02\x02\x02\u1191\u1192\x03\x02\x02\x02\u1192\u1190\x03" +
		"\x02\x02\x02\u1192\u1193\x03\x02\x02\x02\u1193\u1194\x03\x02\x02\x02\u1194" +
		"\u1195\t\x12\x02\x02\u1195\u1197\x03\x02\x02\x02\u1196\u1190\x03\x02\x02" +
		"\x02\u1196\u1197\x03\x02\x02\x02\u1197\u11AF\x03\x02\x02\x02\u1198\u11AF" +
		"\x07D\x02\x02\u1199\u11AF\x07E\x02\x02\u119A\u11AF\x07F\x02\x02\u119B" +
		"\u11AF\x07G\x02\x02\u119C\u11AF\x07H\x02\x02\u119D\u11AF\x07I\x02\x02" +
		"\u119E\u11AF\x07J\x02\x02\u119F\u11AF\x07C\x02\x02\u11A0\u11AF\x07L\x02" +
		"\x02\u11A1\u11AF\x07M\x02\x02\u11A2\u11AF\x07N\x02\x02\u11A3\u11AF\x07" +
		"O\x02\x02\u11A4\u11AF\x07P\x02\x02\u11A5\u11AF\x07Q\x02\x02\u11A6\u11AF" +
		"\x07s\x02\x02\u11A7\u11AF\x07\xAD\x02\x02\u11A8\u11AF\x07\xAC\x02\x02" +
		"\u11A9\u11AF\x07\xAB\x02\x02\u11AA\u11AF\x07\xC4\x02\x02\u11AB\u11AF\x07" +
		"\u0103\x02\x02\u11AC\u11AF\x07\u010E\x02\x02\u11AD\u11AF\x07\u010F\x02" +
		"\x02\u11AE\u116F\x03\x02\x02\x02\u11AE\u1170\x03\x02\x02\x02\u11AE\u117A" +
		"\x03\x02\x02\x02\u11AE\u1184\x03\x02\x02\x02\u11AE\u118E\x03\x02\x02\x02" +
		"\u11AE\u1198\x03\x02\x02\x02\u11AE\u1199\x03\x02\x02\x02\u11AE\u119A\x03" +
		"\x02\x02\x02\u11AE\u119B\x03\x02\x02\x02\u11AE\u119C\x03\x02\x02\x02\u11AE" +
		"\u119D\x03\x02\x02\x02\u11AE\u119E\x03\x02\x02\x02\u11AE\u119F\x03\x02" +
		"\x02\x02\u11AE\u11A0\x03\x02\x02\x02\u11AE\u11A1\x03\x02\x02\x02\u11AE" +
		"\u11A2\x03\x02\x02\x02\u11AE\u11A3\x03\x02\x02\x02\u11AE\u11A4\x03\x02" +
		"\x02\x02\u11AE\u11A5\x03\x02\x02\x02\u11AE\u11A6\x03\x02\x02\x02\u11AE" +
		"\u11A7\x03\x02\x02\x02\u11AE\u11A8\x03\x02\x02\x02\u11AE\u11A9\x03\x02" +
		"\x02\x02\u11AE\u11AA\x03\x02\x02\x02\u11AE\u11AB\x03\x02\x02\x02\u11AE" +
		"\u11AC\x03\x02\x02\x02\u11AE\u11AD\x03\x02\x02\x02\u11AF\u012F\x03\x02" +
		"\x02\x02\u11B0\u11B2\t\x13\x02\x02\u11B1\u11B3\x05\x06\x04\x02\u11B2\u11B1" +
		"\x03\x02\x02\x02\u11B3\u11B4\x03\x02\x02\x02\u11B4\u11B2\x03\x02\x02\x02" +
		"\u11B4\u11B5\x03\x02\x02\x02\u11B5\u11BC\x03\x02\x02\x02\u11B6\u11B8\x07" +
		"\xCF\x02\x02\u11B7\u11B9\x05\x06\x04\x02\u11B8\u11B7\x03\x02\x02\x02\u11B9" +
		"\u11BA\x03\x02\x02\x02\u11BA\u11B8\x03\x02\x02\x02\u11BA\u11BB\x03\x02" +
		"\x02\x02\u11BB\u11BD\x03\x02\x02\x02\u11BC\u11B6\x03\x02\x02\x02\u11BC" +
		"\u11BD\x03\x02\x02\x02\u11BD\u11BE\x03\x02\x02\x02\u11BE\u11BF\x05\u0132" +
		"\x9A\x02\u11BF\u0131\x03\x02\x02\x02\u11C0\u11C2\x05\u0134\x9B\x02\u11C1" +
		"\u11C0\x03\x02\x02\x02\u11C2\u11C3\x03\x02\x02\x02\u11C3\u11C1\x03\x02" +
		"\x02\x02\u11C3\u11C4\x03\x02\x02\x02\u11C4\u0133\x03\x02\x02\x02\u11C5" +
		"\u11C6\t\x14\x02\x02\u11C6\u0135\x03\x02\x02\x02\u11C7\u11C8\x07\u01AF" +
		"\x02\x02\u11C8\u0137\x03\x02\x02\x02\u11C9\u11CA\x07\u01AF\x02\x02\u11CA" +
		"\u0139\x03\x02\x02\x02\u11CB\u11CE\x05\u0154\xAB\x02\u11CC\u11CE\x05\u014A" +
		"\xA6\x02\u11CD\u11CB\x03\x02\x02\x02\u11CD\u11CC\x03\x02\x02\x02\u11CE" +
		"\u013B\x03\x02\x02\x02\u11CF\u11D7\x07\u0128\x02\x02\u11D0\u11D2\x05\x06" +
		"\x04\x02\u11D1\u11D0\x03\x02\x02\x02\u11D2\u11D3\x03\x02\x02\x02\u11D3" +
		"\u11D1\x03\x02\x02\x02\u11D3\u11D4\x03\x02\x02\x02\u11D4\u11D5\x03\x02" +
		"\x02\x02\u11D5\u11D6\x07\xCF\x02\x02\u11D6\u11D8\x03\x02\x02\x02\u11D7" +
		"\u11D1\x03\x02\x02\x02\u11D7\u11D8\x03\x02\x02\x02\u11D8\u11E4\x03\x02" +
		"\x02\x02\u11D9\u11E1\x07\u012A\x02\x02\u11DA\u11DC\x05\x06\x04\x02\u11DB" +
		"\u11DA\x03\x02\x02\x02\u11DC\u11DD\x03\x02\x02\x02\u11DD\u11DB\x03\x02" +
		"\x02\x02\u11DD\u11DE\x03\x02\x02\x02\u11DE\u11DF\x03\x02\x02\x02\u11DF" +
		"\u11E0\x07\x15\x02\x02\u11E0\u11E2\x03\x02\x02\x02\u11E1\u11DB\x03\x02" +
		"\x02\x02\u11E1\u11E2\x03\x02\x02\x02\u11E2\u11E4\x03\x02\x02\x02\u11E3" +
		"\u11CF\x03\x02\x02\x02\u11E3\u11D9\x03\x02\x02\x02\u11E4\u11E6\x03\x02" +
		"\x02\x02\u11E5\u11E7\x05\x06\x04\x02\u11E6\u11E5\x03\x02\x02\x02\u11E7" +
		"\u11E8\x03\x02\x02\x02\u11E8\u11E6\x03\x02\x02\x02\u11E8\u11E9\x03\x02" +
		"\x02\x02\u11E9\u11EA\x03\x02\x02\x02\u11EA\u11F4\x05\u013E\xA0\x02\u11EB" +
		"\u11ED\x05\x06\x04\x02\u11EC\u11EB\x03\x02\x02\x02\u11ED\u11F0\x03\x02" +
		"\x02\x02\u11EE\u11EC\x03\x02\x02\x02\u11EE\u11EF\x03\x02\x02\x02\u11EF" +
		"\u11F1\x03\x02\x02\x02\u11F0\u11EE\x03\x02\x02\x02\u11F1\u11F3\x05\u013E" +
		"\xA0\x02\u11F2\u11EE\x03\x02\x02\x02\u11F3\u11F6\x03\x02\x02\x02\u11F4" +
		"\u11F2\x03\x02\x02\x02\u11F4\u11F5\x03\x02\x02\x02\u11F5\u013D\x03\x02" +
		"\x02\x02\u11F6\u11F4\x03\x02\x02\x02\u11F7\u11F8\x07\u01AF\x02\x02\u11F8" +
		"\u013F\x03\x02\x02\x02\u11F9\u11FB\x07\xDC\x02\x02\u11FA\u11FC\x05\x06" +
		"\x04\x02\u11FB\u11FA\x03\x02\x02\x02\u11FC\u11FD\x03\x02\x02\x02\u11FD" +
		"\u11FB\x03\x02\x02\x02\u11FD\u11FE\x03\x02\x02\x02\u11FE\u1205\x03\x02" +
		"\x02\x02\u11FF\u1201\x07\xCF\x02\x02\u1200\u1202\x05\x06\x04\x02\u1201" +
		"\u1200\x03\x02\x02\x02\u1202\u1203\x03\x02\x02\x02\u1203\u1201\x03\x02" +
		"\x02\x02\u1203\u1204\x03\x02\x02\x02\u1204\u1206\x03\x02\x02\x02\u1205" +
		"\u11FF\x03\x02\x02\x02\u1205\u1206\x03\x02\x02\x02\u1206\u1207\x03\x02" +
		"\x02\x02\u1207\u120F\x05\u0148\xA5\x02\u1208\u120A\x05\x06\x04\x02\u1209" +
		"\u1208\x03\x02\x02\x02\u120A\u120B\x03\x02\x02\x02\u120B\u1209\x03\x02" +
		"\x02\x02\u120B\u120C\x03\x02\x02\x02\u120C\u120D\x03\x02\x02\x02\u120D" +
		"\u120E\x07\xDE\x02\x02\u120E\u1210\x03\x02\x02\x02\u120F\u1209\x03\x02" +
		"\x02\x02\u120F\u1210\x03\x02\x02\x02\u1210\u122E\x03\x02\x02\x02\u1211" +
		"\u1213\x05\x06\x04\x02\u1212\u1211\x03\x02\x02\x02\u1213\u1214\x03\x02" +
		"\x02\x02\u1214\u1212\x03\x02\x02\x02\u1214\u1215\x03\x02\x02\x02\u1215" +
		"\u121C\x03\x02\x02\x02\u1216\u1218\x07\u017F\x02\x02\u1217\u1219\x05\x06" +
		"\x04\x02\u1218\u1217\x03\x02\x02\x02\u1219\u121A\x03\x02\x02\x02\u121A" +
		"\u1218\x03\x02\x02\x02\u121A\u121B\x03\x02\x02\x02\u121B\u121D\x03\x02" +
		"\x02\x02\u121C\u1216\x03\x02\x02\x02\u121C\u121D\x03\x02\x02\x02\u121D" +
		"\u121E\x03\x02\x02\x02";
	private static readonly _serializedATNSegment10: string =
		"\u121E\u1220\x07\xAE\x02\x02\u121F\u1221\x05\x06\x04\x02\u1220\u121F\x03" +
		"\x02\x02\x02\u1221\u1222\x03\x02\x02\x02\u1222\u1220\x03\x02\x02\x02\u1222" +
		"\u1223\x03\x02\x02\x02\u1223\u122A\x03\x02\x02\x02\u1224\u1226\x07\x1E" +
		"\x02\x02\u1225\u1227\x05\x06\x04\x02\u1226\u1225\x03\x02\x02\x02\u1227" +
		"\u1228\x03\x02\x02\x02\u1228\u1226\x03\x02\x02\x02\u1228\u1229\x03\x02" +
		"\x02\x02\u1229\u122B\x03\x02\x02\x02\u122A\u1224\x03\x02\x02\x02\u122A" +
		"\u122B\x03\x02\x02\x02\u122B\u122C\x03\x02\x02\x02\u122C\u122D\x05\u0146" +
		"\xA4\x02\u122D\u122F\x03\x02\x02\x02\u122E\u1212\x03\x02\x02\x02\u122E" +
		"\u122F\x03\x02\x02\x02\u122F\u124D\x03\x02\x02\x02\u1230\u1232\x05\x06" +
		"\x04\x02\u1231\u1230\x03\x02\x02\x02\u1232\u1233\x03\x02\x02\x02\u1233" +
		"\u1231\x03\x02\x02\x02\u1233\u1234\x03\x02\x02\x02\u1234\u123B\x03\x02" +
		"\x02\x02\u1235\u1237\x07\xDE\x02\x02\u1236\u1238\x05\x06\x04\x02\u1237" +
		"\u1236\x03\x02\x02\x02\u1238\u1239\x03\x02\x02\x02\u1239\u1237\x03\x02" +
		"\x02\x02\u1239\u123A\x03\x02\x02\x02\u123A\u123C\x03\x02\x02\x02\u123B" +
		"\u1235\x03\x02\x02\x02\u123B\u123C\x03\x02\x02\x02\u123C\u1243\x03\x02" +
		"\x02\x02\u123D\u123F\x07\x1E\x02\x02\u123E\u1240\x05\x06\x04\x02\u123F" +
		"\u123E\x03\x02\x02\x02\u1240\u1241\x03\x02\x02\x02\u1241\u123F\x03\x02" +
		"\x02\x02\u1241\u1242\x03\x02\x02\x02\u1242\u1244\x03\x02\x02\x02\u1243" +
		"\u123D\x03\x02\x02\x02\u1243\u1244\x03\x02\x02\x02\u1244\u1245\x03\x02" +
		"\x02\x02\u1245\u1247\x07\u016A\x02\x02\u1246\u1248\x05\x06\x04\x02\u1247" +
		"\u1246\x03\x02\x02\x02\u1248\u1249\x03\x02\x02\x02\u1249\u1247\x03\x02" +
		"\x02\x02\u1249\u124A\x03\x02\x02\x02\u124A\u124B\x03\x02\x02\x02\u124B" +
		"\u124C\x05\u0144\xA3\x02\u124C\u124E\x03\x02\x02\x02\u124D\u1231\x03\x02" +
		"\x02\x02\u124D\u124E\x03\x02\x02\x02\u124E\u126C\x03\x02\x02\x02\u124F" +
		"\u1251\x05\x06\x04\x02\u1250\u124F\x03\x02\x02\x02\u1251\u1252\x03\x02" +
		"\x02\x02\u1252\u1250\x03\x02\x02\x02\u1252\u1253\x03\x02\x02\x02\u1253" +
		"\u125A\x03\x02\x02\x02\u1254\u1256\x07\xDE\x02\x02\u1255\u1257\x05\x06" +
		"\x04\x02\u1256\u1255\x03\x02\x02\x02\u1257\u1258\x03\x02\x02\x02\u1258" +
		"\u1256\x03\x02\x02\x02\u1258\u1259\x03\x02\x02\x02\u1259\u125B\x03\x02" +
		"\x02\x02\u125A\u1254\x03\x02\x02\x02\u125A\u125B\x03\x02\x02\x02\u125B" +
		"\u1262\x03\x02\x02\x02\u125C\u125E\x07\x1E\x02\x02\u125D\u125F\x05\x06" +
		"\x04\x02\u125E\u125D\x03\x02\x02\x02\u125F\u1260\x03\x02\x02\x02\u1260" +
		"\u125E\x03\x02\x02\x02\u1260\u1261\x03\x02\x02\x02\u1261\u1263\x03\x02" +
		"\x02\x02\u1262\u125C\x03\x02\x02\x02\u1262\u1263\x03\x02\x02\x02\u1263" +
		"\u1264\x03\x02\x02\x02\u1264\u1266\x070\x02\x02\u1265\u1267\x05\x06\x04" +
		"\x02\u1266\u1265\x03\x02\x02\x02\u1267\u1268\x03\x02\x02\x02\u1268\u1266" +
		"\x03\x02\x02\x02\u1268\u1269\x03\x02\x02\x02\u1269\u126A\x03\x02\x02\x02" +
		"\u126A\u126B\x05\u0142\xA2\x02\u126B\u126D\x03\x02\x02\x02\u126C\u1250" +
		"\x03\x02\x02\x02\u126C\u126D\x03\x02\x02\x02\u126D\u0141\x03\x02\x02\x02" +
		"\u126E\u1271\x07\u01AD\x02\x02\u126F\u1271\x05\u01AE\xD8\x02\u1270\u126E" +
		"\x03\x02\x02\x02\u1270\u126F\x03\x02\x02\x02\u1271\u0143\x03\x02\x02\x02" +
		"\u1272\u1275\x07\u01AD\x02\x02\u1273\u1275\x05\u01AE\xD8\x02\u1274\u1272" +
		"\x03\x02\x02\x02\u1274\u1273\x03\x02\x02\x02\u1275\u0145\x03\x02\x02\x02" +
		"\u1276\u1279\x07\u01AD\x02\x02\u1277\u1279\x05\u01AE\xD8\x02\u1278\u1276" +
		"\x03\x02\x02\x02\u1278\u1277\x03\x02\x02\x02\u1279\u0147\x03\x02\x02\x02" +
		"\u127A\u127D\x07\u01AD\x02\x02\u127B\u127D\x05\u01AE\xD8\x02\u127C\u127A" +
		"\x03\x02\x02\x02\u127C\u127B\x03\x02\x02\x02\u127D\u0149\x03\x02\x02\x02" +
		"\u127E\u1280\x07a\x02\x02\u127F\u1281\x05\x06\x04\x02\u1280\u127F\x03" +
		"\x02\x02\x02\u1281\u1282\x03\x02\x02\x02\u1282\u1280\x03\x02\x02\x02\u1282" +
		"\u1283\x03\x02\x02\x02\u1283\u1298\x03\x02\x02\x02\u1284\u128C\x07\u011F" +
		"\x02\x02\u1285\u1287\x05\x06\x04\x02\u1286\u1285\x03\x02\x02\x02\u1287" +
		"\u1288\x03\x02\x02\x02\u1288\u1286\x03\x02\x02\x02\u1288\u1289\x03\x02" +
		"\x02\x02\u1289\u128A\x03\x02\x02\x02\u128A\u128B\x07\x15\x02\x02\u128B" +
		"\u128D\x03\x02\x02\x02\u128C\u1286\x03\x02\x02\x02\u128C\u128D\x03\x02" +
		"\x02\x02\u128D\u1299\x03\x02\x02\x02\u128E\u1296\x07\u011E\x02\x02\u128F" +
		"\u1291\x05\x06\x04\x02\u1290\u128F\x03\x02\x02\x02\u1291\u1292\x03\x02" +
		"\x02\x02\u1292\u1290\x03\x02\x02\x02\u1292\u1293\x03\x02\x02\x02\u1293" +
		"\u1294\x03\x02\x02\x02\u1294\u1295\x07\xCF\x02\x02\u1295\u1297\x03\x02" +
		"\x02\x02\u1296\u1290\x03\x02\x02\x02\u1296\u1297\x03\x02\x02\x02\u1297" +
		"\u1299\x03\x02\x02\x02\u1298\u1284\x03\x02\x02\x02\u1298\u128E\x03\x02" +
		"\x02\x02\u1299\u129A\x03\x02\x02\x02\u129A\u12A4\x05\u014C\xA7\x02\u129B" +
		"\u129D\x05\x06\x04\x02\u129C\u129B\x03\x02\x02\x02\u129D\u129E\x03\x02" +
		"\x02\x02\u129E\u129C\x03\x02\x02\x02\u129E\u129F\x03\x02\x02\x02\u129F" +
		"\u12A0\x03\x02\x02\x02\u12A0\u12A1\x05\u014C\xA7\x02\u12A1\u12A3\x03\x02" +
		"\x02\x02\u12A2\u129C\x03\x02\x02\x02\u12A3\u12A6\x03\x02\x02\x02\u12A4" +
		"\u12A2\x03\x02\x02\x02\u12A4\u12A5\x03\x02\x02\x02\u12A5\u014B\x03\x02" +
		"\x02\x02\u12A6\u12A4\x03\x02\x02\x02\u12A7\u12A8\x07\u01AF\x02\x02\u12A8" +
		"\u014D\x03\x02\x02\x02\u12A9\u12AB\x07\u0179\x02\x02\u12AA\u12AC\x05\x06" +
		"\x04\x02\u12AB\u12AA\x03\x02\x02\x02\u12AC\u12AD\x03\x02\x02\x02\u12AD" +
		"\u12AB\x03\x02\x02\x02\u12AD\u12AE\x03\x02\x02\x02\u12AE\u12AF\x03\x02" +
		"\x02\x02\u12AF\u12B1\x07\xF8\x02\x02\u12B0\u12B2\x05\x06\x04\x02\u12B1" +
		"\u12B0\x03\x02\x02\x02\u12B2\u12B3\x03\x02\x02\x02\u12B3\u12B1\x03\x02" +
		"\x02\x02\u12B3\u12B4\x03\x02\x02\x02\u12B4\u12B5\x03\x02\x02\x02\u12B5" +
		"\u12B7\t\x15\x02\x02\u12B6\u12B8\x05\x06\x04\x02\u12B7\u12B6\x03\x02\x02" +
		"\x02\u12B8\u12B9\x03\x02\x02\x02\u12B9\u12B7\x03\x02\x02\x02\u12B9\u12BA" +
		"\x03\x02\x02\x02\u12BA\u12C1\x03\x02\x02\x02\u12BB\u12BD\x07\xCF\x02\x02" +
		"\u12BC\u12BE\x05\x06\x04\x02\u12BD\u12BC\x03\x02\x02\x02\u12BE\u12BF\x03" +
		"\x02\x02\x02\u12BF\u12BD\x03\x02\x02\x02\u12BF\u12C0\x03\x02\x02\x02\u12C0" +
		"\u12C2\x03\x02\x02\x02\u12C1\u12BB\x03\x02\x02\x02\u12C1\u12C2\x03\x02" +
		"\x02\x02\u12C2\u12C3\x03\x02\x02\x02\u12C3\u12C4\x05\u0150\xA9\x02\u12C4" +
		"\u014F\x03\x02\x02\x02\u12C5\u12C8\x07\u01AC\x02\x02\u12C6\u12C8\x05\u01AE" +
		"\xD8\x02\u12C7\u12C5\x03\x02\x02\x02\u12C7\u12C6\x03\x02\x02\x02\u12C8" +
		"\u0151\x03\x02\x02\x02\u12C9\u12CB\x07\xD5\x02\x02\u12CA\u12CC\x05\x06" +
		"\x04\x02\u12CB\u12CA\x03\x02\x02\x02\u12CC\u12CD\x03\x02\x02\x02\u12CD" +
		"\u12CB\x03\x02\x02\x02\u12CD\u12CE\x03\x02\x02\x02\u12CE\u12E3\x03\x02" +
		"\x02\x02\u12CF\u12D7\x07\u011F\x02\x02\u12D0\u12D2\x05\x06\x04\x02\u12D1" +
		"\u12D0\x03\x02\x02\x02\u12D2\u12D3\x03\x02\x02\x02\u12D3\u12D1\x03\x02" +
		"\x02\x02\u12D3\u12D4\x03\x02\x02\x02\u12D4\u12D5\x03\x02\x02\x02\u12D5" +
		"\u12D6\x07\x15\x02\x02\u12D6\u12D8\x03\x02\x02\x02\u12D7\u12D1\x03\x02" +
		"\x02\x02\u12D7\u12D8\x03\x02\x02\x02\u12D8\u12E4\x03\x02\x02\x02\u12D9" +
		"\u12E1\x07\u011E\x02\x02\u12DA\u12DC\x05\x06\x04\x02\u12DB\u12DA\x03\x02" +
		"\x02\x02\u12DC\u12DD\x03\x02\x02\x02\u12DD\u12DB\x03\x02\x02\x02\u12DD" +
		"\u12DE\x03\x02\x02\x02\u12DE\u12DF\x03\x02\x02\x02\u12DF\u12E0\x07\xCF" +
		"\x02\x02\u12E0\u12E2\x03\x02\x02\x02\u12E1\u12DB\x03\x02\x02\x02\u12E1" +
		"\u12E2\x03\x02\x02\x02\u12E2\u12E4\x03\x02\x02\x02\u12E3\u12CF\x03\x02" +
		"\x02\x02\u12E3\u12D9\x03\x02\x02\x02\u12E4\u12E6\x03\x02\x02\x02\u12E5" +
		"\u12E7\x05\x06\x04\x02\u12E6\u12E5\x03\x02\x02\x02\u12E7\u12E8\x03\x02" +
		"\x02\x02\u12E8\u12E6\x03\x02\x02\x02\u12E8\u12E9\x03\x02\x02\x02\u12E9" +
		"\u12EA\x03\x02\x02\x02\u12EA\u12EB\t\x16\x02\x02\u12EB\u0153\x03\x02\x02" +
		"\x02\u12EC\u12EE\x07\u011E\x02\x02\u12ED\u12EF\x05\x06\x04\x02\u12EE\u12ED" +
		"\x03\x02\x02\x02\u12EF\u12F0\x03\x02\x02\x02\u12F0\u12EE\x03\x02\x02\x02" +
		"\u12F0\u12F1\x03\x02\x02\x02\u12F1\u12F2\x03\x02\x02\x02\u12F2\u12F3\x05" +
		"\u0156\xAC\x02\u12F3\u0155\x03\x02\x02\x02\u12F4\u12F6\x07T\x02\x02\u12F5" +
		"\u12F7\x05\x06\x04\x02\u12F6\u12F5\x03\x02\x02\x02\u12F7\u12F8\x03\x02" +
		"\x02\x02\u12F8\u12F6\x03\x02\x02\x02\u12F8\u12F9\x03\x02\x02\x02\u12F9" +
		"\u12FB\x03\x02\x02\x02\u12FA\u12F4\x03\x02\x02\x02\u12FA\u12FB\x03\x02" +
		"\x02\x02\u12FB\u1308\x03\x02\x02\x02\u12FC\u12FE\x05\u015A\xAE\x02\u12FD" +
		"\u12FF\x05\x06\x04\x02\u12FE\u12FD\x03\x02\x02\x02\u12FF\u1300\x03\x02" +
		"\x02\x02\u1300\u12FE\x03\x02\x02\x02\u1300\u1301\x03\x02\x02\x02\u1301" +
		"\u1302\x03\x02\x02\x02\u1302\u1304\x07\u0169\x02\x02\u1303\u1305\x05\x06" +
		"\x04\x02\u1304\u1303\x03\x02\x02\x02\u1305\u1306\x03\x02\x02\x02\u1306" +
		"\u1304\x03\x02\x02\x02\u1306\u1307\x03\x02\x02\x02\u1307\u1309\x03\x02" +
		"\x02\x02\u1308\u12FC\x03\x02\x02\x02\u1308\u1309\x03\x02\x02\x02\u1309" +
		"\u130A\x03\x02\x02\x02\u130A\u130E\x05\u015C\xAF\x02\u130B\u130D\x05\x06" +
		"\x04\x02\u130C\u130B\x03\x02\x02\x02\u130D\u1310\x03\x02\x02\x02\u130E" +
		"\u130C\x03\x02\x02\x02\u130E\u130F\x03\x02\x02\x02\u130F\u1318\x03\x02" +
		"\x02\x02\u1310\u130E\x03\x02\x02\x02\u1311\u1315\x079\x02\x02\u1312\u1314" +
		"\x05\x06\x04\x02\u1313\u1312\x03\x02\x02\x02\u1314\u1317\x03\x02\x02\x02" +
		"\u1315\u1313\x03\x02\x02\x02\u1315\u1316\x03\x02\x02\x02\u1316\u1319\x03" +
		"\x02\x02\x02\u1317\u1315\x03\x02\x02\x02\u1318\u1311\x03\x02\x02\x02\u1318" +
		"\u1319\x03\x02\x02\x02\u1319\u1370\x03\x02\x02\x02\u131A\u131C\x07\xCF" +
		"\x02\x02\u131B\u131D\x05\x06\x04\x02\u131C\u131B\x03\x02\x02\x02\u131D" +
		"\u131E\x03\x02\x02\x02\u131E\u131C\x03\x02\x02\x02\u131E\u131F\x03\x02" +
		"\x02\x02\u131F\u1321\x03\x02\x02\x02\u1320\u131A\x03\x02\x02\x02\u1320" +
		"\u1321\x03\x02\x02\x02\u1321\u1322\x03\x02\x02\x02\u1322\u1324\x07\u017B" +
		"\x02\x02\u1323\u1325\x05\x06\x04\x02\u1324\u1323\x03\x02\x02\x02\u1325" +
		"\u1326\x03\x02\x02\x02\u1326\u1324\x03\x02\x02\x02\u1326\u1327\x03\x02" +
		"\x02\x02\u1327\u132E\x03\x02\x02\x02\u1328\u132A\x07\xC3\x02\x02\u1329" +
		"\u132B\x05\x06\x04\x02\u132A\u1329\x03\x02\x02\x02\u132B\u132C\x03\x02" +
		"\x02\x02\u132C\u132A\x03\x02\x02\x02\u132C\u132D\x03\x02\x02\x02\u132D" +
		"\u132F\x03\x02\x02\x02\u132E\u1328\x03\x02\x02\x02\u132E\u132F\x03\x02" +
		"\x02\x02\u132F\u1337\x03\x02\x02\x02\u1330\u1334\x07\u0146\x02\x02\u1331" +
		"\u1333\x05\x06\x04\x02\u1332\u1331\x03\x02\x02\x02\u1333\u1336\x03\x02" +
		"\x02\x02\u1334\u1332\x03\x02\x02\x02\u1334\u1335\x03\x02\x02\x02\u1335" +
		"\u1338\x03\x02\x02\x02\u1336\u1334\x03\x02\x02\x02\u1337\u1330\x03\x02" +
		"\x02\x02\u1337\u1338\x03\x02\x02\x02\u1338\u1342\x03\x02\x02\x02\u1339" +
		"\u133B\x07\xB1\x02\x02\u133A\u133C\x05\x06\x04\x02\u133B\u133A\x03\x02" +
		"\x02\x02\u133C\u133D\x03\x02\x02\x02\u133D\u133B\x03\x02\x02\x02\u133D" +
		"\u133E\x03\x02\x02\x02\u133E\u1340\x03\x02\x02\x02\u133F\u1339\x03\x02" +
		"\x02\x02\u133F\u1340\x03\x02\x02\x02\u1340\u1341\x03\x02\x02\x02\u1341" +
		"\u1343\x05\u015A\xAE\x02\u1342\u133F\x03\x02\x02\x02\u1342\u1343\x03\x02" +
		"\x02\x02\u1343\u134C\x03\x02\x02\x02\u1344\u1346\x07\u0169\x02\x02\u1345" +
		"\u1347\x05\x06\x04\x02\u1346\u1345\x03\x02\x02\x02\u1347\u1348\x03\x02" +
		"\x02\x02\u1348\u1346\x03\x02\x02\x02\u1348\u1349\x03\x02\x02\x02\u1349" +
		"\u134A\x03\x02\x02\x02\u134A\u134B\x05\u015C\xAF\x02\u134B\u134D\x03\x02" +
		"\x02\x02\u134C\u1344\x03\x02\x02\x02\u134C\u134D\x03\x02\x02\x02\u134D" +
		"\u135B\x03\x02\x02\x02\u134E\u1350\x05\x06\x04\x02\u134F\u134E\x03\x02" +
		"\x02\x02\u1350\u1353\x03\x02\x02\x02\u1351\u134F\x03\x02\x02\x02\u1351" +
		"\u1352\x03\x02\x02\x02\u1352\u1354\x03\x02\x02\x02\u1353\u1351\x03\x02" +
		"\x02\x02\u1354\u1358\x079\x02\x02\u1355\u1357\x05\x06\x04\x02\u1356\u1355" +
		"\x03\x02\x02\x02\u1357\u135A\x03\x02\x02\x02\u1358\u1356\x03\x02\x02\x02" +
		"\u1358\u1359\x03\x02\x02\x02\u1359\u135C\x03\x02\x02\x02\u135A\u1358\x03" +
		"\x02\x02\x02\u135B\u1351\x03\x02\x02\x02\u135B\u135C\x03\x02\x02\x02\u135C" +
		"\u136D\x03\x02\x02\x02\u135D\u135F\x07o\x02\x02\u135E\u1360\x05\x06\x04" +
		"\x02\u135F\u135E\x03\x02\x02\x02\u1360\u1361\x03\x02\x02\x02\u1361\u135F" +
		"\x03\x02\x02\x02\u1361\u1362\x03\x02\x02\x02\u1362\u1369\x03\x02\x02\x02" +
		"\u1363\u1365\x07\xFB\x02\x02\u1364\u1366\x05\x06\x04\x02\u1365\u1364\x03" +
		"\x02\x02\x02\u1366\u1367\x03\x02\x02\x02\u1367\u1365\x03\x02\x02\x02\u1367" +
		"\u1368\x03\x02\x02\x02\u1368\u136A\x03\x02\x02\x02\u1369\u1363\x03\x02" +
		"\x02\x02\u1369\u136A\x03\x02\x02\x02\u136A\u136B\x03\x02\x02\x02\u136B" +
		"\u136C\x05\u0158\xAD\x02\u136C\u136E\x03\x02\x02\x02\u136D\u135D\x03\x02" +
		"\x02\x02\u136D\u136E\x03\x02\x02\x02\u136E\u1370\x03\x02\x02\x02\u136F" +
		"\u12FA\x03\x02\x02\x02\u136F\u1320\x03\x02\x02\x02\u1370\u0157\x03\x02" +
		"\x02\x02\u1371\u1372\x05\u01AE\xD8\x02\u1372\u0159\x03\x02\x02\x02\u1373" +
		"\u1374\x07\u01AD\x02\x02\u1374\u015B\x03\x02\x02\x02\u1375\u1376\x07\u01AD" +
		"\x02\x02\u1376\u015D\x03\x02\x02\x02\u1377\u1381\x05\xD4k\x02\u1378\u137A" +
		"\x05\x06\x04\x02\u1379\u1378\x03\x02\x02\x02\u137A\u137B\x03\x02\x02\x02" +
		"\u137B\u1379\x03\x02\x02\x02\u137B\u137C\x03\x02\x02\x02\u137C\u137F\x03" +
		"\x02\x02\x02\u137D\u1380\x05\u0160\xB1\x02\u137E\u1380\x07\xA7\x02\x02" +
		"\u137F\u137D\x03\x02\x02\x02\u137F\u137E\x03\x02\x02\x02\u1380\u1382\x03" +
		"\x02\x02\x02\u1381\u1379\x03\x02\x02\x02\u1381\u1382\x03\x02\x02\x02\u1382" +
		"\u138C\x03\x02\x02\x02\u1383\u1385\x05\x06\x04\x02\u1384\u1383\x03\x02" +
		"\x02\x02\u1385\u1386\x03\x02\x02\x02\u1386\u1384\x03\x02\x02\x02\u1386" +
		"\u1387\x03\x02\x02\x02\u1387\u1388\x03\x02\x02\x02\u1388\u1389\x05\u0162" +
		"\xB2\x02\u1389\u138B\x03\x02\x02\x02\u138A\u1384\x03\x02\x02\x02\u138B" +
		"\u138E\x03\x02\x02\x02\u138C\u138A\x03\x02\x02\x02\u138C\u138D\x03\x02" +
		"\x02\x02\u138D\u138F\x03\x02\x02\x02\u138E\u138C\x03\x02\x02\x02\u138F" +
		"\u1390\x07\u01A9\x02\x02\u1390\u015F\x03\x02\x02\x02\u1391\u1392\x07\u01AF" +
		"\x02\x02\u1392\u0161\x03\x02\x02\x02\u1393\u1395\x07+\x02\x02\u1394\u1396" +
		"\x05\x06\x04\x02\u1395\u1394\x03\x02\x02\x02\u1396\u1397\x03\x02\x02\x02" +
		"\u1397\u1395\x03\x02\x02\x02\u1397\u1398\x03\x02\x02\x02\u1398\u1399\x03" +
		"\x02\x02\x02\u1399\u139A\t\x05\x02\x02\u139A\u145E\x03\x02\x02\x02\u139B" +
		"\u139D\x07\xB0\x02\x02\u139C\u139E\x05\x06\x04\x02\u139D\u139C\x03\x02" +
		"\x02\x02\u139E\u139F\x03\x02\x02\x02\u139F\u139D\x03\x02\x02\x02\u139F" +
		"\u13A0\x03\x02\x02\x02\u13A0\u13A7\x03\x02\x02\x02\u13A1\u13A3\x07\xCF" +
		"\x02\x02\u13A2\u13A4\x05\x06\x04\x02\u13A3\u13A2\x03\x02\x02\x02\u13A4" +
		"\u13A5\x03\x02\x02\x02\u13A5\u13A3\x03\x02\x02\x02\u13A5\u13A6\x03\x02" +
		"\x02\x02\u13A6\u13A8\x03\x02\x02\x02\u13A7\u13A1\x03\x02\x02\x02\u13A7" +
		"\u13A8\x03\x02\x02\x02\u13A8\u13A9\x03\x02\x02\x02\u13A9\u13AA\x05\u016E" +
		"\xB8\x02\u13AA\u145E\x03\x02\x02\x02\u13AB\u13AD\x07#\x02\x02\u13AC\u13AE" +
		"\x05\x06\x04\x02\u13AD\u13AC\x03\x02\x02\x02\u13AE\u13AF\x03\x02\x02\x02" +
		"\u13AF\u13AD\x03\x02\x02\x02\u13AF\u13B0\x03\x02\x02\x02\u13B0\u13B7\x03" +
		"\x02\x02\x02\u13B1\u13B3\x07\xCF\x02\x02\u13B2\u13B4\x05\x06\x04\x02\u13B3" +
		"\u13B2\x03\x02\x02\x02\u13B4\u13B5\x03\x02\x02\x02\u13B5\u13B3\x03\x02" +
		"\x02\x02\u13B5\u13B6\x03\x02\x02\x02\u13B6\u13B8\x03\x02\x02\x02\u13B7" +
		"\u13B1\x03\x02\x02\x02\u13B7\u13B8\x03\x02\x02\x02\u13B8\u13B9\x03\x02" +
		"\x02\x02\u13B9\u13BA\x05\u016E\xB8\x02\u13BA\u145E\x03\x02\x02\x02\u13BB" +
		"\u145E\x07 \x02\x02\u13BC\u145E\x07\u013C\x02\x02\u13BD\u145E\x07\u012B" +
		"\x02\x02\u13BE\u13C0\x07\u0176\x02\x02\u13BF\u13C1\x05\x06\x04\x02\u13C0" +
		"\u13BF\x03\x02\x02\x02\u13C1\u13C2\x03\x02\x02\x02\u13C2\u13C0\x03\x02" +
		"\x02\x02\u13C2\u13C3\x03\x02\x02\x02\u13C3\u13CA\x03\x02\x02\x02\u13C4" +
		"\u13C6\x07\xCF\x02\x02\u13C5\u13C7\x05\x06\x04\x02\u13C6\u13C5\x03\x02" +
		"\x02\x02\u13C7\u13C8\x03\x02\x02\x02\u13C8\u13C6\x03\x02\x02\x02\u13C8" +
		"\u13C9\x03\x02\x02\x02\u13C9\u13CB\x03\x02\x02\x02\u13CA\u13C4\x03\x02" +
		"\x02\x02\u13CA\u13CB\x03\x02\x02\x02\u13CB\u13CD\x03\x02\x02\x02\u13CC" +
		"\u13BE\x03\x02\x02\x02\u13CC\u13CD\x03\x02\x02\x02\u13CD\u13CE\x03\x02" +
		"\x02\x02\u13CE\u145E\x07s\x02\x02\u13CF\u145E\x05\u0104\x83\x02\u13D0" +
		"\u145E\x07\xB2\x02\x02\u13D1\u145E\x07%\x02\x02\u13D2\u145E\x07,\x02\x02" +
		"\u13D3\u13D5\x07\x98\x02\x02\u13D4\u13D6\x05\x06\x04\x02\u13D5\u13D4\x03" +
		"\x02\x02\x02\u13D6\u13D7\x03\x02\x02\x02\u13D7\u13D5\x03\x02\x02\x02\u13D7" +
		"\u13D8\x03\x02\x02\x02\u13D8\u13D9\x03\x02\x02\x02\u13D9\u13DA\t\x17\x02" +
		"\x02\u13DA\u145E\x03\x02\x02\x02\u13DB\u145E\x07\xBB\x02\x02\u13DC\u145E" +
		"\x07\xE3\x02\x02\u13DD\u145E\x07\u0131\x02\x02\u13DE\u145E\x07\u016E\x02" +
		"\x02\u13DF\u13E1\x07\xDD\x02\x02\u13E0\u13E2\x05\x06\x04\x02\u13E1\u13E0" +
		"\x03\x02\x02\x02\u13E2\u13E3\x03\x02\x02\x02\u13E3\u13E1\x03\x02\x02\x02" +
		"\u13E3\u13E4\x03\x02\x02\x02\u13E4\u13EB\x03\x02\x02\x02\u13E5\u13E7\x07" +
		"\xF4\x02\x02\u13E6\u13E8\x05\x06\x04\x02\u13E7\u13E6\x03\x02\x02\x02\u13E8" +
		"\u13E9\x03\x02\x02\x02\u13E9\u13E7\x03\x02\x02\x02\u13E9\u13EA\x03\x02" +
		"\x02\x02\u13EA\u13EC\x03\x02\x02\x02\u13EB\u13E5\x03\x02\x02\x02\u13EB" +
		"\u13EC\x03\x02\x02\x02\u13EC\u13F3\x03\x02\x02\x02\u13ED\u13EF\x07\xCF" +
		"\x02\x02\u13EE\u13F0\x05\x06\x04\x02\u13EF\u13EE\x03\x02\x02\x02\u13F0" +
		"\u13F1\x03\x02\x02\x02\u13F1\u13EF\x03\x02\x02\x02\u13F1\u13F2\x03\x02" +
		"\x02\x02\u13F2\u13F4\x03\x02\x02\x02\u13F3\u13ED\x03\x02\x02\x02\u13F3" +
		"\u13F4\x03\x02\x02\x02\u13F4\u13FB\x03\x02\x02\x02\u13F5\u13F7\x07\u010D" +
		"\x02\x02\u13F6\u13F8\x05\x06\x04\x02\u13F7\u13F6\x03\x02\x02\x02\u13F8" +
		"\u13F9\x03\x02\x02\x02\u13F9\u13F7\x03\x02\x02\x02\u13F9\u13FA\x03\x02" +
		"\x02\x02\u13FA\u13FC\x03\x02\x02\x02\u13FB\u13F5\x03\x02\x02\x02\u13FB" +
		"\u13FC\x03\x02\x02\x02\u13FC\u13FD\x03\x02\x02\x02\u13FD\u13FE\x05\u016C" +
		"\xB7\x02\u13FE\u145E\x03\x02\x02\x02\u13FF\u1401\x07@\x02\x02\u1400\u1402" +
		"\x05\x06\x04\x02\u1401\u1400\x03\x02\x02\x02\u1402\u1403\x03\x02\x02\x02" +
		"\u1403\u1401\x03\x02\x02\x02\u1403\u1404\x03\x02\x02\x02\u1404\u140B\x03" +
		"\x02\x02\x02\u1405\u1407\x07\xF4\x02\x02\u1406\u1408\x05\x06\x04\x02\u1407" +
		"\u1406\x03\x02\x02\x02\u1408\u1409\x03\x02\x02\x02\u1409\u1407\x03\x02" +
		"\x02\x02\u1409\u140A\x03\x02\x02\x02\u140A\u140C\x03\x02\x02\x02\u140B" +
		"\u1405\x03\x02\x02\x02\u140B\u140C\x03\x02\x02\x02\u140C\u1413\x03\x02" +
		"\x02\x02\u140D\u140F\x07\xCF\x02\x02\u140E\u1410\x05\x06\x04\x02\u140F" +
		"\u140E\x03\x02\x02\x02\u1410\u1411\x03\x02\x02\x02\u1411\u140F\x03\x02" +
		"\x02\x02\u1411\u1412\x03\x02\x02\x02\u1412\u1414\x03\x02\x02\x02\u1413" +
		"\u140D\x03\x02\x02\x02\u1413\u1414\x03\x02\x02\x02\u1414\u141B\x03\x02" +
		"\x02\x02\u1415\u1417\x07\u010D\x02\x02\u1416\u1418\x05\x06\x04\x02\u1417" +
		"\u1416\x03\x02\x02\x02\u1418\u1419\x03\x02\x02\x02\u1419\u1417\x03\x02" +
		"\x02\x02\u1419\u141A\x03\x02\x02\x02\u141A\u141C\x03\x02\x02\x02\u141B" +
		"\u1415\x03\x02\x02\x02\u141B\u141C\x03\x02\x02\x02\u141C\u141D\x03\x02" +
		"\x02\x02\u141D\u141E\x05\u016C\xB7\x02\u141E\u145E\x03\x02\x02\x02\u141F" +
		"\u1421\x07\u0179\x02\x02\u1420\u1422\x05\x06\x04\x02\u1421\u1420\x03\x02" +
		"\x02\x02\u1422\u1423\x03\x02\x02\x02\u1423\u1421\x03\x02\x02\x02\u1423" +
		"\u1424\x03\x02\x02\x02\u1424\u142B\x03\x02\x02\x02\u1425\u1427\x07\xCF" +
		"\x02\x02\u1426\u1428\x05\x06\x04\x02\u1427\u1426\x03\x02\x02\x02\u1428" +
		"\u1429\x03\x02\x02\x02\u1429\u1427\x03\x02\x02\x02\u1429\u142A\x03\x02" +
		"\x02\x02\u142A\u142C\x03\x02\x02\x02\u142B\u1425\x03\x02\x02\x02\u142B" +
		"\u142C\x03\x02\x02\x02\u142C\u142D\x03\x02\x02\x02\u142D\u142E\x05\u016A" +
		"\xB6\x02\u142E\u145E\x03\x02\x02\x02\u142F\u1431\x07+\x02\x02\u1430\u1432" +
		"\x05\x06\x04\x02\u1431\u1430\x03\x02\x02\x02\u1432\u1433\x03\x02\x02\x02" +
		"\u1433\u1431\x03\x02\x02\x02\u1433\u1434\x03\x02\x02\x02\u1434\u143B\x03" +
		"\x02\x02\x02\u1435\u1437\x07\u017D\x02\x02\u1436\u1438\x05\x06\x04\x02" +
		"\u1437\u1436\x03\x02\x02\x02\u1438\u1439\x03\x02\x02\x02\u1439\u1437\x03" +
		"\x02\x02\x02\u1439\u143A\x03\x02\x02\x02\u143A\u143C\x03\x02\x02\x02\u143B" +
		"\u1435\x03\x02\x02\x02\u143B\u143C\x03\x02\x02\x02\u143C\u143D\x03\x02" +
		"\x02\x02\u143D\u143E\x07\u0185\x02\x02\u143E\u145E\x03\x02\x02\x02\u143F" +
		"\u1447\t\v\x02\x02\u1440\u1442\x05\x06\x04\x02\u1441\u1440\x03\x02\x02" +
		"\x02\u1442\u1443\x03\x02\x02\x02\u1443\u1441\x03\x02\x02\x02\u1443\u1444" +
		"\x03\x02\x02\x02\u1444\u1445\x03\x02\x02\x02\u1445\u1446\x07\u0135\x02" +
		"\x02\u1446\u1448\x03\x02\x02\x02\u1447\u1441\x03\x02\x02\x02\u1447\u1448" +
		"\x03\x02\x02\x02\u1448\u145E\x03\x02\x02\x02\u1449\u144B\x05\u0130\x99" +
		"\x02\u144A\u144C\x05\x06\x04\x02\u144B\u144A\x03\x02\x02\x02\u144C\u144D" +
		"\x03\x02\x02\x02\u144D\u144B\x03\x02\x02\x02\u144D\u144E\x03\x02\x02\x02" +
		"\u144E\u145B\x03\x02\x02\x02\u144F\u145C\x05\u0164\xB3\x02\u1450\u1458" +
		"\x05\u0166\xB4\x02\u1451\u1453\x05\x06\x04\x02\u1452\u1451\x03\x02\x02" +
		"\x02\u1453\u1454\x03\x02\x02\x02\u1454\u1452\x03\x02\x02\x02\u1454\u1455" +
		"\x03\x02\x02\x02\u1455\u1456\x03\x02\x02\x02\u1456\u1457\x05\u0168\xB5" +
		"\x02\u1457\u1459\x03\x02\x02\x02\u1458\u1452\x03\x02\x02\x02\u1458\u1459" +
		"\x03\x02\x02\x02\u1459\u145C\x03\x02\x02\x02\u145A\u145C\x05\u0168\xB5" +
		"\x02\u145B\u144F\x03\x02\x02\x02\u145B\u1450\x03\x02\x02\x02\u145B\u145A" +
		"\x03\x02\x02\x02\u145C\u145E\x03\x02\x02\x02\u145D\u1393\x03\x02\x02\x02" +
		"\u145D\u139B\x03\x02\x02\x02\u145D\u13AB\x03\x02\x02\x02\u145D\u13BB\x03" +
		"\x02\x02\x02\u145D\u13BC\x03\x02\x02\x02\u145D\u13BD\x03\x02\x02\x02\u145D" +
		"\u13CC\x03\x02\x02\x02\u145D\u13CF\x03\x02\x02\x02\u145D\u13D0\x03\x02" +
		"\x02\x02\u145D\u13D1\x03\x02\x02\x02\u145D\u13D2\x03\x02\x02\x02\u145D" +
		"\u13D3\x03\x02\x02\x02\u145D\u13DB\x03\x02\x02\x02\u145D\u13DC\x03\x02" +
		"\x02\x02\u145D\u13DD\x03\x02\x02\x02\u145D\u13DE\x03\x02\x02\x02\u145D" +
		"\u13DF\x03\x02\x02\x02\u145D\u13FF\x03\x02\x02\x02\u145D\u141F\x03\x02" +
		"\x02\x02\u145D\u142F\x03\x02\x02\x02\u145D\u143F\x03\x02\x02\x02\u145D" +
		"\u1449\x03\x02\x02\x02\u145E\u0163\x03\x02\x02\x02\u145F\u1461\x07\u0178" +
		"\x02\x02\u1460\u1462\x05\x06\x04\x02\u1461\u1460\x03\x02\x02\x02\u1462" +
		"\u1463\x03\x02\x02\x02\u1463\u1461\x03\x02\x02\x02\u1463\u1464\x03\x02" +
		"\x02\x02\u1464\u1465\x03\x02\x02\x02\u1465\u1466\x05\u01AE\xD8\x02\u1466" +
		"\u0165\x03\x02\x02\x02\u1467\u1469\x07\xB1\x02\x02\u1468\u146A\x05\x06" +
		"\x04\x02\u1469\u1468\x03\x02\x02\x02\u146A\u146B\x03\x02\x02\x02\u146B" +
		"\u1469\x03\x02\x02\x02\u146B\u146C\x03\x02\x02\x02\u146C\u146F\x03\x02" +
		"\x02\x02\u146D\u1470\x05\u01AE\xD8\x02\u146E\u1470\x05\u016A\xB6\x02\u146F" +
		"\u146D\x03\x02\x02\x02\u146F\u146E\x03\x02\x02\x02\u1470\u0167\x03\x02" +
		"\x02\x02\u1471\u1473\x07\u0169\x02\x02\u1472\u1474\x05\x06\x04\x02\u1473" +
		"\u1472\x03\x02\x02\x02\u1474\u1475\x03\x02\x02\x02\u1475\u1473\x03\x02" +
		"\x02\x02\u1475\u1476\x03\x02\x02\x02\u1476\u1477\x03\x02\x02\x02\u1477" +
		"\u1478\x05\u01AE\xD8\x02\u1478\u0169\x03\x02\x02\x02\u1479\u147A\x07\u01AC" +
		"\x02\x02\u147A\u016B\x03\x02\x02\x02\u147B\u147E\x05\u01AE\xD8\x02\u147C" +
		"\u147E\x07\u01AD\x02\x02\u147D\u147B\x03\x02\x02\x02\u147D\u147C\x03\x02" +
		"\x02\x02\u147E\u016D\x03\x02\x02\x02\u147F\u1480\x07\u01AD\x02\x02\u1480" +
		"\u016F\x03\x02\x02\x02\u1481\u1483\x07\x05\x02\x02\u1482\u1484\x05\x06" +
		"\x04\x02\u1483\u1482\x03\x02\x02\x02\u1484\u1485\x03\x02\x02\x02\u1485" +
		"\u1483\x03\x02\x02\x02\u1485\u1486\x03\x02\x02\x02\u1486\u1487\x03\x02" +
		"\x02\x02\u1487\u148B\x07u\x02\x02\u1488\u148A\x05\x06\x04\x02\u1489\u1488" +
		"\x03\x02\x02\x02\u148A\u148D\x03\x02\x02\x02\u148B\u1489\x03\x02\x02\x02" +
		"\u148B\u148C\x03\x02\x02\x02\u148C\u148E\x03\x02\x02\x02\u148D\u148B\x03" +
		"\x02\x02\x02\u148E\u1492\x07\u01A9\x02\x02\u148F\u1491\x05\x06\x04\x02" +
		"\u1490\u148F\x03\x02\x02\x02\u1491\u1494\x03\x02\x02\x02\u1492\u1490\x03" +
		"\x02\x02\x02\u1492\u1493\x03\x02\x02\x02\u1493\u1498\x03\x02\x02\x02\u1494" +
		"\u1492\x03\x02\x02\x02\u1495\u1497\x05\u0172\xBA\x02\u1496\u1495\x03\x02" +
		"\x02\x02\u1497\u149A\x03\x02\x02\x02\u1498\u1496\x03\x02\x02\x02\u1498" +
		"\u1499\x03\x02\x02\x02\u1499\u0171\x03\x02\x02\x02\u149A\u1498\x03\x02" +
		"\x02\x02\u149B\u14A4\x05\u0174\xBB\x02\u149C\u14A4\x05\u0180\xC1\x02\u149D" +
		"\u14A4\x05\u0182\xC2\x02\u149E\u14A4\x05\u0184\xC3\x02\u149F\u14A4\x05" +
		"\u0186\xC4\x02\u14A0\u14A4\x05\u0188\xC5\x02\u14A1\u14A4\x05\u018A\xC6" +
		"\x02\u14A2\u14A4\x05\x06\x04\x02\u14A3\u149B\x03\x02\x02\x02\u14A3\u149C" +
		"\x03\x02\x02\x02\u14A3\u149D\x03\x02\x02\x02\u14A3\u149E\x03\x02\x02\x02" +
		"\u14A3\u149F\x03\x02\x02\x02\u14A3\u14A0\x03\x02\x02\x02\u14A3\u14A1\x03" +
		"\x02\x02\x02\u14A3\u14A2\x03\x02\x02\x02\u14A4\u0173\x03\x02\x02\x02\u14A5" +
		"\u14A9\x07\u0117\x02\x02\u14A6\u14A8\x05\x06\x04\x02\u14A7\u14A6\x03\x02" +
		"\x02\x02\u14A8\u14AB\x03\x02\x02\x02\u14A9\u14A7\x03\x02\x02\x02\u14A9" +
		"\u14AA\x03\x02\x02\x02\u14AA\u14AC\x03\x02\x02\x02\u14AB\u14A9\x03\x02" +
		"\x02\x02\u14AC\u14B0\x07\u01A9\x02\x02\u14AD\u14AF\x05\x06\x04\x02\u14AE" +
		"\u14AD\x03\x02\x02\x02\u14AF\u14B2\x03\x02\x02\x02\u14B0\u14AE\x03\x02" +
		"\x02\x02\u14B0\u14B1\x03\x02\x02\x02\u14B1\u14B3\x03\x02\x02\x02\u14B2" +
		"\u14B0\x03\x02\x02\x02\u14B3\u14B7\x05\u0176\xBC\x02\u14B4\u14B6\x05\x06" +
		"\x04\x02\u14B5\u14B4\x03\x02\x02\x02\u14B6\u14B9\x03\x02\x02\x02\u14B7" +
		"\u14B5\x03\x02\x02\x02\u14B7\u14B8\x03\x02\x02\x02\u14B8\u14BB\x03\x02" +
		"\x02\x02\u14B9\u14B7\x03\x02\x02\x02\u14BA\u14BC\x05\u0178\xBD\x02\u14BB" +
		"\u14BA\x03\x02\x02\x02\u14BB\u14BC\x03\x02\x02\x02\u14BC\u14C0\x03\x02" +
		"\x02\x02\u14BD\u14BF\x05\x06\x04\x02\u14BE\u14BD\x03\x02\x02\x02\u14BF" +
		"\u14C2\x03\x02\x02\x02\u14C0\u14BE\x03\x02\x02\x02\u14C0\u14C1\x03\x02" +
		"\x02\x02\u14C1\u14C4";
	private static readonly _serializedATNSegment11: string =
		"\x03\x02\x02\x02\u14C2\u14C0\x03\x02\x02\x02\u14C3\u14C5\x05\u017A\xBE" +
		"\x02\u14C4\u14C3\x03\x02\x02\x02\u14C4\u14C5\x03\x02\x02\x02\u14C5\u14C9" +
		"\x03\x02\x02\x02\u14C6\u14C8\x05\x06\x04\x02\u14C7\u14C6\x03\x02\x02\x02" +
		"\u14C8\u14CB\x03\x02\x02\x02\u14C9\u14C7\x03\x02\x02\x02\u14C9\u14CA\x03" +
		"\x02\x02\x02\u14CA\u14CC\x03\x02\x02\x02\u14CB\u14C9\x03\x02\x02\x02\u14CC" +
		"\u14CD\x07\u01A9\x02\x02\u14CD\u0175\x03\x02\x02\x02\u14CE\u14CF\x07\u01AF" +
		"\x02\x02\u14CF\u0177\x03\x02\x02\x02\u14D0\u14D2\x07\xCF\x02\x02\u14D1" +
		"\u14D3\x05\x06\x04\x02\u14D2\u14D1\x03\x02\x02\x02\u14D3\u14D4\x03\x02" +
		"\x02\x02\u14D4\u14D2\x03\x02\x02\x02\u14D4\u14D5\x03\x02\x02\x02\u14D5" +
		"\u14D7\x03\x02\x02\x02\u14D6\u14D0\x03\x02\x02\x02\u14D6\u14D7\x03\x02" +
		"\x02\x02\u14D7\u14D8\x03\x02\x02\x02\u14D8\u14E0\t\x18\x02\x02\u14D9\u14DB" +
		"\x05\x06\x04\x02\u14DA\u14D9\x03\x02\x02\x02\u14DB\u14DC\x03\x02\x02\x02" +
		"\u14DC\u14DA\x03\x02\x02\x02\u14DC\u14DD\x03\x02\x02\x02\u14DD\u14DE\x03" +
		"\x02\x02\x02\u14DE\u14DF\x07\u0116\x02\x02\u14DF\u14E1\x03\x02\x02\x02" +
		"\u14E0\u14DA\x03\x02\x02\x02\u14E0\u14E1\x03\x02\x02\x02\u14E1\u0179\x03" +
		"\x02\x02\x02\u14E2\u14E4\x07\u017F\x02\x02\u14E3\u14E5\x05\x06\x04\x02" +
		"\u14E4\u14E3\x03\x02\x02\x02\u14E5\u14E6\x03\x02\x02\x02\u14E6\u14E4\x03" +
		"\x02\x02\x02\u14E6\u14E7\x03\x02\x02\x02\u14E7\u14E9\x03\x02\x02\x02\u14E8" +
		"\u14E2\x03\x02\x02\x02\u14E8\u14E9\x03\x02\x02\x02\u14E9\u14EA\x03\x02" +
		"\x02\x02\u14EA\u14EC\x07\xC0\x02\x02\u14EB\u14ED\x05\x06\x04\x02\u14EC" +
		"\u14EB\x03\x02\x02\x02\u14ED\u14EE\x03\x02\x02\x02\u14EE\u14EC\x03\x02" +
		"\x02\x02\u14EE\u14EF\x03\x02\x02\x02\u14EF\u14F0\x03\x02\x02\x02\u14F0" +
		"\u14F1\x05\u017C\xBF\x02\u14F1\u017B\x03\x02\x02\x02\u14F2\u14F3\x07\u01AC" +
		"\x02\x02\u14F3\u017D\x03\x02\x02\x02\u14F4\u14F8\x07\u01B0\x02\x02\u14F5" +
		"\u14F7\n\x02\x02\x02\u14F6\u14F5\x03\x02\x02\x02\u14F7\u14FA\x03\x02\x02" +
		"\x02\u14F8\u14F6\x03\x02\x02\x02\u14F8\u14F9\x03\x02\x02\x02\u14F9\u14FB" +
		"\x03\x02\x02\x02\u14FA\u14F8\x03\x02\x02\x02\u14FB\u14FE\x07\u01B2\x02" +
		"\x02\u14FC\u14FE\x05\n\x06\x02\u14FD\u14F4\x03\x02\x02\x02\u14FD\u14FC" +
		"\x03\x02\x02\x02\u14FE\u017F\x03\x02\x02\x02\u14FF\u1503\x07\x1F\x02\x02" +
		"\u1500\u1502\x05\x06\x04\x02\u1501\u1500\x03\x02\x02\x02\u1502\u1505\x03" +
		"\x02\x02\x02\u1503\u1501\x03\x02\x02\x02\u1503\u1504\x03\x02\x02\x02\u1504" +
		"\u1506\x03\x02\x02\x02\u1505\u1503\x03\x02\x02\x02\u1506\u150A\x07\u01A9" +
		"\x02\x02\u1507\u1509\n\x02\x02\x02\u1508\u1507\x03\x02\x02\x02\u1509\u150C" +
		"\x03\x02\x02\x02\u150A\u1508\x03\x02\x02\x02\u150A\u150B\x03\x02\x02\x02" +
		"\u150B\u150D\x03\x02\x02\x02\u150C\u150A\x03\x02\x02\x02\u150D\u1511\x07" +
		"\u01B2\x02\x02\u150E\u1510\x05\u017E\xC0\x02\u150F\u150E\x03\x02\x02\x02" +
		"\u1510\u1513\x03\x02\x02\x02\u1511\u150F\x03\x02\x02\x02\u1511\u1512\x03" +
		"\x02\x02\x02\u1512\u0181\x03\x02\x02\x02\u1513\u1511\x03\x02\x02\x02\u1514" +
		"\u1518\x07\xCD\x02\x02\u1515\u1517\x05\x06\x04\x02\u1516\u1515\x03\x02" +
		"\x02\x02\u1517\u151A\x03\x02\x02\x02\u1518\u1516\x03\x02\x02\x02\u1518" +
		"\u1519\x03\x02\x02\x02\u1519\u151B\x03\x02\x02\x02\u151A\u1518\x03\x02" +
		"\x02\x02\u151B\u151F\x07\u01A9\x02\x02\u151C\u151E\n\x02\x02\x02\u151D" +
		"\u151C\x03\x02\x02\x02\u151E\u1521\x03\x02\x02\x02\u151F\u151D\x03\x02" +
		"\x02\x02\u151F\u1520\x03\x02\x02\x02\u1520\u1522\x03\x02\x02\x02\u1521" +
		"\u151F\x03\x02\x02\x02\u1522\u1526\x07\u01B2\x02\x02\u1523\u1525\x05\u017E" +
		"\xC0\x02\u1524\u1523\x03\x02\x02\x02\u1525\u1528\x03\x02\x02\x02\u1526" +
		"\u1524\x03\x02\x02\x02\u1526\u1527\x03\x02\x02\x02\u1527\u0183\x03\x02" +
		"\x02\x02\u1528\u1526\x03\x02\x02\x02\u1529\u152D\x07d\x02\x02\u152A\u152C" +
		"\x05\x06\x04\x02\u152B\u152A\x03\x02\x02\x02\u152C\u152F\x03\x02\x02\x02" +
		"\u152D\u152B\x03\x02\x02\x02\u152D\u152E\x03\x02\x02\x02\u152E\u1530\x03" +
		"\x02\x02\x02\u152F\u152D\x03\x02\x02\x02\u1530\u1534\x07\u01A9\x02\x02" +
		"\u1531\u1533\n\x02\x02\x02\u1532\u1531\x03\x02\x02\x02\u1533\u1536\x03" +
		"\x02\x02\x02\u1534\u1532\x03\x02\x02\x02\u1534\u1535\x03\x02\x02\x02\u1535" +
		"\u1537\x03\x02\x02\x02\u1536\u1534\x03\x02\x02\x02\u1537\u153B\x07\u01B2" +
		"\x02\x02\u1538\u153A\x05\u017E\xC0\x02\u1539\u1538\x03\x02\x02\x02\u153A" +
		"\u153D\x03\x02\x02\x02\u153B\u1539\x03\x02\x02\x02\u153B\u153C\x03\x02" +
		"\x02\x02\u153C\u0185\x03\x02\x02\x02\u153D\u153B\x03\x02\x02\x02\u153E" +
		"\u1542\x07c\x02\x02\u153F\u1541\x05\x06\x04\x02\u1540\u153F\x03\x02\x02" +
		"\x02\u1541\u1544\x03\x02\x02\x02\u1542\u1540\x03\x02\x02\x02\u1542\u1543" +
		"\x03\x02\x02\x02\u1543\u1545\x03\x02\x02\x02\u1544\u1542\x03\x02\x02\x02" +
		"\u1545\u1549\x07\u01A9\x02\x02\u1546\u1548\n\x02\x02\x02\u1547\u1546\x03" +
		"\x02\x02\x02\u1548\u154B\x03\x02\x02\x02\u1549\u1547\x03\x02\x02\x02\u1549" +
		"\u154A\x03\x02\x02\x02\u154A\u154C\x03\x02\x02\x02\u154B\u1549\x03\x02" +
		"\x02\x02\u154C\u1550\x07\u01B2\x02\x02\u154D\u154F\x05\u017E\xC0\x02\u154E" +
		"\u154D\x03\x02\x02\x02\u154F\u1552\x03\x02\x02\x02\u1550\u154E\x03\x02" +
		"\x02\x02\u1550\u1551\x03\x02\x02\x02\u1551\u0187\x03\x02\x02\x02\u1552" +
		"\u1550\x03\x02\x02\x02\u1553\u1557\x07\u013D\x02\x02\u1554\u1556\x05\x06" +
		"\x04\x02\u1555\u1554\x03\x02\x02\x02\u1556\u1559\x03\x02\x02\x02\u1557" +
		"\u1555\x03\x02\x02\x02\u1557\u1558\x03\x02\x02\x02\u1558\u155A\x03\x02" +
		"\x02\x02\u1559\u1557\x03\x02\x02\x02\u155A\u155E\x07\u01A9\x02\x02\u155B" +
		"\u155D\n\x02\x02\x02\u155C\u155B\x03\x02\x02\x02\u155D\u1560\x03\x02\x02" +
		"\x02\u155E\u155C\x03\x02\x02\x02\u155E\u155F\x03\x02\x02\x02\u155F\u1561" +
		"\x03\x02\x02\x02\u1560\u155E\x03\x02\x02\x02\u1561\u1565\x07\u01B2\x02" +
		"\x02\u1562\u1564\x05\u017E\xC0\x02\u1563\u1562\x03\x02\x02\x02\u1564\u1567" +
		"\x03\x02\x02\x02\u1565\u1563\x03\x02\x02\x02\u1565\u1566\x03\x02\x02\x02" +
		"\u1566\u0189\x03\x02\x02\x02\u1567\u1565\x03\x02\x02\x02\u1568\u156C\x07" +
		"\xFE\x02\x02\u1569\u156B\x05\x06\x04\x02\u156A\u1569\x03\x02\x02\x02\u156B" +
		"\u156E\x03\x02\x02\x02\u156C\u156A\x03\x02\x02\x02\u156C\u156D\x03\x02" +
		"\x02\x02\u156D\u156F\x03\x02\x02\x02\u156E\u156C\x03\x02\x02\x02\u156F" +
		"\u1573\x07\u01A9\x02\x02\u1570\u1572\x05\x06\x04\x02\u1571\u1570\x03\x02" +
		"\x02\x02\u1572\u1575\x03\x02\x02\x02\u1573\u1571\x03\x02\x02\x02\u1573" +
		"\u1574\x03\x02\x02\x02\u1574\u1577\x03\x02\x02\x02\u1575\u1573\x03\x02" +
		"\x02\x02\u1576\u1578\x05\u018C\xC7\x02\u1577\u1576\x03\x02\x02\x02\u1577" +
		"\u1578\x03\x02\x02\x02\u1578\u157C\x03\x02\x02\x02\u1579\u157B\x05\x06" +
		"\x04\x02\u157A\u1579\x03\x02\x02\x02\u157B\u157E\x03\x02\x02\x02\u157C" +
		"\u157A\x03\x02\x02\x02\u157C\u157D\x03\x02\x02\x02\u157D\u1580\x03\x02" +
		"\x02\x02\u157E\u157C\x03\x02\x02\x02\u157F\u1581\x07\u01A9\x02\x02\u1580" +
		"\u157F\x03\x02\x02\x02\u1580\u1581\x03\x02\x02\x02\u1581\u018B\x03\x02" +
		"\x02\x02\u1582\u1584\x07\x1A\x02\x02\u1583\u1585\x05\x06\x04\x02\u1584" +
		"\u1583\x03\x02\x02\x02\u1585\u1586\x03\x02\x02\x02\u1586\u1584\x03\x02" +
		"\x02\x02\u1586\u1587\x03\x02\x02\x02\u1587\u158E\x03\x02\x02\x02\u1588" +
		"\u158A\x07\xCF\x02\x02\u1589\u158B\x05\x06\x04\x02\u158A\u1589\x03\x02" +
		"\x02\x02\u158B\u158C\x03\x02\x02\x02\u158C\u158A\x03\x02\x02\x02\u158C" +
		"\u158D\x03\x02\x02\x02\u158D\u158F\x03\x02\x02\x02\u158E\u1588\x03\x02" +
		"\x02\x02\u158E\u158F\x03\x02\x02\x02\u158F\u1590\x03\x02\x02\x02\u1590" +
		"\u1594\t\x19\x02\x02\u1591\u1593\x05\x06\x04\x02\u1592\u1591\x03\x02\x02" +
		"\x02\u1593\u1596\x03\x02\x02\x02\u1594\u1592\x03\x02\x02\x02\u1594\u1595" +
		"\x03\x02\x02\x02\u1595\u1597\x03\x02\x02\x02\u1596\u1594\x03\x02\x02\x02" +
		"\u1597\u1598\x07\u01A9\x02\x02\u1598\u018D\x03\x02\x02\x02\u1599\u159B" +
		"\x07\x92\x02\x02\u159A\u159C\x05\x06\x04\x02\u159B\u159A\x03\x02\x02\x02" +
		"\u159C\u159D\x03\x02\x02\x02\u159D\u159B\x03\x02\x02\x02\u159D\u159E\x03" +
		"\x02\x02\x02\u159E\u159F\x03\x02\x02\x02\u159F\u15A3\x07u\x02\x02\u15A0" +
		"\u15A2\x05\x06\x04\x02\u15A1\u15A0\x03\x02\x02\x02\u15A2\u15A5\x03\x02" +
		"\x02\x02\u15A3\u15A1\x03\x02\x02\x02\u15A3\u15A4\x03\x02\x02\x02\u15A4" +
		"\u15A6\x03\x02\x02\x02\u15A5\u15A3\x03\x02\x02\x02\u15A6\u15AA\x07\u01A9" +
		"\x02\x02\u15A7\u15A9\x05\x06\x04\x02\u15A8\u15A7\x03\x02\x02\x02\u15A9" +
		"\u15AC\x03\x02\x02\x02\u15AA\u15A8\x03\x02\x02\x02\u15AA\u15AB\x03\x02" +
		"\x02\x02\u15AB\u15AE\x03\x02\x02\x02\u15AC\u15AA\x03\x02\x02\x02\u15AD" +
		"\u15AF\x05\u0190\xC9\x02\u15AE\u15AD\x03\x02\x02\x02\u15AE\u15AF\x03\x02" +
		"\x02\x02\u15AF\u15B1\x03\x02\x02\x02\u15B0\u15B2\x05\u0192\xCA\x02\u15B1" +
		"\u15B0\x03\x02\x02\x02\u15B1\u15B2\x03\x02\x02\x02\u15B2\u018F\x03\x02" +
		"\x02\x02\u15B3\u15B5\x07R\x02\x02\u15B4\u15B6\x05\x06\x04\x02\u15B5\u15B4" +
		"\x03\x02\x02\x02\u15B6\u15B7\x03\x02\x02\x02\u15B7\u15B5\x03\x02\x02\x02" +
		"\u15B7\u15B8\x03\x02\x02\x02\u15B8\u15B9\x03\x02\x02\x02\u15B9\u15BD\x07" +
		"\u013B\x02\x02\u15BA\u15BC\x05\x06\x04\x02\u15BB\u15BA\x03\x02\x02\x02" +
		"\u15BC\u15BF\x03\x02\x02\x02\u15BD\u15BB\x03\x02\x02\x02\u15BD\u15BE\x03" +
		"\x02\x02\x02\u15BE\u15C0\x03\x02\x02\x02\u15BF\u15BD\x03\x02\x02\x02\u15C0" +
		"\u15C4\x07\u01A9\x02\x02\u15C1\u15C3\x05\x06\x04\x02\u15C2\u15C1\x03\x02" +
		"\x02\x02\u15C3\u15C6\x03\x02\x02\x02\u15C4\u15C2\x03\x02\x02\x02\u15C4" +
		"\u15C5\x03\x02\x02\x02\u15C5\u15C8\x03\x02\x02\x02\u15C6\u15C4\x03\x02" +
		"\x02\x02\u15C7\u15C9\x05\u0194\xCB\x02\u15C8\u15C7\x03\x02\x02\x02\u15C8" +
		"\u15C9\x03\x02\x02\x02\u15C9\u15CD\x03\x02\x02\x02\u15CA\u15CC\x05\x06" +
		"\x04\x02\u15CB\u15CA\x03\x02\x02\x02\u15CC\u15CF\x03\x02\x02\x02\u15CD" +
		"\u15CB\x03\x02\x02\x02\u15CD\u15CE\x03\x02\x02\x02\u15CE\u15D1\x03\x02" +
		"\x02\x02\u15CF\u15CD\x03\x02\x02\x02\u15D0\u15D2\x05\u019A\xCE\x02\u15D1" +
		"\u15D0\x03\x02\x02\x02\u15D1\u15D2\x03\x02\x02\x02\u15D2\u15D6\x03\x02" +
		"\x02\x02\u15D3\u15D5\x05\x06\x04\x02\u15D4\u15D3\x03\x02\x02\x02\u15D5" +
		"\u15D8\x03\x02\x02\x02\u15D6\u15D4\x03\x02\x02\x02\u15D6\u15D7\x03\x02" +
		"\x02\x02\u15D7\u15DA\x03\x02\x02\x02\u15D8\u15D6\x03\x02\x02\x02\u15D9" +
		"\u15DB\x05\u01AA\xD6\x02\u15DA\u15D9\x03\x02\x02\x02\u15DA\u15DB\x03\x02" +
		"\x02\x02\u15DB\u15DF\x03\x02\x02\x02\u15DC\u15DE\x05\x06\x04\x02\u15DD" +
		"\u15DC\x03\x02\x02\x02\u15DE\u15E1\x03\x02\x02\x02\u15DF\u15DD\x03\x02" +
		"\x02\x02\u15DF\u15E0\x03\x02\x02\x02\u15E0\u0191\x03\x02\x02\x02\u15E1" +
		"\u15DF\x03\x02\x02\x02\u15E2\u15E4\x07\xCB\x02\x02\u15E3\u15E5\x05\x06" +
		"\x04\x02\u15E4\u15E3\x03\x02\x02\x02\u15E5\u15E6\x03\x02\x02\x02\u15E6" +
		"\u15E4\x03\x02\x02\x02\u15E6\u15E7\x03\x02\x02\x02\u15E7\u15E8\x03\x02" +
		"\x02\x02\u15E8\u15EC\x07\u013B\x02\x02\u15E9\u15EB\x05\x06\x04\x02\u15EA" +
		"\u15E9\x03\x02\x02\x02\u15EB\u15EE\x03\x02\x02\x02\u15EC\u15EA\x03\x02" +
		"\x02\x02\u15EC\u15ED\x03\x02\x02\x02\u15ED\u15EF\x03\x02\x02\x02\u15EE" +
		"\u15EC\x03\x02\x02\x02\u15EF\u15F3\x07\u01A9\x02\x02\u15F0\u15F2\x05\x06" +
		"\x04\x02\u15F1\u15F0\x03\x02\x02\x02\u15F2\u15F5\x03\x02\x02\x02\u15F3" +
		"\u15F1\x03\x02\x02\x02\u15F3\u15F4\x03\x02\x02\x02\u15F4\u15F7\x03\x02" +
		"\x02\x02\u15F5\u15F3\x03\x02\x02\x02\u15F6\u15F8\x05\u01EC\xF7\x02\u15F7" +
		"\u15F6\x03\x02\x02\x02\u15F7\u15F8\x03\x02\x02\x02\u15F8\u15FA\x03\x02" +
		"\x02\x02\u15F9\u15FB\x05\u021A\u010E\x02\u15FA\u15F9\x03\x02\x02\x02\u15FA" +
		"\u15FB\x03\x02\x02\x02\u15FB\u0193\x03\x02\x02\x02\u15FC\u1600\x07\u014A" +
		"\x02\x02\u15FD\u15FF\x05\x06\x04\x02\u15FE\u15FD\x03\x02\x02\x02\u15FF" +
		"\u1602\x03\x02\x02\x02\u1600\u15FE\x03\x02\x02\x02\u1600\u1601\x03\x02" +
		"\x02\x02\u1601\u1603\x03\x02\x02\x02\u1602\u1600\x03\x02\x02\x02\u1603" +
		"\u1607\x07\u01A9\x02\x02\u1604\u1606\x05\x06\x04\x02\u1605\u1604\x03\x02" +
		"\x02\x02\u1606\u1609\x03\x02\x02\x02\u1607\u1605\x03\x02\x02\x02\u1607" +
		"\u1608\x03\x02\x02\x02\u1608\u161C\x03\x02\x02\x02\u1609\u1607\x03\x02" +
		"\x02\x02\u160A\u1612\x05\u0196\xCC\x02\u160B\u160D\x05\x06\x04\x02\u160C" +
		"\u160B\x03\x02\x02\x02\u160D\u160E\x03\x02\x02\x02\u160E\u160C\x03\x02" +
		"\x02\x02\u160E\u160F\x03\x02\x02\x02\u160F\u1610\x03\x02\x02\x02\u1610" +
		"\u1611\x05\u0198\xCD\x02\u1611\u1613\x03\x02\x02\x02\u1612\u160C\x03\x02" +
		"\x02\x02\u1612\u1613\x03\x02\x02\x02\u1613\u1617\x03\x02\x02\x02\u1614" +
		"\u1616\x05\x06\x04\x02\u1615\u1614\x03\x02\x02\x02\u1616\u1619\x03\x02" +
		"\x02\x02\u1617\u1615\x03\x02\x02\x02\u1617\u1618\x03\x02\x02\x02\u1618" +
		"\u161A\x03\x02\x02\x02\u1619\u1617\x03\x02\x02\x02\u161A\u161B\x07\u01A9" +
		"\x02\x02\u161B\u161D\x03\x02\x02\x02\u161C\u160A\x03\x02\x02\x02\u161C" +
		"\u161D\x03\x02\x02\x02\u161D\u0195\x03\x02\x02\x02\u161E\u161F\t\x1A\x02" +
		"\x02\u161F\u0197\x03\x02\x02\x02\u1620\u1622\x07\u017F\x02\x02\u1621\u1623" +
		"\x05\x06\x04\x02\u1622\u1621\x03\x02\x02\x02\u1623\u1624\x03\x02\x02\x02" +
		"\u1624\u1622\x03\x02\x02\x02\u1624\u1625\x03\x02\x02\x02\u1625\u1627\x03" +
		"\x02\x02\x02\u1626\u1620\x03\x02\x02\x02\u1626\u1627\x03\x02\x02\x02\u1627" +
		"\u1628\x03\x02\x02\x02\u1628\u162A\x07h\x02\x02\u1629\u162B\x05\x06\x04" +
		"\x02\u162A\u1629\x03\x02\x02\x02\u162B\u162C\x03\x02\x02\x02\u162C\u162A" +
		"\x03\x02\x02\x02\u162C\u162D\x03\x02\x02\x02\u162D\u162E\x03\x02\x02\x02" +
		"\u162E\u162F\x07\xEA\x02\x02\u162F\u0199\x03\x02\x02\x02\u1630\u1634\x07" +
		"\xF6\x02\x02\u1631\u1633\x05\x06\x04\x02\u1632\u1631\x03\x02\x02\x02\u1633" +
		"\u1636\x03\x02\x02\x02\u1634\u1632\x03\x02\x02\x02\u1634\u1635\x03\x02" +
		"\x02\x02\u1635\u1637\x03\x02\x02\x02\u1636\u1634\x03\x02\x02\x02\u1637" +
		"\u163B\x07\u01A9\x02\x02\u1638\u163A\x05\x06\x04\x02\u1639\u1638\x03\x02" +
		"\x02\x02\u163A\u163D\x03\x02\x02\x02\u163B\u1639\x03\x02\x02\x02\u163B" +
		"\u163C\x03\x02\x02\x02\u163C\u1662\x03\x02\x02\x02\u163D\u163B\x03\x02" +
		"\x02\x02\u163E\u1646\x05\u0196\xCC\x02\u163F\u1641\x05\x06\x04\x02\u1640" +
		"\u163F\x03\x02\x02\x02\u1641\u1642\x03\x02\x02\x02\u1642\u1640\x03\x02" +
		"\x02\x02\u1642\u1643\x03\x02\x02\x02\u1643\u1644\x03\x02\x02\x02\u1644" +
		"\u1645\x05\u019C\xCF\x02\u1645\u1647\x03\x02\x02\x02\u1646\u1640\x03\x02" +
		"\x02\x02\u1646\u1647\x03\x02\x02\x02\u1647\u164F\x03\x02\x02\x02\u1648" +
		"\u164A\x05\x06\x04\x02\u1649\u1648\x03\x02\x02\x02\u164A\u164B\x03\x02" +
		"\x02\x02\u164B\u1649\x03\x02\x02\x02\u164B\u164C\x03\x02\x02\x02\u164C" +
		"\u164D\x03\x02\x02\x02\u164D\u164E\x05\u01A2\xD2\x02\u164E\u1650\x03\x02" +
		"\x02\x02\u164F\u1649\x03\x02\x02\x02\u164F\u1650\x03\x02\x02\x02\u1650" +
		"\u1658\x03\x02\x02\x02\u1651\u1653\x05\x06\x04\x02\u1652\u1651\x03\x02" +
		"\x02\x02\u1653\u1654\x03\x02\x02\x02\u1654\u1652\x03\x02\x02\x02\u1654" +
		"\u1655\x03\x02\x02\x02\u1655\u1656\x03\x02\x02\x02\u1656\u1657\x05\u01A6" +
		"\xD4\x02\u1657\u1659\x03\x02\x02\x02\u1658\u1652\x03\x02\x02\x02\u1658" +
		"\u1659\x03\x02\x02\x02\u1659\u165D\x03\x02\x02\x02\u165A\u165C\x05\x06" +
		"\x04\x02\u165B\u165A\x03\x02\x02\x02\u165C\u165F\x03\x02\x02\x02\u165D" +
		"\u165B\x03\x02\x02\x02\u165D\u165E\x03\x02\x02\x02\u165E\u1660\x03\x02" +
		"\x02\x02\u165F\u165D\x03\x02\x02\x02\u1660\u1661\x07\u01A9\x02\x02\u1661" +
		"\u1663\x03\x02\x02\x02\u1662\u163E\x03\x02\x02\x02\u1662\u1663\x03\x02" +
		"\x02\x02\u1663\u019B\x03\x02\x02\x02\u1664\u166C\x07\xE8\x02\x02\u1665" +
		"\u1667\x05\x06\x04\x02\u1666\u1665\x03\x02\x02\x02\u1667\u1668\x03\x02" +
		"\x02\x02\u1668\u1666\x03\x02\x02\x02\u1668\u1669\x03\x02\x02\x02\u1669" +
		"\u166A\x03\x02\x02\x02\u166A\u166B\x07\u0146\x02\x02\u166B\u166D\x03\x02" +
		"\x02\x02\u166C\u1666\x03\x02\x02\x02\u166C\u166D\x03\x02\x02\x02\u166D" +
		"\u166F\x03\x02\x02\x02\u166E\u1670\x05\x06\x04\x02\u166F\u166E\x03\x02" +
		"\x02\x02\u1670\u1671\x03\x02\x02\x02\u1671\u166F\x03\x02\x02\x02\u1671" +
		"\u1672\x03\x02\x02\x02\u1672\u1673\x03\x02\x02\x02\u1673\u1675\x05\u019E" +
		"\xD0\x02\u1674\u1676\x05\x06\x04\x02\u1675\u1674\x03\x02\x02\x02\u1676" +
		"\u1677\x03\x02\x02\x02\u1677\u1675\x03\x02\x02\x02\u1677\u1678\x03\x02" +
		"\x02\x02\u1678\u1679\x03\x02\x02\x02\u1679\u167A\x05\u01A0\xD1\x02\u167A" +
		"\u019D\x03\x02\x02\x02\u167B\u167C\x07\u01AD\x02\x02\u167C\u019F\x03\x02" +
		"\x02\x02\u167D\u167E\t\x1B\x02\x02\u167E\u01A1\x03\x02\x02\x02\u167F\u1681" +
		"\x07\u0116\x02\x02\u1680\u1682\x05\x06\x04\x02\u1681\u1680\x03\x02\x02" +
		"\x02\u1682\u1683\x03\x02\x02\x02\u1683\u1681\x03\x02\x02\x02\u1683\u1684" +
		"\x03\x02\x02\x02\u1684\u1686\x03\x02\x02\x02\u1685\u167F\x03\x02\x02\x02" +
		"\u1685\u1686\x03\x02\x02\x02\u1686\u168D\x03\x02\x02\x02\u1687\u1689\x07" +
		"?\x02\x02\u1688\u168A\x05\x06\x04\x02\u1689\u1688\x03\x02\x02\x02\u168A" +
		"\u168B\x03\x02\x02\x02\u168B\u1689\x03\x02\x02\x02\u168B\u168C\x03\x02" +
		"\x02\x02\u168C\u168E\x03\x02\x02\x02\u168D\u1687\x03\x02\x02\x02\u168D" +
		"\u168E\x03\x02\x02\x02\u168E\u168F\x03\x02\x02\x02\u168F\u1697\x07\u0141" +
		"\x02\x02\u1690\u1692\x05\x06\x04\x02\u1691\u1690\x03\x02\x02\x02\u1692" +
		"\u1693\x03\x02\x02\x02\u1693\u1691\x03\x02\x02\x02\u1693\u1694\x03\x02" +
		"\x02\x02\u1694\u1695\x03\x02\x02\x02\u1695\u1696\x07\xCF\x02\x02\u1696" +
		"\u1698\x03\x02\x02\x02\u1697\u1691\x03\x02\x02\x02\u1697\u1698\x03\x02" +
		"\x02\x02\u1698\u169A\x03\x02\x02\x02\u1699\u169B\x05\x06\x04\x02\u169A" +
		"\u1699\x03\x02\x02\x02\u169B\u169C\x03\x02\x02\x02\u169C\u169A\x03\x02" +
		"\x02\x02\u169C\u169D\x03\x02\x02\x02\u169D\u169E\x03\x02\x02\x02\u169E" +
		"\u169F\x05\u01A4\xD3\x02\u169F\u01A3\x03\x02\x02\x02\u16A0\u16A1\x07\u01AF" +
		"\x02\x02\u16A1\u01A5\x03\x02\x02\x02\u16A2\u16AA\x07\u013E\x02\x02\u16A3" +
		"\u16A5\x05\x06\x04\x02\u16A4\u16A3\x03\x02\x02\x02\u16A5\u16A6\x03\x02" +
		"\x02\x02\u16A6\u16A4\x03\x02\x02\x02\u16A6\u16A7\x03\x02\x02\x02\u16A7" +
		"\u16A8\x03\x02\x02\x02\u16A8\u16A9\x07\xCF\x02\x02\u16A9\u16AB\x03\x02" +
		"\x02\x02\u16AA\u16A4\x03\x02\x02\x02\u16AA\u16AB\x03\x02\x02\x02\u16AB" +
		"\u16AC\x03\x02\x02\x02\u16AC\u16AD\x05\u01A8\xD5\x02\u16AD\u01A7\x03\x02" +
		"\x02\x02\u16AE\u16AF\x07\u01AD\x02\x02\u16AF\u01A9\x03\x02\x02\x02\u16B0" +
		"\u16B4\x07\u014D\x02\x02\u16B1\u16B3\x05\x06\x04\x02\u16B2\u16B1\x03\x02" +
		"\x02\x02\u16B3\u16B6\x03\x02\x02\x02\u16B4\u16B2\x03\x02\x02\x02\u16B4" +
		"\u16B5\x03\x02\x02\x02\u16B5\u16B7\x03\x02\x02\x02\u16B6\u16B4\x03\x02" +
		"\x02\x02\u16B7\u16BB\x07\u01A9\x02\x02\u16B8\u16BA\x05\x06\x04\x02\u16B9" +
		"\u16B8\x03\x02\x02\x02\u16BA\u16BD\x03\x02\x02\x02\u16BB\u16B9\x03\x02" +
		"\x02\x02\u16BB\u16BC\x03\x02\x02\x02\u16BC\u16CB\x03\x02\x02\x02\u16BD" +
		"\u16BB\x03\x02\x02\x02\u16BE\u16C2\x05\u01AC\xD7\x02\u16BF\u16C1\x05\x06" +
		"\x04\x02\u16C0\u16BF\x03\x02\x02\x02\u16C1\u16C4\x03\x02\x02\x02\u16C2" +
		"\u16C0\x03\x02\x02\x02\u16C2\u16C3\x03\x02\x02\x02\u16C3\u16C6\x03\x02" +
		"\x02\x02\u16C4\u16C2\x03\x02\x02\x02\u16C5\u16BE\x03\x02\x02\x02\u16C6" +
		"\u16C7\x03\x02\x02\x02\u16C7\u16C5\x03\x02\x02\x02\u16C7\u16C8\x03\x02" +
		"\x02\x02\u16C8\u16C9\x03\x02\x02\x02\u16C9\u16CA\x07\u01A9\x02\x02\u16CA" +
		"\u16CC\x03\x02\x02\x02\u16CB\u16C5\x03\x02\x02\x02\u16CB\u16CC\x03\x02" +
		"\x02\x02\u16CC\u01AB\x03\x02\x02\x02\u16CD\u16CF\x05\u01E4\xF3\x02\u16CE" +
		"\u16D0\x05\x06\x04\x02\u16CF\u16CE\x03\x02\x02\x02\u16D0\u16D1\x03\x02" +
		"\x02\x02\u16D1\u16CF\x03\x02\x02\x02\u16D1\u16D2\x03\x02\x02\x02\u16D2" +
		"\u16D9\x03\x02\x02\x02\u16D3\u16D5\x07\xCF\x02\x02\u16D4\u16D6\x05\x06" +
		"\x04\x02\u16D5\u16D4\x03\x02\x02\x02\u16D6\u16D7\x03\x02\x02\x02\u16D7" +
		"\u16D5\x03\x02\x02\x02\u16D7\u16D8\x03\x02\x02\x02\u16D8\u16DA\x03\x02" +
		"\x02\x02\u16D9\u16D3\x03\x02\x02\x02\u16D9\u16DA\x03\x02\x02\x02\u16DA" +
		"\u16DB\x03\x02\x02\x02\u16DB\u16DC\x05\u01E6\xF4\x02\u16DC\u1739\x03\x02" +
		"\x02\x02\u16DD\u16DF\x05\u01E8\xF5\x02\u16DE\u16E0\x05\x06\x04\x02\u16DF" +
		"\u16DE\x03\x02\x02\x02\u16E0\u16E1\x03\x02\x02\x02\u16E1\u16DF\x03\x02" +
		"\x02\x02\u16E1\u16E2\x03\x02\x02\x02\u16E2\u16E9\x03\x02\x02\x02\u16E3" +
		"\u16E5\x07\xCF\x02\x02\u16E4\u16E6\x05\x06\x04\x02\u16E5\u16E4\x03\x02" +
		"\x02\x02\u16E6\u16E7\x03\x02\x02\x02\u16E7\u16E5\x03\x02\x02\x02\u16E7" +
		"\u16E8\x03\x02\x02\x02\u16E8\u16EA\x03\x02\x02\x02\u16E9\u16E3\x03\x02" +
		"\x02\x02\u16E9\u16EA\x03\x02\x02\x02\u16EA\u16EB\x03\x02\x02\x02\u16EB" +
		"\u16EC\x05\u01EA\xF6\x02\u16EC\u1739\x03\x02\x02\x02\u16ED\u16EF\x072" +
		"\x02\x02\u16EE\u16F0\x05\x06\x04\x02\u16EF\u16EE\x03\x02\x02\x02\u16F0" +
		"\u16F1\x03\x02\x02\x02\u16F1\u16EF\x03\x02\x02\x02\u16F1\u16F2\x03\x02" +
		"\x02\x02\u16F2\u16F9\x03\x02\x02\x02\u16F3\u16F5\x07\xCF\x02\x02\u16F4" +
		"\u16F6\x05\x06\x04\x02\u16F5\u16F4\x03\x02\x02\x02\u16F6\u16F7\x03\x02" +
		"\x02\x02\u16F7\u16F5\x03\x02\x02\x02\u16F7\u16F8\x03\x02\x02\x02\u16F8" +
		"\u16FA\x03\x02\x02\x02\u16F9\u16F3\x03\x02\x02\x02\u16F9\u16FA\x03\x02" +
		"\x02\x02\u16FA\u16FB\x03\x02\x02\x02\u16FB\u16FC\x05\u01E2\xF2\x02\u16FC" +
		"\u1739\x03\x02\x02\x02\u16FD\u1739\x05\u01D6\xEC\x02\u16FE\u1739\x05\u01CA" +
		"\xE6\x02\u16FF\u1739\x05\u01BE\xE0\x02\u1700\u1739\x05\u01B8\xDD\x02\u1701" +
		"\u1739\x05\u01B0\xD9\x02\u1702\u1704\x07i\x02\x02\u1703\u1705\x05\x06" +
		"\x04\x02\u1704\u1703\x03\x02\x02\x02\u1705\u1706\x03\x02\x02\x02\u1706" +
		"\u1704\x03\x02\x02\x02\u1706\u1707\x03\x02\x02\x02\u1707\u170E\x03\x02" +
		"\x02\x02\u1708\u170A\x07\xCF\x02\x02\u1709\u170B\x05\x06\x04\x02\u170A" +
		"\u1709\x03\x02\x02\x02\u170B\u170C\x03\x02\x02\x02\u170C\u170A\x03\x02" +
		"\x02\x02\u170C\u170D\x03\x02\x02\x02\u170D\u170F\x03\x02\x02\x02\u170E" +
		"\u1708\x03\x02\x02\x02\u170E\u170F\x03\x02\x02\x02\u170F\u1710\x03\x02" +
		"\x02\x02\u1710\u1711\x07A\x02\x02\u1711\u1739\x03\x02\x02\x02\u1712\u1714" +
		"\x07`\x02\x02\u1713\u1715\x05\x06\x04\x02\u1714\u1713\x03\x02\x02\x02" +
		"\u1715\u1716\x03\x02\x02\x02\u1716\u1714\x03\x02\x02\x02\u1716\u1717\x03" +
		"\x02\x02\x02\u1717\u171E\x03\x02\x02\x02\u1718\u171A\x07\xCF\x02\x02\u1719" +
		"\u171B\x05\x06\x04\x02\u171A\u1719\x03\x02\x02\x02\u171B\u171C\x03\x02" +
		"\x02\x02\u171C\u171A\x03\x02\x02\x02\u171C\u171D\x03\x02\x02\x02\u171D" +
		"\u171F\x03\x02\x02\x02\u171E\u1718\x03\x02\x02\x02\u171E\u171F\x03\x02" +
		"\x02\x02\u171F\u1720\x03\x02\x02\x02\u1720\u1721\x05\u01AE\xD8\x02\u1721" +
		"\u1739\x03\x02\x02\x02\u1722\u1724\x07]\x02\x02\u1723\u1725\x05\x06\x04" +
		"\x02\u1724\u1723\x03\x02\x02\x02\u1725\u1726\x03\x02\x02\x02\u1726\u1724" +
		"\x03\x02\x02\x02\u1726\u1727\x03\x02\x02\x02\u1727\u1728\x03\x02\x02\x02" +
		"\u1728\u172A\x07\u0152\x02\x02\u1729\u172B\x05\x06\x04\x02\u172A\u1729" +
		"\x03\x02\x02\x02\u172B\u172C\x03\x02\x02\x02\u172C\u172A\x03\x02\x02\x02" +
		"\u172C\u172D\x03\x02\x02\x02\u172D\u1734\x03\x02\x02\x02\u172E\u1730\x07" +
		"\xCF\x02\x02\u172F\u1731\x05\x06\x04\x02\u1730\u172F\x03\x02\x02\x02\u1731" +
		"\u1732\x03\x02\x02\x02\u1732\u1730\x03\x02\x02\x02\u1732\u1733\x03\x02" +
		"\x02\x02\u1733\u1735\x03\x02\x02\x02\u1734\u172E\x03\x02\x02\x02\u1734" +
		"\u1735\x03\x02\x02\x02\u1735\u1736\x03\x02\x02\x02\u1736\u1737\x05\u01AE" +
		"\xD8\x02\u1737\u1739\x03\x02\x02\x02\u1738\u16CD\x03\x02\x02\x02\u1738" +
		"\u16DD\x03\x02\x02\x02\u1738\u16ED\x03\x02\x02\x02\u1738\u16FD\x03\x02" +
		"\x02\x02\u1738\u16FE\x03\x02\x02\x02\u1738\u16FF\x03\x02\x02\x02\u1738" +
		"\u1700\x03\x02\x02\x02\u1738\u1701\x03\x02\x02\x02\u1738\u1702\x03\x02" +
		"\x02\x02\u1738\u1712\x03\x02\x02\x02\u1738\u1722\x03\x02\x02\x02\u1739" +
		"\u01AD\x03\x02\x02\x02\u173A\u174A\x07\u01AF\x02\x02\u173B\u173D\x05\x06" +
		"\x04\x02\u173C\u173B\x03\x02\x02\x02\u173D\u173E\x03\x02\x02\x02\u173E" +
		"\u173C\x03\x02\x02\x02\u173E\u173F\x03\x02\x02\x02\u173F\u1740\x03\x02" +
		"\x02\x02\u1740\u1742\t\x1C\x02\x02\u1741\u1743\x05\x06\x04\x02\u1742\u1741" +
		"\x03\x02\x02\x02\u1743\u1744\x03\x02\x02\x02\u1744\u1742\x03\x02\x02\x02" +
		"\u1744\u1745\x03\x02\x02\x02\u1745\u1746\x03\x02\x02\x02\u1746\u1747\x07" +
		"\u01AF\x02\x02\u1747\u1749\x03\x02\x02\x02\u1748\u173C\x03\x02\x02\x02" +
		"\u1749\u174C\x03\x02\x02\x02\u174A\u1748\x03\x02\x02\x02\u174A\u174B\x03" +
		"\x02\x02\x02\u174B\u01AF\x03\x02\x02\x02\u174C\u174A\x03\x02\x02\x02\u174D" +
		"\u174F\x07^\x02\x02\u174E\u1750\x05\x06\x04\x02\u174F\u174E\x03\x02\x02" +
		"\x02\u1750\u1751\x03\x02\x02\x02\u1751\u174F\x03\x02\x02\x02\u1751\u1752" +
		"\x03\x02\x02\x02\u1752\u1759\x03\x02\x02\x02\u1753\u1755\x07\u0144\x02" +
		"\x02\u1754\u1756\x05\x06\x04\x02\u1755\u1754\x03\x02\x02\x02\u1756\u1757" +
		"\x03\x02\x02\x02\u1757\u1755\x03\x02\x02\x02\u1757\u1758\x03\x02\x02\x02" +
		"\u1758\u175A\x03\x02\x02\x02\u1759\u1753\x03\x02\x02\x02\u1759\u175A\x03" +
		"\x02\x02\x02\u175A\u1761\x03\x02\x02\x02\u175B\u175D\x07\xCF\x02\x02\u175C" +
		"\u175E\x05\x06\x04\x02\u175D\u175C\x03\x02\x02\x02\u175E\u175F\x03\x02" +
		"\x02\x02\u175F\u175D\x03\x02\x02\x02\u175F\u1760\x03\x02\x02\x02\u1760" +
		"\u1762\x03\x02\x02\x02\u1761\u175B\x03\x02\x02\x02\u1761\u1762\x03\x02" +
		"\x02\x02\u1762\u1763\x03\x02\x02\x02\u1763\u1764\x05\u01B2\xDA\x02\u1764" +
		"\u01B1\x03\x02\x02\x02\u1765\u176C\x05\u01B4\xDB\x02\u1766\u1768\x07\u017F" +
		"\x02\x02\u1767\u1769\x05\x06\x04\x02\u1768\u1767\x03\x02\x02\x02\u1769" +
		"\u176A\x03\x02\x02\x02\u176A\u1768\x03\x02\x02\x02\u176A\u176B\x03\x02" +
		"\x02\x02\u176B\u176D\x03\x02\x02\x02\u176C\u1766\x03\x02\x02\x02\u176C" +
		"\u176D\x03\x02\x02\x02\u176D\u176E\x03\x02\x02\x02\u176E\u1770\x07\u010C" +
		"\x02\x02\u176F\u1771\x05\x06\x04\x02\u1770\u176F\x03\x02\x02\x02\u1771" +
		"\u1772\x03\x02\x02\x02\u1772\u1770\x03\x02\x02\x02\u1772\u1773\x03\x02" +
		"\x02\x02\u1773\u1774\x03\x02\x02\x02\u1774\u1776\x07\u015A\x02\x02\u1775" +
		"\u1777\x05\x06\x04\x02\u1776\u1775\x03\x02\x02\x02\u1777\u1778\x03\x02" +
		"\x02\x02\u1778\u1776\x03\x02\x02\x02\u1778\u1779\x03\x02\x02\x02\u1779" +
		"\u177A\x03\x02\x02\x02\u177A\u177B\x05\u01B6\xDC\x02\u177B\u177E\x03\x02" +
		"\x02\x02\u177C\u177E\x07\u01AC\x02\x02\u177D\u1765\x03\x02\x02\x02\u177D" +
		"\u177C\x03\x02";
	private static readonly _serializedATNSegment12: string =
		"\x02\x02\u177E\u01B3\x03\x02\x02\x02\u177F\u1780\x07\u01AC\x02\x02\u1780" +
		"\u01B5\x03\x02\x02\x02\u1781\u1782\x07\u01AC\x02\x02\u1782\u01B7\x03\x02" +
		"\x02\x02\u1783\u1785\x07:\x02\x02\u1784\u1786\x05\x06\x04\x02\u1785\u1784" +
		"\x03\x02\x02\x02\u1786\u1787\x03\x02\x02\x02\u1787\u1785\x03\x02\x02\x02" +
		"\u1787\u1788\x03\x02\x02\x02\u1788\u1789\x03\x02\x02\x02\u1789\u178B\x05" +
		"\u01BA\xDE\x02\u178A\u178C\x05\x06\x04\x02\u178B\u178A\x03\x02\x02\x02" +
		"\u178C\u178D\x03\x02\x02\x02\u178D\u178B\x03\x02\x02\x02\u178D\u178E\x03" +
		"\x02\x02\x02\u178E\u1795\x03\x02\x02\x02\u178F\u1791\x07\xCF\x02\x02\u1790" +
		"\u1792\x05\x06\x04\x02\u1791\u1790\x03\x02\x02\x02\u1792\u1793\x03\x02" +
		"\x02\x02\u1793\u1791\x03\x02\x02\x02\u1793\u1794\x03\x02\x02\x02\u1794" +
		"\u1796\x03\x02\x02\x02\u1795\u178F\x03\x02\x02\x02\u1795\u1796\x03\x02" +
		"\x02\x02\u1796\u179E\x03\x02\x02\x02\u1797\u179B\x05\u01BC\xDF\x02\u1798" +
		"\u179A\x05\x06\x04\x02\u1799\u1798\x03\x02\x02\x02\u179A\u179D\x03\x02" +
		"\x02\x02\u179B\u1799\x03\x02\x02\x02\u179B\u179C\x03\x02\x02\x02\u179C" +
		"\u179F\x03\x02\x02\x02\u179D\u179B\x03\x02\x02\x02\u179E\u1797\x03\x02" +
		"\x02\x02\u179F\u17A0\x03\x02\x02\x02\u17A0\u179E\x03\x02\x02\x02\u17A0" +
		"\u17A1\x03\x02\x02\x02\u17A1\u01B9\x03\x02\x02\x02\u17A2\u17A3\x07\u01AF" +
		"\x02\x02\u17A3\u01BB\x03\x02\x02\x02\u17A4\u17B2\x05\u01D0\xE9\x02\u17A5" +
		"\u17A7\x05\x06\x04\x02\u17A6\u17A5\x03\x02\x02\x02\u17A7\u17A8\x03\x02" +
		"\x02\x02\u17A8\u17A6\x03\x02\x02\x02\u17A8\u17A9\x03\x02\x02\x02\u17A9" +
		"\u17AA\x03\x02\x02\x02\u17AA\u17AC\t\f\x02\x02\u17AB\u17AD\x05\x06\x04" +
		"\x02\u17AC\u17AB\x03\x02\x02\x02\u17AD\u17AE\x03\x02\x02\x02\u17AE\u17AC" +
		"\x03\x02\x02\x02\u17AE\u17AF\x03\x02\x02\x02\u17AF\u17B0\x03\x02\x02\x02" +
		"\u17B0\u17B1\x05\u01D2\xEA\x02\u17B1\u17B3\x03\x02\x02\x02\u17B2\u17A6" +
		"\x03\x02\x02\x02\u17B2\u17B3\x03\x02\x02\x02\u17B3\u01BD\x03\x02\x02\x02" +
		"\u17B4\u17B6\x07\u015B\x02\x02\u17B5\u17B7\x05\x06\x04\x02\u17B6\u17B5" +
		"\x03\x02\x02\x02\u17B7\u17B8\x03\x02\x02\x02\u17B8\u17B6\x03\x02\x02\x02" +
		"\u17B8\u17B9\x03\x02\x02\x02\u17B9\u17C0\x03\x02\x02\x02\u17BA\u17BC\x07" +
		"9\x02\x02\u17BB\u17BD\x05\x06\x04\x02\u17BC\u17BB\x03\x02\x02\x02\u17BD" +
		"\u17BE\x03\x02\x02\x02\u17BE\u17BC\x03\x02\x02\x02\u17BE\u17BF\x03\x02" +
		"\x02\x02\u17BF\u17C1\x03\x02\x02\x02\u17C0\u17BA\x03\x02\x02\x02\u17C0" +
		"\u17C1\x03\x02\x02\x02\u17C1\u17C3\x03\x02\x02\x02\u17C2\u17C4\x05\u01C0" +
		"\xE1\x02\u17C3\u17C2\x03\x02\x02\x02\u17C4\u17C5\x03\x02\x02\x02\u17C5" +
		"\u17C3\x03\x02\x02\x02\u17C5\u17C6\x03\x02\x02\x02\u17C6\u01BF\x03\x02" +
		"\x02\x02\u17C7\u17C9\x05\u01C2\xE2\x02\u17C8\u17C7\x03\x02\x02\x02\u17C9" +
		"\u17CA\x03\x02\x02\x02\u17CA\u17C8\x03\x02\x02\x02\u17CA\u17CB\x03\x02" +
		"\x02\x02\u17CB\u17CD\x03\x02\x02\x02\u17CC\u17CE\x05\u01C4\xE3\x02\u17CD" +
		"\u17CC\x03\x02\x02\x02\u17CD\u17CE\x03\x02\x02\x02\u17CE\u01C1\x03\x02" +
		"\x02\x02\u17CF\u17D1\x05\u01C6\xE4\x02\u17D0\u17D2\x05\x06\x04\x02\u17D1" +
		"\u17D0\x03\x02\x02\x02\u17D2\u17D3\x03\x02\x02\x02\u17D3\u17D1\x03\x02" +
		"\x02\x02\u17D3\u17D4\x03\x02\x02\x02\u17D4\u17D6\x03\x02\x02\x02\u17D5" +
		"\u17CF\x03\x02\x02\x02\u17D6\u17D7\x03\x02\x02\x02\u17D7\u17D5\x03\x02" +
		"\x02\x02\u17D7\u17D8\x03\x02\x02\x02\u17D8\u17DF\x03\x02\x02\x02\u17D9" +
		"\u17DB\t\x1D\x02\x02\u17DA\u17DC\x05\x06\x04\x02\u17DB\u17DA\x03\x02\x02" +
		"\x02\u17DC\u17DD\x03\x02\x02\x02\u17DD\u17DB\x03\x02\x02\x02\u17DD\u17DE" +
		"\x03\x02\x02\x02\u17DE\u17E0\x03\x02\x02\x02\u17DF\u17D9\x03\x02\x02\x02" +
		"\u17DF\u17E0\x03\x02\x02\x02\u17E0\u17E7\x03\x02\x02\x02\u17E1\u17E3\x05" +
		"\u01C8\xE5\x02\u17E2\u17E4\x05\x06\x04\x02\u17E3\u17E2\x03\x02\x02\x02" +
		"\u17E4\u17E5\x03\x02\x02\x02\u17E5\u17E3\x03\x02\x02\x02\u17E5\u17E6\x03" +
		"\x02\x02\x02\u17E6\u17E8\x03\x02\x02\x02\u17E7\u17E1\x03\x02\x02\x02\u17E8" +
		"\u17E9\x03\x02\x02\x02\u17E9\u17E7\x03\x02\x02\x02\u17E9\u17EA\x03\x02" +
		"\x02\x02\u17EA\u01C3\x03\x02\x02\x02\u17EB\u17ED\x07\xC3\x02\x02\u17EC" +
		"\u17EE\x05\x06\x04\x02\u17ED\u17EC\x03\x02\x02\x02\u17EE\u17EF\x03\x02" +
		"\x02\x02\u17EF\u17ED\x03\x02\x02\x02\u17EF\u17F0\x03\x02\x02\x02\u17F0" +
		"\u17F1\x03\x02\x02\x02\u17F1\u17F5\x05\u01A4\xD3\x02\u17F2\u17F4\x05\x06" +
		"\x04\x02\u17F3\u17F2\x03\x02\x02\x02\u17F4\u17F7\x03\x02\x02\x02\u17F5" +
		"\u17F3\x03\x02\x02\x02\u17F5\u17F6\x03\x02\x02\x02\u17F6\u01C5\x03\x02" +
		"\x02\x02\u17F7\u17F5\x03\x02\x02\x02\u17F8\u17F9\x07\u01AF\x02\x02\u17F9" +
		"\u01C7\x03\x02\x02\x02\u17FA\u17FB\x07\u01AD\x02\x02\u17FB\u01C9\x03\x02" +
		"\x02\x02\u17FC\u17FE\x07\f\x02\x02\u17FD\u17FF\x05\x06\x04\x02\u17FE\u17FD" +
		"\x03\x02\x02\x02\u17FF\u1800\x03\x02\x02\x02\u1800\u17FE\x03\x02\x02\x02" +
		"\u1800\u1801\x03\x02\x02\x02\u1801\u1802\x03\x02\x02\x02\u1802\u1804\x05" +
		"\u01A4\xD3\x02\u1803\u1805\x05\x06\x04\x02\u1804\u1803\x03\x02\x02\x02" +
		"\u1805\u1806\x03\x02\x02\x02\u1806\u1804\x03\x02\x02\x02\u1806\u1807\x03" +
		"\x02\x02\x02\u1807\u180E\x03\x02\x02\x02\u1808\u180A\x07\xCF\x02\x02\u1809" +
		"\u180B\x05\x06\x04\x02\u180A\u1809\x03\x02\x02\x02\u180B\u180C\x03\x02" +
		"\x02\x02\u180C\u180A\x03\x02\x02\x02\u180C\u180D\x03\x02\x02\x02\u180D" +
		"\u180F\x03\x02\x02\x02\u180E\u1808\x03\x02\x02\x02\u180E\u180F\x03\x02" +
		"\x02\x02\u180F\u1810\x03\x02\x02\x02\u1810\u1811\x05\u01CC\xE7\x02\u1811" +
		"\u01CB\x03\x02\x02\x02\u1812\u1823\x07\x1C\x02\x02\u1813\u1823\x07\u014F" +
		"\x02\x02\u1814\u1823\x07\u0150\x02\x02\u1815\u1823\x07\xEF\x02\x02\u1816" +
		"\u1823\x07y\x02\x02\u1817\u181B\x05\u01CE\xE8\x02\u1818\u181A\x05\x06" +
		"\x04\x02\u1819\u1818\x03\x02\x02\x02\u181A\u181D\x03\x02\x02\x02\u181B" +
		"\u1819\x03\x02\x02\x02\u181B\u181C\x03\x02\x02\x02\u181C\u181F\x03\x02" +
		"\x02\x02\u181D\u181B\x03\x02\x02\x02\u181E\u1817\x03\x02\x02\x02\u181F" +
		"\u1820\x03\x02\x02\x02\u1820\u181E\x03\x02\x02\x02\u1820\u1821\x03\x02" +
		"\x02\x02\u1821\u1823\x03\x02\x02\x02\u1822\u1812\x03\x02\x02\x02\u1822" +
		"\u1813\x03\x02\x02\x02\u1822\u1814\x03\x02\x02\x02\u1822\u1815\x03\x02" +
		"\x02\x02\u1822\u1816\x03\x02\x02\x02\u1822\u181E\x03\x02\x02\x02\u1823" +
		"\u01CD\x03\x02\x02\x02\u1824\u1832\x05\u01D0\xE9\x02\u1825\u1827\x05\x06" +
		"\x04\x02\u1826\u1825\x03\x02\x02\x02\u1827\u1828\x03\x02\x02\x02\u1828" +
		"\u1826\x03\x02\x02\x02\u1828\u1829\x03\x02\x02\x02\u1829\u182A\x03\x02" +
		"\x02\x02\u182A\u182C\t\f\x02\x02\u182B\u182D\x05\x06\x04\x02\u182C\u182B" +
		"\x03\x02\x02\x02\u182D\u182E\x03\x02\x02\x02\u182E\u182C\x03\x02\x02\x02" +
		"\u182E\u182F\x03\x02\x02\x02\u182F\u1830\x03\x02\x02\x02\u1830\u1831\x05" +
		"\u01D2\xEA\x02\u1831\u1833\x03\x02\x02\x02\u1832\u1826\x03\x02\x02\x02" +
		"\u1832\u1833\x03\x02\x02\x02\u1833\u1847\x03\x02\x02\x02\u1834\u1842\x05" +
		"\u01D0\xE9\x02\u1835\u1837\x05\x06\x04\x02\u1836\u1835\x03\x02\x02\x02" +
		"\u1837\u1838\x03\x02\x02\x02\u1838\u1836\x03\x02\x02\x02\u1838\u1839\x03" +
		"\x02\x02\x02\u1839\u183A\x03\x02\x02\x02\u183A\u183C\x07\x10\x02\x02\u183B" +
		"\u183D\x05\x06\x04\x02\u183C\u183B\x03\x02\x02\x02\u183D\u183E\x03\x02" +
		"\x02\x02\u183E\u183C\x03\x02\x02\x02\u183E\u183F\x03\x02\x02\x02\u183F" +
		"\u1840\x03\x02\x02\x02\u1840\u1841\x05\u01D4\xEB\x02\u1841\u1843\x03\x02" +
		"\x02\x02\u1842\u1836\x03\x02\x02\x02\u1843\u1844\x03\x02\x02\x02\u1844" +
		"\u1842\x03\x02\x02\x02\u1844\u1845\x03\x02\x02\x02\u1845\u1847\x03\x02" +
		"\x02\x02\u1846\u1824\x03\x02\x02\x02\u1846\u1834\x03\x02\x02\x02\u1847" +
		"\u01CF\x03\x02\x02\x02\u1848\u1849\t\r\x02\x02\u1849\u01D1\x03\x02\x02" +
		"\x02\u184A\u184B\t\r\x02\x02\u184B\u01D3\x03\x02\x02\x02\u184C\u184D\t" +
		"\r\x02\x02\u184D\u01D5\x03\x02\x02\x02\u184E\u1850\x07\u0159\x02\x02\u184F" +
		"\u1851\x05\x06\x04\x02\u1850\u184F\x03\x02\x02\x02\u1851\u1852\x03\x02" +
		"\x02\x02\u1852\u1850\x03\x02\x02\x02\u1852\u1853\x03\x02\x02\x02\u1853" +
		"\u1854\x03\x02\x02\x02\u1854\u1858\x05\u01E0\xF1\x02\u1855\u1857\x05\x06" +
		"\x04\x02\u1856\u1855\x03\x02\x02\x02\u1857\u185A\x03\x02\x02\x02\u1858" +
		"\u1856\x03\x02\x02\x02\u1858\u1859\x03\x02\x02\x02\u1859\u1869\x03\x02" +
		"\x02\x02\u185A\u1858\x03\x02\x02\x02\u185B\u185D\x07\xCF\x02\x02\u185C" +
		"\u185E\x05\x06\x04\x02\u185D\u185C\x03\x02\x02\x02\u185E\u185F\x03\x02" +
		"\x02\x02\u185F\u185D\x03\x02\x02\x02\u185F\u1860\x03\x02\x02\x02\u1860" +
		"\u1862\x03\x02\x02\x02\u1861\u185B\x03\x02\x02\x02\u1861\u1862\x03\x02" +
		"\x02\x02\u1862\u1863\x03\x02\x02\x02\u1863\u1865\x05\u01DE\xF0\x02\u1864" +
		"\u1866\x05\x06\x04\x02\u1865\u1864\x03\x02\x02\x02\u1866\u1867\x03\x02" +
		"\x02\x02\u1867\u1865\x03\x02\x02\x02\u1867\u1868\x03\x02\x02\x02\u1868" +
		"\u186A\x03\x02\x02\x02\u1869\u1861\x03\x02\x02\x02\u1869\u186A\x03\x02" +
		"\x02\x02\u186A\u187F\x03\x02\x02\x02\u186B\u1873\x05\u01D8\xED\x02\u186C" +
		"\u186E\x05\x06\x04\x02\u186D\u186C\x03\x02\x02\x02\u186E\u186F\x03\x02" +
		"\x02\x02\u186F\u186D\x03\x02\x02\x02\u186F\u1870\x03\x02\x02\x02\u1870" +
		"\u1871\x03\x02\x02\x02\u1871\u1872\x05\u01DA\xEE\x02\u1872\u1874\x03\x02" +
		"\x02\x02\u1873\u186D\x03\x02\x02\x02\u1873\u1874\x03\x02\x02\x02\u1874" +
		"\u1880\x03\x02\x02\x02\u1875\u187D\x05\u01DA\xEE\x02\u1876\u1878\x05\x06" +
		"\x04\x02\u1877\u1876\x03\x02\x02\x02\u1878\u1879\x03\x02\x02\x02\u1879" +
		"\u1877\x03\x02\x02\x02\u1879\u187A\x03\x02\x02\x02\u187A\u187B\x03\x02" +
		"\x02\x02\u187B\u187C\x05\u01D8\xED\x02\u187C\u187E\x03\x02\x02\x02\u187D" +
		"\u1877\x03\x02\x02\x02\u187D\u187E\x03\x02\x02\x02\u187E\u1880\x03\x02" +
		"\x02\x02\u187F\u186B\x03\x02\x02\x02\u187F\u1875\x03\x02\x02\x02\u187F" +
		"\u1880\x03\x02\x02\x02\u1880\u1884\x03\x02\x02\x02\u1881\u1883\x05\x06" +
		"\x04\x02\u1882\u1881\x03\x02\x02\x02\u1883\u1886\x03\x02\x02\x02\u1884" +
		"\u1882\x03\x02\x02\x02\u1884\u1885\x03\x02\x02\x02\u1885\u01D7\x03\x02" +
		"\x02\x02\u1886\u1884\x03\x02\x02\x02\u1887\u1889\x07\xFB\x02\x02\u1888" +
		"\u188A\x05\x06\x04\x02\u1889\u1888\x03\x02\x02\x02\u188A\u188B\x03\x02" +
		"\x02\x02\u188B\u1889\x03\x02\x02\x02\u188B\u188C\x03\x02\x02\x02\u188C" +
		"\u1893\x03\x02\x02\x02\u188D\u188F\x07\u0152\x02\x02\u188E\u1890\x05\x06" +
		"\x04\x02\u188F\u188E\x03\x02\x02\x02\u1890\u1891\x03\x02\x02\x02\u1891" +
		"\u188F\x03\x02\x02\x02\u1891\u1892\x03\x02\x02\x02\u1892\u1894\x03\x02" +
		"\x02\x02\u1893\u188D\x03\x02\x02\x02\u1893\u1894\x03\x02\x02\x02\u1894" +
		"\u189B\x03\x02\x02\x02\u1895\u1897\x07\xCF\x02\x02\u1896\u1898\x05\x06" +
		"\x04\x02\u1897\u1896\x03\x02\x02\x02\u1898\u1899\x03\x02\x02\x02\u1899" +
		"\u1897\x03\x02\x02\x02\u1899\u189A\x03\x02\x02\x02\u189A\u189C\x03\x02" +
		"\x02\x02\u189B\u1895\x03\x02\x02\x02\u189B\u189C\x03\x02\x02\x02\u189C" +
		"\u189D\x03\x02\x02\x02\u189D\u189E\x05\u01DC\xEF\x02\u189E\u01D9\x03\x02" +
		"\x02\x02\u189F\u18A1\x07\xF9\x02\x02\u18A0\u18A2\x05\x06\x04\x02\u18A1" +
		"\u18A0\x03\x02\x02\x02\u18A2\u18A3\x03\x02\x02\x02\u18A3\u18A1\x03\x02" +
		"\x02\x02\u18A3\u18A4\x03\x02\x02\x02\u18A4\u18AB\x03\x02\x02\x02\u18A5" +
		"\u18A7\x07\u0152\x02\x02\u18A6\u18A8\x05\x06\x04\x02\u18A7\u18A6\x03\x02" +
		"\x02\x02\u18A8\u18A9\x03\x02\x02\x02\u18A9\u18A7\x03\x02\x02\x02\u18A9" +
		"\u18AA\x03\x02\x02\x02\u18AA\u18AC\x03\x02\x02\x02\u18AB\u18A5\x03\x02" +
		"\x02\x02\u18AB\u18AC\x03\x02\x02\x02\u18AC\u18B3\x03\x02\x02\x02\u18AD" +
		"\u18AF\x07\xCF\x02\x02\u18AE\u18B0\x05\x06\x04\x02\u18AF\u18AE\x03\x02" +
		"\x02\x02\u18B0\u18B1\x03\x02\x02\x02\u18B1\u18AF\x03\x02\x02\x02\u18B1" +
		"\u18B2\x03\x02\x02\x02\u18B2\u18B4\x03\x02\x02\x02\u18B3\u18AD\x03\x02" +
		"\x02\x02\u18B3\u18B4\x03\x02\x02\x02\u18B4\u18B5\x03\x02\x02\x02\u18B5" +
		"\u18B6\x05\u01DC\xEF\x02\u18B6\u01DB\x03\x02\x02\x02\u18B7\u18B8\x07\u01AF" +
		"\x02\x02\u18B8\u01DD\x03\x02\x02\x02\u18B9\u18BA\x07\u01AF\x02\x02\u18BA" +
		"\u01DF\x03\x02\x02\x02\u18BB\u18BC\x07\u01AD\x02\x02\u18BC\u01E1\x03\x02" +
		"\x02\x02\u18BD\u18BE\x07\u01AF\x02\x02\u18BE\u01E3\x03\x02\x02\x02\u18BF" +
		"\u18C0\t\x1E\x02\x02\u18C0\u01E5\x03\x02\x02\x02\u18C1\u18C2\x07\u01AF" +
		"\x02\x02\u18C2\u01E7\x03\x02\x02\x02\u18C3\u18C4\t\x1F\x02\x02\u18C4\u01E9" +
		"\x03\x02\x02\x02\u18C5\u18C6\x07\u01AF\x02\x02\u18C6\u01EB\x03\x02\x02" +
		"\x02\u18C7\u18CB\x07\xA5\x02\x02\u18C8\u18CA\x05\x06\x04\x02\u18C9\u18C8" +
		"\x03\x02\x02\x02\u18CA\u18CD\x03\x02\x02\x02\u18CB\u18C9\x03\x02\x02\x02" +
		"\u18CB\u18CC\x03\x02\x02\x02\u18CC\u18CE\x03\x02\x02\x02\u18CD\u18CB\x03" +
		"\x02\x02\x02\u18CE\u18D2\x07\u01A9\x02\x02\u18CF\u18D1\x05\x06\x04\x02" +
		"\u18D0\u18CF\x03\x02\x02\x02\u18D1\u18D4\x03\x02\x02\x02\u18D2\u18D0\x03" +
		"\x02\x02\x02\u18D2\u18D3\x03\x02\x02\x02\u18D3\u18DE\x03\x02\x02\x02\u18D4" +
		"\u18D2\x03\x02\x02\x02\u18D5\u18D9\x05\u01EE\xF8\x02\u18D6\u18D8\x05\x06" +
		"\x04\x02\u18D7\u18D6\x03\x02\x02\x02\u18D8\u18DB\x03\x02\x02\x02\u18D9" +
		"\u18D7\x03\x02\x02\x02\u18D9\u18DA\x03\x02\x02\x02\u18DA\u18DD\x03\x02" +
		"\x02\x02\u18DB\u18D9\x03\x02\x02\x02\u18DC\u18D5\x03\x02\x02\x02\u18DD" +
		"\u18E0\x03\x02\x02\x02\u18DE\u18DC\x03\x02\x02\x02\u18DE\u18DF\x03\x02" +
		"\x02\x02\u18DF\u01ED\x03\x02\x02\x02\u18E0\u18DE\x03\x02\x02\x02\u18E1" +
		"\u18E3\x07\u013F\x02\x02\u18E2\u18E4\x05\x06\x04\x02\u18E3\u18E2\x03\x02" +
		"\x02\x02\u18E4\u18E5\x03\x02\x02\x02\u18E5\u18E3\x03\x02\x02\x02\u18E5" +
		"\u18E6\x03\x02\x02\x02\u18E6\u18ED\x03\x02\x02\x02\u18E7\u18E9\x07\xFD" +
		"\x02\x02\u18E8\u18EA\x05\x06\x04\x02\u18E9\u18E8\x03\x02\x02\x02\u18EA" +
		"\u18EB\x03\x02\x02\x02\u18EB\u18E9\x03\x02\x02\x02\u18EB\u18EC\x03\x02" +
		"\x02\x02\u18EC\u18EE\x03\x02\x02\x02\u18ED\u18E7\x03\x02\x02\x02\u18ED" +
		"\u18EE\x03\x02\x02\x02\u18EE\u18EF\x03\x02\x02\x02\u18EF\u18F3\x05\u0218" +
		"\u010D\x02\u18F0\u18F2\x05\x06\x04\x02\u18F1\u18F0\x03\x02\x02\x02\u18F2" +
		"\u18F5\x03\x02\x02\x02\u18F3\u18F1\x03\x02\x02\x02\u18F3\u18F4\x03\x02" +
		"\x02\x02\u18F4\u18F6\x03\x02\x02\x02\u18F5\u18F3\x03\x02\x02\x02\u18F6" +
		"\u18FA\x05\u0212\u010A\x02\u18F7\u18F9\x05\x06\x04\x02\u18F8\u18F7\x03" +
		"\x02\x02\x02\u18F9\u18FC\x03\x02\x02\x02\u18FA\u18F8\x03\x02\x02\x02\u18FA" +
		"\u18FB\x03\x02\x02\x02\u18FB\u1904\x03\x02\x02\x02\u18FC\u18FA\x03\x02" +
		"\x02\x02\u18FD\u1901\x05\u01FA\xFE\x02\u18FE\u1900\x05\x06\x04\x02\u18FF" +
		"\u18FE\x03\x02\x02\x02\u1900\u1903\x03\x02\x02\x02\u1901\u18FF\x03\x02" +
		"\x02\x02\u1901\u1902\x03\x02\x02\x02\u1902\u1905\x03\x02\x02\x02\u1903" +
		"\u1901\x03\x02\x02\x02\u1904\u18FD\x03\x02\x02\x02\u1904\u1905\x03\x02" +
		"\x02\x02\u1905\u190D\x03\x02\x02\x02\u1906\u190A\x05\u0204\u0103\x02\u1907" +
		"\u1909\x05\x06\x04\x02\u1908\u1907\x03\x02\x02\x02\u1909\u190C\x03\x02" +
		"\x02\x02\u190A\u1908\x03\x02\x02\x02\u190A\u190B\x03\x02\x02\x02\u190B" +
		"\u190E\x03\x02\x02\x02\u190C\u190A\x03\x02\x02\x02\u190D\u1906\x03\x02" +
		"\x02\x02\u190D\u190E\x03\x02\x02\x02\u190E\u1916\x03\x02\x02\x02\u190F" +
		"\u1913\x05\u020C\u0107\x02\u1910\u1912\x05\x06\x04\x02\u1911\u1910\x03" +
		"\x02\x02\x02\u1912\u1915\x03\x02\x02\x02\u1913\u1911\x03\x02\x02\x02\u1913" +
		"\u1914\x03\x02\x02\x02\u1914\u1917\x03\x02\x02\x02\u1915\u1913\x03\x02" +
		"\x02\x02\u1916\u190F\x03\x02\x02\x02\u1916\u1917\x03\x02\x02\x02\u1917" +
		"\u191F\x03\x02\x02\x02\u1918\u191C\x05\u020A\u0106\x02\u1919\u191B\x05" +
		"\x06\x04\x02\u191A\u1919\x03\x02\x02\x02\u191B\u191E\x03\x02\x02\x02\u191C" +
		"\u191A\x03\x02\x02\x02\u191C\u191D\x03\x02\x02\x02\u191D\u1920\x03\x02" +
		"\x02\x02\u191E\u191C\x03\x02\x02\x02\u191F\u1918\x03\x02\x02\x02\u191F" +
		"\u1920\x03\x02\x02\x02\u1920\u1928\x03\x02\x02\x02\u1921\u1925\x05\u0200" +
		"\u0101\x02\u1922\u1924\x05\x06\x04\x02\u1923\u1922\x03\x02\x02\x02\u1924" +
		"\u1927\x03\x02\x02\x02\u1925\u1923\x03\x02\x02\x02\u1925\u1926\x03\x02" +
		"\x02\x02\u1926\u1929\x03\x02\x02\x02\u1927\u1925\x03\x02\x02\x02\u1928" +
		"\u1921\x03\x02\x02\x02\u1928\u1929\x03\x02\x02\x02\u1929\u1931\x03\x02" +
		"\x02\x02\u192A\u192E\x05\u01FE\u0100\x02\u192B\u192D\x05\x06\x04\x02\u192C" +
		"\u192B\x03\x02\x02\x02\u192D\u1930\x03\x02\x02\x02\u192E\u192C\x03\x02" +
		"\x02\x02\u192E\u192F\x03\x02\x02\x02\u192F\u1932\x03\x02\x02\x02\u1930" +
		"\u192E\x03\x02\x02\x02\u1931\u192A\x03\x02\x02\x02\u1931\u1932\x03\x02" +
		"\x02\x02\u1932\u193A\x03\x02\x02\x02\u1933\u1937\x05\u01F8\xFD\x02\u1934" +
		"\u1936\x05\x06\x04\x02\u1935\u1934\x03\x02\x02\x02\u1936\u1939\x03\x02" +
		"\x02\x02\u1937\u1935\x03\x02\x02\x02\u1937\u1938\x03\x02\x02\x02\u1938" +
		"\u193B\x03\x02\x02\x02\u1939\u1937\x03\x02\x02\x02\u193A\u1933\x03\x02" +
		"\x02\x02\u193A\u193B\x03\x02\x02\x02\u193B\u1945\x03\x02\x02\x02\u193C" +
		"\u1940\x05\u01F4\xFB\x02\u193D\u193F\x05\x06\x04\x02\u193E\u193D\x03\x02" +
		"\x02\x02\u193F\u1942\x03\x02\x02\x02\u1940\u193E\x03\x02\x02\x02\u1940" +
		"\u1941\x03\x02\x02\x02\u1941\u1944\x03\x02\x02\x02\u1942\u1940\x03\x02" +
		"\x02\x02\u1943\u193C\x03\x02\x02\x02\u1944\u1947\x03\x02\x02\x02\u1945" +
		"\u1943\x03\x02\x02\x02\u1945\u1946\x03\x02\x02\x02\u1946\u194F\x03\x02" +
		"\x02\x02\u1947\u1945\x03\x02\x02\x02\u1948\u194C\x05\u0206\u0104\x02\u1949" +
		"\u194B\x05\x06\x04\x02\u194A\u1949\x03\x02\x02\x02\u194B\u194E\x03\x02" +
		"\x02\x02\u194C\u194A\x03\x02\x02\x02\u194C\u194D\x03\x02\x02\x02\u194D" +
		"\u1950\x03\x02\x02\x02\u194E\u194C\x03\x02\x02\x02\u194F\u1948\x03\x02" +
		"\x02\x02\u194F\u1950\x03\x02\x02\x02\u1950\u1958\x03\x02\x02\x02\u1951" +
		"\u1955\x05\u01F0\xF9\x02\u1952\u1954\x05\x06\x04\x02\u1953\u1952\x03\x02" +
		"\x02\x02\u1954\u1957\x03\x02\x02\x02\u1955\u1953\x03\x02\x02\x02\u1955" +
		"\u1956\x03\x02\x02\x02\u1956\u1959\x03\x02\x02\x02\u1957\u1955\x03\x02" +
		"\x02\x02\u1958\u1951\x03\x02\x02\x02\u1958\u1959\x03\x02\x02\x02\u1959" +
		"\u195A\x03\x02\x02\x02\u195A\u195B\x07\u01A9\x02\x02\u195B\u01EF\x03\x02" +
		"\x02\x02\u195C\u195E\x07\xA4\x02\x02\u195D\u195F\x05\x06\x04\x02\u195E" +
		"\u195D\x03\x02\x02\x02\u195F\u1960\x03\x02\x02\x02\u1960\u195E\x03\x02" +
		"\x02\x02\u1960\u1961\x03\x02\x02\x02\u1961\u1963\x03\x02\x02\x02\u1962" +
		"\u195C\x03\x02\x02\x02\u1962\u1963\x03\x02\x02\x02\u1963\u1964\x03\x02" +
		"\x02\x02\u1964\u1966\x07\u0152\x02\x02\u1965\u1967\x05\x06\x04\x02\u1966" +
		"\u1965\x03\x02\x02\x02\u1967\u1968\x03\x02\x02\x02\u1968\u1966\x03\x02" +
		"\x02\x02\u1968\u1969\x03\x02\x02\x02\u1969\u1970\x03\x02\x02\x02\u196A" +
		"\u196C\x07\xCF\x02\x02\u196B\u196D\x05\x06\x04\x02\u196C\u196B\x03\x02" +
		"\x02\x02\u196D\u196E\x03\x02\x02\x02\u196E\u196C\x03\x02\x02\x02\u196E" +
		"\u196F\x03\x02\x02\x02\u196F\u1971\x03\x02\x02\x02\u1970\u196A\x03\x02" +
		"\x02\x02\u1970\u1971\x03\x02\x02\x02\u1971\u1972\x03\x02\x02\x02\u1972" +
		"\u1973\x05\u01F2\xFA\x02\u1973\u01F1\x03\x02\x02\x02\u1974\u1975\x05\u01AE" +
		"\xD8\x02\u1975\u01F3\x03\x02\x02\x02\u1976\u1978\x07\x12\x02\x02\u1977" +
		"\u1979\x05\x06\x04\x02\u1978\u1977\x03\x02\x02\x02\u1979\u197A\x03\x02" +
		"\x02\x02\u197A\u1978\x03\x02\x02\x02\u197A\u197B\x03\x02\x02\x02\u197B" +
		"\u197D\x03\x02\x02\x02\u197C\u1976\x03\x02\x02\x02\u197C\u197D\x03\x02" +
		"\x02\x02\u197D\u197E\x03\x02\x02\x02\u197E\u1980\x07\u011E\x02\x02\u197F" +
		"\u1981\x05\x06\x04\x02\u1980\u197F\x03\x02\x02\x02\u1981\u1982\x03\x02" +
		"\x02\x02\u1982\u1980\x03\x02\x02\x02\u1982\u1983\x03\x02\x02\x02\u1983" +
		"\u198A\x03\x02\x02\x02\u1984\u1986\x07\xD4\x02\x02\u1985\u1987\x05\x06" +
		"\x04\x02\u1986\u1985\x03\x02\x02\x02\u1987\u1988\x03\x02\x02\x02\u1988" +
		"\u1986\x03\x02\x02\x02\u1988\u1989\x03\x02\x02\x02\u1989\u198B\x03\x02" +
		"\x02\x02\u198A\u1984\x03\x02\x02\x02\u198A\u198B\x03\x02\x02\x02\u198B" +
		"\u1992\x03\x02\x02\x02\u198C\u198E\x07\xCF\x02\x02\u198D\u198F\x05\x06" +
		"\x04\x02\u198E\u198D\x03\x02\x02\x02\u198F\u1990\x03\x02\x02\x02\u1990" +
		"\u198E\x03\x02\x02\x02\u1990\u1991\x03\x02\x02\x02\u1991\u1993\x03\x02" +
		"\x02\x02\u1992\u198C\x03\x02\x02\x02\u1992\u1993\x03\x02\x02\x02\u1993" +
		"\u1994\x03\x02\x02\x02\u1994\u19A4\x05\u01F6\xFC\x02\u1995\u1997\x05\x06" +
		"\x04\x02\u1996\u1995\x03\x02\x02\x02\u1997\u1998\x03\x02\x02\x02\u1998" +
		"\u1996\x03\x02\x02\x02\u1998\u1999\x03\x02\x02\x02\u1999\u19A0\x03\x02" +
		"\x02\x02\u199A\u199C\x07\u017F\x02\x02\u199B\u199D\x05\x06\x04\x02\u199C" +
		"\u199B\x03\x02\x02\x02\u199D\u199E\x03\x02\x02\x02\u199E\u199C\x03\x02" +
		"\x02\x02\u199E\u199F\x03\x02\x02\x02\u199F\u19A1\x03\x02\x02\x02\u19A0" +
		"\u199A\x03\x02\x02\x02\u19A0\u19A1\x03\x02\x02\x02\u19A1\u19A2\x03\x02" +
		"\x02\x02\u19A2\u19A3\x07w\x02\x02\u19A3\u19A5\x03\x02\x02\x02\u19A4\u1996" +
		"\x03\x02\x02\x02\u19A4\u19A5\x03\x02\x02\x02\u19A5\u19AD\x03\x02\x02\x02" +
		"\u19A6\u19A8\x05\x06\x04\x02\u19A7\u19A6\x03\x02\x02\x02\u19A8\u19A9\x03" +
		"\x02\x02\x02\u19A9\u19A7\x03\x02\x02\x02\u19A9\u19AA\x03\x02\x02\x02\u19AA" +
		"\u19AB\x03\x02\x02\x02\u19AB\u19AC\t\x0E\x02\x02\u19AC\u19AE\x03\x02\x02" +
		"\x02\u19AD\u19A7\x03\x02\x02\x02\u19AD\u19AE\x03\x02\x02\x02\u19AE\u01F5" +
		"\x03\x02\x02\x02\u19AF\u19CC\x05\u01AE\xD8\x02\u19B0\u19B4\x07\u01AF\x02" +
		"\x02\u19B1\u19B3\x05\x06\x04\x02\u19B2\u19B1\x03\x02\x02\x02\u19B3\u19B6" +
		"\x03\x02\x02\x02\u19B4\u19B2\x03\x02\x02\x02\u19B4\u19B5\x03\x02\x02\x02" +
		"\u19B5\u19B7\x03\x02\x02\x02\u19B6\u19B4\x03\x02\x02\x02\u19B7\u19BB\x07" +
		"\u019E\x02\x02\u19B8\u19BA\x05\x06\x04\x02\u19B9\u19B8\x03\x02\x02\x02" +
		"\u19BA\u19BD\x03\x02\x02\x02\u19BB\u19B9\x03\x02\x02\x02\u19BB\u19BC\x03" +
		"\x02\x02\x02\u19BC\u19BE\x03\x02\x02\x02\u19BD\u19BB\x03\x02\x02\x02\u19BE" +
		"\u19C8\x05\u01AE\xD8\x02\u19BF\u19C1\x05\x06\x04\x02\u19C0\u19BF\x03\x02" +
		"\x02\x02\u19C1\u19C4\x03\x02\x02\x02\u19C2\u19C0\x03\x02\x02\x02\u19C2" +
		"\u19C3\x03\x02\x02\x02\u19C3\u19C5\x03\x02\x02\x02\u19C4\u19C2\x03\x02" +
		"\x02\x02\u19C5\u19C7\x05\u01AE\xD8\x02\u19C6\u19C2\x03\x02\x02\x02\u19C7" +
		"\u19CA\x03\x02\x02\x02\u19C8\u19C6\x03\x02\x02\x02\u19C8\u19C9\x03\x02" +
		"\x02\x02\u19C9\u19CC\x03\x02\x02\x02\u19CA\u19C8\x03\x02\x02\x02\u19CB" +
		"\u19AF\x03\x02\x02\x02\u19CB\u19B0\x03\x02\x02\x02\u19CC\u01F7\x03\x02" +
		"\x02\x02\u19CD\u19CF\x07\x07\x02\x02\u19CE\u19D0\x05\x06\x04\x02\u19CF" +
		"\u19CE\x03\x02\x02\x02\u19D0\u19D1\x03\x02\x02\x02\u19D1\u19CF\x03\x02" +
		"\x02\x02\u19D1\u19D2\x03\x02\x02\x02\u19D2\u19D9\x03\x02\x02\x02\u19D3" +
		"\u19D5\x07\xEA\x02\x02\u19D4\u19D6\x05\x06\x04\x02\u19D5\u19D4\x03\x02" +
		"\x02\x02\u19D6\u19D7\x03\x02\x02\x02\u19D7\u19D5\x03\x02\x02\x02\u19D7" +
		"\u19D8\x03\x02\x02\x02\u19D8\u19DA\x03\x02\x02\x02\u19D9\u19D3\x03\x02" +
		"\x02\x02\u19D9\u19DA\x03\x02\x02\x02\u19DA\u19E1\x03\x02\x02\x02\u19DB" +
		"\u19DD\x07\xCF\x02\x02\u19DC\u19DE\x05\x06\x04\x02\u19DD\u19DC\x03\x02" +
		"\x02\x02\u19DE\u19DF\x03\x02\x02\x02\u19DF\u19DD\x03\x02\x02\x02\u19DF" +
		"\u19E0\x03\x02\x02\x02\u19E0\u19E2\x03\x02\x02\x02\u19E1\u19DB\x03\x02" +
		"\x02\x02\u19E1\u19E2\x03\x02\x02\x02\u19E2\u19E4\x03\x02\x02\x02\u19E3" +
		"\u19CD\x03\x02\x02\x02\u19E3\u19E4\x03\x02\x02\x02\u19E4\u19E5\x03\x02" +
		"\x02\x02\u19E5\u1A03\t \x02\x02\u19E6\u19E8\x05\x06\x04\x02\u19E7\u19E6" +
		"\x03\x02\x02\x02\u19E8\u19E9\x03\x02\x02\x02\u19E9\u19E7\x03\x02\x02\x02" +
		"\u19E9\u19EA\x03\x02\x02\x02\u19EA\u19EB\x03\x02\x02\x02\u19EB\u19ED\x07" +
		"\u0123\x02\x02\u19EC\u19EE\x05\x06\x04\x02\u19ED\u19EC\x03\x02\x02\x02" +
		"\u19EE\u19EF\x03\x02\x02\x02\u19EF\u19ED\x03\x02\x02\x02\u19EF\u19F0\x03" +
		"\x02\x02\x02\u19F0\u19F7\x03\x02\x02\x02\u19F1\u19F3\x07\xD4\x02\x02\u19F2" +
		"\u19F4\x05\x06\x04\x02\u19F3\u19F2\x03\x02\x02\x02\u19F4\u19F5\x03\x02" +
		"\x02\x02\u19F5\u19F3\x03\x02\x02\x02\u19F5\u19F6\x03\x02\x02\x02\u19F6" +
		"\u19F8\x03\x02\x02\x02\u19F7\u19F1\x03\x02\x02\x02\u19F7\u19F8\x03\x02" +
		"\x02\x02\u19F8\u19FF\x03\x02\x02\x02\u19F9\u19FB\x07\xCF\x02\x02\u19FA" +
		"\u19FC\x05\x06\x04\x02\u19FB\u19FA\x03\x02\x02\x02\u19FC\u19FD\x03\x02" +
		"\x02\x02\u19FD\u19FB\x03\x02\x02\x02\u19FD\u19FE\x03\x02\x02\x02\u19FE" +
		"\u1A00\x03\x02\x02\x02\u19FF\u19F9\x03\x02\x02\x02\u19FF\u1A00\x03\x02" +
		"\x02\x02\u1A00\u1A01\x03\x02\x02\x02\u1A01\u1A02\x05\u01AE\xD8\x02\u1A02" +
		"\u1A04\x03\x02\x02\x02\u1A03\u19E7\x03\x02\x02\x02\u1A03\u1A04\x03\x02" +
		"\x02\x02\u1A04\u01F9\x03\x02\x02\x02\u1A05\u1A07\x07\u012D\x02\x02\u1A06" +
		"\u1A08\x05\x06\x04\x02\u1A07\u1A06\x03\x02\x02\x02\u1A08\u1A09\x03\x02" +
		"\x02\x02\u1A09\u1A07\x03\x02\x02\x02\u1A09\u1A0A\x03\x02\x02\x02\u1A0A" +
		"\u1A0B\x03\x02\x02\x02\u1A0B\u1A13\x05\u01FC\xFF\x02\u1A0C\u1A0E\x05\x06" +
		"\x04\x02\u1A0D\u1A0C\x03\x02\x02\x02\u1A0E\u1A0F\x03\x02\x02\x02\u1A0F" +
		"\u1A0D\x03\x02\x02\x02\u1A0F\u1A10\x03\x02\x02\x02\u1A10\u1A11\x03\x02" +
		"\x02\x02\u1A11\u1A12\t!\x02\x02\u1A12\u1A14\x03\x02\x02\x02\u1A13\u1A0D" +
		"\x03\x02\x02\x02\u1A13\u1A14\x03\x02\x02\x02\u1A14\u01FB\x03\x02\x02\x02" +
		"\u1A15\u1A16\x07\u01AD\x02\x02\u1A16\u01FD\x03\x02\x02\x02\u1A17\u1A19" +
		"\x07\u011E\x02\x02\u1A18\u1A1A\x05\x06\x04\x02\u1A19\u1A18\x03\x02\x02" +
		"\x02\u1A1A\u1A1B\x03\x02\x02\x02\u1A1B\u1A19\x03\x02\x02\x02\u1A1B\u1A1C" +
		"\x03\x02\x02\x02\u1A1C\u1A1D\x03\x02\x02\x02\u1A1D\u1A1F\x07n\x02\x02" +
		"\u1A1E\u1A20\x05\x06\x04\x02\u1A1F\u1A1E\x03\x02\x02\x02\u1A20\u1A21\x03" +
		"\x02\x02\x02\u1A21\u1A1F\x03\x02\x02\x02\u1A21\u1A22\x03\x02\x02\x02\u1A22" +
		"\u1A29\x03\x02\x02\x02\u1A23\u1A25\x07\xCF\x02\x02\u1A24\u1A26\x05\x06" +
		"\x04\x02\u1A25\u1A24\x03\x02\x02\x02\u1A26\u1A27\x03\x02\x02\x02\u1A27" +
		"\u1A25\x03\x02\x02\x02\u1A27\u1A28\x03\x02\x02\x02\u1A28\u1A2A\x03\x02" +
		"\x02\x02\u1A29\u1A23\x03\x02\x02\x02\u1A29\u1A2A\x03\x02\x02\x02\u1A2A" +
		"\u1A2B\x03\x02\x02\x02\u1A2B\u1A2C\x07\u014F\x02\x02\u1A2C\u01FF\x03\x02" +
		"\x02\x02\u1A2D\u1A2F\x07\u0104\x02\x02\u1A2E\u1A30\x05\x06\x04\x02\u1A2F" +
		"\u1A2E\x03\x02\x02\x02\u1A30\u1A31\x03\x02\x02\x02\u1A31\u1A2F\x03\x02" +
		"\x02\x02\u1A31\u1A32\x03\x02\x02\x02\u1A32\u1A39\x03\x02\x02\x02\u1A33" +
		"\u1A35\x078\x02\x02\u1A34\u1A36\x05\x06\x04\x02\u1A35\u1A34\x03\x02\x02" +
		"\x02";
	private static readonly _serializedATNSegment13: string =
		"\u1A36\u1A37\x03\x02\x02\x02\u1A37\u1A35\x03\x02\x02\x02\u1A37\u1A38\x03" +
		"\x02\x02\x02\u1A38\u1A3A\x03\x02\x02\x02\u1A39\u1A33\x03\x02\x02\x02\u1A39" +
		"\u1A3A\x03\x02\x02\x02\u1A3A\u1A41\x03\x02\x02\x02\u1A3B\u1A3D\x07\xCF" +
		"\x02\x02\u1A3C\u1A3E\x05\x06\x04\x02\u1A3D\u1A3C\x03\x02\x02\x02\u1A3E" +
		"\u1A3F\x03\x02\x02\x02\u1A3F\u1A3D\x03\x02\x02\x02\u1A3F\u1A40\x03\x02" +
		"\x02\x02\u1A40\u1A42\x03\x02\x02\x02\u1A41\u1A3B\x03\x02\x02\x02\u1A41" +
		"\u1A42\x03\x02\x02\x02\u1A42\u1A43\x03\x02\x02\x02\u1A43\u1A44\x05\u0202" +
		"\u0102\x02\u1A44\u0201\x03\x02\x02\x02\u1A45\u1A46\x07\u01AC\x02\x02\u1A46" +
		"\u0203\x03\x02\x02\x02\u1A47\u1A49\x07\u0100\x02\x02\u1A48\u1A4A\x05\x06" +
		"\x04\x02\u1A49\u1A48\x03\x02\x02\x02\u1A4A\u1A4B\x03\x02\x02\x02\u1A4B" +
		"\u1A49\x03\x02\x02\x02\u1A4B\u1A4C\x03\x02\x02\x02\u1A4C\u1A53\x03\x02" +
		"\x02\x02\u1A4D\u1A4F\x07\xCF\x02\x02\u1A4E\u1A50\x05\x06\x04\x02\u1A4F" +
		"\u1A4E\x03\x02\x02\x02\u1A50\u1A51\x03\x02\x02\x02\u1A51\u1A4F\x03\x02" +
		"\x02\x02\u1A51\u1A52\x03\x02\x02\x02\u1A52\u1A54\x03\x02\x02\x02\u1A53" +
		"\u1A4D\x03\x02\x02\x02\u1A53\u1A54\x03\x02\x02\x02\u1A54\u1A56\x03\x02" +
		"\x02\x02\u1A55\u1A47\x03\x02\x02\x02\u1A55\u1A56\x03\x02\x02\x02\u1A56" +
		"\u1A62\x03\x02\x02\x02\u1A57\u1A63\x07\u0142\x02\x02\u1A58\u1A5A\x07\xDD" +
		"\x02\x02\u1A59\u1A5B\x05\x06\x04\x02\u1A5A\u1A59\x03\x02\x02\x02\u1A5B" +
		"\u1A5C\x03\x02\x02\x02\u1A5C\u1A5A\x03\x02\x02\x02\u1A5C\u1A5D\x03\x02" +
		"\x02\x02\u1A5D\u1A5E\x03\x02\x02\x02\u1A5E\u1A5F\x07\u0142\x02\x02\u1A5F" +
		"\u1A63\x03\x02\x02\x02\u1A60\u1A63\x07\u0123\x02\x02\u1A61\u1A63\x07\xC5" +
		"\x02\x02\u1A62\u1A57\x03\x02\x02\x02\u1A62\u1A58\x03\x02\x02\x02\u1A62" +
		"\u1A60\x03\x02\x02\x02\u1A62\u1A61\x03\x02\x02\x02\u1A63\u0205\x03\x02" +
		"\x02\x02\u1A64\u1A66\x07\xE1\x02\x02\u1A65\u1A67\x05\x06\x04\x02\u1A66" +
		"\u1A65\x03\x02\x02\x02\u1A67\u1A68\x03\x02\x02\x02\u1A68\u1A66\x03\x02" +
		"\x02\x02\u1A68\u1A69\x03\x02\x02\x02\u1A69\u1A70\x03\x02\x02\x02\u1A6A" +
		"\u1A6C\x07\xEA\x02\x02\u1A6B\u1A6D\x05\x06\x04\x02\u1A6C\u1A6B\x03\x02" +
		"\x02\x02\u1A6D\u1A6E\x03\x02\x02\x02\u1A6E\u1A6C\x03\x02\x02\x02\u1A6E" +
		"\u1A6F\x03\x02\x02\x02\u1A6F\u1A71\x03\x02\x02\x02\u1A70\u1A6A\x03\x02" +
		"\x02\x02\u1A70\u1A71\x03\x02\x02\x02\u1A71\u1A78\x03\x02\x02\x02\u1A72" +
		"\u1A74\x07\xCF\x02\x02\u1A73\u1A75\x05\x06\x04\x02\u1A74\u1A73\x03\x02" +
		"\x02\x02\u1A75\u1A76\x03\x02\x02\x02\u1A76\u1A74\x03\x02\x02\x02\u1A76" +
		"\u1A77\x03\x02\x02\x02\u1A77\u1A79\x03\x02\x02\x02\u1A78\u1A72\x03\x02" +
		"\x02\x02\u1A78\u1A79\x03\x02\x02\x02\u1A79\u1A7A\x03\x02\x02\x02\u1A7A" +
		"\u1A7B\x05\u0208\u0105\x02\u1A7B\u0207\x03\x02\x02\x02\u1A7C\u1A7E\x07" +
		"\xE6\x02\x02\u1A7D\u1A7F\x05\x06\x04\x02\u1A7E\u1A7D\x03\x02\x02\x02\u1A7F" +
		"\u1A80\x03\x02\x02\x02\u1A80\u1A7E\x03\x02\x02\x02\u1A80\u1A81\x03\x02" +
		"\x02\x02\u1A81\u1A88\x03\x02\x02\x02\u1A82\u1A84\x07\u017F\x02\x02\u1A83" +
		"\u1A85\x05\x06\x04\x02\u1A84\u1A83\x03\x02\x02\x02\u1A85\u1A86\x03\x02" +
		"\x02\x02\u1A86\u1A84\x03\x02\x02\x02\u1A86\u1A87\x03\x02\x02\x02\u1A87" +
		"\u1A89\x03\x02\x02\x02\u1A88\u1A82\x03\x02\x02\x02\u1A88\u1A89\x03\x02" +
		"\x02\x02\u1A89\u1A8A\x03\x02\x02\x02\u1A8A\u1A8C\x07\xE1\x02\x02\u1A8B" +
		"\u1A8D\x05\x06\x04\x02\u1A8C\u1A8B\x03\x02\x02\x02\u1A8D\u1A8E\x03\x02" +
		"\x02\x02\u1A8E\u1A8C\x03\x02\x02\x02\u1A8E\u1A8F\x03\x02\x02\x02\u1A8F" +
		"\u1A90\x03\x02\x02\x02\u1A90\u1A92\x07\xFB\x02\x02\u1A91\u1A93\x05\x06" +
		"\x04\x02\u1A92\u1A91\x03\x02\x02\x02\u1A93\u1A94\x03\x02\x02\x02\u1A94" +
		"\u1A92\x03\x02\x02\x02\u1A94\u1A95\x03\x02\x02\x02\u1A95\u1A96\x03\x02" +
		"\x02\x02\u1A96\u1A98\x07\xED\x02\x02\u1A97\u1A99\x05\x06\x04\x02\u1A98" +
		"\u1A97\x03\x02\x02\x02\u1A99\u1A9A\x03\x02\x02\x02\u1A9A\u1A98\x03\x02" +
		"\x02\x02\u1A9A\u1A9B\x03\x02\x02\x02\u1A9B\u1A9C\x03\x02\x02\x02\u1A9C" +
		"\u1A9D\x07\u011F\x02\x02\u1A9D\u1AC1\x03\x02\x02\x02\u1A9E\u1ABD\x07!" +
		"\x02\x02\u1A9F\u1AA1\x05\x06\x04\x02\u1AA0\u1A9F\x03\x02\x02\x02\u1AA1" +
		"\u1AA2\x03\x02\x02\x02\u1AA2\u1AA0\x03\x02\x02\x02\u1AA2\u1AA3\x03\x02" +
		"\x02\x02\u1AA3\u1AAA\x03\x02\x02\x02\u1AA4\u1AA6\x07\u017F\x02\x02\u1AA5" +
		"\u1AA7\x05\x06\x04\x02\u1AA6\u1AA5\x03\x02\x02\x02\u1AA7\u1AA8\x03\x02" +
		"\x02\x02\u1AA8\u1AA6\x03\x02\x02\x02\u1AA8\u1AA9\x03\x02\x02\x02\u1AA9" +
		"\u1AAB\x03\x02\x02\x02\u1AAA\u1AA4\x03\x02\x02\x02\u1AAA\u1AAB\x03\x02" +
		"\x02\x02\u1AAB\u1ABB\x03\x02\x02\x02\u1AAC\u1AAE\x07\xE1\x02\x02\u1AAD" +
		"\u1AAF\x05\x06\x04\x02\u1AAE\u1AAD\x03\x02\x02\x02\u1AAF\u1AB0\x03\x02" +
		"\x02\x02\u1AB0\u1AAE\x03\x02\x02\x02\u1AB0\u1AB1\x03\x02\x02\x02\u1AB1" +
		"\u1AB2\x03\x02\x02\x02\u1AB2\u1AB4\x07\xFB\x02\x02\u1AB3\u1AB5\x05\x06" +
		"\x04\x02\u1AB4\u1AB3\x03\x02\x02\x02\u1AB5\u1AB6\x03\x02\x02\x02\u1AB6" +
		"\u1AB4\x03\x02\x02\x02\u1AB6\u1AB7\x03\x02\x02\x02\u1AB7\u1AB8\x03\x02" +
		"\x02\x02\u1AB8\u1AB9\x07\u011E\x02\x02\u1AB9\u1ABC\x03\x02\x02\x02\u1ABA" +
		"\u1ABC\x07\u0136\x02\x02\u1ABB\u1AAC\x03\x02\x02\x02\u1ABB\u1ABA\x03\x02" +
		"\x02\x02\u1ABC\u1ABE\x03\x02\x02\x02\u1ABD\u1AA0\x03\x02\x02\x02\u1ABD" +
		"\u1ABE\x03\x02\x02\x02\u1ABE\u1AC1\x03\x02\x02\x02\u1ABF\u1AC1\x07\x9D" +
		"\x02\x02\u1AC0\u1A7C\x03\x02\x02\x02\u1AC0\u1A9E\x03\x02\x02\x02\u1AC0" +
		"\u1ABF\x03\x02\x02\x02\u1AC1\u0209\x03\x02\x02\x02\u1AC2\u1AC4\x07>\x02" +
		"\x02\u1AC3\u1AC5\x05\x06\x04\x02\u1AC4\u1AC3\x03\x02\x02\x02\u1AC5\u1AC6" +
		"\x03\x02\x02\x02\u1AC6\u1AC4\x03\x02\x02\x02\u1AC6\u1AC7\x03\x02\x02\x02" +
		"\u1AC7\u1ACE\x03\x02\x02\x02\u1AC8\u1ACA\x07\xCF\x02\x02\u1AC9\u1ACB\x05" +
		"\x06\x04\x02\u1ACA\u1AC9\x03\x02\x02\x02\u1ACB\u1ACC\x03\x02\x02\x02\u1ACC" +
		"\u1ACA\x03\x02\x02\x02\u1ACC\u1ACD\x03\x02\x02\x02\u1ACD\u1ACF\x03\x02" +
		"\x02\x02\u1ACE\u1AC8\x03\x02\x02\x02\u1ACE\u1ACF\x03\x02\x02\x02\u1ACF" +
		"\u1AD0\x03\x02\x02\x02\u1AD0\u1AD1\x05\u01A4\xD3\x02\u1AD1\u020B\x03\x02" +
		"\x02\x02\u1AD2\u1AD4\x07.\x02\x02\u1AD3\u1AD5\x05\x06\x04\x02\u1AD4\u1AD3" +
		"\x03\x02\x02\x02\u1AD5\u1AD6\x03\x02\x02\x02\u1AD6\u1AD4\x03\x02\x02\x02" +
		"\u1AD6\u1AD7\x03\x02\x02\x02\u1AD7\u1ADE\x03\x02\x02\x02\u1AD8\u1ADA\x07" +
		"T\x02\x02\u1AD9\u1ADB\x05\x06\x04\x02\u1ADA\u1AD9\x03\x02\x02\x02\u1ADB" +
		"\u1ADC\x03\x02\x02\x02\u1ADC\u1ADA\x03\x02\x02\x02\u1ADC\u1ADD\x03\x02" +
		"\x02\x02\u1ADD\u1ADF\x03\x02\x02\x02\u1ADE\u1AD8\x03\x02\x02\x02\u1ADE" +
		"\u1ADF\x03\x02\x02\x02\u1ADF\u1AEC\x03\x02\x02\x02\u1AE0\u1AE2\x05\u020E" +
		"\u0108\x02\u1AE1\u1AE3\x05\x06\x04\x02\u1AE2\u1AE1\x03\x02\x02\x02\u1AE3" +
		"\u1AE4\x03\x02\x02\x02\u1AE4\u1AE2\x03\x02\x02\x02\u1AE4\u1AE5\x03\x02" +
		"\x02\x02\u1AE5\u1AE6\x03\x02\x02\x02\u1AE6\u1AE8\x07\u0169\x02\x02\u1AE7" +
		"\u1AE9\x05\x06\x04\x02\u1AE8\u1AE7\x03\x02\x02\x02\u1AE9\u1AEA\x03\x02" +
		"\x02\x02\u1AEA\u1AE8\x03\x02\x02\x02\u1AEA\u1AEB\x03\x02\x02\x02\u1AEB" +
		"\u1AED\x03\x02\x02\x02\u1AEC\u1AE0\x03\x02\x02\x02\u1AEC\u1AED\x03\x02" +
		"\x02\x02\u1AED\u1AEE\x03\x02\x02\x02\u1AEE\u1AF0\x05\u0210\u0109\x02\u1AEF" +
		"\u1AF1\x05\x06\x04\x02\u1AF0\u1AEF\x03\x02\x02\x02\u1AF1\u1AF2\x03\x02" +
		"\x02\x02\u1AF2\u1AF0\x03\x02\x02\x02\u1AF2\u1AF3\x03\x02\x02\x02\u1AF3" +
		"\u1AF4\x03\x02\x02\x02\u1AF4\u1AF5\t\"\x02\x02\u1AF5\u020D\x03\x02\x02" +
		"\x02\u1AF6\u1AF7\x07\u01AD\x02\x02\u1AF7\u020F\x03\x02\x02\x02\u1AF8\u1AF9" +
		"\x07\u01AD\x02\x02\u1AF9\u0211\x03\x02\x02\x02\u1AFA\u1AFC\x07\x1D\x02" +
		"\x02\u1AFB\u1AFD\x05\x06\x04\x02\u1AFC\u1AFB\x03\x02\x02\x02\u1AFD\u1AFE" +
		"\x03\x02\x02\x02\u1AFE\u1AFC\x03\x02\x02\x02\u1AFE\u1AFF\x03\x02\x02\x02" +
		"\u1AFF\u1B06\x03\x02\x02\x02\u1B00\u1B02\x07\u0169\x02\x02\u1B01\u1B03" +
		"\x05\x06\x04\x02\u1B02\u1B01\x03\x02\x02\x02\u1B03\u1B04\x03\x02\x02\x02" +
		"\u1B04\u1B02\x03\x02\x02\x02\u1B04\u1B05\x03\x02\x02\x02\u1B05\u1B07\x03" +
		"\x02\x02\x02\u1B06\u1B00\x03\x02\x02\x02\u1B06\u1B07\x03\x02\x02\x02\u1B07" +
		"\u1B08\x03\x02\x02\x02\u1B08\u1B09\x05\u0214\u010B\x02\u1B09\u0213\x03" +
		"\x02\x02\x02\u1B0A\u1B0C\t#\x02\x02\u1B0B\u1B0D\x05\x06\x04\x02\u1B0C" +
		"\u1B0B\x03\x02\x02\x02\u1B0D\u1B0E\x03\x02\x02\x02\u1B0E\u1B0C\x03\x02" +
		"\x02\x02\u1B0E\u1B0F\x03\x02\x02\x02\u1B0F\u1B11\x03\x02\x02\x02\u1B10" +
		"\u1B0A\x03\x02\x02\x02\u1B10\u1B11\x03\x02\x02\x02\u1B11\u1B12\x03\x02" +
		"\x02\x02\u1B12\u1B26\x05\u0216\u010C\x02\u1B13\u1B15\x07\xED\x02\x02\u1B14" +
		"\u1B16\x05\x06\x04\x02\u1B15\u1B14\x03\x02\x02\x02\u1B16\u1B17\x03\x02" +
		"\x02\x02\u1B17\u1B15\x03\x02\x02\x02\u1B17\u1B18\x03\x02\x02\x02\u1B18" +
		"\u1B1A\x03\x02\x02\x02\u1B19\u1B13\x03\x02\x02\x02\u1B19\u1B1A\x03\x02" +
		"\x02\x02\u1B1A\u1B1B\x03\x02\x02\x02\u1B1B\u1B23\t\x06\x02\x02\u1B1C\u1B1E" +
		"\x05\x06\x04\x02\u1B1D\u1B1C\x03\x02\x02\x02\u1B1E\u1B1F\x03\x02\x02\x02" +
		"\u1B1F\u1B1D\x03\x02\x02\x02\u1B1F\u1B20\x03\x02\x02\x02\u1B20\u1B21\x03" +
		"\x02\x02\x02\u1B21\u1B22\x07\xA4\x02\x02\u1B22\u1B24\x03\x02\x02\x02\u1B23" +
		"\u1B1D\x03\x02\x02\x02\u1B23\u1B24\x03\x02\x02\x02\u1B24\u1B26\x03\x02" +
		"\x02\x02\u1B25\u1B10\x03\x02\x02\x02\u1B25\u1B19\x03\x02\x02\x02\u1B26" +
		"\u0215\x03\x02\x02\x02\u1B27\u1B2C\x07\u01AC\x02\x02\u1B28\u1B2C\x05\u01AE" +
		"\xD8\x02\u1B29\u1B2C\x07r\x02\x02\u1B2A\u1B2C\x07\u0113\x02\x02\u1B2B" +
		"\u1B27\x03\x02\x02\x02\u1B2B\u1B28\x03\x02\x02\x02\u1B2B\u1B29\x03\x02" +
		"\x02\x02\u1B2B\u1B2A\x03\x02\x02\x02\u1B2C\u0217\x03\x02\x02\x02\u1B2D" +
		"\u1B2E\x07\u01AF\x02\x02\u1B2E\u0219\x03\x02\x02\x02\u1B2F\u1B33\x07\xD1" +
		"\x02\x02\u1B30\u1B32\x05\x06\x04\x02\u1B31\u1B30\x03\x02\x02\x02\u1B32" +
		"\u1B35\x03\x02\x02\x02\u1B33\u1B31\x03\x02\x02\x02\u1B33\u1B34\x03\x02" +
		"\x02\x02\u1B34\u1B36\x03\x02\x02\x02\u1B35\u1B33\x03\x02\x02\x02\u1B36" +
		"\u1B3A\x07\u01A9\x02\x02\u1B37\u1B39\x05\x06\x04\x02\u1B38\u1B37\x03\x02" +
		"\x02\x02\u1B39\u1B3C\x03\x02\x02\x02\u1B3A\u1B38\x03\x02\x02\x02\u1B3A" +
		"\u1B3B\x03\x02\x02\x02\u1B3B\u1B74\x03\x02\x02\x02\u1B3C\u1B3A\x03\x02" +
		"\x02\x02\u1B3D\u1B41\x05\u0234\u011B\x02\u1B3E\u1B40\x05\x06\x04\x02\u1B3F" +
		"\u1B3E\x03\x02\x02\x02\u1B40\u1B43\x03\x02\x02\x02\u1B41\u1B3F\x03\x02" +
		"\x02\x02\u1B41\u1B42\x03\x02\x02\x02\u1B42\u1B45\x03\x02\x02\x02\u1B43" +
		"\u1B41\x03\x02\x02\x02\u1B44\u1B3D\x03\x02\x02\x02\u1B45\u1B48\x03\x02" +
		"\x02\x02\u1B46\u1B44\x03\x02\x02\x02\u1B46\u1B47\x03\x02\x02\x02\u1B47" +
		"\u1B52\x03\x02\x02\x02\u1B48\u1B46\x03\x02\x02\x02\u1B49\u1B4D\x05\u0230" +
		"\u0119\x02\u1B4A\u1B4C\x05\x06\x04\x02\u1B4B\u1B4A\x03\x02\x02\x02\u1B4C" +
		"\u1B4F\x03\x02\x02\x02\u1B4D\u1B4B\x03\x02\x02\x02\u1B4D\u1B4E\x03\x02" +
		"\x02\x02\u1B4E\u1B51\x03\x02\x02\x02\u1B4F\u1B4D\x03\x02\x02\x02\u1B50" +
		"\u1B49\x03\x02\x02\x02\u1B51\u1B54\x03\x02\x02\x02\u1B52\u1B50\x03\x02" +
		"\x02\x02\u1B52\u1B53\x03\x02\x02\x02\u1B53\u1B5E\x03\x02\x02\x02\u1B54" +
		"\u1B52\x03\x02\x02\x02\u1B55\u1B59\x05\u0224\u0113\x02\u1B56\u1B58\x05" +
		"\x06\x04\x02\u1B57\u1B56\x03\x02\x02\x02\u1B58\u1B5B\x03\x02\x02\x02\u1B59" +
		"\u1B57\x03\x02\x02\x02\u1B59\u1B5A\x03\x02\x02\x02\u1B5A\u1B5D\x03\x02" +
		"\x02\x02\u1B5B\u1B59\x03\x02\x02\x02\u1B5C\u1B55\x03\x02\x02\x02\u1B5D" +
		"\u1B60\x03\x02\x02\x02\u1B5E\u1B5C\x03\x02\x02\x02\u1B5E\u1B5F\x03\x02" +
		"\x02\x02\u1B5F\u1B6A\x03\x02\x02\x02\u1B60\u1B5E\x03\x02\x02\x02\u1B61" +
		"\u1B65\x05\u021C\u010F\x02\u1B62\u1B64\x05\x06\x04\x02\u1B63\u1B62\x03" +
		"\x02\x02\x02\u1B64\u1B67\x03\x02\x02\x02\u1B65\u1B63\x03\x02\x02\x02\u1B65" +
		"\u1B66\x03\x02\x02\x02\u1B66\u1B69\x03\x02\x02\x02\u1B67\u1B65\x03\x02" +
		"\x02\x02\u1B68\u1B61\x03\x02\x02\x02\u1B69\u1B6C\x03\x02\x02\x02\u1B6A" +
		"\u1B68\x03\x02\x02\x02\u1B6A\u1B6B\x03\x02\x02\x02\u1B6B\u1B6D\x03\x02" +
		"\x02\x02\u1B6C\u1B6A\x03\x02\x02\x02\u1B6D\u1B71\x07\u01A9\x02\x02\u1B6E" +
		"\u1B70\x05\x06\x04\x02\u1B6F\u1B6E\x03\x02\x02\x02\u1B70\u1B73\x03\x02" +
		"\x02\x02\u1B71\u1B6F\x03\x02\x02\x02\u1B71\u1B72\x03\x02\x02\x02\u1B72" +
		"\u1B75\x03\x02\x02\x02\u1B73\u1B71\x03\x02\x02\x02\u1B74\u1B46\x03\x02" +
		"\x02\x02\u1B74\u1B75\x03\x02\x02\x02\u1B75\u021B\x03\x02\x02\x02\u1B76" +
		"\u1B78\x07\xED\x02\x02\u1B77\u1B79\x05\x06\x04\x02\u1B78\u1B77\x03\x02" +
		"\x02\x02\u1B79\u1B7A\x03\x02\x02\x02\u1B7A\u1B78\x03\x02\x02\x02\u1B7A" +
		"\u1B7B\x03\x02\x02\x02\u1B7B\u1B7C\x03\x02\x02\x02\u1B7C\u1B7E\x07\xA4" +
		"\x02\x02\u1B7D\u1B7F\x05\x06\x04\x02\u1B7E\u1B7D\x03\x02\x02\x02\u1B7F" +
		"\u1B80\x03\x02\x02\x02\u1B80\u1B7E\x03\x02\x02\x02\u1B80\u1B81\x03\x02" +
		"\x02\x02\u1B81\u1B88\x03\x02\x02\x02\u1B82\u1B84\x07\u0162\x02\x02\u1B83" +
		"\u1B85\x05\x06\x04\x02\u1B84\u1B83\x03\x02\x02\x02\u1B85\u1B86\x03\x02" +
		"\x02\x02\u1B86\u1B84\x03\x02\x02\x02\u1B86\u1B87\x03\x02\x02\x02\u1B87" +
		"\u1B89\x03\x02\x02\x02\u1B88\u1B82\x03\x02\x02\x02\u1B88\u1B89\x03\x02" +
		"\x02\x02\u1B89\u1B90\x03\x02\x02\x02\u1B8A\u1B8C\x07T\x02\x02\u1B8B\u1B8D" +
		"\x05\x06\x04\x02\u1B8C\u1B8B\x03\x02\x02\x02\u1B8D\u1B8E\x03\x02\x02\x02" +
		"\u1B8E\u1B8C\x03\x02\x02\x02\u1B8E\u1B8F\x03\x02\x02\x02\u1B8F\u1B91\x03" +
		"\x02\x02\x02\u1B90\u1B8A\x03\x02\x02\x02\u1B90\u1B91\x03\x02\x02\x02\u1B91" +
		"\u1B99\x03\x02\x02\x02\u1B92\u1B96\x05\u021E\u0110\x02\u1B93\u1B95\x05" +
		"\x06\x04\x02\u1B94\u1B93\x03\x02\x02\x02\u1B95\u1B98\x03\x02\x02\x02\u1B96" +
		"\u1B94\x03\x02\x02\x02\u1B96\u1B97\x03\x02\x02\x02\u1B97\u1B9A\x03\x02" +
		"\x02\x02\u1B98\u1B96\x03\x02\x02\x02\u1B99\u1B92\x03\x02\x02\x02\u1B9A" +
		"\u1B9B\x03\x02\x02\x02\u1B9B\u1B99\x03\x02\x02\x02\u1B9B\u1B9C\x03\x02" +
		"\x02\x02\u1B9C\u021D\x03\x02\x02\x02\u1B9D\u1BAB\x05\u0220\u0111\x02\u1B9E" +
		"\u1BA0\x05\x06\x04\x02\u1B9F\u1B9E\x03\x02\x02\x02\u1BA0\u1BA1\x03\x02" +
		"\x02\x02\u1BA1\u1B9F\x03\x02\x02\x02\u1BA1\u1BA2\x03\x02\x02\x02\u1BA2" +
		"\u1BA3\x03\x02\x02\x02\u1BA3\u1BA5\x07\u0110\x02\x02\u1BA4\u1BA6\x05\x06" +
		"\x04\x02\u1BA5\u1BA4\x03\x02\x02\x02\u1BA6\u1BA7\x03\x02\x02\x02\u1BA7" +
		"\u1BA5\x03\x02\x02\x02\u1BA7\u1BA8\x03\x02\x02\x02\u1BA8\u1BA9\x03\x02" +
		"\x02\x02\u1BA9\u1BAA\x05\u0222\u0112\x02\u1BAA\u1BAC\x03\x02\x02\x02\u1BAB" +
		"\u1B9F\x03\x02\x02\x02\u1BAB\u1BAC\x03\x02\x02\x02\u1BAC\u021F\x03\x02" +
		"\x02\x02\u1BAD\u1BAE\x07\u01AF\x02\x02\u1BAE\u0221\x03\x02\x02\x02\u1BAF" +
		"\u1BB0\x07\u01AD\x02\x02\u1BB0\u0223\x03\x02\x02\x02\u1BB1\u1BB3\x07\u012C" +
		"\x02\x02\u1BB2\u1BB4\x05\x06\x04\x02\u1BB3\u1BB2\x03\x02\x02\x02\u1BB4" +
		"\u1BB5\x03\x02\x02\x02\u1BB5\u1BB3\x03\x02\x02\x02\u1BB5\u1BB6\x03\x02" +
		"\x02\x02\u1BB6\u1BC3\x03\x02\x02\x02\u1BB7\u1BB9\x07\xFB\x02\x02\u1BB8" +
		"\u1BBA\x05\x06\x04\x02\u1BB9\u1BB8\x03\x02\x02\x02\u1BBA\u1BBB\x03\x02" +
		"\x02\x02\u1BBB\u1BB9\x03\x02\x02\x02\u1BBB\u1BBC\x03\x02\x02\x02\u1BBC" +
		"\u1BBD\x03\x02\x02\x02\u1BBD\u1BBF\x05\u0218\u010D\x02\u1BBE\u1BC0\x05" +
		"\x06\x04\x02\u1BBF\u1BBE\x03\x02\x02\x02\u1BC0\u1BC1\x03\x02\x02\x02\u1BC1" +
		"\u1BBF\x03\x02\x02\x02\u1BC1\u1BC2\x03\x02\x02\x02\u1BC2\u1BC4\x03\x02" +
		"\x02\x02\u1BC3\u1BB7\x03\x02\x02\x02\u1BC3\u1BC4\x03\x02\x02\x02\u1BC4" +
		"\u1BCB\x03\x02\x02\x02\u1BC5\u1BC7\x07\x9B\x02\x02\u1BC6\u1BC8\x05\x06" +
		"\x04\x02\u1BC7\u1BC6\x03\x02\x02\x02\u1BC8\u1BC9\x03\x02\x02\x02\u1BC9" +
		"\u1BC7\x03\x02\x02\x02\u1BC9\u1BCA\x03\x02\x02\x02\u1BCA\u1BCC\x03\x02" +
		"\x02\x02\u1BCB\u1BC5\x03\x02\x02\x02\u1BCB\u1BCC\x03\x02\x02\x02\u1BCC" +
		"\u1BCD\x03\x02\x02\x02\u1BCD\u1BCE\x05\u0226\u0114\x02\u1BCE\u0225\x03" +
		"\x02\x02\x02\u1BCF\u1BD1\x05\u022C\u0117\x02\u1BD0\u1BD2\x05\x06\x04\x02" +
		"\u1BD1\u1BD0\x03\x02\x02\x02\u1BD2\u1BD3\x03\x02\x02\x02\u1BD3\u1BD1\x03" +
		"\x02\x02\x02\u1BD3\u1BD4\x03\x02\x02\x02\u1BD4\u1BDB\x03\x02\x02\x02\u1BD5" +
		"\u1BD7\x07\xF8\x02\x02\u1BD6\u1BD8\x05\x06\x04\x02\u1BD7\u1BD6\x03\x02" +
		"\x02\x02\u1BD8\u1BD9\x03\x02\x02\x02\u1BD9\u1BD7\x03\x02\x02\x02\u1BD9" +
		"\u1BDA\x03\x02\x02\x02\u1BDA\u1BDC\x03\x02\x02\x02\u1BDB\u1BD5\x03\x02" +
		"\x02\x02\u1BDB\u1BDC\x03\x02\x02\x02\u1BDC\u1BDD\x03\x02\x02\x02\u1BDD" +
		"\u1BDE\x05\u0218\u010D\x02\u1BDE\u1BE9\x03\x02\x02\x02\u1BDF\u1BE1\x05" +
		"\u0228\u0115\x02\u1BE0\u1BE2\x05\x06\x04\x02\u1BE1\u1BE0\x03\x02\x02\x02" +
		"\u1BE2\u1BE3\x03\x02\x02\x02\u1BE3\u1BE1\x03\x02\x02\x02\u1BE3\u1BE4\x03" +
		"\x02\x02\x02\u1BE4\u1BE5\x03\x02\x02\x02\u1BE5\u1BE6\x07;\x02\x02\u1BE6" +
		"\u1BE9\x03\x02\x02\x02\u1BE7\u1BE9\x05\u022A\u0116\x02\u1BE8\u1BCF\x03" +
		"\x02\x02\x02\u1BE8\u1BDF\x03\x02\x02\x02\u1BE8\u1BE7\x03\x02\x02\x02\u1BE9" +
		"\u0227\x03\x02\x02\x02\u1BEA\u1BEB\x07\u01AD\x02\x02\u1BEB\u0229\x03\x02" +
		"\x02\x02\u1BEC\u1BED\x07\u01AF\x02\x02\u1BED\u022B\x03\x02\x02\x02\u1BEE" +
		"\u1BF0\x07|\x02\x02\u1BEF\u1BF1\x05\x06\x04\x02\u1BF0\u1BEF\x03\x02\x02" +
		"\x02\u1BF1\u1BF2\x03\x02\x02\x02\u1BF2\u1BF0\x03\x02\x02\x02\u1BF2\u1BF3" +
		"\x03\x02\x02\x02\u1BF3\u1BFA\x03\x02\x02\x02\u1BF4\u1BF6\x07\xF8\x02\x02" +
		"\u1BF5\u1BF7\x05\x06\x04\x02\u1BF6\u1BF5\x03\x02\x02\x02\u1BF7\u1BF8\x03" +
		"\x02\x02\x02\u1BF8\u1BF6\x03\x02\x02\x02\u1BF8\u1BF9\x03\x02\x02\x02\u1BF9" +
		"\u1BFB\x03\x02\x02\x02\u1BFA\u1BF4\x03\x02\x02\x02\u1BFA\u1BFB\x03\x02" +
		"\x02\x02\u1BFB\u1BFD\x03\x02\x02\x02\u1BFC\u1BEE\x03\x02\x02\x02\u1BFC" +
		"\u1BFD\x03\x02\x02\x02\u1BFD\u1BFE\x03\x02\x02\x02\u1BFE\u1C08\t\x06\x02" +
		"\x02\u1BFF\u1C01\x05\u022E\u0118\x02\u1C00\u1C02\x05\x06\x04\x02\u1C01" +
		"\u1C00\x03\x02\x02\x02\u1C02\u1C03\x03\x02\x02\x02\u1C03\u1C01\x03\x02" +
		"\x02\x02\u1C03\u1C04\x03\x02\x02\x02\u1C04\u1C05\x03\x02\x02\x02\u1C05" +
		"\u1C06\x07\u011F\x02\x02\u1C06\u1C08\x03\x02\x02\x02\u1C07\u1BFC\x03\x02" +
		"\x02\x02\u1C07\u1BFF\x03\x02\x02\x02\u1C08\u022D\x03\x02\x02\x02\u1C09" +
		"\u1C0A\x07\u01AD\x02\x02\u1C0A\u022F\x03\x02\x02\x02\u1C0B\u1C0D\x07\u0137" +
		"\x02\x02\u1C0C\u1C0E\x05\x06\x04\x02\u1C0D\u1C0C\x03\x02\x02\x02\u1C0E" +
		"\u1C0F\x03\x02\x02\x02\u1C0F\u1C0D\x03\x02\x02\x02\u1C0F\u1C10\x03\x02" +
		"\x02\x02\u1C10\u1C17\x03\x02\x02\x02\u1C11\u1C13\t$\x02\x02\u1C12\u1C14" +
		"\x05\x06\x04\x02\u1C13\u1C12\x03\x02\x02\x02\u1C14\u1C15\x03\x02\x02\x02" +
		"\u1C15\u1C13\x03\x02\x02\x02\u1C15\u1C16\x03\x02\x02\x02\u1C16\u1C18\x03" +
		"\x02\x02\x02\u1C17\u1C11\x03\x02\x02\x02\u1C17\u1C18\x03\x02\x02\x02\u1C18" +
		"\u1C1F\x03\x02\x02\x02\u1C19\u1C1B\x07\x16\x02\x02\u1C1A\u1C1C\x05\x06" +
		"\x04\x02\u1C1B\u1C1A\x03\x02\x02\x02\u1C1C\u1C1D\x03\x02\x02\x02\u1C1D" +
		"\u1C1B\x03\x02\x02\x02\u1C1D\u1C1E\x03\x02\x02\x02\u1C1E\u1C20\x03\x02" +
		"\x02\x02\u1C1F\u1C19\x03\x02\x02\x02\u1C1F\u1C20\x03\x02\x02\x02\u1C20" +
		"\u1C27\x03\x02\x02\x02\u1C21\u1C23\x07\xAF\x02\x02\u1C22\u1C24\x05\x06" +
		"\x04\x02\u1C23\u1C22\x03\x02\x02\x02\u1C24\u1C25\x03\x02\x02\x02\u1C25" +
		"\u1C23\x03\x02\x02\x02\u1C25\u1C26\x03\x02\x02\x02\u1C26\u1C28\x03\x02" +
		"\x02\x02\u1C27\u1C21\x03\x02\x02\x02\u1C27\u1C28\x03\x02\x02\x02\u1C28" +
		"\u1C29\x03\x02\x02\x02\u1C29\u1C31\x05\u0232\u011A\x02\u1C2A\u1C2C\x05" +
		"\x06\x04\x02\u1C2B\u1C2A\x03\x02\x02\x02\u1C2C\u1C2D\x03\x02\x02\x02\u1C2D" +
		"\u1C2B\x03\x02\x02\x02\u1C2D\u1C2E\x03\x02\x02\x02\u1C2E\u1C2F\x03\x02" +
		"\x02\x02\u1C2F\u1C30\x05\u0232\u011A\x02\u1C30\u1C32\x03\x02\x02\x02\u1C31" +
		"\u1C2B\x03\x02\x02\x02\u1C32\u1C33\x03\x02\x02\x02\u1C33\u1C31\x03\x02" +
		"\x02\x02\u1C33\u1C34\x03\x02\x02\x02\u1C34\u0231\x03\x02\x02\x02\u1C35" +
		"\u1C36\x07\u01AF\x02\x02\u1C36\u0233\x03\x02\x02\x02\u1C37\u1C39\x07\x14" +
		"\x02\x02\u1C38\u1C3A\x05\x06\x04\x02\u1C39\u1C38\x03\x02\x02\x02\u1C3A" +
		"\u1C3B\x03\x02\x02\x02\u1C3B\u1C39\x03\x02\x02\x02\u1C3B\u1C3C\x03\x02" +
		"\x02\x02\u1C3C\u1C43\x03\x02\x02\x02\u1C3D\u1C3F\x05\u0236\u011C\x02\u1C3E" +
		"\u1C40\x05\x06\x04\x02\u1C3F\u1C3E\x03\x02\x02\x02\u1C40\u1C41\x03\x02" +
		"\x02\x02\u1C41\u1C3F\x03\x02\x02\x02\u1C41\u1C42\x03\x02\x02\x02\u1C42" +
		"\u1C44\x03\x02\x02\x02\u1C43\u1C3D\x03\x02\x02\x02\u1C44\u1C45\x03\x02" +
		"\x02\x02\u1C45\u1C43\x03\x02\x02\x02\u1C45\u1C46\x03\x02\x02\x02\u1C46" +
		"\u1C47\x03\x02\x02\x02\u1C47\u1C49\x07\xFB\x02\x02\u1C48\u1C4A\x05\x06" +
		"\x04\x02\u1C49\u1C48\x03\x02\x02\x02\u1C4A\u1C4B\x03\x02\x02\x02\u1C4B" +
		"\u1C49\x03\x02\x02\x02\u1C4B\u1C4C\x03\x02\x02\x02\u1C4C\u1C54\x03\x02" +
		"\x02\x02\u1C4D\u1C51\x05\u0218\u010D\x02\u1C4E\u1C50\x05\x06\x04\x02\u1C4F" +
		"\u1C4E\x03\x02\x02\x02\u1C50\u1C53\x03\x02\x02\x02\u1C51\u1C4F\x03\x02" +
		"\x02\x02\u1C51\u1C52\x03\x02\x02\x02\u1C52\u1C55\x03\x02\x02\x02\u1C53" +
		"\u1C51\x03\x02\x02\x02\u1C54\u1C4D\x03\x02\x02\x02\u1C55\u1C56\x03\x02" +
		"\x02\x02\u1C56\u1C54\x03\x02\x02\x02\u1C56\u1C57\x03\x02\x02\x02\u1C57" +
		"\u0235\x03\x02\x02\x02\u1C58\u1C7E\x07l\x02\x02\u1C59\u1C5B\x07\xA0\x02" +
		"\x02\u1C5A\u1C5C\x05\x06\x04\x02\u1C5B\u1C5A\x03\x02\x02\x02\u1C5C\u1C5D" +
		"\x03\x02\x02\x02\u1C5D\u1C5B\x03\x02\x02\x02\u1C5D\u1C5E\x03\x02\x02\x02" +
		"\u1C5E\u1C5F\x03\x02\x02\x02\u1C5F\u1C60\x05\u023C\u011F\x02\u1C60\u1C7E" +
		"\x03\x02\x02\x02\u1C61\u1C7E\x07\xA8\x02\x02\u1C62\u1C7E\x07\xE2\x02\x02" +
		"\u1C63\u1C7E\x07\xE7\x02\x02\u1C64\u1C66\t%\x02\x02\u1C65\u1C67\x05\x06" +
		"\x04\x02\u1C66\u1C65\x03\x02\x02\x02\u1C67\u1C68\x03\x02\x02\x02\u1C68" +
		"\u1C66\x03\x02\x02\x02\u1C68\u1C69\x03\x02\x02\x02\u1C69\u1C6B\x03\x02" +
		"\x02\x02\u1C6A\u1C64\x03\x02\x02\x02\u1C6A\u1C6B\x03\x02\x02\x02\u1C6B" +
		"\u1C6C\x03\x02\x02\x02\u1C6C\u1C6E\x07\u0112\x02\x02\u1C6D\u1C6F\x05\x06" +
		"\x04\x02\u1C6E\u1C6D\x03\x02\x02\x02\u1C6F\u1C70\x03\x02\x02\x02\u1C70" +
		"\u1C6E\x03\x02\x02\x02\u1C70\u1C71\x03\x02\x02\x02\u1C71\u1C72\x03\x02" +
		"\x02\x02\u1C72\u1C73\x05\u023A\u011E\x02\u1C73\u1C7E\x03\x02\x02\x02\u1C74" +
		"\u1C7E\x07\u0114\x02\x02\u1C75\u1C77\x07\u017E\x02\x02\u1C76\u1C78\x05" +
		"\x06\x04\x02\u1C77\u1C76\x03\x02\x02\x02\u1C78\u1C79\x03\x02\x02\x02\u1C79" +
		"\u1C77\x03\x02\x02\x02\u1C79\u1C7A\x03\x02\x02\x02\u1C7A\u1C7B\x03\x02" +
		"\x02\x02\u1C7B\u1C7C\x05\u0238\u011D\x02\u1C7C\u1C7E\x03\x02\x02\x02\u1C7D" +
		"\u1C58\x03\x02\x02\x02\u1C7D\u1C59\x03\x02\x02\x02\u1C7D\u1C61\x03\x02" +
		"\x02\x02\u1C7D\u1C62\x03\x02\x02\x02\u1C7D\u1C63\x03\x02\x02\x02\u1C7D" +
		"\u1C6A\x03\x02\x02\x02\u1C7D\u1C74\x03\x02\x02\x02\u1C7D\u1C75\x03\x02" +
		"\x02\x02\u1C7E\u0237\x03\x02\x02\x02\u1C7F\u1C80\x07\u01AD\x02\x02\u1C80" +
		"\u0239\x03\x02\x02\x02\u1C81\u1C82\x07\u01AD\x02\x02\u1C82\u023B\x03\x02" +
		"\x02\x02\u1C83\u1C84\x07\u01AD\x02\x02\u1C84\u023D\x03\x02\x02\x02\u1C85" +
		"\u1C86\b\u0120\x01\x02\u1C86\u1C8A\x07\u01A3\x02\x02\u1C87\u1C89\x05\b" +
		"\x05\x02\u1C88\u1C87\x03\x02\x02\x02\u1C89\u1C8C\x03\x02\x02\x02\u1C8A" +
		"\u1C88\x03\x02\x02\x02\u1C8A\u1C8B\x03\x02\x02\x02\u1C8B\u1C8D\x03\x02" +
		"\x02\x02\u1C8C\u1C8A\x03\x02\x02\x02\u1C8D\u1C91\x05\u023E\u0120\x02\u1C8E" +
		"\u1C90\x05\b\x05\x02\u1C8F\u1C8E\x03\x02\x02\x02\u1C90\u1C93\x03\x02\x02" +
		"\x02\u1C91\u1C8F\x03\x02\x02\x02\u1C91\u1C92\x03\x02\x02\x02\u1C92\u1C94" +
		"\x03\x02\x02\x02\u1C93\u1C91\x03\x02\x02\x02\u1C94\u1C95\x07\u01A4\x02" +
		"\x02\u1C95\u1CA2\x03\x02\x02\x02\u1C96\u1C9A\x05\u0244\u0123\x02\u1C97" +
		"\u1C99\x05\b\x05\x02\u1C98\u1C97\x03\x02\x02\x02\u1C99\u1C9C\x03\x02\x02" +
		"\x02\u1C9A\u1C98\x03\x02\x02\x02\u1C9A\u1C9B\x03\x02\x02\x02\u1C9B\u1C9D" +
		"\x03\x02\x02\x02\u1C9C\u1C9A\x03\x02\x02\x02\u1C9D\u1C9E\x05\u023E\u0120" +
		"\x05\u1C9E\u1CA2\x03\x02\x02\x02\u1C9F\u1CA2\x05\u025A\u012E\x02\u1CA0" +
		"\u1CA2\x05\u0240\u0121\x02\u1CA1\u1C85\x03\x02\x02\x02\u1CA1\u1C96\x03" +
		"\x02\x02\x02\u1CA1\u1C9F\x03\x02\x02\x02\u1CA1\u1CA0\x03\x02\x02\x02\u1CA2" +
		"\u1CB5\x03\x02\x02\x02\u1CA3\u1CA7\f\x06\x02\x02\u1CA4\u1CA6\x05\b\x05" +
		"\x02\u1CA5\u1CA4\x03\x02\x02\x02\u1CA6\u1CA9\x03\x02\x02\x02\u1CA7\u1CA5" +
		"\x03\x02\x02\x02\u1CA7\u1CA8\x03\x02\x02\x02\u1CA8\u1CAA\x03\x02\x02\x02" +
		"\u1CA9\u1CA7\x03\x02\x02\x02\u1CAA\u1CAE\x05\u0242\u0122\x02\u1CAB\u1CAD" +
		"\x05\b\x05\x02\u1CAC\u1CAB\x03\x02\x02\x02\u1CAD\u1CB0\x03\x02\x02\x02" +
		"\u1CAE\u1CAC\x03\x02\x02\x02\u1CAE\u1CAF\x03\x02\x02\x02\u1CAF\u1CB1\x03" +
		"\x02\x02\x02\u1CB0\u1CAE\x03\x02\x02\x02\u1CB1\u1CB2\x05\u023E\u0120\x07" +
		"\u1CB2\u1CB4\x03\x02\x02\x02\u1CB3\u1CA3\x03\x02\x02\x02\u1CB4\u1CB7\x03" +
		"\x02\x02\x02\u1CB5\u1CB3\x03\x02\x02\x02\u1CB5\u1CB6\x03\x02\x02\x02\u1CB6" +
		"\u023F\x03\x02\x02\x02\u1CB7\u1CB5\x03\x02\x02\x02\u1CB8\u1CBC\x07\u01AD" +
		"\x02\x02\u1CB9\u1CBC\x07\u01AC\x02\x02\u1CBA\u1CBC\x05\x04\x03\x02\u1CBB" +
		"\u1CB8\x03\x02\x02\x02\u1CBB\u1CB9\x03\x02\x02\x02\u1CBB\u1CBA\x03\x02" +
		"\x02\x02\u1CBC\u0241\x03\x02\x02\x02\u1CBD\u1CC4\x07\u0197\x02\x02\u1CBE" +
		"\u1CC4\x07\u0198\x02\x02\u1CBF\u1CC4\x07\u0199\x02\x02\u1CC0\u1CC4\x07" +
		"\u019A\x02\x02\u1CC1\u1CC2\x07\u0199\x02\x02\u1CC2\u1CC4\x07\u0199\x02" +
		"\x02\u1CC3\u1CBD\x03\x02\x02\x02\u1CC3\u1CBE\x03\x02\x02\x02\u1CC3\u1CBF" +
		"\x03\x02\x02\x02\u1CC3\u1CC0\x03\x02\x02\x02\u1CC3\u1CC1\x03\x02\x02\x02" +
		"\u1CC4\u0243\x03\x02\x02\x02\u1CC5\u1CC6\t&\x02\x02\u1CC6\u0245\x03\x02" +
		"\x02\x02\u1CC7\u1CC8\b\u0124\x01\x02\u1CC8\u1CCC\x07\u01A3\x02\x02\u1CC9" +
		"\u1CCB\x05\b\x05\x02\u1CCA\u1CC9\x03\x02\x02\x02\u1CCB\u1CCE\x03\x02\x02" +
		"\x02\u1CCC\u1CCA\x03\x02\x02\x02\u1CCC\u1CCD\x03\x02\x02\x02\u1CCD\u1CCF" +
		"\x03\x02\x02\x02\u1CCE\u1CCC\x03\x02\x02\x02\u1CCF\u1CD3\x05\u0246\u0124" +
		"\x02\u1CD0\u1CD2\x05\b\x05\x02\u1CD1\u1CD0\x03\x02\x02\x02\u1CD2\u1CD5" +
		"\x03\x02\x02\x02\u1CD3\u1CD1\x03\x02\x02\x02\u1CD3\u1CD4\x03\x02\x02\x02" +
		"\u1CD4\u1CD6\x03\x02\x02\x02\u1CD5\u1CD3\x03\x02\x02\x02\u1CD6\u1CD7\x07" +
		"\u01A4\x02\x02\u1CD7\u1CE5\x03\x02\x02\x02\u1CD8\u1CDC\x07\xF3\x02\x02" +
		"\u1CD9\u1CDB\x05\b\x05\x02\u1CDA\u1CD9\x03\x02\x02\x02\u1CDB\u1CDE\x03" +
		"\x02\x02\x02\u1CDC\u1CDA\x03\x02\x02\x02\u1CDC\u1CDD\x03\x02\x02\x02\u1CDD" +
		"\u1CDF\x03\x02\x02\x02\u1CDE\u1CDC\x03\x02\x02\x02\u1CDF\u1CE5\x05\u0246" +
		"\u0124\x07\u1CE0\u1CE5\x05\u0252\u012A\x02\u1CE1\u1CE5\x05\u024A\u0126" +
		"\x02\u1CE2\u1CE5\x05\u024E\u0128\x02\u1CE3\u1CE5\x05\u0248\u0125\x02\u1CE4" +
		"\u1CC7\x03\x02\x02\x02\u1CE4\u1CD8\x03\x02\x02\x02\u1CE4\u1CE0\x03\x02" +
		"\x02\x02\u1CE4\u1CE1\x03\x02\x02\x02\u1CE4\u1CE2\x03\x02\x02\x02\u1CE4" +
		"\u1CE3\x03\x02\x02\x02\u1CE5\u1CF8";
	private static readonly _serializedATNSegment14: string =
		"\x03\x02\x02\x02\u1CE6\u1CEA\f\b\x02\x02\u1CE7\u1CE9\x05\b\x05\x02\u1CE8" +
		"\u1CE7\x03\x02\x02\x02\u1CE9\u1CEC\x03\x02\x02\x02\u1CEA\u1CE8\x03\x02" +
		"\x02\x02\u1CEA\u1CEB\x03\x02\x02\x02\u1CEB\u1CED\x03\x02\x02\x02\u1CEC" +
		"\u1CEA\x03\x02\x02\x02\u1CED\u1CF1\x05\u024C\u0127\x02\u1CEE\u1CF0\x05" +
		"\b\x05\x02\u1CEF\u1CEE\x03\x02\x02\x02\u1CF0\u1CF3\x03\x02\x02\x02\u1CF1" +
		"\u1CEF\x03\x02\x02\x02\u1CF1\u1CF2\x03\x02\x02\x02\u1CF2\u1CF4\x03\x02" +
		"\x02\x02\u1CF3\u1CF1\x03\x02\x02\x02\u1CF4\u1CF5\x05\u0246\u0124\t\u1CF5" +
		"\u1CF7\x03\x02\x02\x02\u1CF6\u1CE6\x03\x02\x02\x02\u1CF7\u1CFA\x03\x02" +
		"\x02\x02\u1CF8\u1CF6\x03\x02\x02\x02\u1CF8\u1CF9\x03\x02\x02\x02\u1CF9" +
		"\u0247\x03\x02\x02\x02\u1CFA\u1CF8\x03\x02\x02\x02\u1CFB\u1D03\x05\u01AE" +
		"\xD8\x02\u1CFC\u1CFE\x05\b\x05\x02\u1CFD\u1CFC\x03\x02\x02\x02\u1CFE\u1CFF" +
		"\x03\x02\x02\x02\u1CFF\u1CFD\x03\x02\x02\x02\u1CFF\u1D00\x03\x02\x02\x02" +
		"\u1D00\u1D01\x03\x02\x02\x02\u1D01\u1D02\x07\xCF\x02\x02\u1D02\u1D04\x03" +
		"\x02\x02\x02\u1D03\u1CFD\x03\x02\x02\x02\u1D03\u1D04\x03\x02\x02\x02\u1D04" +
		"\u1D06\x03\x02\x02\x02\u1D05\u1D07\x05\b\x05\x02\u1D06\u1D05\x03\x02\x02" +
		"\x02\u1D07\u1D08\x03\x02\x02\x02\u1D08\u1D06\x03\x02\x02\x02\u1D08\u1D09" +
		"\x03\x02\x02\x02\u1D09\u1D0A\x03\x02\x02\x02\u1D0A\u1D0B\t\'\x02\x02\u1D0B" +
		"\u0249\x03\x02\x02\x02\u1D0C\u1D0D\b\u0126\x01\x02\u1D0D\u1D11\x05\u023E" +
		"\u0120\x02\u1D0E\u1D10\x05\b\x05\x02\u1D0F\u1D0E\x03\x02\x02\x02\u1D10" +
		"\u1D13\x03\x02\x02\x02\u1D11\u1D0F\x03\x02\x02\x02\u1D11\u1D12\x03\x02" +
		"\x02\x02\u1D12\u1D14\x03\x02\x02\x02\u1D13\u1D11\x03\x02\x02\x02\u1D14" +
		"\u1D18\x05\u0256\u012C\x02\u1D15\u1D17\x05\b\x05\x02\u1D16\u1D15\x03\x02" +
		"\x02\x02\u1D17\u1D1A\x03\x02\x02\x02\u1D18\u1D16\x03\x02\x02\x02\u1D18" +
		"\u1D19\x03\x02\x02\x02\u1D19\u1D1B\x03\x02\x02\x02\u1D1A\u1D18\x03\x02" +
		"\x02\x02\u1D1B\u1D1C\x05\u023E\u0120\x02\u1D1C\u1D20\x03\x02\x02\x02\u1D1D" +
		"\u1D20\x05\u0252\u012A\x02\u1D1E\u1D20\x05\u01AE\xD8\x02\u1D1F\u1D0C\x03" +
		"\x02\x02\x02\u1D1F\u1D1D\x03\x02\x02\x02\u1D1F\u1D1E\x03\x02\x02\x02\u1D20" +
		"\u1D39\x03\x02\x02\x02\u1D21\u1D23\f\x03\x02\x02\u1D22\u1D24\x05\b\x05" +
		"\x02\u1D23\u1D22\x03\x02\x02\x02\u1D24\u1D25\x03\x02\x02\x02\u1D25\u1D23" +
		"\x03\x02\x02\x02\u1D25\u1D26\x03\x02\x02\x02\u1D26\u1D27\x03\x02\x02\x02" +
		"\u1D27\u1D2B\x05\u024C\u0127\x02\u1D28\u1D2A\x05\b\x05\x02\u1D29\u1D28" +
		"\x03\x02\x02\x02\u1D2A\u1D2D\x03\x02\x02\x02\u1D2B\u1D29\x03\x02\x02\x02" +
		"\u1D2B\u1D2C\x03\x02\x02\x02\u1D2C\u1D2E\x03\x02\x02\x02\u1D2D\u1D2B\x03" +
		"\x02\x02\x02\u1D2E\u1D32\x05\u0256\u012C\x02\u1D2F\u1D31\x05\b\x05\x02" +
		"\u1D30\u1D2F\x03\x02\x02\x02\u1D31\u1D34\x03\x02\x02\x02\u1D32\u1D30\x03" +
		"\x02\x02\x02\u1D32\u1D33\x03\x02\x02\x02\u1D33\u1D35\x03\x02\x02\x02\u1D34" +
		"\u1D32\x03\x02\x02\x02\u1D35\u1D36\x05\u023E\u0120\x02\u1D36\u1D38\x03" +
		"\x02\x02\x02\u1D37\u1D21\x03\x02\x02\x02\u1D38\u1D3B\x03\x02\x02\x02\u1D39" +
		"\u1D37\x03\x02\x02\x02\u1D39\u1D3A\x03\x02\x02\x02\u1D3A\u024B\x03\x02" +
		"\x02\x02\u1D3B\u1D39\x03\x02\x02\x02\u1D3C\u1D3D\t(\x02\x02\u1D3D\u024D" +
		"\x03\x02\x02\x02\u1D3E\u1D46\x05\u023E\u0120\x02\u1D3F\u1D41\x05\b\x05" +
		"\x02\u1D40\u1D3F\x03\x02\x02\x02\u1D41\u1D42\x03\x02\x02\x02\u1D42\u1D40" +
		"\x03\x02\x02\x02\u1D42\u1D43\x03\x02\x02\x02\u1D43\u1D44\x03\x02\x02\x02" +
		"\u1D44\u1D45\x07\xCF\x02\x02\u1D45\u1D47\x03\x02\x02\x02\u1D46\u1D40\x03" +
		"\x02\x02\x02\u1D46\u1D47\x03\x02\x02\x02\u1D47\u1D4F\x03\x02\x02\x02\u1D48" +
		"\u1D4A\x05\b\x05\x02\u1D49\u1D48\x03\x02\x02\x02\u1D4A\u1D4B\x03\x02\x02" +
		"\x02\u1D4B\u1D49\x03\x02\x02\x02\u1D4B\u1D4C\x03\x02\x02\x02\u1D4C\u1D4D" +
		"\x03\x02\x02\x02\u1D4D\u1D4E\x07\xF3\x02\x02\u1D4E\u1D50\x03\x02\x02\x02" +
		"\u1D4F\u1D49\x03\x02\x02\x02\u1D4F\u1D50\x03\x02\x02\x02\u1D50\u1D52\x03" +
		"\x02\x02\x02\u1D51\u1D53\x05\b\x05\x02\u1D52\u1D51\x03\x02\x02\x02\u1D53" +
		"\u1D54\x03\x02\x02\x02\u1D54\u1D52\x03\x02\x02\x02\u1D54\u1D55\x03\x02" +
		"\x02\x02\u1D55\u1D56\x03\x02\x02\x02\u1D56\u1D57\x05\u0250\u0129\x02\u1D57" +
		"\u024F\x03\x02\x02\x02\u1D58\u1D59\t)\x02\x02\u1D59\u0251\x03\x02\x02" +
		"\x02\u1D5A\u1D62\x05\u025A\u012E\x02\u1D5B\u1D5D\x05\b\x05\x02\u1D5C\u1D5B" +
		"\x03\x02\x02\x02\u1D5D\u1D5E\x03\x02\x02\x02\u1D5E\u1D5C\x03\x02\x02\x02" +
		"\u1D5E\u1D5F\x03\x02\x02\x02\u1D5F\u1D60\x03\x02\x02\x02\u1D60\u1D61\x07" +
		"\xCF\x02\x02\u1D61\u1D63\x03\x02\x02\x02\u1D62\u1D5C\x03\x02\x02\x02\u1D62" +
		"\u1D63\x03\x02\x02\x02\u1D63\u1D6B\x03\x02\x02\x02\u1D64\u1D66\x05\b\x05" +
		"\x02\u1D65\u1D64\x03\x02\x02\x02\u1D66\u1D67\x03\x02\x02\x02\u1D67\u1D65" +
		"\x03\x02\x02\x02\u1D67\u1D68\x03\x02\x02\x02\u1D68\u1D69\x03\x02\x02\x02" +
		"\u1D69\u1D6A\x07\xF3\x02\x02\u1D6A\u1D6C\x03\x02\x02\x02\u1D6B\u1D65\x03" +
		"\x02\x02\x02\u1D6B\u1D6C\x03\x02\x02\x02\u1D6C\u1D6E\x03\x02\x02\x02\u1D6D" +
		"\u1D6F\x05\b\x05\x02\u1D6E\u1D6D\x03\x02\x02\x02\u1D6F\u1D70\x03\x02\x02" +
		"\x02\u1D70\u1D6E\x03\x02\x02\x02\u1D70\u1D71\x03\x02\x02\x02\u1D71\u1D72" +
		"\x03\x02\x02\x02\u1D72\u1D73\x05\u0254\u012B\x02\u1D73\u0253\x03\x02\x02" +
		"\x02\u1D74\u1D75\t*\x02\x02\u1D75\u0255\x03\x02\x02\x02\u1D76\u1D7A\x07" +
		"\xCF\x02\x02\u1D77\u1D79\x05\b\x05\x02\u1D78\u1D77\x03\x02\x02\x02\u1D79" +
		"\u1D7C\x03\x02\x02\x02\u1D7A\u1D78\x03\x02\x02\x02\u1D7A\u1D7B\x03\x02" +
		"\x02\x02\u1D7B\u1D7E\x03\x02\x02\x02\u1D7C\u1D7A\x03\x02\x02\x02\u1D7D" +
		"\u1D76\x03\x02\x02\x02\u1D7D\u1D7E\x03\x02\x02\x02\u1D7E\u1E06\x03\x02" +
		"\x02\x02\u1D7F\u1D83\x07\xF3\x02\x02\u1D80\u1D82\x05\b\x05\x02\u1D81\u1D80" +
		"\x03\x02\x02\x02\u1D82\u1D85\x03\x02\x02\x02\u1D83\u1D81\x03\x02\x02\x02" +
		"\u1D83\u1D84\x03\x02\x02\x02\u1D84\u1D87\x03\x02\x02\x02\u1D85\u1D83\x03" +
		"\x02\x02\x02\u1D86\u1D7F\x03\x02\x02\x02\u1D86\u1D87\x03\x02\x02\x02\u1D87" +
		"\u1DC4\x03\x02\x02\x02\u1D88\u1D90\x07\xB8\x02\x02\u1D89\u1D8B\x05\b\x05" +
		"\x02\u1D8A\u1D89\x03\x02\x02\x02\u1D8B\u1D8C\x03\x02\x02\x02\u1D8C\u1D8A" +
		"\x03\x02\x02\x02\u1D8C\u1D8D\x03\x02\x02\x02\u1D8D\u1D8E\x03\x02\x02\x02" +
		"\u1D8E\u1D8F\x07\u0164\x02\x02\u1D8F\u1D91\x03\x02\x02\x02\u1D90\u1D8A" +
		"\x03\x02\x02\x02\u1D90\u1D91\x03\x02\x02\x02\u1D91\u1DC5\x03\x02\x02\x02" +
		"\u1D92\u1D9A\x07\u01A2\x02\x02\u1D93\u1D95\x05\b\x05\x02\u1D94\u1D93\x03" +
		"\x02\x02\x02\u1D95\u1D96\x03\x02\x02\x02\u1D96\u1D94\x03\x02\x02\x02\u1D96" +
		"\u1D97\x03\x02\x02\x02\u1D97\u1D98\x03\x02\x02\x02\u1D98\u1D99\x07\u0164" +
		"\x02\x02\u1D99\u1D9B\x03\x02\x02\x02\u1D9A\u1D94\x03\x02\x02\x02\u1D9A" +
		"\u1D9B\x03\x02\x02\x02\u1D9B\u1DC5\x03\x02\x02\x02\u1D9C\u1DA4\x07\xD9" +
		"\x02\x02\u1D9D\u1D9F\x05\b\x05\x02\u1D9E\u1D9D\x03\x02\x02\x02\u1D9F\u1DA0" +
		"\x03\x02\x02\x02\u1DA0\u1D9E\x03\x02\x02\x02\u1DA0\u1DA1\x03\x02\x02\x02" +
		"\u1DA1\u1DA2\x03\x02\x02\x02\u1DA2\u1DA3\x07\u0164\x02\x02\u1DA3\u1DA5" +
		"\x03\x02\x02\x02\u1DA4\u1D9E\x03\x02\x02\x02\u1DA4\u1DA5\x03\x02\x02\x02" +
		"\u1DA5\u1DC5\x03\x02\x02\x02\u1DA6\u1DAE\x07\u019F\x02\x02\u1DA7\u1DA9" +
		"\x05\b\x05\x02\u1DA8\u1DA7\x03\x02\x02\x02\u1DA9\u1DAA\x03\x02\x02\x02" +
		"\u1DAA\u1DA8\x03\x02\x02\x02\u1DAA\u1DAB\x03\x02\x02\x02\u1DAB\u1DAC\x03" +
		"\x02\x02\x02\u1DAC\u1DAD\x07\u0164\x02\x02\u1DAD\u1DAF\x03\x02\x02\x02" +
		"\u1DAE\u1DA8\x03\x02\x02\x02\u1DAE\u1DAF\x03\x02\x02\x02\u1DAF\u1DC5\x03" +
		"\x02\x02\x02\u1DB0\u1DB8\x07\x97\x02\x02\u1DB1\u1DB3\x05\b\x05\x02\u1DB2" +
		"\u1DB1\x03\x02\x02\x02\u1DB3\u1DB4\x03\x02\x02\x02\u1DB4\u1DB2\x03\x02" +
		"\x02\x02\u1DB4\u1DB5\x03\x02\x02\x02\u1DB5\u1DB6\x03\x02\x02\x02\u1DB6" +
		"\u1DB7\x07\u0169\x02\x02\u1DB7\u1DB9\x03\x02\x02\x02\u1DB8\u1DB2\x03\x02" +
		"\x02\x02\u1DB8\u1DB9\x03\x02\x02\x02\u1DB9\u1DC5\x03\x02\x02\x02\u1DBA" +
		"\u1DC2\x07\u019E\x02\x02\u1DBB\u1DBD\x05\b\x05\x02\u1DBC\u1DBB\x03\x02" +
		"\x02\x02\u1DBD\u1DBE\x03\x02\x02\x02\u1DBE\u1DBC\x03\x02\x02\x02\u1DBE" +
		"\u1DBF\x03\x02\x02\x02\u1DBF\u1DC0\x03\x02\x02\x02\u1DC0\u1DC1\x07\u0169" +
		"\x02\x02\u1DC1\u1DC3\x03\x02\x02\x02\u1DC2\u1DBC\x03\x02\x02\x02\u1DC2" +
		"\u1DC3\x03\x02\x02\x02\u1DC3\u1DC5\x03\x02\x02\x02\u1DC4\u1D88\x03\x02" +
		"\x02\x02\u1DC4\u1D92\x03\x02\x02\x02\u1DC4\u1D9C\x03\x02\x02\x02\u1DC4" +
		"\u1DA6\x03\x02\x02\x02\u1DC4\u1DB0\x03\x02\x02\x02\u1DC4\u1DBA\x03\x02" +
		"\x02\x02\u1DC5\u1E07\x03\x02\x02\x02\u1DC6\u1DCE\x07\xB8\x02\x02\u1DC7" +
		"\u1DC9\x05\b\x05\x02\u1DC8\u1DC7\x03\x02\x02\x02\u1DC9\u1DCA\x03\x02\x02" +
		"\x02\u1DCA\u1DC8\x03\x02\x02\x02\u1DCA\u1DCB\x03\x02\x02\x02\u1DCB\u1DCC" +
		"\x03\x02\x02\x02\u1DCC\u1DCD\x07\u0164\x02\x02\u1DCD\u1DCF\x03\x02\x02" +
		"\x02\u1DCE\u1DC8\x03\x02\x02\x02\u1DCE\u1DCF\x03\x02\x02\x02\u1DCF\u1DD1" +
		"\x03\x02\x02\x02\u1DD0\u1DD2\x05\b\x05\x02\u1DD1\u1DD0\x03\x02\x02\x02" +
		"\u1DD2\u1DD3\x03\x02\x02\x02\u1DD3\u1DD1\x03\x02\x02\x02\u1DD3\u1DD4\x03" +
		"\x02\x02\x02\u1DD4\u1DD5\x03\x02\x02\x02\u1DD5\u1DD7\x07\xFF\x02\x02\u1DD6" +
		"\u1DD8\x05\b\x05\x02\u1DD7\u1DD6\x03\x02\x02\x02\u1DD8\u1DD9\x03\x02\x02" +
		"\x02\u1DD9\u1DD7\x03\x02\x02\x02\u1DD9\u1DDA\x03\x02\x02\x02\u1DDA\u1DDB" +
		"\x03\x02\x02\x02\u1DDB\u1DE3\x07\x97\x02\x02\u1DDC\u1DDE\x05\b\x05\x02" +
		"\u1DDD\u1DDC\x03\x02\x02\x02\u1DDE\u1DDF\x03\x02\x02\x02\u1DDF\u1DDD\x03" +
		"\x02\x02\x02\u1DDF\u1DE0\x03\x02\x02\x02\u1DE0\u1DE1\x03\x02\x02\x02\u1DE1" +
		"\u1DE2\x07\u0169\x02\x02\u1DE2\u1DE4\x03\x02\x02\x02\u1DE3\u1DDD\x03\x02" +
		"\x02\x02\u1DE3\u1DE4\x03\x02\x02\x02\u1DE4\u1E07\x03\x02\x02\x02\u1DE5" +
		"\u1E07\x07\u01A1\x02\x02\u1DE6\u1DEE\x07\xD9\x02\x02\u1DE7\u1DE9\x05\b" +
		"\x05\x02\u1DE8\u1DE7\x03\x02\x02\x02\u1DE9\u1DEA\x03\x02\x02\x02\u1DEA" +
		"\u1DE8\x03\x02\x02\x02\u1DEA\u1DEB\x03\x02\x02\x02\u1DEB\u1DEC\x03\x02" +
		"\x02\x02\u1DEC\u1DED\x07\u0164\x02\x02\u1DED\u1DEF\x03\x02\x02\x02\u1DEE" +
		"\u1DE8\x03\x02\x02\x02\u1DEE\u1DEF\x03\x02\x02\x02\u1DEF\u1DF1\x03\x02" +
		"\x02\x02\u1DF0\u1DF2\x05\b\x05\x02\u1DF1\u1DF0\x03\x02\x02\x02\u1DF2\u1DF3" +
		"\x03\x02\x02\x02\u1DF3\u1DF1\x03\x02\x02\x02\u1DF3\u1DF4\x03\x02\x02\x02" +
		"\u1DF4\u1DF5\x03\x02\x02\x02\u1DF5\u1DF7\x07\xFF\x02\x02\u1DF6\u1DF8\x05" +
		"\b\x05\x02\u1DF7\u1DF6\x03\x02\x02\x02\u1DF8\u1DF9\x03\x02\x02\x02\u1DF9" +
		"\u1DF7\x03\x02\x02\x02\u1DF9\u1DFA\x03\x02\x02\x02\u1DFA\u1DFB\x03\x02" +
		"\x02\x02\u1DFB\u1E03\x07\x97\x02\x02\u1DFC\u1DFE\x05\b\x05\x02\u1DFD\u1DFC" +
		"\x03\x02\x02\x02\u1DFE\u1DFF\x03\x02\x02\x02\u1DFF\u1DFD\x03\x02\x02\x02" +
		"\u1DFF\u1E00\x03\x02\x02\x02\u1E00\u1E01\x03\x02\x02\x02\u1E01\u1E02\x07" +
		"\u0169\x02\x02\u1E02\u1E04\x03\x02\x02\x02\u1E03\u1DFD\x03\x02\x02\x02" +
		"\u1E03\u1E04\x03\x02\x02\x02\u1E04\u1E07\x03\x02\x02\x02\u1E05\u1E07\x07" +
		"\u01A0\x02\x02\u1E06\u1D86\x03\x02\x02\x02\u1E06\u1DC6\x03\x02\x02\x02" +
		"\u1E06\u1DE5\x03\x02\x02\x02\u1E06\u1DE6\x03\x02\x02\x02\u1E06\u1E05\x03" +
		"\x02\x02\x02\u1E07\u0257\x03\x02\x02\x02\u1E08\u1E10\x05\u01AE\xD8\x02" +
		"\u1E09\u1E0B\x05\b\x05\x02\u1E0A\u1E09\x03\x02\x02\x02\u1E0B\u1E0E\x03" +
		"\x02\x02\x02\u1E0C\u1E0A\x03\x02\x02\x02\u1E0C\u1E0D\x03\x02\x02\x02\u1E0D" +
		"\u1E0F\x03\x02\x02\x02\u1E0E\u1E0C\x03\x02\x02\x02\u1E0F\u1E11\x05\u025E" +
		"\u0130\x02\u1E10\u1E0C\x03\x02\x02\x02\u1E10\u1E11\x03\x02\x02\x02\u1E11" +
		"\u1E19\x03\x02\x02\x02\u1E12\u1E14\x05\b\x05\x02\u1E13\u1E12\x03\x02\x02" +
		"\x02\u1E14\u1E17\x03\x02\x02\x02\u1E15\u1E13\x03\x02\x02\x02\u1E15\u1E16" +
		"\x03\x02\x02\x02\u1E16\u1E18\x03\x02\x02\x02\u1E17\u1E15\x03\x02\x02\x02" +
		"\u1E18\u1E1A\x05\u0260\u0131\x02\u1E19\u1E15\x03\x02\x02\x02\u1E19\u1E1A" +
		"\x03\x02\x02\x02\u1E1A\u0259\x03\x02\x02\x02\u1E1B\u1E37\x05\u0258\u012D" +
		"\x02\u1E1C\u1E20\x07\xB3\x02\x02\u1E1D\u1E1F\x05\b\x05\x02\u1E1E\u1E1D" +
		"\x03\x02\x02\x02\u1E1F\u1E22\x03\x02\x02\x02\u1E20\u1E1E\x03\x02\x02\x02" +
		"\u1E20\u1E21\x03\x02\x02\x02\u1E21\u1E23\x03\x02\x02\x02\u1E22\u1E20\x03" +
		"\x02\x02\x02\u1E23\u1E2B\x05\u0266\u0134\x02\u1E24\u1E26\x05\b\x05\x02" +
		"\u1E25\u1E24\x03\x02\x02\x02\u1E26\u1E29\x03\x02\x02\x02\u1E27\u1E25\x03" +
		"\x02\x02\x02\u1E27\u1E28\x03\x02\x02\x02\u1E28\u1E2A\x03\x02\x02\x02\u1E29" +
		"\u1E27\x03\x02\x02\x02\u1E2A\u1E2C\x05\u025C\u012F\x02\u1E2B\u1E27\x03" +
		"\x02\x02\x02\u1E2B\u1E2C\x03\x02\x02\x02\u1E2C\u1E34\x03\x02\x02\x02\u1E2D" +
		"\u1E2F\x05\b\x05\x02\u1E2E\u1E2D\x03\x02\x02\x02\u1E2F\u1E32\x03\x02\x02" +
		"\x02\u1E30\u1E2E\x03\x02\x02\x02\u1E30\u1E31\x03\x02\x02\x02\u1E31\u1E33" +
		"\x03\x02\x02\x02\u1E32\u1E30\x03\x02\x02\x02\u1E33\u1E35\x05\u0260\u0131" +
		"\x02\u1E34\u1E30\x03\x02\x02\x02\u1E34\u1E35\x03\x02\x02\x02\u1E35\u1E37" +
		"\x03\x02\x02\x02\u1E36\u1E1B\x03\x02\x02\x02\u1E36\u1E1C\x03\x02\x02\x02" +
		"\u1E37\u025B\x03\x02\x02\x02\u1E38\u1E39\x05\u025E\u0130\x02\u1E39\u025D" +
		"\x03\x02\x02\x02\u1E3A\u1E3E\x07\u01A3\x02\x02\u1E3B\u1E3D\x05\b\x05\x02" +
		"\u1E3C\u1E3B\x03\x02\x02\x02\u1E3D\u1E40\x03\x02\x02\x02\u1E3E\u1E3C\x03" +
		"\x02\x02\x02\u1E3E\u1E3F\x03\x02\x02\x02\u1E3F\u1E43\x03\x02\x02\x02\u1E40" +
		"\u1E3E\x03\x02\x02\x02\u1E41\u1E44\x05\u023E\u0120\x02\u1E42\u1E44\x07" +
		"\n\x02\x02\u1E43\u1E41\x03\x02\x02\x02\u1E43\u1E42\x03\x02\x02\x02\u1E44" +
		"\u1E51\x03\x02\x02\x02\u1E45\u1E47\x05\x06\x04\x02\u1E46\u1E45\x03\x02" +
		"\x02\x02\u1E47\u1E4A\x03\x02\x02\x02\u1E48\u1E46\x03\x02\x02\x02\u1E48" +
		"\u1E49\x03\x02\x02\x02\u1E49\u1E4D\x03\x02\x02\x02\u1E4A\u1E48\x03\x02" +
		"\x02\x02\u1E4B\u1E4E\x05\u023E\u0120\x02\u1E4C\u1E4E\x07\n\x02\x02\u1E4D" +
		"\u1E4B\x03\x02\x02\x02\u1E4D\u1E4C\x03\x02\x02\x02\u1E4E\u1E50\x03\x02" +
		"\x02\x02\u1E4F\u1E48\x03\x02\x02\x02\u1E50\u1E53\x03\x02\x02\x02\u1E51" +
		"\u1E4F\x03\x02\x02\x02\u1E51\u1E52\x03\x02\x02\x02\u1E52\u1E57\x03\x02" +
		"\x02\x02\u1E53\u1E51\x03\x02\x02\x02\u1E54\u1E56\x05\b\x05\x02\u1E55\u1E54" +
		"\x03\x02\x02\x02\u1E56\u1E59\x03\x02\x02\x02\u1E57\u1E55\x03\x02\x02\x02" +
		"\u1E57\u1E58\x03\x02\x02\x02\u1E58\u1E5A\x03\x02\x02\x02\u1E59\u1E57\x03" +
		"\x02\x02\x02\u1E5A\u1E5B\x07\u01A4\x02\x02\u1E5B\u025F\x03\x02\x02\x02" +
		"\u1E5C\u1E60\x07\u01A3\x02\x02\u1E5D\u1E5F\x05\b\x05\x02\u1E5E\u1E5D\x03" +
		"\x02\x02\x02\u1E5F\u1E62\x03\x02\x02\x02\u1E60\u1E5E\x03\x02\x02\x02\u1E60" +
		"\u1E61\x03\x02\x02\x02\u1E61\u1E63\x03\x02\x02\x02\u1E62\u1E60\x03\x02" +
		"\x02\x02\u1E63\u1E67\x05\u0262\u0132\x02\u1E64\u1E66\x05\b\x05\x02\u1E65" +
		"\u1E64\x03\x02\x02\x02\u1E66\u1E69\x03\x02\x02\x02\u1E67\u1E65\x03\x02" +
		"\x02\x02\u1E67\u1E68\x03\x02\x02\x02\u1E68\u1E6A\x03\x02\x02\x02\u1E69" +
		"\u1E67\x03\x02\x02\x02\u1E6A\u1E72\x07\u019D\x02\x02\u1E6B\u1E6D\x05\b" +
		"\x05\x02\u1E6C\u1E6B\x03\x02\x02\x02\u1E6D\u1E70\x03\x02\x02\x02\u1E6E" +
		"\u1E6C\x03\x02\x02\x02\u1E6E\u1E6F\x03\x02\x02\x02\u1E6F\u1E71\x03\x02" +
		"\x02\x02\u1E70\u1E6E\x03\x02\x02\x02\u1E71\u1E73\x05\u0264\u0133\x02\u1E72" +
		"\u1E6E\x03\x02\x02\x02\u1E72\u1E73\x03\x02\x02\x02\u1E73\u1E77\x03\x02" +
		"\x02\x02\u1E74\u1E76\x05\b\x05\x02\u1E75\u1E74\x03\x02\x02\x02\u1E76\u1E79" +
		"\x03\x02\x02\x02\u1E77\u1E75\x03\x02\x02\x02\u1E77\u1E78\x03\x02\x02\x02" +
		"\u1E78\u1E7A\x03\x02\x02\x02\u1E79\u1E77\x03\x02\x02\x02\u1E7A\u1E7B\x07" +
		"\u01A4\x02\x02\u1E7B\u0261\x03\x02\x02\x02\u1E7C\u1E7D\x05\u023E\u0120" +
		"\x02\u1E7D\u0263\x03\x02\x02\x02\u1E7E\u1E7F\x05\u023E\u0120\x02\u1E7F" +
		"\u0265\x03\x02\x02\x02\u1E80\u1E81\x07\u01AF\x02\x02\u1E81\u0267\x03\x02" +
		"\x02\x02\u053A\u026A\u026C\u027D\u0285\u028B\u0291\u0299\u029D\u02A1\u02A4" +
		"\u02A7\u02AB\u02B1\u02B6\u02BD\u02C2\u02C5\u02CA\u02CE\u02D3\u02DA\u02DF" +
		"\u02E6\u02EC\u02F0\u02F5\u02FC\u0303\u0309\u030D\u0312\u0316\u031B\u0322" +
		"\u032B\u0332\u0339\u033E\u0344\u034A\u0351\u0359\u035F\u0368\u036F\u0376" +
		"\u037B\u0382\u0387\u038C\u0393\u0396\u039C\u03A0\u03A5\u03AB\u03AF\u03B4" +
		"\u03BA\u03C0\u03C4\u03C9\u03CF\u03D6\u03DD\u03E3\u03E7\u03EC\u03F3\u03FC" +
		"\u0402\u0409\u040F\u0415\u0419\u041E\u0425\u0430\u0436\u043C\u0443\u044B" +
		"\u0454\u045A\u0467\u046B\u0471\u0477\u047D\u0483\u0487\u048C\u0492\u0496" +
		"\u049A\u049F\u04A3\u04A8\u04AC\u04B2\u04B8\u04BE\u04C4\u04C8\u04CD\u04D3" +
		"\u04D7\u04DC\u04E2\u04E8\u04EC\u04F1\u04F5\u04FB\u0501\u0507\u050D\u0513" +
		"\u0518\u051D\u0521\u0527\u052D\u0533\u0538\u053D\u0541\u0547\u054D\u0553" +
		"\u0555\u055B\u055F\u0562\u0564\u0569\u056D\u0573\u0579\u057F\u0585\u0589" +
		"\u058E\u0592\u0596\u059E\u05A5\u05A9\u05AF\u05B6\u05BA\u05C0\u05C2\u05C9" +
		"\u05D1\u05D3\u05D9\u05DD\u05DF\u05E8\u05EE\u05F0\u05F6\u05FA\u05FC\u0601" +
		"\u0609\u060B\u0614\u0616\u061E\u0620\u0627\u0629\u062F\u0633\u0635\u063B" +
		"\u063D\u0643\u0647\u064C\u0654\u0656\u065C\u0660\u0665\u066F\u0675\u0679" +
		"\u067E\u0682\u0687\u068B\u0693\u0699\u069D\u06A1\u06A6\u06AC\u06B1\u06B8" +
		"\u06BB\u06C1\u06C5\u06CA\u06CE\u06D4\u06DA\u06DE\u06E2\u06E8\u06EE\u06F0" +
		"\u06F7\u06F9\u06FF\u0703\u0705\u070B\u070D\u0713\u0718\u071A\u0720\u0726" +
		"\u072C\u0732\u0736\u073B\u073F\u0744\u0748\u074D\u0751\u0757\u075F\u0765" +
		"\u076C\u076E\u0774\u077A\u077D\u0783\u0785\u078C\u078E\u0795\u0797\u079E" +
		"\u07A0\u07A3\u07A8\u07B0\u07B6\u07BC\u07C2\u07C8\u07CA\u07D0\u07DA\u07E0" +
		"\u07E5\u07EB\u07F1\u07F5\u07F9\u07FF\u0805\u080B\u080F\u0814\u081A\u081F" +
		"\u0825\u082B\u082F\u0833\u0839\u083F\u0845\u084B\u0851\u0855\u0857\u085C" +
		"\u0860\u0865\u0869\u086F\u0877\u087D\u0883\u0887\u088D\u0893\u0897\u0899" +
		"\u089F\u08A5\u08A9\u08AF\u08B5\u08B9\u08BB\u08C1\u08C7\u08CB\u08D1\u08D7" +
		"\u08DB\u08DD\u08E3\u08E9\u08ED\u08F3\u08F9\u08FD\u08FF\u0905\u090B\u0911" +
		"\u0913\u0919\u091D\u0922\u0926\u092E\u0934\u093A\u093E\u0943\u0949\u094D" +
		"\u0952\u0956\u095B\u095F\u0965\u096B\u0971\u0979\u097F\u0985\u098A\u098E" +
		"\u0990\u0995\u0999\u099F\u09A5\u09A7\u09AD\u09B3\u09B5\u09BB\u09C1\u09C6" +
		"\u09CA\u09CC\u09D1\u09D5\u09DB\u09E1\u09E5\u09EA\u09EE\u09F3\u09F7\u09FD" +
		"\u09FF\u0A05\u0A09\u0A0F\u0A13\u0A15\u0A1B\u0A21\u0A23\u0A27\u0A2D\u0A33" +
		"\u0A35\u0A39\u0A3F\u0A41\u0A47\u0A4B\u0A50\u0A58\u0A5A\u0A60\u0A64\u0A69" +
		"\u0A71\u0A77\u0A79\u0A7F\u0A83\u0A85\u0A8A\u0A92\u0A94\u0A97\u0AA0\u0AA2" +
		"\u0AA9\u0AAD\u0AB3\u0AB5\u0ABD\u0ABF\u0AC5\u0ACD\u0AD3\u0AD5\u0ADD\u0ADF" +
		"\u0AE5\u0AE9\u0AEE\u0AF2\u0AFD\u0B01\u0B03\u0B09\u0B11\u0B13\u0B1A\u0B1C" +
		"\u0B22\u0B2A\u0B2C\u0B33\u0B35\u0B3B\u0B3F\u0B45\u0B4C\u0B52\u0B56\u0B58" +
		"\u0B5E\u0B62\u0B64\u0B6A\u0B6E\u0B74\u0B78\u0B7C\u0B86\u0B88\u0B8E\u0B92" +
		"\u0B98\u0B9A\u0BA0\u0BA4\u0BAA\u0BAC\u0BB2\u0BB8\u0BBC\u0BC2\u0BC6\u0BCB" +
		"\u0BCF\u0BD5\u0BDB\u0BE2\u0BE9\u0BEC\u0BF2\u0BF5\u0BFB\u0BFE\u0C04\u0C07" +
		"\u0C0D\u0C10\u0C16\u0C1C\u0C23\u0C2A\u0C30\u0C38\u0C3E\u0C41\u0C46\u0C4B" +
		"\u0C52\u0C58\u0C5F\u0C66\u0C6B\u0C72\u0C78\u0C7F\u0C86\u0C8B\u0C92\u0C98" +
		"\u0C9F\u0CA6\u0CAC\u0CB2\u0CB7\u0CBE\u0CC4\u0CCB\u0CD2\u0CD7\u0CDE\u0CE4" +
		"\u0CEB\u0CF0\u0CF9\u0CFF\u0D06\u0D0B\u0D14\u0D1A\u0D21\u0D26\u0D2F\u0D31" +
		"\u0D38\u0D3A\u0D48\u0D4E\u0D54\u0D5B\u0D5F\u0D61\u0D66\u0D6C\u0D70\u0D75" +
		"\u0D7B\u0D86\u0D88\u0D8F\u0D91\u0D9C\u0DA0\u0DA6\u0DAA\u0DB0\u0DB6\u0DB8" +
		"\u0DBE\u0DC4\u0DCA\u0DD0\u0DD4\u0DDE\u0DE2\u0DE8\u0DEC\u0DEE\u0DF3\u0DF9" +
		"\u0DFF\u0E06\u0E0A\u0E11\u0E19\u0E1D\u0E23\u0E31\u0E37\u0E3D\u0E43\u0E47" +
		"\u0E4D\u0E53\u0E55\u0E5B\u0E61\u0E6A\u0E70\u0E72\u0E78\u0E7A\u0E80\u0E86" +
		"\u0E8F\u0E97\u0E9D\u0EA3\u0EA9\u0EAF\u0EB5\u0EB7\u0EBB\u0EC7\u0ECD\u0ED4" +
		"\u0ED8\u0EDD\u0EE3\u0EEC\u0EF2\u0EF4\u0EFA\u0EFC\u0F04\u0F0A\u0F10\u0F12" +
		"\u0F1A\u0F20\u0F22\u0F2A\u0F30\u0F32\u0F34\u0F3B\u0F41\u0F43\u0F4B\u0F51" +
		"\u0F53\u0F59\u0F5B\u0F63\u0F67\u0F6D\u0F71\u0F79\u0F7F\u0F81\u0F89\u0F8F" +
		"\u0F91\u0F96\u0F9C\u0FA0\u0FA5\u0FA7\u0FAD\u0FB3\u0FB7\u0FB9\u0FBF\u0FC5" +
		"\u0FCB\u0FD1\u0FD5\u0FDA\u0FE0\u0FE5\u0FEA\u0FF1\u0FF7\u0FF9\u0FFD\u100D" +
		"\u1016\u101F\u1024\u1029\u1033\u1038\u103D\u1045\u104E\u1053\u105C\u1064" +
		"\u1068\u106E\u1074\u1076\u107C\u1080\u1086\u108A\u1092\u1094\u109B\u10A3" +
		"\u10A7\u10AD\u10B1\u10B3\u10B8\u10BE\u10C4\u10CB\u10D1\u10D4\u10DA\u10E0" +
		"\u10E6\u10E8\u10EE\u10F4\u10F6\u10F8\u10FE\u1102\u1107\u110D\u1111\u1116" +
		"\u111C\u1122\u1126\u112B\u1131\u1137\u113B\u1140\u1146\u114A\u114C\u1160" +
		"\u1164\u1169\u116B\u1174\u1178\u117E\u1182\u1188\u118C\u1192\u1196\u11AE" +
		"\u11B4\u11BA\u11BC\u11C3\u11CD\u11D3\u11D7\u11DD\u11E1\u11E3\u11E8\u11EE" +
		"\u11F4\u11FD\u1203\u1205\u120B\u120F\u1214\u121A\u121C\u1222\u1228\u122A" +
		"\u122E\u1233\u1239\u123B\u1241\u1243\u1249\u124D\u1252\u1258\u125A\u1260" +
		"\u1262\u1268\u126C\u1270\u1274\u1278\u127C\u1282\u1288\u128C\u1292\u1296" +
		"\u1298\u129E\u12A4\u12AD\u12B3\u12B9\u12BF\u12C1\u12C7\u12CD\u12D3\u12D7" +
		"\u12DD\u12E1\u12E3\u12E8\u12F0\u12F8\u12FA\u1300\u1306\u1308\u130E\u1315" +
		"\u1318\u131E\u1320\u1326\u132C\u132E\u1334\u1337\u133D\u133F\u1342\u1348" +
		"\u134C\u1351\u1358\u135B\u1361\u1367\u1369\u136D\u136F\u137B\u137F\u1381" +
		"\u1386\u138C\u1397\u139F\u13A5\u13A7\u13AF\u13B5\u13B7\u13C2\u13C8\u13CA" +
		"\u13CC\u13D7\u13E3\u13E9\u13EB\u13F1\u13F3\u13F9\u13FB\u1403\u1409\u140B" +
		"\u1411\u1413\u1419\u141B\u1423\u1429\u142B\u1433\u1439\u143B\u1443\u1447" +
		"\u144D\u1454\u1458\u145B\u145D\u1463\u146B\u146F\u1475\u147D\u1485\u148B" +
		"\u1492\u1498\u14A3\u14A9\u14B0\u14B7\u14BB\u14C0\u14C4\u14C9\u14D4\u14D6" +
		"\u14DC\u14E0\u14E6\u14E8\u14EE\u14F8\u14FD\u1503\u150A\u1511\u1518\u151F" +
		"\u1526\u152D\u1534\u153B\u1542\u1549\u1550\u1557\u155E\u1565\u156C\u1573" +
		"\u1577\u157C\u1580\u1586\u158C\u158E\u1594\u159D\u15A3\u15AA\u15AE\u15B1" +
		"\u15B7\u15BD\u15C4\u15C8\u15CD\u15D1\u15D6\u15DA\u15DF\u15E6\u15EC\u15F3" +
		"\u15F7\u15FA\u1600\u1607\u160E\u1612\u1617\u161C\u1624\u1626\u162C\u1634" +
		"\u163B\u1642\u1646\u164B\u164F\u1654\u1658\u165D\u1662\u1668\u166C\u1671" +
		"\u1677\u1683\u1685\u168B\u168D\u1693\u1697\u169C\u16A6\u16AA\u16B4\u16BB" +
		"\u16C2\u16C7\u16CB\u16D1\u16D7\u16D9\u16E1\u16E7\u16E9\u16F1\u16F7\u16F9" +
		"\u1706\u170C\u170E\u1716\u171C\u171E\u1726\u172C\u1732\u1734\u1738\u173E" +
		"\u1744\u174A\u1751\u1757\u1759\u175F\u1761\u176A\u176C\u1772\u1778\u177D" +
		"\u1787\u178D\u1793\u1795\u179B\u17A0\u17A8\u17AE\u17B2\u17B8\u17BE\u17C0" +
		"\u17C5\u17CA\u17CD\u17D3\u17D7\u17DD\u17DF\u17E5\u17E9\u17EF\u17F5\u1800" +
		"\u1806\u180C\u180E\u181B\u1820\u1822\u1828\u182E\u1832\u1838\u183E\u1844" +
		"\u1846\u1852\u1858\u185F\u1861\u1867\u1869\u186F\u1873\u1879\u187D\u187F" +
		"\u1884\u188B\u1891\u1893\u1899\u189B\u18A3\u18A9\u18AB\u18B1\u18B3\u18CB" +
		"\u18D2\u18D9\u18DE\u18E5\u18EB\u18ED\u18F3\u18FA\u1901\u1904\u190A\u190D" +
		"\u1913\u1916\u191C\u191F\u1925\u1928\u192E\u1931\u1937\u193A\u1940\u1945" +
		"\u194C\u194F\u1955\u1958\u1960\u1962\u1968\u196E\u1970\u197A\u197C\u1982" +
		"\u1988\u198A\u1990\u1992\u1998\u199E\u19A0\u19A4\u19A9\u19AD\u19B4\u19BB" +
		"\u19C2\u19C8\u19CB\u19D1\u19D7\u19D9\u19DF\u19E1\u19E3\u19E9\u19EF\u19F5" +
		"\u19F7\u19FD\u19FF\u1A03\u1A09\u1A0F\u1A13\u1A1B\u1A21\u1A27\u1A29\u1A31" +
		"\u1A37\u1A39\u1A3F\u1A41\u1A4B\u1A51\u1A53\u1A55\u1A5C\u1A62\u1A68\u1A6E" +
		"\u1A70\u1A76\u1A78\u1A80\u1A86\u1A88\u1A8E\u1A94\u1A9A\u1AA2\u1AA8\u1AAA" +
		"\u1AB0\u1AB6\u1ABB\u1ABD\u1AC0\u1AC6\u1ACC\u1ACE\u1AD6\u1ADC\u1ADE\u1AE4" +
		"\u1AEA\u1AEC\u1AF2\u1AFE\u1B04\u1B06\u1B0E\u1B10\u1B17\u1B19\u1B1F\u1B23" +
		"\u1B25\u1B2B\u1B33\u1B3A\u1B41\u1B46\u1B4D\u1B52\u1B59\u1B5E\u1B65\u1B6A" +
		"\u1B71\u1B74\u1B7A\u1B80\u1B86\u1B88\u1B8E\u1B90\u1B96\u1B9B\u1BA1\u1BA7" +
		"\u1BAB\u1BB5\u1BBB\u1BC1\u1BC3\u1BC9\u1BCB\u1BD3\u1BD9\u1BDB\u1BE3\u1BE8" +
		"\u1BF2\u1BF8\u1BFA\u1BFC\u1C03\u1C07\u1C0F\u1C15\u1C17\u1C1D\u1C1F\u1C25" +
		"\u1C27\u1C2D\u1C33\u1C3B\u1C41\u1C45\u1C4B\u1C51\u1C56\u1C5D\u1C68\u1C6A" +
		"\u1C70\u1C79\u1C7D\u1C8A\u1C91\u1C9A\u1CA1\u1CA7\u1CAE\u1CB5\u1CBB\u1CC3" +
		"\u1CCC\u1CD3\u1CDC\u1CE4\u1CEA\u1CF1\u1CF8\u1CFF\u1D03\u1D08\u1D11\u1D18" +
		"\u1D1F\u1D25\u1D2B\u1D32\u1D39\u1D42\u1D46\u1D4B\u1D4F\u1D54\u1D5E\u1D62" +
		"\u1D67\u1D6B\u1D70\u1D7A\u1D7D\u1D83\u1D86\u1D8C\u1D90\u1D96\u1D9A\u1DA0" +
		"\u1DA4\u1DAA\u1DAE\u1DB4\u1DB8\u1DBE\u1DC2\u1DC4\u1DCA\u1DCE\u1DD3\u1DD9" +
		"\u1DDF\u1DE3\u1DEA\u1DEE\u1DF3\u1DF9\u1DFF\u1E03\u1E06\u1E0C\u1E10\u1E15" +
		"\u1E19\u1E20\u1E27\u1E2B\u1E30\u1E34\u1E36\u1E3E\u1E43\u1E48\u1E4D\u1E51" +
		"\u1E57\u1E60\u1E67\u1E6E\u1E72\u1E77";
	public static readonly _serializedATN: string = Utils.join(
		[
			cobolParser._serializedATNSegment0,
			cobolParser._serializedATNSegment1,
			cobolParser._serializedATNSegment2,
			cobolParser._serializedATNSegment3,
			cobolParser._serializedATNSegment4,
			cobolParser._serializedATNSegment5,
			cobolParser._serializedATNSegment6,
			cobolParser._serializedATNSegment7,
			cobolParser._serializedATNSegment8,
			cobolParser._serializedATNSegment9,
			cobolParser._serializedATNSegment10,
			cobolParser._serializedATNSegment11,
			cobolParser._serializedATNSegment12,
			cobolParser._serializedATNSegment13,
			cobolParser._serializedATNSegment14,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!cobolParser.__ATN) {
			cobolParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(cobolParser._serializedATN));
		}

		return cobolParser.__ATN;
	}

}

export class Cobol_sourceContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(cobolParser.EOF, 0); }
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cobol_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCobol_source) {
			listener.enterCobol_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCobol_source) {
			listener.exitCobol_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCobol_source) {
			return visitor.visitCobol_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constantContext extends ParserRuleContext {
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public SPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACE, 0); }
	public SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACES, 0); }
	public HIGH_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUE, 0); }
	public HIGH_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUES, 0); }
	public LOW_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUE, 0); }
	public LOW_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUES, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTE, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTES, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant) {
			listener.enterFigurative_constant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant) {
			listener.exitFigurative_constant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant) {
			return visitor.visitFigurative_constant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeparatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SEMI_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEMI_, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSeparator) {
			listener.enterSeparator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSeparator) {
			listener.exitSeparator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSeparator) {
			return visitor.visitSeparator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_separatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_separator) {
			listener.enterArithmetic_separator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_separator) {
			listener.exitArithmetic_separator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_separator) {
			return visitor.visitArithmetic_separator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_commentContext extends ParserRuleContext {
	public START_SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_SLASH_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public START_STAR_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_STAR_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_comment; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_comment) {
			listener.enterLine_comment(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_comment) {
			listener.exitLine_comment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_comment) {
			return visitor.visitLine_comment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramContext extends ParserRuleContext {
	public identification_division(): Identification_divisionContext {
		return this.getRuleContext(0, Identification_divisionContext);
	}
	public environment_division(): Environment_divisionContext | undefined {
		return this.tryGetRuleContext(0, Environment_divisionContext);
	}
	public data_division(): Data_divisionContext | undefined {
		return this.tryGetRuleContext(0, Data_divisionContext);
	}
	public procedure_division(): Procedure_divisionContext | undefined {
		return this.tryGetRuleContext(0, Procedure_divisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_divisionContext extends ParserRuleContext {
	public procedure_division_header(): Procedure_division_headerContext {
		return this.getRuleContext(0, Procedure_division_headerContext);
	}
	public declaratives(): DeclarativesContext | undefined {
		return this.tryGetRuleContext(0, DeclarativesContext);
	}
	public end_program(): End_programContext | undefined {
		return this.tryGetRuleContext(0, End_programContext);
	}
	public procedure_test_line(): Procedure_test_lineContext[];
	public procedure_test_line(i: number): Procedure_test_lineContext;
	public procedure_test_line(i?: number): Procedure_test_lineContext | Procedure_test_lineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_test_lineContext);
		} else {
			return this.getRuleContext(i, Procedure_test_lineContext);
		}
	}
	public section(): SectionContext[];
	public section(i: number): SectionContext;
	public section(i?: number): SectionContext | SectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SectionContext);
		} else {
			return this.getRuleContext(i, SectionContext);
		}
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division) {
			listener.enterProcedure_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division) {
			listener.exitProcedure_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division) {
			return visitor.visitProcedure_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_programContext extends ParserRuleContext {
	public END_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.END_IN_A_AREA, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(cobolParser.PROGRAM, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public program_name(): Program_nameContext | undefined {
		return this.tryGetRuleContext(0, Program_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_program) {
			listener.enterEnd_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_program) {
			listener.exitEnd_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_program) {
			return visitor.visitEnd_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_division_headerContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public using(): UsingContext | undefined {
		return this.tryGetRuleContext(0, UsingContext);
	}
	public giving(): GivingContext | undefined {
		return this.tryGetRuleContext(0, GivingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division_header) {
			listener.enterProcedure_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division_header) {
			listener.exitProcedure_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division_header) {
			return visitor.visitProcedure_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection) {
			listener.enterSection(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection) {
			listener.exitSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection) {
			return visitor.visitSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclarativesContext extends ParserRuleContext {
	public DECLARATIVES_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES_IN_A_AREA, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public END_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.END_IN_A_AREA, 0); }
	public DECLARATIVES(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public declaratives_section(): Declaratives_sectionContext[];
	public declaratives_section(i: number): Declaratives_sectionContext;
	public declaratives_section(i?: number): Declaratives_sectionContext | Declaratives_sectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declaratives_sectionContext);
		} else {
			return this.getRuleContext(i, Declaratives_sectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives) {
			listener.enterDeclaratives(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives) {
			listener.exitDeclaratives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives) {
			return visitor.visitDeclaratives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declaratives_sectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	public use_statement(): Use_statementContext {
		return this.getRuleContext(0, Use_statementContext);
	}
	public declarative_paragraph(): Declarative_paragraphContext[];
	public declarative_paragraph(i: number): Declarative_paragraphContext;
	public declarative_paragraph(i?: number): Declarative_paragraphContext | Declarative_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declarative_paragraphContext);
		} else {
			return this.getRuleContext(i, Declarative_paragraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives_section) {
			listener.enterDeclaratives_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives_section) {
			listener.exitDeclaratives_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives_section) {
			return visitor.visitDeclaratives_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declarative_paragraphContext extends ParserRuleContext {
	public paragraph(): ParagraphContext {
		return this.getRuleContext(0, ParagraphContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declarative_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclarative_paragraph) {
			listener.enterDeclarative_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclarative_paragraph) {
			listener.exitDeclarative_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclarative_paragraph) {
			return visitor.visitDeclarative_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphContext extends ParserRuleContext {
	public paragraph_name(): Paragraph_nameContext {
		return this.getRuleContext(0, Paragraph_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph) {
			listener.enterParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph) {
			listener.exitParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph) {
			return visitor.visitParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SentenseContext extends ParserRuleContext {
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sentense; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSentense) {
			listener.enterSentense(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSentense) {
			listener.exitSentense(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSentense) {
			return visitor.visitSentense(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_statementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(cobolParser.USE, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROCEDURE, 0); }
	public use_on(): Use_onContext | undefined {
		return this.tryGetRuleContext(0, Use_onContext);
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public REPORTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTING, 0); }
	public group_data_name(): Group_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Group_data_nameContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCEPTION, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERROR, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_statement) {
			listener.enterUse_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_statement) {
			listener.exitUse_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_statement) {
			return visitor.visitUse_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_group_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGroup_data_name) {
			listener.enterGroup_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGroup_data_name) {
			listener.exitGroup_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGroup_data_name) {
			return visitor.visitGroup_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_onContext extends ParserRuleContext {
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I_O, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTEND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_on) {
			listener.enterUse_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_on) {
			listener.exitUse_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_on) {
			return visitor.visitUse_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_headerContext extends ParserRuleContext {
	public section_name(): Section_nameContext {
		return this.getRuleContext(0, Section_nameContext);
	}
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public segment_number(): Segment_numberContext | undefined {
		return this.tryGetRuleContext(0, Segment_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_header) {
			listener.enterSection_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_header) {
			listener.exitSection_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_header) {
			return visitor.visitSection_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Paragraph_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph_name) {
			listener.enterParagraph_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph_name) {
			listener.exitParagraph_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph_name) {
			return visitor.visitParagraph_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_name) {
			listener.enterSection_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_name) {
			listener.exitSection_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_name) {
			return visitor.visitSection_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing) {
			listener.enterUsing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing) {
			listener.exitUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing) {
			return visitor.visitUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GivingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGiving) {
			listener.enterGiving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGiving) {
			listener.exitGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGiving) {
			return visitor.visitGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_test_lineContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Arithmetic_expressionContext);
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_test_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_test_line) {
			listener.enterProcedure_test_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_test_line) {
			listener.exitProcedure_test_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_test_line) {
			return visitor.visitProcedure_test_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public accept_statement(): Accept_statementContext | undefined {
		return this.tryGetRuleContext(0, Accept_statementContext);
	}
	public add_statement(): Add_statementContext | undefined {
		return this.tryGetRuleContext(0, Add_statementContext);
	}
	public alter_statement(): Alter_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_statementContext);
	}
	public call_statement(): Call_statementContext | undefined {
		return this.tryGetRuleContext(0, Call_statementContext);
	}
	public cancel_statement(): Cancel_statementContext | undefined {
		return this.tryGetRuleContext(0, Cancel_statementContext);
	}
	public close_statement(): Close_statementContext | undefined {
		return this.tryGetRuleContext(0, Close_statementContext);
	}
	public compute_statement(): Compute_statementContext | undefined {
		return this.tryGetRuleContext(0, Compute_statementContext);
	}
	public continue_statement(): Continue_statementContext | undefined {
		return this.tryGetRuleContext(0, Continue_statementContext);
	}
	public delete_statement(): Delete_statementContext | undefined {
		return this.tryGetRuleContext(0, Delete_statementContext);
	}
	public display_statement(): Display_statementContext | undefined {
		return this.tryGetRuleContext(0, Display_statementContext);
	}
	public divide_statement(): Divide_statementContext | undefined {
		return this.tryGetRuleContext(0, Divide_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statementContext extends ParserRuleContext {
	public divide_statement_form1(): Divide_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form1Context);
	}
	public divide_statement_form2(): Divide_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form2Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement) {
			listener.enterDivide_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement) {
			listener.exitDivide_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement) {
			return visitor.visitDivide_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form1Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form1) {
			listener.enterDivide_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form1) {
			listener.exitDivide_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form1) {
			return visitor.visitDivide_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form2Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public REMAINDER(): TerminalNode { return this.getToken(cobolParser.REMAINDER, 0); }
	public remaind(): RemaindContext {
		return this.getRuleContext(0, RemaindContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROUNDED, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form2) {
			listener.enterDivide_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form2) {
			listener.exitDivide_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form2) {
			return visitor.visitDivide_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemaindContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_remaind; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRemaind) {
			listener.enterRemaind(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRemaind) {
			listener.exitRemaind(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRemaind) {
			return visitor.visitRemaind(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_numContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_num) {
			listener.enterDivide_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_num) {
			listener.exitDivide_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_num) {
			return visitor.visitDivide_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statementContext extends ParserRuleContext {
	public display_statement_form1(): Display_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form1Context);
	}
	public display_statement_form2(): Display_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form2Context);
	}
	public display_statement_form3(): Display_statement_form3Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form3Context);
	}
	public display_statement_form4(): Display_statement_form4Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form4Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement) {
			listener.enterDisplay_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement) {
			listener.exitDisplay_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement) {
			return visitor.visitDisplay_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form1Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public display_form1_clause(): Display_form1_clauseContext[];
	public display_form1_clause(i: number): Display_form1_clauseContext;
	public display_form1_clause(i?: number): Display_form1_clauseContext | Display_form1_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form1_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form1_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form1) {
			listener.enterDisplay_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form1) {
			listener.exitDisplay_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form1) {
			return visitor.visitDisplay_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form2Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public display_form2_clause(): Display_form2_clauseContext[];
	public display_form2_clause(i: number): Display_form2_clauseContext;
	public display_form2_clause(i?: number): Display_form2_clauseContext | Display_form2_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form2_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form2_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form2) {
			listener.enterDisplay_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form2) {
			listener.exitDisplay_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form2) {
			return visitor.visitDisplay_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form3Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public disp_f3_line(): Disp_f3_lineContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_lineContext);
	}
	public disp_f3_column(): Disp_f3_columnContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form3) {
			listener.enterDisplay_statement_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form3) {
			listener.exitDisplay_statement_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form3) {
			return visitor.visitDisplay_statement_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form4Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext {
		return this.getRuleContext(0, Src_itemContext);
	}
	public UPON(): TerminalNode { return this.getToken(cobolParser.UPON, 0); }
	public display_upon(): Display_uponContext {
		return this.getRuleContext(0, Display_uponContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form4) {
			listener.enterDisplay_statement_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form4) {
			listener.exitDisplay_statement_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form4) {
			return visitor.visitDisplay_statement_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_itemContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_item) {
			listener.enterSrc_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_item) {
			listener.exitSrc_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_item) {
			return visitor.visitSrc_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_uponContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_upon; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_upon) {
			listener.enterDisplay_upon(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_upon) {
			listener.exitDisplay_upon(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_upon) {
			return visitor.visitDisplay_upon(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_line) {
			listener.enterDisp_f3_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_line) {
			listener.exitDisp_f3_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_line) {
			return visitor.visitDisp_f3_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_column) {
			listener.enterDisp_f3_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_column) {
			listener.exitDisp_f3_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_column) {
			return visitor.visitDisp_f3_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form1_clauseContext extends ParserRuleContext {
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UPON, 0); }
	public out_dest(): Out_destContext | undefined {
		return this.tryGetRuleContext(0, Out_destContext);
	}
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form1_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form1_clause) {
			listener.enterDisplay_form1_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form1_clause) {
			listener.exitDisplay_form1_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form1_clause) {
			return visitor.visitDisplay_form1_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form2_clauseContext extends ParserRuleContext {
	public display_form1_clause(): Display_form1_clauseContext | undefined {
		return this.tryGetRuleContext(0, Display_form1_clauseContext);
	}
	public at_line_number(): At_line_numberContext | undefined {
		return this.tryGetRuleContext(0, At_line_numberContext);
	}
	public at_column_number(): At_column_numberContext | undefined {
		return this.tryGetRuleContext(0, At_column_numberContext);
	}
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public UNDERLINED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINED, 0); }
	public BOLD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOLD, 0); }
	public BLINKING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINKING, 0); }
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSED, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form2_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form2_clause) {
			listener.enterDisplay_form2_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form2_clause) {
			listener.exitDisplay_form2_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form2_clause) {
			return visitor.visitDisplay_form2_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_line_numberContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_line_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_line_number) {
			listener.enterAt_line_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_line_number) {
			listener.exitAt_line_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_line_number) {
			return visitor.visitAt_line_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_column_numberContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_column_number) {
			listener.enterAt_column_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_column_number) {
			listener.exitAt_column_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_column_number) {
			return visitor.visitAt_column_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Out_destContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_out_dest; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOut_dest) {
			listener.enterOut_dest(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOut_dest) {
			listener.exitOut_dest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOut_dest) {
			return visitor.visitOut_dest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_statementContext extends ParserRuleContext {
	public DELETE(): TerminalNode { return this.getToken(cobolParser.DELETE, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public on_key_variants(): On_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_key_variantsContext);
	}
	public END_DELETE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delete_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelete_statement) {
			listener.enterDelete_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelete_statement) {
			listener.exitDelete_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelete_statement) {
			return visitor.visitDelete_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Continue_statementContext extends ParserRuleContext {
	public CONTINUE(): TerminalNode { return this.getToken(cobolParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_continue_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterContinue_statement) {
			listener.enterContinue_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitContinue_statement) {
			listener.exitContinue_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitContinue_statement) {
			return visitor.visitContinue_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compute_statementContext extends ParserRuleContext {
	public COMPUTE(): TerminalNode { return this.getToken(cobolParser.COMPUTE, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_COMPUTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_COMPUTE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compute_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompute_statement) {
			listener.enterCompute_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompute_statement) {
			listener.exitCompute_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompute_statement) {
			return visitor.visitCompute_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_statementContext extends ParserRuleContext {
	public CLOSE(): TerminalNode { return this.getToken(cobolParser.CLOSE, 0); }
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public close_params(): Close_paramsContext[];
	public close_params(i: number): Close_paramsContext;
	public close_params(i?: number): Close_paramsContext | Close_paramsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Close_paramsContext);
		} else {
			return this.getRuleContext(i, Close_paramsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_statement) {
			listener.enterClose_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_statement) {
			listener.exitClose_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_statement) {
			return visitor.visitClose_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_paramsContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public REMOVAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REMOVAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REWIND, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_params; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_params) {
			listener.enterClose_params(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_params) {
			listener.exitClose_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_params) {
			return visitor.visitClose_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cancel_statementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(cobolParser.CANCEL, 0); }
	public prog_name(): Prog_nameContext[];
	public prog_name(i: number): Prog_nameContext;
	public prog_name(i?: number): Prog_nameContext | Prog_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Prog_nameContext);
		} else {
			return this.getRuleContext(i, Prog_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cancel_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCancel_statement) {
			listener.enterCancel_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCancel_statement) {
			listener.exitCancel_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCancel_statement) {
			return visitor.visitCancel_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_statementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(cobolParser.CALL, 0); }
	public prog_name(): Prog_nameContext {
		return this.getRuleContext(0, Prog_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public call_using(): Call_usingContext | undefined {
		return this.tryGetRuleContext(0, Call_usingContext);
	}
	public call_giving(): Call_givingContext | undefined {
		return this.tryGetRuleContext(0, Call_givingContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_CALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_CALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_statement) {
			listener.enterCall_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_statement) {
			listener.exitCall_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_statement) {
			return visitor.visitCall_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_givingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_giving) {
			listener.enterCall_giving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_giving) {
			listener.exitCall_giving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_giving) {
			return visitor.visitCall_giving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public using_arg(): Using_argContext[];
	public using_arg(i: number): Using_argContext;
	public using_arg(i?: number): Using_argContext | Using_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Using_argContext);
		} else {
			return this.getRuleContext(i, Using_argContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_using) {
			listener.enterCall_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_using) {
			listener.exitCall_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_using) {
			return visitor.visitCall_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_argContext extends ParserRuleContext {
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public argument(): ArgumentContext[];
	public argument(i: number): ArgumentContext;
	public argument(i?: number): ArgumentContext | ArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArgumentContext);
		} else {
			return this.getRuleContext(i, ArgumentContext);
		}
	}
	public using_prefix(): Using_prefixContext | undefined {
		return this.tryGetRuleContext(0, Using_prefixContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_arg; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_arg) {
			listener.enterUsing_arg(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_arg) {
			listener.exitUsing_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_arg) {
			return visitor.visitUsing_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_prefixContext extends ParserRuleContext {
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTENT, 0); }
	public DESCRIPTOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCRIPTOR, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_prefix; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_prefix) {
			listener.enterUsing_prefix(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_prefix) {
			listener.exitUsing_prefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_prefix) {
			return visitor.visitUsing_prefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_argument; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArgument) {
			listener.enterArgument(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArgument) {
			listener.exitArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArgument) {
			return visitor.visitArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prog_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prog_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProg_name) {
			listener.enterProg_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProg_name) {
			listener.exitProg_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProg_name) {
			return visitor.visitProg_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_statementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(cobolParser.ALTER, 0); }
	public alter_proc(): Alter_procContext[];
	public alter_proc(i: number): Alter_procContext;
	public alter_proc(i?: number): Alter_procContext | Alter_procContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_procContext);
		} else {
			return this.getRuleContext(i, Alter_procContext);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.TO);
		} else {
			return this.getToken(cobolParser.TO, i);
		}
	}
	public alter_new_proc(): Alter_new_procContext[];
	public alter_new_proc(i: number): Alter_new_procContext;
	public alter_new_proc(i?: number): Alter_new_procContext | Alter_new_procContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_new_procContext);
		} else {
			return this.getRuleContext(i, Alter_new_procContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public PROCEED(): TerminalNode[];
	public PROCEED(i: number): TerminalNode;
	public PROCEED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.PROCEED);
		} else {
			return this.getToken(cobolParser.PROCEED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_statement) {
			listener.enterAlter_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_statement) {
			listener.exitAlter_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_statement) {
			return visitor.visitAlter_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_new_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_new_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_new_proc) {
			listener.enterAlter_new_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_new_proc) {
			listener.exitAlter_new_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_new_proc) {
			return visitor.visitAlter_new_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_proc) {
			listener.enterAlter_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_proc) {
			listener.exitAlter_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_proc) {
			return visitor.visitAlter_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_statementContext extends ParserRuleContext {
	public ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADD, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public add_grp(): Add_grpContext[];
	public add_grp(i: number): Add_grpContext;
	public add_grp(i?: number): Add_grpContext | Add_grpContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_grpContext);
		} else {
			return this.getRuleContext(i, Add_grpContext);
		}
	}
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ADD, 0); }
	public add_num(): Add_numContext[];
	public add_num(i: number): Add_numContext;
	public add_num(i?: number): Add_numContext | Add_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_numContext);
		} else {
			return this.getRuleContext(i, Add_numContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_statement) {
			listener.enterAdd_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_statement) {
			listener.exitAdd_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_statement) {
			return visitor.visitAdd_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_grpContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_grp; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_grp) {
			listener.enterAdd_grp(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_grp) {
			listener.exitAdd_grp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_grp) {
			return visitor.visitAdd_grp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_num) {
			listener.enterAdd_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_num) {
			listener.exitAdd_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_num) {
			return visitor.visitAdd_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_statementContext extends ParserRuleContext {
	public accept_form1(): Accept_form1Context | undefined {
		return this.tryGetRuleContext(0, Accept_form1Context);
	}
	public accept_form2(): Accept_form2Context | undefined {
		return this.tryGetRuleContext(0, Accept_form2Context);
	}
	public accept_form3(): Accept_form3Context | undefined {
		return this.tryGetRuleContext(0, Accept_form3Context);
	}
	public accept_form4(): Accept_form4Context | undefined {
		return this.tryGetRuleContext(0, Accept_form4Context);
	}
	public accept_form5(): Accept_form5Context | undefined {
		return this.tryGetRuleContext(0, Accept_form5Context);
	}
	public accept_form6(): Accept_form6Context | undefined {
		return this.tryGetRuleContext(0, Accept_form6Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_statement) {
			listener.enterAccept_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_statement) {
			listener.exitAccept_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_statement) {
			return visitor.visitAccept_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exception_variantsContext extends ParserRuleContext {
	public on_exception(): On_exceptionContext[];
	public on_exception(i: number): On_exceptionContext;
	public on_exception(i?: number): On_exceptionContext | On_exceptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_exceptionContext);
		} else {
			return this.getRuleContext(i, On_exceptionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception_variants) {
			listener.enterOn_exception_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception_variants) {
			listener.exitOn_exception_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception_variants) {
			return visitor.visitOn_exception_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_end_variantsContext extends ParserRuleContext {
	public at_end(): At_endContext[];
	public at_end(i: number): At_endContext;
	public at_end(i?: number): At_endContext | At_endContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_endContext);
		} else {
			return this.getRuleContext(i, At_endContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end_variants) {
			listener.enterAt_end_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end_variants) {
			listener.exitAt_end_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end_variants) {
			return visitor.visitAt_end_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_size_variantsContext extends ParserRuleContext {
	public on_size(): On_sizeContext[];
	public on_size(i: number): On_sizeContext;
	public on_size(i?: number): On_sizeContext | On_sizeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_sizeContext);
		} else {
			return this.getRuleContext(i, On_sizeContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size_variants) {
			listener.enterOn_size_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size_variants) {
			listener.exitOn_size_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size_variants) {
			return visitor.visitOn_size_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_key_variantsContext extends ParserRuleContext {
	public on_key(): On_keyContext[];
	public on_key(i: number): On_keyContext;
	public on_key(i?: number): On_keyContext | On_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_keyContext);
		} else {
			return this.getRuleContext(i, On_keyContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_key_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_key_variants) {
			listener.enterOn_key_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_key_variants) {
			listener.exitOn_key_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_key_variants) {
			return visitor.visitOn_key_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form6Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public accept6_item(): Accept6_itemContext {
		return this.getRuleContext(0, Accept6_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form6; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form6) {
			listener.enterAccept_form6(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form6) {
			listener.exitAccept_form6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form6) {
			return visitor.visitAccept_form6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept6_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept6_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept6_item) {
			listener.enterAccept6_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept6_item) {
			listener.exitAccept6_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept6_item) {
			return visitor.visitAccept6_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form1Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public input_source(): Input_sourceContext | undefined {
		return this.tryGetRuleContext(0, Input_sourceContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form1) {
			listener.enterAccept_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form1) {
			listener.exitAccept_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form1) {
			return visitor.visitAccept_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form2Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public date_time(): Date_timeContext {
		return this.getRuleContext(0, Date_timeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form2) {
			listener.enterAccept_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form2) {
			listener.exitAccept_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form2) {
			return visitor.visitAccept_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_form3_clause(): Accept_form3_clauseContext[];
	public accept_form3_clause(i: number): Accept_form3_clauseContext;
	public accept_form3_clause(i?: number): Accept_form3_clauseContext | Accept_form3_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form3_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form3_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3) {
			listener.enterAccept_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3) {
			listener.exitAccept_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3) {
			return visitor.visitAccept_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public KEY(): TerminalNode { return this.getToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext {
		return this.getRuleContext(0, Key_dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public accept_form4_clause(): Accept_form4_clauseContext[];
	public accept_form4_clause(i: number): Accept_form4_clauseContext;
	public accept_form4_clause(i?: number): Accept_form4_clauseContext | Accept_form4_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form4_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form4_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4) {
			listener.enterAccept_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4) {
			listener.exitAccept_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4) {
			return visitor.visitAccept_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form5Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public screen_name(): Screen_nameContext {
		return this.getRuleContext(0, Screen_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_at(): Accept_atContext | undefined {
		return this.tryGetRuleContext(0, Accept_atContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form5; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form5) {
			listener.enterAccept_form5(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form5) {
			listener.exitAccept_form5(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form5) {
			return visitor.visitAccept_form5(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_atContext extends ParserRuleContext {
	public accept_at_line(): Accept_at_lineContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_lineContext);
	}
	public accept_at_column(): Accept_at_columnContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at) {
			listener.enterAccept_at(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at) {
			listener.exitAccept_at(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at) {
			return visitor.visitAccept_at(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_line) {
			listener.enterAccept_at_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_line) {
			listener.exitAccept_at_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_line) {
			return visitor.visitAccept_at_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_column) {
			listener.enterAccept_at_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_column) {
			listener.exitAccept_at_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_column) {
			return visitor.visitAccept_at_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext | undefined {
		return this.tryGetRuleContext(0, Number_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4_clause) {
			listener.enterAccept_form4_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4_clause) {
			listener.exitAccept_form4_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4_clause) {
			return visitor.visitAccept_form4_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3_clauseContext extends ParserRuleContext {
	public accept_form4_clause(): Accept_form4_clauseContext | undefined {
		return this.tryGetRuleContext(0, Accept_form4_clauseContext);
	}
	public UNDERLINED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINED, 0); }
	public BOLD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOLD, 0); }
	public BLINKING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINKING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROTECTED, 0); }
	public protected_value(): Protected_valueContext | undefined {
		return this.tryGetRuleContext(0, Protected_valueContext);
	}
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSED, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ECHO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ECHO, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFAULT, 0); }
	public def_value(): Def_valueContext | undefined {
		return this.tryGetRuleContext(0, Def_valueContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Key_dest_itemContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3_clause) {
			listener.enterAccept_form3_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3_clause) {
			listener.exitAccept_form3_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3_clause) {
			return visitor.visitAccept_form3_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_dest_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_dest_item) {
			listener.enterKey_dest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_dest_item) {
			listener.exitKey_dest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_dest_item) {
			return visitor.visitKey_dest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_valueContext extends ParserRuleContext {
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURRENT, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_def_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDef_value) {
			listener.enterDef_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDef_value) {
			listener.exitDef_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDef_value) {
			return visitor.visitDef_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Protected_valueContext extends ParserRuleContext {
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public prot_size_value(): Prot_size_valueContext | undefined {
		return this.tryGetRuleContext(0, Prot_size_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AUTOTERMINATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOTERMINATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public EDITING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EDITING, 0); }
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public prot_fill_lit(): Prot_fill_litContext | undefined {
		return this.tryGetRuleContext(0, Prot_fill_litContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_protected_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProtected_value) {
			listener.enterProtected_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProtected_value) {
			listener.exitProtected_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProtected_value) {
			return visitor.visitProtected_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_fill_litContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_fill_lit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_fill_lit) {
			listener.enterProt_fill_lit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_fill_lit) {
			listener.exitProt_fill_lit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_fill_lit) {
			return visitor.visitProt_fill_lit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_size_valueContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_size_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_size_value) {
			listener.enterProt_size_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_size_value) {
			listener.exitProt_size_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_size_value) {
			return visitor.visitProt_size_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Number_valueContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_number_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNumber_value) {
			listener.enterNumber_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNumber_value) {
			listener.exitNumber_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNumber_value) {
			return visitor.visitNumber_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_timeContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DATE, 0); }
	public YYYYMMDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYMMDD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY, 0); }
	public YYYYDDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYDDD, 0); }
	public DAY_OF_WEEK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY_OF_WEEK, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TIME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_time; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_time) {
			listener.enterDate_time(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_time) {
			listener.exitDate_time(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_time) {
			return visitor.visitDate_time(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dest_itemContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDest_item) {
			listener.enterDest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDest_item) {
			listener.exitDest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDest_item) {
			return visitor.visitDest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_sourceContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_source) {
			listener.enterInput_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_source) {
			listener.exitInput_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_source) {
			return visitor.visitInput_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_endContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(cobolParser.END, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end) {
			listener.enterAt_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end) {
			listener.exitAt_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end) {
			return visitor.visitAt_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exceptionContext extends ParserRuleContext {
	public EXCEPTION(): TerminalNode { return this.getToken(cobolParser.EXCEPTION, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception) {
			listener.enterOn_exception(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception) {
			listener.exitOn_exception(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception) {
			return visitor.visitOn_exception(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_sizeContext extends ParserRuleContext {
	public SIZE(): TerminalNode { return this.getToken(cobolParser.SIZE, 0); }
	public ERROR(): TerminalNode { return this.getToken(cobolParser.ERROR, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size) {
			listener.enterOn_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size) {
			listener.exitOn_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size) {
			return visitor.visitOn_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_keyContext extends ParserRuleContext {
	public INVALID(): TerminalNode { return this.getToken(cobolParser.INVALID, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_key) {
			listener.enterOn_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_key) {
			listener.exitOn_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_key) {
			return visitor.visitOn_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_divisionContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_section(): File_sectionContext | undefined {
		return this.tryGetRuleContext(0, File_sectionContext);
	}
	public working_storage_section(): Working_storage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Working_storage_sectionContext);
	}
	public linkage_section(): Linkage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Linkage_sectionContext);
	}
	public report_section(): Report_sectionContext | undefined {
		return this.tryGetRuleContext(0, Report_sectionContext);
	}
	public screen_section(): Screen_sectionContext | undefined {
		return this.tryGetRuleContext(0, Screen_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division) {
			listener.enterData_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division) {
			listener.exitData_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division) {
			return visitor.visitData_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_description_entry(): File_description_entryContext[];
	public file_description_entry(i: number): File_description_entryContext;
	public file_description_entry(i?: number): File_description_entryContext | File_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_description_entryContext);
		} else {
			return this.getRuleContext(i, File_description_entryContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext[];
	public sort_merge_file_description_entry(i: number): Sort_merge_file_description_entryContext;
	public sort_merge_file_description_entry(i?: number): Sort_merge_file_description_entryContext | Sort_merge_file_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_description_entryContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_description_entryContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_section) {
			listener.enterFile_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_section) {
			listener.exitFile_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_section) {
			return visitor.visitFile_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_sectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(cobolParser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_section) {
			listener.enterWorking_storage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_section) {
			listener.exitWorking_storage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_section) {
			return visitor.visitWorking_storage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Linkage_sectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(cobolParser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linkage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinkage_section) {
			listener.enterLinkage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinkage_section) {
			listener.exitLinkage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinkage_section) {
			return visitor.visitLinkage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_sectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(cobolParser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public report_group_description_entry(): Report_group_description_entryContext[];
	public report_group_description_entry(i: number): Report_group_description_entryContext;
	public report_group_description_entry(i?: number): Report_group_description_entryContext | Report_group_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_group_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_section) {
			listener.enterReport_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_section) {
			listener.exitReport_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_section) {
			return visitor.visitReport_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_sectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(cobolParser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public screen_description_entry(): Screen_description_entryContext[];
	public screen_description_entry(i: number): Screen_description_entryContext;
	public screen_description_entry(i?: number): Screen_description_entryContext | Screen_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_entryContext);
		} else {
			return this.getRuleContext(i, Screen_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_section) {
			listener.enterScreen_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_section) {
			listener.exitScreen_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_section) {
			return visitor.visitScreen_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_description_entryContext extends ParserRuleContext {
	public FD(): TerminalNode { return this.getToken(cobolParser.FD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public fd_clause(): Fd_clauseContext[];
	public fd_clause(i: number): Fd_clauseContext;
	public fd_clause(i?: number): Fd_clauseContext | Fd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fd_clauseContext);
		} else {
			return this.getRuleContext(i, Fd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description_entry) {
			listener.enterFile_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description_entry) {
			listener.exitFile_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description_entry) {
			return visitor.visitFile_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_description_entryContext extends ParserRuleContext {
	public SD(): TerminalNode { return this.getToken(cobolParser.SD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sd_clause(): Sd_clauseContext[];
	public sd_clause(i: number): Sd_clauseContext;
	public sd_clause(i?: number): Sd_clauseContext | Sd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sd_clauseContext);
		} else {
			return this.getRuleContext(i, Sd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description_entry) {
			listener.enterSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description_entry) {
			listener.exitSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description_entry) {
			return visitor.visitSort_merge_file_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_description_entryContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(cobolParser.RD, 0); }
	public report_name(): Report_nameContext {
		return this.getRuleContext(0, Report_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rd_clause(): Rd_clauseContext[];
	public rd_clause(i: number): Rd_clauseContext;
	public rd_clause(i?: number): Rd_clauseContext | Rd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rd_clauseContext);
		} else {
			return this.getRuleContext(i, Rd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description_entry) {
			listener.enterReport_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description_entry) {
			listener.exitReport_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description_entry) {
			return visitor.visitReport_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fd_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public value_of_id(): Value_of_idContext | undefined {
		return this.tryGetRuleContext(0, Value_of_idContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	public linage(): LinageContext | undefined {
		return this.tryGetRuleContext(0, LinageContext);
	}
	public report_is(): Report_isContext | undefined {
		return this.tryGetRuleContext(0, Report_isContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFd_clause) {
			listener.enterFd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFd_clause) {
			listener.exitFd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFd_clause) {
			return visitor.visitFd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_description_entryContext extends ParserRuleContext {
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_description_entry) {
			listener.enterRecord_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_description_entry) {
			listener.exitRecord_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_description_entry) {
			return visitor.visitRecord_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public REDEFINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REDEFINES, 0); }
	public other_data_item(): Other_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Other_data_itemContext);
	}
	public data_description_clause(): Data_description_clauseContext[];
	public data_description_clause(i: number): Data_description_clauseContext;
	public data_description_clause(i?: number): Data_description_clauseContext | Data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Data_description_clauseContext);
		}
	}
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_entry) {
			listener.enterData_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_entry) {
			listener.exitData_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_entry) {
			return visitor.visitData_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Level_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_level_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLevel_number) {
			listener.enterLevel_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLevel_number) {
			listener.exitLevel_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLevel_number) {
			return visitor.visitLevel_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public usage(): UsageContext | undefined {
		return this.tryGetRuleContext(0, UsageContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public occurs(): OccursContext | undefined {
		return this.tryGetRuleContext(0, OccursContext);
	}
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public value_is(): Value_isContext | undefined {
		return this.tryGetRuleContext(0, Value_isContext);
	}
	public renames(): RenamesContext | undefined {
		return this.tryGetRuleContext(0, RenamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_clause) {
			listener.enterData_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_clause) {
			listener.exitData_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_clause) {
			return visitor.visitData_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenamesContext extends ParserRuleContext {
	public RENAMES(): TerminalNode { return this.getToken(cobolParser.RENAMES, 0); }
	public rename_start(): Rename_startContext {
		return this.getRuleContext(0, Rename_startContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rename_end(): Rename_endContext | undefined {
		return this.tryGetRuleContext(0, Rename_endContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_renames; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRenames) {
			listener.enterRenames(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRenames) {
			listener.exitRenames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRenames) {
			return visitor.visitRenames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_startContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_start; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_start) {
			listener.enterRename_start(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_start) {
			listener.exitRename_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_start) {
			return visitor.visitRename_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_endContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_end) {
			listener.enterRename_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_end) {
			listener.exitRename_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_end) {
			return visitor.visitRename_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_isContext extends ParserRuleContext {
	public value_is_definition(): Value_is_definitionContext[];
	public value_is_definition(i: number): Value_is_definitionContext;
	public value_is_definition(i?: number): Value_is_definitionContext | Value_is_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Value_is_definitionContext);
		} else {
			return this.getRuleContext(i, Value_is_definitionContext);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is) {
			listener.enterValue_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is) {
			listener.exitValue_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is) {
			return visitor.visitValue_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definitionContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public value_is_definition_thru(): Value_is_definition_thruContext | undefined {
		return this.tryGetRuleContext(0, Value_is_definition_thruContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition) {
			listener.enterValue_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition) {
			listener.exitValue_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition) {
			return visitor.visitValue_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_partContext extends ParserRuleContext {
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public ref_data_name(): Ref_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Ref_data_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public external_name(): External_nameContext | undefined {
		return this.tryGetRuleContext(0, External_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_part) {
			listener.enterValue_is_definition_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_part) {
			listener.exitValue_is_definition_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_part) {
			return visitor.visitValue_is_definition_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_thruContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_thru; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_thru) {
			listener.enterValue_is_definition_thru(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_thru) {
			listener.exitValue_is_definition_thru(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_thru) {
			return visitor.visitValue_is_definition_thru(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_external_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExternal_name) {
			listener.enterExternal_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExternal_name) {
			listener.exitExternal_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExternal_name) {
			return visitor.visitExternal_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ref_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ref_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRef_data_name) {
			listener.enterRef_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRef_data_name) {
			listener.exitRef_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRef_data_name) {
			return visitor.visitRef_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_literal) {
			listener.enterValue_is_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_literal) {
			listener.exitValue_is_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_literal) {
			return visitor.visitValue_is_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OccursContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(cobolParser.OCCURS, 0); }
	public times_definition(): Times_definitionContext {
		return this.getRuleContext(0, Times_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public key_is(): Key_isContext[];
	public key_is(i: number): Key_isContext;
	public key_is(i?: number): Key_isContext | Key_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_isContext);
		} else {
			return this.getRuleContext(i, Key_isContext);
		}
	}
	public indexed_by(): Indexed_byContext | undefined {
		return this.tryGetRuleContext(0, Indexed_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_occurs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOccurs) {
			listener.enterOccurs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOccurs) {
			listener.exitOccurs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOccurs) {
			return visitor.visitOccurs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indexed_byContext extends ParserRuleContext {
	public INDEXED(): TerminalNode { return this.getToken(cobolParser.INDEXED, 0); }
	public ind_name(): Ind_nameContext[];
	public ind_name(i: number): Ind_nameContext;
	public ind_name(i?: number): Ind_nameContext | Ind_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ind_nameContext);
		} else {
			return this.getRuleContext(i, Ind_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_indexed_by; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIndexed_by) {
			listener.enterIndexed_by(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIndexed_by) {
			listener.exitIndexed_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIndexed_by) {
			return visitor.visitIndexed_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ind_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ind_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInd_name) {
			listener.enterInd_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInd_name) {
			listener.exitInd_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInd_name) {
			return visitor.visitInd_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_isContext extends ParserRuleContext {
	public key_name(): Key_nameContext[];
	public key_name(i: number): Key_nameContext;
	public key_name(i?: number): Key_nameContext | Key_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_nameContext);
		} else {
			return this.getRuleContext(i, Key_nameContext);
		}
	}
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_is) {
			listener.enterKey_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_is) {
			listener.exitKey_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_is) {
			return visitor.visitKey_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_name) {
			listener.enterKey_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_name) {
			listener.exitKey_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_name) {
			return visitor.visitKey_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Times_definitionContext extends ParserRuleContext {
	public table_size(): Table_sizeContext | undefined {
		return this.tryGetRuleContext(0, Table_sizeContext);
	}
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public min_times(): Min_timesContext | undefined {
		return this.tryGetRuleContext(0, Min_timesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public max_times(): Max_timesContext | undefined {
		return this.tryGetRuleContext(0, Max_timesContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_times_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTimes_definition) {
			listener.enterTimes_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTimes_definition) {
			listener.exitTimes_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTimes_definition) {
			return visitor.visitTimes_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_table_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTable_size) {
			listener.enterTable_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTable_size) {
			listener.exitTable_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTable_size) {
			return visitor.visitTable_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Min_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_min_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMin_times) {
			listener.enterMin_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMin_times) {
			listener.exitMin_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMin_times) {
			return visitor.visitMin_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Max_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_max_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMax_times) {
			listener.enterMax_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMax_times) {
			listener.exitMax_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMax_times) {
			return visitor.visitMax_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_description_entryContext extends ParserRuleContext {
	public report_group_data_description(): Report_group_data_descriptionContext[];
	public report_group_data_description(i: number): Report_group_data_descriptionContext;
	public report_group_data_description(i?: number): Report_group_data_descriptionContext | Report_group_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_group_data_descriptionContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_description_entry) {
			listener.enterReport_group_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_description_entry) {
			listener.exitReport_group_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_description_entry) {
			return visitor.visitReport_group_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_descriptionContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public report_group_data_description_clause(): Report_group_data_description_clauseContext[];
	public report_group_data_description_clause(i: number): Report_group_data_description_clauseContext;
	public report_group_data_description_clause(i?: number): Report_group_data_description_clauseContext | Report_group_data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Report_group_data_description_clauseContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description) {
			listener.enterReport_group_data_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description) {
			listener.exitReport_group_data_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description) {
			return visitor.visitReport_group_data_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_description_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public line_num_definition(): Line_num_definitionContext | undefined {
		return this.tryGetRuleContext(0, Line_num_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GROUP, 0); }
	public next_group_definition(): Next_group_definitionContext | undefined {
		return this.tryGetRuleContext(0, Next_group_definitionContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public type_is_definition(): Type_is_definitionContext | undefined {
		return this.tryGetRuleContext(0, Type_is_definitionContext);
	}
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public column_number(): Column_numberContext | undefined {
		return this.tryGetRuleContext(0, Column_numberContext);
	}
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDICATE, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SOURCE, 0); }
	public source_name(): Source_nameContext | undefined {
		return this.tryGetRuleContext(0, Source_nameContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public sum(): SumContext | undefined {
		return this.tryGetRuleContext(0, SumContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description_clause) {
			listener.enterReport_group_data_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description_clause) {
			listener.exitReport_group_data_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description_clause) {
			return visitor.visitReport_group_data_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_isContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_is) {
			listener.enterSign_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_is) {
			listener.exitSign_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_is) {
			return visitor.visitSign_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SumContext extends ParserRuleContext {
	public SUM(): TerminalNode[];
	public SUM(i: number): TerminalNode;
	public SUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SUM);
		} else {
			return this.getToken(cobolParser.SUM, i);
		}
	}
	public sum_name(): Sum_nameContext[];
	public sum_name(i: number): Sum_nameContext;
	public sum_name(i?: number): Sum_nameContext | Sum_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sum_nameContext);
		} else {
			return this.getRuleContext(i, Sum_nameContext);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RESET, 0); }
	public control_foot_name(): Control_foot_nameContext | undefined {
		return this.tryGetRuleContext(0, Control_foot_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode[];
	public UPON(i: number): TerminalNode;
	public UPON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UPON);
		} else {
			return this.getToken(cobolParser.UPON, i);
		}
	}
	public detail_report_group_name(): Detail_report_group_nameContext[];
	public detail_report_group_name(i: number): Detail_report_group_nameContext;
	public detail_report_group_name(i?: number): Detail_report_group_nameContext | Detail_report_group_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Detail_report_group_nameContext);
		} else {
			return this.getRuleContext(i, Detail_report_group_nameContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum) {
			listener.enterSum(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum) {
			listener.exitSum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum) {
			return visitor.visitSum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_foot_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_foot_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_foot_name) {
			listener.enterControl_foot_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_foot_name) {
			listener.exitControl_foot_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_foot_name) {
			return visitor.visitControl_foot_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Detail_report_group_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_detail_report_group_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDetail_report_group_name) {
			listener.enterDetail_report_group_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDetail_report_group_name) {
			listener.exitDetail_report_group_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDetail_report_group_name) {
			return visitor.visitDetail_report_group_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sum_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum_name) {
			listener.enterSum_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum_name) {
			listener.exitSum_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum_name) {
			return visitor.visitSum_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_name) {
			listener.enterSource_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_name) {
			listener.exitSource_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_name) {
			return visitor.visitSource_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColumn_number) {
			listener.enterColumn_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColumn_number) {
			listener.exitColumn_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColumn_number) {
			return visitor.visitColumn_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_is_definitionContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RH, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PH, 0); }
	public type_control_name(): Type_control_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CH, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CF, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PF, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_is_definition) {
			listener.enterType_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_is_definition) {
			listener.exitType_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_is_definition) {
			return visitor.visitType_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_control_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_control_name) {
			listener.enterType_control_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_control_name) {
			listener.exitType_control_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_control_name) {
			return visitor.visitType_control_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Next_group_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_next_group_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNext_group_definition) {
			listener.enterNext_group_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNext_group_definition) {
			listener.exitNext_group_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNext_group_definition) {
			return visitor.visitNext_group_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_num_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext {
		return this.getRuleContext(0, Line_numContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num_definition) {
			listener.enterLine_num_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num_definition) {
			listener.exitLine_num_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num_definition) {
			return visitor.visitLine_num_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num) {
			listener.enterLine_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num) {
			listener.exitLine_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num) {
			return visitor.visitLine_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rd_clauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CODE, 0); }
	public report_code(): Report_codeContext | undefined {
		return this.tryGetRuleContext(0, Report_codeContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CONTROLS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROLS, 0); }
	public control_name(): Control_nameContext[];
	public control_name(i: number): Control_nameContext;
	public control_name(i?: number): Control_nameContext | Control_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Control_nameContext);
		} else {
			return this.getRuleContext(i, Control_nameContext);
		}
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public page_size_rd(): Page_size_rdContext | undefined {
		return this.tryGetRuleContext(0, Page_size_rdContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMITS, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public heading_line(): Heading_lineContext | undefined {
		return this.tryGetRuleContext(0, Heading_lineContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public DETAIL(): TerminalNode[];
	public DETAIL(i: number): TerminalNode;
	public DETAIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DETAIL);
		} else {
			return this.getToken(cobolParser.DETAIL, i);
		}
	}
	public first_detail_line(): First_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, First_detail_lineContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LAST, 0); }
	public last_detail_line(): Last_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, Last_detail_lineContext);
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line_rd(): Footing_line_rdContext | undefined {
		return this.tryGetRuleContext(0, Footing_line_rdContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRd_clause) {
			listener.enterRd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRd_clause) {
			listener.exitRd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRd_clause) {
			return visitor.visitRd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_line_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line_rd) {
			listener.enterFooting_line_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line_rd) {
			listener.exitFooting_line_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line_rd) {
			return visitor.visitFooting_line_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_detail_line) {
			listener.enterLast_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_detail_line) {
			listener.exitLast_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_detail_line) {
			return visitor.visitLast_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_detail_line) {
			listener.enterFirst_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_detail_line) {
			listener.exitFirst_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_detail_line) {
			return visitor.visitFirst_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Heading_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_heading_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterHeading_line) {
			listener.enterHeading_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitHeading_line) {
			listener.exitHeading_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitHeading_line) {
			return visitor.visitHeading_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_size_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size_rd) {
			listener.enterPage_size_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size_rd) {
			listener.exitPage_size_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size_rd) {
			return visitor.visitPage_size_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_name) {
			listener.enterControl_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_name) {
			listener.exitControl_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_name) {
			return visitor.visitControl_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_codeContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_code; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_code) {
			listener.enterReport_code(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_code) {
			listener.exitReport_code(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_code) {
			return visitor.visitReport_code(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsageContext extends ParserRuleContext {
	public usage_definition(): Usage_definitionContext {
		return this.getRuleContext(0, Usage_definitionContext);
	}
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage) {
			listener.enterUsage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage) {
			listener.exitUsage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage) {
			return visitor.visitUsage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_definitionContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY, 0); }
	public BINARY_CHAR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_CHAR, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNSIGNED, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BINARY_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_SHORT, 0); }
	public BINARY_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_LONG, 0); }
	public BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_DOUBLE, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_5, 0); }
	public COMPUTATIONAL_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_X, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_5, 0); }
	public COMP_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_X, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public FLOAT_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_SHORT, 0); }
	public FLOAT_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_LONG, 0); }
	public FLOAT_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_EXTENDED, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEX, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public POINTER_64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER_64, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_definition) {
			listener.enterUsage_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_definition) {
			listener.exitUsage_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_definition) {
			return visitor.visitUsage_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureContext extends ParserRuleContext {
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPicture) {
			listener.enterPicture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPicture) {
			listener.exitPicture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPicture) {
			return visitor.visitPicture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public char_str_part(): Char_str_partContext[];
	public char_str_part(i: number): Char_str_partContext;
	public char_str_part(i?: number): Char_str_partContext | Char_str_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_str_partContext);
		} else {
			return this.getRuleContext(i, Char_str_partContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_character_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCharacter_string) {
			return visitor.visitCharacter_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_str_partContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_str_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_str_part) {
			listener.enterChar_str_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_str_part) {
			listener.exitChar_str_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_str_part) {
			return visitor.visitChar_str_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Other_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_other_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOther_data_item) {
			listener.enterOther_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOther_data_item) {
			listener.exitOther_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOther_data_item) {
			return visitor.visitOther_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_name) {
			listener.enterData_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_name) {
			listener.exitData_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_name) {
			return visitor.visitData_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sd_clauseContext extends ParserRuleContext {
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSd_clause) {
			listener.enterSd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSd_clause) {
			listener.exitSd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSd_clause) {
			return visitor.visitSd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_isContext extends ParserRuleContext {
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_is) {
			listener.enterReport_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_is) {
			listener.exitReport_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_is) {
			return visitor.visitReport_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_name) {
			listener.enterReport_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_name) {
			listener.exitReport_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_name) {
			return visitor.visitReport_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(cobolParser.LINAGE, 0); }
	public page_size(): Page_sizeContext {
		return this.getRuleContext(0, Page_sizeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.LINES);
		} else {
			return this.getToken(cobolParser.LINES, i);
		}
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line(): Footing_lineContext | undefined {
		return this.tryGetRuleContext(0, Footing_lineContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TOP, 0); }
	public top_lines(): Top_linesContext | undefined {
		return this.tryGetRuleContext(0, Top_linesContext);
	}
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOTTOM, 0); }
	public bottom_lines(): Bottom_linesContext | undefined {
		return this.tryGetRuleContext(0, Bottom_linesContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AT);
		} else {
			return this.getToken(cobolParser.AT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinage) {
			listener.enterLinage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinage) {
			listener.exitLinage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinage) {
			return visitor.visitLinage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bottom_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bottom_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBottom_lines) {
			listener.enterBottom_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBottom_lines) {
			listener.exitBottom_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBottom_lines) {
			return visitor.visitBottom_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_lines) {
			listener.enterTop_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_lines) {
			listener.exitTop_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_lines) {
			return visitor.visitTop_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line) {
			listener.enterFooting_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line) {
			listener.exitFooting_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line) {
			return visitor.visitFooting_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size) {
			listener.enterPage_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size) {
			listener.exitPage_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size) {
			return visitor.visitPage_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_recContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public rec_name(): Rec_nameContext[];
	public rec_name(i: number): Rec_nameContext;
	public rec_name(i?: number): Rec_nameContext | Rec_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_nameContext);
		} else {
			return this.getRuleContext(i, Rec_nameContext);
		}
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_rec) {
			listener.enterData_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_rec) {
			listener.exitData_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_rec) {
			return visitor.visitData_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_name) {
			listener.enterRec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_name) {
			listener.exitRec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_name) {
			return visitor.visitRec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_idContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(cobolParser.OF, 0); }
	public value_of_id_definition(): Value_of_id_definitionContext {
		return this.getRuleContext(0, Value_of_id_definitionContext);
	}
	public ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ID, 0); }
	public FILE_ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE_ID, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id) {
			listener.enterValue_of_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id) {
			listener.exitValue_of_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id) {
			return visitor.visitValue_of_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_id_definitionContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id_definition) {
			listener.enterValue_of_id_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id_definition) {
			listener.exitValue_of_id_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id_definition) {
			return visitor.visitValue_of_id_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(cobolParser.LABEL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_label; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_definition(): Record_definitionContext {
		return this.getRuleContext(0, Record_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord) {
			listener.enterRecord(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord) {
			listener.exitRecord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord) {
			return visitor.visitRecord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_definitionContext extends ParserRuleContext {
	public longest_rec(): Longest_recContext | undefined {
		return this.tryGetRuleContext(0, Longest_recContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public shortest_rec(): Shortest_recContext | undefined {
		return this.tryGetRuleContext(0, Shortest_recContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_definition) {
			listener.enterRecord_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_definition) {
			listener.exitRecord_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_definition) {
			return visitor.visitRecord_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Depending_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_depending_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDepending_item) {
			listener.enterDepending_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDepending_item) {
			listener.exitDepending_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDepending_item) {
			return visitor.visitDepending_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Shortest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_shortest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterShortest_rec) {
			listener.enterShortest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitShortest_rec) {
			listener.exitShortest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitShortest_rec) {
			return visitor.visitShortest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Longest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_longest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLongest_rec) {
			listener.enterLongest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLongest_rec) {
			listener.exitLongest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLongest_rec) {
			return visitor.visitLongest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public screen_description_clause(): Screen_description_clauseContext[];
	public screen_description_clause(i: number): Screen_description_clauseContext;
	public screen_description_clause(i?: number): Screen_description_clauseContext | Screen_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_clauseContext);
		} else {
			return this.getRuleContext(i, Screen_description_clauseContext);
		}
	}
	public screen_name(): Screen_nameContext | undefined {
		return this.tryGetRuleContext(0, Screen_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_entry) {
			listener.enterScreen_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_entry) {
			listener.exitScreen_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_entry) {
			return visitor.visitScreen_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_name) {
			listener.enterScreen_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_name) {
			listener.exitScreen_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_name) {
			return visitor.visitScreen_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_clauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOREGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOREGROUND_COLOR, 0); }
	public color_num(): Color_numContext | undefined {
		return this.tryGetRuleContext(0, Color_numContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public BACKGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BACKGROUND_COLOR, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTO, 0); }
	public SECURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SECURE, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REQUIRED, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FULL, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public BLINK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINK, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOS, 0); }
	public HIGHLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGHLIGHT, 0); }
	public LOWLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOWLIGHT, 0); }
	public REVERSE_VIDEO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSE_VIDEO, 0); }
	public UNDERLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINE, 0); }
	public src_number(): Src_numberContext | undefined {
		return this.tryGetRuleContext(0, Src_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public scr_pic_using(): Scr_pic_usingContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_usingContext);
	}
	public scr_pic_from(): Scr_pic_fromContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_fromContext);
	}
	public scr_pic_to(): Scr_pic_toContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_clause) {
			listener.enterScreen_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_clause) {
			listener.exitScreen_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_clause) {
			return visitor.visitScreen_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_using) {
			listener.enterScr_pic_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_using) {
			listener.exitScr_pic_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_using) {
			return visitor.visitScr_pic_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_fromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_from; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_from) {
			listener.enterScr_pic_from(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_from) {
			listener.exitScr_pic_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_from) {
			return visitor.visitScr_pic_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_toContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_to) {
			listener.enterScr_pic_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_to) {
			listener.exitScr_pic_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_to) {
			return visitor.visitScr_pic_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nonnumeric_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_nonnumeric_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNonnumeric_literal) {
			listener.enterNonnumeric_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNonnumeric_literal) {
			listener.exitNonnumeric_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNonnumeric_literal) {
			return visitor.visitNonnumeric_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_numberContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_number) {
			listener.enterSrc_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_number) {
			listener.exitSrc_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_number) {
			return visitor.visitSrc_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Color_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_color_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColor_num) {
			listener.enterColor_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColor_num) {
			listener.exitColor_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColor_num) {
			return visitor.visitColor_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_divisionContext extends ParserRuleContext {
	public IDENTIFICATION_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.IDENTIFICATION_IN_A_AREA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identification_division_paragraph(): Identification_division_paragraphContext[];
	public identification_division_paragraph(i: number): Identification_division_paragraphContext;
	public identification_division_paragraph(i?: number): Identification_division_paragraphContext | Identification_division_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identification_division_paragraphContext);
		} else {
			return this.getRuleContext(i, Identification_division_paragraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division) {
			listener.enterIdentification_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division) {
			listener.exitIdentification_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division) {
			return visitor.visitIdentification_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_division_paragraphContext extends ParserRuleContext {
	public program_id(): Program_idContext | undefined {
		return this.tryGetRuleContext(0, Program_idContext);
	}
	public author(): AuthorContext | undefined {
		return this.tryGetRuleContext(0, AuthorContext);
	}
	public installation(): InstallationContext | undefined {
		return this.tryGetRuleContext(0, InstallationContext);
	}
	public date_written(): Date_writtenContext | undefined {
		return this.tryGetRuleContext(0, Date_writtenContext);
	}
	public date_compiled(): Date_compiledContext | undefined {
		return this.tryGetRuleContext(0, Date_compiledContext);
	}
	public security(): SecurityContext | undefined {
		return this.tryGetRuleContext(0, SecurityContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public separator(): SeparatorContext | undefined {
		return this.tryGetRuleContext(0, SeparatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division_paragraph) {
			listener.enterIdentification_division_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division_paragraph) {
			listener.exitIdentification_division_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division_paragraph) {
			return visitor.visitIdentification_division_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_idContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(cobolParser.PROGRAM_ID, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public is_program(): Is_programContext | undefined {
		return this.tryGetRuleContext(0, Is_programContext);
	}
	public with_ident(): With_identContext | undefined {
		return this.tryGetRuleContext(0, With_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_id) {
			listener.enterProgram_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_id) {
			listener.exitProgram_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_id) {
			return visitor.visitProgram_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_name) {
			listener.enterProgram_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_name) {
			listener.exitProgram_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_name) {
			return visitor.visitProgram_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_programContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_program) {
			listener.enterIs_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_program) {
			listener.exitIs_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_program) {
			return visitor.visitIs_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_identContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(cobolParser.IDENT, 0); }
	public ident_string(): Ident_stringContext {
		return this.getRuleContext(0, Ident_stringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_ident; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_ident) {
			listener.enterWith_ident(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_ident) {
			listener.exitWith_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_ident) {
			return visitor.visitWith_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ident_stringContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ident_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdent_string) {
			listener.enterIdent_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdent_string) {
			listener.exitIdent_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdent_string) {
			return visitor.visitIdent_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_entryContext extends ParserRuleContext {
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_comment_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComment_entry) {
			listener.enterComment_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComment_entry) {
			listener.exitComment_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComment_entry) {
			return visitor.visitComment_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(cobolParser.AUTHOR, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor) {
			listener.enterAuthor(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor) {
			listener.exitAuthor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor) {
			return visitor.visitAuthor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(cobolParser.INSTALLATION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_installation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInstallation) {
			listener.enterInstallation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInstallation) {
			listener.exitInstallation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInstallation) {
			return visitor.visitInstallation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_writtenContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(cobolParser.DATE_WRITTEN, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_written; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_written) {
			listener.enterDate_written(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_written) {
			listener.exitDate_written(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_written) {
			return visitor.visitDate_written(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_compiledContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(cobolParser.DATE_COMPILED, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_compiled; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_compiled) {
			listener.enterDate_compiled(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_compiled) {
			listener.exitDate_compiled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_compiled) {
			return visitor.visitDate_compiled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(cobolParser.SECURITY, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_security; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSecurity) {
			listener.enterSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSecurity) {
			listener.exitSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSecurity) {
			return visitor.visitSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(cobolParser.OPTIONS, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public arithmetic(): ArithmeticContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_options_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticContext extends ParserRuleContext {
	public ARITHMETIC(): TerminalNode { return this.getToken(cobolParser.ARITHMETIC, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic) {
			listener.enterArithmetic(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic) {
			listener.exitArithmetic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic) {
			return visitor.visitArithmetic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_divisionContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(cobolParser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public configuration_section(): Configuration_sectionContext | undefined {
		return this.tryGetRuleContext(0, Configuration_sectionContext);
	}
	public input_output_section(): Input_output_sectionContext | undefined {
		return this.tryGetRuleContext(0, Input_output_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division) {
			listener.enterEnvironment_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division) {
			listener.exitEnvironment_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division) {
			return visitor.visitEnvironment_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Configuration_sectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(cobolParser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public source_computer(): Source_computerContext | undefined {
		return this.tryGetRuleContext(0, Source_computerContext);
	}
	public object_computer(): Object_computerContext | undefined {
		return this.tryGetRuleContext(0, Object_computerContext);
	}
	public special_names(): Special_namesContext | undefined {
		return this.tryGetRuleContext(0, Special_namesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_configuration_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConfiguration_section) {
			listener.enterConfiguration_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConfiguration_section) {
			listener.exitConfiguration_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConfiguration_section) {
			return visitor.visitConfiguration_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_output_sectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(cobolParser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_control(): File_controlContext | undefined {
		return this.tryGetRuleContext(0, File_controlContext);
	}
	public i_o_control(): I_o_controlContext | undefined {
		return this.tryGetRuleContext(0, I_o_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_output_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_output_section) {
			listener.enterInput_output_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_output_section) {
			listener.exitInput_output_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_output_section) {
			return visitor.visitInput_output_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_computerContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(cobolParser.SOURCE_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public with_debugging(): With_debuggingContext | undefined {
		return this.tryGetRuleContext(0, With_debuggingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_computer) {
			listener.enterSource_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_computer) {
			listener.exitSource_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_computer) {
			return visitor.visitSource_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Computer_typeContext extends ParserRuleContext {
	public ALPHA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHA, 0); }
	public I64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I64, 0); }
	public VAX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VAX, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_computer_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComputer_type) {
			listener.enterComputer_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComputer_type) {
			listener.exitComputer_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComputer_type) {
			return visitor.visitComputer_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_debuggingContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(cobolParser.DEBUGGING, 0); }
	public MODE(): TerminalNode { return this.getToken(cobolParser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_debugging; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_debugging) {
			listener.enterWith_debugging(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_debugging) {
			listener.exitWith_debugging(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_debugging) {
			return visitor.visitWith_debugging(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_computerContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(cobolParser.OBJECT_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public memory_size(): Memory_sizeContext | undefined {
		return this.tryGetRuleContext(0, Memory_sizeContext);
	}
	public program_collating(): Program_collatingContext | undefined {
		return this.tryGetRuleContext(0, Program_collatingContext);
	}
	public segment_limit(): Segment_limitContext | undefined {
		return this.tryGetRuleContext(0, Segment_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_object_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterObject_computer) {
			listener.enterObject_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitObject_computer) {
			listener.exitObject_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitObject_computer) {
			return visitor.visitObject_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_sizeContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(cobolParser.MEMORY, 0); }
	public memory_size_amount(): Memory_size_amountContext {
		return this.getRuleContext(0, Memory_size_amountContext);
	}
	public memory_size_unit(): Memory_size_unitContext {
		return this.getRuleContext(0, Memory_size_unitContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size) {
			listener.enterMemory_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size) {
			listener.exitMemory_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size) {
			return visitor.visitMemory_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_amountContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_amount; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_amount) {
			listener.enterMemory_size_amount(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_amount) {
			listener.exitMemory_size_amount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_amount) {
			return visitor.visitMemory_size_amount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_unitContext extends ParserRuleContext {
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_unit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_unit) {
			listener.enterMemory_size_unit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_unit) {
			listener.exitMemory_size_unit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_unit) {
			return visitor.visitMemory_size_unit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_collatingContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_collating; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_collating) {
			listener.enterProgram_collating(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_collating) {
			listener.exitProgram_collating(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_collating) {
			return visitor.visitProgram_collating(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_name) {
			listener.enterAlpha_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_name) {
			listener.exitAlpha_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_name) {
			return visitor.visitAlpha_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_limitContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(cobolParser.SEGMENT_LIMIT, 0); }
	public segment_number(): Segment_numberContext {
		return this.getRuleContext(0, Segment_numberContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_limit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_limit) {
			listener.enterSegment_limit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_limit) {
			listener.exitSegment_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_limit) {
			return visitor.visitSegment_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_number) {
			listener.enterSegment_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_number) {
			listener.exitSegment_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_number) {
			return visitor.visitSegment_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_namesContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(cobolParser.SPECIAL_NAMES, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public special_names_content(): Special_names_contentContext[];
	public special_names_content(i: number): Special_names_contentContext;
	public special_names_content(i?: number): Special_names_contentContext | Special_names_contentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Special_names_contentContext);
		} else {
			return this.getRuleContext(i, Special_names_contentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names) {
			listener.enterSpecial_names(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names) {
			listener.exitSpecial_names(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names) {
			return visitor.visitSpecial_names(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_names_contentContext extends ParserRuleContext {
	public predefined_device(): Predefined_deviceContext | undefined {
		return this.tryGetRuleContext(0, Predefined_deviceContext);
	}
	public device_name(): Device_nameContext | undefined {
		return this.tryGetRuleContext(0, Device_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arg_env(): Arg_envContext | undefined {
		return this.tryGetRuleContext(0, Arg_envContext);
	}
	public arg_env_name(): Arg_env_nameContext | undefined {
		return this.tryGetRuleContext(0, Arg_env_nameContext);
	}
	public C01(): TerminalNode | undefined { return this.tryGetToken(cobolParser.C01, 0); }
	public top_of_page_name(): Top_of_page_nameContext | undefined {
		return this.tryGetRuleContext(0, Top_of_page_nameContext);
	}
	public switch_(): Switch_Context | undefined {
		return this.tryGetRuleContext(0, Switch_Context);
	}
	public alphabet(): AlphabetContext | undefined {
		return this.tryGetRuleContext(0, AlphabetContext);
	}
	public symbolic_chars(): Symbolic_charsContext | undefined {
		return this.tryGetRuleContext(0, Symbolic_charsContext);
	}
	public class_(): Class_Context | undefined {
		return this.tryGetRuleContext(0, Class_Context);
	}
	public currency(): CurrencyContext | undefined {
		return this.tryGetRuleContext(0, CurrencyContext);
	}
	public DECIMAL_POINT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURSOR, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CRT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CRT, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names_content; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names_content) {
			listener.enterSpecial_names_content(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names_content) {
			listener.exitSpecial_names_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names_content) {
			return visitor.visitSpecial_names_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode[];
	public USER_DEFINED_WORD(i: number): TerminalNode;
	public USER_DEFINED_WORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.USER_DEFINED_WORD);
		} else {
			return this.getToken(cobolParser.USER_DEFINED_WORD, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OF);
		} else {
			return this.getToken(cobolParser.OF, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_qualified_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterQualified_data_item) {
			listener.enterQualified_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitQualified_data_item) {
			listener.exitQualified_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitQualified_data_item) {
			return visitor.visitQualified_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencyContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(cobolParser.CURRENCY, 0); }
	public currency_definition(): Currency_definitionContext {
		return this.getRuleContext(0, Currency_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency) {
			listener.enterCurrency(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency) {
			listener.exitCurrency(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency) {
			return visitor.visitCurrency(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_definitionContext extends ParserRuleContext {
	public literal_7(): Literal_7Context | undefined {
		return this.tryGetRuleContext(0, Literal_7Context);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL, 0); }
	public literal_8(): Literal_8Context | undefined {
		return this.tryGetRuleContext(0, Literal_8Context);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_definition) {
			listener.enterCurrency_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_definition) {
			listener.exitCurrency_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_definition) {
			return visitor.visitCurrency_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_7Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_7; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_7) {
			listener.enterLiteral_7(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_7) {
			listener.exitLiteral_7(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_7) {
			return visitor.visitLiteral_7(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_8Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_8; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_8) {
			listener.enterLiteral_8(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_8) {
			listener.exitLiteral_8(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_8) {
			return visitor.visitLiteral_8(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_Context extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(cobolParser.CLASS, 0); }
	public class_name(): Class_nameContext {
		return this.getRuleContext(0, Class_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public user_class(): User_classContext[];
	public user_class(i: number): User_classContext;
	public user_class(i?: number): User_classContext | User_classContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_classContext);
		} else {
			return this.getRuleContext(i, User_classContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_) {
			listener.enterClass_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_) {
			listener.exitClass_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_) {
			return visitor.visitClass_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_name) {
			listener.enterClass_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_name) {
			listener.exitClass_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_name) {
			return visitor.visitClass_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_classContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_class; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_class) {
			listener.enterUser_class(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_class) {
			listener.exitUser_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_class) {
			return visitor.visitUser_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbolic_charsContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(cobolParser.SYMBOLIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public symb_ch_definition(): Symb_ch_definitionContext[];
	public symb_ch_definition(i: number): Symb_ch_definitionContext;
	public symb_ch_definition(i?: number): Symb_ch_definitionContext | Symb_ch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_definitionContext);
		} else {
			return this.getRuleContext(i, Symb_ch_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbolic_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbolic_chars) {
			listener.enterSymbolic_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbolic_chars) {
			listener.exitSymbolic_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbolic_chars) {
			return visitor.visitSymbolic_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_definitionContext extends ParserRuleContext {
	public symb_ch_def_clause(): Symb_ch_def_clauseContext[];
	public symb_ch_def_clause(i: number): Symb_ch_def_clauseContext;
	public symb_ch_def_clause(i?: number): Symb_ch_def_clauseContext | Symb_ch_def_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_def_clauseContext);
		} else {
			return this.getRuleContext(i, Symb_ch_def_clauseContext);
		}
	}
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext | undefined {
		return this.tryGetRuleContext(0, Symb_ch_def_in_alphabetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_definition) {
			listener.enterSymb_ch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_definition) {
			listener.exitSymb_ch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_definition) {
			return visitor.visitSymb_ch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_clauseContext extends ParserRuleContext {
	public symbol_char(): Symbol_charContext[];
	public symbol_char(i: number): Symbol_charContext;
	public symbol_char(i?: number): Symbol_charContext | Symbol_charContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbol_charContext);
		} else {
			return this.getRuleContext(i, Symbol_charContext);
		}
	}
	public char_val(): Char_valContext[];
	public char_val(i: number): Char_valContext;
	public char_val(i?: number): Char_valContext | Char_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_valContext);
		} else {
			return this.getRuleContext(i, Char_valContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_clause) {
			listener.enterSymb_ch_def_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_clause) {
			listener.exitSymb_ch_def_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_clause) {
			return visitor.visitSymb_ch_def_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(cobolParser.IN, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_in_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_in_alphabet) {
			listener.enterSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_in_alphabet) {
			listener.exitSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_in_alphabet) {
			return visitor.visitSymb_ch_def_in_alphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbol_charContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbol_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbol_char) {
			listener.enterSymbol_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbol_char) {
			listener.exitSymbol_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbol_char) {
			return visitor.visitSymbol_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_valContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_val) {
			listener.enterChar_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_val) {
			listener.exitChar_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_val) {
			return visitor.visitChar_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetContext extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(cobolParser.ALPHABET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public alpha_value(): Alpha_valueContext {
		return this.getRuleContext(0, Alpha_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlphabet) {
			listener.enterAlphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlphabet) {
			listener.exitAlphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlphabet) {
			return visitor.visitAlphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_valueContext extends ParserRuleContext {
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EBCDIC, 0); }
	public user_alpha(): User_alphaContext[];
	public user_alpha(i: number): User_alphaContext;
	public user_alpha(i?: number): User_alphaContext | User_alphaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_alphaContext);
		} else {
			return this.getRuleContext(i, User_alphaContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_value) {
			listener.enterAlpha_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_value) {
			listener.exitAlpha_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_value) {
			return visitor.visitAlpha_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_alphaContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public same_literal(): Same_literalContext[];
	public same_literal(i: number): Same_literalContext;
	public same_literal(i?: number): Same_literalContext | Same_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_literalContext);
		} else {
			return this.getRuleContext(i, Same_literalContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_alpha; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_alpha) {
			listener.enterUser_alpha(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_alpha) {
			listener.exitUser_alpha(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_alpha) {
			return visitor.visitUser_alpha(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_literal) {
			listener.enterFirst_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_literal) {
			listener.exitFirst_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_literal) {
			return visitor.visitFirst_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_literal) {
			listener.enterLast_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_literal) {
			listener.exitLast_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_literal) {
			return visitor.visitLast_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_literal) {
			listener.enterSame_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_literal) {
			listener.exitSame_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_literal) {
			return visitor.visitSame_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_Context extends ParserRuleContext {
	public SWITCH(): TerminalNode { return this.getToken(cobolParser.SWITCH, 0); }
	public switch_num(): Switch_numContext {
		return this.getRuleContext(0, Switch_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public switch_name(): Switch_nameContext | undefined {
		return this.tryGetRuleContext(0, Switch_nameContext);
	}
	public switch_clause_on(): Switch_clause_onContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_onContext);
	}
	public switch_clause_off(): Switch_clause_offContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_offContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_) {
			listener.enterSwitch_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_) {
			listener.exitSwitch_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_) {
			return visitor.visitSwitch_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_onContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_on) {
			listener.enterSwitch_clause_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_on) {
			listener.exitSwitch_clause_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_on) {
			return visitor.visitSwitch_clause_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_offContext extends ParserRuleContext {
	public OFF(): TerminalNode { return this.getToken(cobolParser.OFF, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_off; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_off) {
			listener.enterSwitch_clause_off(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_off) {
			listener.exitSwitch_clause_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_off) {
			return visitor.visitSwitch_clause_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cond_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cond_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCond_name) {
			listener.enterCond_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCond_name) {
			listener.exitCond_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCond_name) {
			return visitor.visitCond_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_name) {
			listener.enterSwitch_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_name) {
			listener.exitSwitch_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_name) {
			return visitor.visitSwitch_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_num) {
			listener.enterSwitch_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_num) {
			listener.exitSwitch_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_num) {
			return visitor.visitSwitch_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_of_page_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_of_page_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_of_page_name) {
			listener.enterTop_of_page_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_of_page_name) {
			listener.exitTop_of_page_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_of_page_name) {
			return visitor.visitTop_of_page_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_deviceContext extends ParserRuleContext {
	public CARD_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CARD_READER, 0); }
	public PAPER_TAPE_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_READER, 0); }
	public CONSOLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONSOLE, 0); }
	public LINE_PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE_PRINTER, 0); }
	public PAPER_TAPE_PUNCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
	public SYSIN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSIN, 0); }
	public SYSOUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSOUT, 0); }
	public SYSERR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSERR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_device; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_device) {
			listener.enterPredefined_device(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_device) {
			listener.exitPredefined_device(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_device) {
			return visitor.visitPredefined_device(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Device_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_device_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDevice_name) {
			listener.enterDevice_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDevice_name) {
			listener.exitDevice_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDevice_name) {
			return visitor.visitDevice_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_envContext extends ParserRuleContext {
	public ARGUMENT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_NUMBER, 0); }
	public ARGUMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_VALUE, 0); }
	public ENVIRONMENT_NAME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_NAME, 0); }
	public ENVIRONMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env) {
			listener.enterArg_env(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env) {
			listener.exitArg_env(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env) {
			return visitor.visitArg_env(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_env_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env_name) {
			listener.enterArg_env_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env_name) {
			listener.exitArg_env_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env_name) {
			return visitor.visitArg_env_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_controlContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(cobolParser.FILE_CONTROL, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public select(): SelectContext[];
	public select(i: number): SelectContext;
	public select(i?: number): SelectContext | SelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectContext);
		} else {
			return this.getRuleContext(i, SelectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_control) {
			listener.enterFile_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_control) {
			listener.exitFile_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_control) {
			return visitor.visitFile_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(cobolParser.SELECT, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public assign_to(): Assign_toContext {
		return this.getRuleContext(0, Assign_toContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OPTIONAL, 0); }
	public reserve(): ReserveContext | undefined {
		return this.tryGetRuleContext(0, ReserveContext);
	}
	public organization(): OrganizationContext | undefined {
		return this.tryGetRuleContext(0, OrganizationContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public padding(): PaddingContext | undefined {
		return this.tryGetRuleContext(0, PaddingContext);
	}
	public record_delimiter(): Record_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Record_delimiterContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext[];
	public record_key(i: number): Record_keyContext;
	public record_key(i?: number): Record_keyContext | Record_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_keyContext);
		} else {
			return this.getRuleContext(i, Record_keyContext);
		}
	}
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect) {
			return visitor.visitSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public file_stat(): File_statContext {
		return this.getRuleContext(0, File_statContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_status; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_status) {
			listener.enterFile_status(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_status) {
			listener.exitFile_status(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_status) {
			return visitor.visitFile_status(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_stat; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_stat) {
			listener.enterFile_stat(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_stat) {
			listener.exitFile_stat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_stat) {
			return visitor.visitFile_stat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_keyContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_definition(): Record_key_definitionContext {
		return this.getRuleContext(0, Record_key_definitionContext);
	}
	public ALTERNATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALTERNATE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key) {
			listener.enterRecord_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key) {
			listener.exitRecord_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key) {
			return visitor.visitRecord_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_key_definitionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key_definition) {
			listener.enterRecord_key_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key_definition) {
			listener.exitRecord_key_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key_definition) {
			return visitor.visitRecord_key_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_modeContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ACCESS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IS);
		} else {
			return this.getToken(cobolParser.IS, i);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_access_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccess_mode) {
			listener.enterAccess_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccess_mode) {
			listener.exitAccess_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccess_mode) {
			return visitor.visitAccess_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(cobolParser.RESERVE, 0); }
	public reserve_num(): Reserve_numContext {
		return this.getRuleContext(0, Reserve_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve) {
			listener.enterReserve(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve) {
			listener.exitReserve(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve) {
			return visitor.visitReserve(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserve_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve_num) {
			listener.enterReserve_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve_num) {
			listener.exitReserve_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve_num) {
			return visitor.visitReserve_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_delimiterContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(cobolParser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode { return this.getToken(cobolParser.STANDARD_1, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_delimiter; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_delimiter) {
			listener.enterRecord_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_delimiter) {
			listener.exitRecord_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_delimiter) {
			return visitor.visitRecord_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(cobolParser.PADDING, 0); }
	public pad_char(): Pad_charContext {
		return this.getRuleContext(0, Pad_charContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_padding; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPadding) {
			listener.enterPadding(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPadding) {
			listener.exitPadding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPadding) {
			return visitor.visitPadding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pad_charContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pad_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPad_char) {
			listener.enterPad_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPad_char) {
			listener.exitPad_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPad_char) {
			return visitor.visitPad_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORGANIZATION, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_organization; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOrganization) {
			listener.enterOrganization(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOrganization) {
			listener.exitOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOrganization) {
			return visitor.visitOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(cobolParser.LOCK, 0); }
	public lock_mode_definition(): Lock_mode_definitionContext {
		return this.getRuleContext(0, Lock_mode_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode) {
			return visitor.visitLock_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_mode_definitionContext extends ParserRuleContext {
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MANUAL, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOMATIC, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROLLBACK, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode_definition) {
			listener.enterLock_mode_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode_definition) {
			listener.exitLock_mode_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode_definition) {
			return visitor.visitLock_mode_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Code_setContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(cobolParser.CODE_SET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_code_set; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCode_set) {
			listener.enterCode_set(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCode_set) {
			listener.exitCode_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCode_set) {
			return visitor.visitCode_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_containsContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(cobolParser.BLOCK, 0); }
	public blocksize(): BlocksizeContext {
		return this.getRuleContext(0, BlocksizeContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public smallest_block(): Smallest_blockContext | undefined {
		return this.tryGetRuleContext(0, Smallest_blockContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_block_contains; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlock_contains) {
			listener.enterBlock_contains(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlock_contains) {
			listener.exitBlock_contains(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlock_contains) {
			return visitor.visitBlock_contains(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smallest_blockContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smallest_block; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmallest_block) {
			listener.enterSmallest_block(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmallest_block) {
			listener.exitSmallest_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmallest_block) {
			return visitor.visitSmallest_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlocksizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_blocksize; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlocksize) {
			listener.enterBlocksize(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlocksize) {
			listener.exitBlocksize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlocksize) {
			return visitor.visitBlocksize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_toContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(cobolParser.ASSIGN, 0); }
	public assign_to_definition(): Assign_to_definitionContext {
		return this.getRuleContext(0, Assign_to_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to) {
			listener.enterAssign_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to) {
			listener.exitAssign_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to) {
			return visitor.visitAssign_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_to_definitionContext extends ParserRuleContext {
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to_definition) {
			listener.enterAssign_to_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to_definition) {
			listener.exitAssign_to_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to_definition) {
			return visitor.visitAssign_to_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public DISK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISK, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_controlContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(cobolParser.I_O_CONTROL, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply(): ApplyContext[];
	public apply(i: number): ApplyContext;
	public apply(i?: number): ApplyContext | ApplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ApplyContext);
		} else {
			return this.getRuleContext(i, ApplyContext);
		}
	}
	public same(): SameContext[];
	public same(i: number): SameContext;
	public same(i?: number): SameContext | SameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SameContext);
		} else {
			return this.getRuleContext(i, SameContext);
		}
	}
	public rerun(): RerunContext[];
	public rerun(i: number): RerunContext;
	public rerun(i?: number): RerunContext | RerunContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RerunContext);
		} else {
			return this.getRuleContext(i, RerunContext);
		}
	}
	public multiple_file(): Multiple_fileContext[];
	public multiple_file(i: number): Multiple_fileContext;
	public multiple_file(i?: number): Multiple_fileContext | Multiple_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_fileContext);
		} else {
			return this.getRuleContext(i, Multiple_fileContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control) {
			listener.enterI_o_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control) {
			listener.exitI_o_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control) {
			return visitor.visitI_o_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_fileContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public multiple_file_definition(): Multiple_file_definitionContext[];
	public multiple_file_definition(i: number): Multiple_file_definitionContext;
	public multiple_file_definition(i?: number): Multiple_file_definitionContext | Multiple_file_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_file_definitionContext);
		} else {
			return this.getRuleContext(i, Multiple_file_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file) {
			listener.enterMultiple_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file) {
			listener.exitMultiple_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file) {
			return visitor.visitMultiple_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_definitionContext extends ParserRuleContext {
	public multiple_file_name(): Multiple_file_nameContext {
		return this.getRuleContext(0, Multiple_file_nameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITION, 0); }
	public pos_integer(): Pos_integerContext | undefined {
		return this.tryGetRuleContext(0, Pos_integerContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_definition) {
			listener.enterMultiple_file_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_definition) {
			listener.exitMultiple_file_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_definition) {
			return visitor.visitMultiple_file_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_name) {
			listener.enterMultiple_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_name) {
			listener.exitMultiple_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_name) {
			return visitor.visitMultiple_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos_integerContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pos_integer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPos_integer) {
			listener.enterPos_integer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPos_integer) {
			listener.exitPos_integer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPos_integer) {
			return visitor.visitPos_integer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(cobolParser.RERUN, 0); }
	public rerun_definition(): Rerun_definitionContext {
		return this.getRuleContext(0, Rerun_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EVERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun) {
			listener.enterRerun(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun) {
			listener.exitRerun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun) {
			return visitor.visitRerun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_definitionContext extends ParserRuleContext {
	public rerun_def_file(): Rerun_def_fileContext | undefined {
		return this.tryGetRuleContext(0, Rerun_def_fileContext);
	}
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public clock_count(): Clock_countContext | undefined {
		return this.tryGetRuleContext(0, Clock_countContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CLOCK_UNITS, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_definition) {
			listener.enterRerun_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_definition) {
			listener.exitRerun_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_definition) {
			return visitor.visitRerun_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Clock_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_clock_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClock_count) {
			listener.enterClock_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClock_count) {
			listener.exitClock_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClock_count) {
			return visitor.visitClock_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_name) {
			listener.enterCondition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_name) {
			listener.exitCondition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_name) {
			return visitor.visitCondition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_def_fileContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public rec_count(): Rec_countContext | undefined {
		return this.tryGetRuleContext(0, Rec_countContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def_file) {
			listener.enterRerun_def_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def_file) {
			listener.exitRerun_def_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def_file) {
			return visitor.visitRerun_def_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_count) {
			listener.enterRec_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_count) {
			listener.exitRec_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_count) {
			return visitor.visitRec_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(cobolParser.SAME, 0); }
	public same_area_file(): Same_area_fileContext[];
	public same_area_file(i: number): Same_area_fileContext;
	public same_area_file(i?: number): Same_area_fileContext | Same_area_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_area_fileContext);
		} else {
			return this.getRuleContext(i, Same_area_fileContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame) {
			listener.enterSame(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame) {
			listener.exitSame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame) {
			return visitor.visitSame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_area_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_area_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_area_file) {
			listener.enterSame_area_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_area_file) {
			listener.exitSame_area_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_area_file) {
			return visitor.visitSame_area_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyContext extends ParserRuleContext {
	public APPLY(): TerminalNode { return this.getToken(cobolParser.APPLY, 0); }
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply_definition(): Apply_definitionContext[];
	public apply_definition(i: number): Apply_definitionContext;
	public apply_definition(i?: number): Apply_definitionContext | Apply_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Apply_definitionContext);
		} else {
			return this.getRuleContext(i, Apply_definitionContext);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply) {
			listener.enterApply(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply) {
			listener.exitApply(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply) {
			return visitor.visitApply(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Apply_definitionContext extends ParserRuleContext {
	public DEFERRED_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFERRED_WRITE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTENSION, 0); }
	public extend_amt(): Extend_amtContext | undefined {
		return this.tryGetRuleContext(0, Extend_amtContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FILL_SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILL_SIZE, 0); }
	public LOCK_HOLDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK_HOLDING, 0); }
	public MASS_INSERT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MASS_INSERT, 0); }
	public PREALLOCATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREALLOCATION, 0); }
	public preall_amt(): Preall_amtContext | undefined {
		return this.tryGetRuleContext(0, Preall_amtContext);
	}
	public CONTIGUOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS, 0); }
	public CONTIGUOUS_BEST_TRY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
	public PRINT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINT_CONTROL, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WINDOW, 0); }
	public window_ptrs(): Window_ptrsContext | undefined {
		return this.tryGetRuleContext(0, Window_ptrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply_definition) {
			listener.enterApply_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply_definition) {
			listener.exitApply_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply_definition) {
			return visitor.visitApply_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_ptrsContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_window_ptrs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWindow_ptrs) {
			listener.enterWindow_ptrs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWindow_ptrs) {
			listener.exitWindow_ptrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWindow_ptrs) {
			return visitor.visitWindow_ptrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Preall_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_preall_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPreall_amt) {
			listener.enterPreall_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPreall_amt) {
			listener.exitPreall_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPreall_amt) {
			return visitor.visitPreall_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extend_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_extend_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExtend_amt) {
			listener.enterExtend_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExtend_amt) {
			listener.exitExtend_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExtend_amt) {
			return visitor.visitExtend_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_arithmetic_operatorContext);
	}
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_arithmetic_operatorContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_expression) {
			listener.enterArithmetic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_expression) {
			listener.exitArithmetic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_expression) {
			return visitor.visitArithmetic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Binary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	public STAR_(): TerminalNode[];
	public STAR_(i: number): TerminalNode;
	public STAR_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.STAR_);
		} else {
			return this.getToken(cobolParser.STAR_, i);
		}
	}
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_binary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBinary_arithmetic_operator) {
			listener.enterBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBinary_arithmetic_operator) {
			listener.exitBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBinary_arithmetic_operator) {
			return visitor.visitBinary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnary_arithmetic_operator) {
			listener.enterUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnary_arithmetic_operator) {
			listener.exitUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnary_arithmetic_operator) {
			return visitor.visitUnary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public sign_condition(): Sign_conditionContext | undefined {
		return this.tryGetRuleContext(0, Sign_conditionContext);
	}
	public success_failure_condition(): Success_failure_conditionContext | undefined {
		return this.tryGetRuleContext(0, Success_failure_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_expression) {
			listener.enterLogic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_expression) {
			listener.exitLogic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_expression) {
			return visitor.visitLogic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Success_failure_conditionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SUCCESS, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FAILURE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_success_failure_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSuccess_failure_condition) {
			listener.enterSuccess_failure_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSuccess_failure_condition) {
			listener.exitSuccess_failure_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSuccess_failure_condition) {
			return visitor.visitSuccess_failure_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public condition_operator(): Condition_operatorContext | undefined {
		return this.tryGetRuleContext(0, Condition_operatorContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_condition) {
			listener.enterLogic_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_condition) {
			listener.exitLogic_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_condition) {
			return visitor.visitLogic_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_operationContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_operation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_operation) {
			listener.enterLogic_operation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_operation) {
			listener.exitLogic_operation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_operation) {
			return visitor.visitLogic_operation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public sign_condition_name(): Sign_condition_nameContext {
		return this.getRuleContext(0, Sign_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition) {
			listener.enterSign_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition) {
			listener.exitSign_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition) {
			return visitor.visitSign_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_condition_nameContext extends ParserRuleContext {
	public POSITIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITIVE, 0); }
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEGATIVE, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition_name) {
			listener.enterSign_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition_name) {
			listener.exitSign_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition_name) {
			return visitor.visitSign_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_conditionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public class_condition_name(): Class_condition_nameContext {
		return this.getRuleContext(0, Class_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition) {
			listener.enterClass_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition) {
			listener.exitClass_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition) {
			return visitor.visitClass_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_condition_nameContext extends ParserRuleContext {
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC, 0); }
	public ALPHABETIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC, 0); }
	public ALPHABETIC_LOWER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_LOWER, 0); }
	public ALPHABETIC_UPPER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_UPPER, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition_name) {
			listener.enterClass_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition_name) {
			listener.exitClass_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition_name) {
			return visitor.visitClass_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_operatorContext extends ParserRuleContext {
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GREATER, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public GE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GE_, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LESS, 0); }
	public LE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LE_, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public GT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GT_, 0); }
	public LT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LT_, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THAN, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_operator) {
			listener.enterCondition_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_operator) {
			listener.exitCondition_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_operator) {
			return visitor.visitCondition_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identifier_resultContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public subscripting(): SubscriptingContext | undefined {
		return this.tryGetRuleContext(0, SubscriptingContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier_result; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier_result) {
			listener.enterIdentifier_result(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier_result) {
			listener.exitIdentifier_result(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier_result) {
			return visitor.visitIdentifier_result(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FUNCTION, 0); }
	public function_name(): Function_nameContext | undefined {
		return this.tryGetRuleContext(0, Function_nameContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public arguments(): ArgumentsContext | undefined {
		return this.tryGetRuleContext(0, ArgumentsContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentsContext extends ParserRuleContext {
	public subscripting(): SubscriptingContext {
		return this.getRuleContext(0, SubscriptingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arguments; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArguments) {
			listener.enterArguments(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArguments) {
			listener.exitArguments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArguments) {
			return visitor.visitArguments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubscriptingContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALL);
		} else {
			return this.getToken(cobolParser.ALL, i);
		}
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subscripting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubscripting) {
			listener.enterSubscripting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubscripting) {
			listener.exitSubscripting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubscripting) {
			return visitor.visitSubscripting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reference_modificationContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public leftmost_character_position(): Leftmost_character_positionContext {
		return this.getRuleContext(0, Leftmost_character_positionContext);
	}
	public COLON_(): TerminalNode { return this.getToken(cobolParser.COLON_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public length(): LengthContext | undefined {
		return this.tryGetRuleContext(0, LengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reference_modification; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReference_modification) {
			listener.enterReference_modification(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReference_modification) {
			listener.exitReference_modification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReference_modification) {
			return visitor.visitReference_modification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Leftmost_character_positionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_leftmost_character_position; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLeftmost_character_position) {
			listener.enterLeftmost_character_position(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLeftmost_character_position) {
			listener.exitLeftmost_character_position(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLeftmost_character_position) {
			return visitor.visitLeftmost_character_position(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_length; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLength) {
			listener.enterLength(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLength) {
			listener.exitLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLength) {
			return visitor.visitLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_function_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFunction_name) {
			listener.enterFunction_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFunction_name) {
			listener.exitFunction_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFunction_name) {
			return visitor.visitFunction_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


