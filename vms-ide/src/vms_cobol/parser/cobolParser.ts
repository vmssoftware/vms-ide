// Generated from src/vms_cobol/parser/cobol.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { cobolListener } from "./cobolListener";
import { cobolVisitor } from "./cobolVisitor";


export class cobolParser extends Parser {
	public static readonly STRING_LITERAL_ = 1;
	public static readonly ACCEPT = 2;
	public static readonly ACCESS = 3;
	public static readonly ADD = 4;
	public static readonly ADVANCING = 5;
	public static readonly AFTER = 6;
	public static readonly ALL = 7;
	public static readonly ALLOWING = 8;
	public static readonly ALPHA = 9;
	public static readonly ALPHABET = 10;
	public static readonly ALPHABETIC = 11;
	public static readonly ALPHABETIC_LOWER = 12;
	public static readonly ALPHABETIC_UPPER = 13;
	public static readonly ALPHANUMERIC = 14;
	public static readonly ALPHANUMERIC_EDITED = 15;
	public static readonly ALSO = 16;
	public static readonly ALTER = 17;
	public static readonly ALTERNATE = 18;
	public static readonly AND = 19;
	public static readonly ANY = 20;
	public static readonly APPLY = 21;
	public static readonly ARE = 22;
	public static readonly AREA = 23;
	public static readonly AREAS = 24;
	public static readonly ARGUMENT_NUMBER = 25;
	public static readonly ARGUMENT_VALUE = 26;
	public static readonly ARITHMETIC = 27;
	public static readonly ASCENDING = 28;
	public static readonly ASCII = 29;
	public static readonly ASSIGN = 30;
	public static readonly AT = 31;
	public static readonly AUTHOR = 32;
	public static readonly AUTO = 33;
	public static readonly AUTOMATIC = 34;
	public static readonly AUTOTERMINATE = 35;
	public static readonly BACKGROUND_COLOR = 36;
	public static readonly BEFORE = 37;
	public static readonly BELL = 38;
	public static readonly BINARY = 39;
	public static readonly BINARY_CHAR = 40;
	public static readonly BINARY_DOUBLE = 41;
	public static readonly BINARY_LONG = 42;
	public static readonly BINARY_SHORT = 43;
	public static readonly BLANK = 44;
	public static readonly BLINK = 45;
	public static readonly BLINKING = 46;
	public static readonly BLOCK = 47;
	public static readonly BOLD = 48;
	public static readonly BOTTOM = 49;
	public static readonly BY = 50;
	public static readonly C01 = 51;
	public static readonly CALL = 52;
	public static readonly CANCEL = 53;
	public static readonly CARD_READER = 54;
	public static readonly CF = 55;
	public static readonly CH = 56;
	public static readonly CHARACTER = 57;
	public static readonly CHARACTERS = 58;
	public static readonly CLASS = 59;
	public static readonly CLOCK_UNITS = 60;
	public static readonly CLOSE = 61;
	public static readonly CODE = 62;
	public static readonly CODE_SET = 63;
	public static readonly COLLATING = 64;
	public static readonly COLUMN = 65;
	public static readonly COMMA = 66;
	public static readonly COMMON = 67;
	public static readonly COMP = 68;
	public static readonly COMPUTATIONAL = 69;
	public static readonly COMPUTATIONAL_1 = 70;
	public static readonly COMPUTATIONAL_2 = 71;
	public static readonly COMPUTATIONAL_3 = 72;
	public static readonly COMPUTATIONAL_4 = 73;
	public static readonly COMPUTATIONAL_5 = 74;
	public static readonly COMPUTATIONAL_X = 75;
	public static readonly COMPUTE = 76;
	public static readonly COMP_1 = 77;
	public static readonly COMP_2 = 78;
	public static readonly COMP_3 = 79;
	public static readonly COMP_4 = 80;
	public static readonly COMP_5 = 81;
	public static readonly COMP_X = 82;
	public static readonly CONFIGURATION = 83;
	public static readonly CONSOLE = 84;
	public static readonly CONTAINS = 85;
	public static readonly CONTENT = 86;
	public static readonly CONTIGUOUS = 87;
	public static readonly CONTIGUOUS_BEST_TRY = 88;
	public static readonly CONTINUE = 89;
	public static readonly CONTROL = 90;
	public static readonly CONTROLS = 91;
	public static readonly CONVERSION = 92;
	public static readonly CONVERTING = 93;
	public static readonly COPY = 94;
	public static readonly CORR = 95;
	public static readonly CORRESPONDING = 96;
	public static readonly COUNT = 97;
	public static readonly CRT = 98;
	public static readonly CURRENCY = 99;
	public static readonly CURRENT = 100;
	public static readonly CURSOR = 101;
	public static readonly DATA = 102;
	public static readonly DATE = 103;
	public static readonly DATE_COMPILED = 104;
	public static readonly DATE_WRITTEN = 105;
	public static readonly DAY = 106;
	public static readonly DAY_OF_WEEK = 107;
	public static readonly DE = 108;
	public static readonly DEBUGGING = 109;
	public static readonly DECIMAL_POINT = 110;
	public static readonly DECLARATIVES = 111;
	public static readonly DEFAULT = 112;
	public static readonly DEFERRED_WRITE = 113;
	public static readonly DELETE = 114;
	public static readonly DELIMITED = 115;
	public static readonly DELIMITER = 116;
	public static readonly DEPENDENCY = 117;
	public static readonly DEPENDING = 118;
	public static readonly DESCENDING = 119;
	public static readonly DESCRIPTOR = 120;
	public static readonly DETAIL = 121;
	public static readonly DICTIONARY = 122;
	public static readonly DISK = 123;
	public static readonly DISPLAY = 124;
	public static readonly DIVIDE = 125;
	public static readonly DIVISION = 126;
	public static readonly DOWN = 127;
	public static readonly DUPLICATES = 128;
	public static readonly DYNAMIC = 129;
	public static readonly EBCDIC = 130;
	public static readonly ECHO = 131;
	public static readonly EDITING = 132;
	public static readonly ELSE = 133;
	public static readonly END = 134;
	public static readonly END_ACCEPT = 135;
	public static readonly END_ADD = 136;
	public static readonly END_CALL = 137;
	public static readonly END_COMPUTE = 138;
	public static readonly END_DELETE = 139;
	public static readonly END_DISPLAY = 140;
	public static readonly END_DIVIDE = 141;
	public static readonly END_EVALUATE = 142;
	public static readonly END_IF = 143;
	public static readonly END_MULTIPLY = 144;
	public static readonly END_OF_PAGE = 145;
	public static readonly END_PERFORM = 146;
	public static readonly END_READ = 147;
	public static readonly END_RETURN = 148;
	public static readonly END_REWRITE = 149;
	public static readonly END_SEARCH = 150;
	public static readonly END_START = 151;
	public static readonly END_STRING = 152;
	public static readonly END_SUBTRACT = 153;
	public static readonly END_UNSTRING = 154;
	public static readonly END_WRITE = 155;
	public static readonly ENVIRONMENT = 156;
	public static readonly ENVIRONMENT_NAME = 157;
	public static readonly ENVIRONMENT_VALUE = 158;
	public static readonly EOL = 159;
	public static readonly EOP = 160;
	public static readonly EOS = 161;
	public static readonly EQUAL = 162;
	public static readonly ERASE = 163;
	public static readonly ERROR = 164;
	public static readonly EVALUATE = 165;
	public static readonly EVERY = 166;
	public static readonly EXCEPTION = 167;
	public static readonly EXCLUSIVE = 168;
	public static readonly EXIT = 169;
	public static readonly EXTEND = 170;
	public static readonly EXTENSION = 171;
	public static readonly EXTERNAL = 172;
	public static readonly FAILURE = 173;
	public static readonly FALSE = 174;
	public static readonly FD = 175;
	public static readonly FILE = 176;
	public static readonly FILE_CONTROL = 177;
	public static readonly FILE_ID = 178;
	public static readonly FILLER = 179;
	public static readonly FILL_SIZE = 180;
	public static readonly FINAL = 181;
	public static readonly FIRST = 182;
	public static readonly FLOAT_EXTENDED = 183;
	public static readonly FLOAT_LONG = 184;
	public static readonly FLOAT_SHORT = 185;
	public static readonly FOOTING = 186;
	public static readonly FOR = 187;
	public static readonly FOREGROUND_COLOR = 188;
	public static readonly FROM = 189;
	public static readonly FULL = 190;
	public static readonly FUNCTION = 191;
	public static readonly GENERATE = 192;
	public static readonly GIVING = 193;
	public static readonly GLOBAL = 194;
	public static readonly GO = 195;
	public static readonly GREATER = 196;
	public static readonly GROUP = 197;
	public static readonly HEADING = 198;
	public static readonly HIGHLIGHT = 199;
	public static readonly HIGH_VALUE = 200;
	public static readonly HIGH_VALUES = 201;
	public static readonly I64 = 202;
	public static readonly ID = 203;
	public static readonly IDENT = 204;
	public static readonly IDENTIFICATION = 205;
	public static readonly IF = 206;
	public static readonly IN = 207;
	public static readonly INDEX = 208;
	public static readonly INDEXED = 209;
	public static readonly INDICATE = 210;
	public static readonly INITIAL = 211;
	public static readonly INITIALIZE = 212;
	public static readonly INITIATE = 213;
	public static readonly INPUT = 214;
	public static readonly INPUT_OUTPUT = 215;
	public static readonly INSPECT = 216;
	public static readonly INSTALLATION = 217;
	public static readonly INTO = 218;
	public static readonly INVALID = 219;
	public static readonly IS = 220;
	public static readonly I_O = 221;
	public static readonly I_O_CONTROL = 222;
	public static readonly JUST = 223;
	public static readonly JUSTIFIED = 224;
	public static readonly KEY = 225;
	public static readonly LABEL = 226;
	public static readonly LAST = 227;
	public static readonly LEADING = 228;
	public static readonly LEFT = 229;
	public static readonly LESS = 230;
	public static readonly LIMIT = 231;
	public static readonly LIMITS = 232;
	public static readonly LINAGE = 233;
	public static readonly LINE = 234;
	public static readonly LINES = 235;
	public static readonly LINE_PRINTER = 236;
	public static readonly LINKAGE = 237;
	public static readonly LOCK = 238;
	public static readonly LOCK_HOLDING = 239;
	public static readonly LOWLIGHT = 240;
	public static readonly LOW_VALUE = 241;
	public static readonly LOW_VALUES = 242;
	public static readonly MANUAL = 243;
	public static readonly MASS_INSERT = 244;
	public static readonly MEMORY = 245;
	public static readonly MERGE = 246;
	public static readonly MODE = 247;
	public static readonly MODULES = 248;
	public static readonly MOVE = 249;
	public static readonly MULTIPLE = 250;
	public static readonly MULTIPLY = 251;
	public static readonly NATIVE = 252;
	public static readonly NEGATIVE = 253;
	public static readonly NEXT = 254;
	public static readonly NO = 255;
	public static readonly NOT = 256;
	public static readonly NUMBER = 257;
	public static readonly NUMERIC = 258;
	public static readonly NUMERIC_EDITED = 259;
	public static readonly OBJECT_COMPUTER = 260;
	public static readonly OCCURS = 261;
	public static readonly OF = 262;
	public static readonly OFF = 263;
	public static readonly OMITTED = 264;
	public static readonly ON = 265;
	public static readonly OPEN = 266;
	public static readonly OPTIONAL = 267;
	public static readonly OPTIONS = 268;
	public static readonly OR = 269;
	public static readonly ORDER = 270;
	public static readonly ORGANIZATION = 271;
	public static readonly OTHER = 272;
	public static readonly OTHERS = 273;
	public static readonly OUTPUT = 274;
	public static readonly OVERFLOW = 275;
	public static readonly PACKED_DECIMAL = 276;
	public static readonly PADDING = 277;
	public static readonly PAGE = 278;
	public static readonly PAPER_TAPE_PUNCH = 279;
	public static readonly PAPER_TAPE_READER = 280;
	public static readonly PERFORM = 281;
	public static readonly PF = 282;
	public static readonly PH = 283;
	public static readonly PLUS = 284;
	public static readonly POINTER = 285;
	public static readonly POINTER_64 = 286;
	public static readonly POSITION = 287;
	public static readonly POSITIVE = 288;
	public static readonly PREALLOCATION = 289;
	public static readonly PREVIOUS = 290;
	public static readonly PRINTER = 291;
	public static readonly PRINTING = 292;
	public static readonly PRINT_CONTROL = 293;
	public static readonly PRIOR = 294;
	public static readonly PROCEDURE = 295;
	public static readonly PROCEED = 296;
	public static readonly PROGRAM = 297;
	public static readonly PROGRAM_ID = 298;
	public static readonly PROTECTED = 299;
	public static readonly QUOTE = 300;
	public static readonly QUOTES = 301;
	public static readonly RANDOM = 302;
	public static readonly RD = 303;
	public static readonly READ = 304;
	public static readonly READERS = 305;
	public static readonly RECORD = 306;
	public static readonly RECORDS = 307;
	public static readonly REDEFINES = 308;
	public static readonly REEL = 309;
	public static readonly REFERENCE = 310;
	public static readonly REGARDLESS = 311;
	public static readonly RELATIVE = 312;
	public static readonly RELEASE = 313;
	public static readonly REMAINDER = 314;
	public static readonly REMOVAL = 315;
	public static readonly RENAMES = 316;
	public static readonly REPLACE = 317;
	public static readonly REPLACING = 318;
	public static readonly REPORT = 319;
	public static readonly REPORTING = 320;
	public static readonly REPORTS = 321;
	public static readonly REQUIRED = 322;
	public static readonly RERUN = 323;
	public static readonly RESERVE = 324;
	public static readonly RESET = 325;
	public static readonly RETURN = 326;
	public static readonly REVERSED = 327;
	public static readonly REVERSE_VIDEO = 328;
	public static readonly REWIND = 329;
	public static readonly REWRITE = 330;
	public static readonly RF = 331;
	public static readonly RH = 332;
	public static readonly RIGHT = 333;
	public static readonly ROLLBACK = 334;
	public static readonly ROUNDED = 335;
	public static readonly RUN = 336;
	public static readonly SAME = 337;
	public static readonly SCREEN = 338;
	public static readonly SD = 339;
	public static readonly SEARCH = 340;
	public static readonly SECTION = 341;
	public static readonly SECURE = 342;
	public static readonly SECURITY = 343;
	public static readonly SEGMENT_LIMIT = 344;
	public static readonly SELECT = 345;
	public static readonly SENTENCE = 346;
	public static readonly SEPARATE = 347;
	public static readonly SEQUENCE = 348;
	public static readonly SEQUENTIAL = 349;
	public static readonly SET = 350;
	public static readonly SIGN = 351;
	public static readonly SIGNED = 352;
	public static readonly SIZE = 353;
	public static readonly SORT = 354;
	public static readonly SORT_MERGE = 355;
	public static readonly SOURCE = 356;
	public static readonly SOURCE_COMPUTER = 357;
	public static readonly SPACE = 358;
	public static readonly SPACES = 359;
	public static readonly SPECIAL_NAMES = 360;
	public static readonly STANDARD = 361;
	public static readonly STANDARD_1 = 362;
	public static readonly STANDARD_2 = 363;
	public static readonly START = 364;
	public static readonly STATUS = 365;
	public static readonly STOP = 366;
	public static readonly STRING = 367;
	public static readonly SUBTRACT = 368;
	public static readonly SUCCESS = 369;
	public static readonly SUM = 370;
	public static readonly SUPPRESS = 371;
	public static readonly SWITCH = 372;
	public static readonly SWITCH_N_ = 373;
	public static readonly SYMBOL = 374;
	public static readonly SYMBOLIC = 375;
	public static readonly SYNC = 376;
	public static readonly SYNCHRONIZED = 377;
	public static readonly SYSERR = 378;
	public static readonly SYSIN = 379;
	public static readonly SYSOUT = 380;
	public static readonly TALLYING = 381;
	public static readonly TAPE = 382;
	public static readonly TERMINATE = 383;
	public static readonly TEST = 384;
	public static readonly THAN = 385;
	public static readonly THEN = 386;
	public static readonly THROUGH = 387;
	public static readonly THRU = 388;
	public static readonly TIME = 389;
	public static readonly TIMES = 390;
	public static readonly TO = 391;
	public static readonly TOP = 392;
	public static readonly TRAILING = 393;
	public static readonly TRUE = 394;
	public static readonly TYPE = 395;
	public static readonly UNDERLINE = 396;
	public static readonly UNDERLINED = 397;
	public static readonly UNIT = 398;
	public static readonly UNLOCK = 399;
	public static readonly UNSIGNED = 400;
	public static readonly UNSTRING = 401;
	public static readonly UNTIL = 402;
	public static readonly UP = 403;
	public static readonly UPDATERS = 404;
	public static readonly UPON = 405;
	public static readonly USAGE = 406;
	public static readonly USE = 407;
	public static readonly USING = 408;
	public static readonly VALUE = 409;
	public static readonly VALUES = 410;
	public static readonly VARYING = 411;
	public static readonly VAX = 412;
	public static readonly WHEN = 413;
	public static readonly WINDOW = 414;
	public static readonly WITH = 415;
	public static readonly WORDS = 416;
	public static readonly WORKING_STORAGE = 417;
	public static readonly WRITE = 418;
	public static readonly WRITERS = 419;
	public static readonly YYYYDDD = 420;
	public static readonly YYYYMMDD = 421;
	public static readonly ZERO = 422;
	public static readonly ZEROES = 423;
	public static readonly ZEROS = 424;
	public static readonly EXEC = 425;
	public static readonly SQL = 426;
	public static readonly END_EXEC = 427;
	public static readonly PIC = 428;
	public static readonly PICTURE = 429;
	public static readonly PSEUDO_TEXT_ = 430;
	public static readonly EXCLAM_ = 431;
	public static readonly UNDER_ = 432;
	public static readonly PLUS_ = 433;
	public static readonly MINUS_ = 434;
	public static readonly STAR_ = 435;
	public static readonly SLASH_ = 436;
	public static readonly COLON_ = 437;
	public static readonly EQUAL_ = 438;
	public static readonly LT_ = 439;
	public static readonly LE_ = 440;
	public static readonly GE_ = 441;
	public static readonly GT_ = 442;
	public static readonly LPAREN_ = 443;
	public static readonly RPAREN_ = 444;
	public static readonly LBRACK_ = 445;
	public static readonly RBRACK_ = 446;
	public static readonly POINTER_ = 447;
	public static readonly ATP_ = 448;
	public static readonly DOT_ = 449;
	public static readonly LCURLY_ = 450;
	public static readonly RCURLY_ = 451;
	public static readonly NUMERIC_LITERAL_ = 452;
	public static readonly INTEGER_LITERAL_ = 453;
	public static readonly HEX_LITERAL_ = 454;
	public static readonly USER_DEFINED_WORD_ = 455;
	public static readonly COMMA_ = 456;
	public static readonly SEMI_ = 457;
	public static readonly WHITESPACE_ = 458;
	public static readonly NEWLINE_ = 459;
	public static readonly ANY_CHAR_ = 460;
	public static readonly SYMBOL_IN_PICTURE_ = 461;
	public static readonly IS_IN_PICTURE_ = 462;
	public static readonly CHARACTER_STRING_ = 463;
	public static readonly RULE_cobol_source = 0;
	public static readonly RULE_program = 1;
	public static readonly RULE_identification_division = 2;
	public static readonly RULE_identification_division_header = 3;
	public static readonly RULE_environment_division = 4;
	public static readonly RULE_environment_division_header = 5;
	public static readonly RULE_data_division = 6;
	public static readonly RULE_data_division_header = 7;
	public static readonly RULE_procedure_division = 8;
	public static readonly RULE_word_in_area_B = 9;
	public static readonly RULE_author = 10;
	public static readonly RULE_author_header = 11;
	public static readonly RULE_figurative_constant_witout_all_zero = 12;
	public static readonly RULE_figurative_constant_zero = 13;
	public static readonly RULE_figurative_constant_witout_all = 14;
	public static readonly RULE_figurative_constant_witout_zero = 15;
	public static readonly RULE_figurative_constant = 16;
	public static readonly RULE_end_program = 17;
	public static readonly RULE_end_program_header = 18;
	public static readonly RULE_procedure_division_header = 19;
	public static readonly RULE_procedure_division_header_start = 20;
	public static readonly RULE_procedure_division_header_end = 21;
	public static readonly RULE_section = 22;
	public static readonly RULE_declaratives = 23;
	public static readonly RULE_declaratives_header = 24;
	public static readonly RULE_end_declaratives = 25;
	public static readonly RULE_declaratives_section = 26;
	public static readonly RULE_paragraph = 27;
	public static readonly RULE_paragraph_name = 28;
	public static readonly RULE_use_statement = 29;
	public static readonly RULE_group_data_name = 30;
	public static readonly RULE_use_on = 31;
	public static readonly RULE_section_header = 32;
	public static readonly RULE_section_name = 33;
	public static readonly RULE_using = 34;
	public static readonly RULE_giving = 35;
	public static readonly RULE_statement = 36;
	public static readonly RULE_exec_sql_statement = 37;
	public static readonly RULE_record_name = 38;
	public static readonly RULE_library_name = 39;
	public static readonly RULE_text_name = 40;
	public static readonly RULE_replace_statement = 41;
	public static readonly RULE_write_statement = 42;
	public static readonly RULE_advance_value = 43;
	public static readonly RULE_advance_num = 44;
	public static readonly RULE_unstring_statement = 45;
	public static readonly RULE_unstring_tally_ctr = 46;
	public static readonly RULE_unstring_dest_clause = 47;
	public static readonly RULE_countr = 48;
	public static readonly RULE_dest_string = 49;
	public static readonly RULE_delim_dest = 50;
	public static readonly RULE_unstring_delim_clause = 51;
	public static readonly RULE_unstring_delim = 52;
	public static readonly RULE_unstring_src = 53;
	public static readonly RULE_unlock_statement = 54;
	public static readonly RULE_terminate_statement = 55;
	public static readonly RULE_suppress_statement = 56;
	public static readonly RULE_subtract_statement = 57;
	public static readonly RULE_sub_grp = 58;
	public static readonly RULE_sub_num = 59;
	public static readonly RULE_string_statement = 60;
	public static readonly RULE_string_pointer = 61;
	public static readonly RULE_string_dest = 62;
	public static readonly RULE_string_delim = 63;
	public static readonly RULE_string_src = 64;
	public static readonly RULE_stop_statement = 65;
	public static readonly RULE_stop_disp = 66;
	public static readonly RULE_start_statement = 67;
	public static readonly RULE_sort_key_data = 68;
	public static readonly RULE_sort_statement = 69;
	public static readonly RULE_sort_name = 70;
	public static readonly RULE_procedure_is = 71;
	public static readonly RULE_on_sort_key = 72;
	public static readonly RULE_sort_key = 73;
	public static readonly RULE_set_statement = 74;
	public static readonly RULE_set_statement_form1 = 75;
	public static readonly RULE_set_statement_form2 = 76;
	public static readonly RULE_set_statement_form3 = 77;
	public static readonly RULE_set_statement_form4 = 78;
	public static readonly RULE_set_statement_form5 = 79;
	public static readonly RULE_set_statement_form6 = 80;
	public static readonly RULE_set_increm = 81;
	public static readonly RULE_set_val = 82;
	public static readonly RULE_search_statement = 83;
	public static readonly RULE_search_condition = 84;
	public static readonly RULE_search_arg = 85;
	public static readonly RULE_search_elemnt = 86;
	public static readonly RULE_search_pointer = 87;
	public static readonly RULE_src_table = 88;
	public static readonly RULE_rewrite_statement = 89;
	public static readonly RULE_rewrite_rec_name = 90;
	public static readonly RULE_return_statement = 91;
	public static readonly RULE_smrg_file = 92;
	public static readonly RULE_release_statement = 93;
	public static readonly RULE_release_src_area = 94;
	public static readonly RULE_release_rec = 95;
	public static readonly RULE_record_statement = 96;
	public static readonly RULE_relation_type = 97;
	public static readonly RULE_path_name = 98;
	public static readonly RULE_read_statement = 99;
	public static readonly RULE_regard_allow = 100;
	public static readonly RULE_read_options = 101;
	public static readonly RULE_perform_statement = 102;
	public static readonly RULE_proc_thru_proc = 103;
	public static readonly RULE_perform_times = 104;
	public static readonly RULE_with_test = 105;
	public static readonly RULE_perform_until = 106;
	public static readonly RULE_perform_varying = 107;
	public static readonly RULE_perform_range = 108;
	public static readonly RULE_perform_increm = 109;
	public static readonly RULE_perform_init = 110;
	public static readonly RULE_perform_var = 111;
	public static readonly RULE_open_statement = 112;
	public static readonly RULE_open_definition = 113;
	public static readonly RULE_open_file_attributes = 114;
	public static readonly RULE_multiply_statement = 115;
	public static readonly RULE_mult_num = 116;
	public static readonly RULE_merge_statement = 117;
	public static readonly RULE_output_proc = 118;
	public static readonly RULE_first_proc = 119;
	public static readonly RULE_end_proc = 120;
	public static readonly RULE_giving_file = 121;
	public static readonly RULE_infile = 122;
	public static readonly RULE_merge_on = 123;
	public static readonly RULE_mergefile = 124;
	public static readonly RULE_mergekey = 125;
	public static readonly RULE_inspect_statement = 126;
	public static readonly RULE_inspect_converting = 127;
	public static readonly RULE_convert_chars = 128;
	public static readonly RULE_compare_chars = 129;
	public static readonly RULE_inspect_replacing = 130;
	public static readonly RULE_replacing_all = 131;
	public static readonly RULE_replace_val = 132;
	public static readonly RULE_replacing_characters = 133;
	public static readonly RULE_replace_char = 134;
	public static readonly RULE_inspect_tallying = 135;
	public static readonly RULE_tallying_for = 136;
	public static readonly RULE_tallying_for_characters = 137;
	public static readonly RULE_delim_definition = 138;
	public static readonly RULE_tallying_for_all = 139;
	public static readonly RULE_compare_val = 140;
	public static readonly RULE_delim_val = 141;
	public static readonly RULE_tally_ctr = 142;
	public static readonly RULE_src_string = 143;
	public static readonly RULE_initiate_statement = 144;
	public static readonly RULE_initialize_statement = 145;
	public static readonly RULE_replacing = 146;
	public static readonly RULE_init_value = 147;
	public static readonly RULE_fld_name = 148;
	public static readonly RULE_move_statement = 149;
	public static readonly RULE_if_statement = 150;
	public static readonly RULE_generate_statement = 151;
	public static readonly RULE_report_item = 152;
	public static readonly RULE_exit_statement = 153;
	public static readonly RULE_exit_program_statement = 154;
	public static readonly RULE_go_to_statement = 155;
	public static readonly RULE_proc_name = 156;
	public static readonly RULE_evaluate_statement = 157;
	public static readonly RULE_when_condition = 158;
	public static readonly RULE_subj_item = 159;
	public static readonly RULE_divide_statement = 160;
	public static readonly RULE_divide_statement_form1 = 161;
	public static readonly RULE_divide_statement_form2 = 162;
	public static readonly RULE_remaind = 163;
	public static readonly RULE_divide_num = 164;
	public static readonly RULE_display_statement = 165;
	public static readonly RULE_display_statement_form1 = 166;
	public static readonly RULE_display_statement_form2 = 167;
	public static readonly RULE_display_statement_form3 = 168;
	public static readonly RULE_display_statement_form4 = 169;
	public static readonly RULE_src_item = 170;
	public static readonly RULE_disp_f3_line = 171;
	public static readonly RULE_disp_f3_column = 172;
	public static readonly RULE_display_form1_clause = 173;
	public static readonly RULE_upon_dest = 174;
	public static readonly RULE_with_conversion = 175;
	public static readonly RULE_with_no_advancing = 176;
	public static readonly RULE_display_form2_clause = 177;
	public static readonly RULE_reversed = 178;
	public static readonly RULE_with_blinking = 179;
	public static readonly RULE_bold = 180;
	public static readonly RULE_with_bell = 181;
	public static readonly RULE_underlined = 182;
	public static readonly RULE_erase_to = 183;
	public static readonly RULE_at_line_number = 184;
	public static readonly RULE_at_column_number = 185;
	public static readonly RULE_out_dest = 186;
	public static readonly RULE_delete_statement = 187;
	public static readonly RULE_continue_statement = 188;
	public static readonly RULE_compute_statement = 189;
	public static readonly RULE_close_statement = 190;
	public static readonly RULE_close_params = 191;
	public static readonly RULE_cancel_statement = 192;
	public static readonly RULE_call_statement = 193;
	public static readonly RULE_call_giving = 194;
	public static readonly RULE_call_using = 195;
	public static readonly RULE_using_arg = 196;
	public static readonly RULE_using_prefix = 197;
	public static readonly RULE_argument = 198;
	public static readonly RULE_prog_name = 199;
	public static readonly RULE_alter_statement = 200;
	public static readonly RULE_add_statement = 201;
	public static readonly RULE_add_grp = 202;
	public static readonly RULE_add_num = 203;
	public static readonly RULE_accept_statement = 204;
	public static readonly RULE_on_exception_variants = 205;
	public static readonly RULE_at_end_variants = 206;
	public static readonly RULE_on_size_variants = 207;
	public static readonly RULE_on_overflow_variants = 208;
	public static readonly RULE_at_eop_variants = 209;
	public static readonly RULE_invalid_key_variants = 210;
	public static readonly RULE_accept_form6 = 211;
	public static readonly RULE_arg_env_accept = 212;
	public static readonly RULE_accept_form1 = 213;
	public static readonly RULE_accept_form2 = 214;
	public static readonly RULE_accept_form3 = 215;
	public static readonly RULE_accept_form4 = 216;
	public static readonly RULE_accept_form5 = 217;
	public static readonly RULE_accept_at = 218;
	public static readonly RULE_accept_at_line = 219;
	public static readonly RULE_accept_at_column = 220;
	public static readonly RULE_accept_form4_clause = 221;
	public static readonly RULE_from_column_number = 222;
	public static readonly RULE_from_line_number = 223;
	public static readonly RULE_accept_form3_clause = 224;
	public static readonly RULE_protected_clause = 225;
	public static readonly RULE_control_key_in = 226;
	public static readonly RULE_default_is = 227;
	public static readonly RULE_with_no_echo = 228;
	public static readonly RULE_key_dest_item = 229;
	public static readonly RULE_def_value = 230;
	public static readonly RULE_protected_value = 231;
	public static readonly RULE_prot_fill_lit = 232;
	public static readonly RULE_prot_size_value = 233;
	public static readonly RULE_number_value = 234;
	public static readonly RULE_date_time = 235;
	public static readonly RULE_dest_item = 236;
	public static readonly RULE_input_source = 237;
	public static readonly RULE_at_end = 238;
	public static readonly RULE_on_exception = 239;
	public static readonly RULE_on_size = 240;
	public static readonly RULE_on_overflow = 241;
	public static readonly RULE_at_eop = 242;
	public static readonly RULE_invalid_key = 243;
	public static readonly RULE_file_section = 244;
	public static readonly RULE_file_description = 245;
	public static readonly RULE_sort_merge_file_description = 246;
	public static readonly RULE_working_storage_section = 247;
	public static readonly RULE_working_storage_entry = 248;
	public static readonly RULE_linkage_section = 249;
	public static readonly RULE_report_section = 250;
	public static readonly RULE_report_description = 251;
	public static readonly RULE_screen_section = 252;
	public static readonly RULE_file_description_entry = 253;
	public static readonly RULE_sort_merge_file_description_entry = 254;
	public static readonly RULE_report_description_entry = 255;
	public static readonly RULE_fd_clause = 256;
	public static readonly RULE_is_external = 257;
	public static readonly RULE_is_global = 258;
	public static readonly RULE_data_description_entry = 259;
	public static readonly RULE_level_number = 260;
	public static readonly RULE_data_description_clause = 261;
	public static readonly RULE_synchronized_lr = 262;
	public static readonly RULE_justified = 263;
	public static readonly RULE_black_when_zero = 264;
	public static readonly RULE_renames = 265;
	public static readonly RULE_rename_start = 266;
	public static readonly RULE_rename_end = 267;
	public static readonly RULE_value_is = 268;
	public static readonly RULE_value_is_definition = 269;
	public static readonly RULE_value_is_definition_part = 270;
	public static readonly RULE_value_is_definition_thru = 271;
	public static readonly RULE_external_name = 272;
	public static readonly RULE_ref_data_name = 273;
	public static readonly RULE_value_is_literal = 274;
	public static readonly RULE_occurs = 275;
	public static readonly RULE_indexed_by = 276;
	public static readonly RULE_ind_name = 277;
	public static readonly RULE_key_is = 278;
	public static readonly RULE_key_name = 279;
	public static readonly RULE_times_definition = 280;
	public static readonly RULE_table_size = 281;
	public static readonly RULE_min_times = 282;
	public static readonly RULE_max_times = 283;
	public static readonly RULE_report_group_data_description_entry = 284;
	public static readonly RULE_report_group_data_description_clause = 285;
	public static readonly RULE_rep_source_sum_or_value = 286;
	public static readonly RULE_rep_value_is = 287;
	public static readonly RULE_rep_source = 288;
	public static readonly RULE_rep_group_ind = 289;
	public static readonly RULE_rep_column = 290;
	public static readonly RULE_usage_display = 291;
	public static readonly RULE_rep_type = 292;
	public static readonly RULE_rep_next_group = 293;
	public static readonly RULE_rep_line_num = 294;
	public static readonly RULE_sign_is = 295;
	public static readonly RULE_rep_sum = 296;
	public static readonly RULE_control_foot_name = 297;
	public static readonly RULE_detail_report_group_name = 298;
	public static readonly RULE_sum_name = 299;
	public static readonly RULE_source_name = 300;
	public static readonly RULE_column_number = 301;
	public static readonly RULE_type_is_definition = 302;
	public static readonly RULE_rep_type_pf = 303;
	public static readonly RULE_rep_type_rf = 304;
	public static readonly RULE_rep_type_de = 305;
	public static readonly RULE_rep_type_ch = 306;
	public static readonly RULE_rep_type_cf = 307;
	public static readonly RULE_rep_type_rh = 308;
	public static readonly RULE_rep_type_ph = 309;
	public static readonly RULE_type_control_name = 310;
	public static readonly RULE_next_group_definition = 311;
	public static readonly RULE_line_num_definition = 312;
	public static readonly RULE_line_num = 313;
	public static readonly RULE_rd_clause = 314;
	public static readonly RULE_report_page = 315;
	public static readonly RULE_report_control = 316;
	public static readonly RULE_report_code = 317;
	public static readonly RULE_footing_line_rd = 318;
	public static readonly RULE_last_detail_line = 319;
	public static readonly RULE_first_detail_line = 320;
	public static readonly RULE_heading_line = 321;
	public static readonly RULE_page_size_rd = 322;
	public static readonly RULE_control_name = 323;
	public static readonly RULE_usage = 324;
	public static readonly RULE_usage_definition = 325;
	public static readonly RULE_picture = 326;
	public static readonly RULE_character_string = 327;
	public static readonly RULE_other_data_item = 328;
	public static readonly RULE_data_name = 329;
	public static readonly RULE_sd_clause = 330;
	public static readonly RULE_report_is = 331;
	public static readonly RULE_report_name = 332;
	public static readonly RULE_linage = 333;
	public static readonly RULE_bottom_lines = 334;
	public static readonly RULE_top_lines = 335;
	public static readonly RULE_footing_line = 336;
	public static readonly RULE_page_size = 337;
	public static readonly RULE_data_rec = 338;
	public static readonly RULE_rec_name = 339;
	public static readonly RULE_value_of_id = 340;
	public static readonly RULE_value_of_id_definition = 341;
	public static readonly RULE_label = 342;
	public static readonly RULE_record = 343;
	public static readonly RULE_record_definition = 344;
	public static readonly RULE_depending_item = 345;
	public static readonly RULE_shortest_rec = 346;
	public static readonly RULE_longest_rec = 347;
	public static readonly RULE_screen_description_entry = 348;
	public static readonly RULE_screen_description_clause = 349;
	public static readonly RULE_scr_light = 350;
	public static readonly RULE_scr_picture = 351;
	public static readonly RULE_scr_value = 352;
	public static readonly RULE_scr_column = 353;
	public static readonly RULE_scr_line = 354;
	public static readonly RULE_scr_underline = 355;
	public static readonly RULE_scr_reverse = 356;
	public static readonly RULE_scr_lowlight = 357;
	public static readonly RULE_scr_highlight = 358;
	public static readonly RULE_scr_erase = 359;
	public static readonly RULE_scr_blink = 360;
	public static readonly RULE_scr_bell = 361;
	public static readonly RULE_scr_full = 362;
	public static readonly RULE_scr_required = 363;
	public static readonly RULE_scr_secure = 364;
	public static readonly RULE_scr_auto = 365;
	public static readonly RULE_scr_background = 366;
	public static readonly RULE_scr_foreground = 367;
	public static readonly RULE_scr_blank = 368;
	public static readonly RULE_scr_pic_using = 369;
	public static readonly RULE_scr_pic_from = 370;
	public static readonly RULE_scr_pic_to = 371;
	public static readonly RULE_nonnumeric_literal = 372;
	public static readonly RULE_src_number = 373;
	public static readonly RULE_color_num = 374;
	public static readonly RULE_program_id = 375;
	public static readonly RULE_program_name = 376;
	public static readonly RULE_common_initial = 377;
	public static readonly RULE_with_ident = 378;
	public static readonly RULE_ident_string = 379;
	public static readonly RULE_installation = 380;
	public static readonly RULE_date_written = 381;
	public static readonly RULE_date_compiled = 382;
	public static readonly RULE_security = 383;
	public static readonly RULE_options_ = 384;
	public static readonly RULE_arithmetic = 385;
	public static readonly RULE_configuration_section = 386;
	public static readonly RULE_input_output_section = 387;
	public static readonly RULE_source_computer = 388;
	public static readonly RULE_computer_type = 389;
	public static readonly RULE_with_debugging = 390;
	public static readonly RULE_object_computer = 391;
	public static readonly RULE_memory_size = 392;
	public static readonly RULE_memory_size_amount = 393;
	public static readonly RULE_memory_size_unit = 394;
	public static readonly RULE_program_collating = 395;
	public static readonly RULE_alpha_name = 396;
	public static readonly RULE_segment_limit = 397;
	public static readonly RULE_segment_number = 398;
	public static readonly RULE_special_names = 399;
	public static readonly RULE_special_names_content = 400;
	public static readonly RULE_cursor_is = 401;
	public static readonly RULE_crt_is = 402;
	public static readonly RULE_predefined_name_relation = 403;
	public static readonly RULE_predefined_name = 404;
	public static readonly RULE_switch_definition = 405;
	public static readonly RULE_switch_clause_on = 406;
	public static readonly RULE_switch_clause_off = 407;
	public static readonly RULE_cond_name = 408;
	public static readonly RULE_switch_name = 409;
	public static readonly RULE_switch_num = 410;
	public static readonly RULE_qualified_data_item = 411;
	public static readonly RULE_currency = 412;
	public static readonly RULE_currency_definition = 413;
	public static readonly RULE_currency_string = 414;
	public static readonly RULE_currency_char = 415;
	public static readonly RULE_class_ = 416;
	public static readonly RULE_class_name = 417;
	public static readonly RULE_user_class = 418;
	public static readonly RULE_symbolic_chars = 419;
	public static readonly RULE_symb_ch_definition = 420;
	public static readonly RULE_symb_ch_def_clause = 421;
	public static readonly RULE_symb_ch_def_in_alphabet = 422;
	public static readonly RULE_symbol_char = 423;
	public static readonly RULE_char_val = 424;
	public static readonly RULE_alphabet = 425;
	public static readonly RULE_alpha_value = 426;
	public static readonly RULE_user_alpha = 427;
	public static readonly RULE_first_literal = 428;
	public static readonly RULE_last_literal = 429;
	public static readonly RULE_same_literal = 430;
	public static readonly RULE_top_of_page_name = 431;
	public static readonly RULE_user_name = 432;
	public static readonly RULE_file_control = 433;
	public static readonly RULE_select = 434;
	public static readonly RULE_select_clause = 435;
	public static readonly RULE_file_status = 436;
	public static readonly RULE_file_stat = 437;
	public static readonly RULE_record_key = 438;
	public static readonly RULE_alt_record_key = 439;
	public static readonly RULE_record_key_definition = 440;
	public static readonly RULE_seg_key = 441;
	public static readonly RULE_rec_key = 442;
	public static readonly RULE_access_mode = 443;
	public static readonly RULE_reserve = 444;
	public static readonly RULE_reserve_num = 445;
	public static readonly RULE_record_delimiter = 446;
	public static readonly RULE_padding = 447;
	public static readonly RULE_pad_char = 448;
	public static readonly RULE_organization = 449;
	public static readonly RULE_lock_mode = 450;
	public static readonly RULE_lock_mode_definition = 451;
	public static readonly RULE_code_set = 452;
	public static readonly RULE_block_contains = 453;
	public static readonly RULE_smallest_block = 454;
	public static readonly RULE_blocksize = 455;
	public static readonly RULE_assign_to = 456;
	public static readonly RULE_assign_to_definition = 457;
	public static readonly RULE_file_spec = 458;
	public static readonly RULE_file_name = 459;
	public static readonly RULE_i_o_control = 460;
	public static readonly RULE_i_o_control_clause = 461;
	public static readonly RULE_multiple_file = 462;
	public static readonly RULE_multiple_file_definition = 463;
	public static readonly RULE_multiple_file_name = 464;
	public static readonly RULE_pos_integer = 465;
	public static readonly RULE_rerun = 466;
	public static readonly RULE_rerun_definition = 467;
	public static readonly RULE_clock_count = 468;
	public static readonly RULE_condition_name = 469;
	public static readonly RULE_rerun_def_file = 470;
	public static readonly RULE_rec_count = 471;
	public static readonly RULE_same = 472;
	public static readonly RULE_same_area_file = 473;
	public static readonly RULE_apply = 474;
	public static readonly RULE_apply_definition = 475;
	public static readonly RULE_window_ptrs = 476;
	public static readonly RULE_preall_amt = 477;
	public static readonly RULE_extend_amt = 478;
	public static readonly RULE_arithmetic_expression = 479;
	public static readonly RULE_constant = 480;
	public static readonly RULE_binary_arithmetic_operator = 481;
	public static readonly RULE_unary_arithmetic_operator = 482;
	public static readonly RULE_logic_expression = 483;
	public static readonly RULE_logic_condition = 484;
	public static readonly RULE_logic_condition_abbrev = 485;
	public static readonly RULE_logic_operation = 486;
	public static readonly RULE_bool_condition_name = 487;
	public static readonly RULE_sign_condition_name = 488;
	public static readonly RULE_class_condition_name = 489;
	public static readonly RULE_condition_operator = 490;
	public static readonly RULE_identifier_result = 491;
	public static readonly RULE_identifier = 492;
	public static readonly RULE_arguments = 493;
	public static readonly RULE_subscripting = 494;
	public static readonly RULE_reference_modification = 495;
	public static readonly RULE_leftmost_character_position = 496;
	public static readonly RULE_length = 497;
	public static readonly RULE_function_name = 498;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"cobol_source", "program", "identification_division", "identification_division_header", 
		"environment_division", "environment_division_header", "data_division", 
		"data_division_header", "procedure_division", "word_in_area_B", "author", 
		"author_header", "figurative_constant_witout_all_zero", "figurative_constant_zero", 
		"figurative_constant_witout_all", "figurative_constant_witout_zero", "figurative_constant", 
		"end_program", "end_program_header", "procedure_division_header", "procedure_division_header_start", 
		"procedure_division_header_end", "section", "declaratives", "declaratives_header", 
		"end_declaratives", "declaratives_section", "paragraph", "paragraph_name", 
		"use_statement", "group_data_name", "use_on", "section_header", "section_name", 
		"using", "giving", "statement", "exec_sql_statement", "record_name", "library_name", 
		"text_name", "replace_statement", "write_statement", "advance_value", 
		"advance_num", "unstring_statement", "unstring_tally_ctr", "unstring_dest_clause", 
		"countr", "dest_string", "delim_dest", "unstring_delim_clause", "unstring_delim", 
		"unstring_src", "unlock_statement", "terminate_statement", "suppress_statement", 
		"subtract_statement", "sub_grp", "sub_num", "string_statement", "string_pointer", 
		"string_dest", "string_delim", "string_src", "stop_statement", "stop_disp", 
		"start_statement", "sort_key_data", "sort_statement", "sort_name", "procedure_is", 
		"on_sort_key", "sort_key", "set_statement", "set_statement_form1", "set_statement_form2", 
		"set_statement_form3", "set_statement_form4", "set_statement_form5", "set_statement_form6", 
		"set_increm", "set_val", "search_statement", "search_condition", "search_arg", 
		"search_elemnt", "search_pointer", "src_table", "rewrite_statement", "rewrite_rec_name", 
		"return_statement", "smrg_file", "release_statement", "release_src_area", 
		"release_rec", "record_statement", "relation_type", "path_name", "read_statement", 
		"regard_allow", "read_options", "perform_statement", "proc_thru_proc", 
		"perform_times", "with_test", "perform_until", "perform_varying", "perform_range", 
		"perform_increm", "perform_init", "perform_var", "open_statement", "open_definition", 
		"open_file_attributes", "multiply_statement", "mult_num", "merge_statement", 
		"output_proc", "first_proc", "end_proc", "giving_file", "infile", "merge_on", 
		"mergefile", "mergekey", "inspect_statement", "inspect_converting", "convert_chars", 
		"compare_chars", "inspect_replacing", "replacing_all", "replace_val", 
		"replacing_characters", "replace_char", "inspect_tallying", "tallying_for", 
		"tallying_for_characters", "delim_definition", "tallying_for_all", "compare_val", 
		"delim_val", "tally_ctr", "src_string", "initiate_statement", "initialize_statement", 
		"replacing", "init_value", "fld_name", "move_statement", "if_statement", 
		"generate_statement", "report_item", "exit_statement", "exit_program_statement", 
		"go_to_statement", "proc_name", "evaluate_statement", "when_condition", 
		"subj_item", "divide_statement", "divide_statement_form1", "divide_statement_form2", 
		"remaind", "divide_num", "display_statement", "display_statement_form1", 
		"display_statement_form2", "display_statement_form3", "display_statement_form4", 
		"src_item", "disp_f3_line", "disp_f3_column", "display_form1_clause", 
		"upon_dest", "with_conversion", "with_no_advancing", "display_form2_clause", 
		"reversed", "with_blinking", "bold", "with_bell", "underlined", "erase_to", 
		"at_line_number", "at_column_number", "out_dest", "delete_statement", 
		"continue_statement", "compute_statement", "close_statement", "close_params", 
		"cancel_statement", "call_statement", "call_giving", "call_using", "using_arg", 
		"using_prefix", "argument", "prog_name", "alter_statement", "add_statement", 
		"add_grp", "add_num", "accept_statement", "on_exception_variants", "at_end_variants", 
		"on_size_variants", "on_overflow_variants", "at_eop_variants", "invalid_key_variants", 
		"accept_form6", "arg_env_accept", "accept_form1", "accept_form2", "accept_form3", 
		"accept_form4", "accept_form5", "accept_at", "accept_at_line", "accept_at_column", 
		"accept_form4_clause", "from_column_number", "from_line_number", "accept_form3_clause", 
		"protected_clause", "control_key_in", "default_is", "with_no_echo", "key_dest_item", 
		"def_value", "protected_value", "prot_fill_lit", "prot_size_value", "number_value", 
		"date_time", "dest_item", "input_source", "at_end", "on_exception", "on_size", 
		"on_overflow", "at_eop", "invalid_key", "file_section", "file_description", 
		"sort_merge_file_description", "working_storage_section", "working_storage_entry", 
		"linkage_section", "report_section", "report_description", "screen_section", 
		"file_description_entry", "sort_merge_file_description_entry", "report_description_entry", 
		"fd_clause", "is_external", "is_global", "data_description_entry", "level_number", 
		"data_description_clause", "synchronized_lr", "justified", "black_when_zero", 
		"renames", "rename_start", "rename_end", "value_is", "value_is_definition", 
		"value_is_definition_part", "value_is_definition_thru", "external_name", 
		"ref_data_name", "value_is_literal", "occurs", "indexed_by", "ind_name", 
		"key_is", "key_name", "times_definition", "table_size", "min_times", "max_times", 
		"report_group_data_description_entry", "report_group_data_description_clause", 
		"rep_source_sum_or_value", "rep_value_is", "rep_source", "rep_group_ind", 
		"rep_column", "usage_display", "rep_type", "rep_next_group", "rep_line_num", 
		"sign_is", "rep_sum", "control_foot_name", "detail_report_group_name", 
		"sum_name", "source_name", "column_number", "type_is_definition", "rep_type_pf", 
		"rep_type_rf", "rep_type_de", "rep_type_ch", "rep_type_cf", "rep_type_rh", 
		"rep_type_ph", "type_control_name", "next_group_definition", "line_num_definition", 
		"line_num", "rd_clause", "report_page", "report_control", "report_code", 
		"footing_line_rd", "last_detail_line", "first_detail_line", "heading_line", 
		"page_size_rd", "control_name", "usage", "usage_definition", "picture", 
		"character_string", "other_data_item", "data_name", "sd_clause", "report_is", 
		"report_name", "linage", "bottom_lines", "top_lines", "footing_line", 
		"page_size", "data_rec", "rec_name", "value_of_id", "value_of_id_definition", 
		"label", "record", "record_definition", "depending_item", "shortest_rec", 
		"longest_rec", "screen_description_entry", "screen_description_clause", 
		"scr_light", "scr_picture", "scr_value", "scr_column", "scr_line", "scr_underline", 
		"scr_reverse", "scr_lowlight", "scr_highlight", "scr_erase", "scr_blink", 
		"scr_bell", "scr_full", "scr_required", "scr_secure", "scr_auto", "scr_background", 
		"scr_foreground", "scr_blank", "scr_pic_using", "scr_pic_from", "scr_pic_to", 
		"nonnumeric_literal", "src_number", "color_num", "program_id", "program_name", 
		"common_initial", "with_ident", "ident_string", "installation", "date_written", 
		"date_compiled", "security", "options_", "arithmetic", "configuration_section", 
		"input_output_section", "source_computer", "computer_type", "with_debugging", 
		"object_computer", "memory_size", "memory_size_amount", "memory_size_unit", 
		"program_collating", "alpha_name", "segment_limit", "segment_number", 
		"special_names", "special_names_content", "cursor_is", "crt_is", "predefined_name_relation", 
		"predefined_name", "switch_definition", "switch_clause_on", "switch_clause_off", 
		"cond_name", "switch_name", "switch_num", "qualified_data_item", "currency", 
		"currency_definition", "currency_string", "currency_char", "class_", "class_name", 
		"user_class", "symbolic_chars", "symb_ch_definition", "symb_ch_def_clause", 
		"symb_ch_def_in_alphabet", "symbol_char", "char_val", "alphabet", "alpha_value", 
		"user_alpha", "first_literal", "last_literal", "same_literal", "top_of_page_name", 
		"user_name", "file_control", "select", "select_clause", "file_status", 
		"file_stat", "record_key", "alt_record_key", "record_key_definition", 
		"seg_key", "rec_key", "access_mode", "reserve", "reserve_num", "record_delimiter", 
		"padding", "pad_char", "organization", "lock_mode", "lock_mode_definition", 
		"code_set", "block_contains", "smallest_block", "blocksize", "assign_to", 
		"assign_to_definition", "file_spec", "file_name", "i_o_control", "i_o_control_clause", 
		"multiple_file", "multiple_file_definition", "multiple_file_name", "pos_integer", 
		"rerun", "rerun_definition", "clock_count", "condition_name", "rerun_def_file", 
		"rec_count", "same", "same_area_file", "apply", "apply_definition", "window_ptrs", 
		"preall_amt", "extend_amt", "arithmetic_expression", "constant", "binary_arithmetic_operator", 
		"unary_arithmetic_operator", "logic_expression", "logic_condition", "logic_condition_abbrev", 
		"logic_operation", "bool_condition_name", "sign_condition_name", "class_condition_name", 
		"condition_operator", "identifier_result", "identifier", "arguments", 
		"subscripting", "reference_modification", "leftmost_character_position", 
		"length", "function_name",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'!'", "'_'", "'+'", "'-'", 
		"'*'", "'/'", "':'", "'='", "'<'", "'<='", "'>='", "'>'", "'('", "')'", 
		"'['", "']'", "'^'", "'@'", undefined, "'{'", "'}'", undefined, undefined, 
		undefined, undefined, "','", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "STRING_LITERAL_", "ACCEPT", "ACCESS", "ADD", "ADVANCING", 
		"AFTER", "ALL", "ALLOWING", "ALPHA", "ALPHABET", "ALPHABETIC", "ALPHABETIC_LOWER", 
		"ALPHABETIC_UPPER", "ALPHANUMERIC", "ALPHANUMERIC_EDITED", "ALSO", "ALTER", 
		"ALTERNATE", "AND", "ANY", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", 
		"ARGUMENT_VALUE", "ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", 
		"AUTHOR", "AUTO", "AUTOMATIC", "AUTOTERMINATE", "BACKGROUND_COLOR", "BEFORE", 
		"BELL", "BINARY", "BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", 
		"BLANK", "BLINK", "BLINKING", "BLOCK", "BOLD", "BOTTOM", "BY", "C01", 
		"CALL", "CANCEL", "CARD_READER", "CF", "CH", "CHARACTER", "CHARACTERS", 
		"CLASS", "CLOCK_UNITS", "CLOSE", "CODE", "CODE_SET", "COLLATING", "COLUMN", 
		"COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", 
		"COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTATIONAL_X", 
		"COMPUTE", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", 
		"CONFIGURATION", "CONSOLE", "CONTAINS", "CONTENT", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", 
		"CONTINUE", "CONTROL", "CONTROLS", "CONVERSION", "CONVERTING", "COPY", 
		"CORR", "CORRESPONDING", "COUNT", "CRT", "CURRENCY", "CURRENT", "CURSOR", 
		"DATA", "DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", 
		"DE", "DEBUGGING", "DECIMAL_POINT", "DECLARATIVES", "DEFAULT", "DEFERRED_WRITE", 
		"DELETE", "DELIMITED", "DELIMITER", "DEPENDENCY", "DEPENDING", "DESCENDING", 
		"DESCRIPTOR", "DETAIL", "DICTIONARY", "DISK", "DISPLAY", "DIVIDE", "DIVISION", 
		"DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", "ECHO", "EDITING", "ELSE", 
		"END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", "END_DELETE", 
		"END_DISPLAY", "END_DIVIDE", "END_EVALUATE", "END_IF", "END_MULTIPLY", 
		"END_OF_PAGE", "END_PERFORM", "END_READ", "END_RETURN", "END_REWRITE", 
		"END_SEARCH", "END_START", "END_STRING", "END_SUBTRACT", "END_UNSTRING", 
		"END_WRITE", "ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", "EOL", 
		"EOP", "EOS", "EQUAL", "ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", 
		"EXCLUSIVE", "EXIT", "EXTEND", "EXTENSION", "EXTERNAL", "FAILURE", "FALSE", 
		"FD", "FILE", "FILE_CONTROL", "FILE_ID", "FILLER", "FILL_SIZE", "FINAL", 
		"FIRST", "FLOAT_EXTENDED", "FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", 
		"FOREGROUND_COLOR", "FROM", "FULL", "FUNCTION", "GENERATE", "GIVING", 
		"GLOBAL", "GO", "GREATER", "GROUP", "HEADING", "HIGHLIGHT", "HIGH_VALUE", 
		"HIGH_VALUES", "I64", "ID", "IDENT", "IDENTIFICATION", "IF", "IN", "INDEX", 
		"INDEXED", "INDICATE", "INITIAL", "INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", 
		"INSPECT", "INSTALLATION", "INTO", "INVALID", "IS", "I_O", "I_O_CONTROL", 
		"JUST", "JUSTIFIED", "KEY", "LABEL", "LAST", "LEADING", "LEFT", "LESS", 
		"LIMIT", "LIMITS", "LINAGE", "LINE", "LINES", "LINE_PRINTER", "LINKAGE", 
		"LOCK", "LOCK_HOLDING", "LOWLIGHT", "LOW_VALUE", "LOW_VALUES", "MANUAL", 
		"MASS_INSERT", "MEMORY", "MERGE", "MODE", "MODULES", "MOVE", "MULTIPLE", 
		"MULTIPLY", "NATIVE", "NEGATIVE", "NEXT", "NO", "NOT", "NUMBER", "NUMERIC", 
		"NUMERIC_EDITED", "OBJECT_COMPUTER", "OCCURS", "OF", "OFF", "OMITTED", 
		"ON", "OPEN", "OPTIONAL", "OPTIONS", "OR", "ORDER", "ORGANIZATION", "OTHER", 
		"OTHERS", "OUTPUT", "OVERFLOW", "PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", 
		"PAPER_TAPE_READER", "PERFORM", "PF", "PH", "PLUS", "POINTER", "POINTER_64", 
		"POSITION", "POSITIVE", "PREALLOCATION", "PREVIOUS", "PRINTER", "PRINTING", 
		"PRINT_CONTROL", "PRIOR", "PROCEDURE", "PROCEED", "PROGRAM", "PROGRAM_ID", 
		"PROTECTED", "QUOTE", "QUOTES", "RANDOM", "RD", "READ", "READERS", "RECORD", 
		"RECORDS", "REDEFINES", "REEL", "REFERENCE", "REGARDLESS", "RELATIVE", 
		"RELEASE", "REMAINDER", "REMOVAL", "RENAMES", "REPLACE", "REPLACING", 
		"REPORT", "REPORTING", "REPORTS", "REQUIRED", "RERUN", "RESERVE", "RESET", 
		"RETURN", "REVERSED", "REVERSE_VIDEO", "REWIND", "REWRITE", "RF", "RH", 
		"RIGHT", "ROLLBACK", "ROUNDED", "RUN", "SAME", "SCREEN", "SD", "SEARCH", 
		"SECTION", "SECURE", "SECURITY", "SEGMENT_LIMIT", "SELECT", "SENTENCE", 
		"SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SIGN", "SIGNED", "SIZE", 
		"SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", "SPACE", "SPACES", 
		"SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", "START", "STATUS", 
		"STOP", "STRING", "SUBTRACT", "SUCCESS", "SUM", "SUPPRESS", "SWITCH", 
		"SWITCH_N_", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", 
		"SYSOUT", "TALLYING", "TAPE", "TERMINATE", "TEST", "THAN", "THEN", "THROUGH", 
		"THRU", "TIME", "TIMES", "TO", "TOP", "TRAILING", "TRUE", "TYPE", "UNDERLINE", 
		"UNDERLINED", "UNIT", "UNLOCK", "UNSIGNED", "UNSTRING", "UNTIL", "UP", 
		"UPDATERS", "UPON", "USAGE", "USE", "USING", "VALUE", "VALUES", "VARYING", 
		"VAX", "WHEN", "WINDOW", "WITH", "WORDS", "WORKING_STORAGE", "WRITE", 
		"WRITERS", "YYYYDDD", "YYYYMMDD", "ZERO", "ZEROES", "ZEROS", "EXEC", "SQL", 
		"END_EXEC", "PIC", "PICTURE", "PSEUDO_TEXT_", "EXCLAM_", "UNDER_", "PLUS_", 
		"MINUS_", "STAR_", "SLASH_", "COLON_", "EQUAL_", "LT_", "LE_", "GE_", 
		"GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", "POINTER_", "ATP_", 
		"DOT_", "LCURLY_", "RCURLY_", "NUMERIC_LITERAL_", "INTEGER_LITERAL_", 
		"HEX_LITERAL_", "USER_DEFINED_WORD_", "COMMA_", "SEMI_", "WHITESPACE_", 
		"NEWLINE_", "ANY_CHAR_", "SYMBOL_IN_PICTURE_", "IS_IN_PICTURE_", "CHARACTER_STRING_",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(cobolParser._LITERAL_NAMES, cobolParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return cobolParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "cobol.g4"; }

	// @Override
	public get ruleNames(): string[] { return cobolParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return cobolParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(cobolParser._ATN, this);
	}
	// @RuleVersion(0)
	public async cobol_source() {
		let _localctx: Cobol_sourceContext = new Cobol_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, cobolParser.RULE_cobol_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1001;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 998;
				await this.replace_statement();
				}
				}
				this.state = 1003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1007;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IDENTIFICATION) {
				{
				{
				this.state = 1004;
				await this.program();
				}
				}
				this.state = 1009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1010;
			this.match(cobolParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async program() {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, cobolParser.RULE_program);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1012;
			await this.identification_division();
			this.state = 1014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ENVIRONMENT) {
				{
				this.state = 1013;
				await this.environment_division();
				}
			}

			this.state = 1017;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATA) {
				{
				this.state = 1016;
				await this.data_division();
				}
			}

			this.state = 1020;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROCEDURE) {
				{
				this.state = 1019;
				await this.procedure_division();
				}
			}

			this.state = 1025;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1022;
					await this.program();
					}
					}
				}
				this.state = 1027;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			}
			this.state = 1029;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {
			case 1:
				{
				this.state = 1028;
				await this.end_program();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async identification_division() {
		let _localctx: Identification_divisionContext = new Identification_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, cobolParser.RULE_identification_division);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1031;
			await this.identification_division_header();
			this.state = 1032;
			await this.program_id();
			this.state = 1034;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AUTHOR) {
				{
				this.state = 1033;
				await this.author();
				}
			}

			this.state = 1037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INSTALLATION) {
				{
				this.state = 1036;
				await this.installation();
				}
			}

			this.state = 1040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATE_WRITTEN) {
				{
				this.state = 1039;
				await this.date_written();
				}
			}

			this.state = 1043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATE_COMPILED) {
				{
				this.state = 1042;
				await this.date_compiled();
				}
			}

			this.state = 1046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SECURITY) {
				{
				this.state = 1045;
				await this.security();
				}
			}

			this.state = 1049;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONS) {
				{
				this.state = 1048;
				await this.options_();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async identification_division_header() {
		let _localctx: Identification_division_headerContext = new Identification_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, cobolParser.RULE_identification_division_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1051;
			this.match(cobolParser.IDENTIFICATION);
			this.state = 1052;
			this.match(cobolParser.DIVISION);
			this.state = 1053;
			this.match(cobolParser.DOT_);
			this.state = 1057;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1054;
				await this.replace_statement();
				}
				}
				this.state = 1059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async environment_division() {
		let _localctx: Environment_divisionContext = new Environment_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, cobolParser.RULE_environment_division);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1060;
			await this.environment_division_header();
			this.state = 1062;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONFIGURATION) {
				{
				this.state = 1061;
				await this.configuration_section();
				}
			}

			this.state = 1065;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INPUT_OUTPUT) {
				{
				this.state = 1064;
				await this.input_output_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async environment_division_header() {
		let _localctx: Environment_division_headerContext = new Environment_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, cobolParser.RULE_environment_division_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1067;
			this.match(cobolParser.ENVIRONMENT);
			this.state = 1068;
			this.match(cobolParser.DIVISION);
			this.state = 1069;
			this.match(cobolParser.DOT_);
			this.state = 1073;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1070;
				await this.replace_statement();
				}
				}
				this.state = 1075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async data_division() {
		let _localctx: Data_divisionContext = new Data_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, cobolParser.RULE_data_division);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1076;
			await this.data_division_header();
			this.state = 1078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 1077;
				await this.file_section();
				}
			}

			this.state = 1081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WORKING_STORAGE) {
				{
				this.state = 1080;
				await this.working_storage_section();
				}
			}

			this.state = 1084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINKAGE) {
				{
				this.state = 1083;
				await this.linkage_section();
				}
			}

			this.state = 1087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REPORT) {
				{
				this.state = 1086;
				await this.report_section();
				}
			}

			this.state = 1090;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SCREEN) {
				{
				this.state = 1089;
				await this.screen_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async data_division_header() {
		let _localctx: Data_division_headerContext = new Data_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, cobolParser.RULE_data_division_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1092;
			this.match(cobolParser.DATA);
			this.state = 1093;
			this.match(cobolParser.DIVISION);
			this.state = 1094;
			this.match(cobolParser.DOT_);
			this.state = 1098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1095;
				await this.replace_statement();
				}
				}
				this.state = 1100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async procedure_division() {
		let _localctx: Procedure_divisionContext = new Procedure_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, cobolParser.RULE_procedure_division);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1101;
			await this.procedure_division_header();
			this.state = 1103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DECLARATIVES) {
				{
				this.state = 1102;
				await this.declaratives();
				}
			}

			this.state = 1117;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 26, this._ctx) ) {
			case 1:
				{
				this.state = 1108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_) {
					{
					{
					this.state = 1105;
					await this.section();
					}
					}
					this.state = 1110;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				{
				this.state = 1114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_) {
					{
					{
					this.state = 1111;
					await this.paragraph();
					}
					}
					this.state = 1116;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async word_in_area_B() {
		let _localctx: Word_in_area_BContext = new Word_in_area_BContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, cobolParser.RULE_word_in_area_B);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1119;
			if (!( (this as any).testCurrentWordInAreaB ? (this as any).testCurrentWordInAreaB() as boolean : false )) {
				throw new FailedPredicateException(this, " (this as any).testCurrentWordInAreaB ? (this as any).testCurrentWordInAreaB() as boolean : false ");
			}
			this.state = 1120;
			await this.matchWildcard();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async author() {
		let _localctx: AuthorContext = new AuthorContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, cobolParser.RULE_author);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1122;
			await this.author_header();
			this.state = 1126;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1123;
					await this.word_in_area_B();
					}
					}
				}
				this.state = 1128;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			}
			this.state = 1132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1129;
				await this.replace_statement();
				}
				}
				this.state = 1134;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async author_header() {
		let _localctx: Author_headerContext = new Author_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, cobolParser.RULE_author_header);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1135;
			this.match(cobolParser.AUTHOR);
			this.state = 1136;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async figurative_constant_witout_all_zero() {
		let _localctx: Figurative_constant_witout_all_zeroContext = new Figurative_constant_witout_all_zeroContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, cobolParser.RULE_figurative_constant_witout_all_zero);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1138;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.HIGH_VALUE || _la === cobolParser.HIGH_VALUES || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async figurative_constant_zero() {
		let _localctx: Figurative_constant_zeroContext = new Figurative_constant_zeroContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, cobolParser.RULE_figurative_constant_zero);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1140;
			_la = this._input.LA(1);
			if (!(((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async figurative_constant_witout_all() {
		let _localctx: Figurative_constant_witout_allContext = new Figurative_constant_witout_allContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, cobolParser.RULE_figurative_constant_witout_all);
		try {
			this.state = 1144;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1142;
				await this.figurative_constant_witout_all_zero();
				}
				break;
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1143;
				await this.figurative_constant_zero();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async figurative_constant_witout_zero() {
		let _localctx: Figurative_constant_witout_zeroContext = new Figurative_constant_witout_zeroContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, cobolParser.RULE_figurative_constant_witout_zero);
		try {
			this.state = 1149;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1146;
				await this.figurative_constant_witout_all_zero();
				}
				break;
			case cobolParser.ALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1147;
				this.match(cobolParser.ALL);
				this.state = 1148;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async figurative_constant() {
		let _localctx: Figurative_constantContext = new Figurative_constantContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, cobolParser.RULE_figurative_constant);
		try {
			this.state = 1153;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1151;
				await this.figurative_constant_witout_zero();
				}
				break;
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1152;
				await this.figurative_constant_zero();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async end_program() {
		let _localctx: End_programContext = new End_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, cobolParser.RULE_end_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1155;
			await this.end_program_header();
			this.state = 1156;
			await this.program_name();
			this.state = 1157;
			this.match(cobolParser.DOT_);
			this.state = 1161;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1158;
				await this.replace_statement();
				}
				}
				this.state = 1163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async end_program_header() {
		let _localctx: End_program_headerContext = new End_program_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, cobolParser.RULE_end_program_header);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1164;
			this.match(cobolParser.END);
			this.state = 1165;
			this.match(cobolParser.PROGRAM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async procedure_division_header() {
		let _localctx: Procedure_division_headerContext = new Procedure_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, cobolParser.RULE_procedure_division_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1167;
			await this.procedure_division_header_start();
			this.state = 1169;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USING) {
				{
				this.state = 1168;
				await this.using();
				}
			}

			this.state = 1172;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.GIVING) {
				{
				this.state = 1171;
				await this.giving();
				}
			}

			this.state = 1174;
			await this.procedure_division_header_end();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async procedure_division_header_start() {
		let _localctx: Procedure_division_header_startContext = new Procedure_division_header_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, cobolParser.RULE_procedure_division_header_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1176;
			this.match(cobolParser.PROCEDURE);
			this.state = 1177;
			this.match(cobolParser.DIVISION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async procedure_division_header_end() {
		let _localctx: Procedure_division_header_endContext = new Procedure_division_header_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, cobolParser.RULE_procedure_division_header_end);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1179;
			this.match(cobolParser.DOT_);
			this.state = 1183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1180;
				await this.replace_statement();
				}
				}
				this.state = 1185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async section() {
		let _localctx: SectionContext = new SectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, cobolParser.RULE_section);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1186;
			await this.section_header();
			this.state = 1190;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1187;
					await this.paragraph();
					}
					}
				}
				this.state = 1192;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async declaratives() {
		let _localctx: DeclarativesContext = new DeclarativesContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, cobolParser.RULE_declaratives);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1193;
			await this.declaratives_header();
			this.state = 1197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_) {
				{
				{
				this.state = 1194;
				await this.declaratives_section();
				}
				}
				this.state = 1199;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1200;
			await this.end_declaratives();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async declaratives_header() {
		let _localctx: Declaratives_headerContext = new Declaratives_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, cobolParser.RULE_declaratives_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1202;
			this.match(cobolParser.DECLARATIVES);
			this.state = 1203;
			this.match(cobolParser.DOT_);
			this.state = 1207;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1204;
				await this.replace_statement();
				}
				}
				this.state = 1209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async end_declaratives() {
		let _localctx: End_declarativesContext = new End_declarativesContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, cobolParser.RULE_end_declaratives);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1210;
			this.match(cobolParser.END);
			this.state = 1211;
			this.match(cobolParser.DECLARATIVES);
			this.state = 1212;
			this.match(cobolParser.DOT_);
			this.state = 1216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1213;
				await this.replace_statement();
				}
				}
				this.state = 1218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async declaratives_section() {
		let _localctx: Declaratives_sectionContext = new Declaratives_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, cobolParser.RULE_declaratives_section);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1219;
			await this.section_header();
			this.state = 1220;
			await this.use_statement();
			this.state = 1224;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1221;
					await this.paragraph();
					}
					}
				}
				this.state = 1226;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async paragraph() {
		let _localctx: ParagraphContext = new ParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, cobolParser.RULE_paragraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1227;
			await this.paragraph_name();
			this.state = 1228;
			this.match(cobolParser.DOT_);
			this.state = 1232;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1229;
				await this.replace_statement();
				}
				}
				this.state = 1234;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1250;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ADD) | (1 << cobolParser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (cobolParser.CALL - 52)) | (1 << (cobolParser.CANCEL - 52)) | (1 << (cobolParser.CLOSE - 52)) | (1 << (cobolParser.COMPUTE - 52)))) !== 0) || _la === cobolParser.CONTINUE || _la === cobolParser.DELETE || _la === cobolParser.DISPLAY || _la === cobolParser.DIVIDE || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & ((1 << (cobolParser.EVALUATE - 165)) | (1 << (cobolParser.EXIT - 165)) | (1 << (cobolParser.GENERATE - 165)) | (1 << (cobolParser.GO - 165)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (cobolParser.IF - 206)) | (1 << (cobolParser.INITIALIZE - 206)) | (1 << (cobolParser.INITIATE - 206)) | (1 << (cobolParser.INSPECT - 206)))) !== 0) || ((((_la - 246)) & ~0x1F) === 0 && ((1 << (_la - 246)) & ((1 << (cobolParser.MERGE - 246)) | (1 << (cobolParser.MOVE - 246)) | (1 << (cobolParser.MULTIPLY - 246)) | (1 << (cobolParser.OPEN - 246)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (cobolParser.PERFORM - 281)) | (1 << (cobolParser.READ - 281)) | (1 << (cobolParser.RECORD - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (cobolParser.RELEASE - 313)) | (1 << (cobolParser.RETURN - 313)) | (1 << (cobolParser.REWRITE - 313)) | (1 << (cobolParser.SEARCH - 313)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (cobolParser.SET - 350)) | (1 << (cobolParser.SORT - 350)) | (1 << (cobolParser.START - 350)) | (1 << (cobolParser.STOP - 350)) | (1 << (cobolParser.STRING - 350)) | (1 << (cobolParser.SUBTRACT - 350)) | (1 << (cobolParser.SUPPRESS - 350)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (cobolParser.TERMINATE - 383)) | (1 << (cobolParser.UNLOCK - 383)) | (1 << (cobolParser.UNSTRING - 383)))) !== 0) || _la === cobolParser.WRITE || _la === cobolParser.EXEC) {
				{
				{
				this.state = 1237;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 1237;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.ACCEPT:
					case cobolParser.ADD:
					case cobolParser.ALTER:
					case cobolParser.CALL:
					case cobolParser.CANCEL:
					case cobolParser.CLOSE:
					case cobolParser.COMPUTE:
					case cobolParser.CONTINUE:
					case cobolParser.DELETE:
					case cobolParser.DISPLAY:
					case cobolParser.DIVIDE:
					case cobolParser.EVALUATE:
					case cobolParser.EXIT:
					case cobolParser.GENERATE:
					case cobolParser.GO:
					case cobolParser.IF:
					case cobolParser.INITIALIZE:
					case cobolParser.INITIATE:
					case cobolParser.INSPECT:
					case cobolParser.MERGE:
					case cobolParser.MOVE:
					case cobolParser.MULTIPLY:
					case cobolParser.OPEN:
					case cobolParser.PERFORM:
					case cobolParser.READ:
					case cobolParser.RECORD:
					case cobolParser.RELEASE:
					case cobolParser.RETURN:
					case cobolParser.REWRITE:
					case cobolParser.SEARCH:
					case cobolParser.SET:
					case cobolParser.SORT:
					case cobolParser.START:
					case cobolParser.STOP:
					case cobolParser.STRING:
					case cobolParser.SUBTRACT:
					case cobolParser.SUPPRESS:
					case cobolParser.TERMINATE:
					case cobolParser.UNLOCK:
					case cobolParser.UNSTRING:
					case cobolParser.WRITE:
						{
						this.state = 1235;
						await this.statement();
						}
						break;
					case cobolParser.EXEC:
						{
						this.state = 1236;
						await this.exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 1239;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ADD) | (1 << cobolParser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (cobolParser.CALL - 52)) | (1 << (cobolParser.CANCEL - 52)) | (1 << (cobolParser.CLOSE - 52)) | (1 << (cobolParser.COMPUTE - 52)))) !== 0) || _la === cobolParser.CONTINUE || _la === cobolParser.DELETE || _la === cobolParser.DISPLAY || _la === cobolParser.DIVIDE || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & ((1 << (cobolParser.EVALUATE - 165)) | (1 << (cobolParser.EXIT - 165)) | (1 << (cobolParser.GENERATE - 165)) | (1 << (cobolParser.GO - 165)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (cobolParser.IF - 206)) | (1 << (cobolParser.INITIALIZE - 206)) | (1 << (cobolParser.INITIATE - 206)) | (1 << (cobolParser.INSPECT - 206)))) !== 0) || ((((_la - 246)) & ~0x1F) === 0 && ((1 << (_la - 246)) & ((1 << (cobolParser.MERGE - 246)) | (1 << (cobolParser.MOVE - 246)) | (1 << (cobolParser.MULTIPLY - 246)) | (1 << (cobolParser.OPEN - 246)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (cobolParser.PERFORM - 281)) | (1 << (cobolParser.READ - 281)) | (1 << (cobolParser.RECORD - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (cobolParser.RELEASE - 313)) | (1 << (cobolParser.RETURN - 313)) | (1 << (cobolParser.REWRITE - 313)) | (1 << (cobolParser.SEARCH - 313)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (cobolParser.SET - 350)) | (1 << (cobolParser.SORT - 350)) | (1 << (cobolParser.START - 350)) | (1 << (cobolParser.STOP - 350)) | (1 << (cobolParser.STRING - 350)) | (1 << (cobolParser.SUBTRACT - 350)) | (1 << (cobolParser.SUPPRESS - 350)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (cobolParser.TERMINATE - 383)) | (1 << (cobolParser.UNLOCK - 383)) | (1 << (cobolParser.UNSTRING - 383)))) !== 0) || _la === cobolParser.WRITE || _la === cobolParser.EXEC);
				this.state = 1241;
				this.match(cobolParser.DOT_);
				this.state = 1245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.REPLACE) {
					{
					{
					this.state = 1242;
					await this.replace_statement();
					}
					}
					this.state = 1247;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async paragraph_name() {
		let _localctx: Paragraph_nameContext = new Paragraph_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, cobolParser.RULE_paragraph_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1253;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async use_statement() {
		let _localctx: Use_statementContext = new Use_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, cobolParser.RULE_use_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1255;
			this.match(cobolParser.USE);
			this.state = 1257;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.GLOBAL) {
				{
				this.state = 1256;
				this.match(cobolParser.GLOBAL);
				}
			}

			this.state = 1272;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AFTER:
				{
				this.state = 1259;
				this.match(cobolParser.AFTER);
				this.state = 1261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.STANDARD) {
					{
					this.state = 1260;
					this.match(cobolParser.STANDARD);
					}
				}

				this.state = 1263;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ERROR || _la === cobolParser.EXCEPTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 1264;
				this.match(cobolParser.PROCEDURE);
				this.state = 1266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 1265;
					this.match(cobolParser.ON);
					}
				}

				this.state = 1268;
				await this.use_on();
				}
				break;
			case cobolParser.BEFORE:
				{
				this.state = 1269;
				this.match(cobolParser.BEFORE);
				this.state = 1270;
				this.match(cobolParser.REPORTING);
				this.state = 1271;
				await this.group_data_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1274;
			this.match(cobolParser.DOT_);
			this.state = 1278;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1275;
				await this.replace_statement();
				}
				}
				this.state = 1280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async group_data_name() {
		let _localctx: Group_data_nameContext = new Group_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, cobolParser.RULE_group_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1281;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async use_on() {
		let _localctx: Use_onContext = new Use_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, cobolParser.RULE_use_on);
		let _la: number;
		try {
			this.state = 1292;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1283;
					await this.file_name();
					}
					}
					this.state = 1286;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;
			case cobolParser.INPUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1288;
				this.match(cobolParser.INPUT);
				}
				break;
			case cobolParser.OUTPUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1289;
				this.match(cobolParser.OUTPUT);
				}
				break;
			case cobolParser.I_O:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1290;
				this.match(cobolParser.I_O);
				}
				break;
			case cobolParser.EXTEND:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1291;
				this.match(cobolParser.EXTEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async section_header() {
		let _localctx: Section_headerContext = new Section_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, cobolParser.RULE_section_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1294;
			await this.section_name();
			this.state = 1295;
			this.match(cobolParser.SECTION);
			this.state = 1297;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_) {
				{
				this.state = 1296;
				await this.segment_number();
				}
			}

			this.state = 1299;
			this.match(cobolParser.DOT_);
			this.state = 1303;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 1300;
				await this.replace_statement();
				}
				}
				this.state = 1305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async section_name() {
		let _localctx: Section_nameContext = new Section_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, cobolParser.RULE_section_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1306;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async using() {
		let _localctx: UsingContext = new UsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, cobolParser.RULE_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1308;
			this.match(cobolParser.USING);
			this.state = 1310;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1309;
				await this.qualified_data_item();
				}
				}
				this.state = 1312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async giving() {
		let _localctx: GivingContext = new GivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, cobolParser.RULE_giving);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1314;
			this.match(cobolParser.GIVING);
			this.state = 1315;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async statement() {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, cobolParser.RULE_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1359;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 56, this._ctx) ) {
			case 1:
				{
				this.state = 1317;
				await this.accept_statement();
				}
				break;

			case 2:
				{
				this.state = 1318;
				await this.add_statement();
				}
				break;

			case 3:
				{
				this.state = 1319;
				await this.alter_statement();
				}
				break;

			case 4:
				{
				this.state = 1320;
				await this.call_statement();
				}
				break;

			case 5:
				{
				this.state = 1321;
				await this.cancel_statement();
				}
				break;

			case 6:
				{
				this.state = 1322;
				await this.close_statement();
				}
				break;

			case 7:
				{
				this.state = 1323;
				await this.compute_statement();
				}
				break;

			case 8:
				{
				this.state = 1324;
				await this.continue_statement();
				}
				break;

			case 9:
				{
				this.state = 1325;
				await this.delete_statement();
				}
				break;

			case 10:
				{
				this.state = 1326;
				await this.display_statement();
				}
				break;

			case 11:
				{
				this.state = 1327;
				await this.divide_statement();
				}
				break;

			case 12:
				{
				this.state = 1328;
				await this.evaluate_statement();
				}
				break;

			case 13:
				{
				this.state = 1329;
				await this.exit_statement();
				}
				break;

			case 14:
				{
				this.state = 1330;
				await this.exit_program_statement();
				}
				break;

			case 15:
				{
				this.state = 1331;
				await this.generate_statement();
				}
				break;

			case 16:
				{
				this.state = 1332;
				await this.go_to_statement();
				}
				break;

			case 17:
				{
				this.state = 1333;
				await this.if_statement();
				}
				break;

			case 18:
				{
				this.state = 1334;
				await this.initialize_statement();
				}
				break;

			case 19:
				{
				this.state = 1335;
				await this.initiate_statement();
				}
				break;

			case 20:
				{
				this.state = 1336;
				await this.inspect_statement();
				}
				break;

			case 21:
				{
				this.state = 1337;
				await this.merge_statement();
				}
				break;

			case 22:
				{
				this.state = 1338;
				await this.move_statement();
				}
				break;

			case 23:
				{
				this.state = 1339;
				await this.multiply_statement();
				}
				break;

			case 24:
				{
				this.state = 1340;
				await this.open_statement();
				}
				break;

			case 25:
				{
				this.state = 1341;
				await this.perform_statement();
				}
				break;

			case 26:
				{
				this.state = 1342;
				await this.read_statement();
				}
				break;

			case 27:
				{
				this.state = 1343;
				await this.release_statement();
				}
				break;

			case 28:
				{
				this.state = 1344;
				await this.return_statement();
				}
				break;

			case 29:
				{
				this.state = 1345;
				await this.rewrite_statement();
				}
				break;

			case 30:
				{
				this.state = 1346;
				await this.search_statement();
				}
				break;

			case 31:
				{
				this.state = 1347;
				await this.set_statement();
				}
				break;

			case 32:
				{
				this.state = 1348;
				await this.sort_statement();
				}
				break;

			case 33:
				{
				this.state = 1349;
				await this.start_statement();
				}
				break;

			case 34:
				{
				this.state = 1350;
				await this.stop_statement();
				}
				break;

			case 35:
				{
				this.state = 1351;
				await this.string_statement();
				}
				break;

			case 36:
				{
				this.state = 1352;
				await this.subtract_statement();
				}
				break;

			case 37:
				{
				this.state = 1353;
				await this.suppress_statement();
				}
				break;

			case 38:
				{
				this.state = 1354;
				await this.terminate_statement();
				}
				break;

			case 39:
				{
				this.state = 1355;
				await this.unlock_statement();
				}
				break;

			case 40:
				{
				this.state = 1356;
				await this.unstring_statement();
				}
				break;

			case 41:
				{
				this.state = 1357;
				await this.write_statement();
				}
				break;

			case 42:
				{
				this.state = 1358;
				await this.record_statement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async exec_sql_statement() {
		let _localctx: Exec_sql_statementContext = new Exec_sql_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, cobolParser.RULE_exec_sql_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1361;
			this.match(cobolParser.EXEC);
			this.state = 1362;
			this.match(cobolParser.SQL);
			this.state = 1366;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.STRING_LITERAL_) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALLOWING) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALPHANUMERIC) | (1 << cobolParser.ALPHANUMERIC_EDITED) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.ANY) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTHOR - 32)) | (1 << (cobolParser.AUTO - 32)) | (1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COLLATING - 64)) | (1 << (cobolParser.COLUMN - 64)) | (1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CORRESPONDING - 96)) | (1 << (cobolParser.COUNT - 96)) | (1 << (cobolParser.CRT - 96)) | (1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITED - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDENCY - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DICTIONARY - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.DUPLICATES - 128)) | (1 << (cobolParser.DYNAMIC - 128)) | (1 << (cobolParser.EBCDIC - 128)) | (1 << (cobolParser.ECHO - 128)) | (1 << (cobolParser.EDITING - 128)) | (1 << (cobolParser.ELSE - 128)) | (1 << (cobolParser.END - 128)) | (1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EOP - 160)) | (1 << (cobolParser.EOS - 160)) | (1 << (cobolParser.EQUAL - 160)) | (1 << (cobolParser.ERASE - 160)) | (1 << (cobolParser.ERROR - 160)) | (1 << (cobolParser.EVALUATE - 160)) | (1 << (cobolParser.EVERY - 160)) | (1 << (cobolParser.EXCEPTION - 160)) | (1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.GENERATE - 192)) | (1 << (cobolParser.GIVING - 192)) | (1 << (cobolParser.GLOBAL - 192)) | (1 << (cobolParser.GO - 192)) | (1 << (cobolParser.GREATER - 192)) | (1 << (cobolParser.GROUP - 192)) | (1 << (cobolParser.HEADING - 192)) | (1 << (cobolParser.HIGHLIGHT - 192)) | (1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.JUSTIFIED - 224)) | (1 << (cobolParser.KEY - 224)) | (1 << (cobolParser.LABEL - 224)) | (1 << (cobolParser.LAST - 224)) | (1 << (cobolParser.LEADING - 224)) | (1 << (cobolParser.LEFT - 224)) | (1 << (cobolParser.LESS - 224)) | (1 << (cobolParser.LIMIT - 224)) | (1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.NOT - 256)) | (1 << (cobolParser.NUMBER - 256)) | (1 << (cobolParser.NUMERIC - 256)) | (1 << (cobolParser.NUMERIC_EDITED - 256)) | (1 << (cobolParser.OBJECT_COMPUTER - 256)) | (1 << (cobolParser.OCCURS - 256)) | (1 << (cobolParser.OF - 256)) | (1 << (cobolParser.OFF - 256)) | (1 << (cobolParser.OMITTED - 256)) | (1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORDER - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OTHER - 256)) | (1 << (cobolParser.OTHERS - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.POSITIVE - 288)) | (1 << (cobolParser.PREALLOCATION - 288)) | (1 << (cobolParser.PREVIOUS - 288)) | (1 << (cobolParser.PRINTER - 288)) | (1 << (cobolParser.PRINTING - 288)) | (1 << (cobolParser.PRINT_CONTROL - 288)) | (1 << (cobolParser.PRIOR - 288)) | (1 << (cobolParser.PROCEDURE - 288)) | (1 << (cobolParser.PROCEED - 288)) | (1 << (cobolParser.PROGRAM - 288)) | (1 << (cobolParser.PROGRAM_ID - 288)) | (1 << (cobolParser.PROTECTED - 288)) | (1 << (cobolParser.QUOTE - 288)) | (1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.READERS - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.REGARDLESS - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.REPORTING - 320)) | (1 << (cobolParser.REPORTS - 320)) | (1 << (cobolParser.REQUIRED - 320)) | (1 << (cobolParser.RERUN - 320)) | (1 << (cobolParser.RESERVE - 320)) | (1 << (cobolParser.RESET - 320)) | (1 << (cobolParser.RETURN - 320)) | (1 << (cobolParser.REVERSED - 320)) | (1 << (cobolParser.REVERSE_VIDEO - 320)) | (1 << (cobolParser.REWIND - 320)) | (1 << (cobolParser.REWRITE - 320)) | (1 << (cobolParser.RF - 320)) | (1 << (cobolParser.RH - 320)) | (1 << (cobolParser.RIGHT - 320)) | (1 << (cobolParser.ROLLBACK - 320)) | (1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.RUN - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SENTENCE - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SIGNED - 352)) | (1 << (cobolParser.SIZE - 352)) | (1 << (cobolParser.SORT - 352)) | (1 << (cobolParser.SORT_MERGE - 352)) | (1 << (cobolParser.SOURCE - 352)) | (1 << (cobolParser.SOURCE_COMPUTER - 352)) | (1 << (cobolParser.SPACE - 352)) | (1 << (cobolParser.SPACES - 352)) | (1 << (cobolParser.SPECIAL_NAMES - 352)) | (1 << (cobolParser.STANDARD - 352)) | (1 << (cobolParser.STANDARD_1 - 352)) | (1 << (cobolParser.STANDARD_2 - 352)) | (1 << (cobolParser.START - 352)) | (1 << (cobolParser.STATUS - 352)) | (1 << (cobolParser.STOP - 352)) | (1 << (cobolParser.STRING - 352)) | (1 << (cobolParser.SUBTRACT - 352)) | (1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SWITCH_N_ - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.TEST - 384)) | (1 << (cobolParser.THAN - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.THROUGH - 384)) | (1 << (cobolParser.THRU - 384)) | (1 << (cobolParser.TIME - 384)) | (1 << (cobolParser.TIMES - 384)) | (1 << (cobolParser.TO - 384)) | (1 << (cobolParser.TOP - 384)) | (1 << (cobolParser.TRAILING - 384)) | (1 << (cobolParser.TRUE - 384)) | (1 << (cobolParser.TYPE - 384)) | (1 << (cobolParser.UNDERLINE - 384)) | (1 << (cobolParser.UNDERLINED - 384)) | (1 << (cobolParser.UNIT - 384)) | (1 << (cobolParser.UNLOCK - 384)) | (1 << (cobolParser.UNSIGNED - 384)) | (1 << (cobolParser.UNSTRING - 384)) | (1 << (cobolParser.UNTIL - 384)) | (1 << (cobolParser.UP - 384)) | (1 << (cobolParser.UPDATERS - 384)) | (1 << (cobolParser.UPON - 384)) | (1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.WORDS - 416)) | (1 << (cobolParser.WORKING_STORAGE - 416)) | (1 << (cobolParser.WRITE - 416)) | (1 << (cobolParser.WRITERS - 416)) | (1 << (cobolParser.YYYYDDD - 416)) | (1 << (cobolParser.YYYYMMDD - 416)) | (1 << (cobolParser.ZERO - 416)) | (1 << (cobolParser.ZEROES - 416)) | (1 << (cobolParser.ZEROS - 416)) | (1 << (cobolParser.EXEC - 416)) | (1 << (cobolParser.SQL - 416)) | (1 << (cobolParser.PIC - 416)) | (1 << (cobolParser.PICTURE - 416)) | (1 << (cobolParser.PSEUDO_TEXT_ - 416)) | (1 << (cobolParser.EXCLAM_ - 416)) | (1 << (cobolParser.UNDER_ - 416)) | (1 << (cobolParser.PLUS_ - 416)) | (1 << (cobolParser.MINUS_ - 416)) | (1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (cobolParser.ATP_ - 448)) | (1 << (cobolParser.DOT_ - 448)) | (1 << (cobolParser.LCURLY_ - 448)) | (1 << (cobolParser.RCURLY_ - 448)) | (1 << (cobolParser.NUMERIC_LITERAL_ - 448)) | (1 << (cobolParser.INTEGER_LITERAL_ - 448)) | (1 << (cobolParser.HEX_LITERAL_ - 448)) | (1 << (cobolParser.USER_DEFINED_WORD_ - 448)) | (1 << (cobolParser.COMMA_ - 448)) | (1 << (cobolParser.SEMI_ - 448)) | (1 << (cobolParser.WHITESPACE_ - 448)) | (1 << (cobolParser.NEWLINE_ - 448)) | (1 << (cobolParser.ANY_CHAR_ - 448)) | (1 << (cobolParser.SYMBOL_IN_PICTURE_ - 448)) | (1 << (cobolParser.IS_IN_PICTURE_ - 448)) | (1 << (cobolParser.CHARACTER_STRING_ - 448)))) !== 0)) {
				{
				{
				this.state = 1363;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.END_EXEC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				}
				this.state = 1368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1369;
			this.match(cobolParser.END_EXEC);
			this.state = 1371;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
			case 1:
				{
				this.state = 1370;
				this.match(cobolParser.DOT_);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async record_name() {
		let _localctx: Record_nameContext = new Record_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, cobolParser.RULE_record_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1373;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async library_name() {
		let _localctx: Library_nameContext = new Library_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, cobolParser.RULE_library_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1375;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async text_name() {
		let _localctx: Text_nameContext = new Text_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, cobolParser.RULE_text_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1377;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async replace_statement() {
		let _localctx: Replace_statementContext = new Replace_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, cobolParser.RULE_replace_statement);
		let _la: number;
		try {
			this.state = 1391;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 60, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1379;
				this.match(cobolParser.REPLACE);
				this.state = 1380;
				this.match(cobolParser.OFF);
				this.state = 1381;
				this.match(cobolParser.DOT_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1382;
				this.match(cobolParser.REPLACE);
				this.state = 1386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1383;
					this.match(cobolParser.PSEUDO_TEXT_);
					this.state = 1384;
					this.match(cobolParser.BY);
					this.state = 1385;
					this.match(cobolParser.PSEUDO_TEXT_);
					}
					}
					this.state = 1388;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.PSEUDO_TEXT_);
				this.state = 1390;
				this.match(cobolParser.DOT_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async write_statement() {
		let _localctx: Write_statementContext = new Write_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, cobolParser.RULE_write_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1393;
			this.match(cobolParser.WRITE);
			this.state = 1394;
			await this.rec_name();
			this.state = 1397;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 1395;
				this.match(cobolParser.FROM);
				this.state = 1396;
				await this.src_item();
				}
			}

			this.state = 1404;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALLOWING) {
				{
				this.state = 1399;
				this.match(cobolParser.ALLOWING);
				this.state = 1400;
				this.match(cobolParser.NO);
				this.state = 1402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OTHERS) {
					{
					this.state = 1401;
					this.match(cobolParser.OTHERS);
					}
				}

				}
			}

			this.state = 1423;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 68, this._ctx) ) {
			case 1:
				{
				this.state = 1406;
				await this.invalid_key_variants();
				}
				break;

			case 2:
				{
				this.state = 1412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AFTER || _la === cobolParser.BEFORE) {
					{
					this.state = 1407;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.AFTER || _la === cobolParser.BEFORE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					this.state = 1409;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ADVANCING) {
						{
						this.state = 1408;
						this.match(cobolParser.ADVANCING);
						}
					}

					this.state = 1411;
					await this.advance_value();
					}
				}

				this.state = 1414;
				await this.at_eop_variants();
				}
				break;

			case 3:
				{
				this.state = 1415;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AFTER || _la === cobolParser.BEFORE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 1417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ADVANCING) {
					{
					this.state = 1416;
					this.match(cobolParser.ADVANCING);
					}
				}

				this.state = 1419;
				await this.advance_value();
				this.state = 1421;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
				case 1:
					{
					this.state = 1420;
					await this.at_eop_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 1426;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 69, this._ctx) ) {
			case 1:
				{
				this.state = 1425;
				this.match(cobolParser.END_WRITE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async advance_value() {
		let _localctx: Advance_valueContext = new Advance_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, cobolParser.RULE_advance_value);
		let _la: number;
		try {
			this.state = 1434;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 71, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1428;
				await this.advance_num();
				this.state = 1430;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINE || _la === cobolParser.LINES) {
					{
					this.state = 1429;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1432;
				await this.top_of_page_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1433;
				this.match(cobolParser.PAGE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async advance_num() {
		let _localctx: Advance_numContext = new Advance_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, cobolParser.RULE_advance_num);
		let _la: number;
		try {
			this.state = 1438;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1436;
				await this.identifier();
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1437;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unstring_statement() {
		let _localctx: Unstring_statementContext = new Unstring_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, cobolParser.RULE_unstring_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1440;
			this.match(cobolParser.UNSTRING);
			this.state = 1441;
			await this.unstring_src();
			this.state = 1454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DELIMITED) {
				{
				this.state = 1442;
				this.match(cobolParser.DELIMITED);
				this.state = 1444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 1443;
					this.match(cobolParser.BY);
					}
				}

				this.state = 1446;
				await this.unstring_delim_clause();
				this.state = 1451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.OR) {
					{
					{
					this.state = 1447;
					this.match(cobolParser.OR);
					this.state = 1448;
					await this.unstring_delim_clause();
					}
					}
					this.state = 1453;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1456;
			this.match(cobolParser.INTO);
			this.state = 1458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1457;
				await this.unstring_dest_clause();
				}
				}
				this.state = 1460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 1467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.POINTER || _la === cobolParser.WITH) {
				{
				this.state = 1463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1462;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 1465;
				this.match(cobolParser.POINTER);
				this.state = 1466;
				await this.string_pointer();
				}
			}

			this.state = 1474;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TALLYING) {
				{
				this.state = 1469;
				this.match(cobolParser.TALLYING);
				this.state = 1471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 1470;
					this.match(cobolParser.IN);
					}
				}

				this.state = 1473;
				await this.unstring_tally_ctr();
				}
			}

			this.state = 1477;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 81, this._ctx) ) {
			case 1:
				{
				this.state = 1476;
				await this.on_overflow_variants();
				}
				break;
			}
			this.state = 1480;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 82, this._ctx) ) {
			case 1:
				{
				this.state = 1479;
				this.match(cobolParser.END_UNSTRING);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unstring_tally_ctr() {
		let _localctx: Unstring_tally_ctrContext = new Unstring_tally_ctrContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, cobolParser.RULE_unstring_tally_ctr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1482;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unstring_dest_clause() {
		let _localctx: Unstring_dest_clauseContext = new Unstring_dest_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, cobolParser.RULE_unstring_dest_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1484;
			await this.dest_string();
			this.state = 1490;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DELIMITER) {
				{
				this.state = 1485;
				this.match(cobolParser.DELIMITER);
				this.state = 1487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 1486;
					this.match(cobolParser.IN);
					}
				}

				this.state = 1489;
				await this.delim_dest();
				}
			}

			this.state = 1497;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COUNT) {
				{
				this.state = 1492;
				this.match(cobolParser.COUNT);
				this.state = 1494;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 1493;
					this.match(cobolParser.IN);
					}
				}

				this.state = 1496;
				await this.countr();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async countr() {
		let _localctx: CountrContext = new CountrContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, cobolParser.RULE_countr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1499;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async dest_string() {
		let _localctx: Dest_stringContext = new Dest_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, cobolParser.RULE_dest_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1501;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async delim_dest() {
		let _localctx: Delim_destContext = new Delim_destContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, cobolParser.RULE_delim_dest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1503;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unstring_delim_clause() {
		let _localctx: Unstring_delim_clauseContext = new Unstring_delim_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, cobolParser.RULE_unstring_delim_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALL) {
				{
				this.state = 1505;
				this.match(cobolParser.ALL);
				}
			}

			this.state = 1508;
			await this.unstring_delim();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unstring_delim() {
		let _localctx: Unstring_delimContext = new Unstring_delimContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, cobolParser.RULE_unstring_delim);
		try {
			this.state = 1513;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1510;
				await this.identifier();
				}
				break;
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1511;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1512;
				await this.figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unstring_src() {
		let _localctx: Unstring_srcContext = new Unstring_srcContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, cobolParser.RULE_unstring_src);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1515;
			await this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unlock_statement() {
		let _localctx: Unlock_statementContext = new Unlock_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, cobolParser.RULE_unlock_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1517;
			this.match(cobolParser.UNLOCK);
			this.state = 1518;
			await this.file_name();
			this.state = 1525;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 90, this._ctx) ) {
			case 1:
				{
				this.state = 1519;
				this.match(cobolParser.RECORD);
				}
				break;

			case 2:
				{
				this.state = 1520;
				this.match(cobolParser.RECORDS);
				}
				break;

			case 3:
				{
				this.state = 1521;
				this.match(cobolParser.ALL);
				this.state = 1523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.RECORDS) {
					{
					this.state = 1522;
					this.match(cobolParser.RECORDS);
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async terminate_statement() {
		let _localctx: Terminate_statementContext = new Terminate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, cobolParser.RULE_terminate_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1527;
			this.match(cobolParser.TERMINATE);
			this.state = 1529;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1528;
				await this.report_name();
				}
				}
				this.state = 1531;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async suppress_statement() {
		let _localctx: Suppress_statementContext = new Suppress_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, cobolParser.RULE_suppress_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1533;
			this.match(cobolParser.SUPPRESS);
			this.state = 1535;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PRINTING) {
				{
				this.state = 1534;
				this.match(cobolParser.PRINTING);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async subtract_statement() {
		let _localctx: Subtract_statementContext = new Subtract_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, cobolParser.RULE_subtract_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1537;
			this.match(cobolParser.SUBTRACT);
			this.state = 1564;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 1539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1538;
					await this.sub_num();
					}
					}
					this.state = 1541;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.FUNCTION || ((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)) | (1 << (cobolParser.USER_DEFINED_WORD_ - 452)))) !== 0));
				this.state = 1543;
				this.match(cobolParser.FROM);
				this.state = 1547;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
				case 1:
					{
					this.state = 1544;
					await this.sub_num();
					this.state = 1545;
					this.match(cobolParser.GIVING);
					}
					break;
				}
				this.state = 1553;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1549;
					await this.identifier_result();
					this.state = 1551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ROUNDED) {
						{
						this.state = 1550;
						this.match(cobolParser.ROUNDED);
						}
					}

					}
					}
					this.state = 1555;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;
			case cobolParser.CORR:
			case cobolParser.CORRESPONDING:
				{
				this.state = 1557;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 1558;
				await this.sub_grp();
				this.state = 1559;
				this.match(cobolParser.FROM);
				this.state = 1560;
				await this.sub_grp();
				this.state = 1562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ROUNDED) {
					{
					this.state = 1561;
					this.match(cobolParser.ROUNDED);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1567;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 99, this._ctx) ) {
			case 1:
				{
				this.state = 1566;
				await this.on_size_variants();
				}
				break;
			}
			this.state = 1570;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 100, this._ctx) ) {
			case 1:
				{
				this.state = 1569;
				this.match(cobolParser.END_SUBTRACT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sub_grp() {
		let _localctx: Sub_grpContext = new Sub_grpContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, cobolParser.RULE_sub_grp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1572;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sub_num() {
		let _localctx: Sub_numContext = new Sub_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, cobolParser.RULE_sub_num);
		let _la: number;
		try {
			this.state = 1576;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1574;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1575;
				await this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async string_statement() {
		let _localctx: String_statementContext = new String_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, cobolParser.RULE_string_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1578;
			this.match(cobolParser.STRING);
			this.state = 1592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1579;
					await this.string_src();
					}
					}
					this.state = 1582;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.ALL || _la === cobolParser.HIGH_VALUE || _la === cobolParser.HIGH_VALUES || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)))) !== 0) || _la === cobolParser.USER_DEFINED_WORD_);
				this.state = 1584;
				this.match(cobolParser.DELIMITED);
				this.state = 1586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 1585;
					this.match(cobolParser.BY);
					}
				}

				this.state = 1590;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.SIZE:
					{
					this.state = 1588;
					this.match(cobolParser.SIZE);
					}
					break;
				case cobolParser.STRING_LITERAL_:
				case cobolParser.ALL:
				case cobolParser.HIGH_VALUE:
				case cobolParser.HIGH_VALUES:
				case cobolParser.LOW_VALUE:
				case cobolParser.LOW_VALUES:
				case cobolParser.QUOTE:
				case cobolParser.QUOTES:
				case cobolParser.SPACE:
				case cobolParser.SPACES:
				case cobolParser.ZERO:
				case cobolParser.ZEROES:
				case cobolParser.ZEROS:
				case cobolParser.USER_DEFINED_WORD_:
					{
					this.state = 1589;
					await this.string_delim();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				this.state = 1594;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.ALL || _la === cobolParser.HIGH_VALUE || _la === cobolParser.HIGH_VALUES || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)))) !== 0) || _la === cobolParser.USER_DEFINED_WORD_);
			this.state = 1596;
			this.match(cobolParser.INTO);
			this.state = 1597;
			await this.string_dest();
			this.state = 1603;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.POINTER || _la === cobolParser.WITH) {
				{
				this.state = 1599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1598;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 1601;
				this.match(cobolParser.POINTER);
				this.state = 1602;
				await this.string_pointer();
				}
			}

			this.state = 1606;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 108, this._ctx) ) {
			case 1:
				{
				this.state = 1605;
				await this.on_overflow_variants();
				}
				break;
			}
			this.state = 1609;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 109, this._ctx) ) {
			case 1:
				{
				this.state = 1608;
				this.match(cobolParser.END_STRING);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async string_pointer() {
		let _localctx: String_pointerContext = new String_pointerContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, cobolParser.RULE_string_pointer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1611;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async string_dest() {
		let _localctx: String_destContext = new String_destContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, cobolParser.RULE_string_dest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1613;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async string_delim() {
		let _localctx: String_delimContext = new String_delimContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, cobolParser.RULE_string_delim);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1615;
			await this.string_src();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async string_src() {
		let _localctx: String_srcContext = new String_srcContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, cobolParser.RULE_string_src);
		try {
			this.state = 1620;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1617;
				await this.identifier_result();
				}
				break;
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1618;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1619;
				await this.figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async stop_statement() {
		let _localctx: Stop_statementContext = new Stop_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, cobolParser.RULE_stop_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1622;
			this.match(cobolParser.STOP);
			this.state = 1625;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RUN:
				{
				this.state = 1623;
				this.match(cobolParser.RUN);
				}
				break;
			case cobolParser.STRING_LITERAL_:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				{
				this.state = 1624;
				await this.stop_disp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async stop_disp() {
		let _localctx: Stop_dispContext = new Stop_dispContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, cobolParser.RULE_stop_disp);
		let _la: number;
		try {
			this.state = 1630;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1627;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1628;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1629;
				await this.figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async start_statement() {
		let _localctx: Start_statementContext = new Start_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, cobolParser.RULE_start_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1632;
			this.match(cobolParser.START);
			this.state = 1633;
			await this.file_name();
			this.state = 1638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 1634;
				this.match(cobolParser.KEY);
				this.state = 1635;
				await this.condition_operator();
				this.state = 1636;
				await this.sort_key_data();
				}
			}

			this.state = 1641;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALLOWING || _la === cobolParser.REGARDLESS) {
				{
				this.state = 1640;
				await this.regard_allow();
				}
			}

			this.state = 1644;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				{
				this.state = 1643;
				await this.invalid_key_variants();
				}
				break;
			}
			this.state = 1647;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 116, this._ctx) ) {
			case 1:
				{
				this.state = 1646;
				this.match(cobolParser.END_START);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sort_key_data() {
		let _localctx: Sort_key_dataContext = new Sort_key_dataContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, cobolParser.RULE_sort_key_data);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1649;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sort_statement() {
		let _localctx: Sort_statementContext = new Sort_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, cobolParser.RULE_sort_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1651;
			this.match(cobolParser.SORT);
			this.state = 1652;
			await this.sort_name();
			this.state = 1656;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1653;
					await this.on_sort_key();
					}
					}
				}
				this.state = 1658;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
			}
			this.state = 1669;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DUPLICATES || _la === cobolParser.WITH) {
				{
				this.state = 1660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1659;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 1662;
				this.match(cobolParser.DUPLICATES);
				this.state = 1664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 1663;
					this.match(cobolParser.IN);
					}
				}

				this.state = 1667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ORDER) {
					{
					this.state = 1666;
					this.match(cobolParser.ORDER);
					}
				}

				}
			}

			this.state = 1679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING || _la === cobolParser.SEQUENCE) {
				{
				this.state = 1672;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.COLLATING) {
					{
					this.state = 1671;
					this.match(cobolParser.COLLATING);
					}
				}

				this.state = 1674;
				this.match(cobolParser.SEQUENCE);
				this.state = 1676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1675;
					this.match(cobolParser.IS);
					}
				}

				this.state = 1678;
				await this.alpha_name();
				}
			}

			this.state = 1689;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INPUT:
				{
				this.state = 1681;
				this.match(cobolParser.INPUT);
				this.state = 1682;
				await this.procedure_is();
				}
				break;
			case cobolParser.USING:
				{
				this.state = 1683;
				this.match(cobolParser.USING);
				this.state = 1685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1684;
					await this.file_name();
					}
					}
					this.state = 1687;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;
			case cobolParser.ACCEPT:
			case cobolParser.ADD:
			case cobolParser.ALTER:
			case cobolParser.AT:
			case cobolParser.CALL:
			case cobolParser.CANCEL:
			case cobolParser.CLOSE:
			case cobolParser.COMPUTE:
			case cobolParser.CONTINUE:
			case cobolParser.DELETE:
			case cobolParser.DISPLAY:
			case cobolParser.DIVIDE:
			case cobolParser.ELSE:
			case cobolParser.END:
			case cobolParser.END_ACCEPT:
			case cobolParser.END_ADD:
			case cobolParser.END_CALL:
			case cobolParser.END_COMPUTE:
			case cobolParser.END_DELETE:
			case cobolParser.END_DISPLAY:
			case cobolParser.END_DIVIDE:
			case cobolParser.END_EVALUATE:
			case cobolParser.END_IF:
			case cobolParser.END_MULTIPLY:
			case cobolParser.END_OF_PAGE:
			case cobolParser.END_PERFORM:
			case cobolParser.END_READ:
			case cobolParser.END_RETURN:
			case cobolParser.END_REWRITE:
			case cobolParser.END_SEARCH:
			case cobolParser.END_START:
			case cobolParser.END_STRING:
			case cobolParser.END_SUBTRACT:
			case cobolParser.END_UNSTRING:
			case cobolParser.END_WRITE:
			case cobolParser.EOP:
			case cobolParser.EVALUATE:
			case cobolParser.EXCEPTION:
			case cobolParser.EXIT:
			case cobolParser.GENERATE:
			case cobolParser.GIVING:
			case cobolParser.GO:
			case cobolParser.IF:
			case cobolParser.INITIALIZE:
			case cobolParser.INITIATE:
			case cobolParser.INSPECT:
			case cobolParser.INVALID:
			case cobolParser.MERGE:
			case cobolParser.MOVE:
			case cobolParser.MULTIPLY:
			case cobolParser.NOT:
			case cobolParser.ON:
			case cobolParser.OPEN:
			case cobolParser.OUTPUT:
			case cobolParser.OVERFLOW:
			case cobolParser.PERFORM:
			case cobolParser.READ:
			case cobolParser.RECORD:
			case cobolParser.RELEASE:
			case cobolParser.RETURN:
			case cobolParser.REWRITE:
			case cobolParser.SEARCH:
			case cobolParser.SET:
			case cobolParser.SIZE:
			case cobolParser.SORT:
			case cobolParser.START:
			case cobolParser.STOP:
			case cobolParser.STRING:
			case cobolParser.SUBTRACT:
			case cobolParser.SUPPRESS:
			case cobolParser.TERMINATE:
			case cobolParser.UNLOCK:
			case cobolParser.UNSTRING:
			case cobolParser.WHEN:
			case cobolParser.WRITE:
			case cobolParser.EXEC:
			case cobolParser.DOT_:
				break;
			default:
				break;
			}
			this.state = 1699;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.OUTPUT:
				{
				this.state = 1691;
				this.match(cobolParser.OUTPUT);
				this.state = 1692;
				await this.procedure_is();
				}
				break;
			case cobolParser.GIVING:
				{
				this.state = 1693;
				this.match(cobolParser.GIVING);
				this.state = 1695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1694;
					await this.file_name();
					}
					}
					this.state = 1697;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;
			case cobolParser.ACCEPT:
			case cobolParser.ADD:
			case cobolParser.ALTER:
			case cobolParser.AT:
			case cobolParser.CALL:
			case cobolParser.CANCEL:
			case cobolParser.CLOSE:
			case cobolParser.COMPUTE:
			case cobolParser.CONTINUE:
			case cobolParser.DELETE:
			case cobolParser.DISPLAY:
			case cobolParser.DIVIDE:
			case cobolParser.ELSE:
			case cobolParser.END:
			case cobolParser.END_ACCEPT:
			case cobolParser.END_ADD:
			case cobolParser.END_CALL:
			case cobolParser.END_COMPUTE:
			case cobolParser.END_DELETE:
			case cobolParser.END_DISPLAY:
			case cobolParser.END_DIVIDE:
			case cobolParser.END_EVALUATE:
			case cobolParser.END_IF:
			case cobolParser.END_MULTIPLY:
			case cobolParser.END_OF_PAGE:
			case cobolParser.END_PERFORM:
			case cobolParser.END_READ:
			case cobolParser.END_RETURN:
			case cobolParser.END_REWRITE:
			case cobolParser.END_SEARCH:
			case cobolParser.END_START:
			case cobolParser.END_STRING:
			case cobolParser.END_SUBTRACT:
			case cobolParser.END_UNSTRING:
			case cobolParser.END_WRITE:
			case cobolParser.EOP:
			case cobolParser.EVALUATE:
			case cobolParser.EXCEPTION:
			case cobolParser.EXIT:
			case cobolParser.GENERATE:
			case cobolParser.GO:
			case cobolParser.IF:
			case cobolParser.INITIALIZE:
			case cobolParser.INITIATE:
			case cobolParser.INSPECT:
			case cobolParser.INVALID:
			case cobolParser.MERGE:
			case cobolParser.MOVE:
			case cobolParser.MULTIPLY:
			case cobolParser.NOT:
			case cobolParser.ON:
			case cobolParser.OPEN:
			case cobolParser.OVERFLOW:
			case cobolParser.PERFORM:
			case cobolParser.READ:
			case cobolParser.RECORD:
			case cobolParser.RELEASE:
			case cobolParser.RETURN:
			case cobolParser.REWRITE:
			case cobolParser.SEARCH:
			case cobolParser.SET:
			case cobolParser.SIZE:
			case cobolParser.SORT:
			case cobolParser.START:
			case cobolParser.STOP:
			case cobolParser.STRING:
			case cobolParser.SUBTRACT:
			case cobolParser.SUPPRESS:
			case cobolParser.TERMINATE:
			case cobolParser.UNLOCK:
			case cobolParser.UNSTRING:
			case cobolParser.WHEN:
			case cobolParser.WRITE:
			case cobolParser.EXEC:
			case cobolParser.DOT_:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sort_name() {
		let _localctx: Sort_nameContext = new Sort_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, cobolParser.RULE_sort_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1701;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async procedure_is() {
		let _localctx: Procedure_isContext = new Procedure_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, cobolParser.RULE_procedure_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1703;
			this.match(cobolParser.PROCEDURE);
			this.state = 1705;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 1704;
				this.match(cobolParser.IS);
				}
			}

			this.state = 1707;
			await this.proc_thru_proc();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async on_sort_key() {
		let _localctx: On_sort_keyContext = new On_sort_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, cobolParser.RULE_on_sort_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 1709;
				this.match(cobolParser.ON);
				}
			}

			this.state = 1712;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 1714;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 1713;
				this.match(cobolParser.KEY);
				}
			}

			this.state = 1716;
			await this.sort_key();
			this.state = 1720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.USER_DEFINED_WORD_) {
				{
				{
				this.state = 1717;
				await this.sort_key();
				}
				}
				this.state = 1722;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sort_key() {
		let _localctx: Sort_keyContext = new Sort_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, cobolParser.RULE_sort_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1723;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_statement() {
		let _localctx: Set_statementContext = new Set_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, cobolParser.RULE_set_statement);
		try {
			this.state = 1731;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 133, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1725;
				await this.set_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1726;
				await this.set_statement_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1727;
				await this.set_statement_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1728;
				await this.set_statement_form4();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1729;
				await this.set_statement_form5();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1730;
				await this.set_statement_form6();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_statement_form1() {
		let _localctx: Set_statement_form1Context = new Set_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 150, cobolParser.RULE_set_statement_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1733;
			this.match(cobolParser.SET);
			this.state = 1735;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1734;
				await this.identifier_result();
				}
				}
				this.state = 1737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 1739;
			this.match(cobolParser.TO);
			this.state = 1740;
			await this.set_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_statement_form2() {
		let _localctx: Set_statement_form2Context = new Set_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 152, cobolParser.RULE_set_statement_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1742;
			this.match(cobolParser.SET);
			this.state = 1744;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1743;
				await this.identifier_result();
				}
				}
				this.state = 1746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 1748;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DOWN || _la === cobolParser.UP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 1749;
			this.match(cobolParser.BY);
			this.state = 1750;
			await this.set_increm();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_statement_form3() {
		let _localctx: Set_statement_form3Context = new Set_statement_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 154, cobolParser.RULE_set_statement_form3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1752;
			this.match(cobolParser.SET);
			this.state = 1754;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1753;
				await this.identifier_result();
				}
				}
				this.state = 1756;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 1758;
			this.match(cobolParser.TO);
			this.state = 1759;
			this.match(cobolParser.TRUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_statement_form4() {
		let _localctx: Set_statement_form4Context = new Set_statement_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 156, cobolParser.RULE_set_statement_form4);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1761;
			this.match(cobolParser.SET);
			this.state = 1766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1762;
				await this.identifier_result();
				this.state = 1763;
				this.match(cobolParser.TO);
				this.state = 1764;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.OFF || _la === cobolParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				}
				this.state = 1768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_statement_form5() {
		let _localctx: Set_statement_form5Context = new Set_statement_form5Context(this._ctx, this.state);
		this.enterRule(_localctx, 158, cobolParser.RULE_set_statement_form5);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1770;
			this.match(cobolParser.SET);
			this.state = 1772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1771;
				await this.identifier_result();
				}
				}
				this.state = 1774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 1776;
			this.match(cobolParser.TO);
			this.state = 1777;
			this.match(cobolParser.REFERENCE);
			this.state = 1779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OF) {
				{
				this.state = 1778;
				this.match(cobolParser.OF);
				}
			}

			this.state = 1781;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_statement_form6() {
		let _localctx: Set_statement_form6Context = new Set_statement_form6Context(this._ctx, this.state);
		this.enterRule(_localctx, 160, cobolParser.RULE_set_statement_form6);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1783;
			this.match(cobolParser.SET);
			this.state = 1784;
			await this.identifier_result();
			this.state = 1785;
			this.match(cobolParser.TO);
			this.state = 1786;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FAILURE || _la === cobolParser.SUCCESS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_increm() {
		let _localctx: Set_incremContext = new Set_incremContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, cobolParser.RULE_set_increm);
		let _la: number;
		try {
			this.state = 1790;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1788;
				await this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1789;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async set_val() {
		let _localctx: Set_valContext = new Set_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, cobolParser.RULE_set_val);
		let _la: number;
		try {
			this.state = 1794;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1792;
				await this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1793;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async search_statement() {
		let _localctx: Search_statementContext = new Search_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, cobolParser.RULE_search_statement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1868;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1796;
				this.match(cobolParser.SEARCH);
				this.state = 1797;
				await this.src_table();
				this.state = 1800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.VARYING) {
					{
					this.state = 1798;
					this.match(cobolParser.VARYING);
					this.state = 1799;
					await this.search_pointer();
					}
				}

				this.state = 1803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT || _la === cobolParser.END) {
					{
					this.state = 1802;
					await this.at_end();
					}
				}

				this.state = 1838;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
				case 1:
					{
					this.state = 1813;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1805;
						this.match(cobolParser.WHEN);
						this.state = 1806;
						await this.logic_expression(0);
						this.state = 1809;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							this.state = 1809;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case cobolParser.ACCEPT:
							case cobolParser.ADD:
							case cobolParser.ALTER:
							case cobolParser.CALL:
							case cobolParser.CANCEL:
							case cobolParser.CLOSE:
							case cobolParser.COMPUTE:
							case cobolParser.CONTINUE:
							case cobolParser.DELETE:
							case cobolParser.DISPLAY:
							case cobolParser.DIVIDE:
							case cobolParser.EVALUATE:
							case cobolParser.EXIT:
							case cobolParser.GENERATE:
							case cobolParser.GO:
							case cobolParser.IF:
							case cobolParser.INITIALIZE:
							case cobolParser.INITIATE:
							case cobolParser.INSPECT:
							case cobolParser.MERGE:
							case cobolParser.MOVE:
							case cobolParser.MULTIPLY:
							case cobolParser.OPEN:
							case cobolParser.PERFORM:
							case cobolParser.READ:
							case cobolParser.RECORD:
							case cobolParser.RELEASE:
							case cobolParser.RETURN:
							case cobolParser.REWRITE:
							case cobolParser.SEARCH:
							case cobolParser.SET:
							case cobolParser.SORT:
							case cobolParser.START:
							case cobolParser.STOP:
							case cobolParser.STRING:
							case cobolParser.SUBTRACT:
							case cobolParser.SUPPRESS:
							case cobolParser.TERMINATE:
							case cobolParser.UNLOCK:
							case cobolParser.UNSTRING:
							case cobolParser.WRITE:
								{
								this.state = 1807;
								await this.statement();
								}
								break;
							case cobolParser.EXEC:
								{
								this.state = 1808;
								await this.exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							this.state = 1811;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ADD) | (1 << cobolParser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (cobolParser.CALL - 52)) | (1 << (cobolParser.CANCEL - 52)) | (1 << (cobolParser.CLOSE - 52)) | (1 << (cobolParser.COMPUTE - 52)))) !== 0) || _la === cobolParser.CONTINUE || _la === cobolParser.DELETE || _la === cobolParser.DISPLAY || _la === cobolParser.DIVIDE || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & ((1 << (cobolParser.EVALUATE - 165)) | (1 << (cobolParser.EXIT - 165)) | (1 << (cobolParser.GENERATE - 165)) | (1 << (cobolParser.GO - 165)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (cobolParser.IF - 206)) | (1 << (cobolParser.INITIALIZE - 206)) | (1 << (cobolParser.INITIATE - 206)) | (1 << (cobolParser.INSPECT - 206)))) !== 0) || ((((_la - 246)) & ~0x1F) === 0 && ((1 << (_la - 246)) & ((1 << (cobolParser.MERGE - 246)) | (1 << (cobolParser.MOVE - 246)) | (1 << (cobolParser.MULTIPLY - 246)) | (1 << (cobolParser.OPEN - 246)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (cobolParser.PERFORM - 281)) | (1 << (cobolParser.READ - 281)) | (1 << (cobolParser.RECORD - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (cobolParser.RELEASE - 313)) | (1 << (cobolParser.RETURN - 313)) | (1 << (cobolParser.REWRITE - 313)) | (1 << (cobolParser.SEARCH - 313)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (cobolParser.SET - 350)) | (1 << (cobolParser.SORT - 350)) | (1 << (cobolParser.START - 350)) | (1 << (cobolParser.STOP - 350)) | (1 << (cobolParser.STRING - 350)) | (1 << (cobolParser.SUBTRACT - 350)) | (1 << (cobolParser.SUPPRESS - 350)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (cobolParser.TERMINATE - 383)) | (1 << (cobolParser.UNLOCK - 383)) | (1 << (cobolParser.UNSTRING - 383)))) !== 0) || _la === cobolParser.WRITE || _la === cobolParser.EXEC);
						}
						}
						this.state = 1815;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === cobolParser.WHEN);
					this.state = 1817;
					this.match(cobolParser.END_SEARCH);
					}
					break;

				case 2:
					{
					this.state = 1834;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 1819;
							this.match(cobolParser.WHEN);
							this.state = 1820;
							await this.logic_expression(0);
							this.state = 1832;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case cobolParser.ACCEPT:
							case cobolParser.ADD:
							case cobolParser.ALTER:
							case cobolParser.CALL:
							case cobolParser.CANCEL:
							case cobolParser.CLOSE:
							case cobolParser.COMPUTE:
							case cobolParser.CONTINUE:
							case cobolParser.DELETE:
							case cobolParser.DISPLAY:
							case cobolParser.DIVIDE:
							case cobolParser.EVALUATE:
							case cobolParser.EXIT:
							case cobolParser.GENERATE:
							case cobolParser.GO:
							case cobolParser.IF:
							case cobolParser.INITIALIZE:
							case cobolParser.INITIATE:
							case cobolParser.INSPECT:
							case cobolParser.MERGE:
							case cobolParser.MOVE:
							case cobolParser.MULTIPLY:
							case cobolParser.OPEN:
							case cobolParser.PERFORM:
							case cobolParser.READ:
							case cobolParser.RECORD:
							case cobolParser.RELEASE:
							case cobolParser.RETURN:
							case cobolParser.REWRITE:
							case cobolParser.SEARCH:
							case cobolParser.SET:
							case cobolParser.SORT:
							case cobolParser.START:
							case cobolParser.STOP:
							case cobolParser.STRING:
							case cobolParser.SUBTRACT:
							case cobolParser.SUPPRESS:
							case cobolParser.TERMINATE:
							case cobolParser.UNLOCK:
							case cobolParser.UNSTRING:
							case cobolParser.WRITE:
							case cobolParser.EXEC:
								{
								this.state = 1823;
								this._errHandler.sync(this);
								_alt = 1;
								do {
									switch (_alt) {
									case 1:
										{
										this.state = 1823;
										this._errHandler.sync(this);
										switch (this._input.LA(1)) {
										case cobolParser.ACCEPT:
										case cobolParser.ADD:
										case cobolParser.ALTER:
										case cobolParser.CALL:
										case cobolParser.CANCEL:
										case cobolParser.CLOSE:
										case cobolParser.COMPUTE:
										case cobolParser.CONTINUE:
										case cobolParser.DELETE:
										case cobolParser.DISPLAY:
										case cobolParser.DIVIDE:
										case cobolParser.EVALUATE:
										case cobolParser.EXIT:
										case cobolParser.GENERATE:
										case cobolParser.GO:
										case cobolParser.IF:
										case cobolParser.INITIALIZE:
										case cobolParser.INITIATE:
										case cobolParser.INSPECT:
										case cobolParser.MERGE:
										case cobolParser.MOVE:
										case cobolParser.MULTIPLY:
										case cobolParser.OPEN:
										case cobolParser.PERFORM:
										case cobolParser.READ:
										case cobolParser.RECORD:
										case cobolParser.RELEASE:
										case cobolParser.RETURN:
										case cobolParser.REWRITE:
										case cobolParser.SEARCH:
										case cobolParser.SET:
										case cobolParser.SORT:
										case cobolParser.START:
										case cobolParser.STOP:
										case cobolParser.STRING:
										case cobolParser.SUBTRACT:
										case cobolParser.SUPPRESS:
										case cobolParser.TERMINATE:
										case cobolParser.UNLOCK:
										case cobolParser.UNSTRING:
										case cobolParser.WRITE:
											{
											this.state = 1821;
											await this.statement();
											}
											break;
										case cobolParser.EXEC:
											{
											this.state = 1822;
											await this.exec_sql_statement();
											}
											break;
										default:
											throw new NoViableAltException(this);
										}
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									this.state = 1825;
									this._errHandler.sync(this);
									_alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
								} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
								this.state = 1828;
								this._errHandler.sync(this);
								switch ( this.interpreter.adaptivePredict(this._input, 149, this._ctx) ) {
								case 1:
									{
									this.state = 1827;
									this.match(cobolParser.END_SEARCH);
									}
									break;
								}
								}
								break;
							case cobolParser.NEXT:
								{
								this.state = 1830;
								this.match(cobolParser.NEXT);
								this.state = 1831;
								this.match(cobolParser.SENTENCE);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 1836;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1840;
				this.match(cobolParser.SEARCH);
				this.state = 1841;
				this.match(cobolParser.ALL);
				this.state = 1842;
				await this.src_table();
				this.state = 1844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT || _la === cobolParser.END) {
					{
					this.state = 1843;
					await this.at_end();
					}
				}

				this.state = 1846;
				this.match(cobolParser.WHEN);
				this.state = 1847;
				await this.search_condition();
				this.state = 1852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.AND) {
					{
					{
					this.state = 1848;
					this.match(cobolParser.AND);
					this.state = 1849;
					await this.search_condition();
					}
					}
					this.state = 1854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1866;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.ACCEPT:
				case cobolParser.ADD:
				case cobolParser.ALTER:
				case cobolParser.CALL:
				case cobolParser.CANCEL:
				case cobolParser.CLOSE:
				case cobolParser.COMPUTE:
				case cobolParser.CONTINUE:
				case cobolParser.DELETE:
				case cobolParser.DISPLAY:
				case cobolParser.DIVIDE:
				case cobolParser.EVALUATE:
				case cobolParser.EXIT:
				case cobolParser.GENERATE:
				case cobolParser.GO:
				case cobolParser.IF:
				case cobolParser.INITIALIZE:
				case cobolParser.INITIATE:
				case cobolParser.INSPECT:
				case cobolParser.MERGE:
				case cobolParser.MOVE:
				case cobolParser.MULTIPLY:
				case cobolParser.OPEN:
				case cobolParser.PERFORM:
				case cobolParser.READ:
				case cobolParser.RECORD:
				case cobolParser.RELEASE:
				case cobolParser.RETURN:
				case cobolParser.REWRITE:
				case cobolParser.SEARCH:
				case cobolParser.SET:
				case cobolParser.SORT:
				case cobolParser.START:
				case cobolParser.STOP:
				case cobolParser.STRING:
				case cobolParser.SUBTRACT:
				case cobolParser.SUPPRESS:
				case cobolParser.TERMINATE:
				case cobolParser.UNLOCK:
				case cobolParser.UNSTRING:
				case cobolParser.WRITE:
				case cobolParser.EXEC:
					{
					this.state = 1857;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							this.state = 1857;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case cobolParser.ACCEPT:
							case cobolParser.ADD:
							case cobolParser.ALTER:
							case cobolParser.CALL:
							case cobolParser.CANCEL:
							case cobolParser.CLOSE:
							case cobolParser.COMPUTE:
							case cobolParser.CONTINUE:
							case cobolParser.DELETE:
							case cobolParser.DISPLAY:
							case cobolParser.DIVIDE:
							case cobolParser.EVALUATE:
							case cobolParser.EXIT:
							case cobolParser.GENERATE:
							case cobolParser.GO:
							case cobolParser.IF:
							case cobolParser.INITIALIZE:
							case cobolParser.INITIATE:
							case cobolParser.INSPECT:
							case cobolParser.MERGE:
							case cobolParser.MOVE:
							case cobolParser.MULTIPLY:
							case cobolParser.OPEN:
							case cobolParser.PERFORM:
							case cobolParser.READ:
							case cobolParser.RECORD:
							case cobolParser.RELEASE:
							case cobolParser.RETURN:
							case cobolParser.REWRITE:
							case cobolParser.SEARCH:
							case cobolParser.SET:
							case cobolParser.SORT:
							case cobolParser.START:
							case cobolParser.STOP:
							case cobolParser.STRING:
							case cobolParser.SUBTRACT:
							case cobolParser.SUPPRESS:
							case cobolParser.TERMINATE:
							case cobolParser.UNLOCK:
							case cobolParser.UNSTRING:
							case cobolParser.WRITE:
								{
								this.state = 1855;
								await this.statement();
								}
								break;
							case cobolParser.EXEC:
								{
								this.state = 1856;
								await this.exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 1859;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 156, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					this.state = 1862;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
					case 1:
						{
						this.state = 1861;
						this.match(cobolParser.END_SEARCH);
						}
						break;
					}
					}
					break;
				case cobolParser.NEXT:
					{
					this.state = 1864;
					this.match(cobolParser.NEXT);
					this.state = 1865;
					this.match(cobolParser.SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async search_condition() {
		let _localctx: Search_conditionContext = new Search_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, cobolParser.RULE_search_condition);
		let _la: number;
		try {
			this.state = 1887;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 164, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1870;
				await this.search_elemnt();
				this.state = 1882;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
				case 1:
					{
					this.state = 1872;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 1871;
						this.match(cobolParser.IS);
						}
					}

					this.state = 1874;
					this.match(cobolParser.EQUAL);
					this.state = 1876;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 1875;
						this.match(cobolParser.TO);
						}
					}

					}
					break;

				case 2:
					{
					this.state = 1879;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 1878;
						this.match(cobolParser.IS);
						}
					}

					this.state = 1881;
					this.match(cobolParser.EQUAL_);
					}
					break;
				}
				this.state = 1884;
				await this.search_arg();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1886;
				await this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async search_arg() {
		let _localctx: Search_argContext = new Search_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, cobolParser.RULE_search_arg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1889;
			await this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async search_elemnt() {
		let _localctx: Search_elemntContext = new Search_elemntContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, cobolParser.RULE_search_elemnt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1891;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async search_pointer() {
		let _localctx: Search_pointerContext = new Search_pointerContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, cobolParser.RULE_search_pointer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1893;
			await this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async src_table() {
		let _localctx: Src_tableContext = new Src_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, cobolParser.RULE_src_table);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1895;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rewrite_statement() {
		let _localctx: Rewrite_statementContext = new Rewrite_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, cobolParser.RULE_rewrite_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1897;
			this.match(cobolParser.REWRITE);
			this.state = 1898;
			await this.rewrite_rec_name();
			this.state = 1901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 1899;
				this.match(cobolParser.FROM);
				this.state = 1900;
				await this.src_item();
				}
			}

			this.state = 1908;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALLOWING) {
				{
				this.state = 1903;
				this.match(cobolParser.ALLOWING);
				this.state = 1904;
				this.match(cobolParser.NO);
				this.state = 1906;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OTHERS) {
					{
					this.state = 1905;
					this.match(cobolParser.OTHERS);
					}
				}

				}
			}

			this.state = 1911;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 168, this._ctx) ) {
			case 1:
				{
				this.state = 1910;
				await this.invalid_key_variants();
				}
				break;
			}
			this.state = 1914;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
			case 1:
				{
				this.state = 1913;
				this.match(cobolParser.END_REWRITE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rewrite_rec_name() {
		let _localctx: Rewrite_rec_nameContext = new Rewrite_rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, cobolParser.RULE_rewrite_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1916;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async return_statement() {
		let _localctx: Return_statementContext = new Return_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, cobolParser.RULE_return_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1918;
			this.match(cobolParser.RETURN);
			this.state = 1919;
			await this.smrg_file();
			this.state = 1921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RECORD) {
				{
				this.state = 1920;
				this.match(cobolParser.RECORD);
				}
			}

			this.state = 1925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INTO) {
				{
				this.state = 1923;
				this.match(cobolParser.INTO);
				this.state = 1924;
				await this.dest_item();
				}
			}

			this.state = 1927;
			await this.at_end();
			this.state = 1930;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 172, this._ctx) ) {
			case 1:
				{
				this.state = 1928;
				this.match(cobolParser.NOT);
				this.state = 1929;
				await this.at_end();
				}
				break;
			}
			this.state = 1933;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 173, this._ctx) ) {
			case 1:
				{
				this.state = 1932;
				this.match(cobolParser.END_RETURN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async smrg_file() {
		let _localctx: Smrg_fileContext = new Smrg_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, cobolParser.RULE_smrg_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1935;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async release_statement() {
		let _localctx: Release_statementContext = new Release_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, cobolParser.RULE_release_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1937;
			this.match(cobolParser.RELEASE);
			this.state = 1938;
			await this.release_rec();
			this.state = 1941;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 1939;
				this.match(cobolParser.FROM);
				this.state = 1940;
				await this.release_src_area();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async release_src_area() {
		let _localctx: Release_src_areaContext = new Release_src_areaContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, cobolParser.RULE_release_src_area);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1943;
			await this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async release_rec() {
		let _localctx: Release_recContext = new Release_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, cobolParser.RULE_release_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1945;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async record_statement() {
		let _localctx: Record_statementContext = new Record_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, cobolParser.RULE_record_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1947;
			this.match(cobolParser.RECORD);
			this.state = 1948;
			this.match(cobolParser.DEPENDENCY);
			this.state = 1949;
			await this.path_name();
			this.state = 1955;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TYPE) {
				{
				this.state = 1950;
				this.match(cobolParser.TYPE);
				this.state = 1952;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1951;
					this.match(cobolParser.IS);
					}
				}

				this.state = 1954;
				await this.relation_type();
				}
			}

			this.state = 1961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DICTIONARY || _la === cobolParser.IN) {
				{
				this.state = 1958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 1957;
					this.match(cobolParser.IN);
					}
				}

				this.state = 1960;
				this.match(cobolParser.DICTIONARY);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async relation_type() {
		let _localctx: Relation_typeContext = new Relation_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, cobolParser.RULE_relation_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1963;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async path_name() {
		let _localctx: Path_nameContext = new Path_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, cobolParser.RULE_path_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1965;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async read_statement() {
		let _localctx: Read_statementContext = new Read_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, cobolParser.RULE_read_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1967;
			this.match(cobolParser.READ);
			this.state = 1968;
			await this.file_name();
			this.state = 1970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NEXT || _la === cobolParser.PREVIOUS || _la === cobolParser.PRIOR) {
				{
				this.state = 1969;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.NEXT || _la === cobolParser.PREVIOUS || _la === cobolParser.PRIOR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			this.state = 1973;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 180, this._ctx) ) {
			case 1:
				{
				this.state = 1972;
				this.match(cobolParser.RECORD);
				}
				break;
			}
			this.state = 1977;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INTO) {
				{
				this.state = 1975;
				this.match(cobolParser.INTO);
				this.state = 1976;
				await this.dest_item();
				}
			}

			this.state = 1995;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALLOWING:
			case cobolParser.LOCK:
			case cobolParser.NO:
			case cobolParser.REGARDLESS:
			case cobolParser.WITH:
				{
				this.state = 1979;
				await this.read_options();
				this.state = 1985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 1980;
					this.match(cobolParser.KEY);
					this.state = 1982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 1981;
						this.match(cobolParser.IS);
						}
					}

					this.state = 1984;
					await this.key_name();
					}
				}

				}
				break;
			case cobolParser.KEY:
				{
				this.state = 1987;
				this.match(cobolParser.KEY);
				this.state = 1989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1988;
					this.match(cobolParser.IS);
					}
				}

				this.state = 1991;
				await this.key_name();
				this.state = 1993;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ALLOWING || _la === cobolParser.LOCK || _la === cobolParser.NO || _la === cobolParser.REGARDLESS || _la === cobolParser.WITH) {
					{
					this.state = 1992;
					await this.read_options();
					}
				}

				}
				break;
			case cobolParser.ACCEPT:
			case cobolParser.ADD:
			case cobolParser.ALTER:
			case cobolParser.AT:
			case cobolParser.CALL:
			case cobolParser.CANCEL:
			case cobolParser.CLOSE:
			case cobolParser.COMPUTE:
			case cobolParser.CONTINUE:
			case cobolParser.DELETE:
			case cobolParser.DISPLAY:
			case cobolParser.DIVIDE:
			case cobolParser.ELSE:
			case cobolParser.END:
			case cobolParser.END_ACCEPT:
			case cobolParser.END_ADD:
			case cobolParser.END_CALL:
			case cobolParser.END_COMPUTE:
			case cobolParser.END_DELETE:
			case cobolParser.END_DISPLAY:
			case cobolParser.END_DIVIDE:
			case cobolParser.END_EVALUATE:
			case cobolParser.END_IF:
			case cobolParser.END_MULTIPLY:
			case cobolParser.END_OF_PAGE:
			case cobolParser.END_PERFORM:
			case cobolParser.END_READ:
			case cobolParser.END_RETURN:
			case cobolParser.END_REWRITE:
			case cobolParser.END_SEARCH:
			case cobolParser.END_START:
			case cobolParser.END_STRING:
			case cobolParser.END_SUBTRACT:
			case cobolParser.END_UNSTRING:
			case cobolParser.END_WRITE:
			case cobolParser.EOP:
			case cobolParser.EVALUATE:
			case cobolParser.EXCEPTION:
			case cobolParser.EXIT:
			case cobolParser.GENERATE:
			case cobolParser.GO:
			case cobolParser.IF:
			case cobolParser.INITIALIZE:
			case cobolParser.INITIATE:
			case cobolParser.INSPECT:
			case cobolParser.INVALID:
			case cobolParser.MERGE:
			case cobolParser.MOVE:
			case cobolParser.MULTIPLY:
			case cobolParser.NOT:
			case cobolParser.ON:
			case cobolParser.OPEN:
			case cobolParser.OVERFLOW:
			case cobolParser.PERFORM:
			case cobolParser.READ:
			case cobolParser.RECORD:
			case cobolParser.RELEASE:
			case cobolParser.RETURN:
			case cobolParser.REWRITE:
			case cobolParser.SEARCH:
			case cobolParser.SET:
			case cobolParser.SIZE:
			case cobolParser.SORT:
			case cobolParser.START:
			case cobolParser.STOP:
			case cobolParser.STRING:
			case cobolParser.SUBTRACT:
			case cobolParser.SUPPRESS:
			case cobolParser.TERMINATE:
			case cobolParser.UNLOCK:
			case cobolParser.UNSTRING:
			case cobolParser.WHEN:
			case cobolParser.WRITE:
			case cobolParser.EXEC:
			case cobolParser.DOT_:
				break;
			default:
				break;
			}
			this.state = 1999;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 1997;
				await this.at_end_variants();
				}
				break;

			case 2:
				{
				this.state = 1998;
				await this.invalid_key_variants();
				}
				break;
			}
			this.state = 2002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 188, this._ctx) ) {
			case 1:
				{
				this.state = 2001;
				this.match(cobolParser.END_READ);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async regard_allow() {
		let _localctx: Regard_allowContext = new Regard_allowContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, cobolParser.RULE_regard_allow);
		let _la: number;
		try {
			this.state = 2020;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REGARDLESS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2004;
				this.match(cobolParser.REGARDLESS);
				this.state = 2006;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 2005;
					this.match(cobolParser.OF);
					}
				}

				this.state = 2009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LOCK) {
					{
					this.state = 2008;
					this.match(cobolParser.LOCK);
					}
				}

				}
				break;
			case cobolParser.ALLOWING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2011;
				this.match(cobolParser.ALLOWING);
				this.state = 2018;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.UPDATERS:
					{
					this.state = 2012;
					this.match(cobolParser.UPDATERS);
					}
					break;
				case cobolParser.READERS:
					{
					this.state = 2013;
					this.match(cobolParser.READERS);
					}
					break;
				case cobolParser.NO:
					{
					this.state = 2014;
					this.match(cobolParser.NO);
					this.state = 2016;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OTHERS) {
						{
						this.state = 2015;
						this.match(cobolParser.OTHERS);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async read_options() {
		let _localctx: Read_optionsContext = new Read_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, cobolParser.RULE_read_options);
		let _la: number;
		try {
			this.state = 2030;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LOCK:
			case cobolParser.NO:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2022;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 2026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NO) {
					{
					this.state = 2025;
					this.match(cobolParser.NO);
					}
				}

				this.state = 2028;
				this.match(cobolParser.LOCK);
				}
				break;
			case cobolParser.ALLOWING:
			case cobolParser.REGARDLESS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2029;
				await this.regard_allow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_statement() {
		let _localctx: Perform_statementContext = new Perform_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, cobolParser.RULE_perform_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2032;
			this.match(cobolParser.PERFORM);
			this.state = 2034;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 197, this._ctx) ) {
			case 1:
				{
				this.state = 2033;
				await this.proc_thru_proc();
				}
				break;
			}
			this.state = 2041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FUNCTION || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.TEST - 384)) | (1 << (cobolParser.UNTIL - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.WITH - 384)))) !== 0) || ((((_la - 453)) & ~0x1F) === 0 && ((1 << (_la - 453)) & ((1 << (cobolParser.INTEGER_LITERAL_ - 453)) | (1 << (cobolParser.HEX_LITERAL_ - 453)) | (1 << (cobolParser.USER_DEFINED_WORD_ - 453)))) !== 0)) {
				{
				this.state = 2039;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 198, this._ctx) ) {
				case 1:
					{
					this.state = 2036;
					await this.perform_times();
					}
					break;

				case 2:
					{
					this.state = 2037;
					await this.perform_until();
					}
					break;

				case 3:
					{
					this.state = 2038;
					await this.perform_varying();
					}
					break;
				}
				}
			}

			this.state = 2050;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
			case 1:
				{
				this.state = 2044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2043;
					await this.statement();
					}
					}
					this.state = 2046;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ADD) | (1 << cobolParser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (cobolParser.CALL - 52)) | (1 << (cobolParser.CANCEL - 52)) | (1 << (cobolParser.CLOSE - 52)) | (1 << (cobolParser.COMPUTE - 52)))) !== 0) || _la === cobolParser.CONTINUE || _la === cobolParser.DELETE || _la === cobolParser.DISPLAY || _la === cobolParser.DIVIDE || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & ((1 << (cobolParser.EVALUATE - 165)) | (1 << (cobolParser.EXIT - 165)) | (1 << (cobolParser.GENERATE - 165)) | (1 << (cobolParser.GO - 165)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (cobolParser.IF - 206)) | (1 << (cobolParser.INITIALIZE - 206)) | (1 << (cobolParser.INITIATE - 206)) | (1 << (cobolParser.INSPECT - 206)))) !== 0) || ((((_la - 246)) & ~0x1F) === 0 && ((1 << (_la - 246)) & ((1 << (cobolParser.MERGE - 246)) | (1 << (cobolParser.MOVE - 246)) | (1 << (cobolParser.MULTIPLY - 246)) | (1 << (cobolParser.OPEN - 246)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (cobolParser.PERFORM - 281)) | (1 << (cobolParser.READ - 281)) | (1 << (cobolParser.RECORD - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (cobolParser.RELEASE - 313)) | (1 << (cobolParser.RETURN - 313)) | (1 << (cobolParser.REWRITE - 313)) | (1 << (cobolParser.SEARCH - 313)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (cobolParser.SET - 350)) | (1 << (cobolParser.SORT - 350)) | (1 << (cobolParser.START - 350)) | (1 << (cobolParser.STOP - 350)) | (1 << (cobolParser.STRING - 350)) | (1 << (cobolParser.SUBTRACT - 350)) | (1 << (cobolParser.SUPPRESS - 350)))) !== 0) || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (cobolParser.TERMINATE - 383)) | (1 << (cobolParser.UNLOCK - 383)) | (1 << (cobolParser.UNSTRING - 383)))) !== 0) || _la === cobolParser.WRITE);
				this.state = 2048;
				this.match(cobolParser.END_PERFORM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async proc_thru_proc() {
		let _localctx: Proc_thru_procContext = new Proc_thru_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, cobolParser.RULE_proc_thru_proc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2052;
			await this.proc_name();
			this.state = 2055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.THROUGH || _la === cobolParser.THRU) {
				{
				this.state = 2053;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 2054;
				await this.proc_name();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_times() {
		let _localctx: Perform_timesContext = new Perform_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, cobolParser.RULE_perform_times);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2059;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 2057;
				await this.identifier();
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				{
				this.state = 2058;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2061;
			this.match(cobolParser.TIMES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_test() {
		let _localctx: With_testContext = new With_testContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, cobolParser.RULE_with_test);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2064;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2063;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 2066;
			this.match(cobolParser.TEST);
			this.state = 2067;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AFTER || _la === cobolParser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_until() {
		let _localctx: Perform_untilContext = new Perform_untilContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, cobolParser.RULE_perform_until);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TEST || _la === cobolParser.WITH) {
				{
				this.state = 2069;
				await this.with_test();
				}
			}

			this.state = 2072;
			this.match(cobolParser.UNTIL);
			this.state = 2073;
			await this.logic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_varying() {
		let _localctx: Perform_varyingContext = new Perform_varyingContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, cobolParser.RULE_perform_varying);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TEST || _la === cobolParser.WITH) {
				{
				this.state = 2075;
				await this.with_test();
				}
			}

			this.state = 2078;
			this.match(cobolParser.VARYING);
			this.state = 2079;
			await this.perform_range();
			this.state = 2080;
			this.match(cobolParser.UNTIL);
			this.state = 2081;
			await this.logic_expression(0);
			this.state = 2089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.AFTER) {
				{
				{
				this.state = 2082;
				this.match(cobolParser.AFTER);
				this.state = 2083;
				await this.perform_range();
				this.state = 2084;
				this.match(cobolParser.UNTIL);
				this.state = 2085;
				await this.logic_expression(0);
				}
				}
				this.state = 2091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_range() {
		let _localctx: Perform_rangeContext = new Perform_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, cobolParser.RULE_perform_range);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2092;
			await this.perform_var();
			this.state = 2093;
			this.match(cobolParser.FROM);
			this.state = 2094;
			await this.perform_init();
			this.state = 2095;
			this.match(cobolParser.BY);
			this.state = 2096;
			await this.perform_increm();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_increm() {
		let _localctx: Perform_incremContext = new Perform_incremContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, cobolParser.RULE_perform_increm);
		let _la: number;
		try {
			this.state = 2100;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2098;
				await this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2099;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_init() {
		let _localctx: Perform_initContext = new Perform_initContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, cobolParser.RULE_perform_init);
		let _la: number;
		try {
			this.state = 2104;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2102;
				await this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2103;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async perform_var() {
		let _localctx: Perform_varContext = new Perform_varContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, cobolParser.RULE_perform_var);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2106;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async open_statement() {
		let _localctx: Open_statementContext = new Open_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, cobolParser.RULE_open_statement);
		let _la: number;
		try {
			this.state = 2132;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 215, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2108;
				this.match(cobolParser.OPEN);
				this.state = 2110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2109;
					await this.open_definition();
					}
					}
					this.state = 2112;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.EXTEND || _la === cobolParser.INPUT || _la === cobolParser.I_O || _la === cobolParser.OUTPUT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2114;
				this.match(cobolParser.OPEN);
				this.state = 2128;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2115;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.EXTEND || _la === cobolParser.OUTPUT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					this.state = 2124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2116;
						await this.file_name();
						this.state = 2122;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.NO || _la === cobolParser.WITH) {
							{
							this.state = 2118;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === cobolParser.WITH) {
								{
								this.state = 2117;
								this.match(cobolParser.WITH);
								}
							}

							this.state = 2120;
							this.match(cobolParser.NO);
							this.state = 2121;
							this.match(cobolParser.REWIND);
							}
						}

						}
						}
						this.state = 2126;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === cobolParser.USER_DEFINED_WORD_);
					}
					}
					this.state = 2130;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.EXTEND || _la === cobolParser.OUTPUT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async open_definition() {
		let _localctx: Open_definitionContext = new Open_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, cobolParser.RULE_open_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2134;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.EXTEND || _la === cobolParser.INPUT || _la === cobolParser.I_O || _la === cobolParser.OUTPUT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2146;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2135;
				await this.file_name();
				this.state = 2141;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 217, this._ctx) ) {
				case 1:
					{
					this.state = 2137;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 2136;
						this.match(cobolParser.WITH);
						}
					}

					this.state = 2139;
					this.match(cobolParser.NO);
					this.state = 2140;
					this.match(cobolParser.REWIND);
					}
					break;
				}
				this.state = 2144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ALLOWING || _la === cobolParser.LOCK || _la === cobolParser.WITH) {
					{
					this.state = 2143;
					await this.open_file_attributes();
					}
				}

				}
				}
				this.state = 2148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async open_file_attributes() {
		let _localctx: Open_file_attributesContext = new Open_file_attributesContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, cobolParser.RULE_open_file_attributes);
		let _la: number;
		try {
			this.state = 2194;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LOCK:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2150;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 2153;
				this.match(cobolParser.LOCK);
				}
				break;
			case cobolParser.ALLOWING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2154;
				this.match(cobolParser.ALLOWING);
				this.state = 2192;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.NO:
					{
					this.state = 2155;
					this.match(cobolParser.NO);
					this.state = 2157;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OTHERS) {
						{
						this.state = 2156;
						this.match(cobolParser.OTHERS);
						}
					}

					}
					break;
				case cobolParser.ALL:
					{
					this.state = 2159;
					this.match(cobolParser.ALL);
					}
					break;
				case cobolParser.READERS:
				case cobolParser.UPDATERS:
				case cobolParser.WRITERS:
					{
					this.state = 2190;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
					case 1:
						{
						this.state = 2160;
						this.match(cobolParser.READERS);
						this.state = 2162;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.WRITERS) {
							{
							this.state = 2161;
							this.match(cobolParser.WRITERS);
							}
						}

						this.state = 2165;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.UPDATERS) {
							{
							this.state = 2164;
							this.match(cobolParser.UPDATERS);
							}
						}

						}
						break;

					case 2:
						{
						this.state = 2167;
						this.match(cobolParser.READERS);
						this.state = 2168;
						this.match(cobolParser.UPDATERS);
						this.state = 2169;
						this.match(cobolParser.WRITERS);
						}
						break;

					case 3:
						{
						this.state = 2170;
						this.match(cobolParser.WRITERS);
						this.state = 2172;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.READERS) {
							{
							this.state = 2171;
							this.match(cobolParser.READERS);
							}
						}

						this.state = 2175;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.UPDATERS) {
							{
							this.state = 2174;
							this.match(cobolParser.UPDATERS);
							}
						}

						}
						break;

					case 4:
						{
						this.state = 2177;
						this.match(cobolParser.WRITERS);
						this.state = 2178;
						this.match(cobolParser.UPDATERS);
						this.state = 2179;
						this.match(cobolParser.READERS);
						}
						break;

					case 5:
						{
						this.state = 2180;
						this.match(cobolParser.UPDATERS);
						this.state = 2182;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.READERS) {
							{
							this.state = 2181;
							this.match(cobolParser.READERS);
							}
						}

						this.state = 2185;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.WRITERS) {
							{
							this.state = 2184;
							this.match(cobolParser.WRITERS);
							}
						}

						}
						break;

					case 6:
						{
						this.state = 2187;
						this.match(cobolParser.UPDATERS);
						this.state = 2188;
						this.match(cobolParser.WRITERS);
						this.state = 2189;
						this.match(cobolParser.READERS);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async multiply_statement() {
		let _localctx: Multiply_statementContext = new Multiply_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, cobolParser.RULE_multiply_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2196;
			this.match(cobolParser.MULTIPLY);
			this.state = 2197;
			await this.mult_num();
			this.state = 2198;
			this.match(cobolParser.BY);
			this.state = 2202;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				{
				this.state = 2199;
				await this.mult_num();
				this.state = 2200;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 2208;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2204;
				await this.identifier_result();
				this.state = 2206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ROUNDED) {
					{
					this.state = 2205;
					this.match(cobolParser.ROUNDED);
					}
				}

				}
				}
				this.state = 2210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 2213;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 2212;
				await this.on_size_variants();
				}
				break;
			}
			this.state = 2216;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				{
				this.state = 2215;
				this.match(cobolParser.END_MULTIPLY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async mult_num() {
		let _localctx: Mult_numContext = new Mult_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, cobolParser.RULE_mult_num);
		let _la: number;
		try {
			this.state = 2220;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2218;
				await this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2219;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async merge_statement() {
		let _localctx: Merge_statementContext = new Merge_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, cobolParser.RULE_merge_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2222;
			this.match(cobolParser.MERGE);
			this.state = 2223;
			await this.mergefile();
			this.state = 2225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2224;
				await this.merge_on();
				}
				}
				this.state = 2227;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING || _la === cobolParser.ON);
			this.state = 2237;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING || _la === cobolParser.SEQUENCE) {
				{
				this.state = 2230;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.COLLATING) {
					{
					this.state = 2229;
					this.match(cobolParser.COLLATING);
					}
				}

				this.state = 2232;
				this.match(cobolParser.SEQUENCE);
				this.state = 2234;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2233;
					this.match(cobolParser.IS);
					}
				}

				this.state = 2236;
				await this.alpha_name();
				}
			}

			this.state = 2239;
			this.match(cobolParser.USING);
			this.state = 2241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2240;
				await this.infile();
				}
				}
				this.state = 2243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 2247;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.OUTPUT:
				{
				this.state = 2245;
				await this.output_proc();
				}
				break;
			case cobolParser.GIVING:
				{
				this.state = 2246;
				await this.giving_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async output_proc() {
		let _localctx: Output_procContext = new Output_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, cobolParser.RULE_output_proc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2249;
			this.match(cobolParser.OUTPUT);
			this.state = 2250;
			this.match(cobolParser.PROCEDURE);
			this.state = 2252;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2251;
				this.match(cobolParser.IS);
				}
			}

			this.state = 2254;
			await this.proc_thru_proc();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async first_proc() {
		let _localctx: First_procContext = new First_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, cobolParser.RULE_first_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2256;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async end_proc() {
		let _localctx: End_procContext = new End_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, cobolParser.RULE_end_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2258;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async giving_file() {
		let _localctx: Giving_fileContext = new Giving_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, cobolParser.RULE_giving_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2260;
			this.match(cobolParser.GIVING);
			this.state = 2261;
			await this.file_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async infile() {
		let _localctx: InfileContext = new InfileContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, cobolParser.RULE_infile);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2263;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async merge_on() {
		let _localctx: Merge_onContext = new Merge_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, cobolParser.RULE_merge_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2266;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 2265;
				this.match(cobolParser.ON);
				}
			}

			this.state = 2268;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2270;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 2269;
				this.match(cobolParser.KEY);
				}
			}

			this.state = 2273;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2272;
				await this.mergekey();
				}
				}
				this.state = 2275;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async mergefile() {
		let _localctx: MergefileContext = new MergefileContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, cobolParser.RULE_mergefile);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2277;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async mergekey() {
		let _localctx: MergekeyContext = new MergekeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, cobolParser.RULE_mergekey);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2279;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async inspect_statement() {
		let _localctx: Inspect_statementContext = new Inspect_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, cobolParser.RULE_inspect_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2281;
			this.match(cobolParser.INSPECT);
			this.state = 2282;
			await this.src_string();
			this.state = 2289;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.TALLYING:
				{
				this.state = 2283;
				await this.inspect_tallying();
				this.state = 2285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.REPLACING) {
					{
					this.state = 2284;
					await this.inspect_replacing();
					}
				}

				}
				break;
			case cobolParser.REPLACING:
				{
				this.state = 2287;
				await this.inspect_replacing();
				}
				break;
			case cobolParser.CONVERTING:
				{
				this.state = 2288;
				await this.inspect_converting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async inspect_converting() {
		let _localctx: Inspect_convertingContext = new Inspect_convertingContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, cobolParser.RULE_inspect_converting);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2291;
			this.match(cobolParser.CONVERTING);
			this.state = 2292;
			await this.compare_chars();
			this.state = 2293;
			this.match(cobolParser.TO);
			this.state = 2294;
			await this.convert_chars();
			this.state = 2298;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.AFTER || _la === cobolParser.BEFORE) {
				{
				{
				this.state = 2295;
				await this.delim_definition();
				}
				}
				this.state = 2300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async convert_chars() {
		let _localctx: Convert_charsContext = new Convert_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, cobolParser.RULE_convert_chars);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2301;
			await this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async compare_chars() {
		let _localctx: Compare_charsContext = new Compare_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, cobolParser.RULE_compare_chars);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2303;
			await this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async inspect_replacing() {
		let _localctx: Inspect_replacingContext = new Inspect_replacingContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, cobolParser.RULE_inspect_replacing);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2305;
			this.match(cobolParser.REPLACING);
			this.state = 2308;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 2308;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CHARACTERS:
					{
					this.state = 2306;
					await this.replacing_characters();
					}
					break;
				case cobolParser.ALL:
				case cobolParser.FIRST:
				case cobolParser.LEADING:
					{
					this.state = 2307;
					await this.replacing_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2310;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.ALL || _la === cobolParser.CHARACTERS || _la === cobolParser.FIRST || _la === cobolParser.LEADING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async replacing_all() {
		let _localctx: Replacing_allContext = new Replacing_allContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, cobolParser.RULE_replacing_all);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2312;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALL || _la === cobolParser.FIRST || _la === cobolParser.LEADING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2313;
				await this.compare_val();
				this.state = 2314;
				this.match(cobolParser.BY);
				this.state = 2315;
				await this.replace_val();
				this.state = 2319;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.AFTER || _la === cobolParser.BEFORE) {
					{
					{
					this.state = 2316;
					await this.delim_definition();
					}
					}
					this.state = 2321;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 2324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.HIGH_VALUE || _la === cobolParser.HIGH_VALUES || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)))) !== 0) || _la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async replace_val() {
		let _localctx: Replace_valContext = new Replace_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, cobolParser.RULE_replace_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2326;
			await this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async replacing_characters() {
		let _localctx: Replacing_charactersContext = new Replacing_charactersContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, cobolParser.RULE_replacing_characters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2328;
			this.match(cobolParser.CHARACTERS);
			this.state = 2329;
			this.match(cobolParser.BY);
			this.state = 2330;
			await this.replace_char();
			this.state = 2334;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.AFTER || _la === cobolParser.BEFORE) {
				{
				{
				this.state = 2331;
				await this.delim_definition();
				}
				}
				this.state = 2336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async replace_char() {
		let _localctx: Replace_charContext = new Replace_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, cobolParser.RULE_replace_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2337;
			await this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async inspect_tallying() {
		let _localctx: Inspect_tallyingContext = new Inspect_tallyingContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, cobolParser.RULE_inspect_tallying);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2339;
			this.match(cobolParser.TALLYING);
			this.state = 2341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2340;
				await this.tallying_for();
				}
				}
				this.state = 2343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async tallying_for() {
		let _localctx: Tallying_forContext = new Tallying_forContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, cobolParser.RULE_tallying_for);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2345;
			await this.tally_ctr();
			this.state = 2346;
			this.match(cobolParser.FOR);
			this.state = 2349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 2349;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CHARACTERS:
					{
					this.state = 2347;
					await this.tallying_for_characters();
					}
					break;
				case cobolParser.ALL:
				case cobolParser.LEADING:
					{
					this.state = 2348;
					await this.tallying_for_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.ALL || _la === cobolParser.CHARACTERS || _la === cobolParser.LEADING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async tallying_for_characters() {
		let _localctx: Tallying_for_charactersContext = new Tallying_for_charactersContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, cobolParser.RULE_tallying_for_characters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2353;
			this.match(cobolParser.CHARACTERS);
			this.state = 2357;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.AFTER || _la === cobolParser.BEFORE) {
				{
				{
				this.state = 2354;
				await this.delim_definition();
				}
				}
				this.state = 2359;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async delim_definition() {
		let _localctx: Delim_definitionContext = new Delim_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, cobolParser.RULE_delim_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2360;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AFTER || _la === cobolParser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INITIAL) {
				{
				this.state = 2361;
				this.match(cobolParser.INITIAL);
				}
			}

			this.state = 2364;
			await this.delim_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async tallying_for_all() {
		let _localctx: Tallying_for_allContext = new Tallying_for_allContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, cobolParser.RULE_tallying_for_all);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2366;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALL || _la === cobolParser.LEADING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2374;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2367;
					await this.compare_val();
					this.state = 2371;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === cobolParser.AFTER || _la === cobolParser.BEFORE) {
						{
						{
						this.state = 2368;
						await this.delim_definition();
						}
						}
						this.state = 2373;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2376;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async compare_val() {
		let _localctx: Compare_valContext = new Compare_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, cobolParser.RULE_compare_val);
		try {
			this.state = 2381;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2378;
				await this.identifier_result();
				}
				break;
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2379;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2380;
				await this.figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async delim_val() {
		let _localctx: Delim_valContext = new Delim_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, cobolParser.RULE_delim_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2383;
			await this.compare_val();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async tally_ctr() {
		let _localctx: Tally_ctrContext = new Tally_ctrContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, cobolParser.RULE_tally_ctr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2385;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async src_string() {
		let _localctx: Src_stringContext = new Src_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, cobolParser.RULE_src_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2387;
			await this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async initiate_statement() {
		let _localctx: Initiate_statementContext = new Initiate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, cobolParser.RULE_initiate_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2389;
			this.match(cobolParser.INITIATE);
			this.state = 2391;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2390;
				await this.report_name();
				}
				}
				this.state = 2393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async initialize_statement() {
		let _localctx: Initialize_statementContext = new Initialize_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, cobolParser.RULE_initialize_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2395;
			this.match(cobolParser.INITIALIZE);
			this.state = 2397;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2396;
				await this.fld_name();
				}
				}
				this.state = 2399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 2404;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACING) {
				{
				{
				this.state = 2401;
				await this.replacing();
				}
				}
				this.state = 2406;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async replacing() {
		let _localctx: ReplacingContext = new ReplacingContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, cobolParser.RULE_replacing);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2407;
			this.match(cobolParser.REPLACING);
			this.state = 2414;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2408;
				_la = this._input.LA(1);
				if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHANUMERIC) | (1 << cobolParser.ALPHANUMERIC_EDITED))) !== 0) || _la === cobolParser.NUMERIC || _la === cobolParser.NUMERIC_EDITED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 2410;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DATA) {
					{
					this.state = 2409;
					this.match(cobolParser.DATA);
					}
				}

				this.state = 2412;
				this.match(cobolParser.BY);
				this.state = 2413;
				await this.init_value();
				}
				}
				this.state = 2416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHANUMERIC) | (1 << cobolParser.ALPHANUMERIC_EDITED))) !== 0) || _la === cobolParser.NUMERIC || _la === cobolParser.NUMERIC_EDITED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async init_value() {
		let _localctx: Init_valueContext = new Init_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, cobolParser.RULE_init_value);
		try {
			this.state = 2420;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2418;
				await this.qualified_data_item();
				}
				break;
			case cobolParser.STRING_LITERAL_:
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2419;
				await this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async fld_name() {
		let _localctx: Fld_nameContext = new Fld_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, cobolParser.RULE_fld_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2422;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async move_statement() {
		let _localctx: Move_statementContext = new Move_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, cobolParser.RULE_move_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2424;
			this.match(cobolParser.MOVE);
			this.state = 2426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING) {
				{
				this.state = 2425;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			this.state = 2428;
			await this.src_item();
			this.state = 2429;
			this.match(cobolParser.TO);
			this.state = 2431;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2430;
				await this.dest_item();
				}
				}
				this.state = 2433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async if_statement() {
		let _localctx: If_statementContext = new If_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, cobolParser.RULE_if_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2435;
			this.match(cobolParser.IF);
			this.state = 2436;
			await this.logic_expression(0);
			this.state = 2438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.THEN) {
				{
				this.state = 2437;
				this.match(cobolParser.THEN);
				}
			}

			this.state = 2448;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ACCEPT:
			case cobolParser.ADD:
			case cobolParser.ALTER:
			case cobolParser.CALL:
			case cobolParser.CANCEL:
			case cobolParser.CLOSE:
			case cobolParser.COMPUTE:
			case cobolParser.CONTINUE:
			case cobolParser.DELETE:
			case cobolParser.DISPLAY:
			case cobolParser.DIVIDE:
			case cobolParser.EVALUATE:
			case cobolParser.EXIT:
			case cobolParser.GENERATE:
			case cobolParser.GO:
			case cobolParser.IF:
			case cobolParser.INITIALIZE:
			case cobolParser.INITIATE:
			case cobolParser.INSPECT:
			case cobolParser.MERGE:
			case cobolParser.MOVE:
			case cobolParser.MULTIPLY:
			case cobolParser.OPEN:
			case cobolParser.PERFORM:
			case cobolParser.READ:
			case cobolParser.RECORD:
			case cobolParser.RELEASE:
			case cobolParser.RETURN:
			case cobolParser.REWRITE:
			case cobolParser.SEARCH:
			case cobolParser.SET:
			case cobolParser.SORT:
			case cobolParser.START:
			case cobolParser.STOP:
			case cobolParser.STRING:
			case cobolParser.SUBTRACT:
			case cobolParser.SUPPRESS:
			case cobolParser.TERMINATE:
			case cobolParser.UNLOCK:
			case cobolParser.UNSTRING:
			case cobolParser.WRITE:
			case cobolParser.EXEC:
				{
				this.state = 2442;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						this.state = 2442;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case cobolParser.ACCEPT:
						case cobolParser.ADD:
						case cobolParser.ALTER:
						case cobolParser.CALL:
						case cobolParser.CANCEL:
						case cobolParser.CLOSE:
						case cobolParser.COMPUTE:
						case cobolParser.CONTINUE:
						case cobolParser.DELETE:
						case cobolParser.DISPLAY:
						case cobolParser.DIVIDE:
						case cobolParser.EVALUATE:
						case cobolParser.EXIT:
						case cobolParser.GENERATE:
						case cobolParser.GO:
						case cobolParser.IF:
						case cobolParser.INITIALIZE:
						case cobolParser.INITIATE:
						case cobolParser.INSPECT:
						case cobolParser.MERGE:
						case cobolParser.MOVE:
						case cobolParser.MULTIPLY:
						case cobolParser.OPEN:
						case cobolParser.PERFORM:
						case cobolParser.READ:
						case cobolParser.RECORD:
						case cobolParser.RELEASE:
						case cobolParser.RETURN:
						case cobolParser.REWRITE:
						case cobolParser.SEARCH:
						case cobolParser.SET:
						case cobolParser.SORT:
						case cobolParser.START:
						case cobolParser.STOP:
						case cobolParser.STRING:
						case cobolParser.SUBTRACT:
						case cobolParser.SUPPRESS:
						case cobolParser.TERMINATE:
						case cobolParser.UNLOCK:
						case cobolParser.UNSTRING:
						case cobolParser.WRITE:
							{
							this.state = 2440;
							await this.statement();
							}
							break;
						case cobolParser.EXEC:
							{
							this.state = 2441;
							await this.exec_sql_statement();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2444;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			case cobolParser.NEXT:
				{
				this.state = 2446;
				this.match(cobolParser.NEXT);
				this.state = 2447;
				this.match(cobolParser.SENTENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2461;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 278, this._ctx) ) {
			case 1:
				{
				this.state = 2450;
				this.match(cobolParser.ELSE);
				this.state = 2459;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.ACCEPT:
				case cobolParser.ADD:
				case cobolParser.ALTER:
				case cobolParser.CALL:
				case cobolParser.CANCEL:
				case cobolParser.CLOSE:
				case cobolParser.COMPUTE:
				case cobolParser.CONTINUE:
				case cobolParser.DELETE:
				case cobolParser.DISPLAY:
				case cobolParser.DIVIDE:
				case cobolParser.EVALUATE:
				case cobolParser.EXIT:
				case cobolParser.GENERATE:
				case cobolParser.GO:
				case cobolParser.IF:
				case cobolParser.INITIALIZE:
				case cobolParser.INITIATE:
				case cobolParser.INSPECT:
				case cobolParser.MERGE:
				case cobolParser.MOVE:
				case cobolParser.MULTIPLY:
				case cobolParser.OPEN:
				case cobolParser.PERFORM:
				case cobolParser.READ:
				case cobolParser.RECORD:
				case cobolParser.RELEASE:
				case cobolParser.RETURN:
				case cobolParser.REWRITE:
				case cobolParser.SEARCH:
				case cobolParser.SET:
				case cobolParser.SORT:
				case cobolParser.START:
				case cobolParser.STOP:
				case cobolParser.STRING:
				case cobolParser.SUBTRACT:
				case cobolParser.SUPPRESS:
				case cobolParser.TERMINATE:
				case cobolParser.UNLOCK:
				case cobolParser.UNSTRING:
				case cobolParser.WRITE:
				case cobolParser.EXEC:
					{
					this.state = 2453;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							this.state = 2453;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case cobolParser.ACCEPT:
							case cobolParser.ADD:
							case cobolParser.ALTER:
							case cobolParser.CALL:
							case cobolParser.CANCEL:
							case cobolParser.CLOSE:
							case cobolParser.COMPUTE:
							case cobolParser.CONTINUE:
							case cobolParser.DELETE:
							case cobolParser.DISPLAY:
							case cobolParser.DIVIDE:
							case cobolParser.EVALUATE:
							case cobolParser.EXIT:
							case cobolParser.GENERATE:
							case cobolParser.GO:
							case cobolParser.IF:
							case cobolParser.INITIALIZE:
							case cobolParser.INITIATE:
							case cobolParser.INSPECT:
							case cobolParser.MERGE:
							case cobolParser.MOVE:
							case cobolParser.MULTIPLY:
							case cobolParser.OPEN:
							case cobolParser.PERFORM:
							case cobolParser.READ:
							case cobolParser.RECORD:
							case cobolParser.RELEASE:
							case cobolParser.RETURN:
							case cobolParser.REWRITE:
							case cobolParser.SEARCH:
							case cobolParser.SET:
							case cobolParser.SORT:
							case cobolParser.START:
							case cobolParser.STOP:
							case cobolParser.STRING:
							case cobolParser.SUBTRACT:
							case cobolParser.SUPPRESS:
							case cobolParser.TERMINATE:
							case cobolParser.UNLOCK:
							case cobolParser.UNSTRING:
							case cobolParser.WRITE:
								{
								this.state = 2451;
								await this.statement();
								}
								break;
							case cobolParser.EXEC:
								{
								this.state = 2452;
								await this.exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 2455;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
					break;
				case cobolParser.NEXT:
					{
					this.state = 2457;
					this.match(cobolParser.NEXT);
					this.state = 2458;
					this.match(cobolParser.SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 2464;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				{
				this.state = 2463;
				this.match(cobolParser.END_IF);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async generate_statement() {
		let _localctx: Generate_statementContext = new Generate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, cobolParser.RULE_generate_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2466;
			this.match(cobolParser.GENERATE);
			this.state = 2467;
			await this.report_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_item() {
		let _localctx: Report_itemContext = new Report_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, cobolParser.RULE_report_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2469;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async exit_statement() {
		let _localctx: Exit_statementContext = new Exit_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, cobolParser.RULE_exit_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2471;
			this.match(cobolParser.EXIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async exit_program_statement() {
		let _localctx: Exit_program_statementContext = new Exit_program_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, cobolParser.RULE_exit_program_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2473;
			this.match(cobolParser.EXIT);
			this.state = 2474;
			this.match(cobolParser.PROGRAM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async go_to_statement() {
		let _localctx: Go_to_statementContext = new Go_to_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, cobolParser.RULE_go_to_statement);
		let _la: number;
		try {
			this.state = 2498;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 285, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2476;
				this.match(cobolParser.GO);
				this.state = 2478;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 2477;
					this.match(cobolParser.TO);
					}
				}

				this.state = 2481;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USER_DEFINED_WORD_) {
					{
					this.state = 2480;
					await this.proc_name();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2483;
				this.match(cobolParser.GO);
				this.state = 2485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 2484;
					this.match(cobolParser.TO);
					}
				}

				this.state = 2488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2487;
					await this.proc_name();
					}
					}
					this.state = 2490;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				this.state = 2492;
				this.match(cobolParser.DEPENDING);
				this.state = 2494;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 2493;
					this.match(cobolParser.ON);
					}
				}

				this.state = 2496;
				await this.identifier_result();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async proc_name() {
		let _localctx: Proc_nameContext = new Proc_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, cobolParser.RULE_proc_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2500;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async evaluate_statement() {
		let _localctx: Evaluate_statementContext = new Evaluate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, cobolParser.RULE_evaluate_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2502;
			this.match(cobolParser.EVALUATE);
			this.state = 2503;
			await this.subj_item();
			this.state = 2510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.STRING_LITERAL_) | (1 << cobolParser.ALL) | (1 << cobolParser.ALSO))) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & ((1 << (cobolParser.FALSE - 174)) | (1 << (cobolParser.FUNCTION - 174)) | (1 << (cobolParser.HIGH_VALUE - 174)) | (1 << (cobolParser.HIGH_VALUES - 174)))) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (cobolParser.LOW_VALUE - 241)) | (1 << (cobolParser.LOW_VALUES - 241)) | (1 << (cobolParser.NOT - 241)))) !== 0) || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 394)) & ~0x1F) === 0 && ((1 << (_la - 394)) & ((1 << (cobolParser.TRUE - 394)) | (1 << (cobolParser.ZERO - 394)) | (1 << (cobolParser.ZEROES - 394)) | (1 << (cobolParser.ZEROS - 394)))) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & ((1 << (cobolParser.PLUS_ - 433)) | (1 << (cobolParser.MINUS_ - 433)) | (1 << (cobolParser.LPAREN_ - 433)) | (1 << (cobolParser.NUMERIC_LITERAL_ - 433)) | (1 << (cobolParser.INTEGER_LITERAL_ - 433)) | (1 << (cobolParser.HEX_LITERAL_ - 433)) | (1 << (cobolParser.USER_DEFINED_WORD_ - 433)))) !== 0)) {
				{
				{
				this.state = 2505;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ALSO) {
					{
					this.state = 2504;
					this.match(cobolParser.ALSO);
					}
				}

				this.state = 2507;
				await this.subj_item();
				}
				}
				this.state = 2512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2531;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2513;
					this.match(cobolParser.WHEN);
					this.state = 2514;
					await this.when_condition();
					this.state = 2521;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2516;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === cobolParser.ALSO) {
								{
								this.state = 2515;
								this.match(cobolParser.ALSO);
								}
							}

							this.state = 2518;
							await this.when_condition();
							}
							}
						}
						this.state = 2523;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
					}
					this.state = 2528;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							this.state = 2526;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case cobolParser.ACCEPT:
							case cobolParser.ADD:
							case cobolParser.ALTER:
							case cobolParser.CALL:
							case cobolParser.CANCEL:
							case cobolParser.CLOSE:
							case cobolParser.COMPUTE:
							case cobolParser.CONTINUE:
							case cobolParser.DELETE:
							case cobolParser.DISPLAY:
							case cobolParser.DIVIDE:
							case cobolParser.EVALUATE:
							case cobolParser.EXIT:
							case cobolParser.GENERATE:
							case cobolParser.GO:
							case cobolParser.IF:
							case cobolParser.INITIALIZE:
							case cobolParser.INITIATE:
							case cobolParser.INSPECT:
							case cobolParser.MERGE:
							case cobolParser.MOVE:
							case cobolParser.MULTIPLY:
							case cobolParser.OPEN:
							case cobolParser.PERFORM:
							case cobolParser.READ:
							case cobolParser.RECORD:
							case cobolParser.RELEASE:
							case cobolParser.RETURN:
							case cobolParser.REWRITE:
							case cobolParser.SEARCH:
							case cobolParser.SET:
							case cobolParser.SORT:
							case cobolParser.START:
							case cobolParser.STOP:
							case cobolParser.STRING:
							case cobolParser.SUBTRACT:
							case cobolParser.SUPPRESS:
							case cobolParser.TERMINATE:
							case cobolParser.UNLOCK:
							case cobolParser.UNSTRING:
							case cobolParser.WRITE:
								{
								this.state = 2524;
								await this.statement();
								}
								break;
							case cobolParser.EXEC:
								{
								this.state = 2525;
								await this.exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
						}
						this.state = 2530;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2544;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 295, this._ctx) ) {
			case 1:
				{
				this.state = 2535;
				this.match(cobolParser.WHEN);
				this.state = 2536;
				this.match(cobolParser.OTHER);
				this.state = 2541;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 2539;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case cobolParser.ACCEPT:
						case cobolParser.ADD:
						case cobolParser.ALTER:
						case cobolParser.CALL:
						case cobolParser.CANCEL:
						case cobolParser.CLOSE:
						case cobolParser.COMPUTE:
						case cobolParser.CONTINUE:
						case cobolParser.DELETE:
						case cobolParser.DISPLAY:
						case cobolParser.DIVIDE:
						case cobolParser.EVALUATE:
						case cobolParser.EXIT:
						case cobolParser.GENERATE:
						case cobolParser.GO:
						case cobolParser.IF:
						case cobolParser.INITIALIZE:
						case cobolParser.INITIATE:
						case cobolParser.INSPECT:
						case cobolParser.MERGE:
						case cobolParser.MOVE:
						case cobolParser.MULTIPLY:
						case cobolParser.OPEN:
						case cobolParser.PERFORM:
						case cobolParser.READ:
						case cobolParser.RECORD:
						case cobolParser.RELEASE:
						case cobolParser.RETURN:
						case cobolParser.REWRITE:
						case cobolParser.SEARCH:
						case cobolParser.SET:
						case cobolParser.SORT:
						case cobolParser.START:
						case cobolParser.STOP:
						case cobolParser.STRING:
						case cobolParser.SUBTRACT:
						case cobolParser.SUPPRESS:
						case cobolParser.TERMINATE:
						case cobolParser.UNLOCK:
						case cobolParser.UNSTRING:
						case cobolParser.WRITE:
							{
							this.state = 2537;
							await this.statement();
							}
							break;
						case cobolParser.EXEC:
							{
							this.state = 2538;
							await this.exec_sql_statement();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 2543;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
				}
				}
				break;
			}
			this.state = 2547;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 296, this._ctx) ) {
			case 1:
				{
				this.state = 2546;
				this.match(cobolParser.END_EVALUATE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async when_condition() {
		let _localctx: When_conditionContext = new When_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, cobolParser.RULE_when_condition);
		let _la: number;
		try {
			this.state = 2561;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 299, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2549;
				await this.logic_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2551;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 2550;
					this.match(cobolParser.NOT);
					}
				}

				this.state = 2553;
				await this.arithmetic_expression(0);
				this.state = 2556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.THROUGH || _la === cobolParser.THRU) {
					{
					this.state = 2554;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					this.state = 2555;
					await this.arithmetic_expression(0);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2558;
				this.match(cobolParser.ANY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2559;
				this.match(cobolParser.TRUE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2560;
				this.match(cobolParser.FALSE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async subj_item() {
		let _localctx: Subj_itemContext = new Subj_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, cobolParser.RULE_subj_item);
		try {
			this.state = 2567;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 300, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2563;
				await this.arithmetic_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2564;
				await this.logic_expression(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2565;
				this.match(cobolParser.TRUE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2566;
				this.match(cobolParser.FALSE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async divide_statement() {
		let _localctx: Divide_statementContext = new Divide_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, cobolParser.RULE_divide_statement);
		try {
			this.state = 2571;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 301, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2569;
				await this.divide_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2570;
				await this.divide_statement_form2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async divide_statement_form1() {
		let _localctx: Divide_statement_form1Context = new Divide_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 322, cobolParser.RULE_divide_statement_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2573;
			this.match(cobolParser.DIVIDE);
			this.state = 2574;
			await this.divide_num();
			this.state = 2575;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2579;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 302, this._ctx) ) {
			case 1:
				{
				this.state = 2576;
				await this.divide_num();
				this.state = 2577;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 2585;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2581;
				await this.identifier_result();
				this.state = 2583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ROUNDED) {
					{
					this.state = 2582;
					this.match(cobolParser.ROUNDED);
					}
				}

				}
				}
				this.state = 2587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 2590;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 305, this._ctx) ) {
			case 1:
				{
				this.state = 2589;
				await this.on_size_variants();
				}
				break;
			}
			this.state = 2593;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 306, this._ctx) ) {
			case 1:
				{
				this.state = 2592;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async divide_statement_form2() {
		let _localctx: Divide_statement_form2Context = new Divide_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 324, cobolParser.RULE_divide_statement_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2595;
			this.match(cobolParser.DIVIDE);
			this.state = 2596;
			await this.divide_num();
			this.state = 2597;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2601;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 307, this._ctx) ) {
			case 1:
				{
				this.state = 2598;
				await this.divide_num();
				this.state = 2599;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 2603;
			await this.identifier_result();
			this.state = 2605;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ROUNDED) {
				{
				this.state = 2604;
				this.match(cobolParser.ROUNDED);
				}
			}

			this.state = 2607;
			this.match(cobolParser.REMAINDER);
			this.state = 2608;
			await this.remaind();
			this.state = 2610;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 309, this._ctx) ) {
			case 1:
				{
				this.state = 2609;
				await this.on_size_variants();
				}
				break;
			}
			this.state = 2613;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 310, this._ctx) ) {
			case 1:
				{
				this.state = 2612;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async remaind() {
		let _localctx: RemaindContext = new RemaindContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, cobolParser.RULE_remaind);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2615;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async divide_num() {
		let _localctx: Divide_numContext = new Divide_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, cobolParser.RULE_divide_num);
		let _la: number;
		try {
			this.state = 2619;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2617;
				await this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2618;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async display_statement() {
		let _localctx: Display_statementContext = new Display_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, cobolParser.RULE_display_statement);
		try {
			this.state = 2625;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 312, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2621;
				await this.display_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2622;
				await this.display_statement_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2623;
				await this.display_statement_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2624;
				await this.display_statement_form4();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async display_statement_form1() {
		let _localctx: Display_statement_form1Context = new Display_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 332, cobolParser.RULE_display_statement_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2627;
			this.match(cobolParser.DISPLAY);
			this.state = 2635;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2628;
				await this.src_item();
				this.state = 2632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.CONVERSION || _la === cobolParser.NO || _la === cobolParser.UPON || _la === cobolParser.WITH) {
					{
					{
					this.state = 2629;
					await this.display_form1_clause();
					}
					}
					this.state = 2634;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 2637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.ALL || ((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & ((1 << (cobolParser.FUNCTION - 191)) | (1 << (cobolParser.HIGH_VALUE - 191)) | (1 << (cobolParser.HIGH_VALUES - 191)))) !== 0) || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)) | (1 << (cobolParser.NUMERIC_LITERAL_ - 422)) | (1 << (cobolParser.INTEGER_LITERAL_ - 422)))) !== 0) || _la === cobolParser.HEX_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_);
			this.state = 2640;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 315, this._ctx) ) {
			case 1:
				{
				this.state = 2639;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async display_statement_form2() {
		let _localctx: Display_statement_form2Context = new Display_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 334, cobolParser.RULE_display_statement_form2);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2642;
			this.match(cobolParser.DISPLAY);
			this.state = 2650;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2643;
				await this.src_item();
				this.state = 2647;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2644;
						await this.display_form2_clause();
						}
						}
					}
					this.state = 2649;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
				}
				}
				}
				this.state = 2652;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.ALL || ((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & ((1 << (cobolParser.FUNCTION - 191)) | (1 << (cobolParser.HIGH_VALUE - 191)) | (1 << (cobolParser.HIGH_VALUES - 191)))) !== 0) || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)) | (1 << (cobolParser.NUMERIC_LITERAL_ - 422)) | (1 << (cobolParser.INTEGER_LITERAL_ - 422)))) !== 0) || _la === cobolParser.HEX_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_);
			this.state = 2655;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 318, this._ctx) ) {
			case 1:
				{
				this.state = 2654;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async display_statement_form3() {
		let _localctx: Display_statement_form3Context = new Display_statement_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 336, cobolParser.RULE_display_statement_form3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2657;
			this.match(cobolParser.DISPLAY);
			this.state = 2658;
			await this.identifier_result();
			this.state = 2672;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 323, this._ctx) ) {
			case 1:
				{
				this.state = 2660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 2659;
					this.match(cobolParser.AT);
					}
				}

				this.state = 2670;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LINE:
					{
					this.state = 2662;
					await this.disp_f3_line();
					this.state = 2664;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.COLUMN) {
						{
						this.state = 2663;
						await this.disp_f3_column();
						}
					}

					}
					break;
				case cobolParser.COLUMN:
					{
					this.state = 2666;
					await this.disp_f3_column();
					this.state = 2668;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.LINE) {
						{
						this.state = 2667;
						await this.disp_f3_line();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 2675;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 324, this._ctx) ) {
			case 1:
				{
				this.state = 2674;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async display_statement_form4() {
		let _localctx: Display_statement_form4Context = new Display_statement_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 338, cobolParser.RULE_display_statement_form4);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2677;
			this.match(cobolParser.DISPLAY);
			this.state = 2678;
			await this.src_item();
			this.state = 2679;
			await this.upon_dest();
			this.state = 2681;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 325, this._ctx) ) {
			case 1:
				{
				this.state = 2680;
				await this.on_exception_variants();
				}
				break;
			}
			this.state = 2684;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 326, this._ctx) ) {
			case 1:
				{
				this.state = 2683;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async src_item() {
		let _localctx: Src_itemContext = new Src_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, cobolParser.RULE_src_item);
		try {
			this.state = 2688;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2686;
				await this.identifier();
				}
				break;
			case cobolParser.STRING_LITERAL_:
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2687;
				await this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async disp_f3_line() {
		let _localctx: Disp_f3_lineContext = new Disp_f3_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, cobolParser.RULE_disp_f3_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2690;
			this.match(cobolParser.LINE);
			this.state = 2692;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 2691;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 2696;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 2694;
				await this.identifier();
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				{
				this.state = 2695;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async disp_f3_column() {
		let _localctx: Disp_f3_columnContext = new Disp_f3_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, cobolParser.RULE_disp_f3_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2698;
			this.match(cobolParser.COLUMN);
			this.state = 2700;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 2699;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 2704;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 2702;
				await this.identifier();
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				{
				this.state = 2703;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async display_form1_clause() {
		let _localctx: Display_form1_clauseContext = new Display_form1_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, cobolParser.RULE_display_form1_clause);
		try {
			this.state = 2709;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 332, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2706;
				await this.with_conversion();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2707;
				await this.upon_dest();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2708;
				await this.with_no_advancing();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async upon_dest() {
		let _localctx: Upon_destContext = new Upon_destContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, cobolParser.RULE_upon_dest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2711;
			this.match(cobolParser.UPON);
			this.state = 2712;
			await this.out_dest();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_conversion() {
		let _localctx: With_conversionContext = new With_conversionContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, cobolParser.RULE_with_conversion);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2714;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 2717;
			this.match(cobolParser.CONVERSION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_no_advancing() {
		let _localctx: With_no_advancingContext = new With_no_advancingContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, cobolParser.RULE_with_no_advancing);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2719;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 2722;
			this.match(cobolParser.NO);
			this.state = 2724;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ADVANCING) {
				{
				this.state = 2723;
				this.match(cobolParser.ADVANCING);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async display_form2_clause() {
		let _localctx: Display_form2_clauseContext = new Display_form2_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, cobolParser.RULE_display_form2_clause);
		try {
			this.state = 2737;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2726;
				await this.display_form1_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2727;
				await this.at_line_number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2728;
				await this.at_column_number();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2729;
				await this.erase_to();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2730;
				await this.with_bell();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2731;
				await this.underlined();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2732;
				await this.bold();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2733;
				await this.with_blinking();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2734;
				await this.reversed();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2735;
				await this.with_conversion();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2736;
				await this.with_no_advancing();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async reversed() {
		let _localctx: ReversedContext = new ReversedContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, cobolParser.RULE_reversed);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2739;
			this.match(cobolParser.REVERSED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_blinking() {
		let _localctx: With_blinkingContext = new With_blinkingContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, cobolParser.RULE_with_blinking);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2742;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2741;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 2744;
			this.match(cobolParser.BLINKING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async bold() {
		let _localctx: BoldContext = new BoldContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, cobolParser.RULE_bold);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2746;
			this.match(cobolParser.BOLD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_bell() {
		let _localctx: With_bellContext = new With_bellContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, cobolParser.RULE_with_bell);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2749;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 2748;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 2751;
			this.match(cobolParser.BELL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async underlined() {
		let _localctx: UnderlinedContext = new UnderlinedContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, cobolParser.RULE_underlined);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2753;
			this.match(cobolParser.UNDERLINED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async erase_to() {
		let _localctx: Erase_toContext = new Erase_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, cobolParser.RULE_erase_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2755;
			this.match(cobolParser.ERASE);
			this.state = 2763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.END || _la === cobolParser.TO) {
				{
				this.state = 2757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 2756;
					this.match(cobolParser.TO);
					}
				}

				this.state = 2759;
				this.match(cobolParser.END);
				this.state = 2761;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 2760;
					this.match(cobolParser.OF);
					}
				}

				}
			}

			this.state = 2765;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async at_line_number() {
		let _localctx: At_line_numberContext = new At_line_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, cobolParser.RULE_at_line_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2768;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 2767;
				this.match(cobolParser.AT);
				}
			}

			this.state = 2770;
			this.match(cobolParser.LINE);
			this.state = 2772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 2771;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 2774;
			await this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async at_column_number() {
		let _localctx: At_column_numberContext = new At_column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, cobolParser.RULE_at_column_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2777;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 2776;
				this.match(cobolParser.AT);
				}
			}

			this.state = 2779;
			this.match(cobolParser.COLUMN);
			this.state = 2781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 2780;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 2783;
			await this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async out_dest() {
		let _localctx: Out_destContext = new Out_destContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, cobolParser.RULE_out_dest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2785;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async delete_statement() {
		let _localctx: Delete_statementContext = new Delete_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, cobolParser.RULE_delete_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2787;
			this.match(cobolParser.DELETE);
			this.state = 2788;
			await this.file_name();
			this.state = 2790;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 346, this._ctx) ) {
			case 1:
				{
				this.state = 2789;
				this.match(cobolParser.RECORD);
				}
				break;
			}
			this.state = 2793;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 347, this._ctx) ) {
			case 1:
				{
				this.state = 2792;
				await this.invalid_key_variants();
				}
				break;
			}
			this.state = 2796;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 348, this._ctx) ) {
			case 1:
				{
				this.state = 2795;
				this.match(cobolParser.END_DELETE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async continue_statement() {
		let _localctx: Continue_statementContext = new Continue_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, cobolParser.RULE_continue_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2798;
			this.match(cobolParser.CONTINUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async compute_statement() {
		let _localctx: Compute_statementContext = new Compute_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, cobolParser.RULE_compute_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2800;
			this.match(cobolParser.COMPUTE);
			this.state = 2805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2801;
				await this.identifier_result();
				this.state = 2803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ROUNDED) {
					{
					this.state = 2802;
					this.match(cobolParser.ROUNDED);
					}
				}

				}
				}
				this.state = 2807;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 2809;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.EQUAL || _la === cobolParser.EQUAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 2810;
			await this.arithmetic_expression(0);
			this.state = 2812;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 351, this._ctx) ) {
			case 1:
				{
				this.state = 2811;
				await this.on_size_variants();
				}
				break;
			}
			this.state = 2815;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 352, this._ctx) ) {
			case 1:
				{
				this.state = 2814;
				this.match(cobolParser.END_COMPUTE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async close_statement() {
		let _localctx: Close_statementContext = new Close_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, cobolParser.RULE_close_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2817;
			this.match(cobolParser.CLOSE);
			this.state = 2822;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2818;
				await this.file_name();
				this.state = 2820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LOCK || _la === cobolParser.NO || _la === cobolParser.REEL || _la === cobolParser.UNIT || _la === cobolParser.WITH) {
					{
					this.state = 2819;
					await this.close_params();
					}
				}

				}
				}
				this.state = 2824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async close_params() {
		let _localctx: Close_paramsContext = new Close_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, cobolParser.RULE_close_params);
		let _la: number;
		try {
			this.state = 2846;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2826;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 2836;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FOR:
				case cobolParser.REMOVAL:
					{
					this.state = 2828;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FOR) {
						{
						this.state = 2827;
						this.match(cobolParser.FOR);
						}
					}

					this.state = 2830;
					this.match(cobolParser.REMOVAL);
					}
					break;
				case cobolParser.NO:
				case cobolParser.WITH:
					{
					this.state = 2832;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 2831;
						this.match(cobolParser.WITH);
						}
					}

					this.state = 2834;
					this.match(cobolParser.NO);
					this.state = 2835;
					this.match(cobolParser.REWIND);
					}
					break;
				case cobolParser.ACCEPT:
				case cobolParser.ADD:
				case cobolParser.ALTER:
				case cobolParser.AT:
				case cobolParser.CALL:
				case cobolParser.CANCEL:
				case cobolParser.CLOSE:
				case cobolParser.COMPUTE:
				case cobolParser.CONTINUE:
				case cobolParser.DELETE:
				case cobolParser.DISPLAY:
				case cobolParser.DIVIDE:
				case cobolParser.ELSE:
				case cobolParser.END:
				case cobolParser.END_ACCEPT:
				case cobolParser.END_ADD:
				case cobolParser.END_CALL:
				case cobolParser.END_COMPUTE:
				case cobolParser.END_DELETE:
				case cobolParser.END_DISPLAY:
				case cobolParser.END_DIVIDE:
				case cobolParser.END_EVALUATE:
				case cobolParser.END_IF:
				case cobolParser.END_MULTIPLY:
				case cobolParser.END_OF_PAGE:
				case cobolParser.END_PERFORM:
				case cobolParser.END_READ:
				case cobolParser.END_RETURN:
				case cobolParser.END_REWRITE:
				case cobolParser.END_SEARCH:
				case cobolParser.END_START:
				case cobolParser.END_STRING:
				case cobolParser.END_SUBTRACT:
				case cobolParser.END_UNSTRING:
				case cobolParser.END_WRITE:
				case cobolParser.EOP:
				case cobolParser.EVALUATE:
				case cobolParser.EXCEPTION:
				case cobolParser.EXIT:
				case cobolParser.GENERATE:
				case cobolParser.GO:
				case cobolParser.IF:
				case cobolParser.INITIALIZE:
				case cobolParser.INITIATE:
				case cobolParser.INSPECT:
				case cobolParser.INVALID:
				case cobolParser.MERGE:
				case cobolParser.MOVE:
				case cobolParser.MULTIPLY:
				case cobolParser.NOT:
				case cobolParser.ON:
				case cobolParser.OPEN:
				case cobolParser.OVERFLOW:
				case cobolParser.PERFORM:
				case cobolParser.READ:
				case cobolParser.RECORD:
				case cobolParser.RELEASE:
				case cobolParser.RETURN:
				case cobolParser.REWRITE:
				case cobolParser.SEARCH:
				case cobolParser.SET:
				case cobolParser.SIZE:
				case cobolParser.SORT:
				case cobolParser.START:
				case cobolParser.STOP:
				case cobolParser.STRING:
				case cobolParser.SUBTRACT:
				case cobolParser.SUPPRESS:
				case cobolParser.TERMINATE:
				case cobolParser.UNLOCK:
				case cobolParser.UNSTRING:
				case cobolParser.WHEN:
				case cobolParser.WRITE:
				case cobolParser.EXEC:
				case cobolParser.DOT_:
				case cobolParser.USER_DEFINED_WORD_:
					break;
				default:
					break;
				}
				}
				break;
			case cobolParser.LOCK:
			case cobolParser.NO:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2839;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2838;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 2844;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.NO:
					{
					this.state = 2841;
					this.match(cobolParser.NO);
					this.state = 2842;
					this.match(cobolParser.REWIND);
					}
					break;
				case cobolParser.LOCK:
					{
					this.state = 2843;
					this.match(cobolParser.LOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async cancel_statement() {
		let _localctx: Cancel_statementContext = new Cancel_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, cobolParser.RULE_cancel_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2848;
			this.match(cobolParser.CANCEL);
			this.state = 2850;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2849;
				await this.prog_name();
				}
				}
				this.state = 2852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async call_statement() {
		let _localctx: Call_statementContext = new Call_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, cobolParser.RULE_call_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2854;
			this.match(cobolParser.CALL);
			this.state = 2855;
			await this.prog_name();
			this.state = 2857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USING) {
				{
				this.state = 2856;
				await this.call_using();
				}
			}

			this.state = 2860;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.GIVING) {
				{
				this.state = 2859;
				await this.call_giving();
				}
			}

			this.state = 2863;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
			case 1:
				{
				this.state = 2862;
				await this.on_exception_variants();
				}
				break;
			}
			this.state = 2866;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 365, this._ctx) ) {
			case 1:
				{
				this.state = 2865;
				this.match(cobolParser.END_CALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async call_giving() {
		let _localctx: Call_givingContext = new Call_givingContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, cobolParser.RULE_call_giving);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2868;
			this.match(cobolParser.GIVING);
			this.state = 2869;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async call_using() {
		let _localctx: Call_usingContext = new Call_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, cobolParser.RULE_call_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2871;
			this.match(cobolParser.USING);
			this.state = 2873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2872;
				await this.using_arg();
				}
				}
				this.state = 2875;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.BY || _la === cobolParser.CONTENT || _la === cobolParser.DESCRIPTOR || _la === cobolParser.OMITTED || _la === cobolParser.REFERENCE || _la === cobolParser.VALUE || ((((_la - 453)) & ~0x1F) === 0 && ((1 << (_la - 453)) & ((1 << (cobolParser.INTEGER_LITERAL_ - 453)) | (1 << (cobolParser.HEX_LITERAL_ - 453)) | (1 << (cobolParser.USER_DEFINED_WORD_ - 453)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async using_arg() {
		let _localctx: Using_argContext = new Using_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, cobolParser.RULE_using_arg);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2886;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.OMITTED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2877;
				this.match(cobolParser.OMITTED);
				}
				break;
			case cobolParser.STRING_LITERAL_:
			case cobolParser.BY:
			case cobolParser.CONTENT:
			case cobolParser.DESCRIPTOR:
			case cobolParser.REFERENCE:
			case cobolParser.VALUE:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY || _la === cobolParser.CONTENT || _la === cobolParser.DESCRIPTOR || _la === cobolParser.REFERENCE || _la === cobolParser.VALUE) {
					{
					this.state = 2878;
					await this.using_prefix();
					}
				}

				this.state = 2882;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2881;
						await this.argument();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2884;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async using_prefix() {
		let _localctx: Using_prefixContext = new Using_prefixContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, cobolParser.RULE_using_prefix);
		let _la: number;
		try {
			this.state = 2904;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2888;
					this.match(cobolParser.BY);
					}
				}

				this.state = 2891;
				this.match(cobolParser.REFERENCE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2893;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2892;
					this.match(cobolParser.BY);
					}
				}

				this.state = 2895;
				this.match(cobolParser.CONTENT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2897;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2896;
					this.match(cobolParser.BY);
					}
				}

				this.state = 2899;
				this.match(cobolParser.DESCRIPTOR);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2901;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2900;
					this.match(cobolParser.BY);
					}
				}

				this.state = 2903;
				this.match(cobolParser.VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async argument() {
		let _localctx: ArgumentContext = new ArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, cobolParser.RULE_argument);
		let _la: number;
		try {
			this.state = 2909;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2906;
				await this.identifier_result();
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2907;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2908;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async prog_name() {
		let _localctx: Prog_nameContext = new Prog_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, cobolParser.RULE_prog_name);
		try {
			this.state = 2913;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2911;
				await this.identifier_result();
				}
				break;
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2912;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async alter_statement() {
		let _localctx: Alter_statementContext = new Alter_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, cobolParser.RULE_alter_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2915;
			this.match(cobolParser.ALTER);
			this.state = 2924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2916;
				await this.proc_name();
				this.state = 2917;
				this.match(cobolParser.TO);
				this.state = 2920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PROCEED) {
					{
					this.state = 2918;
					this.match(cobolParser.PROCEED);
					this.state = 2919;
					this.match(cobolParser.TO);
					}
				}

				this.state = 2922;
				await this.proc_name();
				}
				}
				this.state = 2926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async add_statement() {
		let _localctx: Add_statementContext = new Add_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, cobolParser.RULE_add_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2975;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 388, this._ctx) ) {
			case 1:
				{
				this.state = 2928;
				this.match(cobolParser.ADD);
				this.state = 2930;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2929;
					await this.add_num();
					}
					}
					this.state = 2932;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.FUNCTION || ((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)) | (1 << (cobolParser.USER_DEFINED_WORD_ - 452)))) !== 0));
				this.state = 2934;
				this.match(cobolParser.TO);
				this.state = 2939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2935;
					await this.identifier_result();
					this.state = 2937;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ROUNDED) {
						{
						this.state = 2936;
						this.match(cobolParser.ROUNDED);
						}
					}

					}
					}
					this.state = 2941;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;

			case 2:
				{
				this.state = 2943;
				this.match(cobolParser.ADD);
				this.state = 2947;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2944;
						await this.add_num();
						}
						}
					}
					this.state = 2949;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
				}
				this.state = 2951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 2950;
					this.match(cobolParser.TO);
					}
				}

				this.state = 2954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2953;
					await this.add_num();
					}
					}
					this.state = 2956;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.FUNCTION || ((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)) | (1 << (cobolParser.USER_DEFINED_WORD_ - 452)))) !== 0));
				this.state = 2958;
				this.match(cobolParser.GIVING);
				this.state = 2963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2959;
					await this.identifier_result();
					this.state = 2961;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ROUNDED) {
						{
						this.state = 2960;
						this.match(cobolParser.ROUNDED);
						}
					}

					}
					}
					this.state = 2965;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;

			case 3:
				{
				this.state = 2967;
				this.match(cobolParser.ADD);
				this.state = 2968;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 2969;
				await this.add_grp();
				this.state = 2970;
				this.match(cobolParser.TO);
				this.state = 2971;
				await this.add_grp();
				this.state = 2973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ROUNDED) {
					{
					this.state = 2972;
					this.match(cobolParser.ROUNDED);
					}
				}

				}
				break;
			}
			this.state = 2978;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				{
				this.state = 2977;
				await this.on_size_variants();
				}
				break;
			}
			this.state = 2981;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				{
				this.state = 2980;
				this.match(cobolParser.END_ADD);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async add_grp() {
		let _localctx: Add_grpContext = new Add_grpContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, cobolParser.RULE_add_grp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2983;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async add_num() {
		let _localctx: Add_numContext = new Add_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, cobolParser.RULE_add_num);
		let _la: number;
		try {
			this.state = 2987;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2985;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2986;
				await this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_statement() {
		let _localctx: Accept_statementContext = new Accept_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, cobolParser.RULE_accept_statement);
		try {
			this.state = 2995;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 392, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2989;
				await this.accept_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2990;
				await this.accept_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2991;
				await this.accept_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2992;
				await this.accept_form4();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2993;
				await this.accept_form5();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2994;
				await this.accept_form6();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async on_exception_variants() {
		let _localctx: On_exception_variantsContext = new On_exception_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, cobolParser.RULE_on_exception_variants);
		try {
			this.state = 3007;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.EXCEPTION:
			case cobolParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2997;
				await this.on_exception();
				this.state = 3000;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 393, this._ctx) ) {
				case 1:
					{
					this.state = 2998;
					this.match(cobolParser.NOT);
					this.state = 2999;
					await this.on_exception();
					}
					break;
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3002;
				this.match(cobolParser.NOT);
				this.state = 3003;
				await this.on_exception();
				this.state = 3005;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 394, this._ctx) ) {
				case 1:
					{
					this.state = 3004;
					await this.on_exception();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async at_end_variants() {
		let _localctx: At_end_variantsContext = new At_end_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, cobolParser.RULE_at_end_variants);
		try {
			this.state = 3019;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AT:
			case cobolParser.END:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3009;
				await this.at_end();
				this.state = 3012;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
				case 1:
					{
					this.state = 3010;
					this.match(cobolParser.NOT);
					this.state = 3011;
					await this.at_end();
					}
					break;
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3014;
				this.match(cobolParser.NOT);
				this.state = 3015;
				await this.at_end();
				this.state = 3017;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 397, this._ctx) ) {
				case 1:
					{
					this.state = 3016;
					await this.at_end();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async on_size_variants() {
		let _localctx: On_size_variantsContext = new On_size_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, cobolParser.RULE_on_size_variants);
		try {
			this.state = 3031;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
			case cobolParser.SIZE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3021;
				await this.on_size();
				this.state = 3024;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 399, this._ctx) ) {
				case 1:
					{
					this.state = 3022;
					this.match(cobolParser.NOT);
					this.state = 3023;
					await this.on_size();
					}
					break;
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3026;
				this.match(cobolParser.NOT);
				this.state = 3027;
				await this.on_size();
				this.state = 3029;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 400, this._ctx) ) {
				case 1:
					{
					this.state = 3028;
					await this.on_size();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async on_overflow_variants() {
		let _localctx: On_overflow_variantsContext = new On_overflow_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, cobolParser.RULE_on_overflow_variants);
		try {
			this.state = 3043;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
			case cobolParser.OVERFLOW:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3033;
				await this.on_overflow();
				this.state = 3036;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 402, this._ctx) ) {
				case 1:
					{
					this.state = 3034;
					this.match(cobolParser.NOT);
					this.state = 3035;
					await this.on_overflow();
					}
					break;
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3038;
				this.match(cobolParser.NOT);
				this.state = 3039;
				await this.on_overflow();
				this.state = 3041;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
				case 1:
					{
					this.state = 3040;
					await this.on_overflow();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async at_eop_variants() {
		let _localctx: At_eop_variantsContext = new At_eop_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, cobolParser.RULE_at_eop_variants);
		try {
			this.state = 3055;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AT:
			case cobolParser.END_OF_PAGE:
			case cobolParser.EOP:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3045;
				await this.at_eop();
				this.state = 3048;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 405, this._ctx) ) {
				case 1:
					{
					this.state = 3046;
					this.match(cobolParser.NOT);
					this.state = 3047;
					await this.at_eop();
					}
					break;
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3050;
				this.match(cobolParser.NOT);
				this.state = 3051;
				await this.at_eop();
				this.state = 3053;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
				case 1:
					{
					this.state = 3052;
					await this.at_eop();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async invalid_key_variants() {
		let _localctx: Invalid_key_variantsContext = new Invalid_key_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, cobolParser.RULE_invalid_key_variants);
		try {
			this.state = 3067;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INVALID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3057;
				await this.invalid_key();
				this.state = 3060;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 408, this._ctx) ) {
				case 1:
					{
					this.state = 3058;
					this.match(cobolParser.NOT);
					this.state = 3059;
					await this.invalid_key();
					}
					break;
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3062;
				this.match(cobolParser.NOT);
				this.state = 3063;
				await this.invalid_key();
				this.state = 3065;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
				case 1:
					{
					this.state = 3064;
					await this.invalid_key();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form6() {
		let _localctx: Accept_form6Context = new Accept_form6Context(this._ctx, this.state);
		this.enterRule(_localctx, 422, cobolParser.RULE_accept_form6);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3069;
			this.match(cobolParser.ACCEPT);
			this.state = 3070;
			await this.dest_item();
			this.state = 3072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 3071;
				this.match(cobolParser.FROM);
				}
			}

			this.state = 3074;
			await this.arg_env_accept();
			this.state = 3076;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 412, this._ctx) ) {
			case 1:
				{
				this.state = 3075;
				await this.on_exception_variants();
				}
				break;
			}
			this.state = 3079;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 413, this._ctx) ) {
			case 1:
				{
				this.state = 3078;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async arg_env_accept() {
		let _localctx: Arg_env_acceptContext = new Arg_env_acceptContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, cobolParser.RULE_arg_env_accept);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3081;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form1() {
		let _localctx: Accept_form1Context = new Accept_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 426, cobolParser.RULE_accept_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3083;
			this.match(cobolParser.ACCEPT);
			this.state = 3084;
			await this.dest_item();
			this.state = 3087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 3085;
				this.match(cobolParser.FROM);
				this.state = 3086;
				await this.input_source();
				}
			}

			this.state = 3091;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 3089;
				this.match(cobolParser.WITH);
				this.state = 3090;
				this.match(cobolParser.CONVERSION);
				}
			}

			this.state = 3094;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 416, this._ctx) ) {
			case 1:
				{
				this.state = 3093;
				await this.at_end_variants();
				}
				break;
			}
			this.state = 3097;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				{
				this.state = 3096;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form2() {
		let _localctx: Accept_form2Context = new Accept_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 428, cobolParser.RULE_accept_form2);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3099;
			this.match(cobolParser.ACCEPT);
			this.state = 3100;
			await this.dest_item();
			this.state = 3101;
			this.match(cobolParser.FROM);
			this.state = 3102;
			await this.date_time();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form3() {
		let _localctx: Accept_form3Context = new Accept_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 430, cobolParser.RULE_accept_form3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3104;
			this.match(cobolParser.ACCEPT);
			this.state = 3105;
			await this.dest_item();
			this.state = 3107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3106;
				await this.accept_form3_clause();
				}
				}
				this.state = 3109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 38)) & ~0x1F) === 0 && ((1 << (_la - 38)) & ((1 << (cobolParser.BELL - 38)) | (1 << (cobolParser.BLINKING - 38)) | (1 << (cobolParser.BOLD - 38)) | (1 << (cobolParser.COLUMN - 38)))) !== 0) || ((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & ((1 << (cobolParser.CONTROL - 90)) | (1 << (cobolParser.CONVERSION - 90)) | (1 << (cobolParser.DEFAULT - 90)))) !== 0) || _la === cobolParser.ERASE || _la === cobolParser.FROM || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (cobolParser.KEY - 225)) | (1 << (cobolParser.LINE - 225)) | (1 << (cobolParser.NO - 225)))) !== 0) || _la === cobolParser.PROTECTED || _la === cobolParser.REVERSED || _la === cobolParser.UNDERLINED || _la === cobolParser.WITH);
			this.state = 3113;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				{
				this.state = 3111;
				await this.on_exception_variants();
				}
				break;

			case 2:
				{
				this.state = 3112;
				await this.at_end_variants();
				}
				break;
			}
			this.state = 3116;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 420, this._ctx) ) {
			case 1:
				{
				this.state = 3115;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form4() {
		let _localctx: Accept_form4Context = new Accept_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 432, cobolParser.RULE_accept_form4);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3118;
			this.match(cobolParser.ACCEPT);
			this.state = 3120;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTROL) {
				{
				this.state = 3119;
				this.match(cobolParser.CONTROL);
				}
			}

			this.state = 3122;
			this.match(cobolParser.KEY);
			this.state = 3124;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 3123;
				this.match(cobolParser.IN);
				}
			}

			this.state = 3126;
			await this.key_dest_item();
			this.state = 3128;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3127;
				await this.accept_form4_clause();
				}
				}
				this.state = 3130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.BELL || _la === cobolParser.COLUMN || _la === cobolParser.ERASE || _la === cobolParser.FROM || _la === cobolParser.LINE || _la === cobolParser.WITH);
			this.state = 3134;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 424, this._ctx) ) {
			case 1:
				{
				this.state = 3132;
				await this.on_exception_variants();
				}
				break;

			case 2:
				{
				this.state = 3133;
				await this.at_end_variants();
				}
				break;
			}
			this.state = 3137;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 425, this._ctx) ) {
			case 1:
				{
				this.state = 3136;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form5() {
		let _localctx: Accept_form5Context = new Accept_form5Context(this._ctx, this.state);
		this.enterRule(_localctx, 434, cobolParser.RULE_accept_form5);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3139;
			this.match(cobolParser.ACCEPT);
			this.state = 3140;
			await this.data_name();
			this.state = 3142;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				{
				this.state = 3141;
				await this.accept_at();
				}
				break;
			}
			this.state = 3145;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 427, this._ctx) ) {
			case 1:
				{
				this.state = 3144;
				await this.on_exception_variants();
				}
				break;
			}
			this.state = 3148;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 428, this._ctx) ) {
			case 1:
				{
				this.state = 3147;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_at() {
		let _localctx: Accept_atContext = new Accept_atContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, cobolParser.RULE_accept_at);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 3150;
				this.match(cobolParser.AT);
				}
			}

			this.state = 3161;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				{
				this.state = 3153;
				await this.accept_at_line();
				this.state = 3155;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.COLUMN) {
					{
					this.state = 3154;
					await this.accept_at_column();
					}
				}

				}
				break;
			case cobolParser.COLUMN:
				{
				this.state = 3157;
				await this.accept_at_column();
				this.state = 3159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINE) {
					{
					this.state = 3158;
					await this.accept_at_line();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_at_line() {
		let _localctx: Accept_at_lineContext = new Accept_at_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, cobolParser.RULE_accept_at_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3163;
			this.match(cobolParser.LINE);
			this.state = 3165;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3164;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 3169;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				{
				this.state = 3167;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 3168;
				await this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_at_column() {
		let _localctx: Accept_at_columnContext = new Accept_at_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, cobolParser.RULE_accept_at_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3171;
			this.match(cobolParser.COLUMN);
			this.state = 3173;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3172;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 3177;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				{
				this.state = 3175;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 3176;
				await this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form4_clause() {
		let _localctx: Accept_form4_clauseContext = new Accept_form4_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, cobolParser.RULE_accept_form4_clause);
		try {
			this.state = 3183;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 437, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3179;
				await this.from_line_number();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3180;
				await this.from_column_number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3181;
				await this.erase_to();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3182;
				await this.with_bell();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async from_column_number() {
		let _localctx: From_column_numberContext = new From_column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, cobolParser.RULE_from_column_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 3185;
				this.match(cobolParser.FROM);
				}
			}

			this.state = 3188;
			this.match(cobolParser.COLUMN);
			this.state = 3190;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3189;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 3192;
			await this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async from_line_number() {
		let _localctx: From_line_numberContext = new From_line_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, cobolParser.RULE_from_line_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3195;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 3194;
				this.match(cobolParser.FROM);
				}
			}

			this.state = 3197;
			this.match(cobolParser.LINE);
			this.state = 3199;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3198;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 3201;
			await this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async accept_form3_clause() {
		let _localctx: Accept_form3_clauseContext = new Accept_form3_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, cobolParser.RULE_accept_form3_clause);
		try {
			this.state = 3213;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3203;
				await this.accept_form4_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3204;
				await this.underlined();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3205;
				await this.bold();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3206;
				await this.with_blinking();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3207;
				await this.protected_clause();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3208;
				await this.with_conversion();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3209;
				await this.reversed();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3210;
				await this.with_no_echo();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3211;
				await this.default_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3212;
				await this.control_key_in();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async protected_clause() {
		let _localctx: Protected_clauseContext = new Protected_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, cobolParser.RULE_protected_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3215;
			this.match(cobolParser.PROTECTED);
			this.state = 3219;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3216;
					await this.protected_value();
					}
					}
				}
				this.state = 3221;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async control_key_in() {
		let _localctx: Control_key_inContext = new Control_key_inContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, cobolParser.RULE_control_key_in);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTROL) {
				{
				this.state = 3222;
				this.match(cobolParser.CONTROL);
				}
			}

			this.state = 3225;
			this.match(cobolParser.KEY);
			this.state = 3227;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 3226;
				this.match(cobolParser.IN);
				}
			}

			this.state = 3229;
			await this.key_dest_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async default_is() {
		let _localctx: Default_isContext = new Default_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, cobolParser.RULE_default_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3231;
			this.match(cobolParser.DEFAULT);
			this.state = 3233;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3232;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3235;
			await this.def_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_no_echo() {
		let _localctx: With_no_echoContext = new With_no_echoContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, cobolParser.RULE_with_no_echo);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3238;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 3237;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 3240;
			this.match(cobolParser.NO);
			this.state = 3241;
			this.match(cobolParser.ECHO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async key_dest_item() {
		let _localctx: Key_dest_itemContext = new Key_dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, cobolParser.RULE_key_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3243;
			await this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async def_value() {
		let _localctx: Def_valueContext = new Def_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, cobolParser.RULE_def_value);
		let _la: number;
		try {
			this.state = 3252;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3245;
				await this.figurative_constant();
				}
				break;
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3246;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3247;
				await this.identifier();
				}
				break;
			case cobolParser.CURRENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3248;
				this.match(cobolParser.CURRENT);
				this.state = 3250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.VALUE) {
					{
					this.state = 3249;
					this.match(cobolParser.VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async protected_value() {
		let _localctx: Protected_valueContext = new Protected_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, cobolParser.RULE_protected_value);
		let _la: number;
		try {
			this.state = 3274;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 454, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3254;
				this.match(cobolParser.SIZE);
				this.state = 3255;
				await this.prot_size_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3256;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 3259;
				this.match(cobolParser.AUTOTERMINATE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3260;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 3263;
				this.match(cobolParser.NO);
				this.state = 3264;
				this.match(cobolParser.BLANK);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3265;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 3268;
				this.match(cobolParser.EDITING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3270;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3269;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 3272;
				this.match(cobolParser.FILLER);
				this.state = 3273;
				await this.prot_fill_lit();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async prot_fill_lit() {
		let _localctx: Prot_fill_litContext = new Prot_fill_litContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, cobolParser.RULE_prot_fill_lit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3276;
			this.match(cobolParser.STRING_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async prot_size_value() {
		let _localctx: Prot_size_valueContext = new Prot_size_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, cobolParser.RULE_prot_size_value);
		let _la: number;
		try {
			this.state = 3280;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3278;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3279;
				await this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async number_value() {
		let _localctx: Number_valueContext = new Number_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, cobolParser.RULE_number_value);
		let _la: number;
		try {
			this.state = 3294;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3282;
				await this.line_num();
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3283;
				await this.identifier();
				this.state = 3288;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 3284;
					this.match(cobolParser.PLUS);
					this.state = 3286;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 456, this._ctx) ) {
					case 1:
						{
						this.state = 3285;
						await this.line_num();
						}
						break;
					}
					}
				}

				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3290;
				this.match(cobolParser.PLUS);
				this.state = 3292;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 458, this._ctx) ) {
				case 1:
					{
					this.state = 3291;
					await this.line_num();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async date_time() {
		let _localctx: Date_timeContext = new Date_timeContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, cobolParser.RULE_date_time);
		let _la: number;
		try {
			this.state = 3306;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3296;
				this.match(cobolParser.DATE);
				this.state = 3298;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.YYYYMMDD) {
					{
					this.state = 3297;
					this.match(cobolParser.YYYYMMDD);
					}
				}

				}
				break;
			case cobolParser.DAY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3300;
				this.match(cobolParser.DAY);
				this.state = 3302;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.YYYYDDD) {
					{
					this.state = 3301;
					this.match(cobolParser.YYYYDDD);
					}
				}

				}
				break;
			case cobolParser.DAY_OF_WEEK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3304;
				this.match(cobolParser.DAY_OF_WEEK);
				}
				break;
			case cobolParser.TIME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3305;
				this.match(cobolParser.TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async dest_item() {
		let _localctx: Dest_itemContext = new Dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, cobolParser.RULE_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3308;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async input_source() {
		let _localctx: Input_sourceContext = new Input_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, cobolParser.RULE_input_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3310;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async at_end() {
		let _localctx: At_endContext = new At_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, cobolParser.RULE_at_end);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3313;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 3312;
				this.match(cobolParser.AT);
				}
			}

			this.state = 3315;
			this.match(cobolParser.END);
			this.state = 3320;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3318;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.ACCEPT:
					case cobolParser.ADD:
					case cobolParser.ALTER:
					case cobolParser.CALL:
					case cobolParser.CANCEL:
					case cobolParser.CLOSE:
					case cobolParser.COMPUTE:
					case cobolParser.CONTINUE:
					case cobolParser.DELETE:
					case cobolParser.DISPLAY:
					case cobolParser.DIVIDE:
					case cobolParser.EVALUATE:
					case cobolParser.EXIT:
					case cobolParser.GENERATE:
					case cobolParser.GO:
					case cobolParser.IF:
					case cobolParser.INITIALIZE:
					case cobolParser.INITIATE:
					case cobolParser.INSPECT:
					case cobolParser.MERGE:
					case cobolParser.MOVE:
					case cobolParser.MULTIPLY:
					case cobolParser.OPEN:
					case cobolParser.PERFORM:
					case cobolParser.READ:
					case cobolParser.RECORD:
					case cobolParser.RELEASE:
					case cobolParser.RETURN:
					case cobolParser.REWRITE:
					case cobolParser.SEARCH:
					case cobolParser.SET:
					case cobolParser.SORT:
					case cobolParser.START:
					case cobolParser.STOP:
					case cobolParser.STRING:
					case cobolParser.SUBTRACT:
					case cobolParser.SUPPRESS:
					case cobolParser.TERMINATE:
					case cobolParser.UNLOCK:
					case cobolParser.UNSTRING:
					case cobolParser.WRITE:
						{
						this.state = 3316;
						await this.statement();
						}
						break;
					case cobolParser.EXEC:
						{
						this.state = 3317;
						await this.exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3322;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async on_exception() {
		let _localctx: On_exceptionContext = new On_exceptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, cobolParser.RULE_on_exception);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 3323;
				this.match(cobolParser.ON);
				}
			}

			this.state = 3326;
			this.match(cobolParser.EXCEPTION);
			this.state = 3331;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3329;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.ACCEPT:
					case cobolParser.ADD:
					case cobolParser.ALTER:
					case cobolParser.CALL:
					case cobolParser.CANCEL:
					case cobolParser.CLOSE:
					case cobolParser.COMPUTE:
					case cobolParser.CONTINUE:
					case cobolParser.DELETE:
					case cobolParser.DISPLAY:
					case cobolParser.DIVIDE:
					case cobolParser.EVALUATE:
					case cobolParser.EXIT:
					case cobolParser.GENERATE:
					case cobolParser.GO:
					case cobolParser.IF:
					case cobolParser.INITIALIZE:
					case cobolParser.INITIATE:
					case cobolParser.INSPECT:
					case cobolParser.MERGE:
					case cobolParser.MOVE:
					case cobolParser.MULTIPLY:
					case cobolParser.OPEN:
					case cobolParser.PERFORM:
					case cobolParser.READ:
					case cobolParser.RECORD:
					case cobolParser.RELEASE:
					case cobolParser.RETURN:
					case cobolParser.REWRITE:
					case cobolParser.SEARCH:
					case cobolParser.SET:
					case cobolParser.SORT:
					case cobolParser.START:
					case cobolParser.STOP:
					case cobolParser.STRING:
					case cobolParser.SUBTRACT:
					case cobolParser.SUPPRESS:
					case cobolParser.TERMINATE:
					case cobolParser.UNLOCK:
					case cobolParser.UNSTRING:
					case cobolParser.WRITE:
						{
						this.state = 3327;
						await this.statement();
						}
						break;
					case cobolParser.EXEC:
						{
						this.state = 3328;
						await this.exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3333;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async on_size() {
		let _localctx: On_sizeContext = new On_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, cobolParser.RULE_on_size);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3335;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 3334;
				this.match(cobolParser.ON);
				}
			}

			this.state = 3337;
			this.match(cobolParser.SIZE);
			this.state = 3338;
			this.match(cobolParser.ERROR);
			this.state = 3343;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3341;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.ACCEPT:
					case cobolParser.ADD:
					case cobolParser.ALTER:
					case cobolParser.CALL:
					case cobolParser.CANCEL:
					case cobolParser.CLOSE:
					case cobolParser.COMPUTE:
					case cobolParser.CONTINUE:
					case cobolParser.DELETE:
					case cobolParser.DISPLAY:
					case cobolParser.DIVIDE:
					case cobolParser.EVALUATE:
					case cobolParser.EXIT:
					case cobolParser.GENERATE:
					case cobolParser.GO:
					case cobolParser.IF:
					case cobolParser.INITIALIZE:
					case cobolParser.INITIATE:
					case cobolParser.INSPECT:
					case cobolParser.MERGE:
					case cobolParser.MOVE:
					case cobolParser.MULTIPLY:
					case cobolParser.OPEN:
					case cobolParser.PERFORM:
					case cobolParser.READ:
					case cobolParser.RECORD:
					case cobolParser.RELEASE:
					case cobolParser.RETURN:
					case cobolParser.REWRITE:
					case cobolParser.SEARCH:
					case cobolParser.SET:
					case cobolParser.SORT:
					case cobolParser.START:
					case cobolParser.STOP:
					case cobolParser.STRING:
					case cobolParser.SUBTRACT:
					case cobolParser.SUPPRESS:
					case cobolParser.TERMINATE:
					case cobolParser.UNLOCK:
					case cobolParser.UNSTRING:
					case cobolParser.WRITE:
						{
						this.state = 3339;
						await this.statement();
						}
						break;
					case cobolParser.EXEC:
						{
						this.state = 3340;
						await this.exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3345;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async on_overflow() {
		let _localctx: On_overflowContext = new On_overflowContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, cobolParser.RULE_on_overflow);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 3346;
				this.match(cobolParser.ON);
				}
			}

			this.state = 3349;
			this.match(cobolParser.OVERFLOW);
			this.state = 3354;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3352;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.ACCEPT:
					case cobolParser.ADD:
					case cobolParser.ALTER:
					case cobolParser.CALL:
					case cobolParser.CANCEL:
					case cobolParser.CLOSE:
					case cobolParser.COMPUTE:
					case cobolParser.CONTINUE:
					case cobolParser.DELETE:
					case cobolParser.DISPLAY:
					case cobolParser.DIVIDE:
					case cobolParser.EVALUATE:
					case cobolParser.EXIT:
					case cobolParser.GENERATE:
					case cobolParser.GO:
					case cobolParser.IF:
					case cobolParser.INITIALIZE:
					case cobolParser.INITIATE:
					case cobolParser.INSPECT:
					case cobolParser.MERGE:
					case cobolParser.MOVE:
					case cobolParser.MULTIPLY:
					case cobolParser.OPEN:
					case cobolParser.PERFORM:
					case cobolParser.READ:
					case cobolParser.RECORD:
					case cobolParser.RELEASE:
					case cobolParser.RETURN:
					case cobolParser.REWRITE:
					case cobolParser.SEARCH:
					case cobolParser.SET:
					case cobolParser.SORT:
					case cobolParser.START:
					case cobolParser.STOP:
					case cobolParser.STRING:
					case cobolParser.SUBTRACT:
					case cobolParser.SUPPRESS:
					case cobolParser.TERMINATE:
					case cobolParser.UNLOCK:
					case cobolParser.UNSTRING:
					case cobolParser.WRITE:
						{
						this.state = 3350;
						await this.statement();
						}
						break;
					case cobolParser.EXEC:
						{
						this.state = 3351;
						await this.exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3356;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async at_eop() {
		let _localctx: At_eopContext = new At_eopContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, cobolParser.RULE_at_eop);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 3357;
				this.match(cobolParser.AT);
				}
			}

			this.state = 3360;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.END_OF_PAGE || _la === cobolParser.EOP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 3365;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3363;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.ACCEPT:
					case cobolParser.ADD:
					case cobolParser.ALTER:
					case cobolParser.CALL:
					case cobolParser.CANCEL:
					case cobolParser.CLOSE:
					case cobolParser.COMPUTE:
					case cobolParser.CONTINUE:
					case cobolParser.DELETE:
					case cobolParser.DISPLAY:
					case cobolParser.DIVIDE:
					case cobolParser.EVALUATE:
					case cobolParser.EXIT:
					case cobolParser.GENERATE:
					case cobolParser.GO:
					case cobolParser.IF:
					case cobolParser.INITIALIZE:
					case cobolParser.INITIATE:
					case cobolParser.INSPECT:
					case cobolParser.MERGE:
					case cobolParser.MOVE:
					case cobolParser.MULTIPLY:
					case cobolParser.OPEN:
					case cobolParser.PERFORM:
					case cobolParser.READ:
					case cobolParser.RECORD:
					case cobolParser.RELEASE:
					case cobolParser.RETURN:
					case cobolParser.REWRITE:
					case cobolParser.SEARCH:
					case cobolParser.SET:
					case cobolParser.SORT:
					case cobolParser.START:
					case cobolParser.STOP:
					case cobolParser.STRING:
					case cobolParser.SUBTRACT:
					case cobolParser.SUPPRESS:
					case cobolParser.TERMINATE:
					case cobolParser.UNLOCK:
					case cobolParser.UNSTRING:
					case cobolParser.WRITE:
						{
						this.state = 3361;
						await this.statement();
						}
						break;
					case cobolParser.EXEC:
						{
						this.state = 3362;
						await this.exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3367;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async invalid_key() {
		let _localctx: Invalid_keyContext = new Invalid_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, cobolParser.RULE_invalid_key);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3368;
			this.match(cobolParser.INVALID);
			this.state = 3370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 3369;
				this.match(cobolParser.KEY);
				}
			}

			this.state = 3376;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3374;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.ACCEPT:
					case cobolParser.ADD:
					case cobolParser.ALTER:
					case cobolParser.CALL:
					case cobolParser.CANCEL:
					case cobolParser.CLOSE:
					case cobolParser.COMPUTE:
					case cobolParser.CONTINUE:
					case cobolParser.DELETE:
					case cobolParser.DISPLAY:
					case cobolParser.DIVIDE:
					case cobolParser.EVALUATE:
					case cobolParser.EXIT:
					case cobolParser.GENERATE:
					case cobolParser.GO:
					case cobolParser.IF:
					case cobolParser.INITIALIZE:
					case cobolParser.INITIATE:
					case cobolParser.INSPECT:
					case cobolParser.MERGE:
					case cobolParser.MOVE:
					case cobolParser.MULTIPLY:
					case cobolParser.OPEN:
					case cobolParser.PERFORM:
					case cobolParser.READ:
					case cobolParser.RECORD:
					case cobolParser.RELEASE:
					case cobolParser.RETURN:
					case cobolParser.REWRITE:
					case cobolParser.SEARCH:
					case cobolParser.SET:
					case cobolParser.SORT:
					case cobolParser.START:
					case cobolParser.STOP:
					case cobolParser.STRING:
					case cobolParser.SUBTRACT:
					case cobolParser.SUPPRESS:
					case cobolParser.TERMINATE:
					case cobolParser.UNLOCK:
					case cobolParser.UNSTRING:
					case cobolParser.WRITE:
						{
						this.state = 3372;
						await this.statement();
						}
						break;
					case cobolParser.EXEC:
						{
						this.state = 3373;
						await this.exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3378;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_section() {
		let _localctx: File_sectionContext = new File_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, cobolParser.RULE_file_section);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3379;
			this.match(cobolParser.FILE);
			this.state = 3380;
			this.match(cobolParser.SECTION);
			this.state = 3381;
			this.match(cobolParser.DOT_);
			this.state = 3385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3382;
				await this.replace_statement();
				}
				}
				this.state = 3387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.FD || _la === cobolParser.SD) {
				{
				this.state = 3390;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FD:
					{
					this.state = 3388;
					await this.file_description();
					}
					break;
				case cobolParser.SD:
					{
					this.state = 3389;
					await this.sort_merge_file_description();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 3394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_description() {
		let _localctx: File_descriptionContext = new File_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, cobolParser.RULE_file_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3395;
			await this.file_description_entry();
			this.state = 3399;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_) {
				{
				{
				this.state = 3396;
				await this.data_description_entry();
				}
				}
				this.state = 3401;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sort_merge_file_description() {
		let _localctx: Sort_merge_file_descriptionContext = new Sort_merge_file_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, cobolParser.RULE_sort_merge_file_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3402;
			await this.sort_merge_file_description_entry();
			this.state = 3406;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_) {
				{
				{
				this.state = 3403;
				await this.data_description_entry();
				}
				}
				this.state = 3408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async working_storage_section() {
		let _localctx: Working_storage_sectionContext = new Working_storage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, cobolParser.RULE_working_storage_section);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3409;
			this.match(cobolParser.WORKING_STORAGE);
			this.state = 3410;
			this.match(cobolParser.SECTION);
			this.state = 3411;
			this.match(cobolParser.DOT_);
			this.state = 3415;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3412;
				await this.replace_statement();
				}
				}
				this.state = 3417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 425)) & ~0x1F) === 0 && ((1 << (_la - 425)) & ((1 << (cobolParser.EXEC - 425)) | (1 << (cobolParser.INTEGER_LITERAL_ - 425)) | (1 << (cobolParser.HEX_LITERAL_ - 425)))) !== 0)) {
				{
				{
				this.state = 3418;
				await this.working_storage_entry();
				}
				}
				this.state = 3423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async working_storage_entry() {
		let _localctx: Working_storage_entryContext = new Working_storage_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, cobolParser.RULE_working_storage_entry);
		try {
			this.state = 3426;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3424;
				await this.data_description_entry();
				}
				break;
			case cobolParser.EXEC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3425;
				await this.exec_sql_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async linkage_section() {
		let _localctx: Linkage_sectionContext = new Linkage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, cobolParser.RULE_linkage_section);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3428;
			this.match(cobolParser.LINKAGE);
			this.state = 3429;
			this.match(cobolParser.SECTION);
			this.state = 3430;
			this.match(cobolParser.DOT_);
			this.state = 3434;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3431;
				await this.replace_statement();
				}
				}
				this.state = 3436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_) {
				{
				{
				this.state = 3437;
				await this.data_description_entry();
				}
				}
				this.state = 3442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_section() {
		let _localctx: Report_sectionContext = new Report_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, cobolParser.RULE_report_section);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3443;
			this.match(cobolParser.REPORT);
			this.state = 3444;
			this.match(cobolParser.SECTION);
			this.state = 3445;
			this.match(cobolParser.DOT_);
			this.state = 3449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3446;
				await this.replace_statement();
				}
				}
				this.state = 3451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.RD) {
				{
				{
				this.state = 3452;
				await this.report_description();
				}
				}
				this.state = 3457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_description() {
		let _localctx: Report_descriptionContext = new Report_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, cobolParser.RULE_report_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3458;
			await this.report_description_entry();
			this.state = 3462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_) {
				{
				{
				this.state = 3459;
				await this.report_group_data_description_entry();
				}
				}
				this.state = 3464;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async screen_section() {
		let _localctx: Screen_sectionContext = new Screen_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, cobolParser.RULE_screen_section);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3465;
			this.match(cobolParser.SCREEN);
			this.state = 3466;
			this.match(cobolParser.SECTION);
			this.state = 3467;
			this.match(cobolParser.DOT_);
			this.state = 3471;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3468;
				await this.replace_statement();
				}
				}
				this.state = 3473;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3477;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_) {
				{
				{
				this.state = 3474;
				await this.screen_description_entry();
				}
				}
				this.state = 3479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_description_entry() {
		let _localctx: File_description_entryContext = new File_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, cobolParser.RULE_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3480;
			this.match(cobolParser.FD);
			this.state = 3481;
			await this.file_name();
			this.state = 3485;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ACCESS || _la === cobolParser.ALTERNATE || _la === cobolParser.BLOCK || _la === cobolParser.CODE_SET || _la === cobolParser.DATA || _la === cobolParser.DYNAMIC || ((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (cobolParser.EXTERNAL - 172)) | (1 << (cobolParser.FILE - 172)) | (1 << (cobolParser.GLOBAL - 172)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (cobolParser.IS - 220)) | (1 << (cobolParser.LABEL - 220)) | (1 << (cobolParser.LINAGE - 220)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (cobolParser.RANDOM - 302)) | (1 << (cobolParser.RECORD - 302)) | (1 << (cobolParser.REPORT - 302)) | (1 << (cobolParser.REPORTS - 302)))) !== 0) || _la === cobolParser.SEQUENTIAL || _la === cobolParser.STATUS || _la === cobolParser.VALUE) {
				{
				{
				this.state = 3482;
				await this.fd_clause();
				}
				}
				this.state = 3487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3488;
			this.match(cobolParser.DOT_);
			this.state = 3492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3489;
				await this.replace_statement();
				}
				}
				this.state = 3494;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sort_merge_file_description_entry() {
		let _localctx: Sort_merge_file_description_entryContext = new Sort_merge_file_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, cobolParser.RULE_sort_merge_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3495;
			this.match(cobolParser.SD);
			this.state = 3496;
			await this.file_name();
			this.state = 3500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.DATA || _la === cobolParser.RECORD) {
				{
				{
				this.state = 3497;
				await this.sd_clause();
				}
				}
				this.state = 3502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3503;
			this.match(cobolParser.DOT_);
			this.state = 3507;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3504;
				await this.replace_statement();
				}
				}
				this.state = 3509;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_description_entry() {
		let _localctx: Report_description_entryContext = new Report_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, cobolParser.RULE_report_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3510;
			this.match(cobolParser.RD);
			this.state = 3511;
			await this.report_name();
			this.state = 3515;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & ((1 << (cobolParser.CODE - 62)) | (1 << (cobolParser.CONTROL - 62)) | (1 << (cobolParser.CONTROLS - 62)))) !== 0) || _la === cobolParser.GLOBAL || _la === cobolParser.IS || _la === cobolParser.PAGE) {
				{
				{
				this.state = 3512;
				await this.rd_clause();
				}
				}
				this.state = 3517;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3518;
			this.match(cobolParser.DOT_);
			this.state = 3522;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3519;
				await this.replace_statement();
				}
				}
				this.state = 3524;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async fd_clause() {
		let _localctx: Fd_clauseContext = new Fd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, cobolParser.RULE_fd_clause);
		try {
			this.state = 3539;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 502, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3525;
				await this.is_external();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3526;
				await this.is_global();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3527;
				await this.block_contains();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3528;
				await this.record();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3529;
				await this.label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3530;
				await this.value_of_id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3531;
				await this.data_rec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3532;
				await this.linage();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3533;
				await this.report_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3534;
				await this.code_set();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3535;
				await this.access_mode();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3536;
				await this.record_key();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3537;
				await this.alt_record_key();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3538;
				await this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async is_external() {
		let _localctx: Is_externalContext = new Is_externalContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, cobolParser.RULE_is_external);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3542;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3541;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3544;
			this.match(cobolParser.EXTERNAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async is_global() {
		let _localctx: Is_globalContext = new Is_globalContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, cobolParser.RULE_is_global);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3547;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3546;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3549;
			this.match(cobolParser.GLOBAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async data_description_entry() {
		let _localctx: Data_description_entryContext = new Data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, cobolParser.RULE_data_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3551;
			await this.level_number();
			this.state = 3554;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 3552;
				await this.data_name();
				}
				break;
			case cobolParser.FILLER:
				{
				this.state = 3553;
				this.match(cobolParser.FILLER);
				}
				break;
			case cobolParser.BINARY:
			case cobolParser.BINARY_CHAR:
			case cobolParser.BINARY_DOUBLE:
			case cobolParser.BINARY_LONG:
			case cobolParser.BINARY_SHORT:
			case cobolParser.BLANK:
			case cobolParser.COMP:
			case cobolParser.COMPUTATIONAL:
			case cobolParser.COMPUTATIONAL_1:
			case cobolParser.COMPUTATIONAL_2:
			case cobolParser.COMPUTATIONAL_3:
			case cobolParser.COMPUTATIONAL_4:
			case cobolParser.COMPUTATIONAL_5:
			case cobolParser.COMPUTATIONAL_X:
			case cobolParser.COMP_1:
			case cobolParser.COMP_2:
			case cobolParser.COMP_3:
			case cobolParser.COMP_4:
			case cobolParser.COMP_5:
			case cobolParser.COMP_X:
			case cobolParser.DISPLAY:
			case cobolParser.EXTERNAL:
			case cobolParser.FLOAT_EXTENDED:
			case cobolParser.FLOAT_LONG:
			case cobolParser.FLOAT_SHORT:
			case cobolParser.GLOBAL:
			case cobolParser.INDEX:
			case cobolParser.IS:
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
			case cobolParser.LEADING:
			case cobolParser.OCCURS:
			case cobolParser.PACKED_DECIMAL:
			case cobolParser.POINTER:
			case cobolParser.POINTER_64:
			case cobolParser.REDEFINES:
			case cobolParser.RENAMES:
			case cobolParser.SIGN:
			case cobolParser.SYNC:
			case cobolParser.SYNCHRONIZED:
			case cobolParser.TRAILING:
			case cobolParser.USAGE:
			case cobolParser.VALUE:
			case cobolParser.VALUES:
			case cobolParser.PIC:
			case cobolParser.PICTURE:
			case cobolParser.DOT_:
				break;
			default:
				break;
			}
			this.state = 3558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REDEFINES) {
				{
				this.state = 3556;
				this.match(cobolParser.REDEFINES);
				this.state = 3557;
				await this.other_data_item();
				}
			}

			this.state = 3563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 39)) & ~0x1F) === 0 && ((1 << (_la - 39)) & ((1 << (cobolParser.BINARY - 39)) | (1 << (cobolParser.BINARY_CHAR - 39)) | (1 << (cobolParser.BINARY_DOUBLE - 39)) | (1 << (cobolParser.BINARY_LONG - 39)) | (1 << (cobolParser.BINARY_SHORT - 39)) | (1 << (cobolParser.BLANK - 39)) | (1 << (cobolParser.COMP - 39)) | (1 << (cobolParser.COMPUTATIONAL - 39)) | (1 << (cobolParser.COMPUTATIONAL_1 - 39)))) !== 0) || ((((_la - 71)) & ~0x1F) === 0 && ((1 << (_la - 71)) & ((1 << (cobolParser.COMPUTATIONAL_2 - 71)) | (1 << (cobolParser.COMPUTATIONAL_3 - 71)) | (1 << (cobolParser.COMPUTATIONAL_4 - 71)) | (1 << (cobolParser.COMPUTATIONAL_5 - 71)) | (1 << (cobolParser.COMPUTATIONAL_X - 71)) | (1 << (cobolParser.COMP_1 - 71)) | (1 << (cobolParser.COMP_2 - 71)) | (1 << (cobolParser.COMP_3 - 71)) | (1 << (cobolParser.COMP_4 - 71)) | (1 << (cobolParser.COMP_5 - 71)) | (1 << (cobolParser.COMP_X - 71)))) !== 0) || _la === cobolParser.DISPLAY || ((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (cobolParser.EXTERNAL - 172)) | (1 << (cobolParser.FLOAT_EXTENDED - 172)) | (1 << (cobolParser.FLOAT_LONG - 172)) | (1 << (cobolParser.FLOAT_SHORT - 172)) | (1 << (cobolParser.GLOBAL - 172)))) !== 0) || ((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & ((1 << (cobolParser.INDEX - 208)) | (1 << (cobolParser.IS - 208)) | (1 << (cobolParser.JUST - 208)) | (1 << (cobolParser.JUSTIFIED - 208)) | (1 << (cobolParser.LEADING - 208)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (cobolParser.OCCURS - 261)) | (1 << (cobolParser.PACKED_DECIMAL - 261)) | (1 << (cobolParser.POINTER - 261)) | (1 << (cobolParser.POINTER_64 - 261)))) !== 0) || _la === cobolParser.RENAMES || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (cobolParser.SIGN - 351)) | (1 << (cobolParser.SYNC - 351)) | (1 << (cobolParser.SYNCHRONIZED - 351)))) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & ((1 << (cobolParser.TRAILING - 393)) | (1 << (cobolParser.USAGE - 393)) | (1 << (cobolParser.VALUE - 393)) | (1 << (cobolParser.VALUES - 393)))) !== 0) || _la === cobolParser.PIC || _la === cobolParser.PICTURE) {
				{
				{
				this.state = 3560;
				await this.data_description_clause();
				}
				}
				this.state = 3565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3566;
			this.match(cobolParser.DOT_);
			this.state = 3570;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3567;
				await this.replace_statement();
				}
				}
				this.state = 3572;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async level_number() {
		let _localctx: Level_numberContext = new Level_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, cobolParser.RULE_level_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3573;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async data_description_clause() {
		let _localctx: Data_description_clauseContext = new Data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, cobolParser.RULE_data_description_clause);
		try {
			this.state = 3586;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 509, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3575;
				await this.is_external();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3576;
				await this.is_global();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3577;
				await this.picture();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3578;
				await this.usage();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3579;
				await this.sign_is();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3580;
				await this.occurs();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3581;
				await this.synchronized_lr();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3582;
				await this.justified();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3583;
				await this.black_when_zero();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3584;
				await this.value_is();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3585;
				await this.renames();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async synchronized_lr() {
		let _localctx: Synchronized_lrContext = new Synchronized_lrContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, cobolParser.RULE_synchronized_lr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3588;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.SYNC || _la === cobolParser.SYNCHRONIZED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 3590;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LEFT || _la === cobolParser.RIGHT) {
				{
				this.state = 3589;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LEFT || _la === cobolParser.RIGHT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async justified() {
		let _localctx: JustifiedContext = new JustifiedContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, cobolParser.RULE_justified);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3592;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 3594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RIGHT) {
				{
				this.state = 3593;
				this.match(cobolParser.RIGHT);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async black_when_zero() {
		let _localctx: Black_when_zeroContext = new Black_when_zeroContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, cobolParser.RULE_black_when_zero);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3596;
			this.match(cobolParser.BLANK);
			this.state = 3598;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WHEN) {
				{
				this.state = 3597;
				this.match(cobolParser.WHEN);
				}
			}

			this.state = 3600;
			this.match(cobolParser.ZERO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async renames() {
		let _localctx: RenamesContext = new RenamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, cobolParser.RULE_renames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3602;
			this.match(cobolParser.RENAMES);
			this.state = 3603;
			await this.rename_start();
			this.state = 3606;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.THROUGH || _la === cobolParser.THRU) {
				{
				this.state = 3604;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 3605;
				await this.rename_end();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rename_start() {
		let _localctx: Rename_startContext = new Rename_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, cobolParser.RULE_rename_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3608;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rename_end() {
		let _localctx: Rename_endContext = new Rename_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, cobolParser.RULE_rename_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3610;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async value_is() {
		let _localctx: Value_isContext = new Value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, cobolParser.RULE_value_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3620;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.VALUE:
				{
				this.state = 3612;
				this.match(cobolParser.VALUE);
				this.state = 3614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3613;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			case cobolParser.VALUES:
				{
				this.state = 3616;
				this.match(cobolParser.VALUES);
				this.state = 3618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ARE) {
					{
					this.state = 3617;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3623;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3622;
					await this.value_is_definition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3625;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 517, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async value_is_definition() {
		let _localctx: Value_is_definitionContext = new Value_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, cobolParser.RULE_value_is_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3627;
			await this.value_is_definition_part();
			this.state = 3629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.THROUGH || _la === cobolParser.THRU) {
				{
				this.state = 3628;
				await this.value_is_definition_thru();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async value_is_definition_part() {
		let _localctx: Value_is_definition_partContext = new Value_is_definition_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, cobolParser.RULE_value_is_definition_part);
		try {
			this.state = 3636;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3631;
				await this.value_is_literal();
				}
				break;
			case cobolParser.REFERENCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3632;
				this.match(cobolParser.REFERENCE);
				this.state = 3633;
				await this.ref_data_name();
				}
				break;
			case cobolParser.EXTERNAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3634;
				this.match(cobolParser.EXTERNAL);
				this.state = 3635;
				await this.external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async value_is_definition_thru() {
		let _localctx: Value_is_definition_thruContext = new Value_is_definition_thruContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, cobolParser.RULE_value_is_definition_thru);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3638;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 3639;
			await this.value_is_definition_part();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async external_name() {
		let _localctx: External_nameContext = new External_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, cobolParser.RULE_external_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3641;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async ref_data_name() {
		let _localctx: Ref_data_nameContext = new Ref_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, cobolParser.RULE_ref_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3643;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async value_is_literal() {
		let _localctx: Value_is_literalContext = new Value_is_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, cobolParser.RULE_value_is_literal);
		let _la: number;
		try {
			this.state = 3649;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3645;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3646;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3647;
				await this.figurative_constant();
				}
				break;
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3648;
				this.match(cobolParser.USER_DEFINED_WORD_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async occurs() {
		let _localctx: OccursContext = new OccursContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, cobolParser.RULE_occurs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3651;
			this.match(cobolParser.OCCURS);
			this.state = 3652;
			await this.times_definition();
			this.state = 3656;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING) {
				{
				{
				this.state = 3653;
				await this.key_is();
				}
				}
				this.state = 3658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3660;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INDEXED) {
				{
				this.state = 3659;
				await this.indexed_by();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async indexed_by() {
		let _localctx: Indexed_byContext = new Indexed_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, cobolParser.RULE_indexed_by);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3662;
			this.match(cobolParser.INDEXED);
			this.state = 3664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BY) {
				{
				this.state = 3663;
				this.match(cobolParser.BY);
				}
			}

			this.state = 3667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3666;
				await this.ind_name();
				}
				}
				this.state = 3669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async ind_name() {
		let _localctx: Ind_nameContext = new Ind_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, cobolParser.RULE_ind_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3671;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async key_is() {
		let _localctx: Key_isContext = new Key_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, cobolParser.RULE_key_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3673;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 3675;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 3674;
				this.match(cobolParser.KEY);
				}
			}

			this.state = 3678;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3677;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3680;
				await this.key_name();
				}
				}
				this.state = 3683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async key_name() {
		let _localctx: Key_nameContext = new Key_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, cobolParser.RULE_key_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3685;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async times_definition() {
		let _localctx: Times_definitionContext = new Times_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, cobolParser.RULE_times_definition);
		let _la: number;
		try {
			this.state = 3703;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 531, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3687;
				await this.table_size();
				this.state = 3689;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TIMES) {
					{
					this.state = 3688;
					this.match(cobolParser.TIMES);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3691;
				await this.min_times();
				this.state = 3692;
				this.match(cobolParser.TO);
				this.state = 3693;
				await this.max_times();
				this.state = 3695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TIMES) {
					{
					this.state = 3694;
					this.match(cobolParser.TIMES);
					}
				}

				this.state = 3697;
				this.match(cobolParser.DEPENDING);
				this.state = 3699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 3698;
					this.match(cobolParser.ON);
					}
				}

				this.state = 3701;
				await this.depending_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async table_size() {
		let _localctx: Table_sizeContext = new Table_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, cobolParser.RULE_table_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3705;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async min_times() {
		let _localctx: Min_timesContext = new Min_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, cobolParser.RULE_min_times);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3707;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async max_times() {
		let _localctx: Max_timesContext = new Max_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, cobolParser.RULE_max_times);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3709;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_group_data_description_entry() {
		let _localctx: Report_group_data_description_entryContext = new Report_group_data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, cobolParser.RULE_report_group_data_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3711;
			await this.level_number();
			this.state = 3713;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USER_DEFINED_WORD_) {
				{
				this.state = 3712;
				await this.data_name();
				}
			}

			this.state = 3718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.BLANK || _la === cobolParser.COLUMN || _la === cobolParser.DISPLAY || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (cobolParser.GROUP - 197)) | (1 << (cobolParser.JUST - 197)) | (1 << (cobolParser.JUSTIFIED - 197)) | (1 << (cobolParser.LEADING - 197)))) !== 0) || _la === cobolParser.LINE || _la === cobolParser.NEXT || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (cobolParser.SIGN - 351)) | (1 << (cobolParser.SOURCE - 351)) | (1 << (cobolParser.SUM - 351)))) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & ((1 << (cobolParser.TRAILING - 393)) | (1 << (cobolParser.TYPE - 393)) | (1 << (cobolParser.USAGE - 393)) | (1 << (cobolParser.VALUE - 393)))) !== 0) || _la === cobolParser.PIC || _la === cobolParser.PICTURE) {
				{
				{
				this.state = 3715;
				await this.report_group_data_description_clause();
				}
				}
				this.state = 3720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3721;
			this.match(cobolParser.DOT_);
			this.state = 3725;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 3722;
				await this.replace_statement();
				}
				}
				this.state = 3727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_group_data_description_clause() {
		let _localctx: Report_group_data_description_clauseContext = new Report_group_data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, cobolParser.RULE_report_group_data_description_clause);
		try {
			this.state = 3739;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3728;
				await this.rep_line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3729;
				await this.rep_next_group();
				}
				break;
			case cobolParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3730;
				await this.rep_type();
				}
				break;
			case cobolParser.DISPLAY:
			case cobolParser.USAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3731;
				await this.usage_display();
				}
				break;
			case cobolParser.BLANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3732;
				await this.black_when_zero();
				}
				break;
			case cobolParser.COLUMN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3733;
				await this.rep_column();
				}
				break;
			case cobolParser.GROUP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3734;
				await this.rep_group_ind();
				}
				break;
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3735;
				await this.justified();
				}
				break;
			case cobolParser.PIC:
			case cobolParser.PICTURE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3736;
				await this.picture();
				}
				break;
			case cobolParser.LEADING:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3737;
				await this.sign_is();
				}
				break;
			case cobolParser.SOURCE:
			case cobolParser.SUM:
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3738;
				await this.rep_source_sum_or_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_source_sum_or_value() {
		let _localctx: Rep_source_sum_or_valueContext = new Rep_source_sum_or_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, cobolParser.RULE_rep_source_sum_or_value);
		try {
			this.state = 3744;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SOURCE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3741;
				await this.rep_source();
				}
				break;
			case cobolParser.SUM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3742;
				await this.rep_sum();
				}
				break;
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3743;
				await this.rep_value_is();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_value_is() {
		let _localctx: Rep_value_isContext = new Rep_value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, cobolParser.RULE_rep_value_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3746;
			this.match(cobolParser.VALUE);
			this.state = 3748;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3747;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3750;
			await this.value_is_literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_source() {
		let _localctx: Rep_sourceContext = new Rep_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, cobolParser.RULE_rep_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3752;
			this.match(cobolParser.SOURCE);
			this.state = 3754;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3753;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3756;
			await this.source_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_group_ind() {
		let _localctx: Rep_group_indContext = new Rep_group_indContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, cobolParser.RULE_rep_group_ind);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3758;
			this.match(cobolParser.GROUP);
			this.state = 3760;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INDICATE) {
				{
				this.state = 3759;
				this.match(cobolParser.INDICATE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_column() {
		let _localctx: Rep_columnContext = new Rep_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, cobolParser.RULE_rep_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3762;
			this.match(cobolParser.COLUMN);
			this.state = 3764;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3763;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 3767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3766;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3769;
			await this.column_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async usage_display() {
		let _localctx: Usage_displayContext = new Usage_displayContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, cobolParser.RULE_usage_display);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3775;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 3771;
				this.match(cobolParser.USAGE);
				this.state = 3773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3772;
					this.match(cobolParser.IS);
					}
				}

				}
			}

			this.state = 3777;
			this.match(cobolParser.DISPLAY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type() {
		let _localctx: Rep_typeContext = new Rep_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, cobolParser.RULE_rep_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3779;
			this.match(cobolParser.TYPE);
			this.state = 3781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3780;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3783;
			await this.type_is_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_next_group() {
		let _localctx: Rep_next_groupContext = new Rep_next_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, cobolParser.RULE_rep_next_group);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3785;
			this.match(cobolParser.NEXT);
			this.state = 3786;
			this.match(cobolParser.GROUP);
			this.state = 3788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3787;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3790;
			await this.next_group_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_line_num() {
		let _localctx: Rep_line_numContext = new Rep_line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, cobolParser.RULE_rep_line_num);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3792;
			this.match(cobolParser.LINE);
			this.state = 3794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3793;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 3797;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3796;
				this.match(cobolParser.IS);
				}
			}

			this.state = 3799;
			await this.line_num_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sign_is() {
		let _localctx: Sign_isContext = new Sign_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, cobolParser.RULE_sign_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 3801;
				this.match(cobolParser.SIGN);
				this.state = 3803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3802;
					this.match(cobolParser.IS);
					}
				}

				}
			}

			this.state = 3807;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 3812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SEPARATE) {
				{
				this.state = 3808;
				this.match(cobolParser.SEPARATE);
				this.state = 3810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTER) {
					{
					this.state = 3809;
					this.match(cobolParser.CHARACTER);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_sum() {
		let _localctx: Rep_sumContext = new Rep_sumContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, cobolParser.RULE_rep_sum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3829;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3814;
					this.match(cobolParser.SUM);
					this.state = 3816;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 3815;
							await this.sum_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 3818;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					this.state = 3821;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.UPON) {
						{
						this.state = 3820;
						this.match(cobolParser.UPON);
						}
					}

					this.state = 3826;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === cobolParser.USER_DEFINED_WORD_) {
						{
						{
						this.state = 3823;
						await this.detail_report_group_name();
						}
						}
						this.state = 3828;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3831;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3838;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RESET) {
				{
				this.state = 3833;
				this.match(cobolParser.RESET);
				this.state = 3835;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 3834;
					this.match(cobolParser.ON);
					}
				}

				this.state = 3837;
				await this.control_foot_name();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async control_foot_name() {
		let _localctx: Control_foot_nameContext = new Control_foot_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, cobolParser.RULE_control_foot_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3840;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async detail_report_group_name() {
		let _localctx: Detail_report_group_nameContext = new Detail_report_group_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, cobolParser.RULE_detail_report_group_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3842;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sum_name() {
		let _localctx: Sum_nameContext = new Sum_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, cobolParser.RULE_sum_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3844;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async source_name() {
		let _localctx: Source_nameContext = new Source_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, cobolParser.RULE_source_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3846;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async column_number() {
		let _localctx: Column_numberContext = new Column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, cobolParser.RULE_column_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3848;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async type_is_definition() {
		let _localctx: Type_is_definitionContext = new Type_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, cobolParser.RULE_type_is_definition);
		try {
			this.state = 3857;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 558, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3850;
				await this.rep_type_rh();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3851;
				await this.rep_type_ph();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3852;
				await this.rep_type_ch();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3853;
				await this.rep_type_de();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3854;
				await this.rep_type_cf();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3855;
				await this.rep_type_pf();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3856;
				await this.rep_type_rf();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type_pf() {
		let _localctx: Rep_type_pfContext = new Rep_type_pfContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, cobolParser.RULE_rep_type_pf);
		try {
			this.state = 3862;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3859;
				this.match(cobolParser.PAGE);
				this.state = 3860;
				this.match(cobolParser.FOOTING);
				}
				break;
			case cobolParser.PF:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3861;
				this.match(cobolParser.PF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type_rf() {
		let _localctx: Rep_type_rfContext = new Rep_type_rfContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, cobolParser.RULE_rep_type_rf);
		try {
			this.state = 3867;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3864;
				this.match(cobolParser.REPORT);
				this.state = 3865;
				this.match(cobolParser.FOOTING);
				}
				break;
			case cobolParser.RF:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3866;
				this.match(cobolParser.RF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type_de() {
		let _localctx: Rep_type_deContext = new Rep_type_deContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, cobolParser.RULE_rep_type_de);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3869;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DE || _la === cobolParser.DETAIL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type_ch() {
		let _localctx: Rep_type_chContext = new Rep_type_chContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, cobolParser.RULE_rep_type_ch);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3874;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTROL:
				{
				this.state = 3871;
				this.match(cobolParser.CONTROL);
				this.state = 3872;
				this.match(cobolParser.HEADING);
				}
				break;
			case cobolParser.CH:
				{
				this.state = 3873;
				this.match(cobolParser.CH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3876;
			await this.type_control_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type_cf() {
		let _localctx: Rep_type_cfContext = new Rep_type_cfContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, cobolParser.RULE_rep_type_cf);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3881;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTROL:
				{
				this.state = 3878;
				this.match(cobolParser.CONTROL);
				this.state = 3879;
				this.match(cobolParser.FOOTING);
				}
				break;
			case cobolParser.CF:
				{
				this.state = 3880;
				this.match(cobolParser.CF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3883;
			await this.type_control_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type_rh() {
		let _localctx: Rep_type_rhContext = new Rep_type_rhContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, cobolParser.RULE_rep_type_rh);
		try {
			this.state = 3888;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3885;
				this.match(cobolParser.REPORT);
				this.state = 3886;
				this.match(cobolParser.HEADING);
				}
				break;
			case cobolParser.RH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3887;
				this.match(cobolParser.RH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rep_type_ph() {
		let _localctx: Rep_type_phContext = new Rep_type_phContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, cobolParser.RULE_rep_type_ph);
		try {
			this.state = 3893;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3890;
				this.match(cobolParser.PAGE);
				this.state = 3891;
				this.match(cobolParser.HEADING);
				}
				break;
			case cobolParser.PH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3892;
				this.match(cobolParser.PH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async type_control_name() {
		let _localctx: Type_control_nameContext = new Type_control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, cobolParser.RULE_type_control_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3895;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async next_group_definition() {
		let _localctx: Next_group_definitionContext = new Next_group_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, cobolParser.RULE_next_group_definition);
		try {
			this.state = 3902;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3897;
				await this.line_num();
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3898;
				this.match(cobolParser.PLUS);
				this.state = 3899;
				await this.line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3900;
				this.match(cobolParser.NEXT);
				this.state = 3901;
				this.match(cobolParser.PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async line_num_definition() {
		let _localctx: Line_num_definitionContext = new Line_num_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, cobolParser.RULE_line_num_definition);
		let _la: number;
		try {
			this.state = 3914;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3904;
				await this.line_num();
				this.state = 3910;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 567, this._ctx) ) {
				case 1:
					{
					this.state = 3906;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 3905;
						this.match(cobolParser.ON);
						}
					}

					this.state = 3908;
					this.match(cobolParser.NEXT);
					this.state = 3909;
					this.match(cobolParser.PAGE);
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3912;
				this.match(cobolParser.PLUS);
				this.state = 3913;
				await this.line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async line_num() {
		let _localctx: Line_numContext = new Line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, cobolParser.RULE_line_num);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3916;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rd_clause() {
		let _localctx: Rd_clauseContext = new Rd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, cobolParser.RULE_rd_clause);
		try {
			this.state = 3922;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.GLOBAL:
			case cobolParser.IS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3918;
				await this.is_global();
				}
				break;
			case cobolParser.CODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3919;
				await this.report_code();
				}
				break;
			case cobolParser.CONTROL:
			case cobolParser.CONTROLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3920;
				await this.report_control();
				}
				break;
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3921;
				await this.report_page();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_page() {
		let _localctx: Report_pageContext = new Report_pageContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, cobolParser.RULE_report_page);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3924;
			this.match(cobolParser.PAGE);
			this.state = 3933;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LIMIT:
				{
				this.state = 3925;
				this.match(cobolParser.LIMIT);
				this.state = 3927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3926;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			case cobolParser.LIMITS:
				{
				this.state = 3929;
				this.match(cobolParser.LIMITS);
				this.state = 3931;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ARE) {
					{
					this.state = 3930;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				break;
			default:
				break;
			}
			this.state = 3935;
			await this.page_size_rd();
			this.state = 3937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINE || _la === cobolParser.LINES) {
				{
				this.state = 3936;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			this.state = 3941;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.HEADING) {
				{
				this.state = 3939;
				this.match(cobolParser.HEADING);
				this.state = 3940;
				await this.heading_line();
				}
			}

			this.state = 3946;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FIRST) {
				{
				this.state = 3943;
				this.match(cobolParser.FIRST);
				this.state = 3944;
				this.match(cobolParser.DETAIL);
				this.state = 3945;
				await this.first_detail_line();
				}
			}

			this.state = 3951;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LAST) {
				{
				this.state = 3948;
				this.match(cobolParser.LAST);
				this.state = 3949;
				this.match(cobolParser.DETAIL);
				this.state = 3950;
				await this.last_detail_line();
				}
			}

			this.state = 3955;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOOTING) {
				{
				this.state = 3953;
				this.match(cobolParser.FOOTING);
				this.state = 3954;
				await this.footing_line_rd();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_control() {
		let _localctx: Report_controlContext = new Report_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, cobolParser.RULE_report_control);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3965;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTROL:
				{
				this.state = 3957;
				this.match(cobolParser.CONTROL);
				this.state = 3959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3958;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			case cobolParser.CONTROLS:
				{
				this.state = 3961;
				this.match(cobolParser.CONTROLS);
				this.state = 3963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ARE) {
					{
					this.state = 3962;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3979;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 3968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3967;
					await this.control_name();
					}
					}
					this.state = 3970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;
			case cobolParser.FINAL:
				{
				this.state = 3972;
				this.match(cobolParser.FINAL);
				this.state = 3976;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.USER_DEFINED_WORD_) {
					{
					{
					this.state = 3973;
					await this.control_name();
					}
					}
					this.state = 3978;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_code() {
		let _localctx: Report_codeContext = new Report_codeContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, cobolParser.RULE_report_code);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3981;
			this.match(cobolParser.CODE);
			this.state = 3982;
			this.match(cobolParser.STRING_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async footing_line_rd() {
		let _localctx: Footing_line_rdContext = new Footing_line_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, cobolParser.RULE_footing_line_rd);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3984;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async last_detail_line() {
		let _localctx: Last_detail_lineContext = new Last_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, cobolParser.RULE_last_detail_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3986;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async first_detail_line() {
		let _localctx: First_detail_lineContext = new First_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, cobolParser.RULE_first_detail_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3988;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async heading_line() {
		let _localctx: Heading_lineContext = new Heading_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, cobolParser.RULE_heading_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3990;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async page_size_rd() {
		let _localctx: Page_size_rdContext = new Page_size_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, cobolParser.RULE_page_size_rd);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3992;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async control_name() {
		let _localctx: Control_nameContext = new Control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, cobolParser.RULE_control_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3994;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async usage() {
		let _localctx: UsageContext = new UsageContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, cobolParser.RULE_usage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4000;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 3996;
				this.match(cobolParser.USAGE);
				this.state = 3998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3997;
					this.match(cobolParser.IS);
					}
				}

				}
			}

			this.state = 4002;
			await this.usage_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async usage_definition() {
		let _localctx: Usage_definitionContext = new Usage_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, cobolParser.RULE_usage_definition);
		let _la: number;
		try {
			this.state = 4043;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4004;
				this.match(cobolParser.BINARY);
				}
				break;
			case cobolParser.BINARY_CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4005;
				this.match(cobolParser.BINARY_CHAR);
				this.state = 4007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED) {
					{
					this.state = 4006;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					}
				}

				}
				break;
			case cobolParser.BINARY_SHORT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4009;
				this.match(cobolParser.BINARY_SHORT);
				this.state = 4011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED) {
					{
					this.state = 4010;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					}
				}

				}
				break;
			case cobolParser.BINARY_LONG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4013;
				this.match(cobolParser.BINARY_LONG);
				this.state = 4015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED) {
					{
					this.state = 4014;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					}
				}

				}
				break;
			case cobolParser.BINARY_DOUBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4017;
				this.match(cobolParser.BINARY_DOUBLE);
				this.state = 4019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED) {
					{
					this.state = 4018;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					}
				}

				}
				break;
			case cobolParser.COMPUTATIONAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4021;
				this.match(cobolParser.COMPUTATIONAL);
				}
				break;
			case cobolParser.COMPUTATIONAL_1:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4022;
				this.match(cobolParser.COMPUTATIONAL_1);
				}
				break;
			case cobolParser.COMPUTATIONAL_2:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4023;
				this.match(cobolParser.COMPUTATIONAL_2);
				}
				break;
			case cobolParser.COMPUTATIONAL_3:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4024;
				this.match(cobolParser.COMPUTATIONAL_3);
				}
				break;
			case cobolParser.COMPUTATIONAL_4:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4025;
				this.match(cobolParser.COMPUTATIONAL_4);
				}
				break;
			case cobolParser.COMPUTATIONAL_5:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4026;
				this.match(cobolParser.COMPUTATIONAL_5);
				}
				break;
			case cobolParser.COMPUTATIONAL_X:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4027;
				this.match(cobolParser.COMPUTATIONAL_X);
				}
				break;
			case cobolParser.COMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4028;
				this.match(cobolParser.COMP);
				}
				break;
			case cobolParser.COMP_1:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4029;
				this.match(cobolParser.COMP_1);
				}
				break;
			case cobolParser.COMP_2:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4030;
				this.match(cobolParser.COMP_2);
				}
				break;
			case cobolParser.COMP_3:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4031;
				this.match(cobolParser.COMP_3);
				}
				break;
			case cobolParser.COMP_4:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4032;
				this.match(cobolParser.COMP_4);
				}
				break;
			case cobolParser.COMP_5:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4033;
				this.match(cobolParser.COMP_5);
				}
				break;
			case cobolParser.COMP_X:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4034;
				this.match(cobolParser.COMP_X);
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4035;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.FLOAT_SHORT:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 4036;
				this.match(cobolParser.FLOAT_SHORT);
				}
				break;
			case cobolParser.FLOAT_LONG:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 4037;
				this.match(cobolParser.FLOAT_LONG);
				}
				break;
			case cobolParser.FLOAT_EXTENDED:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 4038;
				this.match(cobolParser.FLOAT_EXTENDED);
				}
				break;
			case cobolParser.INDEX:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 4039;
				this.match(cobolParser.INDEX);
				}
				break;
			case cobolParser.PACKED_DECIMAL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 4040;
				this.match(cobolParser.PACKED_DECIMAL);
				}
				break;
			case cobolParser.POINTER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 4041;
				this.match(cobolParser.POINTER);
				}
				break;
			case cobolParser.POINTER_64:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 4042;
				this.match(cobolParser.POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async picture() {
		let _localctx: PictureContext = new PictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, cobolParser.RULE_picture);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4045;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PIC || _la === cobolParser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 4047;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS || _la === cobolParser.IS_IN_PICTURE_) {
				{
				this.state = 4046;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.IS || _la === cobolParser.IS_IN_PICTURE_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			this.state = 4049;
			await this.character_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async character_string() {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, cobolParser.RULE_character_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4051;
			this.match(cobolParser.CHARACTER_STRING_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async other_data_item() {
		let _localctx: Other_data_itemContext = new Other_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, cobolParser.RULE_other_data_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4053;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async data_name() {
		let _localctx: Data_nameContext = new Data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, cobolParser.RULE_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4055;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sd_clause() {
		let _localctx: Sd_clauseContext = new Sd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, cobolParser.RULE_sd_clause);
		try {
			this.state = 4059;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4057;
				await this.record();
				}
				break;
			case cobolParser.DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4058;
				await this.data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_is() {
		let _localctx: Report_isContext = new Report_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, cobolParser.RULE_report_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4069;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				{
				this.state = 4061;
				this.match(cobolParser.REPORT);
				this.state = 4063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4062;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			case cobolParser.REPORTS:
				{
				this.state = 4065;
				this.match(cobolParser.REPORTS);
				this.state = 4067;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ARE) {
					{
					this.state = 4066;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4071;
				await this.report_name();
				}
				}
				this.state = 4074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async report_name() {
		let _localctx: Report_nameContext = new Report_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, cobolParser.RULE_report_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4076;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async linage() {
		let _localctx: LinageContext = new LinageContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, cobolParser.RULE_linage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4078;
			this.match(cobolParser.LINAGE);
			this.state = 4080;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4079;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4082;
			await this.page_size();
			this.state = 4084;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 598, this._ctx) ) {
			case 1:
				{
				this.state = 4083;
				this.match(cobolParser.LINES);
				}
				break;
			}
			this.state = 4094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOOTING || _la === cobolParser.WITH) {
				{
				this.state = 4087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4086;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 4089;
				this.match(cobolParser.FOOTING);
				this.state = 4091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 4090;
					this.match(cobolParser.AT);
					}
				}

				this.state = 4093;
				await this.footing_line();
				}
			}

			this.state = 4104;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 604, this._ctx) ) {
			case 1:
				{
				this.state = 4097;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 4096;
					this.match(cobolParser.LINES);
					}
				}

				this.state = 4100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 4099;
					this.match(cobolParser.AT);
					}
				}

				this.state = 4102;
				this.match(cobolParser.TOP);
				this.state = 4103;
				await this.top_lines();
				}
				break;
			}
			this.state = 4114;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT || _la === cobolParser.BOTTOM || _la === cobolParser.LINES) {
				{
				this.state = 4107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 4106;
					this.match(cobolParser.LINES);
					}
				}

				this.state = 4110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 4109;
					this.match(cobolParser.AT);
					}
				}

				this.state = 4112;
				this.match(cobolParser.BOTTOM);
				this.state = 4113;
				await this.bottom_lines();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async bottom_lines() {
		let _localctx: Bottom_linesContext = new Bottom_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, cobolParser.RULE_bottom_lines);
		let _la: number;
		try {
			this.state = 4118;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4116;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4117;
				await this.identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async top_lines() {
		let _localctx: Top_linesContext = new Top_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, cobolParser.RULE_top_lines);
		let _la: number;
		try {
			this.state = 4122;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4120;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4121;
				await this.identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async footing_line() {
		let _localctx: Footing_lineContext = new Footing_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, cobolParser.RULE_footing_line);
		let _la: number;
		try {
			this.state = 4126;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4124;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4125;
				await this.identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async page_size() {
		let _localctx: Page_sizeContext = new Page_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, cobolParser.RULE_page_size);
		let _la: number;
		try {
			this.state = 4130;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4128;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4129;
				await this.identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async data_rec() {
		let _localctx: Data_recContext = new Data_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, cobolParser.RULE_data_rec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4132;
			this.match(cobolParser.DATA);
			this.state = 4141;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 4133;
				this.match(cobolParser.RECORDS);
				this.state = 4135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ARE) {
					{
					this.state = 4134;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 4137;
				this.match(cobolParser.RECORD);
				this.state = 4139;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4138;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4143;
				await this.rec_name();
				}
				}
				this.state = 4146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rec_name() {
		let _localctx: Rec_nameContext = new Rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, cobolParser.RULE_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4148;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async value_of_id() {
		let _localctx: Value_of_idContext = new Value_of_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, cobolParser.RULE_value_of_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4150;
			this.match(cobolParser.VALUE);
			this.state = 4151;
			this.match(cobolParser.OF);
			this.state = 4152;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FILE_ID || _la === cobolParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 4154;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4153;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4156;
			await this.value_of_id_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async value_of_id_definition() {
		let _localctx: Value_of_id_definitionContext = new Value_of_id_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, cobolParser.RULE_value_of_id_definition);
		try {
			this.state = 4160;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4158;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4159;
				await this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async label() {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, cobolParser.RULE_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4162;
			this.match(cobolParser.LABEL);
			this.state = 4171;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 4163;
				this.match(cobolParser.RECORDS);
				this.state = 4165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ARE) {
					{
					this.state = 4164;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 4167;
				this.match(cobolParser.RECORD);
				this.state = 4169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4168;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4173;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.OMITTED || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async record() {
		let _localctx: RecordContext = new RecordContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, cobolParser.RULE_record);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4175;
			this.match(cobolParser.RECORD);
			this.state = 4176;
			await this.record_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async record_definition() {
		let _localctx: Record_definitionContext = new Record_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, cobolParser.RULE_record_definition);
		let _la: number;
		try {
			this.state = 4220;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTAINS:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTAINS) {
					{
					this.state = 4178;
					this.match(cobolParser.CONTAINS);
					}
				}

				this.state = 4184;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 622, this._ctx) ) {
				case 1:
					{
					this.state = 4181;
					await this.shortest_rec();
					this.state = 4182;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 4186;
				await this.longest_rec();
				this.state = 4188;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 4187;
					this.match(cobolParser.CHARACTERS);
					}
				}

				}
				break;
			case cobolParser.IS:
			case cobolParser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4190;
					this.match(cobolParser.IS);
					}
				}

				this.state = 4193;
				this.match(cobolParser.VARYING);
				this.state = 4195;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 4194;
					this.match(cobolParser.IN);
					}
				}

				this.state = 4198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIZE) {
					{
					this.state = 4197;
					this.match(cobolParser.SIZE);
					}
				}

				this.state = 4204;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM || _la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_) {
					{
					this.state = 4201;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FROM) {
						{
						this.state = 4200;
						this.match(cobolParser.FROM);
						}
					}

					this.state = 4203;
					await this.shortest_rec();
					}
				}

				this.state = 4208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 4206;
					this.match(cobolParser.TO);
					this.state = 4207;
					await this.longest_rec();
					}
				}

				this.state = 4211;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 4210;
					this.match(cobolParser.CHARACTERS);
					}
				}

				this.state = 4218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEPENDING) {
					{
					this.state = 4213;
					this.match(cobolParser.DEPENDING);
					this.state = 4215;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 4214;
						this.match(cobolParser.ON);
						}
					}

					this.state = 4217;
					await this.depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async depending_item() {
		let _localctx: Depending_itemContext = new Depending_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, cobolParser.RULE_depending_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4222;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async shortest_rec() {
		let _localctx: Shortest_recContext = new Shortest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, cobolParser.RULE_shortest_rec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4224;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async longest_rec() {
		let _localctx: Longest_recContext = new Longest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, cobolParser.RULE_longest_rec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4226;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async screen_description_entry() {
		let _localctx: Screen_description_entryContext = new Screen_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, cobolParser.RULE_screen_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4228;
			await this.level_number();
			this.state = 4231;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 4229;
				await this.data_name();
				}
				break;
			case cobolParser.FILLER:
				{
				this.state = 4230;
				this.match(cobolParser.FILLER);
				}
				break;
			case cobolParser.AUTO:
			case cobolParser.BACKGROUND_COLOR:
			case cobolParser.BELL:
			case cobolParser.BLANK:
			case cobolParser.BLINK:
			case cobolParser.COLUMN:
			case cobolParser.DISPLAY:
			case cobolParser.ERASE:
			case cobolParser.FOREGROUND_COLOR:
			case cobolParser.FULL:
			case cobolParser.HIGHLIGHT:
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
			case cobolParser.LEADING:
			case cobolParser.LINE:
			case cobolParser.LOWLIGHT:
			case cobolParser.REQUIRED:
			case cobolParser.REVERSE_VIDEO:
			case cobolParser.SECURE:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
			case cobolParser.UNDERLINE:
			case cobolParser.USAGE:
			case cobolParser.VALUE:
			case cobolParser.PIC:
			case cobolParser.PICTURE:
			case cobolParser.DOT_:
				break;
			default:
				break;
			}
			this.state = 4236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (cobolParser.AUTO - 33)) | (1 << (cobolParser.BACKGROUND_COLOR - 33)) | (1 << (cobolParser.BELL - 33)) | (1 << (cobolParser.BLANK - 33)) | (1 << (cobolParser.BLINK - 33)))) !== 0) || _la === cobolParser.COLUMN || _la === cobolParser.DISPLAY || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (cobolParser.ERASE - 163)) | (1 << (cobolParser.FOREGROUND_COLOR - 163)) | (1 << (cobolParser.FULL - 163)))) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & ((1 << (cobolParser.HIGHLIGHT - 199)) | (1 << (cobolParser.JUST - 199)) | (1 << (cobolParser.JUSTIFIED - 199)) | (1 << (cobolParser.LEADING - 199)))) !== 0) || _la === cobolParser.LINE || _la === cobolParser.LOWLIGHT || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & ((1 << (cobolParser.REQUIRED - 322)) | (1 << (cobolParser.REVERSE_VIDEO - 322)) | (1 << (cobolParser.SECURE - 322)) | (1 << (cobolParser.SIGN - 322)))) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & ((1 << (cobolParser.TRAILING - 393)) | (1 << (cobolParser.UNDERLINE - 393)) | (1 << (cobolParser.USAGE - 393)) | (1 << (cobolParser.VALUE - 393)))) !== 0) || _la === cobolParser.PIC || _la === cobolParser.PICTURE) {
				{
				{
				this.state = 4233;
				await this.screen_description_clause();
				}
				}
				this.state = 4238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4239;
			this.match(cobolParser.DOT_);
			this.state = 4243;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4240;
				await this.replace_statement();
				}
				}
				this.state = 4245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async screen_description_clause() {
		let _localctx: Screen_description_clauseContext = new Screen_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, cobolParser.RULE_screen_description_clause);
		try {
			this.state = 4267;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 637, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4246;
				await this.scr_blank();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4247;
				await this.scr_foreground();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4248;
				await this.scr_background();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4249;
				await this.scr_auto();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4250;
				await this.scr_secure();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4251;
				await this.scr_required();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4252;
				await this.usage_display();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4253;
				await this.sign_is();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4254;
				await this.scr_full();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4255;
				await this.scr_bell();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4256;
				await this.scr_blink();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4257;
				await this.scr_erase();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4258;
				await this.scr_light();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4259;
				await this.scr_reverse();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4260;
				await this.scr_underline();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4261;
				await this.scr_line();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4262;
				await this.scr_column();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4263;
				await this.scr_value();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4264;
				await this.black_when_zero();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4265;
				await this.justified();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 4266;
				await this.scr_picture();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_light() {
		let _localctx: Scr_lightContext = new Scr_lightContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, cobolParser.RULE_scr_light);
		try {
			this.state = 4271;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.HIGHLIGHT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4269;
				await this.scr_highlight();
				}
				break;
			case cobolParser.LOWLIGHT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4270;
				await this.scr_lowlight();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_picture() {
		let _localctx: Scr_pictureContext = new Scr_pictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, cobolParser.RULE_scr_picture);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4273;
			await this.picture();
			this.state = 4280;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USING:
				{
				this.state = 4274;
				await this.scr_pic_using();
				}
				break;
			case cobolParser.FROM:
				{
				this.state = 4275;
				await this.scr_pic_from();
				this.state = 4277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 4276;
					await this.scr_pic_to();
					}
				}

				}
				break;
			case cobolParser.TO:
				{
				this.state = 4279;
				await this.scr_pic_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_value() {
		let _localctx: Scr_valueContext = new Scr_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, cobolParser.RULE_scr_value);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4282;
			this.match(cobolParser.VALUE);
			this.state = 4284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4283;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4286;
			await this.nonnumeric_literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_column() {
		let _localctx: Scr_columnContext = new Scr_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, cobolParser.RULE_scr_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4288;
			this.match(cobolParser.COLUMN);
			this.state = 4290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 4289;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 4293;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4292;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4296;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PLUS) {
				{
				this.state = 4295;
				this.match(cobolParser.PLUS);
				}
			}

			this.state = 4298;
			await this.src_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_line() {
		let _localctx: Scr_lineContext = new Scr_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, cobolParser.RULE_scr_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4300;
			this.match(cobolParser.LINE);
			this.state = 4302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 4301;
				this.match(cobolParser.NUMBER);
				}
			}

			this.state = 4305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4304;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4308;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PLUS) {
				{
				this.state = 4307;
				this.match(cobolParser.PLUS);
				}
			}

			this.state = 4310;
			await this.src_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_underline() {
		let _localctx: Scr_underlineContext = new Scr_underlineContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, cobolParser.RULE_scr_underline);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4312;
			this.match(cobolParser.UNDERLINE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_reverse() {
		let _localctx: Scr_reverseContext = new Scr_reverseContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, cobolParser.RULE_scr_reverse);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4314;
			this.match(cobolParser.REVERSE_VIDEO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_lowlight() {
		let _localctx: Scr_lowlightContext = new Scr_lowlightContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, cobolParser.RULE_scr_lowlight);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4316;
			this.match(cobolParser.LOWLIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_highlight() {
		let _localctx: Scr_highlightContext = new Scr_highlightContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, cobolParser.RULE_scr_highlight);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4318;
			this.match(cobolParser.HIGHLIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_erase() {
		let _localctx: Scr_eraseContext = new Scr_eraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, cobolParser.RULE_scr_erase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4320;
			this.match(cobolParser.ERASE);
			this.state = 4321;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.EOL || _la === cobolParser.EOS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_blink() {
		let _localctx: Scr_blinkContext = new Scr_blinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, cobolParser.RULE_scr_blink);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4323;
			this.match(cobolParser.BLINK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_bell() {
		let _localctx: Scr_bellContext = new Scr_bellContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, cobolParser.RULE_scr_bell);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4325;
			this.match(cobolParser.BELL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_full() {
		let _localctx: Scr_fullContext = new Scr_fullContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, cobolParser.RULE_scr_full);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4327;
			this.match(cobolParser.FULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_required() {
		let _localctx: Scr_requiredContext = new Scr_requiredContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, cobolParser.RULE_scr_required);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4329;
			this.match(cobolParser.REQUIRED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_secure() {
		let _localctx: Scr_secureContext = new Scr_secureContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, cobolParser.RULE_scr_secure);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4331;
			this.match(cobolParser.SECURE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_auto() {
		let _localctx: Scr_autoContext = new Scr_autoContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, cobolParser.RULE_scr_auto);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4333;
			this.match(cobolParser.AUTO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_background() {
		let _localctx: Scr_backgroundContext = new Scr_backgroundContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, cobolParser.RULE_scr_background);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4335;
			this.match(cobolParser.BACKGROUND_COLOR);
			this.state = 4337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4336;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4339;
			await this.color_num();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_foreground() {
		let _localctx: Scr_foregroundContext = new Scr_foregroundContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, cobolParser.RULE_scr_foreground);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4341;
			this.match(cobolParser.FOREGROUND_COLOR);
			this.state = 4343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4342;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4345;
			await this.color_num();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_blank() {
		let _localctx: Scr_blankContext = new Scr_blankContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, cobolParser.RULE_scr_blank);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4347;
			this.match(cobolParser.BLANK);
			this.state = 4348;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_pic_using() {
		let _localctx: Scr_pic_usingContext = new Scr_pic_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, cobolParser.RULE_scr_pic_using);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4350;
			this.match(cobolParser.USING);
			this.state = 4351;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_pic_from() {
		let _localctx: Scr_pic_fromContext = new Scr_pic_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, cobolParser.RULE_scr_pic_from);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4353;
			this.match(cobolParser.FROM);
			this.state = 4356;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 4354;
				await this.identifier_result();
				}
				break;
			case cobolParser.STRING_LITERAL_:
				{
				this.state = 4355;
				await this.nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async scr_pic_to() {
		let _localctx: Scr_pic_toContext = new Scr_pic_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, cobolParser.RULE_scr_pic_to);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4358;
			this.match(cobolParser.TO);
			this.state = 4359;
			await this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async nonnumeric_literal() {
		let _localctx: Nonnumeric_literalContext = new Nonnumeric_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, cobolParser.RULE_nonnumeric_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4361;
			this.match(cobolParser.STRING_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async src_number() {
		let _localctx: Src_numberContext = new Src_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, cobolParser.RULE_src_number);
		let _la: number;
		try {
			this.state = 4365;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4363;
				await this.identifier_result();
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4364;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async color_num() {
		let _localctx: Color_numContext = new Color_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, cobolParser.RULE_color_num);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4367;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async program_id() {
		let _localctx: Program_idContext = new Program_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, cobolParser.RULE_program_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4369;
			this.match(cobolParser.PROGRAM_ID);
			this.state = 4370;
			this.match(cobolParser.DOT_);
			this.state = 4374;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4371;
				await this.replace_statement();
				}
				}
				this.state = 4376;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4377;
			await this.program_name();
			this.state = 4379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COMMON || _la === cobolParser.INITIAL || _la === cobolParser.IS) {
				{
				this.state = 4378;
				await this.common_initial();
				}
			}

			this.state = 4382;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IDENT || _la === cobolParser.WITH) {
				{
				this.state = 4381;
				await this.with_ident();
				}
			}

			this.state = 4384;
			this.match(cobolParser.DOT_);
			this.state = 4388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4385;
				await this.replace_statement();
				}
				}
				this.state = 4390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async program_name() {
		let _localctx: Program_nameContext = new Program_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, cobolParser.RULE_program_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4391;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async common_initial() {
		let _localctx: Common_initialContext = new Common_initialContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, cobolParser.RULE_common_initial);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4394;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4393;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4404;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.COMMON:
				{
				this.state = 4396;
				this.match(cobolParser.COMMON);
				this.state = 4398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.INITIAL) {
					{
					this.state = 4397;
					this.match(cobolParser.INITIAL);
					}
				}

				}
				break;
			case cobolParser.INITIAL:
				{
				this.state = 4400;
				this.match(cobolParser.INITIAL);
				this.state = 4402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.COMMON) {
					{
					this.state = 4401;
					this.match(cobolParser.COMMON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4407;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 4406;
				this.match(cobolParser.PROGRAM);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_ident() {
		let _localctx: With_identContext = new With_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, cobolParser.RULE_with_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4410;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 4409;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 4412;
			this.match(cobolParser.IDENT);
			this.state = 4413;
			await this.ident_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async ident_string() {
		let _localctx: Ident_stringContext = new Ident_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 758, cobolParser.RULE_ident_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4415;
			this.match(cobolParser.STRING_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async installation() {
		let _localctx: InstallationContext = new InstallationContext(this._ctx, this.state);
		this.enterRule(_localctx, 760, cobolParser.RULE_installation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4417;
			this.match(cobolParser.INSTALLATION);
			this.state = 4418;
			this.match(cobolParser.DOT_);
			this.state = 4422;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 662, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4419;
					await this.word_in_area_B();
					}
					}
				}
				this.state = 4424;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 662, this._ctx);
			}
			this.state = 4428;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4425;
				await this.replace_statement();
				}
				}
				this.state = 4430;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async date_written() {
		let _localctx: Date_writtenContext = new Date_writtenContext(this._ctx, this.state);
		this.enterRule(_localctx, 762, cobolParser.RULE_date_written);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4431;
			this.match(cobolParser.DATE_WRITTEN);
			this.state = 4432;
			this.match(cobolParser.DOT_);
			this.state = 4436;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 664, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4433;
					await this.word_in_area_B();
					}
					}
				}
				this.state = 4438;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 664, this._ctx);
			}
			this.state = 4442;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4439;
				await this.replace_statement();
				}
				}
				this.state = 4444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async date_compiled() {
		let _localctx: Date_compiledContext = new Date_compiledContext(this._ctx, this.state);
		this.enterRule(_localctx, 764, cobolParser.RULE_date_compiled);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4445;
			this.match(cobolParser.DATE_COMPILED);
			this.state = 4446;
			this.match(cobolParser.DOT_);
			this.state = 4450;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 666, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4447;
					await this.word_in_area_B();
					}
					}
				}
				this.state = 4452;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 666, this._ctx);
			}
			this.state = 4456;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4453;
				await this.replace_statement();
				}
				}
				this.state = 4458;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async security() {
		let _localctx: SecurityContext = new SecurityContext(this._ctx, this.state);
		this.enterRule(_localctx, 766, cobolParser.RULE_security);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4459;
			this.match(cobolParser.SECURITY);
			this.state = 4460;
			this.match(cobolParser.DOT_);
			this.state = 4464;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 668, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4461;
					await this.word_in_area_B();
					}
					}
				}
				this.state = 4466;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 668, this._ctx);
			}
			this.state = 4470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4467;
				await this.replace_statement();
				}
				}
				this.state = 4472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async options_() {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 768, cobolParser.RULE_options_);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4473;
			this.match(cobolParser.OPTIONS);
			this.state = 4474;
			this.match(cobolParser.DOT_);
			this.state = 4478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4475;
				await this.replace_statement();
				}
				}
				this.state = 4480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4482;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARITHMETIC) {
				{
				this.state = 4481;
				await this.arithmetic();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async arithmetic() {
		let _localctx: ArithmeticContext = new ArithmeticContext(this._ctx, this.state);
		this.enterRule(_localctx, 770, cobolParser.RULE_arithmetic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4484;
			this.match(cobolParser.ARITHMETIC);
			this.state = 4486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4485;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4488;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NATIVE || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 4489;
			this.match(cobolParser.DOT_);
			this.state = 4493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4490;
				await this.replace_statement();
				}
				}
				this.state = 4495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async configuration_section() {
		let _localctx: Configuration_sectionContext = new Configuration_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 772, cobolParser.RULE_configuration_section);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4496;
			this.match(cobolParser.CONFIGURATION);
			this.state = 4497;
			this.match(cobolParser.SECTION);
			this.state = 4498;
			this.match(cobolParser.DOT_);
			this.state = 4502;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4499;
				await this.replace_statement();
				}
				}
				this.state = 4504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SOURCE_COMPUTER) {
				{
				this.state = 4505;
				await this.source_computer();
				}
			}

			this.state = 4509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OBJECT_COMPUTER) {
				{
				this.state = 4508;
				await this.object_computer();
				}
			}

			this.state = 4512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SPECIAL_NAMES) {
				{
				this.state = 4511;
				await this.special_names();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async input_output_section() {
		let _localctx: Input_output_sectionContext = new Input_output_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 774, cobolParser.RULE_input_output_section);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4514;
			this.match(cobolParser.INPUT_OUTPUT);
			this.state = 4515;
			this.match(cobolParser.SECTION);
			this.state = 4516;
			this.match(cobolParser.DOT_);
			this.state = 4520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4517;
				await this.replace_statement();
				}
				}
				this.state = 4522;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE_CONTROL) {
				{
				this.state = 4523;
				await this.file_control();
				}
			}

			this.state = 4527;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.I_O_CONTROL) {
				{
				this.state = 4526;
				await this.i_o_control();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async source_computer() {
		let _localctx: Source_computerContext = new Source_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 776, cobolParser.RULE_source_computer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4529;
			this.match(cobolParser.SOURCE_COMPUTER);
			this.state = 4530;
			this.match(cobolParser.DOT_);
			this.state = 4534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4531;
				await this.replace_statement();
				}
				}
				this.state = 4536;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4548;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD_) {
				{
				this.state = 4537;
				await this.computer_type();
				this.state = 4539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEBUGGING || _la === cobolParser.WITH) {
					{
					this.state = 4538;
					await this.with_debugging();
					}
				}

				this.state = 4541;
				this.match(cobolParser.DOT_);
				this.state = 4545;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.REPLACE) {
					{
					{
					this.state = 4542;
					await this.replace_statement();
					}
					}
					this.state = 4547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async computer_type() {
		let _localctx: Computer_typeContext = new Computer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 778, cobolParser.RULE_computer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4550;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async with_debugging() {
		let _localctx: With_debuggingContext = new With_debuggingContext(this._ctx, this.state);
		this.enterRule(_localctx, 780, cobolParser.RULE_with_debugging);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4553;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 4552;
				this.match(cobolParser.WITH);
				}
			}

			this.state = 4555;
			this.match(cobolParser.DEBUGGING);
			this.state = 4556;
			this.match(cobolParser.MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async object_computer() {
		let _localctx: Object_computerContext = new Object_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 782, cobolParser.RULE_object_computer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4558;
			this.match(cobolParser.OBJECT_COMPUTER);
			this.state = 4559;
			this.match(cobolParser.DOT_);
			this.state = 4563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4560;
				await this.replace_statement();
				}
				}
				this.state = 4565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD_) {
				{
				this.state = 4566;
				await this.computer_type();
				this.state = 4568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MEMORY) {
					{
					this.state = 4567;
					await this.memory_size();
					}
				}

				this.state = 4571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.COLLATING || _la === cobolParser.PROGRAM || _la === cobolParser.SEQUENCE) {
					{
					this.state = 4570;
					await this.program_collating();
					}
				}

				this.state = 4574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SEGMENT_LIMIT) {
					{
					this.state = 4573;
					await this.segment_limit();
					}
				}

				this.state = 4576;
				this.match(cobolParser.DOT_);
				this.state = 4580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.REPLACE) {
					{
					{
					this.state = 4577;
					await this.replace_statement();
					}
					}
					this.state = 4582;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async memory_size() {
		let _localctx: Memory_sizeContext = new Memory_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 784, cobolParser.RULE_memory_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4585;
			this.match(cobolParser.MEMORY);
			this.state = 4587;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIZE) {
				{
				this.state = 4586;
				this.match(cobolParser.SIZE);
				}
			}

			this.state = 4589;
			await this.memory_size_amount();
			this.state = 4590;
			await this.memory_size_unit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async memory_size_amount() {
		let _localctx: Memory_size_amountContext = new Memory_size_amountContext(this._ctx, this.state);
		this.enterRule(_localctx, 786, cobolParser.RULE_memory_size_amount);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4592;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async memory_size_unit() {
		let _localctx: Memory_size_unitContext = new Memory_size_unitContext(this._ctx, this.state);
		this.enterRule(_localctx, 788, cobolParser.RULE_memory_size_unit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4594;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.MODULES || _la === cobolParser.WORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async program_collating() {
		let _localctx: Program_collatingContext = new Program_collatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 790, cobolParser.RULE_program_collating);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4597;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 4596;
				this.match(cobolParser.PROGRAM);
				}
			}

			this.state = 4600;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING) {
				{
				this.state = 4599;
				this.match(cobolParser.COLLATING);
				}
			}

			this.state = 4602;
			this.match(cobolParser.SEQUENCE);
			this.state = 4604;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4603;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4606;
			await this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async alpha_name() {
		let _localctx: Alpha_nameContext = new Alpha_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 792, cobolParser.RULE_alpha_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4608;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async segment_limit() {
		let _localctx: Segment_limitContext = new Segment_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 794, cobolParser.RULE_segment_limit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4610;
			this.match(cobolParser.SEGMENT_LIMIT);
			this.state = 4612;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4611;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4614;
			await this.segment_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async segment_number() {
		let _localctx: Segment_numberContext = new Segment_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 796, cobolParser.RULE_segment_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4616;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async special_names() {
		let _localctx: Special_namesContext = new Special_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 798, cobolParser.RULE_special_names);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4618;
			this.match(cobolParser.SPECIAL_NAMES);
			this.state = 4619;
			this.match(cobolParser.DOT_);
			this.state = 4623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4620;
				await this.replace_statement();
				}
				}
				this.state = 4625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4634;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (cobolParser.C01 - 51)) | (1 << (cobolParser.CARD_READER - 51)) | (1 << (cobolParser.CLASS - 51)))) !== 0) || ((((_la - 84)) & ~0x1F) === 0 && ((1 << (_la - 84)) & ((1 << (cobolParser.CONSOLE - 84)) | (1 << (cobolParser.CRT - 84)) | (1 << (cobolParser.CURRENCY - 84)) | (1 << (cobolParser.CURSOR - 84)) | (1 << (cobolParser.DECIMAL_POINT - 84)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & ((1 << (cobolParser.SWITCH - 372)) | (1 << (cobolParser.SWITCH_N_ - 372)) | (1 << (cobolParser.SYMBOLIC - 372)) | (1 << (cobolParser.SYSERR - 372)) | (1 << (cobolParser.SYSIN - 372)) | (1 << (cobolParser.SYSOUT - 372)))) !== 0) || _la === cobolParser.DOT_) {
				{
				this.state = 4626;
				await this.special_names_content();
				this.state = 4627;
				this.match(cobolParser.DOT_);
				this.state = 4631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.REPLACE) {
					{
					{
					this.state = 4628;
					await this.replace_statement();
					}
					}
					this.state = 4633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async special_names_content() {
		let _localctx: Special_names_contentContext = new Special_names_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 800, cobolParser.RULE_special_names_content);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & ((1 << (cobolParser.ARGUMENT_NUMBER - 25)) | (1 << (cobolParser.ARGUMENT_VALUE - 25)) | (1 << (cobolParser.C01 - 25)) | (1 << (cobolParser.CARD_READER - 25)))) !== 0) || _la === cobolParser.CONSOLE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & ((1 << (cobolParser.SWITCH - 372)) | (1 << (cobolParser.SWITCH_N_ - 372)) | (1 << (cobolParser.SYSERR - 372)) | (1 << (cobolParser.SYSIN - 372)) | (1 << (cobolParser.SYSOUT - 372)))) !== 0)) {
				{
				this.state = 4638;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.ARGUMENT_NUMBER:
				case cobolParser.ARGUMENT_VALUE:
				case cobolParser.C01:
				case cobolParser.CARD_READER:
				case cobolParser.CONSOLE:
				case cobolParser.ENVIRONMENT_NAME:
				case cobolParser.ENVIRONMENT_VALUE:
				case cobolParser.LINE_PRINTER:
				case cobolParser.PAPER_TAPE_PUNCH:
				case cobolParser.PAPER_TAPE_READER:
				case cobolParser.SYSERR:
				case cobolParser.SYSIN:
				case cobolParser.SYSOUT:
					{
					this.state = 4636;
					await this.predefined_name_relation();
					}
					break;
				case cobolParser.SWITCH:
				case cobolParser.SWITCH_N_:
					{
					this.state = 4637;
					await this.switch_definition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 4642;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4646;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ALPHABET) {
				{
				{
				this.state = 4643;
				await this.alphabet();
				}
				}
				this.state = 4648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4652;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SYMBOLIC) {
				{
				{
				this.state = 4649;
				await this.symbolic_chars();
				}
				}
				this.state = 4654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4658;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.CLASS) {
				{
				{
				this.state = 4655;
				await this.class_();
				}
				}
				this.state = 4660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.CURRENCY) {
				{
				{
				this.state = 4661;
				await this.currency();
				}
				}
				this.state = 4666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DECIMAL_POINT) {
				{
				this.state = 4667;
				this.match(cobolParser.DECIMAL_POINT);
				this.state = 4669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4668;
					this.match(cobolParser.IS);
					}
				}

				this.state = 4671;
				this.match(cobolParser.COMMA);
				}
			}

			this.state = 4675;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CURSOR) {
				{
				this.state = 4674;
				await this.cursor_is();
				}
			}

			this.state = 4678;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CRT) {
				{
				this.state = 4677;
				await this.crt_is();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async cursor_is() {
		let _localctx: Cursor_isContext = new Cursor_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 802, cobolParser.RULE_cursor_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4680;
			this.match(cobolParser.CURSOR);
			this.state = 4682;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4681;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4684;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async crt_is() {
		let _localctx: Crt_isContext = new Crt_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 804, cobolParser.RULE_crt_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4686;
			this.match(cobolParser.CRT);
			this.state = 4687;
			this.match(cobolParser.STATUS);
			this.state = 4689;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4688;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4691;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async predefined_name_relation() {
		let _localctx: Predefined_name_relationContext = new Predefined_name_relationContext(this._ctx, this.state);
		this.enterRule(_localctx, 806, cobolParser.RULE_predefined_name_relation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4693;
			await this.predefined_name();
			this.state = 4695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4694;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4697;
			await this.user_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async predefined_name() {
		let _localctx: Predefined_nameContext = new Predefined_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 808, cobolParser.RULE_predefined_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4699;
			_la = this._input.LA(1);
			if (!(((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & ((1 << (cobolParser.ARGUMENT_NUMBER - 25)) | (1 << (cobolParser.ARGUMENT_VALUE - 25)) | (1 << (cobolParser.C01 - 25)) | (1 << (cobolParser.CARD_READER - 25)))) !== 0) || _la === cobolParser.CONSOLE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & ((1 << (cobolParser.SYSERR - 378)) | (1 << (cobolParser.SYSIN - 378)) | (1 << (cobolParser.SYSOUT - 378)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async switch_definition() {
		let _localctx: Switch_definitionContext = new Switch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 810, cobolParser.RULE_switch_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4704;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SWITCH:
				{
				this.state = 4701;
				this.match(cobolParser.SWITCH);
				this.state = 4702;
				await this.switch_num();
				}
				break;
			case cobolParser.SWITCH_N_:
				{
				this.state = 4703;
				this.match(cobolParser.SWITCH_N_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS || _la === cobolParser.USER_DEFINED_WORD_) {
				{
				this.state = 4707;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4706;
					this.match(cobolParser.IS);
					}
				}

				this.state = 4709;
				await this.switch_name();
				}
			}

			this.state = 4720;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
				{
				this.state = 4712;
				await this.switch_clause_on();
				this.state = 4714;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OFF) {
					{
					this.state = 4713;
					await this.switch_clause_off();
					}
				}

				}
				break;
			case cobolParser.OFF:
				{
				this.state = 4716;
				await this.switch_clause_off();
				this.state = 4718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 4717;
					await this.switch_clause_on();
					}
				}

				}
				break;
			case cobolParser.ALPHABET:
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.C01:
			case cobolParser.CARD_READER:
			case cobolParser.CLASS:
			case cobolParser.CONSOLE:
			case cobolParser.CRT:
			case cobolParser.CURRENCY:
			case cobolParser.CURSOR:
			case cobolParser.DECIMAL_POINT:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SWITCH:
			case cobolParser.SWITCH_N_:
			case cobolParser.SYMBOLIC:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
			case cobolParser.DOT_:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async switch_clause_on() {
		let _localctx: Switch_clause_onContext = new Switch_clause_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 812, cobolParser.RULE_switch_clause_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4722;
			this.match(cobolParser.ON);
			this.state = 4724;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 4723;
				this.match(cobolParser.STATUS);
				}
			}

			this.state = 4727;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4726;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4729;
			await this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async switch_clause_off() {
		let _localctx: Switch_clause_offContext = new Switch_clause_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 814, cobolParser.RULE_switch_clause_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4731;
			this.match(cobolParser.OFF);
			this.state = 4733;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 4732;
				this.match(cobolParser.STATUS);
				}
			}

			this.state = 4736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4735;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4738;
			await this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async cond_name() {
		let _localctx: Cond_nameContext = new Cond_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 816, cobolParser.RULE_cond_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4740;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async switch_name() {
		let _localctx: Switch_nameContext = new Switch_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 818, cobolParser.RULE_switch_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4742;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async switch_num() {
		let _localctx: Switch_numContext = new Switch_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 820, cobolParser.RULE_switch_num);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4744;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async qualified_data_item() {
		let _localctx: Qualified_data_itemContext = new Qualified_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 822, cobolParser.RULE_qualified_data_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4746;
			this.match(cobolParser.USER_DEFINED_WORD_);
			this.state = 4751;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 723, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4747;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.IN || _la === cobolParser.OF)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					this.state = 4748;
					this.match(cobolParser.USER_DEFINED_WORD_);
					}
					}
				}
				this.state = 4753;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 723, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async currency() {
		let _localctx: CurrencyContext = new CurrencyContext(this._ctx, this.state);
		this.enterRule(_localctx, 824, cobolParser.RULE_currency);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4754;
			this.match(cobolParser.CURRENCY);
			this.state = 4756;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 4755;
				this.match(cobolParser.SIGN);
				}
			}

			this.state = 4759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4758;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4761;
			await this.currency_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async currency_definition() {
		let _localctx: Currency_definitionContext = new Currency_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 826, cobolParser.RULE_currency_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4770;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 727, this._ctx) ) {
			case 1:
				{
				this.state = 4763;
				await this.currency_string();
				this.state = 4765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4764;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 4767;
				this.match(cobolParser.PICTURE);
				this.state = 4768;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.SYMBOL || _la === cobolParser.SYMBOL_IN_PICTURE_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			}
			this.state = 4772;
			await this.currency_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async currency_string() {
		let _localctx: Currency_stringContext = new Currency_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 828, cobolParser.RULE_currency_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4774;
			this.match(cobolParser.STRING_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async currency_char() {
		let _localctx: Currency_charContext = new Currency_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 830, cobolParser.RULE_currency_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4776;
			this.match(cobolParser.STRING_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async class_() {
		let _localctx: Class_Context = new Class_Context(this._ctx, this.state);
		this.enterRule(_localctx, 832, cobolParser.RULE_class_);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4778;
			this.match(cobolParser.CLASS);
			this.state = 4779;
			await this.class_name();
			this.state = 4781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4780;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4784;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4783;
				await this.user_class();
				}
				}
				this.state = 4786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async class_name() {
		let _localctx: Class_nameContext = new Class_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 834, cobolParser.RULE_class_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4788;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async user_class() {
		let _localctx: User_classContext = new User_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 836, cobolParser.RULE_user_class);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4790;
			await this.first_literal();
			this.state = 4793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.THROUGH || _la === cobolParser.THRU) {
				{
				this.state = 4791;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 4792;
				await this.last_literal();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async symbolic_chars() {
		let _localctx: Symbolic_charsContext = new Symbolic_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 838, cobolParser.RULE_symbolic_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4795;
			this.match(cobolParser.SYMBOLIC);
			this.state = 4797;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTERS) {
				{
				this.state = 4796;
				this.match(cobolParser.CHARACTERS);
				}
			}

			this.state = 4800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4799;
				await this.symb_ch_definition();
				}
				}
				this.state = 4802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async symb_ch_definition() {
		let _localctx: Symb_ch_definitionContext = new Symb_ch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 840, cobolParser.RULE_symb_ch_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4805;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4804;
					await this.symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4807;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 733, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 4809;
				await this.symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async symb_ch_def_clause() {
		let _localctx: Symb_ch_def_clauseContext = new Symb_ch_def_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 842, cobolParser.RULE_symb_ch_def_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4813;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4812;
				await this.symbol_char();
				}
				}
				this.state = 4815;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			this.state = 4818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARE || _la === cobolParser.IS) {
				{
				this.state = 4817;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ARE || _la === cobolParser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			this.state = 4821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4820;
				await this.char_val();
				}
				}
				this.state = 4823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async symb_ch_def_in_alphabet() {
		let _localctx: Symb_ch_def_in_alphabetContext = new Symb_ch_def_in_alphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 844, cobolParser.RULE_symb_ch_def_in_alphabet);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4825;
			this.match(cobolParser.IN);
			this.state = 4826;
			await this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async symbol_char() {
		let _localctx: Symbol_charContext = new Symbol_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 846, cobolParser.RULE_symbol_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4828;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async char_val() {
		let _localctx: Char_valContext = new Char_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 848, cobolParser.RULE_char_val);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4830;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async alphabet() {
		let _localctx: AlphabetContext = new AlphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 850, cobolParser.RULE_alphabet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4832;
			this.match(cobolParser.ALPHABET);
			this.state = 4833;
			await this.alpha_name();
			this.state = 4835;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4834;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4837;
			await this.alpha_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async alpha_value() {
		let _localctx: Alpha_valueContext = new Alpha_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 852, cobolParser.RULE_alpha_value);
		let _la: number;
		try {
			this.state = 4849;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ASCII:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4839;
				this.match(cobolParser.ASCII);
				}
				break;
			case cobolParser.STANDARD_1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4840;
				this.match(cobolParser.STANDARD_1);
				}
				break;
			case cobolParser.STANDARD_2:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4841;
				this.match(cobolParser.STANDARD_2);
				}
				break;
			case cobolParser.NATIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4842;
				this.match(cobolParser.NATIVE);
				}
				break;
			case cobolParser.EBCDIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4843;
				this.match(cobolParser.EBCDIC);
				}
				break;
			case cobolParser.STRING_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4845;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4844;
					await this.user_alpha();
					}
					}
					this.state = 4847;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async user_alpha() {
		let _localctx: User_alphaContext = new User_alphaContext(this._ctx, this.state);
		this.enterRule(_localctx, 854, cobolParser.RULE_user_alpha);
		let _la: number;
		try {
			this.state = 4863;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 743, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4851;
				await this.first_literal();
				this.state = 4854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.THROUGH || _la === cobolParser.THRU) {
					{
					this.state = 4852;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					this.state = 4853;
					await this.last_literal();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4856;
				await this.first_literal();
				this.state = 4859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4857;
					this.match(cobolParser.ALSO);
					this.state = 4858;
					await this.same_literal();
					}
					}
					this.state = 4861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.ALSO);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async first_literal() {
		let _localctx: First_literalContext = new First_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 856, cobolParser.RULE_first_literal);
		let _la: number;
		try {
			this.state = 4867;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4865;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4866;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async last_literal() {
		let _localctx: Last_literalContext = new Last_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 858, cobolParser.RULE_last_literal);
		let _la: number;
		try {
			this.state = 4871;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4869;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4870;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async same_literal() {
		let _localctx: Same_literalContext = new Same_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 860, cobolParser.RULE_same_literal);
		let _la: number;
		try {
			this.state = 4875;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4873;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4874;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async top_of_page_name() {
		let _localctx: Top_of_page_nameContext = new Top_of_page_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 862, cobolParser.RULE_top_of_page_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4877;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async user_name() {
		let _localctx: User_nameContext = new User_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 864, cobolParser.RULE_user_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4879;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_control() {
		let _localctx: File_controlContext = new File_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 866, cobolParser.RULE_file_control);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4881;
			this.match(cobolParser.FILE_CONTROL);
			this.state = 4882;
			this.match(cobolParser.DOT_);
			this.state = 4886;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4883;
				await this.replace_statement();
				}
				}
				this.state = 4888;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4892;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SELECT) {
				{
				{
				this.state = 4889;
				await this.select();
				}
				}
				this.state = 4894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async select() {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 868, cobolParser.RULE_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4895;
			this.match(cobolParser.SELECT);
			this.state = 4897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONAL) {
				{
				this.state = 4896;
				this.match(cobolParser.OPTIONAL);
				}
			}

			this.state = 4899;
			await this.file_name();
			this.state = 4901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4900;
				await this.select_clause();
				}
				}
				this.state = 4903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCESS) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.ASSIGN))) !== 0) || _la === cobolParser.BLOCK || _la === cobolParser.CODE_SET || _la === cobolParser.DYNAMIC || _la === cobolParser.FILE || ((((_la - 209)) & ~0x1F) === 0 && ((1 << (_la - 209)) & ((1 << (cobolParser.INDEXED - 209)) | (1 << (cobolParser.LINE - 209)) | (1 << (cobolParser.LOCK - 209)))) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & ((1 << (cobolParser.ORGANIZATION - 271)) | (1 << (cobolParser.PADDING - 271)) | (1 << (cobolParser.RANDOM - 271)))) !== 0) || ((((_la - 306)) & ~0x1F) === 0 && ((1 << (_la - 306)) & ((1 << (cobolParser.RECORD - 306)) | (1 << (cobolParser.RELATIVE - 306)) | (1 << (cobolParser.RESERVE - 306)))) !== 0) || _la === cobolParser.SEQUENTIAL || _la === cobolParser.STATUS);
			this.state = 4905;
			this.match(cobolParser.DOT_);
			this.state = 4909;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 4906;
				await this.replace_statement();
				}
				}
				this.state = 4911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async select_clause() {
		let _localctx: Select_clauseContext = new Select_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 870, cobolParser.RULE_select_clause);
		try {
			this.state = 4924;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 752, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4912;
				await this.assign_to();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4913;
				await this.reserve();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4914;
				await this.organization();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4915;
				await this.padding();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4916;
				await this.record_delimiter();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4917;
				await this.lock_mode();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4918;
				await this.block_contains();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4919;
				await this.code_set();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4920;
				await this.access_mode();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4921;
				await this.record_key();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4922;
				await this.alt_record_key();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4923;
				await this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_status() {
		let _localctx: File_statusContext = new File_statusContext(this._ctx, this.state);
		this.enterRule(_localctx, 872, cobolParser.RULE_file_status);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4927;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 4926;
				this.match(cobolParser.FILE);
				}
			}

			this.state = 4929;
			this.match(cobolParser.STATUS);
			this.state = 4931;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4930;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4933;
			await this.file_stat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_stat() {
		let _localctx: File_statContext = new File_statContext(this._ctx, this.state);
		this.enterRule(_localctx, 874, cobolParser.RULE_file_stat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4935;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async record_key() {
		let _localctx: Record_keyContext = new Record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 876, cobolParser.RULE_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4937;
			this.match(cobolParser.RECORD);
			this.state = 4939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 4938;
				this.match(cobolParser.KEY);
				}
			}

			this.state = 4942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4941;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4944;
			await this.record_key_definition();
			this.state = 4949;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DUPLICATES || _la === cobolParser.WITH) {
				{
				this.state = 4946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4945;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 4948;
				this.match(cobolParser.DUPLICATES);
				}
			}

			this.state = 4952;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING) {
				{
				this.state = 4951;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async alt_record_key() {
		let _localctx: Alt_record_keyContext = new Alt_record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 878, cobolParser.RULE_alt_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4954;
			this.match(cobolParser.ALTERNATE);
			this.state = 4955;
			this.match(cobolParser.RECORD);
			this.state = 4957;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 4956;
				this.match(cobolParser.KEY);
				}
			}

			this.state = 4960;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4959;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4962;
			await this.record_key_definition();
			this.state = 4967;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DUPLICATES || _la === cobolParser.WITH) {
				{
				this.state = 4964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4963;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 4966;
				this.match(cobolParser.DUPLICATES);
				}
			}

			this.state = 4970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING) {
				{
				this.state = 4969;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async record_key_definition() {
		let _localctx: Record_key_definitionContext = new Record_key_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 880, cobolParser.RULE_record_key_definition);
		let _la: number;
		try {
			this.state = 4980;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 766, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4972;
				await this.rec_key();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4973;
				await this.seg_key();
				this.state = 4974;
				this.match(cobolParser.EQUAL_);
				this.state = 4976;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4975;
					await this.rec_key();
					}
					}
					this.state = 4978;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.USER_DEFINED_WORD_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async seg_key() {
		let _localctx: Seg_keyContext = new Seg_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 882, cobolParser.RULE_seg_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4982;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rec_key() {
		let _localctx: Rec_keyContext = new Rec_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 884, cobolParser.RULE_rec_key);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4984;
			await this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async access_mode() {
		let _localctx: Access_modeContext = new Access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 886, cobolParser.RULE_access_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS) {
				{
				this.state = 4986;
				this.match(cobolParser.ACCESS);
				this.state = 4988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MODE) {
					{
					this.state = 4987;
					this.match(cobolParser.MODE);
					}
				}

				this.state = 4991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4990;
					this.match(cobolParser.IS);
					}
				}

				}
			}

			this.state = 4995;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			this.state = 5004;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 772, this._ctx) ) {
			case 1:
				{
				this.state = 4996;
				this.match(cobolParser.RELATIVE);
				this.state = 4998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 4997;
					this.match(cobolParser.KEY);
					}
				}

				this.state = 5001;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5000;
					this.match(cobolParser.IS);
					}
				}

				this.state = 5003;
				await this.qualified_data_item();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async reserve() {
		let _localctx: ReserveContext = new ReserveContext(this._ctx, this.state);
		this.enterRule(_localctx, 888, cobolParser.RULE_reserve);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5006;
			this.match(cobolParser.RESERVE);
			this.state = 5007;
			await this.reserve_num();
			this.state = 5009;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA || _la === cobolParser.AREAS) {
				{
				this.state = 5008;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AREA || _la === cobolParser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async reserve_num() {
		let _localctx: Reserve_numContext = new Reserve_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 890, cobolParser.RULE_reserve_num);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5011;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async record_delimiter() {
		let _localctx: Record_delimiterContext = new Record_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 892, cobolParser.RULE_record_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5013;
			this.match(cobolParser.RECORD);
			this.state = 5014;
			this.match(cobolParser.DELIMITER);
			this.state = 5016;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5015;
				this.match(cobolParser.IS);
				}
			}

			this.state = 5018;
			this.match(cobolParser.STANDARD_1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async padding() {
		let _localctx: PaddingContext = new PaddingContext(this._ctx, this.state);
		this.enterRule(_localctx, 894, cobolParser.RULE_padding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5020;
			this.match(cobolParser.PADDING);
			this.state = 5022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTER) {
				{
				this.state = 5021;
				this.match(cobolParser.CHARACTER);
				}
			}

			this.state = 5025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5024;
				this.match(cobolParser.IS);
				}
			}

			this.state = 5027;
			await this.pad_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async pad_char() {
		let _localctx: Pad_charContext = new Pad_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 896, cobolParser.RULE_pad_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5029;
			this.match(cobolParser.STRING_LITERAL_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async organization() {
		let _localctx: OrganizationContext = new OrganizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 898, cobolParser.RULE_organization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ORGANIZATION) {
				{
				this.state = 5031;
				this.match(cobolParser.ORGANIZATION);
				this.state = 5033;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5032;
					this.match(cobolParser.IS);
					}
				}

				}
			}

			this.state = 5042;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SEQUENTIAL:
				{
				this.state = 5037;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.LINE:
				{
				this.state = 5038;
				this.match(cobolParser.LINE);
				this.state = 5039;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.RELATIVE:
				{
				this.state = 5040;
				this.match(cobolParser.RELATIVE);
				}
				break;
			case cobolParser.INDEXED:
				{
				this.state = 5041;
				this.match(cobolParser.INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async lock_mode() {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 900, cobolParser.RULE_lock_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5044;
			this.match(cobolParser.LOCK);
			this.state = 5046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.MODE) {
				{
				this.state = 5045;
				this.match(cobolParser.MODE);
				}
			}

			this.state = 5049;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5048;
				this.match(cobolParser.IS);
				}
			}

			this.state = 5051;
			await this.lock_mode_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async lock_mode_definition() {
		let _localctx: Lock_mode_definitionContext = new Lock_mode_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 902, cobolParser.RULE_lock_mode_definition);
		let _la: number;
		try {
			this.state = 5074;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.MANUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5053;
				this.match(cobolParser.MANUAL);
				this.state = 5055;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 5054;
					this.match(cobolParser.WITH);
					}
				}

				this.state = 5057;
				this.match(cobolParser.LOCK);
				this.state = 5058;
				this.match(cobolParser.ON);
				this.state = 5059;
				this.match(cobolParser.MULTIPLE);
				this.state = 5060;
				this.match(cobolParser.RECORDS);
				}
				break;
			case cobolParser.AUTOMATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5061;
				this.match(cobolParser.AUTOMATIC);
				this.state = 5071;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 785, this._ctx) ) {
				case 1:
					{
					this.state = 5063;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 5062;
						this.match(cobolParser.WITH);
						}
					}

					this.state = 5069;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.LOCK:
						{
						this.state = 5065;
						this.match(cobolParser.LOCK);
						this.state = 5066;
						this.match(cobolParser.ON);
						this.state = 5067;
						this.match(cobolParser.RECORD);
						}
						break;
					case cobolParser.ROLLBACK:
						{
						this.state = 5068;
						this.match(cobolParser.ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.EXCLUSIVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5073;
				this.match(cobolParser.EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async code_set() {
		let _localctx: Code_setContext = new Code_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 904, cobolParser.RULE_code_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5076;
			this.match(cobolParser.CODE_SET);
			this.state = 5078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5077;
				this.match(cobolParser.IS);
				}
			}

			this.state = 5080;
			await this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async block_contains() {
		let _localctx: Block_containsContext = new Block_containsContext(this._ctx, this.state);
		this.enterRule(_localctx, 906, cobolParser.RULE_block_contains);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5082;
			this.match(cobolParser.BLOCK);
			this.state = 5084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 5083;
				this.match(cobolParser.CONTAINS);
				}
			}

			this.state = 5089;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 789, this._ctx) ) {
			case 1:
				{
				this.state = 5086;
				await this.smallest_block();
				this.state = 5087;
				this.match(cobolParser.TO);
				}
				break;
			}
			this.state = 5091;
			await this.blocksize();
			this.state = 5092;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.RECORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async smallest_block() {
		let _localctx: Smallest_blockContext = new Smallest_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 908, cobolParser.RULE_smallest_block);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5094;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async blocksize() {
		let _localctx: BlocksizeContext = new BlocksizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 910, cobolParser.RULE_blocksize);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5096;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async assign_to() {
		let _localctx: Assign_toContext = new Assign_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 912, cobolParser.RULE_assign_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5098;
			this.match(cobolParser.ASSIGN);
			this.state = 5100;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TO) {
				{
				this.state = 5099;
				this.match(cobolParser.TO);
				}
			}

			this.state = 5102;
			await this.assign_to_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async assign_to_definition() {
		let _localctx: Assign_to_definitionContext = new Assign_to_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 914, cobolParser.RULE_assign_to_definition);
		let _la: number;
		try {
			this.state = 5115;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
			case cobolParser.DISK:
			case cobolParser.DYNAMIC:
			case cobolParser.EXTERNAL:
			case cobolParser.PRINTER:
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL) {
					{
					this.state = 5104;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					}
				}

				this.state = 5107;
				await this.file_spec();
				}
				break;
			case cobolParser.MULTIPLE:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MULTIPLE) {
					{
					this.state = 5108;
					this.match(cobolParser.MULTIPLE);
					}
				}

				this.state = 5111;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				this.state = 5113;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 793, this._ctx) ) {
				case 1:
					{
					this.state = 5112;
					this.match(cobolParser.FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_spec() {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 916, cobolParser.RULE_file_spec);
		try {
			this.state = 5121;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5117;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5118;
				await this.qualified_data_item();
				}
				break;
			case cobolParser.DISK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5119;
				this.match(cobolParser.DISK);
				}
				break;
			case cobolParser.PRINTER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5120;
				this.match(cobolParser.PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async file_name() {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 918, cobolParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5123;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async i_o_control() {
		let _localctx: I_o_controlContext = new I_o_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 920, cobolParser.RULE_i_o_control);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5125;
			this.match(cobolParser.I_O_CONTROL);
			this.state = 5126;
			this.match(cobolParser.DOT_);
			this.state = 5130;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.REPLACE) {
				{
				{
				this.state = 5127;
				await this.replace_statement();
				}
				}
				this.state = 5132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5145;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME) {
				{
				this.state = 5134;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5133;
					await this.i_o_control_clause();
					}
					}
					this.state = 5136;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME);
				this.state = 5138;
				this.match(cobolParser.DOT_);
				this.state = 5142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.REPLACE) {
					{
					{
					this.state = 5139;
					await this.replace_statement();
					}
					}
					this.state = 5144;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async i_o_control_clause() {
		let _localctx: I_o_control_clauseContext = new I_o_control_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 922, cobolParser.RULE_i_o_control_clause);
		try {
			this.state = 5151;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.APPLY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5147;
				await this.apply();
				}
				break;
			case cobolParser.SAME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5148;
				await this.same();
				}
				break;
			case cobolParser.RERUN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5149;
				await this.rerun();
				}
				break;
			case cobolParser.MULTIPLE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5150;
				await this.multiple_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async multiple_file() {
		let _localctx: Multiple_fileContext = new Multiple_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 924, cobolParser.RULE_multiple_file);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5153;
			this.match(cobolParser.MULTIPLE);
			this.state = 5154;
			this.match(cobolParser.FILE);
			this.state = 5156;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TAPE) {
				{
				this.state = 5155;
				this.match(cobolParser.TAPE);
				}
			}

			this.state = 5159;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 5158;
				this.match(cobolParser.CONTAINS);
				}
			}

			this.state = 5162;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5161;
				await this.multiple_file_definition();
				}
				}
				this.state = 5164;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async multiple_file_definition() {
		let _localctx: Multiple_file_definitionContext = new Multiple_file_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 926, cobolParser.RULE_multiple_file_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5166;
			await this.multiple_file_name();
			this.state = 5169;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.POSITION) {
				{
				this.state = 5167;
				this.match(cobolParser.POSITION);
				this.state = 5168;
				await this.pos_integer();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async multiple_file_name() {
		let _localctx: Multiple_file_nameContext = new Multiple_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 928, cobolParser.RULE_multiple_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5171;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async pos_integer() {
		let _localctx: Pos_integerContext = new Pos_integerContext(this._ctx, this.state);
		this.enterRule(_localctx, 930, cobolParser.RULE_pos_integer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5173;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rerun() {
		let _localctx: RerunContext = new RerunContext(this._ctx, this.state);
		this.enterRule(_localctx, 932, cobolParser.RULE_rerun);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5175;
			this.match(cobolParser.RERUN);
			this.state = 5178;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 5176;
				this.match(cobolParser.ON);
				this.state = 5177;
				await this.file_name();
				}
			}

			this.state = 5181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EVERY) {
				{
				this.state = 5180;
				this.match(cobolParser.EVERY);
				}
			}

			this.state = 5183;
			await this.rerun_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rerun_definition() {
		let _localctx: Rerun_definitionContext = new Rerun_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 934, cobolParser.RULE_rerun_definition);
		let _la: number;
		try {
			this.state = 5195;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 808, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5185;
				await this.rerun_def_file();
				this.state = 5187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 5186;
					this.match(cobolParser.OF);
					}
				}

				this.state = 5189;
				await this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5191;
				await this.clock_count();
				this.state = 5192;
				this.match(cobolParser.CLOCK_UNITS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5194;
				await this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async clock_count() {
		let _localctx: Clock_countContext = new Clock_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 936, cobolParser.RULE_clock_count);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5197;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async condition_name() {
		let _localctx: Condition_nameContext = new Condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 938, cobolParser.RULE_condition_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5199;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rerun_def_file() {
		let _localctx: Rerun_def_fileContext = new Rerun_def_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 940, cobolParser.RULE_rerun_def_file);
		let _la: number;
		try {
			this.state = 5211;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.END:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5205;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.END) {
					{
					this.state = 5201;
					this.match(cobolParser.END);
					this.state = 5203;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OF) {
						{
						this.state = 5202;
						this.match(cobolParser.OF);
						}
					}

					}
				}

				this.state = 5207;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5208;
				await this.rec_count();
				this.state = 5209;
				this.match(cobolParser.RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async rec_count() {
		let _localctx: Rec_countContext = new Rec_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 942, cobolParser.RULE_rec_count);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5213;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async same() {
		let _localctx: SameContext = new SameContext(this._ctx, this.state);
		this.enterRule(_localctx, 944, cobolParser.RULE_same);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5215;
			this.match(cobolParser.SAME);
			this.state = 5217;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE) {
				{
				this.state = 5216;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
			}

			this.state = 5220;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA) {
				{
				this.state = 5219;
				this.match(cobolParser.AREA);
				}
			}

			this.state = 5223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOR) {
				{
				this.state = 5222;
				this.match(cobolParser.FOR);
				}
			}

			this.state = 5225;
			await this.same_area_file();
			this.state = 5227;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5226;
				await this.same_area_file();
				}
				}
				this.state = 5229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async same_area_file() {
		let _localctx: Same_area_fileContext = new Same_area_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 946, cobolParser.RULE_same_area_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5231;
			this.match(cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async apply() {
		let _localctx: ApplyContext = new ApplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 948, cobolParser.RULE_apply);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5233;
			this.match(cobolParser.APPLY);
			this.state = 5235;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5234;
				await this.apply_definition();
				}
				}
				this.state = 5237;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 87)) & ~0x1F) === 0 && ((1 << (_la - 87)) & ((1 << (cobolParser.CONTIGUOUS - 87)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 87)) | (1 << (cobolParser.DEFERRED_WRITE - 87)))) !== 0) || _la === cobolParser.EXTENSION || _la === cobolParser.FILL_SIZE || _la === cobolParser.LOCK_HOLDING || _la === cobolParser.MASS_INSERT || _la === cobolParser.PREALLOCATION || _la === cobolParser.PRINT_CONTROL || _la === cobolParser.WINDOW);
			this.state = 5239;
			this.match(cobolParser.ON);
			this.state = 5241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5240;
				await this.file_name();
				}
				}
				this.state = 5243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async apply_definition() {
		let _localctx: Apply_definitionContext = new Apply_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 950, cobolParser.RULE_apply_definition);
		let _la: number;
		try {
			this.state = 5259;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DEFERRED_WRITE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5245;
				this.match(cobolParser.DEFERRED_WRITE);
				}
				break;
			case cobolParser.EXTENSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5246;
				this.match(cobolParser.EXTENSION);
				this.state = 5247;
				await this.extend_amt();
				}
				break;
			case cobolParser.FILL_SIZE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5248;
				this.match(cobolParser.FILL_SIZE);
				}
				break;
			case cobolParser.LOCK_HOLDING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5249;
				this.match(cobolParser.LOCK_HOLDING);
				}
				break;
			case cobolParser.MASS_INSERT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5250;
				this.match(cobolParser.MASS_INSERT);
				}
				break;
			case cobolParser.CONTIGUOUS:
			case cobolParser.CONTIGUOUS_BEST_TRY:
			case cobolParser.PREALLOCATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY) {
					{
					this.state = 5251;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						await this.consume();
					}
					}
				}

				this.state = 5254;
				this.match(cobolParser.PREALLOCATION);
				this.state = 5255;
				await this.preall_amt();
				}
				break;
			case cobolParser.PRINT_CONTROL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5256;
				this.match(cobolParser.PRINT_CONTROL);
				}
				break;
			case cobolParser.WINDOW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5257;
				this.match(cobolParser.WINDOW);
				this.state = 5258;
				await this.window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async window_ptrs() {
		let _localctx: Window_ptrsContext = new Window_ptrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 952, cobolParser.RULE_window_ptrs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5261;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async preall_amt() {
		let _localctx: Preall_amtContext = new Preall_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 954, cobolParser.RULE_preall_amt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5263;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async extend_amt() {
		let _localctx: Extend_amtContext = new Extend_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 956, cobolParser.RULE_extend_amt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5265;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.INTEGER_LITERAL_ || _la === cobolParser.HEX_LITERAL_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}



	// @RuleVersion(0)
	public async arithmetic_expression(_p?: number) {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Arithmetic_expressionContext = new Arithmetic_expressionContext(this._ctx, _parentState);
		let _prevctx: Arithmetic_expressionContext = _localctx;
		let _startState: number = 958;
		this.enterRecursionRule(_localctx, 958, cobolParser.RULE_arithmetic_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5277;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LPAREN_:
				{
				this.state = 5268;
				this.match(cobolParser.LPAREN_);
				this.state = 5269;
				await this.arithmetic_expression(0);
				this.state = 5270;
				this.match(cobolParser.RPAREN_);
				}
				break;
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
				{
				this.state = 5272;
				await this.unary_arithmetic_operator();
				this.state = 5273;
				await this.arithmetic_expression(3);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD_:
				{
				this.state = 5275;
				await this.identifier();
				}
				break;
			case cobolParser.STRING_LITERAL_:
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				{
				this.state = 5276;
				await this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5285;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 821, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						await this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_arithmetic_expression);
					this.state = 5279;
					if (!(this.precpred(this._ctx, 4))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
					}
					this.state = 5280;
					await this.binary_arithmetic_operator();
					this.state = 5281;
					await this.arithmetic_expression(5);
					}
					}
				}
				this.state = 5287;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 821, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async constant() {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 960, cobolParser.RULE_constant);
		let _la: number;
		try {
			this.state = 5291;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL_:
			case cobolParser.INTEGER_LITERAL_:
			case cobolParser.HEX_LITERAL_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5288;
				_la = this._input.LA(1);
				if (!(((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & ((1 << (cobolParser.NUMERIC_LITERAL_ - 452)) | (1 << (cobolParser.INTEGER_LITERAL_ - 452)) | (1 << (cobolParser.HEX_LITERAL_ - 452)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;
			case cobolParser.STRING_LITERAL_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5289;
				this.match(cobolParser.STRING_LITERAL_);
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5290;
				await this.figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async binary_arithmetic_operator() {
		let _localctx: Binary_arithmetic_operatorContext = new Binary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 962, cobolParser.RULE_binary_arithmetic_operator);
		try {
			this.state = 5299;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 823, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5293;
				this.match(cobolParser.PLUS_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5294;
				this.match(cobolParser.MINUS_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5295;
				this.match(cobolParser.STAR_);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5296;
				this.match(cobolParser.SLASH_);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5297;
				this.match(cobolParser.STAR_);
				this.state = 5298;
				this.match(cobolParser.STAR_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async unary_arithmetic_operator() {
		let _localctx: Unary_arithmetic_operatorContext = new Unary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 964, cobolParser.RULE_unary_arithmetic_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5301;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PLUS_ || _la === cobolParser.MINUS_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}



	// @RuleVersion(0)
	public async logic_expression(_p?: number) {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_expressionContext = new Logic_expressionContext(this._ctx, _parentState);
		let _prevctx: Logic_expressionContext = _localctx;
		let _startState: number = 966;
		this.enterRecursionRule(_localctx, 966, cobolParser.RULE_logic_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5311;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 824, this._ctx) ) {
			case 1:
				{
				this.state = 5304;
				this.match(cobolParser.LPAREN_);
				this.state = 5305;
				await this.logic_expression(0);
				this.state = 5306;
				this.match(cobolParser.RPAREN_);
				}
				break;

			case 2:
				{
				this.state = 5308;
				this.match(cobolParser.NOT);
				this.state = 5309;
				await this.logic_expression(2);
				}
				break;

			case 3:
				{
				this.state = 5310;
				await this.logic_condition();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5319;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 825, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						await this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_expression);
					this.state = 5313;
					if (!(this.precpred(this._ctx, 3))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
					}
					this.state = 5314;
					await this.logic_operation();
					this.state = 5315;
					await this.logic_expression(4);
					}
					}
				}
				this.state = 5321;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 825, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async logic_condition() {
		let _localctx: Logic_conditionContext = new Logic_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 968, cobolParser.RULE_logic_condition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5362;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 833, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5322;
				await this.arithmetic_expression(0);
				this.state = 5323;
				await this.condition_operator();
				this.state = 5324;
				await this.arithmetic_expression(0);
				this.state = 5330;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 826, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5325;
						await this.logic_operation();
						this.state = 5326;
						await this.logic_condition_abbrev();
						}
						}
					}
					this.state = 5332;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 826, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5333;
				await this.arithmetic_expression(0);
				this.state = 5335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5334;
					this.match(cobolParser.IS);
					}
				}

				this.state = 5338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 5337;
					this.match(cobolParser.NOT);
					}
				}

				this.state = 5342;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.ALPHABETIC:
				case cobolParser.ALPHABETIC_LOWER:
				case cobolParser.ALPHABETIC_UPPER:
				case cobolParser.NUMERIC:
				case cobolParser.USER_DEFINED_WORD_:
					{
					this.state = 5340;
					await this.class_condition_name();
					}
					break;
				case cobolParser.NEGATIVE:
				case cobolParser.POSITIVE:
				case cobolParser.ZERO:
					{
					this.state = 5341;
					await this.sign_condition_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5349;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 830, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5344;
						await this.logic_operation();
						this.state = 5345;
						await this.logic_condition_abbrev();
						}
						}
					}
					this.state = 5351;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 830, this._ctx);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5352;
				await this.arithmetic_expression(0);
				this.state = 5354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5353;
					this.match(cobolParser.IS);
					}
				}

				this.state = 5357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 5356;
					this.match(cobolParser.NOT);
					}
				}

				this.state = 5359;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.FAILURE || _la === cobolParser.SUCCESS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					await this.consume();
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5361;
				await this.identifier_result();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async logic_condition_abbrev() {
		let _localctx: Logic_condition_abbrevContext = new Logic_condition_abbrevContext(this._ctx, this.state);
		this.enterRule(_localctx, 970, cobolParser.RULE_logic_condition_abbrev);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EQUAL || _la === cobolParser.GREATER || _la === cobolParser.IS || _la === cobolParser.LESS || _la === cobolParser.NOT || ((((_la - 438)) & ~0x1F) === 0 && ((1 << (_la - 438)) & ((1 << (cobolParser.EQUAL_ - 438)) | (1 << (cobolParser.LT_ - 438)) | (1 << (cobolParser.LE_ - 438)) | (1 << (cobolParser.GE_ - 438)) | (1 << (cobolParser.GT_ - 438)))) !== 0)) {
				{
				this.state = 5364;
				await this.condition_operator();
				}
			}

			this.state = 5367;
			await this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async logic_operation() {
		let _localctx: Logic_operationContext = new Logic_operationContext(this._ctx, this.state);
		this.enterRule(_localctx, 972, cobolParser.RULE_logic_operation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5369;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AND || _la === cobolParser.OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async bool_condition_name() {
		let _localctx: Bool_condition_nameContext = new Bool_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 974, cobolParser.RULE_bool_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5371;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FAILURE || _la === cobolParser.SUCCESS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async sign_condition_name() {
		let _localctx: Sign_condition_nameContext = new Sign_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 976, cobolParser.RULE_sign_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5373;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NEGATIVE || _la === cobolParser.POSITIVE || _la === cobolParser.ZERO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async class_condition_name() {
		let _localctx: Class_condition_nameContext = new Class_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 978, cobolParser.RULE_class_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5375;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER))) !== 0) || _la === cobolParser.NUMERIC || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async condition_operator() {
		let _localctx: Condition_operatorContext = new Condition_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 980, cobolParser.RULE_condition_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5378;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5377;
				this.match(cobolParser.IS);
				}
			}

			this.state = 5429;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 848, this._ctx) ) {
			case 1:
				{
				this.state = 5381;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 5380;
					this.match(cobolParser.NOT);
					}
				}

				this.state = 5407;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.GREATER:
					{
					this.state = 5383;
					this.match(cobolParser.GREATER);
					this.state = 5385;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.THAN) {
						{
						this.state = 5384;
						this.match(cobolParser.THAN);
						}
					}

					}
					break;
				case cobolParser.GT_:
					{
					this.state = 5387;
					this.match(cobolParser.GT_);
					this.state = 5389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.THAN) {
						{
						this.state = 5388;
						this.match(cobolParser.THAN);
						}
					}

					}
					break;
				case cobolParser.LESS:
					{
					this.state = 5391;
					this.match(cobolParser.LESS);
					this.state = 5393;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.THAN) {
						{
						this.state = 5392;
						this.match(cobolParser.THAN);
						}
					}

					}
					break;
				case cobolParser.LT_:
					{
					this.state = 5395;
					this.match(cobolParser.LT_);
					this.state = 5397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.THAN) {
						{
						this.state = 5396;
						this.match(cobolParser.THAN);
						}
					}

					}
					break;
				case cobolParser.EQUAL:
					{
					this.state = 5399;
					this.match(cobolParser.EQUAL);
					this.state = 5401;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 5400;
						this.match(cobolParser.TO);
						}
					}

					}
					break;
				case cobolParser.EQUAL_:
					{
					this.state = 5403;
					this.match(cobolParser.EQUAL_);
					this.state = 5405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 5404;
						this.match(cobolParser.TO);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 5409;
				this.match(cobolParser.GREATER);
				this.state = 5411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.THAN) {
					{
					this.state = 5410;
					this.match(cobolParser.THAN);
					}
				}

				this.state = 5413;
				this.match(cobolParser.OR);
				this.state = 5414;
				this.match(cobolParser.EQUAL);
				this.state = 5416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 5415;
					this.match(cobolParser.TO);
					}
				}

				}
				break;

			case 3:
				{
				this.state = 5418;
				this.match(cobolParser.GE_);
				}
				break;

			case 4:
				{
				this.state = 5419;
				this.match(cobolParser.LESS);
				this.state = 5421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.THAN) {
					{
					this.state = 5420;
					this.match(cobolParser.THAN);
					}
				}

				this.state = 5423;
				this.match(cobolParser.OR);
				this.state = 5424;
				this.match(cobolParser.EQUAL);
				this.state = 5426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 5425;
					this.match(cobolParser.TO);
					}
				}

				}
				break;

			case 5:
				{
				this.state = 5428;
				this.match(cobolParser.LE_);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async identifier_result() {
		let _localctx: Identifier_resultContext = new Identifier_resultContext(this._ctx, this.state);
		this.enterRule(_localctx, 982, cobolParser.RULE_identifier_result);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5431;
			await this.qualified_data_item();
			this.state = 5433;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 849, this._ctx) ) {
			case 1:
				{
				this.state = 5432;
				await this.subscripting();
				}
				break;
			}
			this.state = 5436;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 850, this._ctx) ) {
			case 1:
				{
				this.state = 5435;
				await this.reference_modification();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async identifier() {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 984, cobolParser.RULE_identifier);
		try {
			this.state = 5447;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5438;
				await this.identifier_result();
				}
				break;
			case cobolParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5439;
				this.match(cobolParser.FUNCTION);
				this.state = 5440;
				await this.function_name();
				this.state = 5442;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 851, this._ctx) ) {
				case 1:
					{
					this.state = 5441;
					await this.arguments();
					}
					break;
				}
				this.state = 5445;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 852, this._ctx) ) {
				case 1:
					{
					this.state = 5444;
					await this.reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async arguments() {
		let _localctx: ArgumentsContext = new ArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 986, cobolParser.RULE_arguments);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5449;
			await this.subscripting();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async subscripting() {
		let _localctx: SubscriptingContext = new SubscriptingContext(this._ctx, this.state);
		this.enterRule(_localctx, 988, cobolParser.RULE_subscripting);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5451;
			this.match(cobolParser.LPAREN_);
			this.state = 5454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 5454;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 854, this._ctx) ) {
				case 1:
					{
					this.state = 5452;
					await this.arithmetic_expression(0);
					}
					break;

				case 2:
					{
					this.state = 5453;
					this.match(cobolParser.ALL);
					}
					break;
				}
				}
				this.state = 5456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.ALL || ((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & ((1 << (cobolParser.FUNCTION - 191)) | (1 << (cobolParser.HIGH_VALUE - 191)) | (1 << (cobolParser.HIGH_VALUES - 191)))) !== 0) || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)) | (1 << (cobolParser.PLUS_ - 422)) | (1 << (cobolParser.MINUS_ - 422)) | (1 << (cobolParser.LPAREN_ - 422)) | (1 << (cobolParser.NUMERIC_LITERAL_ - 422)) | (1 << (cobolParser.INTEGER_LITERAL_ - 422)))) !== 0) || _la === cobolParser.HEX_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_);
			this.state = 5458;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async reference_modification() {
		let _localctx: Reference_modificationContext = new Reference_modificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 990, cobolParser.RULE_reference_modification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5460;
			this.match(cobolParser.LPAREN_);
			this.state = 5461;
			await this.leftmost_character_position();
			this.state = 5462;
			this.match(cobolParser.COLON_);
			this.state = 5464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STRING_LITERAL_ || _la === cobolParser.ALL || ((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & ((1 << (cobolParser.FUNCTION - 191)) | (1 << (cobolParser.HIGH_VALUE - 191)) | (1 << (cobolParser.HIGH_VALUES - 191)))) !== 0) || _la === cobolParser.LOW_VALUE || _la === cobolParser.LOW_VALUES || _la === cobolParser.QUOTE || _la === cobolParser.QUOTES || _la === cobolParser.SPACE || _la === cobolParser.SPACES || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (cobolParser.ZERO - 422)) | (1 << (cobolParser.ZEROES - 422)) | (1 << (cobolParser.ZEROS - 422)) | (1 << (cobolParser.PLUS_ - 422)) | (1 << (cobolParser.MINUS_ - 422)) | (1 << (cobolParser.LPAREN_ - 422)) | (1 << (cobolParser.NUMERIC_LITERAL_ - 422)) | (1 << (cobolParser.INTEGER_LITERAL_ - 422)))) !== 0) || _la === cobolParser.HEX_LITERAL_ || _la === cobolParser.USER_DEFINED_WORD_) {
				{
				this.state = 5463;
				await this.length();
				}
			}

			this.state = 5466;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async leftmost_character_position() {
		let _localctx: Leftmost_character_positionContext = new Leftmost_character_positionContext(this._ctx, this.state);
		this.enterRule(_localctx, 992, cobolParser.RULE_leftmost_character_position);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5468;
			await this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async length() {
		let _localctx: LengthContext = new LengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 994, cobolParser.RULE_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5470;
			await this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public async function_name() {
		let _localctx: Function_nameContext = new Function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 996, cobolParser.RULE_function_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5472;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.RANDOM || _la === cobolParser.USER_DEFINED_WORD_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				await this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			await this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 9:
			return this.word_in_area_B_sempred(_localctx as Word_in_area_BContext, predIndex);

		case 479:
			return this.arithmetic_expression_sempred(_localctx as Arithmetic_expressionContext, predIndex);

		case 483:
			return this.logic_expression_sempred(_localctx as Logic_expressionContext, predIndex);
		}
		return true;
	}
	private word_in_area_B_sempred(_localctx: Word_in_area_BContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  (this as any).testCurrentWordInAreaB ? (this as any).testCurrentWordInAreaB() as boolean : false ;
		}
		return true;
	}
	private arithmetic_expression_sempred(_localctx: Arithmetic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private logic_expression_sempred(_localctx: Logic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 11;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u01D1\u1565\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
		"\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
		"\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
		"\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
		"\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
		"\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
		"\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
		"\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
		"\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
		"\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
		"\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
		"\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
		"\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
		"\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
		"\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
		"\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
		"\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x04" +
		"\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2\x04" +
		"\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6\x04" +
		"\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA\x04" +
		"\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE\x04" +
		"\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2\x04" +
		"\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6\x04" +
		"\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA\x04" +
		"\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE\x04" +
		"\u01DF\t\u01DF\x04\u01E0\t\u01E0\x04\u01E1\t\u01E1\x04\u01E2\t\u01E2\x04" +
		"\u01E3\t\u01E3\x04\u01E4\t\u01E4\x04\u01E5\t\u01E5\x04\u01E6\t\u01E6\x04" +
		"\u01E7\t\u01E7\x04\u01E8\t\u01E8\x04\u01E9\t\u01E9\x04\u01EA\t\u01EA\x04" +
		"\u01EB\t\u01EB\x04\u01EC\t\u01EC\x04\u01ED\t\u01ED\x04\u01EE\t\u01EE\x04" +
		"\u01EF\t\u01EF\x04\u01F0\t\u01F0\x04\u01F1\t\u01F1\x04\u01F2\t\u01F2\x04" +
		"\u01F3\t\u01F3\x04\u01F4\t\u01F4\x03\x02\x07\x02\u03EA\n\x02\f\x02\x0E" +
		"\x02\u03ED\v\x02\x03\x02\x07\x02\u03F0\n\x02\f\x02\x0E\x02\u03F3\v\x02" +
		"\x03\x02\x03\x02\x03\x03\x03\x03\x05\x03\u03F9\n\x03\x03\x03\x05\x03\u03FC" +
		"\n\x03\x03\x03\x05\x03\u03FF\n\x03\x03\x03\x07\x03\u0402\n\x03\f\x03\x0E" +
		"\x03\u0405\v\x03\x03\x03\x05\x03\u0408\n\x03\x03\x04\x03\x04\x03\x04\x05" +
		"\x04\u040D\n\x04\x03\x04\x05\x04\u0410\n\x04\x03\x04\x05\x04\u0413\n\x04" +
		"\x03\x04\x05\x04\u0416\n\x04\x03\x04\x05\x04\u0419\n\x04\x03\x04\x05\x04" +
		"\u041C\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05\u0422\n\x05\f\x05" +
		"\x0E\x05\u0425\v\x05\x03\x06\x03\x06\x05\x06\u0429\n\x06\x03\x06\x05\x06" +
		"\u042C\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u0432\n\x07\f\x07" +
		"\x0E\x07\u0435\v\x07\x03\b\x03\b\x05\b\u0439\n\b\x03\b\x05\b\u043C\n\b" +
		"\x03\b\x05\b\u043F\n\b\x03\b\x05\b\u0442\n\b\x03\b\x05\b\u0445\n\b\x03" +
		"\t\x03\t\x03\t\x03\t\x07\t\u044B\n\t\f\t\x0E\t\u044E\v\t\x03\n\x03\n\x05" +
		"\n\u0452\n\n\x03\n\x07\n\u0455\n\n\f\n\x0E\n\u0458\v\n\x03\n\x07\n\u045B" +
		"\n\n\f\n\x0E\n\u045E\v\n\x05\n\u0460\n\n\x03\v\x03\v\x03\v\x03\f\x03\f" +
		"\x07\f\u0467\n\f\f\f\x0E\f\u046A\v\f\x03\f\x07\f\u046D\n\f\f\f\x0E\f\u0470" +
		"\v\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10" +
		"\x05\x10\u047B\n\x10\x03\x11\x03\x11\x03\x11\x05\x11\u0480\n\x11\x03\x12" +
		"\x03\x12\x05\x12\u0484\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\u048A" +
		"\n\x13\f\x13\x0E\x13\u048D\v\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x05\x15\u0494\n\x15\x03\x15\x05\x15\u0497\n\x15\x03\x15\x03\x15\x03\x16" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x07\x17\u04A0\n\x17\f\x17\x0E\x17\u04A3" +
		"\v\x17\x03\x18\x03\x18\x07\x18\u04A7\n\x18\f\x18\x0E\x18\u04AA\v\x18\x03" +
		"\x19\x03\x19\x07\x19\u04AE\n\x19\f\x19\x0E\x19\u04B1\v\x19\x03\x19\x03" +
		"\x19\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u04B8\n\x1A\f\x1A\x0E\x1A\u04BB\v" +
		"\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u04C1\n\x1B\f\x1B\x0E\x1B" +
		"\u04C4\v\x1B\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u04C9\n\x1C\f\x1C\x0E\x1C" +
		"\u04CC\v\x1C\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u04D1\n\x1D\f\x1D\x0E\x1D" +
		"\u04D4\v\x1D\x03\x1D\x03\x1D\x06\x1D\u04D8\n\x1D\r\x1D\x0E\x1D\u04D9\x03" +
		"\x1D\x03\x1D\x07\x1D\u04DE\n\x1D\f\x1D\x0E\x1D\u04E1\v\x1D\x07\x1D\u04E3" +
		"\n\x1D\f\x1D\x0E\x1D\u04E6\v\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x05\x1F" +
		"\u04EC\n\x1F\x03\x1F\x03\x1F\x05\x1F\u04F0\n\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x05\x1F\u04F5\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u04FB\n\x1F" +
		"\x03\x1F\x03\x1F\x07\x1F\u04FF\n\x1F\f\x1F\x0E\x1F\u0502\v\x1F\x03 \x03" +
		" \x03!\x06!\u0507\n!\r!\x0E!\u0508\x03!\x03!\x03!\x03!\x05!\u050F\n!\x03" +
		"\"\x03\"\x03\"\x05\"\u0514\n\"\x03\"\x03\"\x07\"\u0518\n\"\f\"\x0E\"\u051B" +
		"\v\"\x03#\x03#\x03$\x03$\x06$\u0521\n$\r$\x0E$\u0522\x03%\x03%\x03%\x03" +
		"&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x05" +
		"&\u0552\n&\x03\'\x03\'\x03\'\x07\'\u0557\n\'\f\'\x0E\'\u055A\v\'\x03\'" +
		"\x03\'\x05\'\u055E\n\'\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03+\x03" +
		"+\x03+\x03+\x03+\x06+\u056D\n+\r+\x0E+\u056E\x03+\x05+\u0572\n+\x03,\x03" +
		",\x03,\x03,\x05,\u0578\n,\x03,\x03,\x03,\x05,\u057D\n,\x05,\u057F\n,\x03" +
		",\x03,\x03,\x05,\u0584\n,\x03,\x05,\u0587\n,\x03,\x03,\x03,\x05,\u058C" +
		"\n,\x03,\x03,\x05,\u0590\n,\x05,\u0592\n,\x03,\x05,\u0595\n,\x03-\x03" +
		"-\x05-\u0599\n-\x03-\x03-\x05-\u059D\n-\x03.\x03.\x05.\u05A1\n.\x03/\x03" +
		"/\x03/\x03/\x05/\u05A7\n/\x03/\x03/\x03/\x07/\u05AC\n/\f/\x0E/\u05AF\v" +
		"/\x05/\u05B1\n/\x03/\x03/\x06/\u05B5\n/\r/\x0E/\u05B6\x03/\x05/\u05BA" +
		"\n/\x03/\x03/\x05/\u05BE\n/\x03/\x03/\x05/\u05C2\n/\x03/\x05/\u05C5\n" +
		"/\x03/\x05/\u05C8\n/\x03/\x05/\u05CB\n/\x030\x030\x031\x031\x031\x051" +
		"\u05D2\n1\x031\x051\u05D5\n1\x031\x031\x051\u05D9\n1\x031\x051\u05DC\n" +
		"1\x032\x032\x033\x033\x034\x034\x035\x055\u05E5\n5\x035\x035\x036\x03" +
		"6\x036\x056\u05EC\n6\x037\x037\x038\x038\x038\x038\x038\x038\x058\u05F6" +
		"\n8\x058\u05F8\n8\x039\x039\x069\u05FC\n9\r9\x0E9\u05FD\x03:\x03:\x05" +
		":\u0602\n:\x03;\x03;\x06;\u0606\n;\r;\x0E;\u0607\x03;\x03;\x03;\x03;\x05" +
		";\u060E\n;\x03;\x03;\x05;\u0612\n;\x06;\u0614\n;\r;\x0E;\u0615\x03;\x03" +
		";\x03;\x03;\x03;\x05;\u061D\n;\x05;\u061F\n;\x03;\x05;\u0622\n;\x03;\x05" +
		";\u0625\n;\x03<\x03<\x03=\x03=\x05=\u062B\n=\x03>\x03>\x06>\u062F\n>\r" +
		">\x0E>\u0630\x03>\x03>\x05>\u0635\n>\x03>\x03>\x05>\u0639\n>\x06>\u063B" +
		"\n>\r>\x0E>\u063C\x03>\x03>\x03>\x05>\u0642\n>\x03>\x03>\x05>\u0646\n" +
		">\x03>\x05>\u0649\n>\x03>\x05>\u064C\n>\x03?\x03?\x03@\x03@\x03A\x03A" +
		"\x03B\x03B\x03B\x05B\u0657\nB\x03C\x03C\x03C\x05C\u065C\nC\x03D\x03D\x03" +
		"D\x05D\u0661\nD\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u0669\nE\x03E\x05E" +
		"\u066C\nE\x03E\x05E\u066F\nE\x03E\x05E\u0672\nE\x03F\x03F\x03G\x03G\x03" +
		"G\x07G\u0679\nG\fG\x0EG\u067C\vG\x03G\x05G\u067F\nG\x03G\x03G\x05G\u0683" +
		"\nG\x03G\x05G\u0686\nG\x05G\u0688\nG\x03G\x05G\u068B\nG\x03G\x03G\x05" +
		"G\u068F\nG\x03G\x05G\u0692\nG\x03G\x03G\x03G\x03G\x06G\u0698\nG\rG\x0E" +
		"G\u0699\x05G\u069C\nG\x03G\x03G\x03G\x03G\x06G\u06A2\nG\rG\x0EG\u06A3" +
		"\x05G\u06A6\nG\x03H\x03H\x03I\x03I\x05I\u06AC\nI\x03I\x03I\x03J\x05J\u06B1" +
		"\nJ\x03J\x03J\x05J\u06B5\nJ\x03J\x03J\x07J\u06B9\nJ\fJ\x0EJ\u06BC\vJ\x03" +
		"K\x03K\x03L\x03L\x03L\x03L\x03L\x03L\x05L\u06C6\nL\x03M\x03M\x06M\u06CA" +
		"\nM\rM\x0EM\u06CB\x03M\x03M\x03M\x03N\x03N\x06N\u06D3\nN\rN\x0EN\u06D4" +
		"\x03N\x03N\x03N\x03N\x03O\x03O\x06O\u06DD\nO\rO\x0EO\u06DE\x03O\x03O\x03" +
		"O\x03P\x03P\x03P\x03P\x03P\x06P\u06E9\nP\rP\x0EP\u06EA\x03Q\x03Q\x06Q" +
		"\u06EF\nQ\rQ\x0EQ\u06F0\x03Q\x03Q\x03Q\x05Q\u06F6\nQ\x03Q\x03Q\x03R\x03" +
		"R\x03R\x03R\x03R\x03S\x03S\x05S\u0701\nS\x03T\x03T\x05T\u0705\nT\x03U" +
		"\x03U\x03U\x03U\x05U\u070B\nU\x03U\x05U\u070E\nU\x03U\x03U\x03U\x03U\x06" +
		"U\u0714\nU\rU\x0EU\u0715\x06U\u0718\nU\rU\x0EU\u0719\x03U\x03U\x03U\x03" +
		"U\x03U\x03U\x06U\u0722\nU\rU\x0EU\u0723\x03U\x05U\u0727\nU\x03U\x03U\x05" +
		"U\u072B\nU\x06U\u072D\nU\rU\x0EU\u072E\x05U\u0731\nU\x03U\x03U\x03U\x03" +
		"U\x05U\u0737\nU\x03U\x03U\x03U\x03U\x07U\u073D\nU\fU\x0EU\u0740\vU\x03" +
		"U\x03U\x06U\u0744\nU\rU\x0EU\u0745\x03U\x05U\u0749\nU\x03U\x03U\x05U\u074D" +
		"\nU\x05U\u074F\nU\x03V\x03V\x05V\u0753\nV\x03V\x03V\x05V\u0757\nV\x03" +
		"V\x05V\u075A\nV\x03V\x05V\u075D\nV\x03V\x03V\x03V\x05V\u0762\nV\x03W\x03" +
		"W\x03X\x03X\x03Y\x03Y\x03Z\x03Z\x03[\x03[\x03[\x03[\x05[\u0770\n[\x03" +
		"[\x03[\x03[\x05[\u0775\n[\x05[\u0777\n[\x03[\x05[\u077A\n[\x03[\x05[\u077D" +
		"\n[\x03\\\x03\\\x03]\x03]\x03]\x05]\u0784\n]\x03]\x03]\x05]\u0788\n]\x03" +
		"]\x03]\x03]\x05]\u078D\n]\x03]\x05]\u0790\n]\x03^\x03^\x03_\x03_\x03_" +
		"\x03_\x05_\u0798\n_\x03`\x03`\x03a\x03a\x03b\x03b\x03b\x03b\x03b\x05b" +
		"\u07A3\nb\x03b\x05b\u07A6\nb\x03b\x05b\u07A9\nb\x03b\x05b\u07AC\nb\x03" +
		"c\x03c\x03d\x03d\x03e\x03e\x03e\x05e\u07B5\ne\x03e\x05e\u07B8\ne\x03e" +
		"\x03e\x05e\u07BC\ne\x03e\x03e\x03e\x05e\u07C1\ne\x03e\x05e\u07C4\ne\x03" +
		"e\x03e\x05e\u07C8\ne\x03e\x03e\x05e\u07CC\ne\x05e\u07CE\ne\x03e\x03e\x05" +
		"e\u07D2\ne\x03e\x05e\u07D5\ne\x03f\x03f\x05f\u07D9\nf\x03f\x05f\u07DC" +
		"\nf\x03f\x03f\x03f\x03f\x03f\x05f\u07E3\nf\x05f\u07E5\nf\x05f\u07E7\n" +
		"f\x03g\x05g\u07EA\ng\x03g\x05g\u07ED\ng\x03g\x03g\x05g\u07F1\ng\x03h\x03" +
		"h\x05h\u07F5\nh\x03h\x03h\x03h\x05h\u07FA\nh\x05h\u07FC\nh\x03h\x06h\u07FF" +
		"\nh\rh\x0Eh\u0800\x03h\x03h\x05h\u0805\nh\x03i\x03i\x03i\x05i\u080A\n" +
		"i\x03j\x03j\x05j\u080E\nj\x03j\x03j\x03k\x05k\u0813\nk\x03k\x03k\x03k" +
		"\x03l\x05l\u0819\nl\x03l\x03l\x03l\x03m\x05m\u081F\nm\x03m\x03m\x03m\x03" +
		"m\x03m\x03m\x03m\x03m\x03m\x07m\u082A\nm\fm\x0Em\u082D\vm\x03n\x03n\x03" +
		"n\x03n\x03n\x03n\x03o\x03o\x05o\u0837\no\x03p\x03p\x05p\u083B\np\x03q" +
		"\x03q\x03r\x03r\x06r\u0841\nr\rr\x0Er\u0842\x03r\x03r\x03r\x03r\x05r\u0849" +
		"\nr\x03r\x03r\x05r\u084D\nr\x06r\u084F\nr\rr\x0Er\u0850\x06r\u0853\nr" +
		"\rr\x0Er\u0854\x05r\u0857\nr\x03s\x03s\x03s\x05s\u085C\ns\x03s\x03s\x05" +
		"s\u0860\ns\x03s\x05s\u0863\ns\x06s\u0865\ns\rs\x0Es\u0866\x03t\x05t\u086A" +
		"\nt\x03t\x03t\x03t\x03t\x05t\u0870\nt\x03t\x03t\x03t\x05t\u0875\nt\x03" +
		"t\x05t\u0878\nt\x03t\x03t\x03t\x03t\x03t\x05t\u087F\nt\x03t\x05t\u0882" +
		"\nt\x03t\x03t\x03t\x03t\x03t\x05t\u0889\nt\x03t\x05t\u088C\nt\x03t\x03" +
		"t\x03t\x05t\u0891\nt\x05t\u0893\nt\x05t\u0895\nt\x03u\x03u\x03u\x03u\x03" +
		"u\x03u\x05u\u089D\nu\x03u\x03u\x05u\u08A1\nu\x06u\u08A3\nu\ru\x0Eu\u08A4" +
		"\x03u\x05u\u08A8\nu\x03u\x05u\u08AB\nu\x03v\x03v\x05v\u08AF\nv\x03w\x03" +
		"w\x03w\x06w\u08B4\nw\rw\x0Ew\u08B5\x03w\x05w\u08B9\nw\x03w\x03w\x05w\u08BD" +
		"\nw\x03w\x05w\u08C0\nw\x03w\x03w\x06w\u08C4\nw\rw\x0Ew\u08C5\x03w\x03" +
		"w\x05w\u08CA\nw\x03x\x03x\x03x\x05x\u08CF\nx\x03x\x03x\x03y\x03y\x03z" +
		"\x03z\x03{\x03{\x03{\x03|\x03|\x03}\x05}\u08DD\n}\x03}\x03}\x05}\u08E1" +
		"\n}\x03}\x06}\u08E4\n}\r}\x0E}\u08E5\x03~\x03~\x03\x7F\x03\x7F\x03\x80" +
		"\x03\x80\x03\x80\x03\x80\x05\x80\u08F0\n\x80\x03\x80\x03\x80\x05\x80\u08F4" +
		"\n\x80\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x07\x81\u08FB\n\x81\f\x81" +
		"\x0E\x81\u08FE\v\x81\x03\x82\x03\x82\x03\x83\x03\x83\x03\x84\x03\x84\x03" +
		"\x84\x06\x84\u0907\n\x84\r\x84\x0E\x84\u0908\x03\x85\x03\x85\x03\x85\x03" +
		"\x85\x03\x85\x07\x85\u0910\n\x85\f\x85\x0E\x85\u0913\v\x85\x06\x85\u0915" +
		"\n\x85\r\x85\x0E\x85\u0916\x03\x86\x03\x86\x03\x87\x03\x87\x03\x87\x03" +
		"\x87\x07\x87\u091F\n\x87\f\x87\x0E\x87\u0922\v\x87";
	private static readonly _serializedATNSegment1: string =
		"\x03\x88\x03\x88\x03\x89\x03\x89\x06\x89\u0928\n\x89\r\x89\x0E\x89\u0929" +
		"\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x06\x8A\u0930\n\x8A\r\x8A\x0E\x8A\u0931" +
		"\x03\x8B\x03\x8B\x07\x8B\u0936\n\x8B\f\x8B\x0E\x8B\u0939\v\x8B\x03\x8C" +
		"\x03\x8C\x05\x8C\u093D\n\x8C\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x03\x8D\x07" +
		"\x8D\u0944\n\x8D\f\x8D\x0E\x8D\u0947\v\x8D\x06\x8D\u0949\n\x8D\r\x8D\x0E" +
		"\x8D\u094A\x03\x8E\x03\x8E\x03\x8E\x05\x8E\u0950\n\x8E\x03\x8F\x03\x8F" +
		"\x03\x90\x03\x90\x03\x91\x03\x91\x03\x92\x03\x92\x06\x92\u095A\n\x92\r" +
		"\x92\x0E\x92\u095B\x03\x93\x03\x93\x06\x93\u0960\n\x93\r\x93\x0E\x93\u0961" +
		"\x03\x93\x07\x93\u0965\n\x93\f\x93\x0E\x93\u0968\v\x93\x03\x94\x03\x94" +
		"\x03\x94\x05\x94\u096D\n\x94\x03\x94\x03\x94\x06\x94\u0971\n\x94\r\x94" +
		"\x0E\x94\u0972\x03\x95\x03\x95\x05\x95\u0977\n\x95\x03\x96\x03\x96\x03" +
		"\x97\x03\x97\x05\x97\u097D\n\x97\x03\x97\x03\x97\x03\x97\x06\x97\u0982" +
		"\n\x97\r\x97\x0E\x97\u0983\x03\x98\x03\x98\x03\x98\x05\x98\u0989\n\x98" +
		"\x03\x98\x03\x98\x06\x98\u098D\n\x98\r\x98\x0E\x98\u098E\x03\x98\x03\x98" +
		"\x05\x98\u0993\n\x98\x03\x98\x03\x98\x03\x98\x06\x98\u0998\n\x98\r\x98" +
		"\x0E\x98\u0999\x03\x98\x03\x98\x05\x98\u099E\n\x98\x05\x98\u09A0\n\x98" +
		"\x03\x98\x05\x98\u09A3\n\x98\x03\x99\x03\x99\x03\x99\x03\x9A\x03\x9A\x03" +
		"\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x05\x9D\u09B1\n\x9D" +
		"\x03\x9D\x05\x9D\u09B4\n\x9D\x03\x9D\x03\x9D\x05\x9D\u09B8\n\x9D\x03\x9D" +
		"\x06\x9D\u09BB\n\x9D\r\x9D\x0E\x9D\u09BC\x03\x9D\x03\x9D\x05\x9D\u09C1" +
		"\n\x9D\x03\x9D\x03\x9D\x05\x9D\u09C5\n\x9D\x03\x9E\x03\x9E\x03\x9F\x03" +
		"\x9F\x03\x9F\x05\x9F\u09CC\n\x9F\x03\x9F\x07\x9F\u09CF\n\x9F\f\x9F\x0E" +
		"\x9F\u09D2\v\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u09D7\n\x9F\x03\x9F\x07" +
		"\x9F\u09DA\n\x9F\f\x9F\x0E\x9F\u09DD\v\x9F\x03\x9F\x03\x9F\x07\x9F\u09E1" +
		"\n\x9F\f\x9F\x0E\x9F\u09E4\v\x9F\x06\x9F\u09E6\n\x9F\r\x9F\x0E\x9F\u09E7" +
		"\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x07\x9F\u09EE\n\x9F\f\x9F\x0E\x9F\u09F1" +
		"\v\x9F\x05\x9F\u09F3\n\x9F\x03\x9F\x05\x9F\u09F6\n\x9F\x03\xA0\x03\xA0" +
		"\x05\xA0\u09FA\n\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0\u09FF\n\xA0\x03\xA0" +
		"\x03\xA0\x03\xA0\x05\xA0\u0A04\n\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05" +
		"\xA1\u0A0A\n\xA1\x03\xA2\x03\xA2\x05\xA2\u0A0E\n\xA2\x03\xA3\x03\xA3\x03" +
		"\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0A16\n\xA3\x03\xA3\x03\xA3\x05\xA3" +
		"\u0A1A\n\xA3\x06\xA3\u0A1C\n\xA3\r\xA3\x0E\xA3\u0A1D\x03\xA3\x05\xA3\u0A21" +
		"\n\xA3\x03\xA3\x05\xA3\u0A24\n\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03" +
		"\xA4\x03\xA4\x05\xA4\u0A2C\n\xA4\x03\xA4\x03\xA4\x05\xA4\u0A30\n\xA4\x03" +
		"\xA4\x03\xA4\x03\xA4\x05\xA4\u0A35\n\xA4\x03\xA4\x05\xA4\u0A38\n\xA4\x03" +
		"\xA5\x03\xA5\x03\xA6\x03\xA6\x05\xA6\u0A3E\n\xA6\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x05\xA7\u0A44\n\xA7\x03\xA8\x03\xA8\x03\xA8\x07\xA8\u0A49\n\xA8" +
		"\f\xA8\x0E\xA8\u0A4C\v\xA8\x06\xA8\u0A4E\n\xA8\r\xA8\x0E\xA8\u0A4F\x03" +
		"\xA8\x05\xA8\u0A53\n\xA8\x03\xA9\x03\xA9\x03\xA9\x07\xA9\u0A58\n\xA9\f" +
		"\xA9\x0E\xA9\u0A5B\v\xA9\x06\xA9\u0A5D\n\xA9\r\xA9\x0E\xA9\u0A5E\x03\xA9" +
		"\x05\xA9\u0A62\n\xA9\x03\xAA\x03\xAA\x03\xAA\x05\xAA\u0A67\n\xAA\x03\xAA" +
		"\x03\xAA\x05\xAA\u0A6B\n\xAA\x03\xAA\x03\xAA\x05\xAA\u0A6F\n\xAA\x05\xAA" +
		"\u0A71\n\xAA\x05\xAA\u0A73\n\xAA\x03\xAA\x05\xAA\u0A76\n\xAA\x03\xAB\x03" +
		"\xAB\x03\xAB\x03\xAB\x05\xAB\u0A7C\n\xAB\x03\xAB\x05\xAB\u0A7F\n\xAB\x03" +
		"\xAC\x03\xAC\x05\xAC\u0A83\n\xAC\x03\xAD\x03\xAD\x05\xAD\u0A87\n\xAD\x03" +
		"\xAD\x03\xAD\x05\xAD\u0A8B\n\xAD\x03\xAE\x03\xAE\x05\xAE\u0A8F\n\xAE\x03" +
		"\xAE\x03\xAE\x05\xAE\u0A93\n\xAE\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u0A98" +
		"\n\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB1\x05\xB1\u0A9E\n\xB1\x03\xB1\x03" +
		"\xB1\x03\xB2\x05\xB2\u0AA3\n\xB2\x03\xB2\x03\xB2\x05\xB2\u0AA7\n\xB2\x03" +
		"\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03" +
		"\xB3\x03\xB3\x05\xB3\u0AB4\n\xB3\x03\xB4\x03\xB4\x03\xB5\x05\xB5\u0AB9" +
		"\n\xB5\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB7\x05\xB7\u0AC0\n\xB7\x03" +
		"\xB7\x03\xB7\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x05\xB9\u0AC8\n\xB9\x03\xB9" +
		"\x03\xB9\x05\xB9\u0ACC\n\xB9\x05\xB9\u0ACE\n\xB9\x03\xB9\x03\xB9\x03\xBA" +
		"\x05\xBA\u0AD3\n\xBA\x03\xBA\x03\xBA\x05\xBA\u0AD7\n\xBA\x03\xBA\x03\xBA" +
		"\x03\xBB\x05\xBB\u0ADC\n\xBB\x03\xBB\x03\xBB\x05\xBB\u0AE0\n\xBB\x03\xBB" +
		"\x03\xBB\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u0AE9\n\xBD\x03" +
		"\xBD\x05\xBD\u0AEC\n\xBD\x03\xBD\x05\xBD\u0AEF\n\xBD\x03\xBE\x03\xBE\x03" +
		"\xBF\x03\xBF\x03\xBF\x05\xBF\u0AF6\n\xBF\x06\xBF\u0AF8\n\xBF\r\xBF\x0E" +
		"\xBF\u0AF9\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u0AFF\n\xBF\x03\xBF\x05\xBF" +
		"\u0B02\n\xBF\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u0B07\n\xC0\x06\xC0\u0B09" +
		"\n\xC0\r\xC0\x0E\xC0\u0B0A\x03\xC1\x03\xC1\x05\xC1\u0B0F\n\xC1\x03\xC1" +
		"\x03\xC1\x05\xC1\u0B13\n\xC1\x03\xC1\x03\xC1\x05\xC1\u0B17\n\xC1\x03\xC1" +
		"\x05\xC1\u0B1A\n\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u0B1F\n\xC1\x05\xC1" +
		"\u0B21\n\xC1\x03\xC2\x03\xC2\x06\xC2\u0B25\n\xC2\r\xC2\x0E\xC2\u0B26\x03" +
		"\xC3\x03\xC3\x03\xC3\x05\xC3\u0B2C\n\xC3\x03\xC3\x05\xC3\u0B2F\n\xC3\x03" +
		"\xC3\x05\xC3\u0B32\n\xC3\x03\xC3\x05\xC3\u0B35\n\xC3\x03\xC4\x03\xC4\x03" +
		"\xC4\x03\xC5\x03\xC5\x06\xC5\u0B3C\n\xC5\r\xC5\x0E\xC5\u0B3D\x03\xC6\x03" +
		"\xC6\x05\xC6\u0B42\n\xC6\x03\xC6\x06\xC6\u0B45\n\xC6\r\xC6\x0E\xC6\u0B46" +
		"\x05\xC6\u0B49\n\xC6\x03\xC7\x05\xC7\u0B4C\n\xC7\x03\xC7\x03\xC7\x05\xC7" +
		"\u0B50\n\xC7\x03\xC7\x03\xC7\x05\xC7\u0B54\n\xC7\x03\xC7\x03\xC7\x05\xC7" +
		"\u0B58\n\xC7\x03\xC7\x05\xC7\u0B5B\n\xC7\x03\xC8\x03\xC8\x03\xC8\x05\xC8" +
		"\u0B60\n\xC8\x03\xC9\x03\xC9\x05\xC9\u0B64\n\xC9\x03\xCA\x03\xCA\x03\xCA" +
		"\x03\xCA\x03\xCA\x05\xCA\u0B6B\n\xCA\x03\xCA\x03\xCA\x06\xCA\u0B6F\n\xCA" +
		"\r\xCA\x0E\xCA\u0B70\x03\xCB\x03\xCB\x06\xCB\u0B75\n\xCB\r\xCB\x0E\xCB" +
		"\u0B76\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B7C\n\xCB\x06\xCB\u0B7E\n\xCB" +
		"\r\xCB\x0E\xCB\u0B7F\x03\xCB\x03\xCB\x07\xCB\u0B84\n\xCB\f\xCB\x0E\xCB" +
		"\u0B87\v\xCB\x03\xCB\x05\xCB\u0B8A\n\xCB\x03\xCB\x06\xCB\u0B8D\n\xCB\r" +
		"\xCB\x0E\xCB\u0B8E\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B94\n\xCB\x06\xCB" +
		"\u0B96\n\xCB\r\xCB\x0E\xCB\u0B97\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x05\xCB\u0BA0\n\xCB\x05\xCB\u0BA2\n\xCB\x03\xCB\x05\xCB\u0BA5" +
		"\n\xCB\x03\xCB\x05\xCB\u0BA8\n\xCB\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x05" +
		"\xCD\u0BAE\n\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x05\xCE" +
		"\u0BB6\n\xCE\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0BBB\n\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x05\xCF\u0BC0\n\xCF\x05\xCF\u0BC2\n\xCF\x03\xD0\x03\xD0\x03\xD0" +
		"\x05\xD0\u0BC7\n\xD0\x03\xD0\x03\xD0\x03\xD0\x05\xD0\u0BCC\n\xD0\x05\xD0" +
		"\u0BCE\n\xD0\x03\xD1\x03\xD1\x03\xD1\x05\xD1\u0BD3\n\xD1\x03\xD1\x03\xD1" +
		"\x03\xD1\x05\xD1\u0BD8\n\xD1\x05\xD1\u0BDA\n\xD1\x03\xD2\x03\xD2\x03\xD2" +
		"\x05\xD2\u0BDF\n\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u0BE4\n\xD2\x05\xD2" +
		"\u0BE6\n\xD2\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0BEB\n\xD3\x03\xD3\x03\xD3" +
		"\x03\xD3\x05\xD3\u0BF0\n\xD3\x05\xD3\u0BF2\n\xD3\x03\xD4\x03\xD4\x03\xD4" +
		"\x05\xD4\u0BF7\n\xD4\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u0BFC\n\xD4\x05\xD4" +
		"\u0BFE\n\xD4\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u0C03\n\xD5\x03\xD5\x03\xD5" +
		"\x05\xD5\u0C07\n\xD5\x03\xD5\x05\xD5\u0C0A\n\xD5\x03\xD6\x03\xD6\x03\xD7" +
		"\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0C12\n\xD7\x03\xD7\x03\xD7\x05\xD7\u0C16" +
		"\n\xD7\x03\xD7\x05\xD7\u0C19\n\xD7\x03\xD7\x05\xD7\u0C1C\n\xD7\x03\xD8" +
		"\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD9\x03\xD9\x03\xD9\x06\xD9\u0C26" +
		"\n\xD9\r\xD9\x0E\xD9\u0C27\x03\xD9\x03\xD9\x05\xD9\u0C2C\n\xD9\x03\xD9" +
		"\x05\xD9\u0C2F\n\xD9\x03\xDA\x03\xDA\x05\xDA\u0C33\n\xDA\x03\xDA\x03\xDA" +
		"\x05\xDA\u0C37\n\xDA\x03\xDA\x03\xDA\x06\xDA\u0C3B\n\xDA\r\xDA\x0E\xDA" +
		"\u0C3C\x03\xDA\x03\xDA\x05\xDA\u0C41\n\xDA\x03\xDA\x05\xDA\u0C44\n\xDA" +
		"\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u0C49\n\xDB\x03\xDB\x05\xDB\u0C4C\n\xDB" +
		"\x03\xDB\x05\xDB\u0C4F\n\xDB\x03\xDC\x05\xDC\u0C52\n\xDC\x03\xDC\x03\xDC" +
		"\x05\xDC\u0C56\n\xDC\x03\xDC\x03\xDC\x05\xDC\u0C5A\n\xDC\x05\xDC\u0C5C" +
		"\n\xDC\x03\xDD\x03\xDD\x05\xDD\u0C60\n\xDD\x03\xDD\x03\xDD\x05\xDD\u0C64" +
		"\n\xDD\x03\xDE\x03\xDE\x05\xDE\u0C68\n\xDE\x03\xDE\x03\xDE\x05\xDE\u0C6C" +
		"\n\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u0C72\n\xDF\x03\xE0\x05" +
		"\xE0\u0C75\n\xE0\x03\xE0\x03\xE0\x05\xE0\u0C79\n\xE0\x03\xE0\x03\xE0\x03" +
		"\xE1\x05\xE1\u0C7E\n\xE1\x03\xE1\x03\xE1\x05\xE1\u0C82\n\xE1\x03\xE1\x03" +
		"\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03" +
		"\xE2\x03\xE2\x05\xE2\u0C90\n\xE2\x03\xE3\x03\xE3\x07\xE3\u0C94\n\xE3\f" +
		"\xE3\x0E\xE3\u0C97\v\xE3\x03\xE4\x05\xE4\u0C9A\n\xE4\x03\xE4\x03\xE4\x05" +
		"\xE4\u0C9E\n\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x05\xE5\u0CA4\n\xE5\x03" +
		"\xE5\x03\xE5\x03\xE6\x05\xE6\u0CA9\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE7" +
		"\x03\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u0CB5\n\xE8\x05" +
		"\xE8\u0CB7\n\xE8\x03\xE9\x03\xE9\x03\xE9\x05\xE9\u0CBC\n\xE9\x03\xE9\x03" +
		"\xE9\x05\xE9\u0CC0\n\xE9\x03\xE9\x03\xE9\x03\xE9\x05\xE9\u0CC5\n\xE9\x03" +
		"\xE9\x03\xE9\x05\xE9\u0CC9\n\xE9\x03\xE9\x03\xE9\x05\xE9\u0CCD\n\xE9\x03" +
		"\xEA\x03\xEA\x03\xEB\x03\xEB\x05\xEB\u0CD3\n\xEB\x03\xEC\x03\xEC\x03\xEC" +
		"\x03\xEC\x05\xEC\u0CD9\n\xEC\x05\xEC\u0CDB\n\xEC\x03\xEC\x03\xEC\x05\xEC" +
		"\u0CDF\n\xEC\x05\xEC\u0CE1\n\xEC\x03\xED\x03\xED\x05\xED\u0CE5\n\xED\x03" +
		"\xED\x03\xED\x05\xED\u0CE9\n\xED\x03\xED\x03\xED\x05\xED\u0CED\n\xED\x03" +
		"\xEE\x03\xEE\x03\xEF\x03\xEF\x03\xF0\x05\xF0\u0CF4\n\xF0\x03\xF0\x03\xF0" +
		"\x03\xF0\x07\xF0\u0CF9\n\xF0\f\xF0\x0E\xF0\u0CFC\v\xF0\x03\xF1\x05\xF1" +
		"\u0CFF\n\xF1\x03\xF1\x03\xF1\x03\xF1\x07\xF1\u0D04\n\xF1\f\xF1\x0E\xF1" +
		"\u0D07\v\xF1\x03\xF2\x05\xF2\u0D0A\n\xF2\x03\xF2\x03\xF2\x03\xF2\x03\xF2" +
		"\x07\xF2\u0D10\n\xF2\f\xF2\x0E\xF2\u0D13\v\xF2\x03\xF3\x05\xF3\u0D16\n" +
		"\xF3\x03\xF3\x03\xF3\x03\xF3\x07\xF3\u0D1B\n\xF3\f\xF3\x0E\xF3\u0D1E\v" +
		"\xF3\x03\xF4\x05\xF4\u0D21\n\xF4\x03\xF4\x03\xF4\x03\xF4\x07\xF4\u0D26" +
		"\n\xF4\f\xF4\x0E\xF4\u0D29\v\xF4\x03\xF5\x03\xF5\x05\xF5\u0D2D\n\xF5\x03" +
		"\xF5\x03\xF5\x07\xF5\u0D31\n\xF5\f\xF5\x0E\xF5\u0D34\v\xF5\x03\xF6\x03" +
		"\xF6\x03\xF6\x03\xF6\x07\xF6\u0D3A\n\xF6\f\xF6\x0E\xF6\u0D3D\v\xF6\x03" +
		"\xF6\x03\xF6\x07\xF6\u0D41\n\xF6\f\xF6\x0E\xF6\u0D44\v\xF6\x03\xF7\x03" +
		"\xF7\x07\xF7\u0D48\n\xF7\f\xF7\x0E\xF7\u0D4B\v\xF7\x03\xF8\x03\xF8\x07" +
		"\xF8\u0D4F\n\xF8\f\xF8\x0E\xF8\u0D52\v\xF8\x03\xF9\x03\xF9\x03\xF9\x03" +
		"\xF9\x07\xF9\u0D58\n\xF9\f\xF9\x0E\xF9\u0D5B\v\xF9\x03\xF9\x07\xF9\u0D5E" +
		"\n\xF9\f\xF9\x0E\xF9\u0D61\v\xF9\x03\xFA\x03\xFA\x05\xFA\u0D65\n\xFA\x03" +
		"\xFB\x03\xFB\x03\xFB\x03\xFB\x07\xFB\u0D6B\n\xFB\f\xFB\x0E\xFB\u0D6E\v" +
		"\xFB\x03\xFB\x07\xFB\u0D71\n\xFB\f\xFB\x0E\xFB\u0D74\v\xFB\x03\xFC\x03" +
		"\xFC\x03\xFC\x03\xFC\x07\xFC\u0D7A\n\xFC\f\xFC\x0E\xFC\u0D7D\v\xFC\x03" +
		"\xFC\x07\xFC\u0D80\n\xFC\f\xFC\x0E\xFC\u0D83\v\xFC\x03\xFD\x03\xFD\x07" +
		"\xFD\u0D87\n\xFD\f\xFD\x0E\xFD\u0D8A\v\xFD\x03\xFE\x03\xFE\x03\xFE\x03" +
		"\xFE\x07\xFE\u0D90\n\xFE\f\xFE\x0E\xFE\u0D93\v\xFE\x03\xFE\x07\xFE\u0D96" +
		"\n\xFE\f\xFE\x0E\xFE\u0D99\v\xFE\x03\xFF\x03\xFF\x03\xFF\x07\xFF\u0D9E" +
		"\n\xFF\f\xFF\x0E\xFF\u0DA1\v\xFF\x03\xFF\x03\xFF\x07\xFF\u0DA5\n\xFF\f" +
		"\xFF\x0E\xFF\u0DA8\v\xFF\x03\u0100\x03\u0100\x03\u0100\x07\u0100\u0DAD" +
		"\n\u0100\f\u0100\x0E\u0100\u0DB0\v\u0100\x03\u0100\x03\u0100\x07\u0100" +
		"\u0DB4\n\u0100\f\u0100\x0E\u0100\u0DB7\v\u0100\x03\u0101\x03\u0101\x03" +
		"\u0101\x07\u0101\u0DBC\n\u0101\f\u0101\x0E\u0101\u0DBF\v\u0101\x03\u0101" +
		"\x03\u0101\x07\u0101\u0DC3\n\u0101\f\u0101\x0E\u0101\u0DC6\v\u0101\x03" +
		"\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03" +
		"\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x05" +
		"\u0102\u0DD6\n\u0102\x03\u0103\x05\u0103\u0DD9\n\u0103\x03\u0103\x03\u0103" +
		"\x03\u0104\x05\u0104\u0DDE\n\u0104\x03\u0104\x03\u0104\x03\u0105\x03\u0105" +
		"\x03\u0105\x05\u0105\u0DE5\n\u0105\x03\u0105\x03\u0105\x05\u0105\u0DE9" +
		"\n\u0105\x03\u0105\x07\u0105\u0DEC\n\u0105\f\u0105\x0E\u0105\u0DEF\v\u0105" +
		"\x03\u0105\x03\u0105\x07\u0105\u0DF3\n\u0105\f\u0105\x0E\u0105\u0DF6\v" +
		"\u0105\x03\u0106\x03\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03" +
		"\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x05" +
		"\u0107\u0E05\n\u0107\x03\u0108\x03\u0108\x05\u0108\u0E09\n\u0108\x03\u0109" +
		"\x03\u0109\x05\u0109\u0E0D\n\u0109\x03\u010A\x03\u010A\x05\u010A\u0E11" +
		"\n\u010A\x03\u010A\x03\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x05" +
		"\u010B\u0E19\n\u010B\x03\u010C\x03\u010C\x03\u010D\x03\u010D\x03\u010E" +
		"\x03\u010E\x05\u010E\u0E21\n\u010E\x03\u010E\x03\u010E\x05\u010E\u0E25" +
		"\n\u010E\x05\u010E\u0E27\n\u010E\x03\u010E\x06\u010E\u0E2A\n\u010E\r\u010E" +
		"\x0E\u010E\u0E2B\x03\u010F\x03\u010F\x05\u010F\u0E30\n\u010F\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u0E37\n\u0110\x03\u0111" +
		"\x03\u0111\x03\u0111\x03\u0112\x03\u0112\x03\u0113\x03\u0113\x03\u0114" +
		"\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u0E44\n\u0114\x03\u0115\x03\u0115" +
		"\x03\u0115\x07\u0115\u0E49\n\u0115\f\u0115\x0E\u0115\u0E4C\v\u0115\x03" +
		"\u0115\x05\u0115\u0E4F\n\u0115\x03\u0116\x03\u0116\x05\u0116\u0E53\n\u0116" +
		"\x03\u0116\x06\u0116\u0E56\n\u0116\r\u0116\x0E\u0116\u0E57\x03\u0117\x03" +
		"\u0117\x03\u0118\x03\u0118\x05\u0118\u0E5E\n\u0118\x03\u0118\x05\u0118" +
		"\u0E61\n\u0118\x03\u0118\x06\u0118\u0E64\n\u0118\r\u0118\x0E\u0118\u0E65" +
		"\x03\u0119\x03\u0119\x03\u011A\x03\u011A\x05\u011A\u0E6C\n\u011A\x03\u011A" +
		"\x03\u011A\x03\u011A\x03\u011A\x05\u011A\u0E72\n\u011A\x03\u011A\x03\u011A" +
		"\x05\u011A\u0E76\n\u011A\x03\u011A\x03\u011A\x05\u011A\u0E7A\n\u011A\x03" +
		"\u011B\x03\u011B\x03\u011C\x03\u011C\x03\u011D\x03\u011D\x03\u011E\x03" +
		"\u011E\x05\u011E\u0E84\n\u011E\x03\u011E\x07\u011E\u0E87\n\u011E\f\u011E" +
		"\x0E\u011E\u0E8A\v\u011E\x03\u011E\x03\u011E\x07\u011E\u0E8E\n\u011E\f" +
		"\u011E\x0E\u011E\u0E91\v\u011E\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x05\u011F\u0E9E\n\u011F\x03\u0120\x03\u0120\x03\u0120\x05\u0120\u0EA3" +
		"\n\u0120\x03\u0121\x03\u0121\x05\u0121\u0EA7\n\u0121\x03\u0121\x03\u0121" +
		"\x03\u0122\x03\u0122\x05\u0122\u0EAD\n\u0122\x03\u0122\x03\u0122\x03\u0123" +
		"\x03\u0123\x05\u0123\u0EB3\n\u0123\x03\u0124\x03\u0124\x05\u0124\u0EB7" +
		"\n\u0124\x03\u0124\x05\u0124\u0EBA\n\u0124\x03\u0124\x03\u0124\x03\u0125" +
		"\x03\u0125\x05\u0125\u0EC0\n\u0125\x05\u0125\u0EC2\n\u0125\x03\u0125\x03" +
		"\u0125\x03\u0126\x03\u0126\x05\u0126\u0EC8\n\u0126\x03\u0126\x03\u0126" +
		"\x03\u0127\x03\u0127\x03\u0127\x05\u0127\u0ECF\n\u0127\x03\u0127\x03\u0127" +
		"\x03\u0128\x03\u0128\x05\u0128\u0ED5\n\u0128\x03\u0128\x05\u0128\u0ED8" +
		"\n\u0128\x03\u0128\x03\u0128\x03\u0129\x03\u0129\x05\u0129\u0EDE\n\u0129" +
		"\x05\u0129\u0EE0\n\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u0EE5" +
		"\n\u0129\x05\u0129\u0EE7\n\u0129\x03\u012A\x03\u012A\x06\u012A\u0EEB\n" +
		"\u012A\r\u012A\x0E\u012A\u0EEC\x03\u012A\x05\u012A\u0EF0\n\u012A\x03\u012A" +
		"\x07\u012A\u0EF3\n\u012A\f\u012A\x0E\u012A\u0EF6\v\u012A\x06\u012A\u0EF8" +
		"\n\u012A\r\u012A\x0E\u012A\u0EF9\x03\u012A\x03\u012A\x05\u012A\u0EFE\n" +
		"\u012A\x03\u012A\x05\u012A\u0F01\n\u012A\x03\u012B\x03\u012B\x03\u012C" +
		"\x03\u012C\x03\u012D\x03\u012D\x03\u012E\x03\u012E\x03\u012F\x03\u012F" +
		"\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130" +
		"\x05\u0130\u0F14\n\u0130\x03\u0131\x03\u0131\x03\u0131\x05\u0131\u0F19" +
		"\n\u0131\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u0F1E\n\u0132\x03\u0133" +
		"\x03\u0133\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u0F25\n\u0134\x03\u0134" +
		"\x03\u0134\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u0F2C\n\u0135\x03\u0135" +
		"\x03\u0135\x03\u0136\x03\u0136\x03\u0136\x05\u0136\u0F33\n\u0136\x03\u0137" +
		"\x03\u0137\x03\u0137\x05\u0137\u0F38\n\u0137\x03\u0138\x03\u0138\x03\u0139" +
		"\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x05\u0139\u0F41\n\u0139\x03\u013A" +
		"\x03\u013A\x05\u013A\u0F45\n\u013A\x03\u013A\x03\u013A\x05\u013A\u0F49" +
		"\n\u013A\x03\u013A\x03\u013A\x05\u013A\u0F4D\n\u013A\x03\u013B\x03\u013B" +
		"\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x05\u013C\u0F55\n\u013C\x03\u013D" +
		"\x03\u013D\x03\u013D\x05\u013D\u0F5A\n\u013D\x03\u013D\x03\u013D\x05\u013D" +
		"\u0F5E\n\u013D\x05\u013D\u0F60\n\u013D\x03\u013D\x03\u013D\x05\u013D\u0F64" +
		"\n\u013D\x03\u013D\x03\u013D\x05\u013D\u0F68\n\u013D\x03\u013D\x03\u013D" +
		"\x03\u013D\x05\u013D\u0F6D\n\u013D\x03\u013D\x03\u013D\x03\u013D\x05\u013D" +
		"\u0F72\n\u013D\x03\u013D\x03\u013D\x05\u013D\u0F76\n\u013D\x03\u013E\x03" +
		"\u013E\x05\u013E\u0F7A\n\u013E\x03\u013E\x03\u013E\x05\u013E\u0F7E\n\u013E" +
		"\x05\u013E\u0F80\n\u013E\x03\u013E\x06\u013E\u0F83\n\u013E\r\u013E\x0E" +
		"\u013E\u0F84\x03\u013E\x03\u013E\x07\u013E\u0F89\n\u013E\f\u013E\x0E\u013E" +
		"\u0F8C\v\u013E\x05\u013E\u0F8E\n\u013E\x03\u013F\x03\u013F\x03\u013F\x03" +
		"\u0140\x03\u0140\x03\u0141\x03\u0141\x03\u0142\x03\u0142\x03\u0143\x03" +
		"\u0143\x03\u0144\x03\u0144\x03\u0145\x03\u0145\x03\u0146\x03\u0146\x05" +
		"\u0146\u0FA1\n\u0146\x05\u0146\u0FA3\n\u0146\x03\u0146\x03\u0146\x03\u0147" +
		"\x03\u0147\x03\u0147\x05\u0147\u0FAA\n\u0147\x03\u0147\x03\u0147\x05\u0147" +
		"\u0FAE\n\u0147\x03\u0147\x03\u0147\x05\u0147\u0FB2\n\u0147\x03\u0147\x03" +
		"\u0147\x05\u0147\u0FB6\n\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
		"\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
		"\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
		"\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x05\u0147\u0FCE\n\u0147\x03\u0148" +
		"\x03\u0148\x05\u0148\u0FD2\n\u0148\x03\u0148\x03\u0148\x03\u0149\x03\u0149" +
		"\x03\u014A\x03\u014A\x03\u014B\x03\u014B\x03\u014C\x03\u014C\x05\u014C" +
		"\u0FDE\n\u014C\x03\u014D\x03\u014D\x05\u014D\u0FE2\n\u014D\x03\u014D\x03" +
		"\u014D\x05\u014D\u0FE6\n\u014D\x05\u014D\u0FE8\n\u014D\x03\u014D\x06\u014D" +
		"\u0FEB\n\u014D\r\u014D\x0E\u014D\u0FEC\x03\u014E\x03\u014E\x03\u014F\x03" +
		"\u014F\x05\u014F\u0FF3\n\u014F\x03\u014F\x03\u014F\x05\u014F\u0FF7\n\u014F" +
		"\x03\u014F\x05\u014F\u0FFA\n\u014F\x03\u014F\x03\u014F\x05\u014F\u0FFE" +
		"\n\u014F\x03\u014F\x05\u014F\u1001\n\u014F\x03\u014F\x05\u014F\u1004\n" +
		"\u014F\x03\u014F\x05\u014F\u1007\n\u014F\x03\u014F\x03\u014F\x05\u014F" +
		"\u100B\n\u014F\x03\u014F\x05\u014F\u100E\n\u014F\x03\u014F\x05\u014F\u1011" +
		"\n\u014F\x03\u014F\x03\u014F\x05\u014F\u1015\n\u014F\x03\u0150\x03\u0150" +
		"\x05\u0150\u1019\n\u0150\x03\u0151\x03\u0151\x05\u0151\u101D\n\u0151\x03" +
		"\u0152\x03\u0152\x05\u0152\u1021\n\u0152\x03\u0153\x03\u0153\x05\u0153" +
		"\u1025\n\u0153\x03\u0154\x03\u0154\x03\u0154\x05\u0154\u102A\n\u0154\x03" +
		"\u0154\x03\u0154\x05\u0154\u102E\n\u0154\x05\u0154\u1030\n\u0154\x03\u0154" +
		"\x06\u0154\u1033\n\u0154\r\u0154\x0E\u0154\u1034\x03\u0155\x03\u0155\x03" +
		"\u0156\x03\u0156\x03\u0156\x03\u0156\x05\u0156\u103D\n\u0156\x03\u0156" +
		"\x03\u0156\x03\u0157\x03\u0157\x05\u0157\u1043\n\u0157\x03\u0158\x03\u0158" +
		"\x03\u0158\x05\u0158\u1048\n\u0158\x03\u0158\x03\u0158\x05\u0158\u104C" +
		"\n\u0158\x05\u0158\u104E\n\u0158\x03\u0158\x03\u0158\x03\u0159\x03\u0159" +
		"\x03\u0159\x03\u015A\x05\u015A\u1056\n\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x05\u015A\u105B\n\u015A\x03\u015A\x03\u015A\x05\u015A\u105F\n\u015A\x03" +
		"\u015A\x05\u015A\u1062\n\u015A\x03\u015A\x03\u015A\x05\u015A\u1066\n\u015A" +
		"\x03\u015A\x05\u015A\u1069\n\u015A\x03\u015A\x05\u015A\u106C\n\u015A\x03" +
		"\u015A\x05\u015A\u106F\n\u015A\x03\u015A\x03\u015A\x05\u015A\u1073\n\u015A" +
		"\x03\u015A\x05\u015A\u1076\n\u015A\x03\u015A\x03\u015A\x05\u015A\u107A" +
		"\n\u015A\x03\u015A\x05\u015A\u107D\n\u015A\x05\u015A\u107F\n\u015A\x03" +
		"\u015B\x03\u015B\x03\u015C\x03\u015C\x03\u015D\x03\u015D\x03\u015E\x03" +
		"\u015E\x03\u015E\x05\u015E\u108A\n\u015E\x03\u015E\x07\u015E\u108D\n\u015E" +
		"\f\u015E\x0E\u015E\u1090\v\u015E\x03\u015E\x03\u015E\x07\u015E\u1094\n" +
		"\u015E\f\u015E\x0E\u015E\u1097\v\u015E\x03\u015F\x03\u015F\x03\u015F\x03" +
		"\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03" +
		"\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03" +
		"\u015F\x03\u015F\x03\u015F\x03\u015F\x05\u015F\u10AE\n\u015F\x03\u0160" +
		"\x03\u0160\x05\u0160\u10B2\n\u0160\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x05\u0161\u10B8\n\u0161\x03\u0161\x05\u0161\u10BB\n\u0161\x03\u0162\x03" +
		"\u0162\x05\u0162\u10BF\n\u0162\x03\u0162\x03\u0162\x03\u0163\x03\u0163" +
		"\x05\u0163\u10C5\n\u0163\x03\u0163\x05\u0163\u10C8\n\u0163\x03\u0163\x05" +
		"\u0163\u10CB\n\u0163\x03\u0163\x03\u0163\x03\u0164\x03\u0164\x05\u0164" +
		"\u10D1\n\u0164\x03\u0164\x05\u0164\u10D4\n\u0164\x03\u0164\x05\u0164\u10D7" +
		"\n\u0164\x03\u0164\x03\u0164\x03\u0165\x03\u0165\x03\u0166\x03\u0166\x03" +
		"\u0167\x03\u0167\x03\u0168\x03\u0168\x03\u0169\x03\u0169\x03\u0169\x03" +
		"\u016A\x03\u016A\x03\u016B\x03\u016B\x03\u016C\x03\u016C\x03\u016D\x03" +
		"\u016D\x03\u016E\x03\u016E\x03\u016F\x03\u016F\x03\u0170\x03\u0170\x05" +
		"\u0170\u10F4\n\u0170\x03\u0170\x03\u0170\x03\u0171\x03\u0171\x05\u0171" +
		"\u10FA\n\u0171\x03\u0171\x03\u0171\x03\u0172\x03\u0172\x03\u0172\x03\u0173" +
		"\x03\u0173\x03\u0173\x03\u0174\x03\u0174\x03\u0174\x05\u0174\u1107\n\u0174" +
		"\x03\u0175\x03\u0175\x03\u0175\x03\u0176\x03\u0176\x03\u0177\x03\u0177" +
		"\x05\u0177\u1110\n\u0177\x03\u0178\x03\u0178\x03\u0179\x03\u0179\x03\u0179" +
		"\x07\u0179\u1117\n\u0179\f\u0179\x0E\u0179\u111A\v\u0179\x03\u0179\x03" +
		"\u0179\x05\u0179\u111E\n\u0179\x03\u0179\x05\u0179\u1121\n\u0179\x03\u0179" +
		"\x03\u0179\x07\u0179\u1125\n\u0179\f\u0179\x0E\u0179\u1128\v\u0179\x03" +
		"\u017A\x03\u017A\x03\u017B\x05\u017B\u112D\n\u017B\x03\u017B\x03\u017B" +
		"\x05\u017B\u1131\n\u017B\x03\u017B\x03\u017B\x05\u017B\u1135\n\u017B\x05" +
		"\u017B\u1137\n\u017B\x03\u017B\x05\u017B\u113A\n\u017B\x03\u017C\x05\u017C" +
		"\u113D\n\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017D\x03\u017D\x03\u017E" +
		"\x03\u017E\x03\u017E\x07\u017E\u1147\n\u017E\f\u017E\x0E\u017E\u114A\v" +
		"\u017E\x03\u017E\x07\u017E\u114D\n\u017E\f\u017E\x0E\u017E\u1150\v\u017E" +
		"\x03\u017F\x03\u017F\x03\u017F\x07\u017F\u1155\n\u017F\f\u017F\x0E\u017F" +
		"\u1158\v\u017F\x03\u017F\x07\u017F\u115B\n\u017F\f\u017F\x0E\u017F\u115E" +
		"\v\u017F\x03\u0180\x03\u0180\x03\u0180\x07\u0180\u1163\n\u0180\f\u0180" +
		"\x0E\u0180\u1166\v\u0180\x03\u0180\x07\u0180\u1169\n\u0180\f\u0180\x0E" +
		"\u0180\u116C\v\u0180\x03\u0181\x03\u0181\x03\u0181\x07\u0181\u1171\n\u0181" +
		"\f\u0181\x0E\u0181\u1174\v\u0181\x03\u0181\x07\u0181\u1177\n\u0181\f\u0181" +
		"\x0E\u0181\u117A\v\u0181\x03\u0182\x03\u0182\x03\u0182\x07\u0182\u117F" +
		"\n\u0182\f\u0182\x0E\u0182\u1182\v\u0182\x03\u0182\x05\u0182\u1185\n\u0182" +
		"\x03\u0183\x03\u0183\x05\u0183\u1189\n\u0183\x03\u0183\x03\u0183\x03\u0183" +
		"\x07\u0183\u118E\n\u0183\f\u0183\x0E\u0183\u1191\v\u0183\x03\u0184\x03" +
		"\u0184\x03\u0184\x03\u0184\x07\u0184\u1197\n\u0184\f\u0184\x0E\u0184\u119A" +
		"\v\u0184\x03\u0184\x05\u0184\u119D\n\u0184\x03\u0184\x05\u0184\u11A0\n" +
		"\u0184\x03\u0184\x05\u0184\u11A3\n\u0184\x03\u0185\x03\u0185\x03\u0185" +
		"\x03\u0185\x07\u0185\u11A9\n\u0185\f\u0185\x0E\u0185\u11AC\v\u0185\x03" +
		"\u0185\x05\u0185\u11AF\n\u0185\x03\u0185\x05\u0185\u11B2\n\u0185\x03\u0186" +
		"\x03\u0186\x03\u0186\x07\u0186\u11B7\n\u0186\f\u0186\x0E\u0186\u11BA\v" +
		"\u0186\x03\u0186\x03\u0186\x05\u0186\u11BE\n\u0186\x03\u0186\x03\u0186" +
		"\x07\u0186\u11C2\n\u0186\f\u0186\x0E\u0186\u11C5\v\u0186\x05\u0186\u11C7" +
		"\n\u0186\x03\u0187\x03\u0187\x03\u0188\x05\u0188\u11CC\n\u0188\x03\u0188" +
		"\x03\u0188\x03\u0188\x03\u0189\x03\u0189\x03\u0189\x07\u0189\u11D4\n\u0189" +
		"\f\u0189\x0E\u0189\u11D7\v\u0189\x03\u0189\x03\u0189\x05\u0189\u11DB\n" +
		"\u0189\x03\u0189\x05\u0189\u11DE\n\u0189\x03\u0189\x05\u0189\u11E1\n\u0189" +
		"\x03\u0189\x03";
	private static readonly _serializedATNSegment2: string =
		"\u0189\x07\u0189\u11E5\n\u0189\f\u0189\x0E\u0189\u11E8\v\u0189\x05\u0189" +
		"\u11EA\n\u0189\x03\u018A\x03\u018A\x05\u018A\u11EE\n\u018A\x03\u018A\x03" +
		"\u018A\x03\u018A\x03\u018B\x03\u018B\x03\u018C\x03\u018C\x03\u018D\x05" +
		"\u018D\u11F8\n\u018D\x03\u018D\x05\u018D\u11FB\n\u018D\x03\u018D\x03\u018D" +
		"\x05\u018D\u11FF\n\u018D\x03\u018D\x03\u018D\x03\u018E\x03\u018E\x03\u018F" +
		"\x03\u018F\x05\u018F\u1207\n\u018F\x03\u018F\x03\u018F\x03\u0190\x03\u0190" +
		"\x03\u0191\x03\u0191\x03\u0191\x07\u0191\u1210\n\u0191\f\u0191\x0E\u0191" +
		"\u1213\v\u0191\x03\u0191\x03\u0191\x03\u0191\x07\u0191\u1218\n\u0191\f" +
		"\u0191\x0E\u0191\u121B\v\u0191\x05\u0191\u121D\n\u0191\x03\u0192\x03\u0192" +
		"\x07\u0192\u1221\n\u0192\f\u0192\x0E\u0192\u1224\v\u0192\x03\u0192\x07" +
		"\u0192\u1227\n\u0192\f\u0192\x0E\u0192\u122A\v\u0192\x03\u0192\x07\u0192" +
		"\u122D\n\u0192\f\u0192\x0E\u0192\u1230\v\u0192\x03\u0192\x07\u0192\u1233" +
		"\n\u0192\f\u0192\x0E\u0192\u1236\v\u0192\x03\u0192\x07\u0192\u1239\n\u0192" +
		"\f\u0192\x0E\u0192\u123C\v\u0192\x03\u0192\x03\u0192\x05\u0192\u1240\n" +
		"\u0192\x03\u0192\x05\u0192\u1243\n\u0192\x03\u0192\x05\u0192\u1246\n\u0192" +
		"\x03\u0192\x05\u0192\u1249\n\u0192\x03\u0193\x03\u0193\x05\u0193\u124D" +
		"\n\u0193\x03\u0193\x03\u0193\x03\u0194\x03\u0194\x03\u0194\x05\u0194\u1254" +
		"\n\u0194\x03\u0194\x03\u0194\x03\u0195\x03\u0195\x05\u0195\u125A\n\u0195" +
		"\x03\u0195\x03\u0195\x03\u0196\x03\u0196\x03\u0197\x03\u0197\x03\u0197" +
		"\x05\u0197\u1263\n\u0197\x03\u0197\x05\u0197\u1266\n\u0197\x03\u0197\x05" +
		"\u0197\u1269\n\u0197\x03\u0197\x03\u0197\x05\u0197\u126D\n\u0197\x03\u0197" +
		"\x03\u0197\x05\u0197\u1271\n\u0197\x05\u0197\u1273\n\u0197\x03\u0198\x03" +
		"\u0198\x05\u0198\u1277\n\u0198\x03\u0198\x05\u0198\u127A\n\u0198\x03\u0198" +
		"\x03\u0198\x03\u0199\x03\u0199\x05\u0199\u1280\n\u0199\x03\u0199\x05\u0199" +
		"\u1283\n\u0199\x03\u0199\x03\u0199\x03\u019A\x03\u019A\x03\u019B\x03\u019B" +
		"\x03\u019C\x03\u019C\x03\u019D\x03\u019D\x03\u019D\x07\u019D\u1290\n\u019D" +
		"\f\u019D\x0E\u019D\u1293\v\u019D\x03\u019E\x03\u019E\x05\u019E\u1297\n" +
		"\u019E\x03\u019E\x05\u019E\u129A\n\u019E\x03\u019E\x03\u019E\x03\u019F" +
		"\x03\u019F\x05\u019F\u12A0\n\u019F\x03\u019F\x03\u019F\x03\u019F\x05\u019F" +
		"\u12A5\n\u019F\x03\u019F\x03\u019F\x03\u01A0\x03\u01A0\x03\u01A1\x03\u01A1" +
		"\x03\u01A2\x03\u01A2\x03\u01A2\x05\u01A2\u12B0\n\u01A2\x03\u01A2\x06\u01A2" +
		"\u12B3\n\u01A2\r\u01A2\x0E\u01A2\u12B4\x03\u01A3\x03\u01A3\x03\u01A4\x03" +
		"\u01A4\x03\u01A4\x05\u01A4\u12BC\n\u01A4\x03\u01A5\x03\u01A5\x05\u01A5" +
		"\u12C0\n\u01A5\x03\u01A5\x06\u01A5\u12C3\n\u01A5\r\u01A5\x0E\u01A5\u12C4" +
		"\x03\u01A6\x06\u01A6\u12C8\n\u01A6\r\u01A6\x0E\u01A6\u12C9\x03\u01A6\x05" +
		"\u01A6\u12CD\n\u01A6\x03\u01A7\x06\u01A7\u12D0\n\u01A7\r\u01A7\x0E\u01A7" +
		"\u12D1\x03\u01A7\x05\u01A7\u12D5\n\u01A7\x03\u01A7\x06\u01A7\u12D8\n\u01A7" +
		"\r\u01A7\x0E\u01A7\u12D9\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A9\x03\u01A9" +
		"\x03\u01AA\x03\u01AA\x03\u01AB\x03\u01AB\x03\u01AB\x05\u01AB\u12E6\n\u01AB" +
		"\x03\u01AB\x03\u01AB\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC" +
		"\x03\u01AC\x06\u01AC\u12F0\n\u01AC\r\u01AC\x0E\u01AC\u12F1\x05\u01AC\u12F4" +
		"\n\u01AC\x03\u01AD\x03\u01AD\x03\u01AD\x05\u01AD\u12F9\n\u01AD\x03\u01AD" +
		"\x03\u01AD\x03\u01AD\x06\u01AD\u12FE\n\u01AD\r\u01AD\x0E\u01AD\u12FF\x05" +
		"\u01AD\u1302\n\u01AD\x03\u01AE\x03\u01AE\x05\u01AE\u1306\n\u01AE\x03\u01AF" +
		"\x03\u01AF\x05\u01AF\u130A\n\u01AF\x03\u01B0\x03\u01B0\x05\u01B0\u130E" +
		"\n\u01B0\x03\u01B1\x03\u01B1\x03\u01B2\x03\u01B2\x03\u01B3\x03\u01B3\x03" +
		"\u01B3\x07\u01B3\u1317\n\u01B3\f\u01B3\x0E\u01B3\u131A\v\u01B3\x03\u01B3" +
		"\x07\u01B3\u131D\n\u01B3\f\u01B3\x0E\u01B3\u1320\v\u01B3\x03\u01B4\x03" +
		"\u01B4\x05\u01B4\u1324\n\u01B4\x03\u01B4\x03\u01B4\x06\u01B4\u1328\n\u01B4" +
		"\r\u01B4\x0E\u01B4\u1329\x03\u01B4\x03\u01B4\x07\u01B4\u132E\n\u01B4\f" +
		"\u01B4\x0E\u01B4\u1331\v\u01B4\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5" +
		"\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5" +
		"\x03\u01B5\x05\u01B5\u133F\n\u01B5\x03\u01B6\x05\u01B6\u1342\n\u01B6\x03" +
		"\u01B6\x03\u01B6\x05\u01B6\u1346\n\u01B6\x03\u01B6\x03\u01B6\x03\u01B7" +
		"\x03\u01B7\x03\u01B8\x03\u01B8\x05\u01B8\u134E\n\u01B8\x03\u01B8\x05\u01B8" +
		"\u1351\n\u01B8\x03\u01B8\x03\u01B8\x05\u01B8\u1355\n\u01B8\x03\u01B8\x05" +
		"\u01B8\u1358\n\u01B8\x03\u01B8\x05\u01B8\u135B\n\u01B8\x03\u01B9\x03\u01B9" +
		"\x03\u01B9\x05\u01B9\u1360\n\u01B9\x03\u01B9\x05\u01B9\u1363\n\u01B9\x03" +
		"\u01B9\x03\u01B9\x05\u01B9\u1367\n\u01B9\x03\u01B9\x05\u01B9\u136A\n\u01B9" +
		"\x03\u01B9\x05\u01B9\u136D\n\u01B9\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BA" +
		"\x06\u01BA\u1373\n\u01BA\r\u01BA\x0E\u01BA\u1374\x05\u01BA\u1377\n\u01BA" +
		"\x03\u01BB\x03\u01BB\x03\u01BC\x03\u01BC\x03\u01BD\x03\u01BD\x05\u01BD" +
		"\u137F\n\u01BD\x03\u01BD\x05\u01BD\u1382\n\u01BD\x05\u01BD\u1384\n\u01BD" +
		"\x03\u01BD\x03\u01BD\x03\u01BD\x05\u01BD\u1389\n\u01BD\x03\u01BD\x05\u01BD" +
		"\u138C\n\u01BD\x03\u01BD\x05\u01BD\u138F\n\u01BD\x03\u01BE\x03\u01BE\x03" +
		"\u01BE\x05\u01BE\u1394\n\u01BE\x03\u01BF\x03\u01BF\x03\u01C0\x03\u01C0" +
		"\x03\u01C0\x05\u01C0\u139B\n\u01C0\x03\u01C0\x03\u01C0\x03\u01C1\x03\u01C1" +
		"\x05\u01C1\u13A1\n\u01C1\x03\u01C1\x05\u01C1\u13A4\n\u01C1\x03\u01C1\x03" +
		"\u01C1\x03\u01C2\x03\u01C2\x03\u01C3\x03\u01C3\x05\u01C3\u13AC\n\u01C3" +
		"\x05\u01C3\u13AE\n\u01C3\x03\u01C3\x03\u01C3\x03\u01C3\x03\u01C3\x03\u01C3" +
		"\x05\u01C3\u13B5\n\u01C3\x03\u01C4\x03\u01C4\x05\u01C4\u13B9\n\u01C4\x03" +
		"\u01C4\x05\u01C4\u13BC\n\u01C4\x03\u01C4\x03\u01C4\x03\u01C5\x03\u01C5" +
		"\x05\u01C5\u13C2\n\u01C5\x03\u01C5\x03\u01C5\x03\u01C5\x03\u01C5\x03\u01C5" +
		"\x03\u01C5\x05\u01C5\u13CA\n\u01C5\x03\u01C5\x03\u01C5\x03\u01C5\x03\u01C5" +
		"\x05\u01C5\u13D0\n\u01C5\x05\u01C5\u13D2\n\u01C5\x03\u01C5\x05\u01C5\u13D5" +
		"\n\u01C5\x03\u01C6\x03\u01C6\x05\u01C6\u13D9\n\u01C6\x03\u01C6\x03\u01C6" +
		"\x03\u01C7\x03\u01C7\x05\u01C7\u13DF\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7" +
		"\x05\u01C7\u13E4\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C8\x03\u01C8" +
		"\x03\u01C9\x03\u01C9\x03\u01CA\x03\u01CA\x05\u01CA\u13EF\n\u01CA\x03\u01CA" +
		"\x03\u01CA\x03\u01CB\x05\u01CB\u13F4\n\u01CB\x03\u01CB\x03\u01CB\x05\u01CB" +
		"\u13F8\n\u01CB\x03\u01CB\x03\u01CB\x05\u01CB\u13FC\n\u01CB\x05\u01CB\u13FE" +
		"\n\u01CB\x03\u01CC\x03\u01CC\x03\u01CC\x03\u01CC\x05\u01CC\u1404\n\u01CC" +
		"\x03\u01CD\x03\u01CD\x03\u01CE\x03\u01CE\x03\u01CE\x07\u01CE\u140B\n\u01CE" +
		"\f\u01CE\x0E\u01CE\u140E\v\u01CE\x03\u01CE\x06\u01CE\u1411\n\u01CE\r\u01CE" +
		"\x0E\u01CE\u1412\x03\u01CE\x03\u01CE\x07\u01CE\u1417\n\u01CE\f\u01CE\x0E" +
		"\u01CE\u141A\v\u01CE\x05\u01CE\u141C\n\u01CE\x03\u01CF\x03\u01CF\x03\u01CF" +
		"\x03\u01CF\x05\u01CF\u1422\n\u01CF\x03\u01D0\x03\u01D0\x03\u01D0\x05\u01D0" +
		"\u1427\n\u01D0\x03\u01D0\x05\u01D0\u142A\n\u01D0\x03\u01D0\x06\u01D0\u142D" +
		"\n\u01D0\r\u01D0\x0E\u01D0\u142E\x03\u01D1\x03\u01D1\x03\u01D1\x05\u01D1" +
		"\u1434\n\u01D1\x03\u01D2\x03\u01D2\x03\u01D3\x03\u01D3\x03\u01D4\x03\u01D4" +
		"\x03\u01D4\x05\u01D4\u143D\n\u01D4\x03\u01D4\x05\u01D4\u1440\n\u01D4\x03" +
		"\u01D4\x03\u01D4\x03\u01D5\x03\u01D5\x05\u01D5\u1446\n\u01D5\x03\u01D5" +
		"\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u144E\n\u01D5" +
		"\x03\u01D6\x03\u01D6\x03\u01D7\x03\u01D7\x03\u01D8\x03\u01D8\x05\u01D8" +
		"\u1456\n\u01D8\x05\u01D8\u1458\n\u01D8\x03\u01D8\x03\u01D8\x03\u01D8\x03" +
		"\u01D8\x05\u01D8\u145E\n\u01D8\x03\u01D9\x03\u01D9\x03\u01DA\x03\u01DA" +
		"\x05\u01DA\u1464\n\u01DA\x03\u01DA\x05\u01DA\u1467\n\u01DA\x03\u01DA\x05" +
		"\u01DA\u146A\n\u01DA\x03\u01DA\x03\u01DA\x06\u01DA\u146E\n\u01DA\r\u01DA" +
		"\x0E\u01DA\u146F\x03\u01DB\x03\u01DB\x03\u01DC\x03\u01DC\x06\u01DC\u1476" +
		"\n\u01DC\r\u01DC\x0E\u01DC\u1477\x03\u01DC\x03\u01DC\x06\u01DC\u147C\n" +
		"\u01DC\r\u01DC\x0E\u01DC\u147D\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD" +
		"\x03\u01DD\x03\u01DD\x03\u01DD\x05\u01DD\u1487\n\u01DD\x03\u01DD\x03\u01DD" +
		"\x03\u01DD\x03\u01DD\x03\u01DD\x05\u01DD\u148E\n\u01DD\x03\u01DE\x03\u01DE" +
		"\x03\u01DF\x03\u01DF\x03\u01E0\x03\u01E0\x03\u01E1\x03\u01E1\x03\u01E1" +
		"\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1" +
		"\x05\u01E1\u14A0\n\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x07\u01E1" +
		"\u14A6\n\u01E1\f\u01E1\x0E\u01E1\u14A9\v\u01E1\x03\u01E2\x03\u01E2\x03" +
		"\u01E2\x05\u01E2\u14AE\n\u01E2\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3" +
		"\x03\u01E3\x03\u01E3\x05\u01E3\u14B6\n\u01E3\x03\u01E4\x03\u01E4\x03\u01E5" +
		"\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5" +
		"\x05\u01E5\u14C2\n\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x07\u01E5" +
		"\u14C8\n\u01E5\f\u01E5\x0E\u01E5\u14CB\v\u01E5\x03\u01E6\x03\u01E6\x03" +
		"\u01E6\x03\u01E6\x03\u01E6\x03\u01E6\x07\u01E6\u14D3\n\u01E6\f\u01E6\x0E" +
		"\u01E6\u14D6\v\u01E6\x03\u01E6\x03\u01E6\x05\u01E6\u14DA\n\u01E6\x03\u01E6" +
		"\x05\u01E6\u14DD\n\u01E6\x03\u01E6\x03\u01E6\x05\u01E6\u14E1\n\u01E6\x03" +
		"\u01E6\x03\u01E6\x03\u01E6\x07\u01E6\u14E6\n\u01E6\f\u01E6\x0E\u01E6\u14E9" +
		"\v\u01E6\x03\u01E6\x03\u01E6\x05\u01E6\u14ED\n\u01E6\x03\u01E6\x05\u01E6" +
		"\u14F0\n\u01E6\x03\u01E6\x03\u01E6\x03\u01E6\x05\u01E6\u14F5\n\u01E6\x03" +
		"\u01E7\x05\u01E7\u14F8\n\u01E7\x03\u01E7\x03\u01E7\x03\u01E8\x03\u01E8" +
		"\x03\u01E9\x03\u01E9\x03\u01EA\x03\u01EA\x03\u01EB\x03\u01EB\x03\u01EC" +
		"\x05\u01EC\u1505\n\u01EC\x03\u01EC\x05\u01EC\u1508\n\u01EC\x03\u01EC\x03" +
		"\u01EC\x05\u01EC\u150C\n\u01EC\x03\u01EC\x03\u01EC\x05\u01EC\u1510\n\u01EC" +
		"\x03\u01EC\x03\u01EC\x05\u01EC\u1514\n\u01EC\x03\u01EC\x03\u01EC\x05\u01EC" +
		"\u1518\n\u01EC\x03\u01EC\x03\u01EC\x05\u01EC\u151C\n\u01EC\x03\u01EC\x03" +
		"\u01EC\x05\u01EC\u1520\n\u01EC\x05\u01EC\u1522\n\u01EC\x03\u01EC\x03\u01EC" +
		"\x05\u01EC\u1526\n\u01EC\x03\u01EC\x03\u01EC\x03\u01EC\x05\u01EC\u152B" +
		"\n\u01EC\x03\u01EC\x03\u01EC\x03\u01EC\x05\u01EC\u1530\n\u01EC\x03\u01EC" +
		"\x03\u01EC\x03\u01EC\x05\u01EC\u1535\n\u01EC\x03\u01EC\x05\u01EC\u1538" +
		"\n\u01EC\x03\u01ED\x03\u01ED\x05\u01ED\u153C\n\u01ED\x03\u01ED\x05\u01ED" +
		"\u153F\n\u01ED\x03\u01EE\x03\u01EE\x03\u01EE\x03\u01EE\x05\u01EE\u1545" +
		"\n\u01EE\x03\u01EE\x05\u01EE\u1548\n\u01EE\x05\u01EE\u154A\n\u01EE\x03" +
		"\u01EF\x03\u01EF\x03\u01F0\x03\u01F0\x03\u01F0\x06\u01F0\u1551\n\u01F0" +
		"\r\u01F0\x0E\u01F0\u1552\x03\u01F0\x03\u01F0\x03\u01F1\x03\u01F1\x03\u01F1" +
		"\x03\u01F1\x05\u01F1\u155B\n\u01F1\x03\u01F1\x03\u01F1\x03\u01F2\x03\u01F2" +
		"\x03\u01F3\x03\u01F3\x03\u01F4\x03\u01F4\x03\u01F4\x02\x02\x04\u03C0\u03C8" +
		"\u01F5\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02" +
		"\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02" +
		"(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02" +
		"D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02" +
		"`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02" +
		"|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E" +
		"\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0" +
		"\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2" +
		"\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4" +
		"\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6" +
		"\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8" +
		"\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA" +
		"\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02" +
		"\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02" +
		"\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02" +
		"\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02" +
		"\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02" +
		"\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02" +
		"\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02" +
		"\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02" +
		"\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02" +
		"\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02" +
		"\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02" +
		"\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02" +
		"\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02" +
		"\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02" +
		"\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02" +
		"\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02" +
		"\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02" +
		"\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02" +
		"\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02" +
		"\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02" +
		"\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02" +
		"\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02" +
		"\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02" +
		"\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02" +
		"\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02" +
		"\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02" +
		"\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02" +
		"\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02" +
		"\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290\x02" +
		"\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E\x02" +
		"\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC\x02" +
		"\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA\x02" +
		"\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8\x02" +
		"\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02\u02D6\x02" +
		"\u02D8\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0\x02\u02E2\x02\u02E4\x02" +
		"\u02E6\x02\u02E8\x02\u02EA\x02\u02EC\x02\u02EE\x02\u02F0\x02\u02F2\x02" +
		"\u02F4\x02\u02F6\x02\u02F8\x02\u02FA\x02\u02FC\x02\u02FE\x02\u0300\x02" +
		"\u0302\x02\u0304\x02\u0306\x02\u0308\x02\u030A\x02\u030C\x02\u030E\x02" +
		"\u0310\x02\u0312\x02\u0314\x02\u0316\x02\u0318\x02\u031A\x02\u031C\x02" +
		"\u031E\x02\u0320\x02\u0322\x02\u0324\x02\u0326\x02\u0328\x02\u032A\x02" +
		"\u032C\x02\u032E\x02\u0330\x02\u0332\x02\u0334\x02\u0336\x02\u0338\x02" +
		"\u033A\x02\u033C\x02\u033E\x02\u0340\x02\u0342\x02\u0344\x02\u0346\x02" +
		"\u0348\x02\u034A\x02\u034C\x02\u034E\x02\u0350\x02\u0352\x02\u0354\x02" +
		"\u0356\x02\u0358\x02\u035A\x02\u035C\x02\u035E\x02\u0360\x02\u0362\x02" +
		"\u0364\x02\u0366\x02\u0368\x02\u036A\x02\u036C\x02\u036E\x02\u0370\x02" +
		"\u0372\x02\u0374\x02\u0376\x02\u0378\x02\u037A\x02\u037C\x02\u037E\x02" +
		"\u0380\x02\u0382\x02\u0384\x02\u0386\x02\u0388\x02\u038A\x02\u038C\x02" +
		"\u038E\x02\u0390\x02\u0392\x02\u0394\x02\u0396\x02\u0398\x02\u039A\x02" +
		"\u039C\x02\u039E\x02\u03A0\x02\u03A2\x02\u03A4\x02\u03A6\x02\u03A8\x02" +
		"\u03AA\x02\u03AC\x02\u03AE\x02\u03B0\x02\u03B2\x02\u03B4\x02\u03B6\x02" +
		"\u03B8\x02\u03BA\x02\u03BC\x02\u03BE\x02\u03C0\x02\u03C2\x02\u03C4\x02" +
		"\u03C6\x02\u03C8\x02\u03CA\x02\u03CC\x02\u03CE\x02\u03D0\x02\u03D2\x02" +
		"\u03D4\x02\u03D6\x02\u03D8\x02\u03DA\x02\u03DC\x02\u03DE\x02\u03E0\x02" +
		"\u03E2\x02\u03E4\x02\u03E6\x02\x02;\x06\x02\xCA\xCB\xF3\xF4\u012E\u012F" +
		"\u0168\u0169\x03\x02\u01A8\u01AA\x04\x02\u01C7\u01C7\u01C9\u01C9\x04\x02" +
		"\xA6\xA6\xA9\xA9\x03\x02\u01AD\u01AD\x04\x02\x03\x03\u01C9\u01C9\x04\x02" +
		"\b\b\'\'\x03\x02\xEC\xED\x03\x02\u01C7\u01C8\x03\x02ab\x03\x02\u01C6\u01C8" +
		"\x04\x02\x1E\x1Eyy\x04\x02\x81\x81\u0195\u0195\x04\x02\u0109\u0109\u010B" +
		"\u010B\x04\x02\xAF\xAF\u0173\u0173\x05\x02\u0100\u0100\u0124\u0124\u0128" +
		"\u0128\x03\x02\u0185\u0186\x04\x02\xAC\xAC\u0114\u0114\x06\x02\xAC\xAC" +
		"\xD8\xD8\xDF\xDF\u0114\u0114\x05\x02\t\t\xB8\xB8\xE6\xE6\x04\x02\t\t\xE6" +
		"\xE6\x05\x02\r\r\x10\x11\u0104\u0105\x04\x0244\xDC\xDC\x04\x02\xEC\xEC" +
		"\u0154\u0154\x04\x02\xA4\xA4\u01B8\u01B8\x04\x02\u0137\u0137\u0190\u0190" +
		"\x04\x02\x93\x93\xA2\xA2\x03\x02\u017A\u017B\x04\x02\xE7\xE7\u014F\u014F" +
		"\x03\x02\xE1\xE2\x04\x02\xE6\xE6\u018B\u018B\x04\x02\xB7\xB7\u01C9\u01C9" +
		"\x04\x02nn{{\x04\x02\u0162\u0162\u0192\u0192\x03\x02\u01AE\u01AF\x04\x02" +
		"\xDE\xDE\u01D0\u01D0\x04\x02\xB4\xB4\xCD\xCD\x04\x02\u010A\u010A\u016B" +
		"\u016B\x04\x02\xA1\xA1\xA3\xA3\x04\x02\xFE\xFE\u016B\u016B\x06\x02\v\v" +
		"\xCC\xCC\u019E\u019E\u01C9\u01C9\x05\x02<<\xFA\xFA\u01A2\u01A2\n\x02\x1B" +
		"\x1C5588VV\x9F\xA0\xEE\xEE\u0119\u011A\u017C\u017E\x04\x02\xD1\xD1\u0108" +
		"\u0108\x04\x02\u0178\u0178\u01CF\u01CF\x04\x02\x18\x18\xDE\xDE\x05\x02" +
		"\x83\x83\u0130\u0130\u015F\u015F\x03\x02\x19\x1A\x04\x02<<\u0135\u0135" +
		"\x04\x02\x83\x83\xAE\xAE\x04\x02\u0134\u0134\u0164\u0165\x03\x02YZ\x03" +
		"\x02\u01B3\u01B4\x04\x02\x15\x15\u010F\u010F\x05\x02\xFF\xFF\u0122\u0122" +
		"\u01A8\u01A8\x05\x02\r\x0F\u0104\u0104\u01C9\u01C9\x04\x02\u0130\u0130" +
		"\u01C9\u01C9\x02\u17C3\x02\u03EB\x03\x02\x02\x02\x04\u03F6\x03\x02\x02" +
		"\x02\x06\u0409\x03\x02\x02\x02\b\u041D\x03\x02\x02\x02\n\u0426\x03\x02" +
		"\x02\x02\f\u042D\x03\x02\x02\x02\x0E\u0436\x03\x02\x02\x02\x10\u0446\x03" +
		"\x02\x02\x02\x12\u044F\x03\x02\x02\x02\x14\u0461\x03\x02\x02\x02\x16\u0464" +
		"\x03\x02\x02\x02\x18\u0471\x03\x02\x02\x02\x1A\u0474\x03\x02\x02\x02\x1C" +
		"\u0476\x03\x02\x02\x02\x1E\u047A\x03\x02\x02\x02 \u047F\x03\x02\x02\x02" +
		"\"\u0483\x03\x02\x02\x02$\u0485\x03\x02\x02\x02&\u048E\x03\x02\x02\x02" +
		"(\u0491\x03\x02\x02\x02*\u049A\x03\x02\x02\x02,\u049D\x03\x02\x02\x02" +
		".\u04A4\x03\x02\x02\x020\u04AB\x03\x02\x02\x022\u04B4\x03\x02\x02\x02" +
		"4\u04BC\x03\x02\x02\x026\u04C5\x03\x02\x02\x028\u04CD\x03\x02\x02\x02" +
		":\u04E7\x03\x02\x02\x02<\u04E9\x03\x02\x02\x02>\u0503\x03\x02\x02\x02" +
		"@\u050E\x03\x02\x02\x02B\u0510\x03\x02\x02\x02D\u051C\x03\x02\x02\x02" +
		"F\u051E\x03\x02\x02\x02H\u0524\x03\x02\x02\x02J\u0551\x03\x02\x02\x02" +
		"L\u0553\x03\x02\x02\x02N\u055F\x03\x02\x02\x02P\u0561\x03\x02\x02\x02" +
		"R\u0563\x03\x02\x02\x02T\u0571\x03\x02\x02\x02V\u0573\x03\x02\x02\x02" +
		"X\u059C\x03\x02\x02\x02Z\u05A0\x03\x02\x02\x02\\\u05A2\x03\x02\x02\x02" +
		"^\u05CC\x03\x02\x02\x02`\u05CE\x03\x02\x02\x02b\u05DD\x03\x02\x02\x02" +
		"d\u05DF\x03\x02\x02\x02f\u05E1\x03\x02\x02\x02h\u05E4\x03\x02\x02\x02" +
		"j\u05EB\x03\x02\x02\x02l\u05ED\x03\x02\x02\x02n\u05EF\x03\x02\x02\x02" +
		"p\u05F9\x03\x02\x02\x02r\u05FF\x03\x02\x02\x02t\u0603\x03\x02\x02\x02" +
		"v\u0626\x03\x02\x02\x02x\u062A\x03\x02\x02\x02z\u062C\x03\x02\x02\x02" +
		"|\u064D\x03\x02\x02\x02~\u064F\x03\x02\x02\x02\x80\u0651\x03\x02\x02\x02" +
		"\x82\u0656\x03\x02\x02\x02\x84\u0658\x03\x02\x02\x02\x86\u0660\x03\x02" +
		"\x02\x02\x88\u0662\x03\x02\x02\x02\x8A\u0673\x03\x02\x02\x02\x8C\u0675" +
		"\x03\x02\x02\x02\x8E\u06A7\x03\x02\x02\x02\x90\u06A9\x03\x02\x02\x02\x92" +
		"\u06B0\x03\x02\x02\x02\x94\u06BD\x03\x02\x02\x02\x96\u06C5\x03\x02\x02" +
		"\x02\x98\u06C7\x03\x02\x02\x02\x9A\u06D0\x03\x02\x02\x02\x9C\u06DA\x03" +
		"\x02\x02\x02\x9E\u06E3\x03\x02\x02\x02\xA0\u06EC\x03\x02\x02\x02\xA2\u06F9" +
		"\x03\x02\x02\x02\xA4\u0700\x03\x02\x02\x02\xA6\u0704\x03\x02\x02\x02\xA8" +
		"\u074E\x03\x02\x02\x02\xAA\u0761\x03\x02\x02\x02\xAC\u0763\x03\x02\x02" +
		"\x02\xAE\u0765\x03\x02\x02\x02\xB0\u0767\x03\x02\x02\x02\xB2\u0769\x03" +
		"\x02\x02\x02\xB4\u076B\x03\x02\x02\x02\xB6\u077E\x03\x02\x02\x02\xB8\u0780" +
		"\x03\x02\x02\x02\xBA\u0791\x03\x02\x02\x02\xBC\u0793\x03\x02\x02\x02\xBE" +
		"\u0799\x03\x02\x02\x02\xC0\u079B\x03\x02\x02\x02\xC2\u079D\x03\x02\x02" +
		"\x02\xC4\u07AD\x03\x02\x02\x02\xC6\u07AF\x03\x02\x02\x02\xC8\u07B1\x03" +
		"\x02\x02\x02\xCA\u07E6\x03\x02\x02\x02\xCC\u07F0\x03\x02\x02\x02\xCE\u07F2" +
		"\x03\x02\x02\x02\xD0\u0806\x03\x02\x02\x02\xD2\u080D\x03\x02\x02\x02\xD4" +
		"\u0812\x03\x02\x02\x02\xD6\u0818\x03\x02\x02\x02\xD8\u081E\x03\x02\x02" +
		"\x02\xDA\u082E\x03\x02\x02\x02\xDC\u0836\x03\x02\x02\x02\xDE\u083A\x03" +
		"\x02\x02\x02\xE0\u083C\x03\x02\x02\x02\xE2\u0856\x03\x02\x02\x02\xE4\u0858" +
		"\x03\x02\x02\x02\xE6\u0894\x03\x02\x02\x02\xE8\u0896\x03\x02\x02\x02\xEA" +
		"\u08AE\x03\x02\x02\x02\xEC\u08B0\x03\x02\x02\x02\xEE\u08CB\x03\x02\x02" +
		"\x02\xF0\u08D2\x03\x02\x02\x02\xF2\u08D4\x03\x02\x02\x02\xF4\u08D6\x03" +
		"\x02\x02\x02\xF6\u08D9\x03\x02\x02\x02\xF8\u08DC\x03\x02\x02\x02\xFA\u08E7" +
		"\x03\x02\x02\x02\xFC\u08E9\x03\x02\x02\x02\xFE\u08EB\x03\x02\x02\x02\u0100" +
		"\u08F5\x03\x02\x02\x02\u0102\u08FF\x03\x02\x02\x02\u0104\u0901\x03\x02" +
		"\x02\x02\u0106\u0903\x03\x02\x02\x02\u0108\u090A\x03\x02\x02\x02\u010A" +
		"\u0918\x03\x02\x02\x02\u010C\u091A\x03\x02\x02\x02\u010E\u0923\x03\x02" +
		"\x02\x02\u0110\u0925\x03\x02\x02\x02\u0112\u092B\x03\x02\x02\x02\u0114" +
		"\u0933\x03\x02\x02\x02\u0116\u093A\x03\x02\x02\x02\u0118\u0940\x03\x02" +
		"\x02\x02\u011A\u094F\x03\x02\x02\x02\u011C\u0951\x03\x02\x02\x02\u011E" +
		"\u0953\x03\x02\x02\x02\u0120\u0955\x03\x02\x02\x02\u0122\u0957\x03\x02" +
		"\x02\x02\u0124\u095D\x03\x02\x02\x02\u0126\u0969\x03\x02\x02\x02\u0128" +
		"\u0976\x03\x02\x02\x02\u012A\u0978\x03\x02\x02\x02\u012C\u097A\x03\x02" +
		"\x02\x02\u012E\u0985\x03\x02\x02\x02\u0130\u09A4\x03\x02\x02\x02\u0132" +
		"\u09A7\x03\x02\x02\x02\u0134\u09A9\x03\x02\x02\x02\u0136\u09AB\x03\x02" +
		"\x02\x02\u0138\u09C4\x03\x02\x02\x02\u013A\u09C6\x03\x02\x02\x02\u013C" +
		"\u09C8\x03\x02\x02\x02\u013E\u0A03\x03\x02\x02\x02\u0140\u0A09\x03\x02" +
		"\x02\x02\u0142\u0A0D\x03\x02\x02\x02\u0144\u0A0F\x03\x02\x02\x02\u0146" +
		"\u0A25\x03\x02\x02\x02\u0148\u0A39\x03\x02\x02\x02\u014A\u0A3D\x03\x02" +
		"\x02\x02\u014C\u0A43\x03\x02\x02\x02\u014E\u0A45\x03\x02\x02\x02\u0150" +
		"\u0A54\x03\x02\x02\x02\u0152\u0A63\x03\x02\x02\x02\u0154\u0A77\x03\x02" +
		"\x02\x02\u0156\u0A82\x03\x02\x02\x02\u0158\u0A84\x03\x02\x02\x02\u015A" +
		"\u0A8C\x03\x02\x02\x02\u015C\u0A97\x03\x02\x02\x02\u015E\u0A99\x03\x02" +
		"\x02\x02\u0160\u0A9D\x03\x02\x02\x02\u0162\u0AA2\x03\x02\x02\x02\u0164" +
		"\u0AB3\x03\x02\x02\x02\u0166\u0AB5\x03\x02\x02\x02\u0168\u0AB8\x03\x02" +
		"\x02\x02\u016A\u0ABC\x03\x02\x02\x02\u016C\u0ABF\x03\x02\x02\x02\u016E" +
		"\u0AC3\x03\x02\x02\x02\u0170\u0AC5\x03\x02\x02\x02\u0172\u0AD2\x03\x02" +
		"\x02\x02\u0174\u0ADB\x03\x02\x02\x02\u0176\u0AE3\x03\x02\x02\x02\u0178" +
		"\u0AE5\x03\x02\x02\x02\u017A\u0AF0\x03\x02\x02\x02\u017C\u0AF2\x03\x02" +
		"\x02\x02\u017E\u0B03\x03\x02\x02\x02\u0180\u0B20\x03\x02\x02\x02\u0182" +
		"\u0B22\x03\x02\x02\x02\u0184\u0B28\x03\x02\x02\x02\u0186\u0B36\x03\x02" +
		"\x02\x02\u0188\u0B39\x03\x02\x02\x02\u018A\u0B48\x03\x02\x02\x02\u018C" +
		"\u0B5A\x03\x02\x02\x02\u018E\u0B5F\x03\x02\x02\x02\u0190\u0B63\x03\x02" +
		"\x02\x02\u0192\u0B65\x03\x02\x02\x02\u0194\u0BA1\x03\x02\x02\x02\u0196" +
		"\u0BA9\x03\x02\x02\x02\u0198\u0BAD\x03\x02\x02\x02\u019A\u0BB5\x03\x02" +
		"\x02\x02\u019C\u0BC1\x03\x02\x02\x02\u019E\u0BCD\x03\x02\x02\x02\u01A0" +
		"\u0BD9\x03\x02\x02\x02\u01A2\u0BE5\x03\x02\x02\x02\u01A4\u0BF1\x03\x02" +
		"\x02\x02\u01A6\u0BFD\x03\x02\x02\x02\u01A8\u0BFF\x03\x02\x02\x02\u01AA" +
		"\u0C0B\x03\x02\x02\x02\u01AC\u0C0D\x03\x02\x02\x02\u01AE\u0C1D\x03\x02" +
		"\x02\x02\u01B0\u0C22\x03\x02\x02\x02\u01B2\u0C30\x03\x02\x02\x02\u01B4" +
		"\u0C45\x03\x02\x02\x02\u01B6\u0C51\x03\x02\x02\x02\u01B8\u0C5D\x03\x02" +
		"\x02\x02\u01BA\u0C65\x03\x02\x02\x02\u01BC\u0C71\x03\x02\x02\x02\u01BE" +
		"\u0C74\x03\x02\x02\x02\u01C0\u0C7D\x03\x02\x02\x02\u01C2\u0C8F\x03\x02" +
		"\x02\x02\u01C4\u0C91\x03\x02\x02\x02\u01C6\u0C99\x03\x02\x02\x02\u01C8" +
		"\u0CA1\x03\x02\x02\x02\u01CA\u0CA8\x03\x02\x02\x02\u01CC\u0CAD\x03\x02" +
		"\x02\x02\u01CE\u0CB6\x03\x02\x02\x02\u01D0\u0CCC\x03\x02\x02\x02\u01D2" +
		"\u0CCE\x03\x02\x02\x02\u01D4\u0CD2\x03\x02\x02\x02\u01D6\u0CE0\x03\x02" +
		"\x02\x02\u01D8\u0CEC\x03\x02\x02\x02\u01DA\u0CEE\x03\x02\x02\x02\u01DC" +
		"\u0CF0\x03\x02\x02\x02\u01DE\u0CF3\x03\x02\x02\x02\u01E0\u0CFE\x03\x02" +
		"\x02\x02\u01E2\u0D09\x03\x02\x02\x02\u01E4\u0D15\x03\x02\x02\x02\u01E6" +
		"\u0D20\x03\x02\x02\x02\u01E8\u0D2A\x03\x02\x02\x02\u01EA\u0D35\x03\x02" +
		"\x02\x02\u01EC\u0D45\x03\x02\x02\x02\u01EE\u0D4C\x03\x02\x02\x02\u01F0" +
		"\u0D53\x03\x02\x02\x02\u01F2\u0D64\x03\x02\x02\x02\u01F4\u0D66\x03\x02" +
		"\x02\x02\u01F6\u0D75\x03\x02\x02\x02\u01F8\u0D84\x03\x02\x02\x02\u01FA" +
		"\u0D8B\x03\x02\x02\x02\u01FC\u0D9A\x03\x02\x02\x02\u01FE\u0DA9\x03\x02" +
		"\x02\x02\u0200\u0DB8\x03\x02\x02\x02\u0202\u0DD5\x03\x02\x02\x02\u0204" +
		"\u0DD8\x03\x02\x02\x02\u0206\u0DDD\x03\x02\x02\x02\u0208\u0DE1\x03\x02" +
		"\x02\x02\u020A\u0DF7\x03\x02\x02\x02\u020C\u0E04\x03\x02\x02\x02\u020E" +
		"\u0E06\x03\x02\x02\x02\u0210\u0E0A\x03\x02\x02\x02\u0212\u0E0E\x03\x02" +
		"\x02\x02\u0214\u0E14\x03\x02\x02\x02\u0216\u0E1A\x03\x02\x02\x02\u0218" +
		"\u0E1C\x03\x02\x02\x02\u021A\u0E26\x03\x02\x02\x02\u021C\u0E2D\x03\x02" +
		"\x02\x02\u021E\u0E36\x03\x02\x02\x02\u0220\u0E38\x03\x02\x02\x02\u0222" +
		"\u0E3B\x03\x02\x02\x02\u0224\u0E3D\x03\x02\x02\x02\u0226";
	private static readonly _serializedATNSegment3: string =
		"\u0E43\x03\x02\x02\x02\u0228\u0E45\x03\x02\x02\x02\u022A\u0E50\x03\x02" +
		"\x02\x02\u022C\u0E59\x03\x02\x02\x02\u022E\u0E5B\x03\x02\x02\x02\u0230" +
		"\u0E67\x03\x02\x02\x02\u0232\u0E79\x03\x02\x02\x02\u0234\u0E7B\x03\x02" +
		"\x02\x02\u0236\u0E7D\x03\x02\x02\x02\u0238\u0E7F\x03\x02\x02\x02\u023A" +
		"\u0E81\x03\x02\x02\x02\u023C\u0E9D\x03\x02\x02\x02\u023E\u0EA2\x03\x02" +
		"\x02\x02\u0240\u0EA4\x03\x02\x02\x02\u0242\u0EAA\x03\x02\x02\x02\u0244" +
		"\u0EB0\x03\x02\x02\x02\u0246\u0EB4\x03\x02\x02\x02\u0248\u0EC1\x03\x02" +
		"\x02\x02\u024A\u0EC5\x03\x02\x02\x02\u024C\u0ECB\x03\x02\x02\x02\u024E" +
		"\u0ED2\x03\x02\x02\x02\u0250\u0EDF\x03\x02\x02\x02\u0252\u0EF7\x03\x02" +
		"\x02\x02\u0254\u0F02\x03\x02\x02\x02\u0256\u0F04\x03\x02\x02\x02\u0258" +
		"\u0F06\x03\x02\x02\x02\u025A\u0F08\x03\x02\x02\x02\u025C\u0F0A\x03\x02" +
		"\x02\x02\u025E\u0F13\x03\x02\x02\x02\u0260\u0F18\x03\x02\x02\x02\u0262" +
		"\u0F1D\x03\x02\x02\x02\u0264\u0F1F\x03\x02\x02\x02\u0266\u0F24\x03\x02" +
		"\x02\x02\u0268\u0F2B\x03\x02\x02\x02\u026A\u0F32\x03\x02\x02\x02\u026C" +
		"\u0F37\x03\x02\x02\x02\u026E\u0F39\x03\x02\x02\x02\u0270\u0F40\x03\x02" +
		"\x02\x02\u0272\u0F4C\x03\x02\x02\x02\u0274\u0F4E\x03\x02\x02\x02\u0276" +
		"\u0F54\x03\x02\x02\x02\u0278\u0F56\x03\x02\x02\x02\u027A\u0F7F\x03\x02" +
		"\x02\x02\u027C\u0F8F\x03\x02\x02\x02\u027E\u0F92\x03\x02\x02\x02\u0280" +
		"\u0F94\x03\x02\x02\x02\u0282\u0F96\x03\x02\x02\x02\u0284\u0F98\x03\x02" +
		"\x02\x02\u0286\u0F9A\x03\x02\x02\x02\u0288\u0F9C\x03\x02\x02\x02\u028A" +
		"\u0FA2\x03\x02\x02\x02\u028C\u0FCD\x03\x02\x02\x02\u028E\u0FCF\x03\x02" +
		"\x02\x02\u0290\u0FD5\x03\x02\x02\x02\u0292\u0FD7\x03\x02\x02\x02\u0294" +
		"\u0FD9\x03\x02\x02\x02\u0296\u0FDD\x03\x02\x02\x02\u0298\u0FE7\x03\x02" +
		"\x02\x02\u029A\u0FEE\x03\x02\x02\x02\u029C\u0FF0\x03\x02\x02\x02\u029E" +
		"\u1018\x03\x02\x02\x02\u02A0\u101C\x03\x02\x02\x02\u02A2\u1020\x03\x02" +
		"\x02\x02\u02A4\u1024\x03\x02\x02\x02\u02A6\u1026\x03\x02\x02\x02\u02A8" +
		"\u1036\x03\x02\x02\x02\u02AA\u1038\x03\x02\x02\x02\u02AC\u1042\x03\x02" +
		"\x02\x02\u02AE\u1044\x03\x02\x02\x02\u02B0\u1051\x03\x02\x02\x02\u02B2" +
		"\u107E\x03\x02\x02\x02\u02B4\u1080\x03\x02\x02\x02\u02B6\u1082\x03\x02" +
		"\x02\x02\u02B8\u1084\x03\x02\x02\x02\u02BA\u1086\x03\x02\x02\x02\u02BC" +
		"\u10AD\x03\x02\x02\x02\u02BE\u10B1\x03\x02\x02\x02\u02C0\u10B3\x03\x02" +
		"\x02\x02\u02C2\u10BC\x03\x02\x02\x02\u02C4\u10C2\x03\x02\x02\x02\u02C6" +
		"\u10CE\x03\x02\x02\x02\u02C8\u10DA\x03\x02\x02\x02\u02CA\u10DC\x03\x02" +
		"\x02\x02\u02CC\u10DE\x03\x02\x02\x02\u02CE\u10E0\x03\x02\x02\x02\u02D0" +
		"\u10E2\x03\x02\x02\x02\u02D2\u10E5\x03\x02\x02\x02\u02D4\u10E7\x03\x02" +
		"\x02\x02\u02D6\u10E9\x03\x02\x02\x02\u02D8\u10EB\x03\x02\x02\x02\u02DA" +
		"\u10ED\x03\x02\x02\x02\u02DC\u10EF\x03\x02\x02\x02\u02DE\u10F1\x03\x02" +
		"\x02\x02\u02E0\u10F7\x03\x02\x02\x02\u02E2\u10FD\x03\x02\x02\x02\u02E4" +
		"\u1100\x03\x02\x02\x02\u02E6\u1103\x03\x02\x02\x02\u02E8\u1108\x03\x02" +
		"\x02\x02\u02EA\u110B\x03\x02\x02\x02\u02EC\u110F\x03\x02\x02\x02\u02EE" +
		"\u1111\x03\x02\x02\x02\u02F0\u1113\x03\x02\x02\x02\u02F2\u1129\x03\x02" +
		"\x02\x02\u02F4\u112C\x03\x02\x02\x02\u02F6\u113C\x03\x02\x02\x02\u02F8" +
		"\u1141\x03\x02\x02\x02\u02FA\u1143\x03\x02\x02\x02\u02FC\u1151\x03\x02" +
		"\x02\x02\u02FE\u115F\x03\x02\x02\x02\u0300\u116D\x03\x02\x02\x02\u0302" +
		"\u117B\x03\x02\x02\x02\u0304\u1186\x03\x02\x02\x02\u0306\u1192\x03\x02" +
		"\x02\x02\u0308\u11A4\x03\x02\x02\x02\u030A\u11B3\x03\x02\x02\x02\u030C" +
		"\u11C8\x03\x02\x02\x02\u030E\u11CB\x03\x02\x02\x02\u0310\u11D0\x03\x02" +
		"\x02\x02\u0312\u11EB\x03\x02\x02\x02\u0314\u11F2\x03\x02\x02\x02\u0316" +
		"\u11F4\x03\x02\x02\x02\u0318\u11F7\x03\x02\x02\x02\u031A\u1202\x03\x02" +
		"\x02\x02\u031C\u1204\x03\x02\x02\x02\u031E\u120A\x03\x02\x02\x02\u0320" +
		"\u120C\x03\x02\x02\x02\u0322\u1222\x03\x02\x02\x02\u0324\u124A\x03\x02" +
		"\x02\x02\u0326\u1250\x03\x02\x02\x02\u0328\u1257\x03\x02\x02\x02\u032A" +
		"\u125D\x03\x02\x02\x02\u032C\u1262\x03\x02\x02\x02\u032E\u1274\x03\x02" +
		"\x02\x02\u0330\u127D\x03\x02\x02\x02\u0332\u1286\x03\x02\x02\x02\u0334" +
		"\u1288\x03\x02\x02\x02\u0336\u128A\x03\x02\x02\x02\u0338\u128C\x03\x02" +
		"\x02\x02\u033A\u1294\x03\x02\x02\x02\u033C\u12A4\x03\x02\x02\x02\u033E" +
		"\u12A8\x03\x02\x02\x02\u0340\u12AA\x03\x02\x02\x02\u0342\u12AC\x03\x02" +
		"\x02\x02\u0344\u12B6\x03\x02\x02\x02\u0346\u12B8\x03\x02\x02\x02\u0348" +
		"\u12BD\x03\x02\x02\x02\u034A\u12C7\x03\x02\x02\x02\u034C\u12CF\x03\x02" +
		"\x02\x02\u034E\u12DB\x03\x02\x02\x02\u0350\u12DE\x03\x02\x02\x02\u0352" +
		"\u12E0\x03\x02\x02\x02\u0354\u12E2\x03\x02\x02\x02\u0356\u12F3\x03\x02" +
		"\x02\x02\u0358\u1301\x03\x02\x02\x02\u035A\u1305\x03\x02\x02\x02\u035C" +
		"\u1309\x03\x02\x02\x02\u035E\u130D\x03\x02\x02\x02\u0360\u130F\x03\x02" +
		"\x02\x02\u0362\u1311\x03\x02\x02\x02\u0364\u1313\x03\x02\x02\x02\u0366" +
		"\u1321\x03\x02\x02\x02\u0368\u133E\x03\x02\x02\x02\u036A\u1341\x03\x02" +
		"\x02\x02\u036C\u1349\x03\x02\x02\x02\u036E\u134B\x03\x02\x02\x02\u0370" +
		"\u135C\x03\x02\x02\x02\u0372\u1376\x03\x02\x02\x02\u0374\u1378\x03\x02" +
		"\x02\x02\u0376\u137A\x03\x02\x02\x02\u0378\u1383\x03\x02\x02\x02\u037A" +
		"\u1390\x03\x02\x02\x02\u037C\u1395\x03\x02\x02\x02\u037E\u1397\x03\x02" +
		"\x02\x02\u0380\u139E\x03\x02\x02\x02\u0382\u13A7\x03\x02\x02\x02\u0384" +
		"\u13AD\x03\x02\x02\x02\u0386\u13B6\x03\x02\x02\x02\u0388\u13D4\x03\x02" +
		"\x02\x02\u038A\u13D6\x03\x02\x02\x02\u038C\u13DC\x03\x02\x02\x02\u038E" +
		"\u13E8\x03\x02\x02\x02\u0390\u13EA\x03\x02\x02\x02\u0392\u13EC\x03\x02" +
		"\x02\x02\u0394\u13FD\x03\x02\x02\x02\u0396\u1403\x03\x02\x02\x02\u0398" +
		"\u1405\x03\x02\x02\x02\u039A\u1407\x03\x02\x02\x02\u039C\u1421\x03\x02" +
		"\x02\x02\u039E\u1423\x03\x02\x02\x02\u03A0\u1430\x03\x02\x02\x02\u03A2" +
		"\u1435\x03\x02\x02\x02\u03A4\u1437\x03\x02\x02\x02\u03A6\u1439\x03\x02" +
		"\x02\x02\u03A8\u144D\x03\x02\x02\x02\u03AA\u144F\x03\x02\x02\x02\u03AC" +
		"\u1451\x03\x02\x02\x02\u03AE\u145D\x03\x02\x02\x02\u03B0\u145F\x03\x02" +
		"\x02\x02\u03B2\u1461\x03\x02\x02\x02\u03B4\u1471\x03\x02\x02\x02\u03B6" +
		"\u1473\x03\x02\x02\x02\u03B8\u148D\x03\x02\x02\x02\u03BA\u148F\x03\x02" +
		"\x02\x02\u03BC\u1491\x03\x02\x02\x02\u03BE\u1493\x03\x02\x02\x02\u03C0" +
		"\u149F\x03\x02\x02\x02\u03C2\u14AD\x03\x02\x02\x02\u03C4\u14B5\x03\x02" +
		"\x02\x02\u03C6\u14B7\x03\x02\x02\x02\u03C8\u14C1\x03\x02\x02\x02\u03CA" +
		"\u14F4\x03\x02\x02\x02\u03CC\u14F7\x03\x02\x02\x02\u03CE\u14FB\x03\x02" +
		"\x02\x02\u03D0\u14FD\x03\x02\x02\x02\u03D2\u14FF\x03\x02\x02\x02\u03D4" +
		"\u1501\x03\x02\x02\x02\u03D6\u1504\x03\x02\x02\x02\u03D8\u1539\x03\x02" +
		"\x02\x02\u03DA\u1549\x03\x02\x02\x02\u03DC\u154B\x03\x02\x02\x02\u03DE" +
		"\u154D\x03\x02\x02\x02\u03E0\u1556\x03\x02\x02\x02\u03E2\u155E\x03\x02" +
		"\x02\x02\u03E4\u1560\x03\x02\x02\x02\u03E6\u1562\x03\x02\x02\x02\u03E8" +
		"\u03EA\x05T+\x02\u03E9\u03E8\x03\x02\x02\x02\u03EA\u03ED\x03\x02\x02\x02" +
		"\u03EB\u03E9\x03\x02\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC\u03F1\x03" +
		"\x02\x02\x02\u03ED\u03EB\x03\x02\x02\x02\u03EE\u03F0\x05\x04\x03\x02\u03EF" +
		"\u03EE\x03\x02\x02\x02\u03F0\u03F3\x03\x02\x02\x02\u03F1\u03EF\x03\x02" +
		"\x02\x02\u03F1\u03F2\x03\x02\x02\x02\u03F2\u03F4\x03\x02\x02\x02\u03F3" +
		"\u03F1\x03\x02\x02\x02\u03F4\u03F5\x07\x02\x02\x03\u03F5\x03\x03\x02\x02" +
		"\x02\u03F6\u03F8\x05\x06\x04\x02\u03F7\u03F9\x05\n\x06\x02\u03F8\u03F7" +
		"\x03\x02\x02\x02\u03F8\u03F9\x03\x02\x02\x02\u03F9\u03FB\x03\x02\x02\x02" +
		"\u03FA\u03FC\x05\x0E\b\x02\u03FB\u03FA\x03\x02\x02\x02\u03FB\u03FC\x03" +
		"\x02\x02\x02\u03FC\u03FE\x03\x02\x02\x02\u03FD\u03FF\x05\x12\n\x02\u03FE" +
		"\u03FD\x03\x02\x02\x02\u03FE\u03FF\x03\x02\x02\x02\u03FF\u0403\x03\x02" +
		"\x02\x02\u0400\u0402\x05\x04\x03\x02\u0401\u0400\x03\x02\x02\x02\u0402" +
		"\u0405\x03\x02\x02\x02\u0403\u0401\x03\x02\x02\x02\u0403\u0404\x03\x02" +
		"\x02\x02\u0404\u0407\x03\x02\x02\x02\u0405\u0403\x03\x02\x02\x02\u0406" +
		"\u0408\x05$\x13\x02\u0407\u0406\x03\x02\x02\x02\u0407\u0408\x03\x02\x02" +
		"\x02\u0408\x05\x03\x02\x02\x02\u0409\u040A\x05\b\x05\x02\u040A\u040C\x05" +
		"\u02F0\u0179\x02\u040B\u040D\x05\x16\f\x02\u040C\u040B\x03\x02\x02\x02" +
		"\u040C\u040D\x03\x02\x02\x02\u040D\u040F\x03\x02\x02\x02\u040E\u0410\x05" +
		"\u02FA\u017E\x02\u040F\u040E\x03\x02\x02\x02\u040F\u0410\x03\x02\x02\x02" +
		"\u0410\u0412\x03\x02\x02\x02\u0411\u0413\x05\u02FC\u017F\x02\u0412\u0411" +
		"\x03\x02\x02\x02\u0412\u0413\x03\x02\x02\x02\u0413\u0415\x03\x02\x02\x02" +
		"\u0414\u0416\x05\u02FE\u0180\x02\u0415\u0414\x03\x02\x02\x02\u0415\u0416" +
		"\x03\x02\x02\x02\u0416\u0418\x03\x02\x02\x02\u0417\u0419\x05\u0300\u0181" +
		"\x02\u0418\u0417\x03\x02\x02\x02\u0418\u0419\x03\x02\x02\x02\u0419\u041B" +
		"\x03\x02\x02\x02\u041A\u041C\x05\u0302\u0182\x02\u041B\u041A\x03\x02\x02" +
		"\x02\u041B\u041C\x03\x02\x02\x02\u041C\x07\x03\x02\x02\x02\u041D\u041E" +
		"\x07\xCF\x02\x02\u041E\u041F\x07\x80\x02\x02\u041F\u0423\x07\u01C3\x02" +
		"\x02\u0420\u0422\x05T+\x02\u0421\u0420\x03\x02\x02\x02\u0422\u0425\x03" +
		"\x02\x02\x02\u0423\u0421\x03\x02\x02\x02\u0423\u0424\x03\x02\x02\x02\u0424" +
		"\t\x03\x02\x02\x02\u0425\u0423\x03\x02\x02\x02\u0426\u0428\x05\f\x07\x02" +
		"\u0427\u0429\x05\u0306\u0184\x02\u0428\u0427\x03\x02\x02\x02\u0428\u0429" +
		"\x03\x02\x02\x02\u0429\u042B\x03\x02\x02\x02\u042A\u042C\x05\u0308\u0185" +
		"\x02\u042B\u042A\x03\x02\x02\x02\u042B\u042C\x03\x02\x02\x02\u042C\v\x03" +
		"\x02\x02\x02\u042D\u042E\x07\x9E\x02\x02\u042E\u042F\x07\x80\x02\x02\u042F" +
		"\u0433\x07\u01C3\x02\x02\u0430\u0432\x05T+\x02\u0431\u0430\x03\x02\x02" +
		"\x02\u0432\u0435\x03\x02\x02\x02\u0433\u0431\x03\x02\x02\x02\u0433\u0434" +
		"\x03\x02\x02\x02\u0434\r\x03\x02\x02\x02\u0435\u0433\x03\x02\x02\x02\u0436" +
		"\u0438\x05\x10\t\x02\u0437\u0439\x05\u01EA\xF6\x02\u0438\u0437\x03\x02" +
		"\x02\x02\u0438\u0439\x03\x02\x02\x02\u0439\u043B\x03\x02\x02\x02\u043A" +
		"\u043C\x05\u01F0\xF9\x02\u043B\u043A\x03\x02\x02\x02\u043B\u043C\x03\x02" +
		"\x02\x02\u043C\u043E\x03\x02\x02\x02\u043D\u043F\x05\u01F4\xFB\x02\u043E" +
		"\u043D\x03\x02\x02\x02\u043E\u043F\x03\x02\x02\x02\u043F\u0441\x03\x02" +
		"\x02\x02\u0440\u0442\x05\u01F6\xFC\x02\u0441\u0440\x03\x02\x02\x02\u0441" +
		"\u0442\x03\x02\x02\x02\u0442\u0444\x03\x02\x02\x02\u0443\u0445\x05\u01FA" +
		"\xFE\x02\u0444\u0443\x03\x02\x02\x02\u0444\u0445\x03\x02\x02\x02\u0445" +
		"\x0F\x03\x02\x02\x02\u0446\u0447\x07h\x02\x02\u0447\u0448\x07\x80\x02" +
		"\x02\u0448\u044C\x07\u01C3\x02\x02\u0449\u044B\x05T+\x02\u044A\u0449\x03" +
		"\x02\x02\x02\u044B\u044E\x03\x02\x02\x02\u044C\u044A\x03\x02\x02\x02\u044C" +
		"\u044D\x03\x02\x02\x02\u044D\x11\x03\x02\x02\x02\u044E\u044C\x03\x02\x02" +
		"\x02\u044F\u0451\x05(\x15\x02\u0450\u0452\x050\x19\x02\u0451\u0450\x03" +
		"\x02\x02\x02\u0451\u0452\x03\x02\x02\x02\u0452\u045F\x03\x02\x02\x02\u0453" +
		"\u0455\x05.\x18\x02\u0454\u0453\x03\x02\x02\x02\u0455\u0458\x03\x02\x02" +
		"\x02\u0456\u0454\x03\x02\x02\x02\u0456\u0457\x03\x02\x02\x02\u0457\u0460" +
		"\x03\x02\x02\x02\u0458\u0456\x03\x02\x02\x02\u0459\u045B\x058\x1D\x02" +
		"\u045A\u0459\x03\x02\x02\x02\u045B\u045E\x03\x02\x02\x02\u045C\u045A\x03" +
		"\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u0460\x03\x02\x02\x02\u045E" +
		"\u045C\x03\x02\x02\x02\u045F\u0456\x03\x02\x02\x02\u045F\u045C\x03\x02" +
		"\x02\x02\u0460\x13\x03\x02\x02\x02\u0461\u0462\x06\v\x02\x02\u0462\u0463" +
		"\v\x02\x02\x02\u0463\x15\x03\x02\x02\x02\u0464\u0468\x05\x18\r\x02\u0465" +
		"\u0467\x05\x14\v\x02\u0466\u0465\x03\x02\x02\x02\u0467\u046A\x03\x02\x02" +
		"\x02\u0468\u0466\x03\x02\x02\x02\u0468\u0469\x03\x02\x02\x02\u0469\u046E" +
		"\x03\x02\x02\x02\u046A\u0468\x03\x02\x02\x02\u046B\u046D\x05T+\x02\u046C" +
		"\u046B\x03\x02\x02\x02\u046D\u0470\x03\x02\x02\x02\u046E\u046C\x03\x02" +
		"\x02\x02\u046E\u046F\x03\x02\x02\x02\u046F\x17\x03\x02\x02\x02\u0470\u046E" +
		"\x03\x02\x02\x02\u0471\u0472\x07\"\x02\x02\u0472\u0473\x07\u01C3\x02\x02" +
		"\u0473\x19\x03\x02\x02\x02\u0474\u0475\t\x02\x02\x02\u0475\x1B\x03\x02" +
		"\x02\x02\u0476\u0477\t\x03\x02\x02\u0477\x1D\x03\x02\x02\x02\u0478\u047B" +
		"\x05\x1A\x0E\x02\u0479\u047B\x05\x1C\x0F\x02\u047A\u0478\x03\x02\x02\x02" +
		"\u047A\u0479\x03\x02\x02\x02\u047B\x1F\x03\x02\x02\x02\u047C\u0480\x05" +
		"\x1A\x0E\x02\u047D\u047E\x07\t\x02\x02\u047E\u0480\x07\x03\x02\x02\u047F" +
		"\u047C\x03\x02\x02\x02\u047F\u047D\x03\x02\x02\x02\u0480!\x03\x02\x02" +
		"\x02\u0481\u0484\x05 \x11\x02\u0482\u0484\x05\x1C\x0F\x02\u0483\u0481" +
		"\x03\x02\x02\x02\u0483\u0482\x03\x02\x02\x02\u0484#\x03\x02\x02\x02\u0485" +
		"\u0486\x05&\x14\x02\u0486\u0487\x05\u02F2\u017A\x02\u0487\u048B\x07\u01C3" +
		"\x02\x02\u0488\u048A\x05T+\x02\u0489\u0488\x03\x02\x02\x02\u048A\u048D" +
		"\x03\x02\x02\x02\u048B\u0489\x03\x02\x02\x02\u048B\u048C\x03\x02\x02\x02" +
		"\u048C%\x03\x02\x02\x02\u048D\u048B\x03\x02\x02\x02\u048E\u048F\x07\x88" +
		"\x02\x02\u048F\u0490\x07\u012B\x02\x02\u0490\'\x03\x02\x02\x02\u0491\u0493" +
		"\x05*\x16\x02\u0492\u0494\x05F$\x02\u0493\u0492\x03\x02\x02\x02\u0493" +
		"\u0494\x03\x02\x02\x02\u0494\u0496\x03\x02\x02\x02\u0495\u0497\x05H%\x02" +
		"\u0496\u0495\x03\x02\x02\x02\u0496\u0497\x03\x02\x02\x02\u0497\u0498\x03" +
		"\x02\x02\x02\u0498\u0499\x05,\x17\x02\u0499)\x03\x02\x02\x02\u049A\u049B" +
		"\x07\u0129\x02\x02\u049B\u049C\x07\x80\x02\x02\u049C+\x03\x02\x02\x02" +
		"\u049D\u04A1\x07\u01C3\x02\x02\u049E\u04A0\x05T+\x02\u049F\u049E\x03\x02" +
		"\x02\x02\u04A0\u04A3\x03\x02\x02\x02\u04A1\u049F\x03\x02\x02\x02\u04A1" +
		"\u04A2\x03\x02\x02\x02\u04A2-\x03\x02\x02\x02\u04A3\u04A1\x03\x02\x02" +
		"\x02\u04A4\u04A8\x05B\"\x02\u04A5\u04A7\x058\x1D\x02\u04A6\u04A5\x03\x02" +
		"\x02\x02\u04A7\u04AA\x03\x02\x02\x02\u04A8\u04A6\x03\x02\x02\x02\u04A8" +
		"\u04A9\x03\x02\x02\x02\u04A9/\x03\x02\x02\x02\u04AA\u04A8\x03\x02\x02" +
		"\x02\u04AB\u04AF\x052\x1A\x02\u04AC\u04AE\x056\x1C\x02\u04AD\u04AC\x03" +
		"\x02\x02\x02\u04AE\u04B1\x03\x02\x02\x02\u04AF\u04AD\x03\x02\x02\x02\u04AF" +
		"\u04B0\x03\x02\x02\x02\u04B0\u04B2\x03\x02\x02\x02\u04B1\u04AF\x03\x02" +
		"\x02\x02\u04B2\u04B3\x054\x1B\x02\u04B31\x03\x02\x02\x02\u04B4\u04B5\x07" +
		"q\x02\x02\u04B5\u04B9\x07\u01C3\x02\x02\u04B6\u04B8\x05T+\x02\u04B7\u04B6" +
		"\x03\x02\x02\x02\u04B8\u04BB\x03\x02\x02\x02\u04B9\u04B7\x03\x02\x02\x02" +
		"\u04B9\u04BA\x03\x02\x02\x02\u04BA3\x03\x02\x02\x02\u04BB\u04B9\x03\x02" +
		"\x02\x02\u04BC\u04BD\x07\x88\x02\x02\u04BD\u04BE\x07q\x02\x02\u04BE\u04C2" +
		"\x07\u01C3\x02\x02\u04BF\u04C1\x05T+\x02\u04C0\u04BF\x03\x02\x02\x02\u04C1" +
		"\u04C4\x03\x02\x02\x02\u04C2\u04C0\x03\x02\x02\x02\u04C2\u04C3\x03\x02" +
		"\x02\x02\u04C35\x03\x02\x02\x02\u04C4\u04C2\x03\x02\x02\x02\u04C5\u04C6" +
		"\x05B\"\x02\u04C6\u04CA\x05<\x1F\x02\u04C7\u04C9\x058\x1D\x02\u04C8\u04C7" +
		"\x03\x02\x02\x02\u04C9\u04CC\x03\x02\x02\x02\u04CA\u04C8\x03\x02\x02\x02" +
		"\u04CA\u04CB\x03\x02\x02\x02\u04CB7\x03\x02\x02\x02\u04CC\u04CA\x03\x02" +
		"\x02\x02\u04CD\u04CE\x05:\x1E\x02\u04CE\u04D2\x07\u01C3\x02\x02\u04CF" +
		"\u04D1\x05T+\x02\u04D0\u04CF\x03\x02\x02\x02\u04D1\u04D4\x03\x02\x02\x02" +
		"\u04D2\u04D0\x03\x02\x02\x02\u04D2\u04D3\x03\x02\x02\x02\u04D3\u04E4\x03" +
		"\x02\x02\x02\u04D4\u04D2\x03\x02\x02\x02\u04D5\u04D8\x05J&\x02\u04D6\u04D8" +
		"\x05L\'\x02\u04D7\u04D5\x03\x02\x02\x02\u04D7\u04D6\x03\x02\x02\x02\u04D8" +
		"\u04D9\x03\x02\x02\x02\u04D9\u04D7\x03\x02\x02\x02\u04D9\u04DA\x03\x02" +
		"\x02\x02\u04DA\u04DB\x03\x02\x02\x02\u04DB\u04DF\x07\u01C3\x02\x02\u04DC" +
		"\u04DE\x05T+\x02\u04DD\u04DC\x03\x02\x02\x02\u04DE\u04E1\x03\x02\x02\x02" +
		"\u04DF\u04DD\x03\x02\x02\x02\u04DF\u04E0\x03\x02\x02\x02\u04E0\u04E3\x03" +
		"\x02\x02\x02\u04E1\u04DF\x03\x02\x02\x02\u04E2\u04D7\x03\x02\x02\x02\u04E3" +
		"\u04E6\x03\x02\x02\x02\u04E4\u04E2\x03\x02\x02\x02\u04E4\u04E5\x03\x02" +
		"\x02\x02\u04E59\x03\x02\x02\x02\u04E6\u04E4\x03\x02\x02\x02\u04E7\u04E8" +
		"\t\x04\x02\x02\u04E8;\x03\x02\x02\x02\u04E9\u04EB\x07\u0199\x02\x02\u04EA" +
		"\u04EC\x07\xC4\x02\x02\u04EB\u04EA\x03\x02\x02\x02\u04EB\u04EC\x03\x02" +
		"\x02\x02\u04EC\u04FA\x03\x02\x02\x02\u04ED\u04EF\x07\b\x02\x02\u04EE\u04F0" +
		"\x07\u016B\x02\x02\u04EF\u04EE\x03\x02\x02\x02\u04EF\u04F0\x03\x02\x02" +
		"\x02\u04F0\u04F1\x03\x02\x02\x02\u04F1\u04F2\t\x05\x02\x02\u04F2\u04F4" +
		"\x07\u0129\x02\x02\u04F3\u04F5\x07\u010B\x02\x02\u04F4\u04F3\x03\x02\x02" +
		"\x02\u04F4\u04F5\x03\x02\x02\x02\u04F5\u04F6\x03\x02\x02\x02\u04F6\u04FB" +
		"\x05@!\x02\u04F7\u04F8\x07\'\x02\x02\u04F8\u04F9\x07\u0142\x02\x02\u04F9" +
		"\u04FB\x05> \x02\u04FA\u04ED\x03\x02\x02\x02\u04FA\u04F7\x03\x02\x02\x02" +
		"\u04FB\u04FC\x03\x02\x02\x02\u04FC\u0500\x07\u01C3\x02\x02\u04FD\u04FF" +
		"\x05T+\x02\u04FE\u04FD\x03\x02\x02\x02\u04FF\u0502\x03\x02\x02\x02\u0500" +
		"\u04FE\x03\x02\x02\x02\u0500\u0501\x03\x02\x02\x02\u0501=\x03\x02\x02" +
		"\x02\u0502\u0500\x03\x02\x02\x02\u0503\u0504\x05\u0338\u019D\x02\u0504" +
		"?\x03\x02\x02\x02\u0505\u0507\x05\u0398\u01CD\x02\u0506\u0505\x03\x02" +
		"\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508\u0506\x03\x02\x02\x02\u0508" +
		"\u0509\x03\x02\x02\x02\u0509\u050F\x03\x02\x02\x02\u050A\u050F\x07\xD8" +
		"\x02\x02\u050B\u050F\x07\u0114\x02\x02\u050C\u050F\x07\xDF\x02\x02\u050D" +
		"\u050F\x07\xAC\x02\x02\u050E\u0506\x03\x02\x02\x02\u050E\u050A\x03\x02" +
		"\x02\x02\u050E\u050B\x03\x02\x02\x02\u050E\u050C\x03\x02\x02\x02\u050E" +
		"\u050D\x03\x02\x02\x02\u050FA\x03\x02\x02\x02\u0510\u0511\x05D#\x02\u0511" +
		"\u0513\x07\u0157\x02\x02\u0512\u0514\x05\u031E\u0190\x02\u0513\u0512\x03" +
		"\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514\u0515\x03\x02\x02\x02\u0515" +
		"\u0519\x07\u01C3\x02\x02\u0516\u0518\x05T+\x02\u0517\u0516\x03\x02\x02" +
		"\x02\u0518\u051B\x03\x02\x02\x02\u0519\u0517\x03\x02\x02\x02\u0519\u051A" +
		"\x03\x02\x02\x02\u051AC\x03\x02\x02\x02\u051B\u0519\x03\x02\x02\x02\u051C" +
		"\u051D\t\x04\x02\x02\u051DE\x03\x02\x02\x02\u051E\u0520\x07\u019A\x02" +
		"\x02\u051F\u0521\x05\u0338\u019D\x02\u0520\u051F\x03\x02\x02\x02\u0521" +
		"\u0522\x03\x02\x02\x02\u0522\u0520\x03\x02\x02\x02\u0522\u0523\x03\x02" +
		"\x02\x02\u0523G\x03\x02\x02\x02\u0524\u0525\x07\xC3\x02\x02\u0525\u0526" +
		"\x05\u0338\u019D\x02\u0526I\x03\x02\x02\x02\u0527\u0552\x05\u019A\xCE" +
		"\x02\u0528\u0552\x05\u0194\xCB\x02\u0529\u0552\x05\u0192\xCA\x02\u052A" +
		"\u0552\x05\u0184\xC3\x02\u052B\u0552\x05\u0182\xC2\x02\u052C\u0552\x05" +
		"\u017E\xC0\x02\u052D\u0552\x05\u017C\xBF\x02\u052E\u0552\x05\u017A\xBE" +
		"\x02\u052F\u0552\x05\u0178\xBD\x02\u0530\u0552\x05\u014C\xA7\x02\u0531" +
		"\u0552\x05\u0142\xA2\x02\u0532\u0552\x05\u013C\x9F\x02\u0533\u0552\x05" +
		"\u0134\x9B\x02\u0534\u0552\x05\u0136\x9C\x02\u0535\u0552\x05\u0130\x99" +
		"\x02\u0536\u0552\x05\u0138\x9D\x02\u0537\u0552\x05\u012E\x98\x02\u0538" +
		"\u0552\x05\u0124\x93\x02\u0539\u0552\x05\u0122\x92\x02\u053A\u0552\x05" +
		"\xFE\x80\x02\u053B\u0552\x05\xECw\x02\u053C\u0552\x05\u012C\x97\x02\u053D" +
		"\u0552\x05\xE8u\x02\u053E\u0552\x05\xE2r\x02\u053F\u0552\x05\xCEh\x02" +
		"\u0540\u0552\x05\xC8e\x02\u0541\u0552\x05\xBC_\x02\u0542\u0552\x05\xB8" +
		"]\x02\u0543\u0552\x05\xB4[\x02\u0544\u0552\x05\xA8U\x02\u0545\u0552\x05" +
		"\x96L\x02\u0546\u0552\x05\x8CG\x02\u0547\u0552\x05\x88E\x02\u0548\u0552" +
		"\x05\x84C\x02\u0549\u0552\x05z>\x02\u054A\u0552\x05t;\x02\u054B\u0552" +
		"\x05r:\x02\u054C\u0552\x05p9\x02\u054D\u0552\x05n8\x02\u054E\u0552\x05" +
		"\\/\x02\u054F\u0552\x05V,\x02\u0550\u0552\x05\xC2b\x02\u0551\u0527\x03" +
		"\x02\x02\x02\u0551\u0528\x03\x02\x02\x02\u0551\u0529\x03\x02\x02\x02\u0551" +
		"\u052A\x03\x02\x02\x02\u0551\u052B\x03\x02\x02\x02\u0551\u052C\x03\x02" +
		"\x02\x02\u0551\u052D\x03\x02\x02\x02\u0551\u052E\x03\x02\x02\x02\u0551" +
		"\u052F\x03\x02\x02\x02\u0551\u0530\x03\x02\x02\x02\u0551\u0531\x03\x02" +
		"\x02\x02\u0551\u0532\x03\x02\x02\x02\u0551\u0533\x03\x02\x02\x02\u0551" +
		"\u0534\x03\x02\x02\x02\u0551\u0535\x03\x02\x02\x02\u0551\u0536\x03\x02" +
		"\x02\x02\u0551\u0537\x03\x02\x02\x02\u0551\u0538\x03\x02\x02\x02\u0551" +
		"\u0539\x03\x02\x02\x02\u0551\u053A\x03\x02\x02\x02\u0551\u053B\x03\x02" +
		"\x02\x02\u0551\u053C\x03\x02\x02\x02\u0551\u053D\x03\x02\x02\x02\u0551" +
		"\u053E\x03\x02\x02\x02\u0551\u053F\x03\x02\x02\x02\u0551\u0540\x03\x02" +
		"\x02\x02\u0551\u0541\x03\x02\x02\x02\u0551\u0542\x03\x02\x02\x02\u0551" +
		"\u0543\x03\x02\x02\x02\u0551\u0544\x03\x02\x02\x02\u0551\u0545\x03\x02" +
		"\x02\x02\u0551\u0546\x03\x02\x02\x02\u0551\u0547\x03\x02\x02\x02\u0551" +
		"\u0548\x03\x02\x02\x02\u0551\u0549\x03\x02\x02\x02\u0551\u054A\x03\x02" +
		"\x02\x02\u0551\u054B\x03\x02\x02\x02\u0551\u054C\x03\x02\x02\x02\u0551" +
		"\u054D\x03\x02\x02\x02\u0551\u054E\x03\x02\x02\x02\u0551\u054F\x03\x02" +
		"\x02\x02\u0551\u0550\x03\x02\x02\x02\u0552K\x03\x02\x02\x02\u0553\u0554" +
		"\x07\u01AB\x02\x02\u0554\u0558\x07\u01AC\x02\x02\u0555\u0557\n\x06\x02" +
		"\x02\u0556\u0555\x03\x02\x02\x02\u0557\u055A\x03\x02\x02\x02\u0558\u0556" +
		"\x03\x02\x02\x02\u0558\u0559\x03\x02\x02\x02\u0559\u055B\x03\x02\x02\x02" +
		"\u055A\u0558\x03\x02\x02\x02\u055B\u055D\x07\u01AD\x02\x02\u055C\u055E" +
		"\x07\u01C3\x02\x02\u055D\u055C\x03\x02\x02\x02\u055D\u055E\x03\x02\x02" +
		"\x02\u055EM\x03\x02\x02\x02\u055F\u0560\t\x07\x02\x02\u0560O\x03\x02\x02" +
		"\x02\u0561\u0562\t\x07\x02\x02\u0562Q\x03\x02\x02\x02\u0563\u0564\t\x07" +
		"\x02\x02\u0564S\x03\x02\x02\x02\u0565\u0566\x07\u013F\x02\x02\u0566\u0567" +
		"\x07\u0109\x02\x02\u0567\u0572\x07\u01C3\x02\x02\u0568\u056C\x07\u013F" +
		"\x02\x02\u0569\u056A\x07\u01B0\x02\x02\u056A\u056B\x074\x02\x02\u056B" +
		"\u056D\x07\u01B0\x02\x02\u056C\u0569\x03\x02\x02\x02\u056D\u056E\x03\x02" +
		"\x02\x02\u056E\u056C\x03\x02\x02\x02\u056E\u056F\x03\x02\x02\x02\u056F" +
		"\u0570\x03\x02\x02\x02\u0570\u0572\x07\u01C3\x02\x02\u0571\u0565\x03\x02" +
		"\x02\x02\u0571\u0568\x03\x02\x02\x02\u0572U\x03\x02\x02\x02\u0573\u0574" +
		"\x07\u01A4\x02\x02\u0574\u0577\x05\u02A8\u0155\x02\u0575\u0576\x07\xBF" +
		"\x02\x02\u0576\u0578\x05\u0156\xAC\x02\u0577\u0575\x03\x02\x02\x02\u0577" +
		"\u0578\x03\x02\x02\x02\u0578\u057E\x03\x02\x02\x02\u0579\u057A\x07\n\x02" +
		"\x02\u057A\u057C\x07\u0101\x02\x02\u057B\u057D\x07\u0113\x02\x02\u057C" +
		"\u057B\x03\x02\x02\x02\u057C\u057D\x03\x02\x02\x02\u057D\u057F\x03\x02" +
		"\x02\x02\u057E\u0579\x03\x02\x02\x02\u057E\u057F\x03\x02\x02\x02\u057F" +
		"\u0591\x03\x02\x02\x02\u0580\u0592\x05\u01A6\xD4\x02\u0581\u0583\t\b\x02" +
		"\x02\u0582\u0584\x07\x07\x02\x02\u0583\u0582\x03\x02\x02\x02\u0583\u0584" +
		"\x03\x02\x02\x02\u0584\u0585\x03\x02\x02\x02\u0585\u0587\x05X-\x02\u0586" +
		"\u0581\x03\x02\x02\x02\u0586\u0587\x03\x02\x02\x02\u0587\u0588\x03\x02" +
		"\x02\x02\u0588\u0592\x05\u01A4\xD3\x02\u0589\u058B\t\b\x02\x02\u058A\u058C" +
		"\x07\x07\x02\x02\u058B\u058A\x03\x02\x02\x02\u058B\u058C\x03\x02\x02\x02" +
		"\u058C\u058D\x03\x02\x02\x02\u058D\u058F\x05X-\x02\u058E\u0590\x05\u01A4" +
		"\xD3\x02\u058F\u058E\x03\x02\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590" +
		"\u0592\x03\x02\x02\x02\u0591\u0580\x03\x02\x02\x02\u0591\u0586\x03\x02" +
		"\x02\x02\u0591\u0589\x03\x02\x02\x02\u0591\u0592\x03\x02\x02\x02\u0592" +
		"\u0594\x03\x02\x02\x02\u0593\u0595\x07\x9D\x02\x02\u0594\u0593\x03\x02" +
		"\x02\x02\u0594\u0595\x03\x02\x02\x02\u0595W\x03\x02\x02\x02\u0596\u0598" +
		"\x05Z.\x02\u0597\u0599\t\t\x02\x02\u0598\u0597\x03\x02\x02\x02\u0598\u0599" +
		"\x03\x02\x02\x02\u0599\u059D\x03\x02\x02\x02\u059A\u059D\x05\u0360\u01B1" +
		"\x02\u059B\u059D\x07\u0118\x02\x02\u059C\u0596\x03\x02\x02\x02\u059C\u059A" +
		"\x03\x02\x02\x02\u059C\u059B\x03\x02\x02\x02\u059DY\x03\x02\x02\x02\u059E" +
		"\u05A1\x05\u03DA\u01EE\x02\u059F\u05A1\t\n\x02\x02\u05A0\u059E\x03\x02" +
		"\x02\x02\u05A0\u059F\x03\x02\x02\x02\u05A1[\x03\x02\x02\x02\u05A2\u05A3" +
		"\x07\u0193\x02\x02\u05A3\u05B0\x05l7\x02\u05A4\u05A6\x07u\x02\x02\u05A5" +
		"\u05A7\x074\x02\x02\u05A6\u05A5\x03\x02\x02\x02\u05A6\u05A7\x03\x02\x02" +
		"\x02\u05A7\u05A8\x03\x02\x02\x02\u05A8\u05AD\x05h5\x02\u05A9\u05AA\x07" +
		"\u010F\x02\x02\u05AA\u05AC\x05h5\x02\u05AB\u05A9\x03\x02\x02\x02\u05AC" +
		"\u05AF\x03\x02\x02\x02\u05AD\u05AB\x03\x02\x02\x02\u05AD\u05AE\x03\x02" +
		"\x02\x02\u05AE\u05B1\x03\x02\x02\x02\u05AF\u05AD\x03\x02\x02\x02\u05B0" +
		"\u05A4\x03\x02\x02\x02\u05B0\u05B1\x03\x02\x02\x02\u05B1\u05B2\x03\x02" +
		"\x02\x02\u05B2\u05B4\x07\xDC\x02\x02\u05B3\u05B5\x05`1\x02\u05B4\u05B3" +
		"\x03\x02\x02\x02\u05B5\u05B6\x03\x02\x02\x02\u05B6\u05B4\x03\x02\x02\x02" +
		"\u05B6\u05B7\x03\x02\x02\x02\u05B7\u05BD\x03\x02\x02\x02\u05B8\u05BA\x07" +
		"\u01A1\x02\x02\u05B9\u05B8\x03\x02\x02\x02\u05B9\u05BA\x03\x02\x02\x02" +
		"\u05BA\u05BB\x03\x02\x02\x02\u05BB\u05BC\x07\u011F\x02\x02\u05BC\u05BE" +
		"\x05|?\x02\u05BD\u05B9\x03\x02\x02\x02\u05BD\u05BE\x03\x02\x02\x02\u05BE" +
		"\u05C4\x03\x02\x02\x02\u05BF\u05C1\x07\u017F\x02\x02\u05C0\u05C2\x07\xD1" +
		"\x02\x02\u05C1\u05C0\x03\x02\x02\x02\u05C1\u05C2\x03\x02\x02\x02\u05C2" +
		"\u05C3\x03\x02\x02\x02\u05C3\u05C5\x05^0\x02\u05C4\u05BF\x03\x02\x02\x02" +
		"\u05C4\u05C5\x03\x02\x02\x02\u05C5\u05C7\x03\x02\x02\x02\u05C6\u05C8\x05" +
		"\u01A2\xD2\x02\u05C7\u05C6\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02" +
		"\u05C8\u05CA\x03";
	private static readonly _serializedATNSegment4: string =
		"\x02\x02\x02\u05C9\u05CB\x07\x9C\x02\x02\u05CA\u05C9\x03\x02\x02\x02\u05CA" +
		"\u05CB\x03\x02\x02\x02\u05CB]\x03\x02\x02\x02\u05CC\u05CD\x05\u03D8\u01ED" +
		"\x02\u05CD_\x03\x02\x02\x02\u05CE\u05D4\x05d3\x02\u05CF\u05D1\x07v\x02" +
		"\x02\u05D0\u05D2\x07\xD1\x02\x02\u05D1\u05D0\x03\x02\x02\x02\u05D1\u05D2" +
		"\x03\x02\x02\x02\u05D2\u05D3\x03\x02\x02\x02\u05D3\u05D5\x05f4\x02\u05D4" +
		"\u05CF\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02\x02\u05D5\u05DB\x03\x02" +
		"\x02\x02\u05D6\u05D8\x07c\x02\x02\u05D7\u05D9\x07\xD1\x02\x02\u05D8\u05D7" +
		"\x03\x02\x02\x02\u05D8\u05D9\x03\x02\x02\x02\u05D9\u05DA\x03\x02\x02\x02" +
		"\u05DA\u05DC\x05b2\x02\u05DB\u05D6\x03\x02\x02\x02\u05DB\u05DC\x03\x02" +
		"\x02\x02\u05DCa\x03\x02\x02\x02\u05DD\u05DE\x05\u03D8\u01ED\x02\u05DE" +
		"c\x03\x02\x02\x02\u05DF\u05E0\x05\u03D8\u01ED\x02\u05E0e\x03\x02\x02\x02" +
		"\u05E1\u05E2\x05\u03D8\u01ED\x02\u05E2g\x03\x02\x02\x02\u05E3\u05E5\x07" +
		"\t\x02\x02\u05E4\u05E3\x03\x02\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5" +
		"\u05E6\x03\x02\x02\x02\u05E6\u05E7\x05j6\x02\u05E7i\x03\x02\x02\x02\u05E8" +
		"\u05EC\x05\u03DA\u01EE\x02\u05E9\u05EC\x07\x03\x02\x02\u05EA\u05EC\x05" +
		"\x1E\x10\x02\u05EB\u05E8\x03\x02\x02\x02\u05EB\u05E9\x03\x02\x02\x02\u05EB" +
		"\u05EA\x03\x02\x02\x02\u05ECk\x03\x02\x02\x02\u05ED\u05EE\x05\u03DA\u01EE" +
		"\x02\u05EEm\x03\x02\x02\x02\u05EF\u05F0\x07\u0191\x02\x02\u05F0\u05F7" +
		"\x05\u0398\u01CD\x02\u05F1\u05F8\x07\u0134\x02\x02\u05F2\u05F8\x07\u0135" +
		"\x02\x02\u05F3\u05F5\x07\t\x02\x02\u05F4\u05F6\x07\u0135\x02\x02\u05F5" +
		"\u05F4\x03\x02\x02\x02\u05F5\u05F6\x03\x02\x02\x02\u05F6\u05F8\x03\x02" +
		"\x02\x02\u05F7\u05F1\x03\x02\x02\x02\u05F7\u05F2\x03\x02\x02\x02\u05F7" +
		"\u05F3\x03\x02\x02\x02\u05F7\u05F8\x03\x02\x02\x02\u05F8o\x03\x02\x02" +
		"\x02\u05F9\u05FB\x07\u0181\x02\x02\u05FA\u05FC\x05\u029A\u014E\x02\u05FB" +
		"\u05FA\x03\x02\x02\x02\u05FC\u05FD\x03\x02\x02\x02\u05FD\u05FB\x03\x02" +
		"\x02\x02\u05FD\u05FE\x03\x02\x02\x02\u05FEq\x03\x02\x02\x02\u05FF\u0601" +
		"\x07\u0175\x02\x02\u0600\u0602\x07\u0126\x02\x02\u0601\u0600\x03\x02\x02" +
		"\x02\u0601\u0602\x03\x02\x02\x02\u0602s\x03\x02\x02\x02\u0603\u061E\x07" +
		"\u0172\x02\x02\u0604\u0606\x05x=\x02\u0605\u0604\x03\x02\x02\x02\u0606" +
		"\u0607\x03\x02\x02\x02\u0607\u0605\x03\x02\x02\x02\u0607\u0608\x03\x02" +
		"\x02\x02\u0608\u0609\x03\x02\x02\x02\u0609\u060D\x07\xBF\x02\x02\u060A" +
		"\u060B\x05x=\x02\u060B\u060C\x07\xC3\x02\x02\u060C\u060E\x03\x02\x02\x02" +
		"\u060D\u060A\x03\x02\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E\u0613\x03" +
		"\x02\x02\x02\u060F\u0611\x05\u03D8\u01ED\x02\u0610\u0612\x07\u0151\x02" +
		"\x02\u0611\u0610\x03\x02\x02\x02\u0611\u0612\x03\x02\x02\x02\u0612\u0614" +
		"\x03\x02\x02\x02\u0613\u060F\x03\x02\x02\x02\u0614\u0615\x03\x02\x02\x02" +
		"\u0615\u0613\x03\x02\x02\x02\u0615\u0616\x03\x02\x02\x02\u0616\u061F\x03" +
		"\x02\x02\x02\u0617\u0618\t\v\x02\x02\u0618\u0619\x05v<\x02\u0619\u061A" +
		"\x07\xBF\x02\x02\u061A\u061C\x05v<\x02\u061B\u061D\x07\u0151\x02\x02\u061C" +
		"\u061B\x03\x02\x02\x02\u061C\u061D\x03\x02\x02\x02\u061D\u061F\x03\x02" +
		"\x02\x02\u061E\u0605\x03\x02\x02\x02\u061E\u0617\x03\x02\x02\x02\u061F" +
		"\u0621\x03\x02\x02\x02\u0620\u0622\x05\u01A0\xD1\x02\u0621\u0620\x03\x02" +
		"\x02\x02\u0621\u0622\x03\x02\x02\x02\u0622\u0624\x03\x02\x02\x02\u0623" +
		"\u0625\x07\x9B\x02\x02\u0624\u0623\x03\x02\x02\x02\u0624\u0625\x03\x02" +
		"\x02\x02\u0625u\x03\x02\x02\x02\u0626\u0627\x05\u03D8\u01ED\x02\u0627" +
		"w\x03\x02\x02\x02\u0628\u062B\t\f\x02\x02\u0629\u062B\x05\u03DA\u01EE" +
		"\x02\u062A\u0628\x03\x02\x02\x02\u062A\u0629\x03\x02\x02\x02\u062By\x03" +
		"\x02\x02\x02\u062C\u063A\x07\u0171\x02\x02\u062D\u062F\x05\x82B\x02\u062E" +
		"\u062D\x03\x02\x02\x02\u062F\u0630\x03\x02\x02\x02\u0630\u062E\x03\x02" +
		"\x02\x02\u0630\u0631\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02\u0632" +
		"\u0634\x07u\x02\x02\u0633\u0635\x074\x02\x02\u0634\u0633\x03\x02\x02\x02" +
		"\u0634\u0635\x03\x02\x02\x02\u0635\u0638\x03\x02\x02\x02\u0636\u0639\x07" +
		"\u0163\x02\x02\u0637\u0639\x05\x80A\x02\u0638\u0636\x03\x02\x02\x02\u0638" +
		"\u0637\x03\x02\x02\x02\u0639\u063B\x03\x02\x02\x02\u063A\u062E\x03\x02" +
		"\x02\x02\u063B\u063C\x03\x02\x02\x02\u063C\u063A\x03\x02\x02\x02\u063C" +
		"\u063D\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u063F\x07\xDC" +
		"\x02\x02\u063F\u0645\x05~@\x02\u0640\u0642\x07\u01A1\x02\x02\u0641\u0640" +
		"\x03\x02\x02\x02\u0641\u0642\x03\x02\x02\x02\u0642\u0643\x03\x02\x02\x02" +
		"\u0643\u0644\x07\u011F\x02\x02\u0644\u0646\x05|?\x02\u0645\u0641\x03\x02" +
		"\x02\x02\u0645\u0646\x03\x02\x02\x02\u0646\u0648\x03\x02\x02\x02\u0647" +
		"\u0649\x05\u01A2\xD2\x02\u0648\u0647\x03\x02\x02\x02\u0648\u0649\x03\x02" +
		"\x02\x02\u0649\u064B\x03\x02\x02\x02\u064A\u064C\x07\x9A\x02\x02\u064B" +
		"\u064A\x03\x02\x02\x02\u064B\u064C\x03\x02\x02\x02\u064C{\x03\x02\x02" +
		"\x02\u064D\u064E\x05\u03D8\u01ED\x02\u064E}\x03\x02\x02\x02\u064F\u0650" +
		"\x05\u03D8\u01ED\x02\u0650\x7F\x03\x02\x02\x02\u0651\u0652\x05\x82B\x02" +
		"\u0652\x81\x03\x02\x02\x02\u0653\u0657\x05\u03D8\u01ED\x02\u0654\u0657" +
		"\x07\x03\x02\x02\u0655\u0657\x05\"\x12\x02\u0656\u0653\x03\x02\x02\x02" +
		"\u0656\u0654\x03\x02\x02\x02\u0656\u0655\x03\x02\x02\x02\u0657\x83\x03" +
		"\x02\x02\x02\u0658\u065B\x07\u0170\x02\x02\u0659\u065C\x07\u0152\x02\x02" +
		"\u065A\u065C\x05\x86D\x02\u065B\u0659\x03\x02\x02\x02\u065B\u065A\x03" +
		"\x02\x02\x02\u065C\x85\x03\x02\x02\x02\u065D\u0661\x07\x03\x02\x02\u065E" +
		"\u0661\t\f\x02\x02\u065F\u0661\x05\x1E\x10\x02\u0660\u065D\x03\x02\x02" +
		"\x02\u0660\u065E\x03\x02\x02\x02\u0660\u065F\x03\x02\x02\x02\u0661\x87" +
		"\x03\x02\x02\x02\u0662\u0663\x07\u016E\x02\x02\u0663\u0668\x05\u0398\u01CD" +
		"\x02\u0664\u0665\x07\xE3\x02\x02\u0665\u0666\x05\u03D6\u01EC\x02\u0666" +
		"\u0667\x05\x8AF\x02\u0667\u0669\x03\x02\x02\x02\u0668\u0664\x03\x02\x02" +
		"\x02\u0668\u0669\x03\x02\x02\x02\u0669\u066B\x03\x02\x02\x02\u066A\u066C" +
		"\x05\xCAf\x02\u066B\u066A\x03\x02\x02\x02\u066B\u066C\x03\x02\x02\x02" +
		"\u066C\u066E\x03\x02\x02\x02\u066D\u066F\x05\u01A6\xD4\x02\u066E\u066D" +
		"\x03\x02\x02\x02\u066E\u066F\x03\x02\x02\x02\u066F\u0671\x03\x02\x02\x02" +
		"\u0670\u0672\x07\x99\x02\x02\u0671\u0670\x03\x02\x02\x02\u0671\u0672\x03" +
		"\x02\x02\x02\u0672\x89\x03\x02\x02\x02\u0673\u0674\x05\u0338\u019D\x02" +
		"\u0674\x8B\x03\x02\x02\x02\u0675\u0676\x07\u0164\x02\x02\u0676\u067A\x05" +
		"\x8EH\x02\u0677\u0679\x05\x92J\x02\u0678\u0677\x03\x02\x02\x02\u0679\u067C" +
		"\x03\x02\x02\x02\u067A\u0678\x03\x02\x02\x02\u067A\u067B\x03\x02\x02\x02" +
		"\u067B\u0687\x03\x02\x02\x02\u067C\u067A\x03\x02\x02\x02\u067D\u067F\x07" +
		"\u01A1\x02\x02\u067E\u067D\x03\x02\x02\x02\u067E\u067F\x03\x02\x02\x02" +
		"\u067F\u0680\x03\x02\x02\x02\u0680\u0682\x07\x82\x02\x02\u0681\u0683\x07" +
		"\xD1\x02\x02\u0682\u0681\x03\x02\x02\x02\u0682\u0683\x03\x02\x02\x02\u0683" +
		"\u0685\x03\x02\x02\x02\u0684\u0686\x07\u0110\x02\x02\u0685\u0684\x03\x02" +
		"\x02\x02\u0685\u0686\x03\x02\x02\x02\u0686\u0688\x03\x02\x02\x02\u0687" +
		"\u067E\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688\u0691\x03\x02" +
		"\x02\x02\u0689\u068B\x07B\x02\x02\u068A\u0689\x03\x02\x02\x02\u068A\u068B" +
		"\x03\x02\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C\u068E\x07\u015E\x02" +
		"\x02\u068D\u068F\x07\xDE\x02\x02\u068E\u068D\x03\x02\x02\x02\u068E\u068F" +
		"\x03\x02\x02\x02\u068F\u0690\x03\x02\x02\x02\u0690\u0692\x05\u031A\u018E" +
		"\x02\u0691\u068A\x03\x02\x02\x02\u0691\u0692\x03\x02\x02\x02\u0692\u069B" +
		"\x03\x02\x02\x02\u0693\u0694\x07\xD8\x02\x02\u0694\u069C\x05\x90I\x02" +
		"\u0695\u0697\x07\u019A\x02\x02\u0696\u0698\x05\u0398\u01CD\x02\u0697\u0696" +
		"\x03\x02\x02\x02\u0698\u0699\x03\x02\x02\x02\u0699\u0697\x03\x02\x02\x02" +
		"\u0699\u069A\x03\x02\x02\x02\u069A\u069C\x03\x02\x02\x02\u069B\u0693\x03" +
		"\x02\x02\x02\u069B\u0695\x03\x02\x02\x02\u069B\u069C\x03\x02\x02\x02\u069C" +
		"\u06A5\x03\x02\x02\x02\u069D\u069E\x07\u0114\x02\x02\u069E\u06A6\x05\x90" +
		"I\x02\u069F\u06A1\x07\xC3\x02\x02\u06A0\u06A2\x05\u0398\u01CD\x02\u06A1" +
		"\u06A0\x03\x02\x02\x02\u06A2\u06A3\x03\x02\x02\x02\u06A3\u06A1\x03\x02" +
		"\x02\x02\u06A3\u06A4\x03\x02\x02\x02\u06A4\u06A6\x03\x02\x02\x02\u06A5" +
		"\u069D\x03\x02\x02\x02\u06A5\u069F\x03\x02\x02\x02\u06A5\u06A6\x03\x02" +
		"\x02\x02\u06A6\x8D\x03\x02\x02\x02\u06A7\u06A8\x05\u0338\u019D\x02\u06A8" +
		"\x8F\x03\x02\x02\x02\u06A9\u06AB\x07\u0129\x02\x02\u06AA\u06AC\x07\xDE" +
		"\x02\x02\u06AB\u06AA\x03\x02\x02\x02\u06AB\u06AC\x03\x02\x02\x02\u06AC" +
		"\u06AD\x03\x02\x02\x02\u06AD\u06AE\x05\xD0i\x02\u06AE\x91\x03\x02\x02" +
		"\x02\u06AF\u06B1\x07\u010B\x02\x02\u06B0\u06AF\x03\x02\x02\x02\u06B0\u06B1" +
		"\x03\x02\x02\x02\u06B1\u06B2\x03\x02\x02\x02\u06B2\u06B4\t\r\x02\x02\u06B3" +
		"\u06B5\x07\xE3\x02\x02\u06B4\u06B3\x03\x02\x02\x02\u06B4\u06B5\x03\x02" +
		"\x02\x02\u06B5\u06B6\x03\x02\x02\x02\u06B6\u06BA\x05\x94K\x02\u06B7\u06B9" +
		"\x05\x94K\x02\u06B8\u06B7\x03\x02\x02\x02\u06B9\u06BC\x03\x02\x02\x02" +
		"\u06BA\u06B8\x03\x02\x02\x02\u06BA\u06BB\x03\x02\x02\x02\u06BB\x93\x03" +
		"\x02\x02\x02\u06BC\u06BA\x03\x02\x02\x02\u06BD\u06BE\x05\u0338\u019D\x02" +
		"\u06BE\x95\x03\x02\x02\x02\u06BF\u06C6\x05\x98M\x02\u06C0\u06C6\x05\x9A" +
		"N\x02\u06C1\u06C6\x05\x9CO\x02\u06C2\u06C6\x05\x9EP\x02\u06C3\u06C6\x05" +
		"\xA0Q\x02\u06C4\u06C6\x05\xA2R\x02\u06C5\u06BF\x03\x02\x02\x02\u06C5\u06C0" +
		"\x03\x02\x02\x02\u06C5\u06C1\x03\x02\x02\x02\u06C5\u06C2\x03\x02\x02\x02" +
		"\u06C5\u06C3\x03\x02\x02\x02\u06C5\u06C4\x03\x02\x02\x02\u06C6\x97\x03" +
		"\x02\x02\x02\u06C7\u06C9\x07\u0160\x02\x02\u06C8\u06CA\x05\u03D8\u01ED" +
		"\x02\u06C9\u06C8\x03\x02\x02\x02\u06CA\u06CB\x03\x02\x02\x02\u06CB\u06C9" +
		"\x03\x02\x02\x02\u06CB\u06CC\x03\x02\x02\x02\u06CC\u06CD\x03\x02\x02\x02" +
		"\u06CD\u06CE\x07\u0189\x02\x02\u06CE\u06CF\x05\xA6T\x02\u06CF\x99\x03" +
		"\x02\x02\x02\u06D0\u06D2\x07\u0160\x02\x02\u06D1\u06D3\x05\u03D8\u01ED" +
		"\x02\u06D2\u06D1\x03\x02\x02\x02\u06D3\u06D4\x03\x02\x02\x02\u06D4\u06D2" +
		"\x03\x02\x02\x02\u06D4\u06D5\x03\x02\x02\x02\u06D5\u06D6\x03\x02\x02\x02" +
		"\u06D6\u06D7\t\x0E\x02\x02\u06D7\u06D8\x074\x02\x02\u06D8\u06D9\x05\xA4" +
		"S\x02\u06D9\x9B\x03\x02\x02\x02\u06DA\u06DC\x07\u0160\x02\x02\u06DB\u06DD" +
		"\x05\u03D8\u01ED\x02\u06DC\u06DB\x03\x02\x02\x02\u06DD\u06DE\x03\x02\x02" +
		"\x02\u06DE\u06DC\x03\x02\x02\x02\u06DE\u06DF\x03\x02\x02\x02\u06DF\u06E0" +
		"\x03\x02\x02\x02\u06E0\u06E1\x07\u0189\x02\x02\u06E1\u06E2\x07\u018C\x02" +
		"\x02\u06E2\x9D\x03\x02\x02\x02\u06E3\u06E8\x07\u0160\x02\x02\u06E4\u06E5" +
		"\x05\u03D8\u01ED\x02\u06E5\u06E6\x07\u0189\x02\x02\u06E6\u06E7\t\x0F\x02" +
		"\x02\u06E7\u06E9\x03\x02\x02\x02\u06E8\u06E4\x03\x02\x02\x02\u06E9\u06EA" +
		"\x03\x02\x02\x02\u06EA\u06E8\x03\x02\x02\x02\u06EA\u06EB\x03\x02\x02\x02" +
		"\u06EB\x9F\x03\x02\x02\x02\u06EC\u06EE\x07\u0160\x02\x02\u06ED\u06EF\x05" +
		"\u03D8\u01ED\x02\u06EE\u06ED\x03\x02\x02\x02\u06EF\u06F0\x03\x02\x02\x02" +
		"\u06F0\u06EE\x03\x02\x02\x02\u06F0\u06F1\x03\x02\x02\x02\u06F1\u06F2\x03" +
		"\x02\x02\x02\u06F2\u06F3\x07\u0189\x02\x02\u06F3\u06F5\x07\u0138\x02\x02" +
		"\u06F4\u06F6\x07\u0108\x02\x02\u06F5\u06F4\x03\x02\x02\x02\u06F5\u06F6" +
		"\x03\x02\x02\x02\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06F8\x05\u03D8\u01ED" +
		"\x02\u06F8\xA1\x03\x02\x02\x02\u06F9\u06FA\x07\u0160\x02\x02\u06FA\u06FB" +
		"\x05\u03D8\u01ED\x02\u06FB\u06FC\x07\u0189\x02\x02\u06FC\u06FD\t\x10\x02" +
		"\x02\u06FD\xA3\x03\x02\x02\x02\u06FE\u0701\x05\u03DA\u01EE\x02\u06FF\u0701" +
		"\t\f\x02\x02\u0700\u06FE\x03\x02\x02\x02\u0700\u06FF\x03\x02\x02\x02\u0701" +
		"\xA5\x03\x02\x02\x02\u0702\u0705\x05\u03DA\u01EE\x02\u0703\u0705\t\f\x02" +
		"\x02\u0704\u0702\x03\x02\x02\x02\u0704\u0703\x03\x02\x02\x02\u0705\xA7" +
		"\x03\x02\x02\x02\u0706\u0707\x07\u0156\x02\x02\u0707\u070A\x05\xB2Z\x02" +
		"\u0708\u0709\x07\u019D\x02\x02\u0709\u070B\x05\xB0Y\x02\u070A\u0708\x03" +
		"\x02\x02\x02\u070A\u070B\x03\x02\x02\x02\u070B\u070D\x03\x02\x02\x02\u070C" +
		"\u070E\x05\u01DE\xF0\x02\u070D\u070C\x03\x02\x02\x02\u070D\u070E\x03\x02" +
		"\x02\x02\u070E\u0730\x03\x02\x02\x02\u070F\u0710\x07\u019F\x02\x02\u0710" +
		"\u0713\x05\u03C8\u01E5\x02\u0711\u0714\x05J&\x02\u0712\u0714\x05L\'\x02" +
		"\u0713\u0711\x03\x02\x02\x02\u0713\u0712\x03\x02\x02\x02\u0714\u0715\x03" +
		"\x02\x02\x02\u0715\u0713\x03\x02\x02\x02\u0715\u0716\x03\x02\x02\x02\u0716" +
		"\u0718\x03\x02\x02\x02\u0717\u070F\x03\x02\x02\x02\u0718\u0719\x03\x02" +
		"\x02\x02\u0719\u0717\x03\x02\x02\x02\u0719\u071A\x03\x02\x02\x02\u071A" +
		"\u071B\x03\x02\x02\x02\u071B\u071C\x07\x98\x02\x02\u071C\u0731\x03\x02" +
		"\x02\x02\u071D\u071E\x07\u019F\x02\x02\u071E\u072A\x05\u03C8\u01E5\x02" +
		"\u071F\u0722\x05J&\x02\u0720\u0722\x05L\'\x02\u0721\u071F\x03\x02\x02" +
		"\x02\u0721\u0720\x03\x02\x02\x02\u0722\u0723\x03\x02\x02\x02\u0723\u0721" +
		"\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724\u0726\x03\x02\x02\x02" +
		"\u0725\u0727\x07\x98\x02\x02\u0726\u0725\x03\x02\x02\x02\u0726\u0727\x03" +
		"\x02\x02\x02\u0727\u072B\x03\x02\x02\x02\u0728\u0729\x07\u0100\x02\x02" +
		"\u0729\u072B\x07\u015C\x02\x02\u072A\u0721\x03\x02\x02\x02\u072A\u0728" +
		"\x03\x02\x02\x02\u072B\u072D\x03\x02\x02\x02\u072C\u071D\x03\x02\x02\x02" +
		"\u072D\u072E\x03\x02\x02\x02\u072E\u072C\x03\x02\x02\x02\u072E\u072F\x03" +
		"\x02\x02\x02\u072F\u0731\x03\x02\x02\x02\u0730\u0717\x03\x02\x02\x02\u0730" +
		"\u072C\x03\x02\x02\x02\u0731\u074F\x03\x02\x02\x02\u0732\u0733\x07\u0156" +
		"\x02\x02\u0733\u0734\x07\t\x02\x02\u0734\u0736\x05\xB2Z\x02\u0735\u0737" +
		"\x05\u01DE\xF0\x02\u0736\u0735\x03\x02\x02\x02\u0736\u0737\x03\x02\x02" +
		"\x02\u0737\u0738\x03\x02\x02\x02\u0738\u0739\x07\u019F\x02\x02\u0739\u073E" +
		"\x05\xAAV\x02\u073A\u073B\x07\x15\x02\x02\u073B\u073D\x05\xAAV\x02\u073C" +
		"\u073A\x03\x02\x02\x02\u073D\u0740\x03\x02\x02\x02\u073E\u073C\x03\x02" +
		"\x02\x02\u073E\u073F\x03\x02\x02\x02\u073F\u074C\x03\x02\x02\x02\u0740" +
		"\u073E\x03\x02\x02\x02\u0741\u0744\x05J&\x02\u0742\u0744\x05L\'\x02\u0743" +
		"\u0741\x03\x02\x02\x02\u0743\u0742\x03\x02\x02\x02\u0744\u0745\x03\x02" +
		"\x02\x02\u0745\u0743\x03\x02\x02\x02\u0745\u0746\x03\x02\x02\x02\u0746" +
		"\u0748\x03\x02\x02\x02\u0747\u0749\x07\x98\x02\x02\u0748\u0747\x03\x02" +
		"\x02\x02\u0748\u0749\x03\x02\x02\x02\u0749\u074D\x03\x02\x02\x02\u074A" +
		"\u074B\x07\u0100\x02\x02\u074B\u074D\x07\u015C\x02\x02\u074C\u0743\x03" +
		"\x02\x02\x02\u074C\u074A\x03\x02\x02\x02\u074D\u074F\x03\x02\x02\x02\u074E" +
		"\u0706\x03\x02\x02\x02\u074E\u0732\x03\x02\x02\x02\u074F\xA9\x03\x02\x02" +
		"\x02\u0750\u075C\x05\xAEX\x02\u0751\u0753\x07\xDE\x02\x02\u0752\u0751" +
		"\x03\x02\x02\x02\u0752\u0753\x03\x02\x02\x02\u0753\u0754\x03\x02\x02\x02" +
		"\u0754\u0756\x07\xA4\x02\x02\u0755\u0757\x07\u0189\x02\x02\u0756\u0755" +
		"\x03\x02\x02\x02\u0756\u0757\x03\x02\x02\x02\u0757\u075D\x03\x02\x02\x02" +
		"\u0758\u075A\x07\xDE\x02\x02\u0759\u0758\x03\x02\x02\x02\u0759\u075A\x03" +
		"\x02\x02\x02\u075A\u075B\x03\x02\x02\x02\u075B\u075D\x07\u01B8\x02\x02" +
		"\u075C\u0752\x03\x02\x02\x02\u075C\u0759\x03\x02\x02\x02\u075D\u075E\x03" +
		"\x02\x02\x02\u075E\u075F\x05\xACW\x02\u075F\u0762\x03\x02\x02\x02\u0760" +
		"\u0762\x05\u03AC\u01D7\x02\u0761\u0750\x03\x02\x02\x02\u0761\u0760\x03" +
		"\x02\x02\x02\u0762\xAB\x03\x02\x02\x02\u0763\u0764\x05\u03C0\u01E1\x02" +
		"\u0764\xAD\x03\x02\x02\x02\u0765\u0766\x05\u03D8\u01ED\x02\u0766\xAF\x03" +
		"\x02\x02\x02\u0767\u0768\x05\u03DA\u01EE\x02\u0768\xB1\x03\x02\x02\x02" +
		"\u0769\u076A\x05\u0338\u019D\x02\u076A\xB3\x03\x02\x02\x02\u076B\u076C" +
		"\x07\u014C\x02\x02\u076C\u076F\x05\xB6\\\x02\u076D\u076E\x07\xBF\x02\x02" +
		"\u076E\u0770\x05\u0156\xAC\x02\u076F\u076D\x03\x02\x02\x02\u076F\u0770" +
		"\x03\x02\x02\x02\u0770\u0776\x03\x02\x02\x02\u0771\u0772\x07\n\x02\x02" +
		"\u0772\u0774\x07\u0101\x02\x02\u0773\u0775\x07\u0113\x02\x02\u0774\u0773" +
		"\x03\x02\x02\x02\u0774\u0775\x03\x02\x02\x02\u0775\u0777\x03\x02\x02\x02" +
		"\u0776\u0771\x03\x02\x02\x02\u0776\u0777\x03\x02\x02\x02\u0777\u0779\x03" +
		"\x02\x02\x02\u0778\u077A\x05\u01A6\xD4\x02\u0779\u0778\x03\x02\x02\x02" +
		"\u0779\u077A\x03\x02\x02\x02\u077A\u077C\x03\x02\x02\x02\u077B\u077D\x07" +
		"\x97\x02\x02\u077C\u077B\x03\x02\x02\x02\u077C\u077D\x03\x02\x02\x02\u077D" +
		"\xB5\x03\x02\x02\x02\u077E\u077F\x05\u0338\u019D\x02\u077F\xB7\x03\x02" +
		"\x02\x02\u0780\u0781\x07\u0148\x02\x02\u0781\u0783\x05\xBA^\x02\u0782" +
		"\u0784\x07\u0134\x02\x02\u0783\u0782\x03\x02\x02\x02\u0783\u0784\x03\x02" +
		"\x02\x02\u0784\u0787\x03\x02\x02\x02\u0785\u0786\x07\xDC\x02\x02\u0786" +
		"\u0788\x05\u01DA\xEE\x02\u0787\u0785\x03\x02\x02\x02\u0787\u0788\x03\x02" +
		"\x02\x02\u0788\u0789\x03\x02\x02\x02\u0789\u078C\x05\u01DE\xF0\x02\u078A" +
		"\u078B\x07\u0102\x02\x02\u078B\u078D\x05\u01DE\xF0\x02\u078C\u078A\x03" +
		"\x02\x02\x02\u078C\u078D\x03\x02\x02\x02\u078D\u078F\x03\x02\x02\x02\u078E" +
		"\u0790\x07\x96\x02\x02\u078F\u078E\x03\x02\x02\x02\u078F\u0790\x03\x02" +
		"\x02\x02\u0790\xB9\x03\x02\x02\x02\u0791\u0792\x07\u01C9\x02\x02\u0792" +
		"\xBB\x03\x02\x02\x02\u0793\u0794\x07\u013B\x02\x02\u0794\u0797\x05\xC0" +
		"a\x02\u0795\u0796\x07\xBF\x02\x02\u0796\u0798\x05\xBE`\x02\u0797\u0795" +
		"\x03\x02\x02\x02\u0797\u0798\x03\x02\x02\x02\u0798\xBD\x03\x02\x02\x02" +
		"\u0799\u079A\x05\u03DA\u01EE\x02\u079A\xBF\x03\x02\x02\x02\u079B\u079C" +
		"\x05\u0338\u019D\x02\u079C\xC1\x03\x02\x02\x02\u079D\u079E\x07\u0134\x02" +
		"\x02\u079E\u079F\x07w\x02\x02\u079F\u07A5\x05\xC6d\x02\u07A0\u07A2\x07" +
		"\u018D\x02\x02\u07A1\u07A3\x07\xDE\x02\x02\u07A2\u07A1\x03\x02\x02\x02" +
		"\u07A2\u07A3\x03\x02\x02\x02\u07A3\u07A4\x03\x02\x02\x02\u07A4\u07A6\x05" +
		"\xC4c\x02\u07A5\u07A0\x03\x02\x02\x02\u07A5\u07A6\x03\x02\x02\x02\u07A6" +
		"\u07AB\x03\x02\x02\x02\u07A7\u07A9\x07\xD1\x02\x02\u07A8\u07A7\x03\x02" +
		"\x02\x02\u07A8\u07A9\x03\x02\x02\x02\u07A9\u07AA\x03\x02\x02\x02\u07AA" +
		"\u07AC\x07|\x02\x02\u07AB\u07A8\x03\x02\x02\x02\u07AB\u07AC\x03\x02\x02" +
		"\x02\u07AC\xC3\x03\x02\x02\x02\u07AD\u07AE\t\x07\x02\x02\u07AE\xC5\x03" +
		"\x02\x02\x02\u07AF\u07B0\t\x07\x02\x02\u07B0\xC7\x03\x02\x02\x02\u07B1" +
		"\u07B2\x07\u0132\x02\x02\u07B2\u07B4\x05\u0398\u01CD\x02\u07B3\u07B5\t" +
		"\x11\x02\x02\u07B4\u07B3\x03\x02\x02\x02\u07B4\u07B5\x03\x02\x02\x02\u07B5" +
		"\u07B7\x03\x02\x02\x02\u07B6\u07B8\x07\u0134\x02\x02\u07B7\u07B6\x03\x02" +
		"\x02\x02\u07B7\u07B8\x03\x02\x02\x02\u07B8\u07BB\x03\x02\x02\x02\u07B9" +
		"\u07BA\x07\xDC\x02\x02\u07BA\u07BC\x05\u01DA\xEE\x02\u07BB\u07B9\x03\x02" +
		"\x02\x02\u07BB\u07BC\x03\x02\x02\x02\u07BC\u07CD\x03\x02\x02\x02\u07BD" +
		"\u07C3\x05\xCCg\x02\u07BE\u07C0\x07\xE3\x02\x02\u07BF\u07C1\x07\xDE\x02" +
		"\x02\u07C0\u07BF\x03\x02\x02\x02\u07C0\u07C1\x03\x02\x02\x02\u07C1\u07C2" +
		"\x03\x02\x02\x02\u07C2\u07C4\x05\u0230\u0119\x02\u07C3\u07BE\x03\x02\x02" +
		"\x02\u07C3\u07C4\x03\x02\x02\x02\u07C4\u07CE\x03\x02\x02\x02\u07C5\u07C7" +
		"\x07\xE3\x02\x02\u07C6\u07C8\x07\xDE\x02\x02\u07C7\u07C6\x03\x02\x02\x02" +
		"\u07C7\u07C8\x03\x02\x02\x02\u07C8\u07C9\x03\x02\x02\x02\u07C9\u07CB\x05" +
		"\u0230\u0119\x02\u07CA\u07CC\x05\xCCg\x02\u07CB\u07CA\x03\x02\x02\x02" +
		"\u07CB\u07CC\x03\x02\x02\x02\u07CC\u07CE\x03\x02\x02\x02\u07CD\u07BD\x03" +
		"\x02\x02\x02\u07CD\u07C5\x03\x02\x02\x02\u07CD\u07CE\x03\x02\x02\x02\u07CE" +
		"\u07D1\x03\x02\x02\x02\u07CF\u07D2\x05\u019E\xD0\x02\u07D0\u07D2\x05\u01A6" +
		"\xD4\x02\u07D1\u07CF\x03\x02\x02\x02\u07D1\u07D0\x03\x02\x02\x02\u07D1" +
		"\u07D2\x03\x02\x02\x02\u07D2\u07D4\x03\x02\x02\x02\u07D3\u07D5\x07\x95" +
		"\x02\x02\u07D4\u07D3\x03\x02\x02\x02\u07D4\u07D5\x03\x02\x02\x02\u07D5" +
		"\xC9\x03\x02\x02\x02\u07D6\u07D8\x07\u0139\x02\x02\u07D7\u07D9\x07\u0108" +
		"\x02\x02\u07D8\u07D7\x03\x02\x02\x02\u07D8\u07D9\x03\x02\x02\x02\u07D9" +
		"\u07DB\x03\x02\x02\x02\u07DA\u07DC\x07\xF0\x02\x02\u07DB\u07DA\x03\x02" +
		"\x02\x02\u07DB\u07DC\x03\x02\x02\x02\u07DC\u07E7\x03\x02\x02\x02\u07DD" +
		"\u07E4\x07\n\x02\x02\u07DE\u07E5\x07\u0196\x02\x02\u07DF\u07E5\x07\u0133" +
		"\x02\x02\u07E0\u07E2\x07\u0101\x02\x02\u07E1\u07E3\x07\u0113\x02\x02\u07E2" +
		"\u07E1\x03\x02\x02\x02\u07E2\u07E3\x03\x02\x02\x02\u07E3\u07E5\x03\x02" +
		"\x02\x02\u07E4\u07DE\x03\x02\x02\x02\u07E4\u07DF\x03\x02\x02\x02\u07E4" +
		"\u07E0\x03\x02\x02\x02\u07E5\u07E7\x03\x02\x02\x02\u07E6\u07D6\x03\x02" +
		"\x02\x02\u07E6\u07DD\x03\x02\x02\x02\u07E7\xCB\x03\x02\x02\x02\u07E8\u07EA" +
		"\x07\u01A1\x02\x02\u07E9\u07E8\x03\x02\x02\x02\u07E9\u07EA\x03\x02\x02" +
		"\x02\u07EA\u07EC\x03\x02\x02\x02\u07EB\u07ED\x07\u0101\x02\x02\u07EC\u07EB" +
		"\x03\x02\x02\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED\u07EE\x03\x02\x02\x02" +
		"\u07EE\u07F1\x07\xF0\x02\x02\u07EF\u07F1\x05\xCAf\x02\u07F0\u07E9\x03" +
		"\x02\x02\x02\u07F0\u07EF\x03\x02\x02\x02\u07F1\xCD\x03\x02\x02\x02\u07F2" +
		"\u07F4\x07\u011B\x02\x02\u07F3\u07F5\x05\xD0i\x02\u07F4\u07F3\x03\x02" +
		"\x02\x02\u07F4\u07F5\x03\x02\x02\x02\u07F5\u07FB\x03\x02\x02\x02\u07F6" +
		"\u07FA\x05\xD2j\x02\u07F7\u07FA\x05\xD6l\x02\u07F8\u07FA\x05\xD8m\x02" +
		"\u07F9\u07F6\x03\x02\x02\x02\u07F9\u07F7\x03\x02\x02\x02\u07F9\u07F8\x03" +
		"\x02\x02\x02\u07FA\u07FC\x03\x02\x02\x02\u07FB\u07F9\x03\x02\x02\x02\u07FB" +
		"\u07FC\x03\x02\x02\x02\u07FC\u0804\x03\x02\x02\x02\u07FD\u07FF\x05J&\x02" +
		"\u07FE\u07FD\x03\x02\x02\x02\u07FF\u0800\x03\x02\x02\x02\u0800\u07FE\x03" +
		"\x02\x02\x02\u0800\u0801\x03\x02\x02\x02\u0801\u0802\x03\x02\x02\x02\u0802" +
		"\u0803\x07\x94\x02\x02\u0803\u0805\x03\x02\x02\x02\u0804\u07FE\x03\x02" +
		"\x02\x02\u0804\u0805\x03\x02\x02\x02\u0805\xCF\x03\x02\x02\x02\u0806\u0809" +
		"\x05\u013A\x9E\x02\u0807\u0808\t\x12\x02\x02\u0808\u080A\x05\u013A\x9E" +
		"\x02\u0809\u0807\x03\x02\x02\x02\u0809\u080A\x03\x02\x02\x02\u080A\xD1" +
		"\x03\x02\x02\x02\u080B\u080E\x05\u03DA\u01EE\x02\u080C\u080E\t\n\x02\x02" +
		"\u080D\u080B\x03\x02\x02\x02\u080D\u080C\x03\x02\x02\x02\u080E\u080F\x03" +
		"\x02\x02\x02\u080F\u0810\x07\u0188\x02\x02\u0810\xD3\x03\x02\x02\x02\u0811" +
		"\u0813\x07\u01A1\x02\x02\u0812\u0811\x03\x02\x02\x02\u0812\u0813\x03\x02" +
		"\x02\x02\u0813\u0814\x03\x02\x02\x02\u0814\u0815\x07\u0182\x02\x02\u0815" +
		"\u0816\t\b\x02\x02\u0816\xD5\x03\x02\x02\x02\u0817\u0819\x05\xD4k\x02" +
		"\u0818\u0817\x03\x02\x02\x02\u0818\u0819\x03\x02\x02\x02\u0819\u081A\x03" +
		"\x02\x02\x02\u081A\u081B\x07\u0194\x02\x02\u081B\u081C\x05\u03C8\u01E5" +
		"\x02\u081C\xD7\x03\x02\x02\x02\u081D\u081F\x05\xD4k\x02\u081E\u081D\x03" +
		"\x02\x02\x02\u081E\u081F\x03\x02\x02\x02\u081F\u0820\x03\x02\x02\x02\u0820" +
		"\u0821\x07\u019D\x02\x02\u0821\u0822\x05\xDAn\x02\u0822\u0823\x07\u0194" +
		"\x02\x02\u0823\u082B\x05\u03C8\u01E5\x02\u0824\u0825\x07\b\x02\x02\u0825" +
		"\u0826\x05\xDAn\x02\u0826\u0827\x07\u0194\x02\x02\u0827\u0828\x05\u03C8" +
		"\u01E5\x02\u0828\u082A\x03\x02\x02\x02\u0829\u0824\x03\x02\x02\x02\u082A" +
		"\u082D\x03\x02\x02\x02\u082B\u0829\x03\x02\x02\x02\u082B\u082C\x03\x02" +
		"\x02\x02\u082C\xD9\x03\x02\x02\x02\u082D\u082B\x03\x02\x02\x02\u082E\u082F" +
		"\x05\xE0q\x02\u082F\u0830\x07\xBF\x02\x02\u0830\u0831\x05\xDEp\x02\u0831" +
		"\u0832\x074\x02\x02\u0832\u0833\x05\xDCo\x02\u0833\xDB\x03\x02\x02\x02" +
		"\u0834\u0837\x05\u03DA\u01EE\x02\u0835\u0837\t\f\x02\x02\u0836\u0834\x03" +
		"\x02\x02\x02\u0836\u0835\x03\x02\x02\x02\u0837\xDD\x03\x02\x02\x02\u0838" +
		"\u083B\x05\u03DA\u01EE\x02\u0839\u083B\t\f\x02\x02\u083A\u0838\x03\x02" +
		"\x02\x02\u083A\u0839\x03\x02\x02\x02\u083B\xDF\x03\x02\x02\x02\u083C\u083D" +
		"\x05\u03D8\u01ED\x02\u083D\xE1\x03\x02\x02\x02\u083E\u0840\x07\u010C\x02" +
		"\x02\u083F\u0841\x05\xE4s\x02\u0840\u083F\x03\x02\x02\x02\u0841\u0842" +
		"\x03\x02\x02\x02\u0842\u0840\x03\x02\x02\x02\u0842\u0843\x03\x02\x02\x02" +
		"\u0843\u0857\x03\x02\x02\x02\u0844\u0852\x07\u010C\x02\x02\u0845\u084E" +
		"\t\x13\x02\x02\u0846\u084C\x05\u0398\u01CD\x02\u0847\u0849\x07\u01A1\x02" +
		"\x02\u0848\u0847\x03\x02\x02\x02\u0848\u0849\x03\x02\x02\x02\u0849\u084A" +
		"\x03\x02\x02\x02\u084A\u084B\x07\u0101\x02\x02\u084B\u084D\x07\u014B\x02" +
		"\x02\u084C\u0848\x03\x02\x02\x02\u084C\u084D\x03\x02\x02\x02\u084D\u084F" +
		"\x03\x02\x02\x02\u084E\u0846\x03\x02\x02\x02\u084F\u0850\x03\x02\x02\x02" +
		"\u0850\u084E\x03\x02\x02\x02\u0850\u0851\x03\x02\x02\x02\u0851\u0853\x03" +
		"\x02\x02\x02\u0852\u0845\x03\x02\x02\x02\u0853\u0854\x03\x02\x02\x02\u0854" +
		"\u0852\x03\x02\x02\x02\u0854\u0855\x03\x02\x02\x02\u0855\u0857\x03\x02" +
		"\x02\x02\u0856\u083E\x03\x02\x02\x02\u0856\u0844\x03\x02\x02\x02\u0857" +
		"\xE3\x03\x02\x02\x02\u0858\u0864\t\x14\x02\x02\u0859\u085F\x05\u0398\u01CD" +
		"\x02\u085A\u085C\x07\u01A1\x02\x02\u085B\u085A\x03\x02\x02\x02\u085B\u085C" +
		"\x03\x02\x02\x02\u085C\u085D\x03\x02\x02\x02\u085D\u085E\x07\u0101\x02" +
		"\x02\u085E\u0860\x07\u014B\x02\x02\u085F\u085B\x03\x02\x02\x02\u085F\u0860" +
		"\x03\x02\x02\x02\u0860\u0862\x03\x02\x02\x02\u0861\u0863\x05\xE6t\x02" +
		"\u0862\u0861\x03\x02\x02\x02\u0862\u0863\x03\x02\x02\x02\u0863\u0865\x03" +
		"\x02\x02\x02\u0864\u0859\x03\x02\x02\x02\u0865\u0866\x03\x02\x02\x02\u0866" +
		"\u0864\x03\x02\x02\x02\u0866\u0867\x03\x02\x02\x02\u0867\xE5\x03\x02\x02" +
		"\x02\u0868\u086A\x07\u01A1\x02\x02\u0869\u0868\x03\x02\x02\x02\u0869\u086A" +
		"\x03\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u0895\x07\xF0\x02\x02" +
		"\u086C\u0892\x07\n\x02\x02\u086D\u086F\x07\u0101\x02\x02\u086E\u0870\x07" +
		"\u0113\x02\x02\u086F\u086E\x03\x02\x02";
	private static readonly _serializedATNSegment5: string =
		"\x02\u086F\u0870\x03\x02\x02\x02\u0870\u0893\x03\x02\x02\x02\u0871\u0893" +
		"\x07\t\x02\x02\u0872\u0874\x07\u0133\x02\x02\u0873\u0875\x07\u01A5\x02" +
		"\x02\u0874\u0873\x03\x02\x02\x02\u0874\u0875\x03\x02\x02\x02\u0875\u0877" +
		"\x03\x02\x02\x02\u0876\u0878\x07\u0196\x02\x02\u0877\u0876\x03\x02\x02" +
		"\x02\u0877\u0878\x03\x02\x02\x02\u0878\u0891\x03\x02\x02\x02\u0879\u087A" +
		"\x07\u0133\x02\x02\u087A\u087B\x07\u0196\x02\x02\u087B\u0891\x07\u01A5" +
		"\x02\x02\u087C\u087E\x07\u01A5\x02\x02\u087D\u087F\x07\u0133\x02\x02\u087E" +
		"\u087D\x03\x02\x02\x02\u087E\u087F\x03\x02\x02\x02\u087F\u0881\x03\x02" +
		"\x02\x02\u0880\u0882\x07\u0196\x02\x02\u0881\u0880\x03\x02\x02\x02\u0881" +
		"\u0882\x03\x02\x02\x02\u0882\u0891\x03\x02\x02\x02\u0883\u0884\x07\u01A5" +
		"\x02\x02\u0884\u0885\x07\u0196\x02\x02\u0885\u0891\x07\u0133\x02\x02\u0886" +
		"\u0888\x07\u0196\x02\x02\u0887\u0889\x07\u0133\x02\x02\u0888\u0887\x03" +
		"\x02\x02\x02\u0888\u0889\x03\x02\x02\x02\u0889\u088B\x03\x02\x02\x02\u088A" +
		"\u088C\x07\u01A5\x02\x02\u088B\u088A\x03\x02\x02\x02\u088B\u088C\x03\x02" +
		"\x02\x02\u088C\u0891\x03\x02\x02\x02\u088D\u088E\x07\u0196\x02\x02\u088E" +
		"\u088F\x07\u01A5\x02\x02\u088F\u0891\x07\u0133\x02\x02\u0890\u0872\x03" +
		"\x02\x02\x02\u0890\u0879\x03\x02\x02\x02\u0890\u087C\x03\x02\x02\x02\u0890" +
		"\u0883\x03\x02\x02\x02\u0890\u0886\x03\x02\x02\x02\u0890\u088D\x03\x02" +
		"\x02\x02\u0891\u0893\x03\x02\x02\x02\u0892\u086D\x03\x02\x02\x02\u0892" +
		"\u0871\x03\x02\x02\x02\u0892\u0890\x03\x02\x02\x02\u0893\u0895\x03\x02" +
		"\x02\x02\u0894\u0869\x03\x02\x02\x02\u0894\u086C\x03\x02\x02\x02\u0895" +
		"\xE7\x03\x02\x02\x02\u0896\u0897\x07\xFD\x02\x02\u0897\u0898\x05\xEAv" +
		"\x02\u0898\u089C\x074\x02\x02\u0899\u089A\x05\xEAv\x02\u089A\u089B\x07" +
		"\xC3\x02\x02\u089B\u089D\x03\x02\x02\x02\u089C\u0899\x03\x02\x02\x02\u089C" +
		"\u089D\x03\x02\x02\x02\u089D\u08A2\x03\x02\x02\x02\u089E\u08A0\x05\u03D8" +
		"\u01ED\x02\u089F\u08A1\x07\u0151\x02\x02\u08A0\u089F\x03\x02\x02\x02\u08A0" +
		"\u08A1\x03\x02\x02\x02\u08A1\u08A3\x03\x02\x02\x02\u08A2\u089E\x03\x02" +
		"\x02\x02\u08A3\u08A4\x03\x02\x02\x02\u08A4\u08A2\x03\x02\x02\x02\u08A4" +
		"\u08A5\x03\x02\x02\x02\u08A5\u08A7\x03\x02\x02\x02\u08A6\u08A8\x05\u01A0" +
		"\xD1\x02\u08A7\u08A6\x03\x02\x02\x02\u08A7\u08A8\x03\x02\x02\x02\u08A8" +
		"\u08AA\x03\x02\x02\x02\u08A9\u08AB\x07\x92\x02\x02\u08AA\u08A9\x03\x02" +
		"\x02\x02\u08AA\u08AB\x03\x02\x02\x02\u08AB\xE9\x03\x02\x02\x02\u08AC\u08AF" +
		"\x05\u03DA\u01EE\x02\u08AD\u08AF\t\f\x02\x02\u08AE\u08AC\x03\x02\x02\x02" +
		"\u08AE\u08AD\x03\x02\x02\x02\u08AF\xEB\x03\x02\x02\x02\u08B0\u08B1\x07" +
		"\xF8\x02\x02\u08B1\u08B3\x05\xFA~\x02\u08B2\u08B4\x05\xF8}\x02\u08B3\u08B2" +
		"\x03\x02\x02\x02\u08B4\u08B5\x03\x02\x02\x02\u08B5\u08B3\x03\x02\x02\x02" +
		"\u08B5\u08B6\x03\x02\x02\x02\u08B6\u08BF\x03\x02\x02\x02\u08B7\u08B9\x07" +
		"B\x02\x02\u08B8\u08B7\x03\x02\x02\x02\u08B8\u08B9\x03\x02\x02\x02\u08B9" +
		"\u08BA\x03\x02\x02\x02\u08BA\u08BC\x07\u015E\x02\x02\u08BB\u08BD\x07\xDE" +
		"\x02\x02\u08BC\u08BB\x03\x02\x02\x02\u08BC\u08BD\x03\x02\x02\x02\u08BD" +
		"\u08BE\x03\x02\x02\x02\u08BE\u08C0\x05\u031A\u018E\x02\u08BF\u08B8\x03" +
		"\x02\x02\x02\u08BF\u08C0\x03\x02\x02\x02\u08C0\u08C1\x03\x02\x02\x02\u08C1" +
		"\u08C3\x07\u019A\x02\x02\u08C2\u08C4\x05\xF6|\x02\u08C3\u08C2\x03\x02" +
		"\x02\x02\u08C4\u08C5\x03\x02\x02\x02\u08C5\u08C3\x03\x02\x02\x02\u08C5" +
		"\u08C6\x03\x02\x02\x02\u08C6\u08C9\x03\x02\x02\x02\u08C7\u08CA\x05\xEE" +
		"x\x02\u08C8\u08CA\x05\xF4{\x02\u08C9\u08C7\x03\x02\x02\x02\u08C9\u08C8" +
		"\x03\x02\x02\x02\u08CA\xED\x03\x02\x02\x02\u08CB\u08CC\x07\u0114\x02\x02" +
		"\u08CC\u08CE\x07\u0129\x02\x02\u08CD\u08CF\x07\xDE\x02\x02\u08CE\u08CD" +
		"\x03\x02\x02\x02\u08CE\u08CF\x03\x02\x02\x02\u08CF\u08D0\x03\x02\x02\x02" +
		"\u08D0\u08D1\x05\xD0i\x02\u08D1\xEF\x03\x02\x02\x02\u08D2\u08D3\x05\u0338" +
		"\u019D\x02\u08D3\xF1\x03\x02\x02\x02\u08D4\u08D5\x05\u0338\u019D\x02\u08D5" +
		"\xF3\x03\x02\x02\x02\u08D6\u08D7\x07\xC3\x02\x02\u08D7\u08D8\x05\u0398" +
		"\u01CD\x02\u08D8\xF5\x03\x02\x02\x02\u08D9\u08DA\x07\u01C9\x02\x02\u08DA" +
		"\xF7\x03\x02\x02\x02\u08DB\u08DD\x07\u010B\x02\x02\u08DC\u08DB\x03\x02" +
		"\x02\x02\u08DC\u08DD\x03\x02\x02\x02\u08DD\u08DE\x03\x02\x02\x02\u08DE" +
		"\u08E0\t\r\x02\x02\u08DF\u08E1\x07\xE3\x02\x02\u08E0\u08DF\x03\x02\x02" +
		"\x02\u08E0\u08E1\x03\x02\x02\x02\u08E1\u08E3\x03\x02\x02\x02\u08E2\u08E4" +
		"\x05\xFC\x7F\x02\u08E3\u08E2\x03\x02\x02\x02\u08E4\u08E5\x03\x02\x02\x02" +
		"\u08E5\u08E3\x03\x02\x02\x02\u08E5\u08E6\x03\x02\x02\x02\u08E6\xF9\x03" +
		"\x02\x02\x02\u08E7\u08E8\x07\u01C9\x02\x02\u08E8\xFB\x03\x02\x02\x02\u08E9" +
		"\u08EA\x05\u0338\u019D\x02\u08EA\xFD\x03\x02\x02\x02\u08EB\u08EC\x07\xDA" +
		"\x02\x02\u08EC\u08F3\x05\u0120\x91\x02\u08ED\u08EF\x05\u0110\x89\x02\u08EE" +
		"\u08F0\x05\u0106\x84\x02\u08EF\u08EE\x03\x02\x02\x02\u08EF\u08F0\x03\x02" +
		"\x02\x02\u08F0\u08F4\x03\x02\x02\x02\u08F1\u08F4\x05\u0106\x84\x02\u08F2" +
		"\u08F4\x05\u0100\x81\x02\u08F3\u08ED\x03\x02\x02\x02\u08F3\u08F1\x03\x02" +
		"\x02\x02\u08F3\u08F2\x03\x02\x02\x02\u08F4\xFF\x03\x02\x02\x02\u08F5\u08F6" +
		"\x07_\x02\x02\u08F6\u08F7\x05\u0104\x83\x02\u08F7\u08F8\x07\u0189\x02" +
		"\x02\u08F8\u08FC\x05\u0102\x82\x02\u08F9\u08FB\x05\u0116\x8C\x02\u08FA" +
		"\u08F9\x03\x02\x02\x02\u08FB\u08FE\x03\x02\x02\x02\u08FC\u08FA\x03\x02" +
		"\x02\x02\u08FC\u08FD\x03\x02\x02\x02\u08FD\u0101\x03\x02\x02\x02\u08FE" +
		"\u08FC\x03\x02\x02\x02\u08FF\u0900\x05\u011A\x8E\x02\u0900\u0103\x03\x02" +
		"\x02\x02\u0901\u0902\x05\u011A\x8E\x02\u0902\u0105\x03\x02\x02\x02\u0903" +
		"\u0906\x07\u0140\x02\x02\u0904\u0907\x05\u010C\x87\x02\u0905\u0907\x05" +
		"\u0108\x85\x02\u0906\u0904\x03\x02\x02\x02\u0906\u0905\x03\x02\x02\x02" +
		"\u0907\u0908\x03\x02\x02\x02\u0908\u0906\x03\x02\x02\x02\u0908\u0909\x03" +
		"\x02\x02\x02\u0909\u0107\x03\x02\x02\x02\u090A\u0914\t\x15\x02\x02\u090B" +
		"\u090C\x05\u011A\x8E\x02\u090C\u090D\x074\x02\x02\u090D\u0911\x05\u010A" +
		"\x86\x02\u090E\u0910\x05\u0116\x8C\x02\u090F\u090E\x03\x02\x02\x02\u0910" +
		"\u0913\x03\x02\x02\x02\u0911\u090F\x03\x02\x02\x02\u0911\u0912\x03\x02" +
		"\x02\x02\u0912\u0915\x03\x02\x02\x02\u0913\u0911\x03\x02\x02\x02\u0914" +
		"\u090B\x03\x02\x02\x02\u0915\u0916\x03\x02\x02\x02\u0916\u0914\x03\x02" +
		"\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917\u0109\x03\x02\x02\x02\u0918" +
		"\u0919\x05\u011A\x8E\x02\u0919\u010B\x03\x02\x02\x02\u091A\u091B\x07<" +
		"\x02\x02\u091B\u091C\x074\x02\x02\u091C\u0920\x05\u010E\x88\x02\u091D" +
		"\u091F\x05\u0116\x8C\x02\u091E\u091D\x03\x02\x02\x02\u091F\u0922\x03\x02" +
		"\x02\x02\u0920\u091E\x03\x02\x02\x02\u0920\u0921\x03\x02\x02\x02\u0921" +
		"\u010D\x03\x02\x02\x02\u0922\u0920\x03\x02\x02\x02\u0923\u0924\x05\u011A" +
		"\x8E\x02\u0924\u010F\x03\x02\x02\x02\u0925\u0927\x07\u017F\x02\x02\u0926" +
		"\u0928\x05\u0112\x8A\x02\u0927\u0926\x03\x02\x02\x02\u0928\u0929\x03\x02" +
		"\x02\x02\u0929\u0927\x03\x02\x02\x02\u0929\u092A\x03\x02\x02\x02\u092A" +
		"\u0111\x03\x02\x02\x02\u092B\u092C\x05\u011E\x90\x02\u092C\u092F\x07\xBD" +
		"\x02\x02\u092D\u0930\x05\u0114\x8B\x02\u092E\u0930\x05\u0118\x8D\x02\u092F" +
		"\u092D\x03\x02\x02\x02\u092F\u092E\x03\x02\x02\x02\u0930\u0931\x03\x02" +
		"\x02\x02\u0931\u092F\x03\x02\x02\x02\u0931\u0932\x03\x02\x02\x02\u0932" +
		"\u0113\x03\x02\x02\x02\u0933\u0937\x07<\x02\x02\u0934\u0936\x05\u0116" +
		"\x8C\x02\u0935\u0934\x03\x02\x02\x02\u0936\u0939\x03\x02\x02\x02\u0937" +
		"\u0935\x03\x02\x02\x02\u0937\u0938\x03\x02\x02\x02\u0938\u0115\x03\x02" +
		"\x02\x02\u0939\u0937\x03\x02\x02\x02\u093A\u093C\t\b\x02\x02\u093B\u093D" +
		"\x07\xD5\x02\x02\u093C\u093B\x03\x02\x02\x02\u093C\u093D\x03\x02\x02\x02" +
		"\u093D\u093E\x03\x02\x02\x02\u093E\u093F\x05\u011C\x8F\x02\u093F\u0117" +
		"\x03\x02\x02\x02\u0940\u0948\t\x16\x02\x02\u0941\u0945\x05\u011A\x8E\x02" +
		"\u0942\u0944\x05\u0116\x8C\x02\u0943\u0942\x03\x02\x02\x02\u0944\u0947" +
		"\x03\x02\x02\x02\u0945\u0943\x03\x02\x02\x02\u0945\u0946\x03\x02\x02\x02" +
		"\u0946\u0949\x03\x02\x02\x02\u0947\u0945\x03\x02\x02\x02\u0948\u0941\x03" +
		"\x02\x02\x02\u0949\u094A\x03\x02\x02\x02\u094A\u0948\x03\x02\x02\x02\u094A" +
		"\u094B\x03\x02\x02\x02\u094B\u0119\x03\x02\x02\x02\u094C\u0950\x05\u03D8" +
		"\u01ED\x02\u094D\u0950\x07\x03\x02\x02\u094E\u0950\x05\x1E\x10\x02\u094F" +
		"\u094C\x03\x02\x02\x02\u094F\u094D\x03\x02\x02\x02\u094F\u094E\x03\x02" +
		"\x02\x02\u0950\u011B\x03\x02\x02\x02\u0951\u0952\x05\u011A\x8E\x02\u0952" +
		"\u011D\x03\x02\x02\x02\u0953\u0954\x05\u03D8\u01ED\x02\u0954\u011F\x03" +
		"\x02\x02\x02\u0955\u0956\x05\u03DA\u01EE\x02\u0956\u0121\x03\x02\x02\x02" +
		"\u0957\u0959\x07\xD7\x02\x02\u0958\u095A\x05\u029A\u014E\x02\u0959\u0958" +
		"\x03\x02\x02\x02\u095A\u095B\x03\x02\x02\x02\u095B\u0959\x03\x02\x02\x02" +
		"\u095B\u095C\x03\x02\x02\x02\u095C\u0123\x03\x02\x02\x02\u095D\u095F\x07" +
		"\xD6\x02\x02\u095E\u0960\x05\u012A\x96\x02\u095F\u095E\x03\x02\x02\x02" +
		"\u0960\u0961\x03\x02\x02\x02\u0961\u095F\x03\x02\x02\x02\u0961\u0962\x03" +
		"\x02\x02\x02\u0962\u0966\x03\x02\x02\x02\u0963\u0965\x05\u0126\x94\x02" +
		"\u0964\u0963\x03\x02\x02\x02\u0965\u0968\x03\x02\x02\x02\u0966\u0964\x03" +
		"\x02\x02\x02\u0966\u0967\x03\x02\x02\x02\u0967\u0125\x03\x02\x02\x02\u0968" +
		"\u0966\x03\x02\x02\x02\u0969\u0970\x07\u0140\x02\x02\u096A\u096C\t\x17" +
		"\x02\x02\u096B\u096D\x07h\x02\x02\u096C\u096B\x03\x02\x02\x02\u096C\u096D" +
		"\x03\x02\x02\x02\u096D\u096E\x03\x02\x02\x02\u096E\u096F\x074\x02\x02" +
		"\u096F\u0971\x05\u0128\x95\x02\u0970\u096A\x03\x02\x02\x02\u0971\u0972" +
		"\x03\x02\x02\x02\u0972\u0970\x03\x02\x02\x02\u0972\u0973\x03\x02\x02\x02" +
		"\u0973\u0127\x03\x02\x02\x02\u0974\u0977\x05\u0338\u019D\x02\u0975\u0977" +
		"\x05\u03C2\u01E2\x02\u0976\u0974\x03\x02\x02\x02\u0976\u0975\x03\x02\x02" +
		"\x02\u0977\u0129\x03\x02\x02\x02\u0978\u0979\x05\u0338\u019D\x02\u0979" +
		"\u012B\x03\x02\x02\x02\u097A\u097C\x07\xFB\x02\x02\u097B\u097D\t\v\x02" +
		"\x02\u097C\u097B\x03\x02\x02\x02\u097C\u097D\x03\x02\x02\x02\u097D\u097E" +
		"\x03\x02\x02\x02\u097E\u097F\x05\u0156\xAC\x02\u097F\u0981\x07\u0189\x02" +
		"\x02\u0980\u0982\x05\u01DA\xEE\x02\u0981\u0980\x03\x02\x02\x02\u0982\u0983" +
		"\x03\x02\x02\x02\u0983\u0981\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02" +
		"\u0984\u012D\x03\x02\x02\x02\u0985\u0986\x07\xD0\x02\x02\u0986\u0988\x05" +
		"\u03C8\u01E5\x02\u0987\u0989\x07\u0184\x02\x02\u0988\u0987\x03\x02\x02" +
		"\x02\u0988\u0989\x03\x02\x02\x02\u0989\u0992\x03\x02\x02\x02\u098A\u098D" +
		"\x05J&\x02\u098B\u098D\x05L\'\x02\u098C\u098A\x03\x02\x02\x02\u098C\u098B" +
		"\x03\x02\x02\x02\u098D\u098E\x03\x02\x02\x02\u098E\u098C\x03\x02\x02\x02" +
		"\u098E\u098F\x03\x02\x02\x02\u098F\u0993\x03\x02\x02\x02\u0990\u0991\x07" +
		"\u0100\x02\x02\u0991\u0993\x07\u015C\x02\x02\u0992\u098C\x03\x02\x02\x02" +
		"\u0992\u0990\x03\x02\x02\x02\u0993\u099F\x03\x02\x02\x02\u0994\u099D\x07" +
		"\x87\x02\x02\u0995\u0998\x05J&\x02\u0996\u0998\x05L\'\x02\u0997\u0995" +
		"\x03\x02\x02\x02\u0997\u0996\x03\x02\x02\x02\u0998\u0999\x03\x02\x02\x02" +
		"\u0999\u0997\x03\x02\x02\x02\u0999\u099A\x03\x02\x02\x02\u099A\u099E\x03" +
		"\x02\x02\x02\u099B\u099C\x07\u0100\x02\x02\u099C\u099E\x07\u015C\x02\x02" +
		"\u099D\u0997\x03\x02\x02\x02\u099D\u099B\x03\x02\x02\x02\u099E\u09A0\x03" +
		"\x02\x02\x02\u099F\u0994\x03\x02\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0" +
		"\u09A2\x03\x02\x02\x02\u09A1\u09A3\x07\x91\x02\x02\u09A2\u09A1\x03\x02" +
		"\x02\x02\u09A2\u09A3\x03\x02\x02\x02\u09A3\u012F\x03\x02\x02\x02\u09A4" +
		"\u09A5\x07\xC2\x02\x02\u09A5\u09A6\x05\u0132\x9A\x02\u09A6\u0131\x03\x02" +
		"\x02\x02\u09A7\u09A8\x05\u0338\u019D\x02\u09A8\u0133\x03\x02\x02\x02\u09A9" +
		"\u09AA\x07\xAB\x02\x02\u09AA\u0135\x03\x02\x02\x02\u09AB\u09AC\x07\xAB" +
		"\x02\x02\u09AC\u09AD\x07\u012B\x02\x02\u09AD\u0137\x03\x02\x02\x02\u09AE" +
		"\u09B0\x07\xC5\x02\x02\u09AF\u09B1\x07\u0189\x02\x02\u09B0\u09AF\x03\x02" +
		"\x02\x02\u09B0\u09B1\x03\x02\x02\x02\u09B1\u09B3\x03\x02\x02\x02\u09B2" +
		"\u09B4\x05\u013A\x9E\x02\u09B3\u09B2\x03\x02\x02\x02\u09B3\u09B4\x03\x02" +
		"\x02\x02\u09B4\u09C5\x03\x02\x02\x02\u09B5\u09B7\x07\xC5\x02\x02\u09B6" +
		"\u09B8\x07\u0189\x02\x02\u09B7\u09B6\x03\x02\x02\x02\u09B7\u09B8\x03\x02" +
		"\x02\x02\u09B8\u09BA\x03\x02\x02\x02\u09B9\u09BB\x05\u013A\x9E\x02\u09BA" +
		"\u09B9\x03\x02\x02\x02\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BA\x03\x02" +
		"\x02\x02\u09BC\u09BD\x03\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE" +
		"\u09C0\x07x\x02\x02\u09BF\u09C1\x07\u010B\x02\x02\u09C0\u09BF\x03\x02" +
		"\x02\x02\u09C0\u09C1\x03\x02\x02\x02\u09C1\u09C2\x03\x02\x02\x02\u09C2" +
		"\u09C3\x05\u03D8\u01ED\x02\u09C3\u09C5\x03\x02\x02\x02\u09C4\u09AE\x03" +
		"\x02\x02\x02\u09C4\u09B5\x03\x02\x02\x02\u09C5\u0139\x03\x02\x02\x02\u09C6" +
		"\u09C7\x05\u0338\u019D\x02\u09C7\u013B\x03\x02\x02\x02\u09C8\u09C9\x07" +
		"\xA7\x02\x02\u09C9\u09D0\x05\u0140\xA1\x02\u09CA\u09CC\x07\x12\x02\x02" +
		"\u09CB\u09CA\x03\x02\x02\x02\u09CB\u09CC\x03\x02\x02\x02\u09CC\u09CD\x03" +
		"\x02\x02\x02\u09CD\u09CF\x05\u0140\xA1\x02\u09CE\u09CB\x03\x02\x02\x02" +
		"\u09CF\u09D2\x03\x02\x02\x02\u09D0\u09CE\x03\x02\x02\x02\u09D0\u09D1\x03" +
		"\x02\x02\x02\u09D1\u09E5\x03\x02\x02\x02\u09D2\u09D0\x03\x02\x02\x02\u09D3" +
		"\u09D4\x07\u019F\x02\x02\u09D4\u09DB\x05\u013E\xA0\x02\u09D5\u09D7\x07" +
		"\x12\x02\x02\u09D6\u09D5\x03\x02\x02\x02\u09D6\u09D7\x03\x02\x02\x02\u09D7" +
		"\u09D8\x03\x02\x02\x02\u09D8\u09DA\x05\u013E\xA0\x02\u09D9\u09D6\x03\x02" +
		"\x02\x02\u09DA\u09DD\x03\x02\x02\x02\u09DB\u09D9\x03\x02\x02\x02\u09DB" +
		"\u09DC\x03\x02\x02\x02\u09DC\u09E2\x03\x02\x02\x02\u09DD\u09DB\x03\x02" +
		"\x02\x02\u09DE\u09E1\x05J&\x02\u09DF\u09E1\x05L\'\x02\u09E0\u09DE\x03" +
		"\x02\x02\x02\u09E0\u09DF\x03\x02\x02\x02\u09E1\u09E4\x03\x02\x02\x02\u09E2" +
		"\u09E0\x03\x02\x02\x02\u09E2\u09E3\x03\x02\x02\x02\u09E3\u09E6\x03\x02" +
		"\x02\x02\u09E4\u09E2\x03\x02\x02\x02\u09E5\u09D3\x03\x02\x02\x02\u09E6" +
		"\u09E7\x03\x02\x02\x02\u09E7\u09E5\x03\x02\x02\x02\u09E7\u09E8\x03\x02" +
		"\x02\x02\u09E8\u09F2\x03\x02\x02\x02\u09E9\u09EA\x07\u019F\x02\x02\u09EA" +
		"\u09EF\x07\u0112\x02\x02\u09EB\u09EE\x05J&\x02\u09EC\u09EE\x05L\'\x02" +
		"\u09ED\u09EB\x03\x02\x02\x02\u09ED\u09EC\x03\x02\x02\x02\u09EE\u09F1\x03" +
		"\x02\x02\x02\u09EF\u09ED\x03\x02\x02\x02\u09EF\u09F0\x03\x02\x02\x02\u09F0" +
		"\u09F3\x03\x02\x02\x02\u09F1\u09EF\x03\x02\x02\x02\u09F2\u09E9\x03\x02" +
		"\x02\x02\u09F2\u09F3\x03\x02\x02\x02\u09F3\u09F5\x03\x02\x02\x02\u09F4" +
		"\u09F6\x07\x90\x02\x02\u09F5\u09F4\x03\x02\x02\x02\u09F5\u09F6\x03\x02" +
		"\x02\x02\u09F6\u013D\x03\x02\x02\x02\u09F7\u0A04\x05\u03C8\u01E5\x02\u09F8" +
		"\u09FA\x07\u0102\x02\x02\u09F9\u09F8\x03\x02\x02\x02\u09F9\u09FA\x03\x02" +
		"\x02\x02\u09FA\u09FB\x03\x02\x02\x02\u09FB\u09FE\x05\u03C0\u01E1\x02\u09FC" +
		"\u09FD\t\x12\x02\x02\u09FD\u09FF\x05\u03C0\u01E1\x02\u09FE\u09FC\x03\x02" +
		"\x02\x02\u09FE\u09FF\x03\x02\x02\x02\u09FF\u0A04\x03\x02\x02\x02\u0A00" +
		"\u0A04\x07\x16\x02\x02\u0A01\u0A04\x07\u018C\x02\x02\u0A02\u0A04\x07\xB0" +
		"\x02\x02\u0A03\u09F7\x03\x02\x02\x02\u0A03\u09F9\x03\x02\x02\x02\u0A03" +
		"\u0A00\x03\x02\x02\x02\u0A03\u0A01\x03\x02\x02\x02\u0A03\u0A02\x03\x02" +
		"\x02\x02\u0A04\u013F\x03\x02\x02\x02\u0A05\u0A0A\x05\u03C0\u01E1\x02\u0A06" +
		"\u0A0A\x05\u03C8\u01E5\x02\u0A07\u0A0A\x07\u018C\x02\x02\u0A08\u0A0A\x07" +
		"\xB0\x02\x02\u0A09\u0A05\x03\x02\x02\x02\u0A09\u0A06\x03\x02\x02\x02\u0A09" +
		"\u0A07\x03\x02\x02\x02\u0A09\u0A08\x03\x02\x02\x02\u0A0A\u0141\x03\x02" +
		"\x02\x02\u0A0B\u0A0E\x05\u0144\xA3\x02\u0A0C\u0A0E\x05\u0146\xA4\x02\u0A0D" +
		"\u0A0B\x03\x02\x02\x02\u0A0D\u0A0C\x03\x02\x02\x02\u0A0E\u0143\x03\x02" +
		"\x02\x02\u0A0F\u0A10\x07\x7F\x02\x02\u0A10\u0A11\x05\u014A\xA6\x02\u0A11" +
		"\u0A15\t\x18\x02\x02\u0A12\u0A13\x05\u014A\xA6\x02\u0A13\u0A14\x07\xC3" +
		"\x02\x02\u0A14\u0A16\x03\x02\x02\x02\u0A15\u0A12\x03\x02\x02\x02\u0A15" +
		"\u0A16\x03\x02\x02\x02\u0A16\u0A1B\x03\x02\x02\x02\u0A17\u0A19\x05\u03D8" +
		"\u01ED\x02\u0A18\u0A1A\x07\u0151\x02\x02\u0A19\u0A18\x03\x02\x02\x02\u0A19" +
		"\u0A1A\x03\x02\x02\x02\u0A1A\u0A1C\x03\x02\x02\x02\u0A1B\u0A17\x03\x02" +
		"\x02\x02\u0A1C\u0A1D\x03\x02\x02\x02\u0A1D\u0A1B\x03\x02\x02\x02\u0A1D" +
		"\u0A1E\x03\x02\x02\x02\u0A1E\u0A20\x03\x02\x02\x02\u0A1F\u0A21\x05\u01A0" +
		"\xD1\x02\u0A20\u0A1F\x03\x02\x02\x02\u0A20\u0A21\x03\x02\x02\x02\u0A21" +
		"\u0A23\x03\x02\x02\x02\u0A22\u0A24\x07\x8F\x02\x02\u0A23\u0A22\x03\x02" +
		"\x02\x02\u0A23\u0A24\x03\x02\x02\x02\u0A24\u0145\x03\x02\x02\x02\u0A25" +
		"\u0A26\x07\x7F\x02\x02\u0A26\u0A27\x05\u014A\xA6\x02\u0A27\u0A2B\t\x18" +
		"\x02\x02\u0A28\u0A29\x05\u014A\xA6\x02\u0A29\u0A2A\x07\xC3\x02\x02\u0A2A" +
		"\u0A2C\x03\x02\x02\x02\u0A2B\u0A28\x03\x02\x02\x02\u0A2B\u0A2C\x03\x02" +
		"\x02\x02\u0A2C\u0A2D\x03\x02\x02\x02\u0A2D\u0A2F\x05\u03D8\u01ED\x02\u0A2E" +
		"\u0A30\x07\u0151\x02\x02\u0A2F\u0A2E\x03\x02\x02\x02\u0A2F\u0A30\x03\x02" +
		"\x02\x02\u0A30\u0A31\x03\x02\x02\x02\u0A31\u0A32\x07\u013C\x02\x02\u0A32" +
		"\u0A34\x05\u0148\xA5\x02\u0A33\u0A35\x05\u01A0\xD1\x02\u0A34\u0A33\x03" +
		"\x02\x02\x02\u0A34\u0A35\x03\x02\x02\x02\u0A35\u0A37\x03\x02\x02\x02\u0A36" +
		"\u0A38\x07\x8F\x02\x02\u0A37\u0A36\x03\x02\x02\x02\u0A37\u0A38\x03\x02" +
		"\x02\x02\u0A38\u0147\x03\x02\x02\x02\u0A39\u0A3A\x05\u03D8\u01ED\x02\u0A3A" +
		"\u0149\x03\x02\x02\x02\u0A3B\u0A3E\x05\u03DA\u01EE\x02\u0A3C\u0A3E\t\f" +
		"\x02\x02\u0A3D\u0A3B\x03\x02\x02\x02\u0A3D\u0A3C\x03\x02\x02\x02\u0A3E" +
		"\u014B\x03\x02\x02\x02\u0A3F\u0A44\x05\u014E\xA8\x02\u0A40\u0A44\x05\u0150" +
		"\xA9\x02\u0A41\u0A44\x05\u0152\xAA\x02\u0A42\u0A44\x05\u0154\xAB\x02\u0A43" +
		"\u0A3F\x03\x02\x02\x02\u0A43\u0A40\x03\x02\x02\x02\u0A43\u0A41\x03\x02" +
		"\x02\x02\u0A43\u0A42\x03\x02\x02\x02\u0A44\u014D\x03\x02\x02\x02\u0A45" +
		"\u0A4D\x07~\x02\x02\u0A46\u0A4A\x05\u0156\xAC\x02\u0A47\u0A49\x05\u015C" +
		"\xAF\x02\u0A48\u0A47\x03\x02\x02\x02\u0A49\u0A4C\x03\x02\x02\x02\u0A4A" +
		"\u0A48\x03\x02\x02\x02\u0A4A\u0A4B\x03\x02\x02\x02\u0A4B\u0A4E\x03\x02" +
		"\x02\x02\u0A4C\u0A4A\x03\x02\x02\x02\u0A4D\u0A46\x03\x02\x02\x02\u0A4E" +
		"\u0A4F\x03\x02\x02\x02\u0A4F\u0A4D\x03\x02\x02\x02\u0A4F\u0A50\x03\x02" +
		"\x02\x02\u0A50\u0A52\x03\x02\x02\x02\u0A51\u0A53\x07\x8E\x02\x02\u0A52" +
		"\u0A51\x03\x02\x02\x02\u0A52\u0A53\x03\x02\x02\x02\u0A53\u014F\x03\x02" +
		"\x02\x02\u0A54\u0A5C\x07~\x02\x02\u0A55\u0A59\x05\u0156\xAC\x02\u0A56" +
		"\u0A58\x05\u0164\xB3\x02\u0A57\u0A56\x03\x02\x02\x02\u0A58\u0A5B\x03\x02" +
		"\x02\x02\u0A59\u0A57\x03\x02\x02\x02\u0A59\u0A5A\x03\x02\x02\x02\u0A5A" +
		"\u0A5D\x03\x02\x02\x02\u0A5B\u0A59\x03\x02\x02\x02\u0A5C\u0A55\x03\x02" +
		"\x02\x02\u0A5D\u0A5E\x03\x02\x02\x02\u0A5E\u0A5C\x03\x02\x02\x02\u0A5E" +
		"\u0A5F\x03\x02\x02\x02\u0A5F\u0A61\x03\x02\x02\x02\u0A60\u0A62\x07\x8E" +
		"\x02\x02\u0A61\u0A60\x03\x02\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62" +
		"\u0151\x03\x02\x02\x02\u0A63\u0A64\x07~\x02\x02\u0A64\u0A72\x05\u03D8" +
		"\u01ED\x02\u0A65\u0A67\x07!\x02\x02\u0A66\u0A65\x03\x02\x02\x02\u0A66" +
		"\u0A67\x03\x02\x02\x02\u0A67\u0A70\x03\x02\x02\x02\u0A68\u0A6A\x05\u0158" +
		"\xAD\x02\u0A69\u0A6B\x05\u015A\xAE\x02\u0A6A\u0A69\x03\x02\x02\x02\u0A6A" +
		"\u0A6B\x03\x02\x02\x02\u0A6B\u0A71\x03\x02\x02\x02\u0A6C\u0A6E\x05\u015A" +
		"\xAE\x02\u0A6D\u0A6F\x05\u0158\xAD\x02\u0A6E\u0A6D\x03\x02\x02\x02\u0A6E" +
		"\u0A6F\x03\x02\x02\x02\u0A6F\u0A71\x03\x02\x02\x02\u0A70\u0A68\x03\x02" +
		"\x02\x02\u0A70\u0A6C\x03\x02\x02\x02\u0A71\u0A73\x03\x02\x02\x02\u0A72" +
		"\u0A66\x03\x02\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A75\x03\x02" +
		"\x02\x02\u0A74\u0A76\x07\x8E\x02\x02\u0A75\u0A74\x03\x02\x02\x02\u0A75" +
		"\u0A76\x03\x02\x02\x02\u0A76\u0153\x03\x02\x02\x02\u0A77\u0A78\x07~\x02" +
		"\x02\u0A78\u0A79\x05\u0156\xAC\x02\u0A79\u0A7B\x05\u015E\xB0\x02\u0A7A" +
		"\u0A7C\x05\u019C\xCF\x02\u0A7B\u0A7A\x03\x02\x02\x02\u0A7B\u0A7C\x03\x02" +
		"\x02\x02\u0A7C\u0A7E\x03\x02\x02\x02\u0A7D\u0A7F\x07\x8E\x02\x02\u0A7E" +
		"\u0A7D\x03\x02\x02\x02\u0A7E\u0A7F\x03\x02\x02\x02\u0A7F\u0155\x03\x02" +
		"\x02\x02\u0A80\u0A83\x05\u03DA\u01EE\x02\u0A81\u0A83\x05\u03C2\u01E2\x02" +
		"\u0A82\u0A80\x03\x02\x02\x02\u0A82\u0A81\x03\x02\x02\x02\u0A83\u0157\x03" +
		"\x02\x02\x02\u0A84\u0A86\x07\xEC\x02\x02\u0A85\u0A87\x07\u0103\x02\x02" +
		"\u0A86\u0A85\x03\x02\x02\x02\u0A86\u0A87\x03\x02\x02\x02\u0A87\u0A8A\x03" +
		"\x02\x02\x02\u0A88\u0A8B\x05\u03DA\u01EE\x02\u0A89\u0A8B\t\n\x02\x02\u0A8A" +
		"\u0A88\x03\x02\x02\x02\u0A8A\u0A89\x03\x02\x02\x02\u0A8B\u0159\x03\x02" +
		"\x02\x02\u0A8C\u0A8E\x07C\x02\x02\u0A8D\u0A8F\x07\u0103\x02\x02\u0A8E" +
		"\u0A8D\x03\x02\x02\x02\u0A8E\u0A8F\x03\x02\x02\x02\u0A8F\u0A92\x03\x02" +
		"\x02\x02\u0A90\u0A93\x05\u03DA\u01EE\x02\u0A91\u0A93\t\n\x02\x02\u0A92" +
		"\u0A90\x03\x02\x02\x02\u0A92\u0A91\x03\x02\x02\x02\u0A93\u015B\x03\x02" +
		"\x02\x02\u0A94\u0A98\x05\u0160\xB1\x02\u0A95\u0A98\x05\u015E\xB0\x02\u0A96" +
		"\u0A98\x05\u0162\xB2\x02\u0A97\u0A94\x03\x02\x02\x02\u0A97\u0A95\x03\x02" +
		"\x02\x02\u0A97\u0A96\x03\x02\x02\x02\u0A98\u015D\x03\x02\x02\x02\u0A99" +
		"\u0A9A\x07\u0197\x02\x02\u0A9A\u0A9B\x05\u0176\xBC\x02\u0A9B\u015F\x03" +
		"\x02\x02\x02\u0A9C\u0A9E\x07\u01A1\x02\x02\u0A9D\u0A9C\x03\x02\x02\x02" +
		"\u0A9D\u0A9E\x03\x02\x02\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F\u0AA0\x07" +
		"^\x02\x02\u0AA0\u0161\x03\x02\x02\x02\u0AA1\u0AA3\x07\u01A1\x02\x02\u0AA2" +
		"\u0AA1\x03\x02\x02\x02\u0AA2\u0AA3\x03\x02\x02\x02\u0AA3\u0AA4\x03\x02" +
		"\x02\x02\u0AA4\u0AA6\x07\u0101\x02\x02\u0AA5\u0AA7\x07\x07\x02\x02\u0AA6" +
		"\u0AA5\x03\x02\x02\x02\u0AA6\u0AA7\x03\x02\x02\x02\u0AA7\u0163\x03\x02" +
		"\x02\x02\u0AA8\u0AB4\x05\u015C\xAF\x02\u0AA9\u0AB4\x05\u0172\xBA\x02\u0AAA" +
		"\u0AB4\x05\u0174\xBB\x02\u0AAB\u0AB4\x05\u0170\xB9\x02\u0AAC\u0AB4\x05" +
		"\u016C\xB7\x02\u0AAD\u0AB4\x05\u016E\xB8\x02\u0AAE\u0AB4\x05\u016A\xB6" +
		"\x02\u0AAF\u0AB4\x05\u0168\xB5\x02\u0AB0\u0AB4\x05\u0166\xB4\x02\u0AB1" +
		"\u0AB4\x05\u0160\xB1\x02\u0AB2\u0AB4\x05\u0162\xB2\x02\u0AB3\u0AA8\x03" +
		"\x02\x02\x02\u0AB3\u0AA9\x03\x02\x02\x02\u0AB3\u0AAA\x03\x02\x02\x02\u0AB3" +
		"\u0AAB\x03\x02\x02\x02\u0AB3\u0AAC\x03\x02\x02\x02\u0AB3\u0AAD\x03\x02" +
		"\x02\x02\u0AB3\u0AAE\x03\x02\x02\x02\u0AB3\u0AAF\x03\x02\x02\x02\u0AB3" +
		"\u0AB0\x03\x02\x02\x02\u0AB3\u0AB1\x03\x02\x02\x02\u0AB3\u0AB2\x03\x02" +
		"\x02\x02\u0AB4\u0165\x03\x02\x02\x02\u0AB5\u0AB6\x07\u0149\x02\x02\u0AB6" +
		"\u0167\x03\x02\x02\x02\u0AB7\u0AB9\x07\u01A1\x02\x02\u0AB8\u0AB7\x03\x02" +
		"\x02\x02\u0AB8\u0AB9\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02\x02\x02\u0ABA" +
		"\u0ABB\x070\x02\x02\u0ABB\u0169\x03\x02\x02\x02\u0ABC\u0ABD\x072\x02\x02" +
		"\u0ABD\u016B\x03\x02\x02\x02\u0ABE\u0AC0\x07\u01A1\x02\x02\u0ABF\u0ABE" +
		"\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02" +
		"\u0AC1\u0AC2\x07(\x02\x02\u0AC2\u016D\x03\x02\x02\x02\u0AC3\u0AC4\x07" +
		"\u018F\x02\x02\u0AC4\u016F\x03\x02\x02\x02\u0AC5\u0ACD\x07\xA5\x02\x02" +
		"\u0AC6\u0AC8\x07\u0189\x02\x02\u0AC7\u0AC6\x03\x02\x02\x02\u0AC7\u0AC8" +
		"\x03\x02\x02\x02\u0AC8\u0AC9\x03\x02\x02\x02\u0AC9\u0ACB\x07\x88\x02\x02" +
		"\u0ACA\u0ACC\x07\u0108\x02\x02\u0ACB\u0ACA\x03\x02\x02\x02\u0ACB\u0ACC" +
		"\x03\x02\x02\x02\u0ACC\u0ACE\x03\x02\x02\x02\u0ACD\u0AC7\x03\x02\x02\x02" +
		"\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE\u0ACF\x03\x02\x02\x02\u0ACF\u0AD0\t" +
		"\x19\x02\x02\u0AD0\u0171\x03\x02\x02\x02\u0AD1\u0AD3\x07!\x02\x02\u0AD2" +
		"\u0AD1\x03\x02\x02\x02\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3\u0AD4\x03\x02" +
		"\x02\x02\u0AD4\u0AD6\x07\xEC\x02\x02\u0AD5\u0AD7\x07\u0103\x02\x02\u0AD6" +
		"\u0AD5\x03\x02\x02\x02\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7\u0AD8\x03\x02" +
		"\x02\x02\u0AD8\u0AD9\x05\u01D6\xEC\x02\u0AD9\u0173\x03\x02\x02\x02\u0ADA" +
		"\u0ADC\x07!\x02\x02\u0ADB\u0ADA\x03\x02\x02\x02\u0ADB\u0ADC\x03\x02\x02" +
		"\x02\u0ADC\u0ADD\x03\x02\x02\x02\u0ADD\u0ADF\x07C\x02\x02\u0ADE\u0AE0" +
		"\x07\u0103\x02\x02\u0ADF\u0ADE\x03\x02\x02\x02\u0ADF\u0AE0\x03\x02\x02" +
		"\x02\u0AE0\u0AE1\x03\x02\x02\x02\u0AE1\u0AE2\x05\u01D6\xEC\x02\u0AE2\u0175" +
		"\x03\x02\x02\x02\u0AE3\u0AE4\x07\u01C9\x02\x02\u0AE4\u0177\x03\x02\x02" +
		"\x02\u0AE5\u0AE6\x07t\x02\x02\u0AE6\u0AE8\x05\u0398\u01CD\x02\u0AE7\u0AE9" +
		"\x07\u0134\x02\x02\u0AE8\u0AE7\x03\x02\x02\x02\u0AE8\u0AE9\x03\x02\x02" +
		"\x02\u0AE9\u0AEB\x03\x02\x02\x02\u0AEA\u0AEC\x05\u01A6\xD4\x02\u0AEB\u0AEA" +
		"\x03\x02\x02\x02\u0AEB\u0AEC\x03\x02\x02\x02\u0AEC\u0AEE\x03\x02\x02\x02" +
		"\u0AED\u0AEF\x07\x8D\x02\x02\u0AEE\u0AED\x03\x02\x02\x02\u0AEE\u0AEF\x03" +
		"\x02\x02\x02\u0AEF\u0179\x03\x02\x02\x02\u0AF0\u0AF1\x07[\x02\x02\u0AF1" +
		"\u017B\x03\x02\x02\x02\u0AF2\u0AF7\x07N\x02\x02\u0AF3\u0AF5\x05\u03D8" +
		"\u01ED\x02\u0AF4\u0AF6\x07\u0151\x02\x02\u0AF5\u0AF4\x03\x02\x02\x02\u0AF5" +
		"\u0AF6\x03\x02\x02\x02\u0AF6\u0AF8\x03\x02\x02\x02\u0AF7\u0AF3\x03\x02" +
		"\x02\x02\u0AF8\u0AF9\x03\x02\x02\x02\u0AF9\u0AF7\x03\x02\x02\x02\u0AF9" +
		"\u0AFA\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02\u0AFB\u0AFC\t\x1A\x02" +
		"\x02\u0AFC\u0AFE\x05\u03C0\u01E1\x02\u0AFD\u0AFF\x05\u01A0\xD1\x02\u0AFE" +
		"\u0AFD\x03\x02\x02\x02\u0AFE\u0AFF\x03\x02\x02\x02\u0AFF\u0B01\x03\x02" +
		"\x02\x02\u0B00\u0B02\x07\x8C\x02\x02\u0B01\u0B00\x03\x02\x02\x02\u0B01" +
		"\u0B02\x03\x02\x02\x02\u0B02\u017D\x03\x02\x02\x02\u0B03\u0B08\x07?\x02" +
		"\x02\u0B04\u0B06\x05\u0398\u01CD\x02\u0B05\u0B07\x05\u0180\xC1\x02\u0B06" +
		"\u0B05\x03\x02\x02\x02\u0B06\u0B07\x03\x02\x02\x02\u0B07\u0B09\x03\x02" +
		"\x02\x02\u0B08\u0B04\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A" +
		"\u0B08\x03\x02\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B\u017F\x03\x02" +
		"\x02\x02\u0B0C\u0B16\t\x1B\x02\x02\u0B0D\u0B0F\x07\xBD\x02\x02\u0B0E\u0B0D" +
		"\x03\x02\x02\x02\u0B0E\u0B0F\x03\x02\x02\x02\u0B0F\u0B10\x03\x02\x02\x02" +
		"\u0B10\u0B17\x07\u013D\x02\x02\u0B11\u0B13\x07\u01A1\x02\x02\u0B12";
	private static readonly _serializedATNSegment6: string =
		"\u0B11\x03\x02\x02\x02\u0B12\u0B13\x03\x02\x02\x02\u0B13\u0B14\x03\x02" +
		"\x02\x02\u0B14\u0B15\x07\u0101\x02\x02\u0B15\u0B17\x07\u014B\x02\x02\u0B16" +
		"\u0B0E\x03\x02\x02\x02\u0B16\u0B12\x03\x02\x02\x02\u0B16\u0B17\x03\x02" +
		"\x02\x02\u0B17\u0B21\x03\x02\x02\x02\u0B18\u0B1A\x07\u01A1\x02\x02\u0B19" +
		"\u0B18\x03\x02\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A\u0B1E\x03\x02" +
		"\x02\x02\u0B1B\u0B1C\x07\u0101\x02\x02\u0B1C\u0B1F\x07\u014B\x02\x02\u0B1D" +
		"\u0B1F\x07\xF0\x02\x02\u0B1E\u0B1B\x03\x02\x02\x02\u0B1E\u0B1D\x03\x02" +
		"\x02\x02\u0B1F\u0B21\x03\x02\x02\x02\u0B20\u0B0C\x03\x02\x02\x02\u0B20" +
		"\u0B19\x03\x02\x02\x02\u0B21\u0181\x03\x02\x02\x02\u0B22\u0B24\x077\x02" +
		"\x02\u0B23\u0B25\x05\u0190\xC9\x02\u0B24\u0B23\x03\x02\x02\x02\u0B25\u0B26" +
		"\x03\x02\x02\x02\u0B26\u0B24\x03\x02\x02\x02\u0B26\u0B27\x03\x02\x02\x02" +
		"\u0B27\u0183\x03\x02\x02\x02\u0B28\u0B29\x076\x02\x02\u0B29\u0B2B\x05" +
		"\u0190\xC9\x02\u0B2A\u0B2C\x05\u0188\xC5\x02\u0B2B\u0B2A\x03\x02\x02\x02" +
		"\u0B2B\u0B2C\x03\x02\x02\x02\u0B2C\u0B2E\x03\x02\x02\x02\u0B2D\u0B2F\x05" +
		"\u0186\xC4\x02\u0B2E\u0B2D\x03\x02\x02\x02\u0B2E\u0B2F\x03\x02\x02\x02" +
		"\u0B2F\u0B31\x03\x02\x02\x02\u0B30\u0B32\x05\u019C\xCF\x02\u0B31\u0B30" +
		"\x03\x02\x02\x02\u0B31\u0B32\x03\x02\x02\x02\u0B32\u0B34\x03\x02\x02\x02" +
		"\u0B33\u0B35\x07\x8B\x02\x02\u0B34\u0B33\x03\x02\x02\x02\u0B34\u0B35\x03" +
		"\x02\x02\x02\u0B35\u0185\x03\x02\x02\x02\u0B36\u0B37\x07\xC3\x02\x02\u0B37" +
		"\u0B38\x05\u03D8\u01ED\x02\u0B38\u0187\x03\x02\x02\x02\u0B39\u0B3B\x07" +
		"\u019A\x02\x02\u0B3A\u0B3C\x05\u018A\xC6\x02\u0B3B\u0B3A\x03\x02\x02\x02" +
		"\u0B3C\u0B3D\x03\x02\x02\x02\u0B3D\u0B3B\x03\x02\x02\x02\u0B3D\u0B3E\x03" +
		"\x02\x02\x02\u0B3E\u0189\x03\x02\x02\x02\u0B3F\u0B49\x07\u010A\x02\x02" +
		"\u0B40\u0B42\x05\u018C\xC7\x02\u0B41\u0B40\x03\x02\x02\x02\u0B41\u0B42" +
		"\x03\x02\x02\x02\u0B42\u0B44\x03\x02\x02\x02\u0B43\u0B45\x05\u018E\xC8" +
		"\x02\u0B44\u0B43\x03\x02\x02\x02\u0B45\u0B46\x03\x02\x02\x02\u0B46\u0B44" +
		"\x03\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47\u0B49\x03\x02\x02\x02" +
		"\u0B48\u0B3F\x03\x02\x02\x02\u0B48\u0B41\x03\x02\x02\x02\u0B49\u018B\x03" +
		"\x02\x02\x02\u0B4A\u0B4C\x074\x02\x02\u0B4B\u0B4A\x03\x02\x02\x02\u0B4B" +
		"\u0B4C\x03\x02\x02\x02\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\u0B5B\x07\u0138" +
		"\x02\x02\u0B4E\u0B50\x074\x02\x02\u0B4F\u0B4E\x03\x02\x02\x02\u0B4F\u0B50" +
		"\x03\x02\x02\x02\u0B50\u0B51\x03\x02\x02\x02\u0B51\u0B5B\x07X\x02\x02" +
		"\u0B52\u0B54\x074\x02\x02\u0B53\u0B52\x03\x02\x02\x02\u0B53\u0B54\x03" +
		"\x02\x02\x02\u0B54\u0B55\x03\x02\x02\x02\u0B55\u0B5B\x07z\x02\x02\u0B56" +
		"\u0B58\x074\x02\x02\u0B57\u0B56\x03\x02\x02\x02\u0B57\u0B58\x03\x02\x02" +
		"\x02\u0B58\u0B59\x03\x02\x02\x02\u0B59\u0B5B\x07\u019B\x02\x02\u0B5A\u0B4B" +
		"\x03\x02\x02\x02\u0B5A\u0B4F\x03\x02\x02\x02\u0B5A\u0B53\x03\x02\x02\x02" +
		"\u0B5A\u0B57\x03\x02\x02\x02\u0B5B\u018D\x03\x02\x02\x02\u0B5C\u0B60\x05" +
		"\u03D8\u01ED\x02\u0B5D\u0B60\t\n\x02\x02\u0B5E\u0B60\x07\x03\x02\x02\u0B5F" +
		"\u0B5C\x03\x02\x02\x02\u0B5F\u0B5D\x03\x02\x02\x02\u0B5F\u0B5E\x03\x02" +
		"\x02\x02\u0B60\u018F\x03\x02\x02\x02\u0B61\u0B64\x05\u03D8\u01ED\x02\u0B62" +
		"\u0B64\x07\x03\x02\x02\u0B63\u0B61\x03\x02\x02\x02\u0B63\u0B62\x03\x02" +
		"\x02\x02\u0B64\u0191\x03\x02\x02\x02\u0B65\u0B6E\x07\x13\x02\x02\u0B66" +
		"\u0B67\x05\u013A\x9E\x02\u0B67\u0B6A\x07\u0189\x02\x02\u0B68\u0B69\x07" +
		"\u012A\x02\x02\u0B69\u0B6B\x07\u0189\x02\x02\u0B6A\u0B68\x03\x02\x02\x02" +
		"\u0B6A\u0B6B\x03\x02\x02\x02\u0B6B\u0B6C\x03\x02\x02\x02\u0B6C\u0B6D\x05" +
		"\u013A\x9E\x02\u0B6D\u0B6F\x03\x02\x02\x02\u0B6E\u0B66\x03\x02\x02\x02" +
		"\u0B6F\u0B70\x03\x02\x02\x02\u0B70\u0B6E\x03\x02\x02\x02\u0B70\u0B71\x03" +
		"\x02\x02\x02\u0B71\u0193\x03\x02\x02\x02\u0B72\u0B74\x07\x06\x02\x02\u0B73" +
		"\u0B75\x05\u0198\xCD\x02\u0B74\u0B73\x03\x02\x02\x02\u0B75\u0B76\x03\x02" +
		"\x02\x02\u0B76\u0B74\x03\x02\x02\x02\u0B76\u0B77\x03\x02\x02\x02\u0B77" +
		"\u0B78\x03\x02\x02\x02\u0B78\u0B7D\x07\u0189\x02\x02\u0B79\u0B7B\x05\u03D8" +
		"\u01ED\x02\u0B7A\u0B7C\x07\u0151\x02\x02\u0B7B\u0B7A\x03\x02\x02\x02\u0B7B" +
		"\u0B7C\x03\x02\x02\x02\u0B7C\u0B7E\x03\x02\x02\x02\u0B7D\u0B79\x03\x02" +
		"\x02\x02\u0B7E\u0B7F\x03\x02\x02\x02\u0B7F\u0B7D\x03\x02\x02\x02\u0B7F" +
		"\u0B80\x03\x02\x02\x02\u0B80\u0BA2\x03\x02\x02\x02\u0B81\u0B85\x07\x06" +
		"\x02\x02\u0B82\u0B84\x05\u0198\xCD\x02\u0B83\u0B82\x03\x02\x02\x02\u0B84" +
		"\u0B87\x03\x02\x02\x02\u0B85\u0B83\x03\x02\x02\x02\u0B85\u0B86\x03\x02" +
		"\x02\x02\u0B86\u0B89\x03\x02\x02\x02\u0B87\u0B85\x03\x02\x02\x02\u0B88" +
		"\u0B8A\x07\u0189\x02\x02\u0B89\u0B88\x03\x02\x02\x02\u0B89\u0B8A\x03\x02" +
		"\x02\x02\u0B8A\u0B8C\x03\x02\x02\x02\u0B8B\u0B8D\x05\u0198\xCD\x02\u0B8C" +
		"\u0B8B\x03\x02\x02\x02\u0B8D\u0B8E\x03\x02\x02\x02\u0B8E\u0B8C\x03\x02" +
		"\x02\x02\u0B8E\u0B8F\x03\x02\x02\x02\u0B8F\u0B90\x03\x02\x02\x02\u0B90" +
		"\u0B95\x07\xC3\x02\x02\u0B91\u0B93\x05\u03D8\u01ED\x02\u0B92\u0B94\x07" +
		"\u0151\x02\x02\u0B93\u0B92\x03\x02\x02\x02\u0B93\u0B94\x03\x02\x02\x02" +
		"\u0B94\u0B96\x03\x02\x02\x02\u0B95\u0B91\x03\x02\x02\x02\u0B96\u0B97\x03" +
		"\x02\x02\x02\u0B97\u0B95\x03\x02\x02\x02\u0B97\u0B98\x03\x02\x02\x02\u0B98" +
		"\u0BA2\x03\x02\x02\x02\u0B99\u0B9A\x07\x06\x02\x02\u0B9A\u0B9B\t\v\x02" +
		"\x02\u0B9B\u0B9C\x05\u0196\xCC\x02\u0B9C\u0B9D\x07\u0189\x02\x02\u0B9D" +
		"\u0B9F\x05\u0196\xCC\x02\u0B9E\u0BA0\x07\u0151\x02\x02\u0B9F\u0B9E\x03" +
		"\x02\x02\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0BA2\x03\x02\x02\x02\u0BA1" +
		"\u0B72\x03\x02\x02\x02\u0BA1\u0B81\x03\x02\x02\x02\u0BA1\u0B99\x03\x02" +
		"\x02\x02\u0BA2\u0BA4\x03\x02\x02\x02\u0BA3\u0BA5\x05\u01A0\xD1\x02\u0BA4" +
		"\u0BA3\x03\x02\x02\x02\u0BA4\u0BA5\x03\x02\x02\x02\u0BA5\u0BA7\x03\x02" +
		"\x02\x02\u0BA6\u0BA8\x07\x8A\x02\x02\u0BA7\u0BA6\x03\x02\x02\x02\u0BA7" +
		"\u0BA8\x03\x02\x02\x02\u0BA8\u0195\x03\x02\x02\x02\u0BA9\u0BAA\x05\u03D8" +
		"\u01ED\x02\u0BAA\u0197\x03\x02\x02\x02\u0BAB\u0BAE\t\f\x02\x02\u0BAC\u0BAE" +
		"\x05\u03DA\u01EE\x02\u0BAD\u0BAB\x03\x02\x02\x02\u0BAD\u0BAC\x03\x02\x02" +
		"\x02\u0BAE\u0199\x03\x02\x02\x02\u0BAF\u0BB6\x05\u01AC\xD7\x02\u0BB0\u0BB6" +
		"\x05\u01AE\xD8\x02\u0BB1\u0BB6\x05\u01B0\xD9\x02\u0BB2\u0BB6\x05\u01B2" +
		"\xDA\x02\u0BB3\u0BB6\x05\u01B4\xDB\x02\u0BB4\u0BB6\x05\u01A8\xD5\x02\u0BB5" +
		"\u0BAF\x03\x02\x02\x02\u0BB5\u0BB0\x03\x02\x02\x02\u0BB5\u0BB1\x03\x02" +
		"\x02\x02\u0BB5\u0BB2\x03\x02\x02\x02\u0BB5\u0BB3\x03\x02\x02\x02\u0BB5" +
		"\u0BB4\x03\x02\x02\x02\u0BB6\u019B\x03\x02\x02\x02\u0BB7\u0BBA\x05\u01E0" +
		"\xF1\x02\u0BB8\u0BB9\x07\u0102\x02\x02\u0BB9\u0BBB\x05\u01E0\xF1\x02\u0BBA" +
		"\u0BB8\x03\x02\x02\x02\u0BBA\u0BBB\x03\x02\x02\x02\u0BBB\u0BC2\x03\x02" +
		"\x02\x02\u0BBC\u0BBD\x07\u0102\x02\x02\u0BBD\u0BBF\x05\u01E0\xF1\x02\u0BBE" +
		"\u0BC0\x05\u01E0\xF1\x02\u0BBF\u0BBE\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02" +
		"\x02\x02\u0BC0\u0BC2\x03\x02\x02\x02\u0BC1\u0BB7\x03\x02\x02\x02\u0BC1" +
		"\u0BBC\x03\x02\x02\x02\u0BC2\u019D\x03\x02\x02\x02\u0BC3\u0BC6\x05\u01DE" +
		"\xF0\x02\u0BC4\u0BC5\x07\u0102\x02\x02\u0BC5\u0BC7\x05\u01DE\xF0\x02\u0BC6" +
		"\u0BC4\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7\u0BCE\x03\x02" +
		"\x02\x02\u0BC8\u0BC9\x07\u0102\x02\x02\u0BC9\u0BCB\x05\u01DE\xF0\x02\u0BCA" +
		"\u0BCC\x05\u01DE\xF0\x02\u0BCB\u0BCA\x03\x02\x02\x02\u0BCB\u0BCC\x03\x02" +
		"\x02\x02\u0BCC\u0BCE\x03\x02\x02\x02\u0BCD\u0BC3\x03\x02\x02\x02\u0BCD" +
		"\u0BC8\x03\x02\x02\x02\u0BCE\u019F\x03\x02\x02\x02\u0BCF\u0BD2\x05\u01E2" +
		"\xF2\x02\u0BD0\u0BD1\x07\u0102\x02\x02\u0BD1\u0BD3\x05\u01E2\xF2\x02\u0BD2" +
		"\u0BD0\x03\x02\x02\x02\u0BD2\u0BD3\x03\x02\x02\x02\u0BD3\u0BDA\x03\x02" +
		"\x02\x02\u0BD4\u0BD5\x07\u0102\x02\x02\u0BD5\u0BD7\x05\u01E2\xF2\x02\u0BD6" +
		"\u0BD8\x05\u01E2\xF2\x02\u0BD7\u0BD6\x03\x02\x02\x02\u0BD7\u0BD8\x03\x02" +
		"\x02\x02\u0BD8\u0BDA\x03\x02\x02\x02\u0BD9\u0BCF\x03\x02\x02\x02\u0BD9" +
		"\u0BD4\x03\x02\x02\x02\u0BDA\u01A1\x03\x02\x02\x02\u0BDB\u0BDE\x05\u01E4" +
		"\xF3\x02\u0BDC\u0BDD\x07\u0102\x02\x02\u0BDD\u0BDF\x05\u01E4\xF3\x02\u0BDE" +
		"\u0BDC\x03\x02\x02\x02\u0BDE\u0BDF\x03\x02\x02\x02\u0BDF\u0BE6\x03\x02" +
		"\x02\x02\u0BE0\u0BE1\x07\u0102\x02\x02\u0BE1\u0BE3\x05\u01E4\xF3\x02\u0BE2" +
		"\u0BE4\x05\u01E4\xF3\x02\u0BE3\u0BE2\x03\x02\x02\x02\u0BE3\u0BE4\x03\x02" +
		"\x02\x02\u0BE4\u0BE6\x03\x02\x02\x02\u0BE5\u0BDB\x03\x02\x02\x02\u0BE5" +
		"\u0BE0\x03\x02\x02\x02\u0BE6\u01A3\x03\x02\x02\x02\u0BE7\u0BEA\x05\u01E6" +
		"\xF4\x02\u0BE8\u0BE9\x07\u0102\x02\x02\u0BE9\u0BEB\x05\u01E6\xF4\x02\u0BEA" +
		"\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB\u0BF2\x03\x02" +
		"\x02\x02\u0BEC\u0BED\x07\u0102\x02\x02\u0BED\u0BEF\x05\u01E6\xF4\x02\u0BEE" +
		"\u0BF0\x05\u01E6\xF4\x02\u0BEF\u0BEE\x03\x02\x02\x02\u0BEF\u0BF0\x03\x02" +
		"\x02\x02\u0BF0\u0BF2\x03\x02\x02\x02\u0BF1\u0BE7\x03\x02\x02\x02\u0BF1" +
		"\u0BEC\x03\x02\x02\x02\u0BF2\u01A5\x03\x02\x02\x02\u0BF3\u0BF6\x05\u01E8" +
		"\xF5\x02\u0BF4\u0BF5\x07\u0102\x02\x02\u0BF5\u0BF7\x05\u01E8\xF5\x02\u0BF6" +
		"\u0BF4\x03\x02\x02\x02\u0BF6\u0BF7\x03\x02\x02\x02\u0BF7\u0BFE\x03\x02" +
		"\x02\x02\u0BF8\u0BF9\x07\u0102\x02\x02\u0BF9\u0BFB\x05\u01E8\xF5\x02\u0BFA" +
		"\u0BFC\x05\u01E8\xF5\x02\u0BFB\u0BFA\x03\x02\x02\x02\u0BFB\u0BFC\x03\x02" +
		"\x02\x02\u0BFC\u0BFE\x03\x02\x02\x02\u0BFD\u0BF3\x03\x02\x02\x02\u0BFD" +
		"\u0BF8\x03\x02\x02\x02\u0BFE\u01A7\x03\x02\x02\x02\u0BFF\u0C00\x07\x04" +
		"\x02\x02\u0C00\u0C02\x05\u01DA\xEE\x02\u0C01\u0C03\x07\xBF\x02\x02\u0C02" +
		"\u0C01\x03\x02\x02\x02\u0C02\u0C03\x03\x02\x02\x02\u0C03\u0C04\x03\x02" +
		"\x02\x02\u0C04\u0C06\x05\u01AA\xD6\x02\u0C05\u0C07\x05\u019C\xCF\x02\u0C06" +
		"\u0C05\x03\x02\x02\x02\u0C06\u0C07\x03\x02\x02\x02\u0C07\u0C09\x03\x02" +
		"\x02\x02\u0C08\u0C0A\x07\x89\x02\x02\u0C09\u0C08\x03\x02\x02\x02\u0C09" +
		"\u0C0A\x03\x02\x02\x02\u0C0A\u01A9\x03\x02\x02\x02\u0C0B\u0C0C\x07\u01C9" +
		"\x02\x02\u0C0C\u01AB\x03\x02\x02\x02\u0C0D\u0C0E\x07\x04\x02\x02\u0C0E" +
		"\u0C11\x05\u01DA\xEE\x02\u0C0F\u0C10\x07\xBF\x02\x02\u0C10\u0C12\x05\u01DC" +
		"\xEF\x02\u0C11\u0C0F\x03\x02\x02\x02\u0C11\u0C12\x03\x02\x02\x02\u0C12" +
		"\u0C15\x03\x02\x02\x02\u0C13\u0C14\x07\u01A1\x02\x02\u0C14\u0C16\x07^" +
		"\x02\x02\u0C15\u0C13\x03\x02\x02\x02\u0C15\u0C16\x03\x02\x02\x02\u0C16" +
		"\u0C18\x03\x02\x02\x02\u0C17\u0C19\x05\u019E\xD0\x02\u0C18\u0C17\x03\x02" +
		"\x02\x02\u0C18\u0C19\x03\x02\x02\x02\u0C19\u0C1B\x03\x02\x02\x02\u0C1A" +
		"\u0C1C\x07\x89\x02\x02\u0C1B\u0C1A\x03\x02\x02\x02\u0C1B\u0C1C\x03\x02" +
		"\x02\x02\u0C1C\u01AD\x03\x02\x02\x02\u0C1D\u0C1E\x07\x04\x02\x02\u0C1E" +
		"\u0C1F\x05\u01DA\xEE\x02\u0C1F\u0C20\x07\xBF\x02\x02\u0C20\u0C21\x05\u01D8" +
		"\xED\x02\u0C21\u01AF\x03\x02\x02\x02\u0C22\u0C23\x07\x04\x02\x02\u0C23" +
		"\u0C25\x05\u01DA\xEE\x02\u0C24\u0C26\x05\u01C2\xE2\x02\u0C25\u0C24\x03" +
		"\x02\x02\x02\u0C26\u0C27\x03\x02\x02\x02\u0C27\u0C25\x03\x02\x02\x02\u0C27" +
		"\u0C28\x03\x02\x02\x02\u0C28\u0C2B\x03\x02\x02\x02\u0C29\u0C2C\x05\u019C" +
		"\xCF\x02\u0C2A\u0C2C\x05\u019E\xD0\x02\u0C2B\u0C29\x03\x02\x02\x02\u0C2B" +
		"\u0C2A\x03\x02\x02\x02\u0C2B\u0C2C\x03\x02\x02\x02\u0C2C\u0C2E\x03\x02" +
		"\x02\x02\u0C2D\u0C2F\x07\x89\x02\x02\u0C2E\u0C2D\x03\x02\x02\x02\u0C2E" +
		"\u0C2F\x03\x02\x02\x02\u0C2F\u01B1\x03\x02\x02\x02\u0C30\u0C32\x07\x04" +
		"\x02\x02\u0C31\u0C33\x07\\\x02\x02\u0C32\u0C31\x03\x02\x02\x02\u0C32\u0C33" +
		"\x03\x02\x02\x02\u0C33\u0C34\x03\x02\x02\x02\u0C34\u0C36\x07\xE3\x02\x02" +
		"\u0C35\u0C37\x07\xD1\x02\x02\u0C36\u0C35\x03\x02\x02\x02\u0C36\u0C37\x03" +
		"\x02\x02\x02\u0C37\u0C38\x03\x02\x02\x02\u0C38\u0C3A\x05\u01CC\xE7\x02" +
		"\u0C39\u0C3B\x05\u01BC\xDF\x02\u0C3A\u0C39\x03\x02\x02\x02\u0C3B\u0C3C" +
		"\x03\x02\x02\x02\u0C3C\u0C3A\x03\x02\x02\x02\u0C3C\u0C3D\x03\x02\x02\x02" +
		"\u0C3D\u0C40\x03\x02\x02\x02\u0C3E\u0C41\x05\u019C\xCF\x02\u0C3F\u0C41" +
		"\x05\u019E\xD0\x02\u0C40\u0C3E\x03\x02\x02\x02\u0C40\u0C3F\x03\x02\x02" +
		"\x02\u0C40\u0C41\x03\x02\x02\x02\u0C41\u0C43\x03\x02\x02\x02\u0C42\u0C44" +
		"\x07\x89\x02\x02\u0C43\u0C42\x03\x02\x02\x02\u0C43\u0C44\x03\x02\x02\x02" +
		"\u0C44\u01B3\x03\x02\x02\x02\u0C45\u0C46\x07\x04\x02\x02\u0C46\u0C48\x05" +
		"\u0294\u014B\x02\u0C47\u0C49\x05\u01B6\xDC\x02\u0C48\u0C47\x03\x02\x02" +
		"\x02\u0C48\u0C49\x03\x02\x02\x02\u0C49\u0C4B\x03\x02\x02\x02\u0C4A\u0C4C" +
		"\x05\u019C\xCF\x02\u0C4B\u0C4A\x03\x02\x02\x02\u0C4B\u0C4C\x03\x02\x02" +
		"\x02\u0C4C\u0C4E\x03\x02\x02\x02\u0C4D\u0C4F\x07\x89\x02\x02\u0C4E\u0C4D" +
		"\x03\x02\x02\x02\u0C4E\u0C4F\x03\x02\x02\x02\u0C4F\u01B5\x03\x02\x02\x02" +
		"\u0C50\u0C52\x07!\x02\x02\u0C51\u0C50\x03\x02\x02\x02\u0C51\u0C52\x03" +
		"\x02\x02\x02\u0C52\u0C5B\x03\x02\x02\x02\u0C53\u0C55\x05\u01B8\xDD\x02" +
		"\u0C54\u0C56\x05\u01BA\xDE\x02\u0C55\u0C54\x03\x02\x02\x02\u0C55\u0C56" +
		"\x03\x02\x02\x02\u0C56\u0C5C\x03\x02\x02\x02\u0C57\u0C59\x05\u01BA\xDE" +
		"\x02\u0C58\u0C5A\x05\u01B8\xDD\x02\u0C59\u0C58\x03\x02\x02\x02\u0C59\u0C5A" +
		"\x03\x02\x02\x02\u0C5A\u0C5C\x03\x02\x02\x02\u0C5B\u0C53\x03\x02\x02\x02" +
		"\u0C5B\u0C57\x03\x02\x02\x02\u0C5C\u01B7\x03\x02\x02\x02\u0C5D\u0C5F\x07" +
		"\xEC\x02\x02\u0C5E\u0C60\x07\u0103\x02\x02\u0C5F\u0C5E\x03\x02\x02\x02" +
		"\u0C5F\u0C60\x03\x02\x02\x02\u0C60\u0C63\x03\x02\x02\x02\u0C61\u0C64\t" +
		"\n\x02\x02\u0C62\u0C64\x05\u03DA\u01EE\x02\u0C63\u0C61\x03\x02\x02\x02" +
		"\u0C63\u0C62\x03\x02\x02\x02\u0C64\u01B9\x03\x02\x02\x02\u0C65\u0C67\x07" +
		"C\x02\x02\u0C66\u0C68\x07\u0103\x02\x02\u0C67\u0C66\x03\x02\x02\x02\u0C67" +
		"\u0C68\x03\x02\x02\x02\u0C68\u0C6B\x03\x02\x02\x02\u0C69\u0C6C\t\n\x02" +
		"\x02\u0C6A\u0C6C\x05\u03DA\u01EE\x02\u0C6B\u0C69\x03\x02\x02\x02\u0C6B" +
		"\u0C6A\x03\x02\x02\x02\u0C6C\u01BB\x03\x02\x02\x02\u0C6D\u0C72\x05\u01C0" +
		"\xE1\x02\u0C6E\u0C72\x05\u01BE\xE0\x02\u0C6F\u0C72\x05\u0170\xB9\x02\u0C70" +
		"\u0C72\x05\u016C\xB7\x02\u0C71\u0C6D\x03\x02\x02\x02\u0C71\u0C6E\x03\x02" +
		"\x02\x02\u0C71\u0C6F\x03\x02\x02\x02\u0C71\u0C70\x03\x02\x02\x02\u0C72" +
		"\u01BD\x03\x02\x02\x02\u0C73\u0C75\x07\xBF\x02\x02\u0C74\u0C73\x03\x02" +
		"\x02\x02\u0C74\u0C75\x03\x02\x02\x02\u0C75\u0C76\x03\x02\x02\x02\u0C76" +
		"\u0C78\x07C\x02\x02\u0C77\u0C79\x07\u0103\x02\x02\u0C78\u0C77\x03\x02" +
		"\x02\x02\u0C78\u0C79\x03\x02\x02\x02\u0C79\u0C7A\x03\x02\x02\x02\u0C7A" +
		"\u0C7B\x05\u01D6\xEC\x02\u0C7B\u01BF\x03\x02\x02\x02\u0C7C\u0C7E\x07\xBF" +
		"\x02\x02\u0C7D\u0C7C\x03\x02\x02\x02\u0C7D\u0C7E\x03\x02\x02\x02\u0C7E" +
		"\u0C7F\x03\x02\x02\x02\u0C7F\u0C81\x07\xEC\x02\x02\u0C80\u0C82\x07\u0103" +
		"\x02\x02\u0C81\u0C80\x03\x02\x02\x02\u0C81\u0C82\x03\x02\x02\x02\u0C82" +
		"\u0C83\x03\x02\x02\x02\u0C83\u0C84\x05\u01D6\xEC\x02\u0C84\u01C1\x03\x02" +
		"\x02\x02\u0C85\u0C90\x05\u01BC\xDF\x02\u0C86\u0C90\x05\u016E\xB8\x02\u0C87" +
		"\u0C90\x05\u016A\xB6\x02\u0C88\u0C90\x05\u0168\xB5\x02\u0C89\u0C90\x05" +
		"\u01C4\xE3\x02\u0C8A\u0C90\x05\u0160\xB1\x02\u0C8B\u0C90\x05\u0166\xB4" +
		"\x02\u0C8C\u0C90\x05\u01CA\xE6\x02\u0C8D\u0C90\x05\u01C8\xE5\x02\u0C8E" +
		"\u0C90\x05\u01C6\xE4\x02\u0C8F\u0C85\x03\x02\x02\x02\u0C8F\u0C86\x03\x02" +
		"\x02\x02\u0C8F\u0C87\x03\x02\x02\x02\u0C8F\u0C88\x03\x02\x02\x02\u0C8F" +
		"\u0C89\x03\x02\x02\x02\u0C8F\u0C8A\x03\x02\x02\x02\u0C8F\u0C8B\x03\x02" +
		"\x02\x02\u0C8F\u0C8C\x03\x02\x02\x02\u0C8F\u0C8D\x03\x02\x02\x02\u0C8F" +
		"\u0C8E\x03\x02\x02\x02\u0C90\u01C3\x03\x02\x02\x02\u0C91\u0C95\x07\u012D" +
		"\x02\x02\u0C92\u0C94\x05\u01D0\xE9\x02\u0C93\u0C92\x03\x02\x02\x02\u0C94" +
		"\u0C97\x03\x02\x02\x02\u0C95\u0C93\x03\x02\x02\x02\u0C95\u0C96\x03\x02" +
		"\x02\x02\u0C96\u01C5\x03\x02\x02\x02\u0C97\u0C95\x03\x02\x02\x02\u0C98" +
		"\u0C9A\x07\\\x02\x02\u0C99\u0C98\x03\x02\x02\x02\u0C99\u0C9A\x03\x02\x02" +
		"\x02\u0C9A\u0C9B\x03\x02\x02\x02\u0C9B\u0C9D\x07\xE3\x02\x02\u0C9C\u0C9E" +
		"\x07\xD1\x02\x02\u0C9D\u0C9C\x03\x02\x02\x02\u0C9D\u0C9E\x03\x02\x02\x02" +
		"\u0C9E\u0C9F\x03\x02\x02\x02\u0C9F\u0CA0\x05\u01CC\xE7\x02\u0CA0\u01C7" +
		"\x03\x02\x02\x02\u0CA1\u0CA3\x07r\x02\x02\u0CA2\u0CA4\x07\xDE\x02\x02" +
		"\u0CA3\u0CA2\x03\x02\x02\x02\u0CA3\u0CA4\x03\x02\x02\x02\u0CA4\u0CA5\x03" +
		"\x02\x02\x02\u0CA5\u0CA6\x05\u01CE\xE8\x02\u0CA6\u01C9\x03\x02\x02\x02" +
		"\u0CA7\u0CA9\x07\u01A1\x02\x02\u0CA8\u0CA7\x03\x02\x02\x02\u0CA8\u0CA9" +
		"\x03\x02\x02\x02\u0CA9\u0CAA\x03\x02\x02\x02\u0CAA\u0CAB\x07\u0101\x02" +
		"\x02\u0CAB\u0CAC\x07\x85\x02\x02\u0CAC\u01CB\x03\x02\x02\x02\u0CAD\u0CAE" +
		"\x05\u03DA\u01EE\x02\u0CAE\u01CD\x03\x02\x02\x02\u0CAF\u0CB7\x05\"\x12" +
		"\x02\u0CB0\u0CB7\x07\x03\x02\x02\u0CB1\u0CB7\x05\u03DA\u01EE\x02\u0CB2" +
		"\u0CB4\x07f\x02\x02\u0CB3\u0CB5\x07\u019B\x02\x02\u0CB4\u0CB3\x03\x02" +
		"\x02\x02\u0CB4\u0CB5\x03\x02\x02\x02\u0CB5\u0CB7\x03\x02\x02\x02\u0CB6" +
		"\u0CAF\x03\x02\x02\x02\u0CB6\u0CB0\x03\x02\x02\x02\u0CB6\u0CB1\x03\x02" +
		"\x02\x02\u0CB6\u0CB2\x03\x02\x02\x02\u0CB7\u01CF\x03\x02\x02\x02\u0CB8" +
		"\u0CB9\x07\u0163\x02\x02\u0CB9\u0CCD\x05\u01D4\xEB\x02\u0CBA\u0CBC\x07" +
		"\u01A1\x02\x02\u0CBB\u0CBA\x03\x02\x02\x02\u0CBB\u0CBC\x03\x02\x02\x02" +
		"\u0CBC\u0CBD\x03\x02\x02\x02\u0CBD\u0CCD\x07%\x02\x02\u0CBE\u0CC0\x07" +
		"\u01A1\x02\x02\u0CBF\u0CBE\x03\x02\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02" +
		"\u0CC0\u0CC1\x03\x02\x02\x02\u0CC1\u0CC2\x07\u0101\x02\x02\u0CC2\u0CCD" +
		"\x07.\x02\x02\u0CC3\u0CC5\x07\u01A1\x02\x02\u0CC4\u0CC3\x03\x02\x02\x02" +
		"\u0CC4\u0CC5\x03\x02\x02\x02\u0CC5\u0CC6\x03\x02\x02\x02\u0CC6\u0CCD\x07" +
		"\x86\x02\x02\u0CC7\u0CC9\x07\u01A1\x02\x02\u0CC8\u0CC7\x03\x02\x02\x02" +
		"\u0CC8\u0CC9\x03\x02\x02\x02\u0CC9\u0CCA\x03\x02\x02\x02\u0CCA\u0CCB\x07" +
		"\xB5\x02\x02\u0CCB\u0CCD\x05\u01D2\xEA\x02\u0CCC\u0CB8\x03\x02\x02\x02" +
		"\u0CCC\u0CBB\x03\x02\x02\x02\u0CCC\u0CBF\x03\x02\x02\x02\u0CCC\u0CC4\x03" +
		"\x02\x02\x02\u0CCC\u0CC8\x03\x02\x02\x02\u0CCD\u01D1\x03\x02\x02\x02\u0CCE" +
		"\u0CCF\x07\x03\x02\x02\u0CCF\u01D3\x03\x02\x02\x02\u0CD0\u0CD3\t\n\x02" +
		"\x02\u0CD1\u0CD3\x05\u03DA\u01EE\x02\u0CD2\u0CD0\x03\x02\x02\x02\u0CD2" +
		"\u0CD1\x03\x02\x02\x02\u0CD3\u01D5\x03\x02\x02\x02\u0CD4\u0CE1\x05\u0274" +
		"\u013B\x02\u0CD5\u0CDA\x05\u03DA\u01EE\x02\u0CD6\u0CD8\x07\u011E\x02\x02" +
		"\u0CD7\u0CD9\x05\u0274\u013B\x02\u0CD8\u0CD7\x03\x02\x02\x02\u0CD8\u0CD9" +
		"\x03\x02\x02\x02\u0CD9\u0CDB\x03\x02\x02\x02\u0CDA\u0CD6\x03\x02\x02\x02" +
		"\u0CDA\u0CDB\x03\x02\x02\x02\u0CDB\u0CE1\x03\x02\x02\x02\u0CDC\u0CDE\x07" +
		"\u011E\x02\x02\u0CDD\u0CDF\x05\u0274\u013B\x02\u0CDE\u0CDD\x03\x02\x02" +
		"\x02\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CE1\x03\x02\x02\x02\u0CE0\u0CD4" +
		"\x03\x02\x02\x02\u0CE0\u0CD5\x03\x02\x02\x02\u0CE0\u0CDC\x03\x02\x02\x02" +
		"\u0CE1\u01D7\x03\x02\x02\x02\u0CE2\u0CE4\x07i\x02\x02\u0CE3\u0CE5\x07" +
		"\u01A7\x02\x02\u0CE4\u0CE3\x03\x02\x02\x02\u0CE4\u0CE5\x03\x02\x02\x02" +
		"\u0CE5\u0CED\x03\x02\x02\x02\u0CE6\u0CE8\x07l\x02\x02\u0CE7\u0CE9\x07" +
		"\u01A6\x02\x02\u0CE8\u0CE7\x03\x02\x02\x02\u0CE8\u0CE9\x03\x02\x02\x02" +
		"\u0CE9\u0CED\x03\x02\x02\x02\u0CEA\u0CED\x07m\x02\x02\u0CEB\u0CED\x07" +
		"\u0187\x02\x02\u0CEC\u0CE2\x03\x02\x02\x02\u0CEC\u0CE6\x03\x02\x02\x02" +
		"\u0CEC\u0CEA\x03\x02\x02\x02\u0CEC\u0CEB\x03\x02\x02\x02\u0CED\u01D9\x03" +
		"\x02\x02\x02\u0CEE\u0CEF\x05\u03D8\u01ED\x02\u0CEF\u01DB\x03\x02\x02\x02" +
		"\u0CF0\u0CF1\x07\u01C9\x02\x02\u0CF1\u01DD\x03\x02\x02\x02\u0CF2\u0CF4" +
		"\x07!\x02\x02\u0CF3\u0CF2\x03\x02\x02\x02\u0CF3\u0CF4\x03\x02\x02\x02" +
		"\u0CF4\u0CF5\x03\x02\x02\x02\u0CF5\u0CFA\x07\x88\x02\x02\u0CF6\u0CF9\x05" +
		"J&\x02\u0CF7\u0CF9\x05L\'\x02\u0CF8\u0CF6\x03\x02\x02\x02\u0CF8\u0CF7" +
		"\x03\x02\x02\x02\u0CF9\u0CFC\x03\x02\x02\x02\u0CFA\u0CF8\x03\x02\x02\x02" +
		"\u0CFA\u0CFB\x03\x02\x02\x02\u0CFB\u01DF\x03\x02\x02\x02\u0CFC\u0CFA\x03" +
		"\x02\x02\x02\u0CFD\u0CFF\x07\u010B\x02\x02\u0CFE\u0CFD\x03\x02\x02\x02" +
		"\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D00\x03\x02\x02\x02\u0D00\u0D05\x07" +
		"\xA9\x02\x02\u0D01\u0D04\x05J&\x02\u0D02\u0D04\x05L\'\x02\u0D03\u0D01" +
		"\x03\x02\x02\x02\u0D03\u0D02\x03\x02\x02\x02\u0D04\u0D07\x03\x02\x02\x02" +
		"\u0D05\u0D03\x03\x02\x02\x02\u0D05\u0D06\x03\x02\x02\x02\u0D06\u01E1\x03" +
		"\x02\x02\x02\u0D07\u0D05\x03\x02\x02\x02\u0D08\u0D0A\x07\u010B\x02\x02" +
		"\u0D09\u0D08\x03\x02\x02\x02\u0D09\u0D0A\x03\x02\x02\x02\u0D0A\u0D0B\x03" +
		"\x02\x02\x02\u0D0B\u0D0C\x07\u0163\x02\x02\u0D0C\u0D11\x07\xA6\x02\x02" +
		"\u0D0D\u0D10\x05J&\x02\u0D0E\u0D10\x05L\'\x02\u0D0F\u0D0D\x03\x02\x02" +
		"\x02\u0D0F\u0D0E\x03\x02\x02\x02\u0D10\u0D13\x03\x02\x02\x02\u0D11\u0D0F" +
		"\x03\x02\x02\x02\u0D11\u0D12\x03\x02\x02\x02\u0D12\u01E3\x03\x02\x02\x02" +
		"\u0D13\u0D11\x03\x02\x02\x02\u0D14\u0D16\x07\u010B\x02\x02\u0D15\u0D14" +
		"\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D17\x03\x02\x02\x02" +
		"\u0D17\u0D1C\x07\u0115\x02\x02\u0D18\u0D1B\x05J&\x02\u0D19\u0D1B\x05L" +
		"\'\x02\u0D1A\u0D18\x03\x02\x02\x02\u0D1A\u0D19\x03\x02\x02\x02\u0D1B\u0D1E" +
		"\x03\x02\x02\x02\u0D1C\u0D1A\x03\x02\x02\x02\u0D1C\u0D1D\x03\x02\x02\x02" +
		"\u0D1D\u01E5\x03\x02\x02\x02\u0D1E\u0D1C\x03\x02\x02\x02\u0D1F\u0D21\x07" +
		"!\x02\x02\u0D20\u0D1F\x03\x02\x02\x02\u0D20\u0D21\x03\x02\x02\x02\u0D21" +
		"\u0D22\x03\x02\x02\x02\u0D22\u0D27\t\x1C\x02\x02\u0D23\u0D26\x05J&\x02" +
		"\u0D24\u0D26\x05L\'\x02\u0D25\u0D23\x03\x02\x02\x02\u0D25\u0D24\x03\x02" +
		"\x02\x02\u0D26\u0D29\x03\x02\x02\x02\u0D27\u0D25\x03\x02\x02\x02\u0D27" +
		"\u0D28\x03\x02\x02\x02\u0D28\u01E7\x03\x02\x02\x02\u0D29\u0D27\x03\x02" +
		"\x02\x02\u0D2A\u0D2C\x07\xDD\x02\x02\u0D2B\u0D2D\x07\xE3\x02\x02\u0D2C" +
		"\u0D2B\x03\x02\x02\x02\u0D2C\u0D2D\x03\x02\x02\x02\u0D2D\u0D32\x03\x02" +
		"\x02\x02\u0D2E\u0D31\x05J&\x02\u0D2F\u0D31\x05L\'\x02\u0D30\u0D2E\x03" +
		"\x02\x02\x02\u0D30\u0D2F\x03\x02\x02\x02\u0D31\u0D34\x03\x02\x02\x02\u0D32" +
		"\u0D30\x03\x02\x02\x02\u0D32\u0D33\x03\x02\x02\x02\u0D33\u01E9\x03\x02" +
		"\x02\x02\u0D34\u0D32\x03\x02\x02\x02\u0D35\u0D36\x07\xB2\x02\x02\u0D36" +
		"\u0D37\x07\u0157\x02\x02\u0D37\u0D3B\x07\u01C3\x02\x02\u0D38\u0D3A\x05" +
		"T+\x02\u0D39\u0D38\x03\x02\x02\x02\u0D3A\u0D3D\x03\x02\x02\x02\u0D3B\u0D39" +
		"\x03\x02\x02\x02\u0D3B\u0D3C\x03\x02\x02\x02\u0D3C\u0D42\x03\x02\x02\x02" +
		"\u0D3D\u0D3B\x03\x02\x02\x02\u0D3E\u0D41\x05\u01EC\xF7\x02\u0D3F\u0D41" +
		"\x05\u01EE\xF8\x02\u0D40\u0D3E\x03\x02\x02\x02\u0D40\u0D3F\x03\x02\x02" +
		"\x02\u0D41\u0D44\x03\x02\x02\x02\u0D42\u0D40\x03\x02\x02\x02\u0D42\u0D43" +
		"\x03\x02\x02\x02\u0D43\u01EB\x03\x02\x02\x02\u0D44\u0D42\x03\x02\x02\x02" +
		"\u0D45\u0D49\x05\u01FC\xFF\x02\u0D46\u0D48\x05\u0208\u0105\x02\u0D47\u0D46" +
		"\x03\x02\x02\x02\u0D48\u0D4B\x03\x02\x02\x02\u0D49\u0D47\x03\x02\x02\x02" +
		"\u0D49\u0D4A\x03\x02\x02\x02\u0D4A\u01ED\x03\x02\x02\x02\u0D4B\u0D49\x03" +
		"\x02\x02\x02\u0D4C\u0D50\x05\u01FE\u0100\x02\u0D4D\u0D4F\x05\u0208\u0105" +
		"\x02\u0D4E\u0D4D\x03\x02\x02\x02\u0D4F\u0D52\x03\x02\x02\x02\u0D50\u0D4E" +
		"\x03\x02\x02\x02\u0D50\u0D51\x03\x02\x02\x02\u0D51\u01EF\x03\x02\x02\x02" +
		"\u0D52\u0D50\x03\x02\x02\x02\u0D53\u0D54\x07\u01A3\x02\x02\u0D54\u0D55" +
		"\x07\u0157\x02\x02\u0D55\u0D59\x07\u01C3\x02\x02\u0D56\u0D58\x05T+\x02" +
		"\u0D57\u0D56\x03\x02\x02\x02\u0D58\u0D5B\x03\x02\x02\x02\u0D59\u0D57\x03" +
		"\x02\x02\x02\u0D59\u0D5A\x03\x02\x02\x02\u0D5A\u0D5F\x03\x02\x02\x02\u0D5B" +
		"\u0D59\x03\x02\x02\x02\u0D5C\u0D5E\x05\u01F2\xFA\x02\u0D5D\u0D5C\x03\x02" +
		"\x02\x02\u0D5E\u0D61\x03\x02\x02\x02\u0D5F\u0D5D\x03\x02\x02\x02\u0D5F" +
		"\u0D60\x03\x02\x02\x02\u0D60\u01F1\x03\x02\x02\x02\u0D61\u0D5F\x03\x02" +
		"\x02\x02\u0D62\u0D65\x05\u0208\u0105\x02\u0D63\u0D65\x05L\'\x02\u0D64" +
		"\u0D62\x03\x02\x02\x02\u0D64\u0D63\x03\x02\x02\x02\u0D65\u01F3\x03\x02" +
		"\x02\x02\u0D66\u0D67\x07\xEF\x02\x02\u0D67\u0D68\x07\u0157\x02\x02\u0D68" +
		"\u0D6C\x07\u01C3\x02\x02\u0D69\u0D6B\x05T+\x02\u0D6A\u0D69\x03\x02\x02" +
		"\x02\u0D6B\u0D6E\x03\x02\x02\x02\u0D6C\u0D6A\x03\x02\x02\x02\u0D6C\u0D6D" +
		"\x03\x02\x02\x02\u0D6D\u0D72\x03\x02\x02\x02\u0D6E\u0D6C\x03\x02\x02\x02" +
		"\u0D6F\u0D71\x05\u0208\u0105\x02\u0D70\u0D6F\x03\x02\x02\x02\u0D71\u0D74" +
		"\x03\x02\x02\x02\u0D72\u0D70\x03\x02\x02\x02\u0D72\u0D73\x03\x02\x02\x02" +
		"\u0D73\u01F5\x03\x02\x02\x02\u0D74\u0D72\x03\x02\x02\x02\u0D75\u0D76\x07" +
		"\u0141\x02\x02\u0D76\u0D77\x07\u0157\x02\x02\u0D77\u0D7B\x07\u01C3\x02" +
		"\x02\u0D78\u0D7A\x05T+\x02\u0D79\u0D78\x03\x02\x02\x02\u0D7A\u0D7D\x03" +
		"\x02\x02\x02\u0D7B\u0D79\x03\x02\x02\x02\u0D7B\u0D7C\x03\x02\x02\x02\u0D7C" +
		"\u0D81\x03\x02\x02\x02\u0D7D\u0D7B\x03\x02\x02\x02\u0D7E\u0D80\x05\u01F8" +
		"\xFD\x02\u0D7F\u0D7E\x03\x02\x02\x02\u0D80\u0D83\x03\x02\x02\x02\u0D81" +
		"\u0D7F\x03\x02\x02\x02\u0D81\u0D82\x03\x02\x02\x02\u0D82\u01F7\x03\x02" +
		"\x02\x02\u0D83\u0D81\x03\x02\x02\x02\u0D84\u0D88\x05\u0200\u0101\x02\u0D85" +
		"\u0D87\x05\u023A\u011E\x02\u0D86\u0D85\x03\x02\x02\x02\u0D87\u0D8A\x03" +
		"\x02\x02\x02\u0D88\u0D86\x03\x02\x02\x02\u0D88\u0D89\x03\x02\x02\x02\u0D89" +
		"\u01F9\x03\x02\x02\x02\u0D8A\u0D88\x03\x02\x02\x02\u0D8B\u0D8C\x07\u0154" +
		"\x02\x02\u0D8C\u0D8D\x07\u0157\x02\x02\u0D8D\u0D91\x07\u01C3\x02\x02\u0D8E" +
		"\u0D90\x05T+\x02\u0D8F\u0D8E\x03\x02\x02\x02\u0D90\u0D93\x03\x02\x02\x02" +
		"\u0D91\u0D8F\x03\x02\x02\x02\u0D91\u0D92\x03\x02\x02\x02\u0D92\u0D97\x03" +
		"\x02\x02\x02\u0D93\u0D91\x03\x02\x02\x02\u0D94\u0D96\x05\u02BA\u015E\x02" +
		"\u0D95\u0D94\x03\x02\x02\x02\u0D96\u0D99\x03\x02\x02\x02\u0D97\u0D95\x03" +
		"\x02\x02\x02\u0D97\u0D98\x03\x02\x02\x02\u0D98\u01FB\x03\x02\x02\x02\u0D99" +
		"\u0D97\x03\x02\x02\x02\u0D9A\u0D9B\x07\xB1\x02\x02\u0D9B\u0D9F\x05\u0398" +
		"\u01CD\x02\u0D9C\u0D9E\x05\u0202\u0102\x02\u0D9D\u0D9C\x03\x02\x02\x02" +
		"\u0D9E\u0DA1\x03\x02\x02\x02\u0D9F\u0D9D\x03\x02\x02\x02\u0D9F\u0DA0\x03" +
		"\x02\x02\x02\u0DA0\u0DA2\x03\x02\x02\x02\u0DA1\u0D9F\x03\x02\x02\x02\u0DA2" +
		"\u0DA6\x07\u01C3\x02\x02\u0DA3\u0DA5\x05T+\x02\u0DA4\u0DA3\x03\x02\x02" +
		"\x02\u0DA5\u0DA8\x03\x02\x02\x02\u0DA6\u0DA4\x03\x02\x02\x02\u0DA6\u0DA7" +
		"\x03\x02\x02\x02\u0DA7\u01FD\x03\x02\x02\x02\u0DA8\u0DA6\x03";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\x02\u0DA9\u0DAA\x07\u0155\x02\x02\u0DAA\u0DAE\x05\u0398\u01CD" +
		"\x02\u0DAB\u0DAD\x05\u0296\u014C\x02\u0DAC\u0DAB\x03\x02\x02\x02\u0DAD" +
		"\u0DB0\x03\x02\x02\x02\u0DAE\u0DAC\x03\x02\x02\x02\u0DAE\u0DAF\x03\x02" +
		"\x02\x02\u0DAF\u0DB1\x03\x02\x02\x02\u0DB0\u0DAE\x03\x02\x02\x02\u0DB1" +
		"\u0DB5\x07\u01C3\x02\x02\u0DB2\u0DB4\x05T+\x02\u0DB3\u0DB2\x03\x02\x02" +
		"\x02\u0DB4\u0DB7\x03\x02\x02\x02\u0DB5\u0DB3\x03\x02\x02\x02\u0DB5\u0DB6" +
		"\x03\x02\x02\x02\u0DB6\u01FF\x03\x02\x02\x02\u0DB7\u0DB5\x03\x02\x02\x02" +
		"\u0DB8\u0DB9\x07\u0131\x02\x02\u0DB9\u0DBD\x05\u029A\u014E\x02\u0DBA\u0DBC" +
		"\x05\u0276\u013C\x02\u0DBB\u0DBA\x03\x02\x02\x02\u0DBC\u0DBF\x03\x02\x02" +
		"\x02\u0DBD\u0DBB\x03\x02\x02\x02\u0DBD\u0DBE\x03\x02\x02\x02\u0DBE\u0DC0" +
		"\x03\x02\x02\x02\u0DBF\u0DBD\x03\x02\x02\x02\u0DC0\u0DC4\x07\u01C3\x02" +
		"\x02\u0DC1\u0DC3\x05T+\x02\u0DC2\u0DC1\x03\x02\x02\x02\u0DC3\u0DC6\x03" +
		"\x02\x02\x02\u0DC4\u0DC2\x03\x02\x02\x02\u0DC4\u0DC5\x03\x02\x02\x02\u0DC5" +
		"\u0201\x03\x02\x02\x02\u0DC6\u0DC4\x03\x02\x02\x02\u0DC7\u0DD6\x05\u0204" +
		"\u0103\x02\u0DC8\u0DD6\x05\u0206\u0104\x02\u0DC9\u0DD6\x05\u038C\u01C7" +
		"\x02\u0DCA\u0DD6\x05\u02B0\u0159\x02\u0DCB\u0DD6\x05\u02AE\u0158\x02\u0DCC" +
		"\u0DD6\x05\u02AA\u0156\x02\u0DCD\u0DD6\x05\u02A6\u0154\x02\u0DCE\u0DD6" +
		"\x05\u029C\u014F\x02\u0DCF\u0DD6\x05\u0298\u014D\x02\u0DD0\u0DD6\x05\u038A" +
		"\u01C6\x02\u0DD1\u0DD6\x05\u0378\u01BD\x02\u0DD2\u0DD6\x05\u036E\u01B8" +
		"\x02\u0DD3\u0DD6\x05\u0370\u01B9\x02\u0DD4\u0DD6\x05\u036A\u01B6\x02\u0DD5" +
		"\u0DC7\x03\x02\x02\x02\u0DD5\u0DC8\x03\x02\x02\x02\u0DD5\u0DC9\x03\x02" +
		"\x02\x02\u0DD5\u0DCA\x03\x02\x02\x02\u0DD5\u0DCB\x03\x02\x02\x02\u0DD5" +
		"\u0DCC\x03\x02\x02\x02\u0DD5\u0DCD\x03\x02\x02\x02\u0DD5\u0DCE\x03\x02" +
		"\x02\x02\u0DD5\u0DCF\x03\x02\x02\x02\u0DD5\u0DD0\x03\x02\x02\x02\u0DD5" +
		"\u0DD1\x03\x02\x02\x02\u0DD5\u0DD2\x03\x02\x02\x02\u0DD5\u0DD3\x03\x02" +
		"\x02\x02\u0DD5\u0DD4\x03\x02\x02\x02\u0DD6\u0203\x03\x02\x02\x02\u0DD7" +
		"\u0DD9\x07\xDE\x02\x02\u0DD8\u0DD7\x03\x02\x02\x02\u0DD8\u0DD9\x03\x02" +
		"\x02\x02\u0DD9\u0DDA\x03\x02\x02\x02\u0DDA\u0DDB\x07\xAE\x02\x02\u0DDB" +
		"\u0205\x03\x02\x02\x02\u0DDC\u0DDE\x07\xDE\x02\x02\u0DDD\u0DDC\x03\x02" +
		"\x02\x02\u0DDD\u0DDE\x03\x02\x02\x02\u0DDE\u0DDF\x03\x02\x02\x02\u0DDF" +
		"\u0DE0\x07\xC4\x02\x02\u0DE0\u0207\x03\x02\x02\x02\u0DE1\u0DE4\x05\u020A" +
		"\u0106\x02\u0DE2\u0DE5\x05\u0294\u014B\x02\u0DE3\u0DE5\x07\xB5\x02\x02" +
		"\u0DE4\u0DE2\x03\x02\x02\x02\u0DE4\u0DE3\x03\x02\x02\x02\u0DE4\u0DE5\x03" +
		"\x02\x02\x02\u0DE5\u0DE8\x03\x02\x02\x02\u0DE6\u0DE7\x07\u0136\x02\x02" +
		"\u0DE7\u0DE9\x05\u0292\u014A\x02\u0DE8\u0DE6\x03\x02\x02\x02\u0DE8\u0DE9" +
		"\x03\x02\x02\x02\u0DE9\u0DED\x03\x02\x02\x02\u0DEA\u0DEC\x05\u020C\u0107" +
		"\x02\u0DEB\u0DEA\x03\x02\x02\x02\u0DEC\u0DEF\x03\x02\x02\x02\u0DED\u0DEB" +
		"\x03\x02\x02\x02\u0DED\u0DEE\x03\x02\x02\x02\u0DEE\u0DF0\x03\x02\x02\x02" +
		"\u0DEF\u0DED\x03\x02\x02\x02\u0DF0\u0DF4\x07\u01C3\x02\x02\u0DF1\u0DF3" +
		"\x05T+\x02\u0DF2\u0DF1\x03\x02\x02\x02\u0DF3\u0DF6\x03\x02\x02\x02\u0DF4" +
		"\u0DF2\x03\x02\x02\x02\u0DF4\u0DF5\x03\x02\x02\x02\u0DF5\u0209\x03\x02" +
		"\x02\x02\u0DF6\u0DF4\x03\x02\x02\x02\u0DF7\u0DF8\t\n\x02\x02\u0DF8\u020B" +
		"\x03\x02\x02\x02\u0DF9\u0E05\x05\u0204\u0103\x02\u0DFA\u0E05\x05\u0206" +
		"\u0104\x02\u0DFB\u0E05\x05\u028E\u0148\x02\u0DFC\u0E05\x05\u028A\u0146" +
		"\x02\u0DFD\u0E05\x05\u0250\u0129\x02\u0DFE\u0E05\x05\u0228\u0115\x02\u0DFF" +
		"\u0E05\x05\u020E\u0108\x02\u0E00\u0E05\x05\u0210\u0109\x02\u0E01\u0E05" +
		"\x05\u0212\u010A\x02\u0E02\u0E05\x05\u021A\u010E\x02\u0E03\u0E05\x05\u0214" +
		"\u010B\x02\u0E04\u0DF9\x03\x02\x02\x02\u0E04\u0DFA\x03\x02\x02\x02\u0E04" +
		"\u0DFB\x03\x02\x02\x02\u0E04\u0DFC\x03\x02\x02\x02\u0E04\u0DFD\x03\x02" +
		"\x02\x02\u0E04\u0DFE\x03\x02\x02\x02\u0E04\u0DFF\x03\x02\x02\x02\u0E04" +
		"\u0E00\x03\x02\x02\x02\u0E04\u0E01\x03\x02\x02\x02\u0E04\u0E02\x03\x02" +
		"\x02\x02\u0E04\u0E03\x03\x02\x02\x02\u0E05\u020D\x03\x02\x02\x02\u0E06" +
		"\u0E08\t\x1D\x02\x02\u0E07\u0E09\t\x1E\x02\x02\u0E08\u0E07\x03\x02\x02" +
		"\x02\u0E08\u0E09\x03\x02\x02\x02\u0E09\u020F\x03\x02\x02\x02\u0E0A\u0E0C" +
		"\t\x1F\x02\x02\u0E0B\u0E0D\x07\u014F\x02\x02\u0E0C\u0E0B\x03\x02\x02\x02" +
		"\u0E0C\u0E0D\x03\x02\x02\x02\u0E0D\u0211\x03\x02\x02\x02\u0E0E\u0E10\x07" +
		".\x02\x02\u0E0F\u0E11\x07\u019F\x02\x02\u0E10\u0E0F\x03\x02\x02\x02\u0E10" +
		"\u0E11\x03\x02\x02\x02\u0E11\u0E12\x03\x02\x02\x02\u0E12\u0E13\x07\u01A8" +
		"\x02\x02\u0E13\u0213\x03\x02\x02\x02\u0E14\u0E15\x07\u013E\x02\x02\u0E15" +
		"\u0E18\x05\u0216\u010C\x02\u0E16\u0E17\t\x12\x02\x02\u0E17\u0E19\x05\u0218" +
		"\u010D\x02\u0E18\u0E16\x03\x02\x02\x02\u0E18\u0E19\x03\x02\x02\x02\u0E19" +
		"\u0215\x03\x02\x02\x02\u0E1A\u0E1B\x05\u0338\u019D\x02\u0E1B\u0217\x03" +
		"\x02\x02\x02\u0E1C\u0E1D\x05\u0338\u019D\x02\u0E1D\u0219\x03\x02\x02\x02" +
		"\u0E1E\u0E20\x07\u019B\x02\x02\u0E1F\u0E21\x07\xDE\x02\x02\u0E20\u0E1F" +
		"\x03\x02\x02\x02\u0E20\u0E21\x03\x02\x02\x02\u0E21\u0E27\x03\x02\x02\x02" +
		"\u0E22\u0E24\x07\u019C\x02\x02\u0E23\u0E25\x07\x18\x02\x02\u0E24\u0E23" +
		"\x03\x02\x02\x02\u0E24\u0E25\x03\x02\x02\x02\u0E25\u0E27\x03\x02\x02\x02" +
		"\u0E26\u0E1E\x03\x02\x02\x02\u0E26\u0E22\x03\x02\x02\x02\u0E27\u0E29\x03" +
		"\x02\x02\x02\u0E28\u0E2A\x05\u021C\u010F\x02\u0E29\u0E28\x03\x02\x02\x02" +
		"\u0E2A\u0E2B\x03\x02\x02\x02\u0E2B\u0E29\x03\x02\x02\x02\u0E2B\u0E2C\x03" +
		"\x02\x02\x02\u0E2C\u021B\x03\x02\x02\x02\u0E2D\u0E2F\x05\u021E\u0110\x02" +
		"\u0E2E\u0E30\x05\u0220\u0111\x02\u0E2F\u0E2E\x03\x02\x02\x02\u0E2F\u0E30" +
		"\x03\x02\x02\x02\u0E30\u021D\x03\x02\x02\x02\u0E31\u0E37\x05\u0226\u0114" +
		"\x02\u0E32\u0E33\x07\u0138\x02\x02\u0E33\u0E37\x05\u0224\u0113\x02\u0E34" +
		"\u0E35\x07\xAE\x02\x02\u0E35\u0E37\x05\u0222\u0112\x02\u0E36\u0E31\x03" +
		"\x02\x02\x02\u0E36\u0E32\x03\x02\x02\x02\u0E36\u0E34\x03\x02\x02\x02\u0E37" +
		"\u021F\x03\x02\x02\x02\u0E38\u0E39\t\x12\x02\x02\u0E39\u0E3A\x05\u021E" +
		"\u0110\x02\u0E3A\u0221\x03\x02\x02\x02\u0E3B\u0E3C\x07\u01C9\x02\x02\u0E3C" +
		"\u0223\x03\x02\x02\x02\u0E3D\u0E3E\x05\u03D8\u01ED\x02\u0E3E\u0225\x03" +
		"\x02\x02\x02\u0E3F\u0E44\x07\x03\x02\x02\u0E40\u0E44\t\f\x02\x02\u0E41" +
		"\u0E44\x05\"\x12\x02\u0E42\u0E44\x07\u01C9\x02\x02\u0E43\u0E3F\x03\x02" +
		"\x02\x02\u0E43\u0E40\x03\x02\x02\x02\u0E43\u0E41\x03\x02\x02\x02\u0E43" +
		"\u0E42\x03\x02\x02\x02\u0E44\u0227\x03\x02\x02\x02\u0E45\u0E46\x07\u0107" +
		"\x02\x02\u0E46\u0E4A\x05\u0232\u011A\x02\u0E47\u0E49\x05\u022E\u0118\x02" +
		"\u0E48\u0E47\x03\x02\x02\x02\u0E49\u0E4C\x03\x02\x02\x02\u0E4A\u0E48\x03" +
		"\x02\x02\x02\u0E4A\u0E4B\x03\x02\x02\x02\u0E4B\u0E4E\x03\x02\x02\x02\u0E4C" +
		"\u0E4A\x03\x02\x02\x02\u0E4D\u0E4F\x05\u022A\u0116\x02\u0E4E\u0E4D\x03" +
		"\x02\x02\x02\u0E4E\u0E4F\x03\x02\x02\x02\u0E4F\u0229\x03\x02\x02\x02\u0E50" +
		"\u0E52\x07\xD3\x02\x02\u0E51\u0E53\x074\x02\x02\u0E52\u0E51\x03\x02\x02" +
		"\x02\u0E52\u0E53\x03\x02\x02\x02\u0E53\u0E55\x03\x02\x02\x02\u0E54\u0E56" +
		"\x05\u022C\u0117\x02\u0E55\u0E54\x03\x02\x02\x02\u0E56\u0E57\x03\x02\x02" +
		"\x02\u0E57\u0E55\x03\x02\x02\x02\u0E57\u0E58\x03\x02\x02\x02\u0E58\u022B" +
		"\x03\x02\x02\x02\u0E59\u0E5A\x07\u01C9\x02\x02\u0E5A\u022D\x03\x02\x02" +
		"\x02\u0E5B\u0E5D\t\r\x02\x02\u0E5C\u0E5E\x07\xE3\x02\x02\u0E5D\u0E5C\x03" +
		"\x02\x02\x02\u0E5D\u0E5E\x03\x02\x02\x02\u0E5E\u0E60\x03\x02\x02\x02\u0E5F" +
		"\u0E61\x07\xDE\x02\x02\u0E60\u0E5F\x03\x02\x02\x02\u0E60\u0E61\x03\x02" +
		"\x02\x02\u0E61\u0E63\x03\x02\x02\x02\u0E62\u0E64\x05\u0230\u0119\x02\u0E63" +
		"\u0E62\x03\x02\x02\x02\u0E64\u0E65\x03\x02\x02\x02\u0E65\u0E63\x03\x02" +
		"\x02\x02\u0E65\u0E66\x03\x02\x02\x02\u0E66\u022F\x03\x02\x02\x02\u0E67" +
		"\u0E68\x05\u0338\u019D\x02\u0E68\u0231\x03\x02\x02\x02\u0E69\u0E6B\x05" +
		"\u0234\u011B\x02\u0E6A\u0E6C\x07\u0188\x02\x02\u0E6B\u0E6A\x03\x02\x02" +
		"\x02\u0E6B\u0E6C\x03\x02\x02\x02\u0E6C\u0E7A\x03\x02\x02\x02\u0E6D\u0E6E" +
		"\x05\u0236\u011C\x02\u0E6E\u0E6F\x07\u0189\x02\x02\u0E6F\u0E71\x05\u0238" +
		"\u011D\x02\u0E70\u0E72\x07\u0188\x02\x02\u0E71\u0E70\x03\x02\x02\x02\u0E71" +
		"\u0E72\x03\x02\x02\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73\u0E75\x07x\x02" +
		"\x02\u0E74\u0E76\x07\u010B\x02\x02\u0E75\u0E74\x03\x02\x02\x02\u0E75\u0E76" +
		"\x03\x02\x02\x02\u0E76\u0E77\x03\x02\x02\x02\u0E77\u0E78\x05\u02B4\u015B" +
		"\x02\u0E78\u0E7A\x03\x02\x02\x02\u0E79\u0E69\x03\x02\x02\x02\u0E79\u0E6D" +
		"\x03\x02\x02\x02\u0E7A\u0233\x03\x02\x02\x02\u0E7B\u0E7C\t\n\x02\x02\u0E7C" +
		"\u0235\x03\x02\x02\x02\u0E7D\u0E7E\t\n\x02\x02\u0E7E\u0237\x03\x02\x02" +
		"\x02\u0E7F\u0E80\t\n\x02\x02\u0E80\u0239\x03\x02\x02\x02\u0E81\u0E83\x05" +
		"\u020A\u0106\x02\u0E82\u0E84\x05\u0294\u014B\x02\u0E83\u0E82\x03\x02\x02" +
		"\x02\u0E83\u0E84\x03\x02\x02\x02\u0E84\u0E88\x03\x02\x02\x02\u0E85\u0E87" +
		"\x05\u023C\u011F\x02\u0E86\u0E85\x03\x02\x02\x02\u0E87\u0E8A\x03\x02\x02" +
		"\x02\u0E88\u0E86\x03\x02\x02\x02\u0E88\u0E89\x03\x02\x02\x02\u0E89\u0E8B" +
		"\x03\x02\x02\x02\u0E8A\u0E88\x03\x02\x02\x02\u0E8B\u0E8F\x07\u01C3\x02" +
		"\x02\u0E8C\u0E8E\x05T+\x02\u0E8D\u0E8C\x03\x02\x02\x02\u0E8E\u0E91\x03" +
		"\x02\x02\x02\u0E8F\u0E8D\x03\x02\x02\x02\u0E8F\u0E90\x03\x02\x02\x02\u0E90" +
		"\u023B\x03\x02\x02\x02\u0E91\u0E8F\x03\x02\x02\x02\u0E92\u0E9E\x05\u024E" +
		"\u0128\x02\u0E93\u0E9E\x05\u024C\u0127\x02\u0E94\u0E9E\x05\u024A\u0126" +
		"\x02\u0E95\u0E9E\x05\u0248\u0125\x02\u0E96\u0E9E\x05\u0212\u010A\x02\u0E97" +
		"\u0E9E\x05\u0246\u0124\x02\u0E98\u0E9E\x05\u0244\u0123\x02\u0E99\u0E9E" +
		"\x05\u0210\u0109\x02\u0E9A\u0E9E\x05\u028E\u0148\x02\u0E9B\u0E9E\x05\u0250" +
		"\u0129\x02\u0E9C\u0E9E\x05\u023E\u0120\x02\u0E9D\u0E92\x03\x02\x02\x02" +
		"\u0E9D\u0E93\x03\x02\x02\x02\u0E9D\u0E94\x03\x02\x02\x02\u0E9D\u0E95\x03" +
		"\x02\x02\x02\u0E9D\u0E96\x03\x02\x02\x02\u0E9D\u0E97\x03\x02\x02\x02\u0E9D" +
		"\u0E98\x03\x02\x02\x02\u0E9D\u0E99\x03\x02\x02\x02\u0E9D\u0E9A\x03\x02" +
		"\x02\x02\u0E9D\u0E9B\x03\x02\x02\x02\u0E9D\u0E9C\x03\x02\x02\x02\u0E9E" +
		"\u023D\x03\x02\x02\x02\u0E9F\u0EA3\x05\u0242\u0122\x02\u0EA0\u0EA3\x05" +
		"\u0252\u012A\x02\u0EA1\u0EA3\x05\u0240\u0121\x02\u0EA2\u0E9F\x03\x02\x02" +
		"\x02\u0EA2\u0EA0\x03\x02\x02\x02\u0EA2\u0EA1\x03\x02\x02\x02\u0EA3\u023F" +
		"\x03\x02\x02\x02\u0EA4\u0EA6\x07\u019B\x02\x02\u0EA5\u0EA7\x07\xDE\x02" +
		"\x02\u0EA6\u0EA5\x03\x02\x02\x02\u0EA6\u0EA7\x03\x02\x02\x02\u0EA7\u0EA8" +
		"\x03\x02\x02\x02\u0EA8\u0EA9\x05\u0226\u0114\x02\u0EA9\u0241\x03\x02\x02" +
		"\x02\u0EAA\u0EAC\x07\u0166\x02\x02\u0EAB\u0EAD\x07\xDE\x02\x02\u0EAC\u0EAB" +
		"\x03\x02\x02\x02\u0EAC\u0EAD\x03\x02\x02\x02\u0EAD\u0EAE\x03\x02\x02\x02" +
		"\u0EAE\u0EAF\x05\u025A\u012E\x02\u0EAF\u0243\x03\x02\x02\x02\u0EB0\u0EB2" +
		"\x07\xC7\x02\x02\u0EB1\u0EB3\x07\xD4\x02\x02\u0EB2\u0EB1\x03\x02\x02\x02" +
		"\u0EB2\u0EB3\x03\x02\x02\x02\u0EB3\u0245\x03\x02\x02\x02\u0EB4\u0EB6\x07" +
		"C\x02\x02\u0EB5\u0EB7\x07\u0103\x02\x02\u0EB6\u0EB5\x03\x02\x02\x02\u0EB6" +
		"\u0EB7\x03\x02\x02\x02\u0EB7\u0EB9\x03\x02\x02\x02\u0EB8\u0EBA\x07\xDE" +
		"\x02\x02\u0EB9\u0EB8\x03\x02\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02\u0EBA" +
		"\u0EBB\x03\x02\x02\x02\u0EBB\u0EBC\x05\u025C\u012F\x02\u0EBC\u0247\x03" +
		"\x02\x02\x02\u0EBD\u0EBF\x07\u0198\x02\x02\u0EBE\u0EC0\x07\xDE\x02\x02" +
		"\u0EBF\u0EBE\x03\x02\x02\x02\u0EBF\u0EC0\x03\x02\x02\x02\u0EC0\u0EC2\x03" +
		"\x02\x02\x02\u0EC1\u0EBD\x03\x02\x02\x02\u0EC1\u0EC2\x03\x02\x02\x02\u0EC2" +
		"\u0EC3\x03\x02\x02\x02\u0EC3\u0EC4\x07~\x02\x02\u0EC4\u0249\x03\x02\x02" +
		"\x02\u0EC5\u0EC7\x07\u018D\x02\x02\u0EC6\u0EC8\x07\xDE\x02\x02\u0EC7\u0EC6" +
		"\x03\x02\x02\x02\u0EC7\u0EC8\x03\x02\x02\x02\u0EC8\u0EC9\x03\x02\x02\x02" +
		"\u0EC9\u0ECA\x05\u025E\u0130\x02\u0ECA\u024B\x03\x02\x02\x02\u0ECB\u0ECC" +
		"\x07\u0100\x02\x02\u0ECC\u0ECE\x07\xC7\x02\x02\u0ECD\u0ECF\x07\xDE\x02" +
		"\x02\u0ECE\u0ECD\x03\x02\x02\x02\u0ECE\u0ECF\x03\x02\x02\x02\u0ECF\u0ED0" +
		"\x03\x02\x02\x02\u0ED0\u0ED1\x05\u0270\u0139\x02\u0ED1\u024D\x03\x02\x02" +
		"\x02\u0ED2\u0ED4\x07\xEC\x02\x02\u0ED3\u0ED5\x07\u0103\x02\x02\u0ED4\u0ED3" +
		"\x03\x02\x02\x02\u0ED4\u0ED5\x03\x02\x02\x02\u0ED5\u0ED7\x03\x02\x02\x02" +
		"\u0ED6\u0ED8\x07\xDE\x02\x02\u0ED7\u0ED6\x03\x02\x02\x02\u0ED7\u0ED8\x03" +
		"\x02\x02\x02\u0ED8\u0ED9\x03\x02\x02\x02\u0ED9\u0EDA\x05\u0272\u013A\x02" +
		"\u0EDA\u024F\x03\x02\x02\x02\u0EDB\u0EDD\x07\u0161\x02\x02\u0EDC\u0EDE" +
		"\x07\xDE\x02\x02\u0EDD\u0EDC\x03\x02\x02\x02\u0EDD\u0EDE\x03\x02\x02\x02" +
		"\u0EDE\u0EE0\x03\x02\x02\x02\u0EDF\u0EDB\x03\x02\x02\x02\u0EDF\u0EE0\x03" +
		"\x02\x02\x02\u0EE0\u0EE1\x03\x02\x02\x02\u0EE1\u0EE6\t \x02\x02\u0EE2" +
		"\u0EE4\x07\u015D\x02\x02\u0EE3\u0EE5\x07;\x02\x02\u0EE4\u0EE3\x03\x02" +
		"\x02\x02\u0EE4\u0EE5\x03\x02\x02\x02\u0EE5\u0EE7\x03\x02\x02\x02\u0EE6" +
		"\u0EE2\x03\x02\x02\x02\u0EE6\u0EE7\x03\x02\x02\x02\u0EE7\u0251\x03\x02" +
		"\x02\x02\u0EE8\u0EEA\x07\u0174\x02\x02\u0EE9\u0EEB\x05\u0258\u012D\x02" +
		"\u0EEA\u0EE9\x03\x02\x02\x02\u0EEB\u0EEC\x03\x02\x02\x02\u0EEC\u0EEA\x03" +
		"\x02\x02\x02\u0EEC\u0EED\x03\x02\x02\x02\u0EED\u0EEF\x03\x02\x02\x02\u0EEE" +
		"\u0EF0\x07\u0197\x02\x02\u0EEF\u0EEE\x03\x02\x02\x02\u0EEF\u0EF0\x03\x02" +
		"\x02\x02\u0EF0\u0EF4\x03\x02\x02\x02\u0EF1\u0EF3\x05\u0256\u012C\x02\u0EF2" +
		"\u0EF1\x03\x02\x02\x02\u0EF3\u0EF6\x03\x02\x02\x02\u0EF4\u0EF2\x03\x02" +
		"\x02\x02\u0EF4\u0EF5\x03\x02\x02\x02\u0EF5\u0EF8\x03\x02\x02\x02\u0EF6" +
		"\u0EF4\x03\x02\x02\x02\u0EF7\u0EE8\x03\x02\x02\x02\u0EF8\u0EF9\x03\x02" +
		"\x02\x02\u0EF9\u0EF7\x03\x02\x02\x02\u0EF9\u0EFA\x03\x02\x02\x02\u0EFA" +
		"\u0F00\x03\x02\x02\x02\u0EFB\u0EFD\x07\u0147\x02\x02\u0EFC\u0EFE\x07\u010B" +
		"\x02\x02\u0EFD\u0EFC\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02\x02\x02\u0EFE" +
		"\u0EFF\x03\x02\x02\x02\u0EFF\u0F01\x05\u0254\u012B\x02\u0F00\u0EFB\x03" +
		"\x02\x02\x02\u0F00\u0F01\x03\x02\x02\x02\u0F01\u0253\x03\x02\x02\x02\u0F02" +
		"\u0F03\t!\x02\x02\u0F03\u0255\x03\x02\x02\x02\u0F04\u0F05\x07\u01C9\x02" +
		"\x02\u0F05\u0257\x03\x02\x02\x02\u0F06\u0F07\x07\u01C9\x02\x02\u0F07\u0259" +
		"\x03\x02\x02\x02\u0F08\u0F09\x05\u0338\u019D\x02\u0F09\u025B\x03\x02\x02" +
		"\x02\u0F0A\u0F0B\t\n\x02\x02\u0F0B\u025D\x03\x02\x02\x02\u0F0C\u0F14\x05" +
		"\u026A\u0136\x02\u0F0D\u0F14\x05\u026C\u0137\x02\u0F0E\u0F14\x05\u0266" +
		"\u0134\x02\u0F0F\u0F14\x05\u0264\u0133\x02\u0F10\u0F14\x05\u0268\u0135" +
		"\x02\u0F11\u0F14\x05\u0260\u0131\x02\u0F12\u0F14\x05\u0262\u0132\x02\u0F13" +
		"\u0F0C\x03\x02\x02\x02\u0F13\u0F0D\x03\x02\x02\x02\u0F13\u0F0E\x03\x02" +
		"\x02\x02\u0F13\u0F0F\x03\x02\x02\x02\u0F13\u0F10\x03\x02\x02\x02\u0F13" +
		"\u0F11\x03\x02\x02\x02\u0F13\u0F12\x03\x02\x02\x02\u0F14\u025F\x03\x02" +
		"\x02\x02\u0F15\u0F16\x07\u0118\x02\x02\u0F16\u0F19\x07\xBC\x02\x02\u0F17" +
		"\u0F19\x07\u011C\x02\x02\u0F18\u0F15\x03\x02\x02\x02\u0F18\u0F17\x03\x02" +
		"\x02\x02\u0F19\u0261\x03\x02\x02\x02\u0F1A\u0F1B\x07\u0141\x02\x02\u0F1B" +
		"\u0F1E\x07\xBC\x02\x02\u0F1C\u0F1E\x07\u014D\x02\x02\u0F1D\u0F1A\x03\x02" +
		"\x02\x02\u0F1D\u0F1C\x03\x02\x02\x02\u0F1E\u0263\x03\x02\x02\x02\u0F1F" +
		"\u0F20\t\"\x02\x02\u0F20\u0265\x03\x02\x02\x02\u0F21\u0F22\x07\\\x02\x02" +
		"\u0F22\u0F25\x07\xC8\x02\x02\u0F23\u0F25\x07:\x02\x02\u0F24\u0F21\x03" +
		"\x02\x02\x02\u0F24\u0F23\x03\x02\x02\x02\u0F25\u0F26\x03\x02\x02\x02\u0F26" +
		"\u0F27\x05\u026E\u0138\x02\u0F27\u0267\x03\x02\x02\x02\u0F28\u0F29\x07" +
		"\\\x02\x02\u0F29\u0F2C\x07\xBC\x02\x02\u0F2A\u0F2C\x079\x02\x02\u0F2B" +
		"\u0F28\x03\x02\x02\x02\u0F2B\u0F2A\x03\x02\x02\x02\u0F2C\u0F2D\x03\x02" +
		"\x02\x02\u0F2D\u0F2E\x05\u026E\u0138\x02\u0F2E\u0269\x03\x02\x02\x02\u0F2F" +
		"\u0F30\x07\u0141\x02\x02\u0F30\u0F33\x07\xC8\x02\x02\u0F31\u0F33\x07\u014E" +
		"\x02\x02\u0F32\u0F2F\x03\x02\x02\x02\u0F32\u0F31\x03\x02\x02\x02\u0F33" +
		"\u026B\x03\x02\x02\x02\u0F34\u0F35\x07\u0118\x02\x02\u0F35\u0F38\x07\xC8" +
		"\x02\x02\u0F36\u0F38\x07\u011D\x02\x02\u0F37\u0F34\x03\x02\x02\x02\u0F37" +
		"\u0F36\x03\x02\x02\x02\u0F38\u026D\x03\x02\x02\x02\u0F39\u0F3A\t!\x02" +
		"\x02\u0F3A\u026F\x03\x02\x02\x02\u0F3B\u0F41\x05\u0274\u013B\x02\u0F3C" +
		"\u0F3D\x07\u011E\x02\x02\u0F3D\u0F41\x05\u0274\u013B\x02\u0F3E\u0F3F\x07" +
		"\u0100\x02\x02\u0F3F\u0F41\x07\u0118\x02\x02\u0F40\u0F3B\x03\x02\x02\x02" +
		"\u0F40\u0F3C\x03\x02\x02\x02\u0F40\u0F3E\x03\x02\x02\x02\u0F41\u0271\x03" +
		"\x02\x02\x02\u0F42\u0F48\x05\u0274\u013B\x02\u0F43\u0F45\x07\u010B\x02" +
		"\x02\u0F44\u0F43\x03\x02\x02\x02\u0F44\u0F45\x03\x02\x02\x02\u0F45\u0F46" +
		"\x03\x02\x02\x02\u0F46\u0F47\x07\u0100\x02\x02\u0F47\u0F49\x07\u0118\x02" +
		"\x02\u0F48\u0F44\x03\x02\x02\x02\u0F48\u0F49\x03\x02\x02\x02\u0F49\u0F4D" +
		"\x03\x02\x02\x02\u0F4A\u0F4B\x07\u011E\x02\x02\u0F4B\u0F4D\x05\u0274\u013B" +
		"\x02\u0F4C\u0F42\x03\x02\x02\x02\u0F4C\u0F4A\x03\x02\x02\x02\u0F4D\u0273" +
		"\x03\x02\x02\x02\u0F4E\u0F4F\t\n\x02\x02\u0F4F\u0275\x03\x02\x02\x02\u0F50" +
		"\u0F55\x05\u0206\u0104\x02\u0F51\u0F55\x05\u027C\u013F\x02\u0F52\u0F55" +
		"\x05\u027A\u013E\x02\u0F53\u0F55\x05\u0278\u013D\x02\u0F54\u0F50\x03\x02" +
		"\x02\x02\u0F54\u0F51\x03\x02\x02\x02\u0F54\u0F52\x03\x02\x02\x02\u0F54" +
		"\u0F53\x03\x02\x02\x02\u0F55\u0277\x03\x02\x02\x02\u0F56\u0F5F\x07\u0118" +
		"\x02\x02\u0F57\u0F59\x07\xE9\x02\x02\u0F58\u0F5A\x07\xDE\x02\x02\u0F59" +
		"\u0F58\x03\x02\x02\x02\u0F59\u0F5A\x03\x02\x02\x02\u0F5A\u0F60\x03\x02" +
		"\x02\x02\u0F5B\u0F5D\x07\xEA\x02\x02\u0F5C\u0F5E\x07\x18\x02\x02\u0F5D" +
		"\u0F5C\x03\x02\x02\x02\u0F5D\u0F5E\x03\x02\x02\x02\u0F5E\u0F60\x03\x02" +
		"\x02\x02\u0F5F\u0F57\x03\x02\x02\x02\u0F5F\u0F5B\x03\x02\x02\x02\u0F5F" +
		"\u0F60\x03\x02\x02\x02\u0F60\u0F61\x03\x02\x02\x02\u0F61\u0F63\x05\u0286" +
		"\u0144\x02\u0F62\u0F64\t\t\x02\x02\u0F63\u0F62\x03\x02\x02\x02\u0F63\u0F64" +
		"\x03\x02\x02\x02\u0F64\u0F67\x03\x02\x02\x02\u0F65\u0F66\x07\xC8\x02\x02" +
		"\u0F66\u0F68\x05\u0284\u0143\x02\u0F67\u0F65\x03\x02\x02\x02\u0F67\u0F68" +
		"\x03\x02\x02\x02\u0F68\u0F6C\x03\x02\x02\x02\u0F69\u0F6A\x07\xB8\x02\x02" +
		"\u0F6A\u0F6B\x07{\x02\x02\u0F6B\u0F6D\x05\u0282\u0142\x02\u0F6C\u0F69" +
		"\x03\x02\x02\x02\u0F6C\u0F6D\x03\x02\x02\x02\u0F6D\u0F71\x03\x02\x02\x02" +
		"\u0F6E\u0F6F\x07\xE5\x02\x02\u0F6F\u0F70\x07{\x02\x02\u0F70\u0F72\x05" +
		"\u0280\u0141\x02\u0F71\u0F6E\x03\x02\x02\x02\u0F71\u0F72\x03\x02\x02\x02" +
		"\u0F72\u0F75\x03\x02\x02\x02\u0F73\u0F74\x07\xBC\x02\x02\u0F74\u0F76\x05" +
		"\u027E\u0140\x02\u0F75\u0F73\x03\x02\x02\x02\u0F75\u0F76\x03\x02\x02\x02" +
		"\u0F76\u0279\x03\x02\x02\x02\u0F77\u0F79\x07\\\x02\x02\u0F78\u0F7A\x07" +
		"\xDE\x02\x02\u0F79\u0F78\x03\x02\x02\x02\u0F79\u0F7A\x03\x02\x02\x02\u0F7A" +
		"\u0F80\x03\x02\x02\x02\u0F7B\u0F7D\x07]\x02\x02\u0F7C\u0F7E\x07\x18\x02" +
		"\x02\u0F7D\u0F7C\x03\x02\x02\x02\u0F7D\u0F7E\x03\x02\x02\x02\u0F7E\u0F80" +
		"\x03\x02\x02\x02\u0F7F\u0F77\x03\x02\x02\x02\u0F7F\u0F7B\x03\x02\x02\x02" +
		"\u0F80\u0F8D\x03\x02\x02\x02\u0F81\u0F83\x05\u0288\u0145\x02\u0F82\u0F81" +
		"\x03\x02\x02\x02\u0F83\u0F84\x03\x02\x02\x02\u0F84\u0F82\x03\x02\x02\x02" +
		"\u0F84\u0F85\x03\x02\x02\x02\u0F85\u0F8E\x03\x02\x02\x02\u0F86\u0F8A\x07" +
		"\xB7\x02\x02\u0F87\u0F89\x05\u0288\u0145\x02\u0F88\u0F87\x03\x02\x02\x02" +
		"\u0F89\u0F8C\x03\x02\x02\x02\u0F8A\u0F88\x03\x02\x02\x02\u0F8A\u0F8B\x03" +
		"\x02\x02\x02\u0F8B\u0F8E\x03\x02\x02\x02\u0F8C\u0F8A\x03\x02\x02\x02\u0F8D" +
		"\u0F82\x03\x02\x02\x02\u0F8D\u0F86\x03\x02\x02\x02\u0F8E\u027B\x03\x02" +
		"\x02\x02\u0F8F\u0F90\x07@\x02\x02\u0F90\u0F91\x07\x03\x02\x02\u0F91\u027D" +
		"\x03\x02\x02\x02\u0F92\u0F93\t\n\x02\x02\u0F93\u027F\x03\x02\x02\x02\u0F94" +
		"\u0F95\t\n\x02\x02\u0F95\u0281\x03\x02\x02\x02\u0F96\u0F97\t\n\x02\x02" +
		"\u0F97\u0283\x03\x02\x02\x02\u0F98\u0F99\t\n\x02\x02\u0F99\u0285\x03\x02" +
		"\x02\x02\u0F9A\u0F9B\t\n\x02\x02\u0F9B\u0287\x03\x02\x02\x02\u0F9C\u0F9D" +
		"\x05\u0338\u019D\x02\u0F9D\u0289\x03\x02\x02\x02\u0F9E\u0FA0\x07\u0198" +
		"\x02\x02\u0F9F\u0FA1\x07\xDE\x02\x02\u0FA0\u0F9F\x03\x02\x02\x02\u0FA0" +
		"\u0FA1\x03\x02\x02\x02\u0FA1\u0FA3\x03\x02\x02\x02\u0FA2\u0F9E\x03\x02" +
		"\x02\x02\u0FA2\u0FA3\x03\x02\x02\x02\u0FA3\u0FA4\x03\x02\x02\x02\u0FA4" +
		"\u0FA5\x05\u028C\u0147\x02\u0FA5\u028B\x03\x02\x02\x02\u0FA6\u0FCE\x07" +
		")\x02\x02\u0FA7\u0FA9\x07*\x02\x02\u0FA8\u0FAA\t#\x02\x02\u0FA9\u0FA8" +
		"\x03\x02\x02\x02\u0FA9\u0FAA\x03\x02\x02\x02\u0FAA\u0FCE\x03\x02\x02\x02" +
		"\u0FAB\u0FAD\x07-\x02\x02\u0FAC\u0FAE\t#\x02\x02\u0FAD\u0FAC\x03\x02\x02" +
		"\x02\u0FAD\u0FAE\x03\x02\x02\x02\u0FAE\u0FCE\x03\x02\x02\x02\u0FAF\u0FB1" +
		"\x07,\x02\x02\u0FB0\u0FB2\t#\x02\x02\u0FB1\u0FB0\x03\x02\x02\x02\u0FB1" +
		"\u0FB2\x03\x02\x02\x02\u0FB2\u0FCE\x03\x02\x02\x02\u0FB3\u0FB5\x07+\x02" +
		"\x02\u0FB4\u0FB6\t#\x02\x02\u0FB5\u0FB4\x03\x02\x02\x02\u0FB5\u0FB6\x03" +
		"\x02\x02\x02\u0FB6\u0FCE\x03\x02\x02\x02\u0FB7\u0FCE\x07G\x02\x02\u0FB8" +
		"\u0FCE\x07H\x02\x02\u0FB9\u0FCE\x07I\x02\x02\u0FBA\u0FCE\x07J\x02\x02" +
		"\u0FBB\u0FCE\x07K\x02\x02\u0FBC\u0FCE\x07L\x02\x02\u0FBD\u0FCE\x07M\x02" +
		"\x02\u0FBE\u0FCE\x07F\x02\x02\u0FBF\u0FCE\x07O\x02\x02\u0FC0\u0FCE\x07" +
		"P\x02\x02\u0FC1\u0FCE\x07Q\x02\x02\u0FC2\u0FCE\x07R\x02\x02\u0FC3\u0FCE" +
		"\x07S\x02\x02\u0FC4\u0FCE\x07T\x02\x02\u0FC5\u0FCE\x07~\x02\x02\u0FC6" +
		"\u0FCE\x07\xBB\x02\x02\u0FC7\u0FCE\x07\xBA\x02\x02\u0FC8\u0FCE\x07\xB9" +
		"\x02\x02\u0FC9\u0FCE\x07\xD2\x02\x02\u0FCA\u0FCE\x07\u0116\x02\x02\u0FCB" +
		"\u0FCE\x07\u011F\x02\x02\u0FCC\u0FCE\x07\u0120\x02\x02\u0FCD\u0FA6\x03" +
		"\x02\x02\x02\u0FCD\u0FA7\x03\x02\x02\x02\u0FCD\u0FAB\x03\x02\x02\x02\u0FCD" +
		"\u0FAF\x03\x02\x02\x02\u0FCD\u0FB3\x03\x02\x02\x02\u0FCD\u0FB7\x03\x02" +
		"\x02\x02\u0FCD\u0FB8\x03\x02\x02\x02\u0FCD\u0FB9\x03\x02\x02\x02\u0FCD" +
		"\u0FBA\x03\x02\x02\x02\u0FCD\u0FBB\x03\x02\x02\x02\u0FCD\u0FBC\x03\x02" +
		"\x02\x02\u0FCD\u0FBD\x03\x02\x02\x02\u0FCD\u0FBE\x03\x02\x02\x02\u0FCD" +
		"\u0FBF\x03\x02\x02\x02\u0FCD\u0FC0\x03\x02\x02\x02\u0FCD\u0FC1\x03\x02" +
		"\x02\x02\u0FCD\u0FC2\x03\x02\x02\x02\u0FCD\u0FC3\x03\x02\x02\x02\u0FCD" +
		"\u0FC4\x03\x02\x02\x02\u0FCD\u0FC5\x03\x02\x02\x02\u0FCD\u0FC6\x03\x02" +
		"\x02\x02\u0FCD\u0FC7\x03\x02\x02\x02\u0FCD\u0FC8\x03\x02\x02\x02\u0FCD" +
		"\u0FC9\x03\x02\x02\x02\u0FCD\u0FCA\x03\x02\x02\x02\u0FCD\u0FCB\x03\x02" +
		"\x02\x02\u0FCD\u0FCC\x03\x02\x02\x02\u0FCE\u028D\x03\x02\x02\x02\u0FCF" +
		"\u0FD1\t$\x02\x02\u0FD0\u0FD2\t%\x02\x02\u0FD1\u0FD0\x03\x02\x02\x02\u0FD1" +
		"\u0FD2\x03\x02\x02\x02\u0FD2\u0FD3\x03\x02\x02\x02\u0FD3\u0FD4\x05\u0290" +
		"\u0149\x02\u0FD4\u028F\x03\x02\x02\x02\u0FD5\u0FD6\x07\u01D1\x02\x02\u0FD6" +
		"\u0291\x03\x02\x02\x02\u0FD7\u0FD8\x07\u01C9\x02\x02\u0FD8\u0293\x03\x02" +
		"\x02\x02\u0FD9\u0FDA\x07\u01C9\x02\x02\u0FDA\u0295\x03\x02\x02\x02\u0FDB" +
		"\u0FDE\x05\u02B0\u0159\x02\u0FDC\u0FDE\x05\u02A6\u0154\x02\u0FDD\u0FDB" +
		"\x03\x02\x02\x02\u0FDD\u0FDC\x03\x02\x02\x02\u0FDE\u0297\x03\x02\x02\x02" +
		"\u0FDF\u0FE1\x07\u0141\x02\x02\u0FE0\u0FE2\x07\xDE\x02\x02\u0FE1\u0FE0" +
		"\x03\x02\x02\x02\u0FE1\u0FE2\x03\x02\x02\x02\u0FE2\u0FE8\x03\x02\x02\x02" +
		"\u0FE3\u0FE5\x07\u0143\x02\x02\u0FE4\u0FE6\x07\x18\x02\x02\u0FE5\u0FE4" +
		"\x03\x02\x02\x02\u0FE5\u0FE6\x03\x02\x02\x02\u0FE6\u0FE8\x03\x02\x02\x02" +
		"\u0FE7\u0FDF\x03\x02\x02\x02\u0FE7\u0FE3\x03\x02\x02\x02\u0FE8\u0FEA\x03" +
		"\x02\x02\x02\u0FE9\u0FEB\x05\u029A\u014E\x02\u0FEA\u0FE9\x03\x02\x02\x02" +
		"\u0FEB\u0FEC\x03\x02\x02\x02\u0FEC\u0FEA\x03\x02\x02\x02\u0FEC\u0FED\x03" +
		"\x02\x02\x02\u0FED\u0299\x03\x02\x02\x02\u0FEE\u0FEF\x07\u01C9\x02\x02" +
		"\u0FEF\u029B\x03\x02\x02\x02\u0FF0\u0FF2\x07\xEB\x02\x02\u0FF1\u0FF3\x07" +
		"\xDE\x02\x02\u0FF2\u0FF1\x03\x02\x02\x02\u0FF2\u0FF3\x03\x02\x02\x02\u0FF3" +
		"\u0FF4\x03\x02\x02\x02\u0FF4\u0FF6\x05\u02A4\u0153\x02\u0FF5\u0FF7\x07" +
		"\xED\x02\x02\u0FF6\u0FF5\x03\x02\x02\x02\u0FF6\u0FF7\x03\x02\x02\x02\u0FF7" +
		"\u1000\x03\x02\x02\x02\u0FF8\u0FFA\x07\u01A1\x02\x02\u0FF9\u0FF8\x03\x02" +
		"\x02\x02\u0FF9\u0FFA\x03\x02\x02\x02\u0FFA\u0FFB\x03\x02\x02\x02\u0FFB" +
		"\u0FFD\x07\xBC\x02\x02\u0FFC\u0FFE\x07!\x02\x02\u0FFD\u0FFC\x03\x02\x02" +
		"\x02\u0FFD\u0FFE\x03\x02\x02\x02\u0FFE\u0FFF\x03\x02\x02\x02\u0FFF\u1001" +
		"\x05\u02A2\u0152\x02\u1000\u0FF9\x03\x02\x02\x02\u1000\u1001\x03\x02\x02" +
		"\x02\u1001\u100A\x03\x02\x02\x02\u1002\u1004\x07\xED\x02\x02\u1003\u1002" +
		"\x03\x02\x02\x02\u1003\u1004\x03\x02\x02\x02\u1004\u1006\x03\x02\x02\x02" +
		"\u1005\u1007\x07!\x02\x02\u1006\u1005\x03\x02\x02\x02\u1006\u1007\x03" +
		"\x02\x02\x02\u1007\u1008\x03\x02\x02\x02\u1008\u1009\x07\u018A\x02\x02" +
		"\u1009\u100B\x05\u02A0\u0151\x02\u100A\u1003\x03\x02\x02\x02\u100A\u100B" +
		"\x03\x02\x02\x02\u100B\u1014\x03\x02\x02\x02\u100C\u100E\x07\xED\x02\x02" +
		"\u100D\u100C\x03\x02\x02\x02\u100D\u100E\x03\x02\x02\x02\u100E\u1010\x03" +
		"\x02\x02\x02\u100F\u1011\x07!\x02\x02\u1010\u100F\x03\x02\x02\x02\u1010" +
		"\u1011\x03\x02\x02\x02\u1011\u1012\x03\x02\x02\x02\u1012\u1013\x073\x02" +
		"\x02\u1013\u1015\x05\u029E\u0150\x02\u1014\u100D\x03\x02\x02\x02\u1014" +
		"\u1015\x03\x02\x02\x02\u1015\u029D\x03\x02\x02\x02\u1016\u1019\t\n\x02" +
		"\x02\u1017\u1019\x05\u03D8\u01ED\x02\u1018\u1016\x03\x02\x02\x02\u1018" +
		"\u1017\x03\x02\x02\x02\u1019\u029F\x03\x02\x02\x02\u101A\u101D\t\n\x02" +
		"\x02\u101B\u101D\x05\u03D8\u01ED\x02\u101C\u101A\x03\x02\x02\x02\u101C" +
		"\u101B\x03\x02\x02\x02\u101D\u02A1\x03\x02\x02\x02\u101E\u1021\t\n\x02" +
		"\x02\u101F\u1021\x05\u03D8\u01ED\x02\u1020\u101E\x03\x02\x02\x02\u1020" +
		"\u101F\x03\x02\x02\x02\u1021\u02A3\x03\x02\x02\x02\u1022\u1025\t\n\x02" +
		"\x02\u1023\u1025\x05\u03D8\u01ED\x02\u1024\u1022\x03\x02\x02\x02\u1024" +
		"\u1023\x03\x02\x02\x02\u1025\u02A5\x03\x02\x02\x02\u1026\u102F\x07h\x02" +
		"\x02\u1027\u1029\x07\u0135\x02\x02\u1028\u102A\x07\x18\x02\x02\u1029\u1028" +
		"\x03\x02\x02\x02\u1029\u102A\x03\x02\x02\x02\u102A\u1030\x03\x02\x02\x02" +
		"\u102B\u102D\x07\u0134\x02\x02\u102C\u102E\x07\xDE\x02\x02\u102D\u102C" +
		"\x03\x02\x02\x02\u102D\u102E\x03\x02\x02\x02\u102E\u1030\x03\x02\x02\x02" +
		"\u102F\u1027\x03\x02\x02\x02\u102F\u102B\x03\x02\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\u1030\u1032\x03\x02\x02\x02\u1031\u1033\x05\u02A8\u0155\x02\u1032" +
		"\u1031\x03\x02\x02\x02\u1033\u1034\x03\x02\x02\x02\u1034\u1032\x03\x02" +
		"\x02\x02\u1034\u1035\x03\x02\x02\x02\u1035\u02A7\x03\x02\x02\x02\u1036" +
		"\u1037\x07\u01C9\x02\x02\u1037\u02A9\x03\x02\x02\x02\u1038\u1039\x07\u019B" +
		"\x02\x02\u1039\u103A\x07\u0108\x02\x02\u103A\u103C\t&\x02\x02\u103B\u103D" +
		"\x07\xDE\x02\x02\u103C\u103B\x03\x02\x02\x02\u103C\u103D\x03\x02\x02\x02" +
		"\u103D\u103E\x03\x02\x02\x02\u103E\u103F\x05\u02AC\u0157\x02\u103F\u02AB" +
		"\x03\x02\x02\x02\u1040\u1043\x07\x03\x02\x02\u1041\u1043\x05\u0338\u019D" +
		"\x02\u1042\u1040\x03\x02\x02\x02\u1042\u1041\x03\x02\x02\x02\u1043\u02AD" +
		"\x03\x02\x02\x02\u1044\u104D\x07\xE4\x02\x02\u1045\u1047\x07\u0135\x02" +
		"\x02\u1046\u1048\x07\x18\x02\x02\u1047\u1046\x03\x02\x02\x02\u1047\u1048" +
		"\x03\x02\x02\x02\u1048\u104E\x03\x02\x02\x02\u1049\u104B\x07\u0134\x02" +
		"\x02\u104A\u104C\x07\xDE\x02\x02\u104B\u104A\x03\x02\x02\x02\u104B\u104C" +
		"\x03\x02\x02\x02\u104C\u104E\x03\x02\x02\x02\u104D\u1045\x03\x02\x02\x02" +
		"\u104D\u1049\x03\x02\x02\x02\u104E\u104F\x03\x02\x02\x02\u104F\u1050\t" +
		"\'\x02\x02\u1050\u02AF\x03\x02\x02\x02\u1051\u1052\x07\u0134\x02\x02\u1052" +
		"\u1053\x05\u02B2\u015A\x02\u1053\u02B1\x03\x02\x02\x02\u1054\u1056\x07" +
		"W\x02\x02\u1055\u1054\x03\x02\x02\x02\u1055\u1056\x03\x02\x02\x02\u1056" +
		"\u105A\x03\x02\x02\x02\u1057\u1058\x05\u02B6\u015C\x02\u1058\u1059\x07" +
		"\u0189\x02\x02\u1059\u105B\x03\x02\x02\x02\u105A\u1057\x03\x02\x02\x02" +
		"\u105A\u105B\x03\x02\x02\x02\u105B\u105C\x03\x02\x02\x02\u105C\u105E\x05" +
		"\u02B8\u015D\x02\u105D\u105F\x07<\x02\x02\u105E\u105D\x03\x02\x02\x02" +
		"\u105E\u105F\x03\x02\x02\x02\u105F\u107F\x03\x02\x02\x02\u1060\u1062\x07" +
		"\xDE\x02\x02\u1061\u1060\x03\x02\x02\x02\u1061\u1062\x03\x02\x02\x02\u1062" +
		"\u1063\x03\x02\x02\x02\u1063\u1065\x07\u019D\x02\x02\u1064\u1066\x07\xD1" +
		"\x02\x02\u1065\u1064\x03\x02\x02\x02\u1065\u1066\x03\x02\x02\x02\u1066" +
		"\u1068\x03\x02\x02\x02\u1067\u1069\x07\u0163\x02\x02\u1068\u1067\x03\x02" +
		"\x02\x02\u1068\u1069\x03\x02\x02\x02\u1069\u106E\x03\x02\x02\x02\u106A" +
		"\u106C\x07\xBF\x02\x02\u106B\u106A\x03\x02\x02\x02\u106B\u106C\x03\x02" +
		"\x02\x02\u106C\u106D\x03\x02\x02\x02\u106D\u106F\x05\u02B6\u015C\x02\u106E" +
		"\u106B\x03\x02\x02\x02\u106E\u106F\x03\x02\x02\x02\u106F\u1072\x03\x02" +
		"\x02\x02\u1070\u1071\x07\u0189\x02\x02\u1071\u1073\x05\u02B8\u015D\x02" +
		"\u1072\u1070\x03\x02\x02\x02\u1072\u1073\x03\x02\x02\x02\u1073\u1075\x03" +
		"\x02\x02\x02\u1074\u1076\x07<\x02\x02\u1075\u1074\x03\x02\x02\x02\u1075" +
		"\u1076\x03\x02\x02\x02\u1076\u107C\x03\x02\x02\x02\u1077\u1079\x07x\x02" +
		"\x02\u1078\u107A\x07\u010B\x02\x02\u1079\u1078\x03\x02\x02\x02\u1079\u107A" +
		"\x03\x02\x02\x02\u107A\u107B\x03\x02\x02\x02\u107B\u107D\x05\u02B4\u015B" +
		"\x02\u107C\u1077\x03\x02\x02\x02\u107C\u107D\x03\x02\x02\x02\u107D\u107F" +
		"\x03\x02\x02\x02\u107E\u1055\x03\x02\x02\x02\u107E\u1061\x03\x02\x02\x02" +
		"\u107F\u02B3\x03\x02\x02\x02\u1080\u1081\x05\u0338\u019D\x02\u1081\u02B5" +
		"\x03\x02\x02\x02\u1082\u1083\t\n\x02\x02\u1083\u02B7\x03\x02\x02\x02\u1084" +
		"\u1085\t\n\x02\x02\u1085\u02B9\x03\x02\x02\x02\u1086\u1089\x05\u020A\u0106" +
		"\x02\u1087\u108A\x05\u0294\u014B\x02\u1088\u108A\x07\xB5\x02\x02\u1089" +
		"\u1087\x03\x02\x02\x02\u1089\u1088\x03\x02\x02\x02\u1089\u108A\x03\x02" +
		"\x02\x02\u108A\u108E\x03\x02\x02\x02\u108B\u108D\x05\u02BC\u015F\x02\u108C" +
		"\u108B\x03\x02\x02\x02\u108D\u1090\x03\x02\x02\x02\u108E\u108C\x03\x02" +
		"\x02\x02\u108E\u108F\x03\x02\x02\x02\u108F\u1091\x03\x02\x02\x02\u1090" +
		"\u108E\x03\x02\x02\x02\u1091\u1095\x07\u01C3\x02\x02\u1092\u1094\x05T" +
		"+\x02\u1093\u1092\x03\x02\x02\x02\u1094\u1097\x03\x02\x02\x02\u1095\u1093" +
		"\x03\x02\x02\x02\u1095\u1096\x03\x02\x02\x02\u1096\u02BB\x03\x02\x02\x02" +
		"\u1097\u1095\x03\x02\x02\x02\u1098\u10AE\x05\u02E2\u0172\x02\u1099\u10AE" +
		"\x05\u02E0\u0171\x02\u109A\u10AE\x05\u02DE\u0170\x02\u109B\u10AE\x05\u02DC" +
		"\u016F\x02\u109C\u10AE\x05\u02DA\u016E\x02\u109D\u10AE\x05\u02D8\u016D" +
		"\x02\u109E\u10AE\x05\u0248\u0125\x02\u109F\u10AE\x05\u0250\u0129\x02\u10A0" +
		"\u10AE\x05\u02D6\u016C\x02\u10A1\u10AE\x05\u02D4\u016B\x02\u10A2\u10AE" +
		"\x05\u02D2\u016A\x02\u10A3\u10AE\x05\u02D0\u0169\x02\u10A4\u10AE\x05\u02BE" +
		"\u0160\x02\u10A5\u10AE\x05\u02CA\u0166\x02\u10A6\u10AE\x05\u02C8\u0165" +
		"\x02\u10A7\u10AE\x05\u02C6\u0164\x02\u10A8\u10AE\x05\u02C4\u0163\x02\u10A9" +
		"\u10AE\x05\u02C2\u0162\x02\u10AA\u10AE\x05\u0212\u010A\x02\u10AB\u10AE" +
		"\x05\u0210\u0109\x02\u10AC\u10AE\x05\u02C0\u0161\x02\u10AD\u1098\x03\x02" +
		"\x02\x02\u10AD\u1099\x03\x02\x02\x02\u10AD\u109A\x03\x02\x02\x02\u10AD" +
		"\u109B\x03\x02\x02\x02\u10AD\u109C\x03\x02\x02\x02\u10AD\u109D\x03\x02" +
		"\x02\x02\u10AD\u109E\x03\x02\x02\x02\u10AD\u109F\x03\x02\x02\x02\u10AD" +
		"\u10A0\x03\x02\x02\x02\u10AD\u10A1\x03\x02\x02\x02\u10AD\u10A2\x03\x02" +
		"\x02\x02\u10AD\u10A3\x03\x02\x02\x02\u10AD\u10A4\x03\x02\x02\x02\u10AD" +
		"\u10A5\x03\x02\x02\x02\u10AD\u10A6\x03\x02\x02\x02\u10AD\u10A7\x03\x02" +
		"\x02\x02\u10AD\u10A8\x03\x02\x02\x02\u10AD\u10A9\x03\x02\x02\x02\u10AD" +
		"\u10AA\x03\x02\x02\x02\u10AD\u10AB\x03\x02\x02\x02\u10AD\u10AC\x03\x02" +
		"\x02\x02\u10AE\u02BD\x03\x02\x02\x02\u10AF\u10B2\x05\u02CE\u0168\x02\u10B0" +
		"\u10B2\x05\u02CC\u0167\x02\u10B1\u10AF\x03\x02\x02\x02\u10B1\u10B0\x03" +
		"\x02\x02\x02\u10B2\u02BF\x03\x02\x02\x02\u10B3\u10BA\x05\u028E\u0148\x02" +
		"\u10B4\u10BB\x05\u02E4\u0173\x02\u10B5\u10B7\x05\u02E6\u0174\x02\u10B6" +
		"\u10B8\x05\u02E8\u0175\x02\u10B7\u10B6\x03\x02\x02\x02\u10B7\u10B8\x03" +
		"\x02\x02\x02\u10B8\u10BB\x03\x02\x02\x02\u10B9\u10BB\x05\u02E8\u0175\x02" +
		"\u10BA\u10B4\x03\x02\x02\x02\u10BA\u10B5\x03\x02\x02\x02\u10BA\u10B9\x03" +
		"\x02\x02\x02\u10BB\u02C1\x03\x02\x02\x02\u10BC\u10BE\x07\u019B\x02\x02" +
		"\u10BD\u10BF\x07\xDE\x02\x02\u10BE\u10BD\x03\x02\x02\x02\u10BE\u10BF\x03" +
		"\x02\x02\x02\u10BF\u10C0\x03\x02\x02\x02\u10C0\u10C1\x05\u02EA\u0176\x02" +
		"\u10C1\u02C3\x03\x02\x02\x02\u10C2\u10C4\x07C\x02\x02\u10C3\u10C5\x07" +
		"\u0103\x02\x02\u10C4\u10C3\x03\x02\x02\x02\u10C4\u10C5\x03\x02\x02\x02" +
		"\u10C5\u10C7\x03\x02\x02\x02\u10C6\u10C8\x07\xDE\x02\x02\u10C7\u10C6\x03" +
		"\x02\x02\x02\u10C7\u10C8\x03\x02\x02\x02\u10C8\u10CA\x03\x02\x02\x02\u10C9" +
		"\u10CB\x07\u011E\x02\x02\u10CA\u10C9\x03\x02\x02\x02\u10CA\u10CB\x03\x02" +
		"\x02\x02\u10CB\u10CC\x03\x02\x02\x02\u10CC\u10CD\x05\u02EC\u0177\x02\u10CD" +
		"\u02C5\x03\x02\x02\x02\u10CE\u10D0\x07\xEC\x02\x02\u10CF\u10D1\x07\u0103" +
		"\x02\x02\u10D0\u10CF\x03\x02\x02\x02\u10D0\u10D1\x03\x02\x02\x02\u10D1" +
		"\u10D3\x03\x02\x02\x02\u10D2\u10D4\x07\xDE\x02\x02\u10D3\u10D2\x03\x02" +
		"\x02\x02\u10D3\u10D4\x03\x02\x02\x02\u10D4\u10D6\x03\x02\x02\x02\u10D5" +
		"\u10D7\x07\u011E\x02\x02\u10D6\u10D5\x03\x02\x02\x02\u10D6\u10D7\x03\x02" +
		"\x02\x02\u10D7\u10D8\x03\x02\x02\x02\u10D8\u10D9\x05\u02EC\u0177\x02\u10D9" +
		"\u02C7\x03\x02\x02\x02\u10DA\u10DB\x07\u018E\x02\x02\u10DB\u02C9\x03\x02" +
		"\x02\x02\u10DC\u10DD\x07\u014A\x02\x02\u10DD\u02CB\x03\x02\x02\x02\u10DE" +
		"\u10DF\x07\xF2\x02\x02\u10DF\u02CD\x03\x02\x02\x02\u10E0\u10E1\x07\xC9" +
		"\x02\x02\u10E1\u02CF\x03\x02\x02\x02\u10E2\u10E3\x07\xA5\x02\x02\u10E3" +
		"\u10E4\t(\x02\x02\u10E4\u02D1\x03\x02\x02\x02\u10E5\u10E6\x07/\x02\x02" +
		"\u10E6\u02D3\x03\x02\x02\x02\u10E7\u10E8\x07(\x02\x02\u10E8\u02D5\x03" +
		"\x02\x02\x02\u10E9\u10EA\x07\xC0\x02\x02\u10EA\u02D7\x03\x02\x02\x02\u10EB" +
		"\u10EC\x07\u0144\x02\x02\u10EC\u02D9\x03\x02\x02\x02\u10ED\u10EE\x07\u0158" +
		"\x02\x02\u10EE\u02DB\x03\x02\x02\x02\u10EF\u10F0\x07#\x02\x02\u10F0\u02DD" +
		"\x03\x02\x02\x02\u10F1\u10F3\x07&\x02\x02\u10F2\u10F4\x07\xDE\x02\x02" +
		"\u10F3\u10F2\x03\x02\x02\x02\u10F3\u10F4\x03\x02\x02\x02\u10F4\u10F5\x03" +
		"\x02\x02\x02\u10F5\u10F6\x05\u02EE\u0178\x02\u10F6\u02DF\x03\x02\x02\x02" +
		"\u10F7\u10F9\x07\xBE\x02\x02\u10F8\u10FA\x07\xDE\x02\x02\u10F9\u10F8\x03" +
		"\x02\x02\x02\u10F9\u10FA\x03\x02\x02\x02\u10FA\u10FB\x03\x02\x02\x02\u10FB" +
		"\u10FC\x05\u02EE\u0178\x02\u10FC\u02E1\x03\x02\x02\x02\u10FD\u10FE\x07" +
		".\x02\x02\u10FE\u10FF\t\x19\x02\x02\u10FF\u02E3\x03\x02\x02\x02\u1100" +
		"\u1101\x07\u019A\x02\x02\u1101\u1102\x05\u03D8\u01ED\x02\u1102\u02E5\x03" +
		"\x02\x02\x02\u1103\u1106\x07\xBF\x02\x02\u1104\u1107\x05\u03D8\u01ED\x02" +
		"\u1105\u1107\x05\u02EA\u0176\x02\u1106\u1104\x03\x02\x02\x02\u1106\u1105" +
		"\x03\x02\x02\x02\u1107\u02E7\x03\x02\x02\x02\u1108\u1109\x07\u0189\x02" +
		"\x02\u1109\u110A\x05\u03D8\u01ED\x02\u110A\u02E9\x03\x02\x02\x02\u110B" +
		"\u110C\x07\x03\x02\x02\u110C\u02EB\x03\x02\x02\x02\u110D\u1110\x05\u03D8" +
		"\u01ED\x02\u110E\u1110\t\n\x02\x02\u110F\u110D\x03\x02\x02\x02\u110F\u110E" +
		"\x03\x02\x02\x02\u1110\u02ED\x03\x02\x02\x02\u1111\u1112\t\n\x02\x02\u1112" +
		"\u02EF\x03\x02\x02\x02\u1113\u1114\x07\u012C\x02\x02\u1114\u1118\x07\u01C3" +
		"\x02\x02\u1115\u1117\x05T+\x02\u1116\u1115\x03\x02\x02\x02\u1117\u111A" +
		"\x03\x02\x02\x02\u1118\u1116\x03\x02\x02\x02\u1118\u1119\x03\x02\x02\x02" +
		"\u1119\u111B\x03\x02\x02\x02\u111A\u1118\x03\x02\x02\x02\u111B\u111D\x05" +
		"\u02F2\u017A\x02\u111C\u111E\x05\u02F4\u017B\x02\u111D\u111C\x03\x02\x02" +
		"\x02\u111D\u111E\x03\x02\x02\x02\u111E\u1120\x03\x02\x02\x02\u111F\u1121" +
		"\x05\u02F6\u017C\x02\u1120\u111F\x03\x02\x02\x02\u1120\u1121\x03\x02\x02" +
		"\x02\u1121\u1122\x03\x02\x02\x02\u1122\u1126\x07\u01C3\x02\x02\u1123\u1125" +
		"\x05T+\x02\u1124\u1123\x03\x02\x02\x02\u1125\u1128\x03\x02\x02\x02\u1126" +
		"\u1124\x03\x02\x02\x02\u1126\u1127\x03\x02\x02\x02\u1127\u02F1\x03\x02" +
		"\x02\x02\u1128\u1126\x03\x02\x02\x02\u1129\u112A\x07\u01C9\x02\x02\u112A" +
		"\u02F3\x03\x02\x02\x02\u112B\u112D\x07\xDE\x02\x02\u112C\u112B\x03\x02" +
		"\x02\x02\u112C\u112D\x03\x02\x02\x02\u112D\u1136\x03\x02\x02\x02\u112E" +
		"\u1130\x07E\x02\x02\u112F\u1131\x07\xD5\x02\x02\u1130\u112F\x03\x02\x02" +
		"\x02\u1130\u1131\x03\x02\x02\x02\u1131\u1137\x03\x02\x02\x02\u1132\u1134" +
		"\x07\xD5\x02\x02\u1133\u1135\x07E\x02\x02\u1134\u1133\x03\x02\x02\x02" +
		"\u1134\u1135\x03\x02\x02\x02\u1135\u1137\x03\x02\x02\x02\u1136\u112E\x03" +
		"\x02\x02\x02\u1136\u1132\x03\x02\x02\x02\u1137\u1139\x03\x02\x02\x02\u1138" +
		"\u113A\x07\u012B\x02\x02\u1139\u1138\x03\x02\x02\x02\u1139\u113A\x03\x02" +
		"\x02\x02\u113A\u02F5\x03\x02\x02\x02\u113B\u113D\x07\u01A1\x02\x02\u113C" +
		"\u113B\x03\x02\x02\x02\u113C\u113D\x03\x02\x02\x02\u113D\u113E\x03\x02" +
		"\x02\x02\u113E\u113F\x07\xCE\x02\x02\u113F\u1140\x05\u02F8\u017D\x02\u1140" +
		"\u02F7\x03\x02\x02\x02\u1141\u1142\x07\x03\x02\x02\u1142\u02F9\x03\x02" +
		"\x02\x02\u1143\u1144\x07\xDB\x02\x02\u1144\u1148\x07\u01C3\x02\x02\u1145" +
		"\u1147\x05\x14\v\x02\u1146\u1145\x03\x02\x02\x02\u1147\u114A\x03\x02\x02" +
		"\x02\u1148\u1146\x03\x02\x02\x02\u1148\u1149\x03\x02\x02\x02\u1149\u114E" +
		"\x03\x02\x02\x02\u114A\u1148\x03\x02\x02\x02\u114B\u114D\x05T+\x02\u114C" +
		"\u114B\x03\x02\x02\x02\u114D\u1150\x03\x02\x02\x02\u114E\u114C\x03\x02" +
		"\x02\x02\u114E\u114F\x03\x02\x02\x02\u114F\u02FB\x03\x02\x02\x02\u1150" +
		"\u114E\x03\x02\x02\x02\u1151\u1152\x07k\x02\x02\u1152\u1156\x07\u01C3" +
		"\x02\x02\u1153\u1155\x05\x14\v\x02\u1154\u1153\x03\x02\x02\x02\u1155\u1158" +
		"\x03\x02\x02\x02\u1156\u1154\x03\x02\x02\x02\u1156\u1157\x03\x02\x02\x02" +
		"\u1157\u115C\x03\x02\x02\x02\u1158\u1156\x03\x02\x02\x02\u1159\u115B\x05" +
		"T+\x02\u115A\u1159\x03\x02\x02\x02\u115B\u115E\x03\x02\x02\x02\u115C\u115A" +
		"\x03\x02\x02\x02\u115C\u115D\x03\x02\x02\x02\u115D\u02FD\x03\x02\x02\x02" +
		"\u115E\u115C\x03\x02\x02\x02\u115F\u1160\x07j\x02\x02\u1160\u1164\x07" +
		"\u01C3\x02\x02\u1161\u1163\x05\x14\v\x02\u1162\u1161\x03\x02\x02\x02\u1163" +
		"\u1166\x03\x02\x02\x02\u1164\u1162\x03\x02\x02\x02\u1164\u1165\x03\x02" +
		"\x02\x02\u1165\u116A\x03\x02\x02\x02\u1166\u1164\x03\x02\x02\x02\u1167" +
		"\u1169\x05T+\x02\u1168\u1167\x03\x02\x02\x02\u1169\u116C\x03\x02\x02\x02" +
		"\u116A\u1168\x03\x02\x02\x02\u116A\u116B\x03\x02\x02\x02\u116B\u02FF\x03" +
		"\x02\x02\x02\u116C\u116A\x03\x02\x02\x02\u116D\u116E\x07\u0159\x02\x02" +
		"\u116E\u1172\x07\u01C3\x02\x02\u116F\u1171\x05\x14\v\x02\u1170\u116F\x03" +
		"\x02\x02\x02\u1171\u1174\x03\x02\x02\x02\u1172\u1170\x03\x02\x02\x02\u1172" +
		"\u1173\x03\x02\x02\x02\u1173\u1178\x03\x02\x02\x02\u1174\u1172\x03\x02" +
		"\x02\x02\u1175\u1177\x05T+\x02\u1176\u1175\x03\x02\x02\x02\u1177\u117A" +
		"\x03\x02\x02\x02\u1178\u1176\x03\x02\x02\x02\u1178\u1179\x03\x02\x02\x02" +
		"\u1179\u0301\x03\x02\x02\x02\u117A\u1178\x03\x02\x02\x02\u117B\u117C\x07" +
		"\u010E\x02\x02\u117C\u1180\x07\u01C3\x02\x02\u117D\u117F\x05T+\x02\u117E" +
		"\u117D\x03\x02\x02\x02\u117F\u1182\x03\x02\x02\x02\u1180\u117E\x03\x02" +
		"\x02\x02\u1180\u1181\x03\x02\x02\x02\u1181\u1184\x03\x02\x02\x02\u1182" +
		"\u1180\x03\x02\x02\x02\u1183\u1185\x05\u0304\u0183\x02\u1184\u1183\x03" +
		"\x02\x02\x02\u1184\u1185\x03\x02\x02\x02\u1185\u0303\x03\x02\x02\x02\u1186" +
		"\u1188\x07\x1D\x02\x02\u1187\u1189\x07\xDE\x02\x02\u1188\u1187\x03\x02" +
		"\x02\x02\u1188\u1189\x03\x02\x02\x02\u1189\u118A\x03\x02\x02\x02\u118A" +
		"\u118B\t)\x02\x02\u118B\u118F\x07\u01C3\x02\x02\u118C\u118E\x05T+\x02" +
		"\u118D\u118C\x03\x02\x02\x02\u118E\u1191\x03\x02\x02\x02\u118F\u118D\x03" +
		"\x02\x02\x02\u118F\u1190\x03\x02\x02\x02\u1190\u0305\x03\x02\x02\x02\u1191" +
		"\u118F\x03\x02\x02\x02\u1192\u1193\x07U\x02\x02\u1193\u1194\x07\u0157" +
		"\x02\x02\u1194\u1198\x07\u01C3\x02\x02\u1195\u1197\x05T+\x02\u1196\u1195" +
		"\x03\x02\x02\x02\u1197\u119A\x03\x02\x02\x02\u1198\u1196\x03\x02\x02\x02" +
		"\u1198\u1199\x03\x02\x02\x02\u1199\u119C\x03\x02\x02\x02\u119A\u1198\x03" +
		"\x02\x02\x02\u119B\u119D\x05\u030A\u0186\x02\u119C\u119B\x03\x02\x02\x02" +
		"\u119C\u119D\x03\x02\x02\x02\u119D\u119F\x03\x02\x02\x02\u119E\u11A0\x05" +
		"\u0310\u0189\x02\u119F\u119E\x03\x02\x02\x02\u119F\u11A0\x03\x02\x02\x02" +
		"\u11A0\u11A2\x03\x02\x02\x02\u11A1\u11A3\x05\u0320\u0191\x02\u11A2\u11A1" +
		"\x03\x02\x02\x02\u11A2\u11A3\x03\x02\x02\x02\u11A3\u0307\x03\x02\x02\x02" +
		"\u11A4\u11A5\x07\xD9\x02\x02\u11A5\u11A6\x07\u0157\x02\x02\u11A6\u11AA" +
		"\x07\u01C3\x02\x02\u11A7\u11A9\x05T+\x02\u11A8\u11A7\x03\x02\x02\x02\u11A9" +
		"\u11AC\x03\x02\x02\x02\u11AA\u11A8\x03\x02\x02\x02\u11AA\u11AB\x03\x02" +
		"\x02\x02\u11AB\u11AE\x03\x02\x02\x02\u11AC\u11AA\x03\x02\x02\x02\u11AD" +
		"\u11AF\x05\u0364\u01B3\x02\u11AE\u11AD\x03\x02\x02\x02\u11AE\u11AF\x03" +
		"\x02\x02\x02\u11AF\u11B1\x03\x02\x02\x02\u11B0\u11B2\x05\u039A\u01CE\x02" +
		"\u11B1\u11B0\x03\x02\x02\x02\u11B1\u11B2\x03\x02\x02\x02\u11B2\u0309\x03" +
		"\x02\x02\x02\u11B3\u11B4\x07\u0167\x02\x02\u11B4\u11B8\x07\u01C3\x02\x02" +
		"\u11B5\u11B7\x05T+\x02\u11B6\u11B5\x03\x02\x02\x02\u11B7\u11BA\x03\x02" +
		"\x02\x02\u11B8\u11B6\x03\x02\x02\x02\u11B8\u11B9\x03\x02\x02\x02\u11B9" +
		"\u11C6\x03\x02\x02\x02\u11BA\u11B8\x03\x02\x02\x02\u11BB\u11BD\x05\u030C" +
		"\u0187\x02\u11BC\u11BE\x05\u030E\u0188\x02\u11BD\u11BC\x03\x02\x02\x02" +
		"\u11BD\u11BE\x03\x02\x02\x02\u11BE\u11BF\x03\x02\x02\x02\u11BF\u11C3\x07" +
		"\u01C3\x02\x02\u11C0\u11C2\x05T+\x02\u11C1\u11C0\x03\x02\x02\x02\u11C2" +
		"\u11C5\x03\x02\x02\x02\u11C3\u11C1\x03\x02\x02\x02\u11C3\u11C4\x03\x02" +
		"\x02\x02\u11C4\u11C7\x03\x02\x02\x02\u11C5\u11C3\x03\x02\x02\x02\u11C6" +
		"\u11BB\x03\x02\x02\x02\u11C6\u11C7\x03\x02\x02\x02\u11C7\u030B\x03\x02" +
		"\x02\x02\u11C8\u11C9\t*\x02\x02\u11C9\u030D\x03\x02\x02\x02\u11CA\u11CC" +
		"\x07\u01A1\x02\x02\u11CB\u11CA\x03\x02\x02\x02\u11CB\u11CC\x03\x02\x02" +
		"\x02\u11CC\u11CD\x03\x02\x02\x02\u11CD\u11CE\x07o\x02\x02\u11CE\u11CF" +
		"\x07\xF9\x02\x02\u11CF\u030F\x03\x02\x02\x02\u11D0\u11D1\x07\u0106\x02" +
		"\x02\u11D1\u11D5\x07\u01C3\x02\x02\u11D2\u11D4\x05T+\x02\u11D3\u11D2\x03" +
		"\x02\x02\x02\u11D4\u11D7\x03\x02\x02\x02\u11D5\u11D3\x03\x02\x02\x02\u11D5" +
		"\u11D6\x03\x02\x02\x02\u11D6\u11E9\x03\x02\x02\x02\u11D7\u11D5\x03\x02" +
		"\x02\x02\u11D8\u11DA\x05\u030C\u0187\x02\u11D9\u11DB\x05\u0312\u018A\x02" +
		"\u11DA\u11D9\x03\x02\x02\x02\u11DA\u11DB\x03\x02\x02\x02\u11DB\u11DD\x03" +
		"\x02\x02\x02\u11DC\u11DE\x05\u0318\u018D\x02\u11DD\u11DC\x03\x02\x02\x02" +
		"\u11DD\u11DE\x03\x02\x02\x02\u11DE\u11E0\x03\x02\x02\x02\u11DF\u11E1\x05" +
		"\u031C\u018F\x02\u11E0\u11DF\x03\x02\x02\x02\u11E0\u11E1\x03\x02\x02\x02" +
		"\u11E1\u11E2\x03\x02\x02\x02\u11E2\u11E6\x07\u01C3\x02\x02\u11E3\u11E5" +
		"\x05T+\x02\u11E4\u11E3\x03\x02\x02\x02\u11E5\u11E8\x03\x02\x02\x02\u11E6" +
		"\u11E4\x03\x02\x02\x02\u11E6\u11E7\x03\x02\x02\x02\u11E7\u11EA\x03\x02" +
		"\x02\x02\u11E8\u11E6\x03\x02\x02\x02\u11E9\u11D8\x03\x02\x02\x02\u11E9" +
		"\u11EA\x03\x02\x02\x02\u11EA\u0311\x03\x02\x02\x02\u11EB\u11ED\x07\xF7" +
		"\x02\x02\u11EC\u11EE\x07\u0163\x02\x02\u11ED\u11EC\x03\x02\x02\x02\u11ED" +
		"\u11EE\x03\x02\x02\x02\u11EE\u11EF\x03\x02\x02\x02\u11EF\u11F0\x05\u0314" +
		"\u018B\x02\u11F0\u11F1\x05\u0316\u018C\x02\u11F1\u0313\x03\x02\x02\x02" +
		"\u11F2\u11F3\t\n\x02\x02\u11F3\u0315\x03\x02\x02\x02\u11F4\u11F5\t+\x02" +
		"\x02\u11F5\u0317\x03\x02\x02\x02\u11F6\u11F8\x07\u012B\x02\x02\u11F7\u11F6" +
		"\x03\x02\x02\x02\u11F7\u11F8\x03\x02\x02\x02\u11F8\u11FA\x03\x02\x02\x02" +
		"\u11F9\u11FB\x07B\x02\x02\u11FA\u11F9\x03\x02\x02\x02\u11FA\u11FB\x03" +
		"\x02\x02\x02\u11FB\u11FC\x03\x02\x02\x02\u11FC\u11FE\x07\u015E\x02\x02" +
		"\u11FD\u11FF\x07\xDE\x02\x02\u11FE\u11FD\x03\x02\x02\x02\u11FE\u11FF\x03" +
		"\x02\x02\x02\u11FF\u1200\x03\x02\x02\x02\u1200\u1201\x05\u031A\u018E\x02" +
		"\u1201\u0319\x03\x02\x02\x02\u1202\u1203\x07\u01C9\x02\x02\u1203\u031B" +
		"\x03\x02\x02\x02\u1204\u1206\x07\u015A\x02\x02\u1205\u1207\x07\xDE\x02" +
		"\x02\u1206\u1205\x03\x02\x02\x02\u1206\u1207\x03\x02\x02\x02\u1207\u1208" +
		"\x03\x02\x02\x02\u1208\u1209\x05\u031E\u0190\x02\u1209\u031D\x03\x02\x02" +
		"\x02\u120A\u120B\t\n\x02\x02\u120B\u031F\x03\x02\x02\x02\u120C\u120D\x07" +
		"\u016A\x02\x02\u120D\u1211\x07\u01C3\x02\x02\u120E\u1210\x05T+\x02\u120F" +
		"\u120E\x03\x02\x02\x02\u1210\u1213\x03\x02\x02\x02\u1211\u120F\x03\x02" +
		"\x02\x02\u1211\u1212\x03\x02\x02\x02\u1212\u121C\x03\x02\x02\x02\u1213" +
		"\u1211\x03\x02\x02\x02\u1214\u1215\x05\u0322\u0192\x02\u1215\u1219\x07" +
		"\u01C3\x02\x02\u1216\u1218\x05T+\x02\u1217\u1216\x03\x02\x02\x02\u1218" +
		"\u121B\x03\x02\x02\x02\u1219\u1217\x03\x02\x02\x02\u1219\u121A\x03\x02" +
		"\x02\x02\u121A\u121D\x03\x02\x02\x02\u121B\u1219\x03\x02\x02\x02\u121C" +
		"\u1214\x03\x02\x02\x02\u121C\u121D\x03\x02\x02\x02\u121D\u0321\x03\x02" +
		"\x02\x02\u121E\u1221\x05\u0328\u0195\x02\u121F\u1221\x05\u032C\u0197\x02" +
		"\u1220\u121E\x03\x02\x02\x02\u1220\u121F\x03\x02\x02\x02\u1221\u1224\x03" +
		"\x02\x02\x02\u1222\u1220\x03\x02\x02\x02\u1222\u1223\x03\x02\x02\x02\u1223" +
		"\u1228\x03\x02\x02\x02\u1224\u1222\x03\x02\x02\x02\u1225\u1227\x05\u0354" +
		"\u01AB\x02\u1226\u1225\x03\x02\x02\x02\u1227\u122A\x03\x02\x02\x02\u1228" +
		"\u1226\x03\x02\x02\x02\u1228\u1229\x03\x02\x02\x02\u1229\u122E\x03\x02" +
		"\x02\x02\u122A\u1228\x03\x02\x02\x02\u122B\u122D\x05\u0348\u01A5\x02\u122C" +
		"\u122B\x03\x02\x02\x02\u122D\u1230\x03\x02\x02\x02\u122E\u122C\x03\x02" +
		"\x02\x02\u122E\u122F\x03\x02\x02\x02\u122F\u1234\x03\x02\x02\x02\u1230" +
		"\u122E\x03\x02\x02\x02\u1231\u1233\x05\u0342\u01A2\x02\u1232\u1231\x03" +
		"\x02\x02\x02\u1233\u1236\x03\x02\x02\x02\u1234\u1232\x03\x02\x02\x02\u1234" +
		"\u1235\x03\x02\x02\x02\u1235\u123A\x03\x02\x02\x02\u1236\u1234\x03\x02" +
		"\x02\x02\u1237\u1239\x05\u033A\u019E\x02\u1238\u1237\x03\x02\x02\x02\u1239" +
		"\u123C\x03\x02\x02\x02\u123A\u1238\x03\x02\x02\x02\u123A\u123B\x03\x02" +
		"\x02\x02\u123B\u1242\x03\x02\x02\x02\u123C\u123A\x03\x02\x02\x02\u123D" +
		"\u123F\x07p\x02\x02\u123E\u1240\x07\xDE\x02\x02\u123F\u123E\x03\x02\x02" +
		"\x02\u123F\u1240\x03\x02\x02\x02\u1240\u1241\x03\x02\x02\x02\u1241\u1243" +
		"\x07D\x02\x02\u1242\u123D\x03\x02\x02\x02\u1242\u1243\x03\x02\x02\x02" +
		"\u1243\u1245\x03\x02\x02\x02\u1244\u1246\x05\u0324\u0193\x02\u1245\u1244" +
		"\x03\x02\x02\x02\u1245\u1246\x03\x02\x02\x02\u1246\u1248\x03\x02\x02\x02" +
		"\u1247\u1249\x05\u0326\u0194\x02\u1248\u1247\x03\x02\x02\x02\u1248\u1249" +
		"\x03\x02\x02\x02\u1249\u0323\x03\x02\x02\x02\u124A\u124C\x07g\x02\x02" +
		"\u124B\u124D\x07\xDE\x02\x02\u124C\u124B\x03\x02\x02\x02\u124C\u124D\x03" +
		"\x02\x02\x02\u124D\u124E\x03\x02\x02\x02\u124E\u124F\x05\u0338\u019D\x02" +
		"\u124F\u0325\x03\x02\x02\x02\u1250\u1251\x07d\x02\x02\u1251\u1253\x07" +
		"\u016F\x02\x02\u1252\u1254\x07\xDE\x02\x02\u1253\u1252\x03\x02\x02\x02" +
		"\u1253\u1254\x03\x02\x02\x02\u1254\u1255\x03\x02\x02\x02\u1255\u1256\x05" +
		"\u0338\u019D\x02\u1256\u0327\x03\x02\x02\x02\u1257\u1259\x05\u032A\u0196" +
		"\x02\u1258\u125A\x07\xDE\x02\x02\u1259\u1258\x03\x02\x02\x02\u1259\u125A" +
		"\x03\x02\x02\x02\u125A\u125B\x03\x02\x02\x02\u125B\u125C\x05\u0362\u01B2" +
		"\x02\u125C\u0329\x03\x02\x02\x02\u125D\u125E\t,\x02\x02\u125E\u032B\x03" +
		"\x02\x02\x02\u125F\u1260\x07\u0176\x02\x02\u1260\u1263\x05\u0336\u019C" +
		"\x02\u1261\u1263\x07\u0177\x02\x02\u1262\u125F\x03\x02\x02\x02\u1262\u1261" +
		"\x03\x02\x02\x02\u1263\u1268\x03\x02\x02\x02\u1264\u1266\x07\xDE\x02\x02" +
		"\u1265\u1264\x03\x02\x02\x02\u1265\u1266\x03\x02\x02\x02\u1266\u1267\x03" +
		"\x02\x02\x02\u1267\u1269\x05\u0334\u019B\x02\u1268\u1265\x03\x02\x02\x02" +
		"\u1268\u1269\x03\x02\x02\x02\u1269\u1272\x03\x02\x02\x02\u126A\u126C\x05" +
		"\u032E\u0198\x02\u126B\u126D\x05\u0330\u0199\x02\u126C\u126B\x03\x02\x02" +
		"\x02\u126C\u126D\x03\x02\x02\x02\u126D\u1273\x03\x02\x02\x02\u126E\u1270" +
		"\x05\u0330\u0199\x02\u126F\u1271\x05\u032E\u0198\x02\u1270\u126F\x03\x02" +
		"\x02\x02\u1270\u1271\x03\x02\x02\x02\u1271\u1273\x03\x02\x02\x02\u1272" +
		"\u126A\x03\x02\x02\x02\u1272\u126E\x03\x02\x02\x02\u1272\u1273\x03\x02" +
		"\x02\x02\u1273\u032D\x03\x02\x02\x02\u1274\u1276\x07\u010B\x02\x02\u1275" +
		"\u1277\x07\u016F\x02\x02\u1276\u1275\x03\x02\x02\x02\u1276\u1277\x03\x02" +
		"\x02\x02\u1277\u1279\x03\x02\x02\x02\u1278\u127A\x07\xDE\x02\x02\u1279" +
		"\u1278\x03\x02\x02\x02\u1279\u127A\x03\x02\x02\x02\u127A\u127B\x03\x02" +
		"\x02\x02\u127B\u127C\x05\u0332\u019A\x02\u127C\u032F\x03\x02\x02\x02\u127D" +
		"\u127F\x07\u0109\x02\x02\u127E\u1280\x07\u016F\x02\x02\u127F\u127E\x03" +
		"\x02\x02\x02\u127F\u1280\x03\x02\x02\x02\u1280\u1282\x03\x02\x02\x02\u1281" +
		"\u1283\x07\xDE\x02\x02\u1282\u1281\x03\x02\x02\x02\u1282\u1283\x03\x02" +
		"\x02\x02\u1283\u1284\x03\x02\x02\x02\u1284\u1285\x05\u0332\u019A\x02\u1285" +
		"\u0331\x03\x02\x02\x02\u1286\u1287\x07\u01C9\x02\x02\u1287\u0333\x03\x02" +
		"\x02\x02\u1288\u1289\x07\u01C9\x02\x02\u1289\u0335\x03\x02\x02\x02\u128A" +
		"\u128B\t\n\x02\x02\u128B\u0337\x03\x02\x02\x02\u128C\u1291\x07\u01C9\x02" +
		"\x02\u128D\u128E\t-\x02\x02\u128E\u1290\x07\u01C9\x02\x02\u128F\u128D" +
		"\x03\x02\x02\x02\u1290\u1293\x03\x02\x02\x02\u1291\u128F\x03\x02\x02\x02" +
		"\u1291\u1292\x03\x02\x02\x02\u1292\u0339\x03\x02\x02\x02\u1293\u1291\x03" +
		"\x02\x02\x02\u1294\u1296\x07e\x02\x02\u1295\u1297\x07\u0161\x02\x02\u1296" +
		"\u1295\x03\x02\x02\x02\u1296\u1297\x03\x02\x02\x02\u1297\u1299\x03\x02" +
		"\x02\x02\u1298\u129A\x07\xDE\x02\x02\u1299\u1298\x03\x02\x02\x02\u1299" +
		"\u129A\x03\x02\x02\x02\u129A\u129B\x03\x02\x02\x02\u129B\u129C\x05\u033C" +
		"\u019F\x02\u129C\u033B\x03\x02\x02\x02\u129D\u129F\x05\u033E\u01A0\x02" +
		"\u129E\u12A0\x07\u01A1\x02\x02\u129F\u129E\x03\x02\x02\x02\u129F\u12A0" +
		"\x03\x02\x02\x02\u12A0\u12A1\x03\x02\x02\x02\u12A1\u12A2\x07\u01AF\x02" +
		"\x02\u12A2\u12A3\t.\x02\x02\u12A3\u12A5\x03\x02\x02\x02\u12A4\u129D\x03" +
		"\x02\x02\x02\u12A4\u12A5\x03\x02\x02\x02\u12A5\u12A6\x03\x02\x02\x02\u12A6" +
		"\u12A7\x05\u0340\u01A1\x02\u12A7\u033D\x03\x02\x02\x02\u12A8\u12A9\x07" +
		"\x03\x02\x02\u12A9\u033F\x03\x02\x02\x02\u12AA\u12AB\x07\x03\x02\x02\u12AB" +
		"\u0341\x03\x02\x02\x02\u12AC\u12AD\x07=\x02\x02\u12AD\u12AF\x05\u0344" +
		"\u01A3\x02\u12AE\u12B0\x07\xDE\x02\x02\u12AF\u12AE\x03\x02\x02\x02\u12AF" +
		"\u12B0\x03\x02\x02\x02\u12B0\u12B2\x03\x02\x02\x02\u12B1\u12B3\x05\u0346" +
		"\u01A4\x02\u12B2\u12B1\x03\x02\x02\x02\u12B3\u12B4\x03\x02\x02\x02\u12B4" +
		"\u12B2\x03\x02\x02\x02\u12B4\u12B5\x03\x02\x02\x02\u12B5\u0343\x03\x02" +
		"\x02\x02\u12B6\u12B7\x07\u01C9\x02\x02\u12B7\u0345\x03\x02\x02\x02\u12B8" +
		"\u12BB\x05\u035A\u01AE\x02\u12B9\u12BA\t\x12\x02\x02\u12BA\u12BC\x05\u035C" +
		"\u01AF\x02\u12BB\u12B9\x03\x02\x02\x02\u12BB\u12BC\x03\x02\x02\x02\u12BC" +
		"\u0347\x03\x02\x02\x02\u12BD\u12BF\x07\u0179\x02\x02\u12BE\u12C0\x07<" +
		"\x02\x02\u12BF\u12BE\x03\x02\x02\x02\u12BF\u12C0\x03\x02\x02\x02\u12C0" +
		"\u12C2\x03\x02\x02\x02\u12C1\u12C3\x05\u034A\u01A6\x02\u12C2\u12C1\x03" +
		"\x02\x02\x02\u12C3\u12C4\x03\x02\x02\x02\u12C4\u12C2\x03\x02\x02\x02\u12C4" +
		"\u12C5\x03\x02\x02\x02\u12C5\u0349\x03\x02\x02\x02\u12C6\u12C8\x05\u034C" +
		"\u01A7\x02\u12C7\u12C6\x03\x02\x02\x02\u12C8\u12C9\x03\x02\x02\x02\u12C9" +
		"\u12C7\x03\x02\x02\x02\u12C9\u12CA\x03\x02\x02\x02\u12CA\u12CC\x03\x02" +
		"\x02\x02\u12CB\u12CD\x05\u034E\u01A8\x02\u12CC\u12CB\x03\x02\x02\x02\u12CC" +
		"\u12CD\x03\x02\x02\x02\u12CD\u034B\x03\x02\x02\x02\u12CE\u12D0\x05\u0350" +
		"\u01A9\x02\u12CF\u12CE\x03\x02\x02\x02\u12D0\u12D1\x03\x02\x02\x02\u12D1" +
		"\u12CF\x03\x02\x02\x02\u12D1\u12D2\x03\x02\x02\x02\u12D2\u12D4\x03\x02" +
		"\x02\x02\u12D3\u12D5\t/\x02\x02\u12D4\u12D3\x03\x02\x02\x02\u12D4\u12D5" +
		"\x03\x02\x02\x02\u12D5\u12D7\x03\x02\x02\x02\u12D6\u12D8\x05\u0352\u01AA" +
		"\x02\u12D7\u12D6\x03\x02\x02\x02\u12D8\u12D9\x03\x02\x02\x02\u12D9\u12D7" +
		"\x03\x02\x02\x02\u12D9\u12DA\x03\x02\x02\x02\u12DA\u034D\x03\x02\x02\x02" +
		"\u12DB\u12DC\x07\xD1\x02\x02\u12DC\u12DD\x05\u031A\u018E\x02\u12DD\u034F" +
		"\x03\x02\x02\x02\u12DE\u12DF\x07\u01C9\x02\x02\u12DF\u0351\x03\x02\x02" +
		"\x02\u12E0";
	private static readonly _serializedATNSegment9: string =
		"\u12E1\t\n\x02\x02\u12E1\u0353\x03\x02\x02\x02\u12E2\u12E3\x07\f\x02\x02" +
		"\u12E3\u12E5\x05\u031A\u018E\x02\u12E4\u12E6\x07\xDE\x02\x02\u12E5\u12E4" +
		"\x03\x02\x02\x02\u12E5\u12E6\x03\x02\x02\x02\u12E6\u12E7\x03\x02\x02\x02" +
		"\u12E7\u12E8\x05\u0356\u01AC\x02\u12E8\u0355\x03\x02\x02\x02\u12E9\u12F4" +
		"\x07\x1F\x02\x02\u12EA\u12F4\x07\u016C\x02\x02\u12EB\u12F4\x07\u016D\x02" +
		"\x02\u12EC\u12F4\x07\xFE\x02\x02\u12ED\u12F4\x07\x84\x02\x02\u12EE\u12F0" +
		"\x05\u0358\u01AD\x02\u12EF\u12EE\x03\x02\x02\x02\u12F0\u12F1\x03\x02\x02" +
		"\x02\u12F1\u12EF\x03\x02\x02\x02\u12F1\u12F2\x03\x02\x02\x02\u12F2\u12F4" +
		"\x03\x02\x02\x02\u12F3\u12E9\x03\x02\x02\x02\u12F3\u12EA\x03\x02\x02\x02" +
		"\u12F3\u12EB\x03\x02\x02\x02\u12F3\u12EC\x03\x02\x02\x02\u12F3\u12ED\x03" +
		"\x02\x02\x02\u12F3\u12EF\x03\x02\x02\x02\u12F4\u0357\x03\x02\x02\x02\u12F5" +
		"\u12F8\x05\u035A\u01AE\x02\u12F6\u12F7\t\x12\x02\x02\u12F7\u12F9\x05\u035C" +
		"\u01AF\x02\u12F8\u12F6\x03\x02\x02\x02\u12F8\u12F9\x03\x02\x02\x02\u12F9" +
		"\u1302\x03\x02\x02\x02\u12FA\u12FD\x05\u035A\u01AE\x02\u12FB\u12FC\x07" +
		"\x12\x02\x02\u12FC\u12FE\x05\u035E\u01B0\x02\u12FD\u12FB\x03\x02\x02\x02" +
		"\u12FE\u12FF\x03\x02\x02\x02\u12FF\u12FD\x03\x02\x02\x02\u12FF\u1300\x03" +
		"\x02\x02\x02\u1300\u1302\x03\x02\x02\x02\u1301\u12F5\x03\x02\x02\x02\u1301" +
		"\u12FA\x03\x02\x02\x02\u1302\u0359\x03\x02\x02\x02\u1303\u1306\x07\x03" +
		"\x02\x02\u1304\u1306\t\n\x02\x02\u1305\u1303\x03\x02\x02\x02\u1305\u1304" +
		"\x03\x02\x02\x02\u1306\u035B\x03\x02\x02\x02\u1307\u130A\x07\x03\x02\x02" +
		"\u1308\u130A\t\n\x02\x02\u1309\u1307\x03\x02\x02\x02\u1309\u1308\x03\x02" +
		"\x02\x02\u130A\u035D\x03\x02\x02\x02\u130B\u130E\x07\x03\x02\x02\u130C" +
		"\u130E\t\n\x02\x02\u130D\u130B\x03\x02\x02\x02\u130D\u130C\x03\x02\x02" +
		"\x02\u130E\u035F\x03\x02\x02\x02\u130F\u1310\x07\u01C9\x02\x02\u1310\u0361" +
		"\x03\x02\x02\x02\u1311\u1312\x07\u01C9\x02\x02\u1312\u0363\x03\x02\x02" +
		"\x02\u1313\u1314\x07\xB3\x02\x02\u1314\u1318\x07\u01C3\x02\x02\u1315\u1317" +
		"\x05T+\x02\u1316\u1315\x03\x02\x02\x02\u1317\u131A\x03\x02\x02\x02\u1318" +
		"\u1316\x03\x02\x02\x02\u1318\u1319\x03\x02\x02\x02\u1319\u131E\x03\x02" +
		"\x02\x02\u131A\u1318\x03\x02\x02\x02\u131B\u131D\x05\u0366\u01B4\x02\u131C" +
		"\u131B\x03\x02\x02\x02\u131D\u1320\x03\x02\x02\x02\u131E\u131C\x03\x02" +
		"\x02\x02\u131E\u131F\x03\x02\x02\x02\u131F\u0365\x03\x02\x02\x02\u1320" +
		"\u131E\x03\x02\x02\x02\u1321\u1323\x07\u015B\x02\x02\u1322\u1324\x07\u010D" +
		"\x02\x02\u1323\u1322\x03\x02\x02\x02\u1323\u1324\x03\x02\x02\x02\u1324" +
		"\u1325\x03\x02\x02\x02\u1325\u1327\x05\u0398\u01CD\x02\u1326\u1328\x05" +
		"\u0368\u01B5\x02\u1327\u1326\x03\x02\x02\x02\u1328\u1329\x03\x02\x02\x02" +
		"\u1329\u1327\x03\x02\x02\x02\u1329\u132A\x03\x02\x02\x02\u132A\u132B\x03" +
		"\x02\x02\x02\u132B\u132F\x07\u01C3\x02\x02\u132C\u132E\x05T+\x02\u132D" +
		"\u132C\x03\x02\x02\x02\u132E\u1331\x03\x02\x02\x02\u132F\u132D\x03\x02" +
		"\x02\x02\u132F\u1330\x03\x02\x02\x02\u1330\u0367\x03\x02\x02\x02\u1331" +
		"\u132F\x03\x02\x02\x02\u1332\u133F\x05\u0392\u01CA\x02\u1333\u133F\x05" +
		"\u037A\u01BE\x02\u1334\u133F\x05\u0384\u01C3\x02\u1335\u133F\x05\u0380" +
		"\u01C1\x02\u1336\u133F\x05\u037E\u01C0\x02\u1337\u133F\x05\u0386\u01C4" +
		"\x02\u1338\u133F\x05\u038C\u01C7\x02\u1339\u133F\x05\u038A\u01C6\x02\u133A" +
		"\u133F\x05\u0378\u01BD\x02\u133B\u133F\x05\u036E\u01B8\x02\u133C\u133F" +
		"\x05\u0370\u01B9\x02\u133D\u133F\x05\u036A\u01B6\x02\u133E\u1332\x03\x02" +
		"\x02\x02\u133E\u1333\x03\x02\x02\x02\u133E\u1334\x03\x02\x02\x02\u133E" +
		"\u1335\x03\x02\x02\x02\u133E\u1336\x03\x02\x02\x02\u133E\u1337\x03\x02" +
		"\x02\x02\u133E\u1338\x03\x02\x02\x02\u133E\u1339\x03\x02\x02\x02\u133E" +
		"\u133A\x03\x02\x02\x02\u133E\u133B\x03\x02\x02\x02\u133E\u133C\x03\x02" +
		"\x02\x02\u133E\u133D\x03\x02\x02\x02\u133F\u0369\x03\x02\x02\x02\u1340" +
		"\u1342\x07\xB2\x02\x02\u1341\u1340\x03\x02\x02\x02\u1341\u1342\x03\x02" +
		"\x02\x02\u1342\u1343\x03\x02\x02\x02\u1343\u1345\x07\u016F\x02\x02\u1344" +
		"\u1346\x07\xDE\x02\x02\u1345\u1344\x03\x02\x02\x02\u1345\u1346\x03\x02" +
		"\x02\x02\u1346\u1347\x03\x02\x02\x02\u1347\u1348\x05\u036C\u01B7\x02\u1348" +
		"\u036B\x03\x02\x02\x02\u1349\u134A\x05\u0338\u019D\x02\u134A\u036D\x03" +
		"\x02\x02\x02\u134B\u134D\x07\u0134\x02\x02\u134C\u134E\x07\xE3\x02\x02" +
		"\u134D\u134C\x03\x02\x02\x02\u134D\u134E\x03\x02\x02\x02\u134E\u1350\x03" +
		"\x02\x02\x02\u134F\u1351\x07\xDE\x02\x02\u1350\u134F\x03\x02\x02\x02\u1350" +
		"\u1351\x03\x02\x02\x02\u1351\u1352\x03\x02\x02\x02\u1352\u1357\x05\u0372" +
		"\u01BA\x02\u1353\u1355\x07\u01A1\x02\x02\u1354\u1353\x03\x02\x02\x02\u1354" +
		"\u1355\x03\x02\x02\x02\u1355\u1356\x03\x02\x02\x02\u1356\u1358\x07\x82" +
		"\x02\x02\u1357\u1354\x03\x02\x02\x02\u1357\u1358\x03\x02\x02\x02\u1358" +
		"\u135A\x03\x02\x02\x02\u1359\u135B\t\r\x02\x02\u135A\u1359\x03\x02\x02" +
		"\x02\u135A\u135B\x03\x02\x02\x02\u135B\u036F\x03\x02\x02\x02\u135C\u135D" +
		"\x07\x14\x02\x02\u135D\u135F\x07\u0134\x02\x02\u135E\u1360\x07\xE3\x02" +
		"\x02\u135F\u135E\x03\x02\x02\x02\u135F\u1360\x03\x02\x02\x02\u1360\u1362" +
		"\x03\x02\x02\x02\u1361\u1363\x07\xDE\x02\x02\u1362\u1361\x03\x02\x02\x02" +
		"\u1362\u1363\x03\x02\x02\x02\u1363\u1364\x03\x02\x02\x02\u1364\u1369\x05" +
		"\u0372\u01BA\x02\u1365\u1367\x07\u01A1\x02\x02\u1366\u1365\x03\x02\x02" +
		"\x02\u1366\u1367\x03\x02\x02\x02\u1367\u1368\x03\x02\x02\x02\u1368\u136A" +
		"\x07\x82\x02\x02\u1369\u1366\x03\x02\x02\x02\u1369\u136A\x03\x02\x02\x02" +
		"\u136A\u136C\x03\x02\x02\x02\u136B\u136D\t\r\x02\x02\u136C\u136B\x03\x02" +
		"\x02\x02\u136C\u136D\x03\x02\x02\x02\u136D\u0371\x03\x02\x02\x02\u136E" +
		"\u1377\x05\u0376\u01BC\x02\u136F\u1370\x05\u0374\u01BB\x02\u1370\u1372" +
		"\x07\u01B8\x02\x02\u1371\u1373\x05\u0376\u01BC\x02\u1372\u1371\x03\x02" +
		"\x02\x02\u1373\u1374\x03\x02\x02\x02\u1374\u1372\x03\x02\x02\x02\u1374" +
		"\u1375\x03\x02\x02\x02\u1375\u1377\x03\x02\x02\x02\u1376\u136E\x03\x02" +
		"\x02\x02\u1376\u136F\x03\x02\x02\x02\u1377\u0373\x03\x02\x02\x02\u1378" +
		"\u1379\x07\u01C9\x02\x02\u1379\u0375\x03\x02\x02\x02\u137A\u137B\x05\u0338" +
		"\u019D\x02\u137B\u0377\x03\x02\x02\x02\u137C\u137E\x07\x05\x02\x02\u137D" +
		"\u137F\x07\xF9\x02\x02\u137E\u137D\x03\x02\x02\x02\u137E\u137F\x03\x02" +
		"\x02\x02\u137F\u1381\x03\x02\x02\x02\u1380\u1382\x07\xDE\x02\x02\u1381" +
		"\u1380\x03\x02\x02\x02\u1381\u1382\x03\x02\x02\x02\u1382\u1384\x03\x02" +
		"\x02\x02\u1383\u137C\x03\x02\x02\x02\u1383\u1384\x03\x02\x02\x02\u1384" +
		"\u1385\x03\x02\x02\x02\u1385\u138E\t0\x02\x02\u1386\u1388\x07\u013A\x02" +
		"\x02\u1387\u1389\x07\xE3\x02\x02\u1388\u1387\x03\x02\x02\x02\u1388\u1389" +
		"\x03\x02\x02\x02\u1389\u138B\x03\x02\x02\x02\u138A\u138C\x07\xDE\x02\x02" +
		"\u138B\u138A\x03\x02\x02\x02\u138B\u138C\x03\x02\x02\x02\u138C\u138D\x03" +
		"\x02\x02\x02\u138D\u138F\x05\u0338\u019D\x02\u138E\u1386\x03\x02\x02\x02" +
		"\u138E\u138F\x03\x02\x02\x02\u138F\u0379\x03\x02\x02\x02\u1390\u1391\x07" +
		"\u0146\x02\x02\u1391\u1393\x05\u037C\u01BF\x02\u1392\u1394\t1\x02\x02" +
		"\u1393\u1392\x03\x02\x02\x02\u1393\u1394\x03\x02\x02\x02\u1394\u037B\x03" +
		"\x02\x02\x02\u1395\u1396\t\n\x02\x02\u1396\u037D\x03\x02\x02\x02\u1397" +
		"\u1398\x07\u0134\x02\x02\u1398\u139A\x07v\x02\x02\u1399\u139B\x07\xDE" +
		"\x02\x02\u139A\u1399\x03\x02\x02\x02\u139A\u139B\x03\x02\x02\x02\u139B" +
		"\u139C\x03\x02\x02\x02\u139C\u139D\x07\u016C\x02\x02\u139D\u037F\x03\x02" +
		"\x02\x02\u139E\u13A0\x07\u0117\x02\x02\u139F\u13A1\x07;\x02\x02\u13A0" +
		"\u139F\x03\x02\x02\x02\u13A0\u13A1\x03\x02\x02\x02\u13A1\u13A3\x03\x02" +
		"\x02\x02\u13A2\u13A4\x07\xDE\x02\x02\u13A3\u13A2\x03\x02\x02\x02\u13A3" +
		"\u13A4\x03\x02\x02\x02\u13A4\u13A5\x03\x02\x02\x02\u13A5\u13A6\x05\u0382" +
		"\u01C2\x02\u13A6\u0381\x03\x02\x02\x02\u13A7\u13A8\x07\x03\x02\x02\u13A8" +
		"\u0383\x03\x02\x02\x02\u13A9\u13AB\x07\u0111\x02\x02\u13AA\u13AC\x07\xDE" +
		"\x02\x02\u13AB\u13AA\x03\x02\x02\x02\u13AB\u13AC\x03\x02\x02\x02\u13AC" +
		"\u13AE\x03\x02\x02\x02\u13AD\u13A9\x03\x02\x02\x02\u13AD\u13AE\x03\x02" +
		"\x02\x02\u13AE\u13B4\x03\x02\x02\x02\u13AF\u13B5\x07\u015F\x02\x02\u13B0" +
		"\u13B1\x07\xEC\x02\x02\u13B1\u13B5\x07\u015F\x02\x02\u13B2\u13B5\x07\u013A" +
		"\x02\x02\u13B3\u13B5\x07\xD3\x02\x02\u13B4\u13AF\x03\x02\x02\x02\u13B4" +
		"\u13B0\x03\x02\x02\x02\u13B4\u13B2\x03\x02\x02\x02\u13B4\u13B3\x03\x02" +
		"\x02\x02\u13B5\u0385\x03\x02\x02\x02\u13B6\u13B8\x07\xF0\x02\x02\u13B7" +
		"\u13B9\x07\xF9\x02\x02\u13B8\u13B7\x03\x02\x02\x02\u13B8\u13B9\x03\x02" +
		"\x02\x02\u13B9\u13BB\x03\x02\x02\x02\u13BA\u13BC\x07\xDE\x02\x02\u13BB" +
		"\u13BA\x03\x02\x02\x02\u13BB\u13BC\x03\x02\x02\x02\u13BC\u13BD\x03\x02" +
		"\x02\x02\u13BD\u13BE\x05\u0388\u01C5\x02\u13BE\u0387\x03\x02\x02\x02\u13BF" +
		"\u13C1\x07\xF5\x02\x02\u13C0\u13C2\x07\u01A1\x02\x02\u13C1\u13C0\x03\x02" +
		"\x02\x02\u13C1\u13C2\x03\x02\x02\x02\u13C2\u13C3\x03\x02\x02\x02\u13C3" +
		"\u13C4\x07\xF0\x02\x02\u13C4\u13C5\x07\u010B\x02\x02\u13C5\u13C6\x07\xFC" +
		"\x02\x02\u13C6\u13D5\x07\u0135\x02\x02\u13C7\u13D1\x07$\x02\x02\u13C8" +
		"\u13CA\x07\u01A1\x02\x02\u13C9\u13C8\x03\x02\x02\x02\u13C9\u13CA\x03\x02" +
		"\x02\x02\u13CA\u13CF\x03\x02\x02\x02\u13CB\u13CC\x07\xF0\x02\x02\u13CC" +
		"\u13CD\x07\u010B\x02\x02\u13CD\u13D0\x07\u0134\x02\x02\u13CE\u13D0\x07" +
		"\u0150\x02\x02\u13CF\u13CB\x03\x02\x02\x02\u13CF\u13CE\x03\x02\x02\x02" +
		"\u13D0\u13D2\x03\x02\x02\x02\u13D1\u13C9\x03\x02\x02\x02\u13D1\u13D2\x03" +
		"\x02\x02\x02\u13D2\u13D5\x03\x02\x02\x02\u13D3\u13D5\x07\xAA\x02\x02\u13D4" +
		"\u13BF\x03\x02\x02\x02\u13D4\u13C7\x03\x02\x02\x02\u13D4\u13D3\x03\x02" +
		"\x02\x02\u13D5\u0389\x03\x02\x02\x02\u13D6\u13D8\x07A\x02\x02\u13D7\u13D9" +
		"\x07\xDE\x02\x02\u13D8\u13D7\x03\x02\x02\x02\u13D8\u13D9\x03\x02\x02\x02" +
		"\u13D9\u13DA\x03\x02\x02\x02\u13DA\u13DB\x05\u031A\u018E\x02\u13DB\u038B" +
		"\x03\x02\x02\x02\u13DC\u13DE\x071\x02\x02\u13DD\u13DF\x07W\x02\x02\u13DE" +
		"\u13DD\x03\x02\x02\x02\u13DE\u13DF\x03\x02\x02\x02\u13DF\u13E3\x03\x02" +
		"\x02\x02\u13E0\u13E1\x05\u038E\u01C8\x02\u13E1\u13E2\x07\u0189\x02\x02" +
		"\u13E2\u13E4\x03\x02\x02\x02\u13E3\u13E0\x03\x02\x02\x02\u13E3\u13E4\x03" +
		"\x02\x02\x02\u13E4\u13E5\x03\x02\x02\x02\u13E5\u13E6\x05\u0390\u01C9\x02" +
		"\u13E6\u13E7\t2\x02\x02\u13E7\u038D\x03\x02\x02\x02\u13E8\u13E9\t\n\x02" +
		"\x02\u13E9\u038F\x03\x02\x02\x02\u13EA\u13EB\t\n\x02\x02\u13EB\u0391\x03" +
		"\x02\x02\x02\u13EC\u13EE\x07 \x02\x02\u13ED\u13EF\x07\u0189\x02\x02\u13EE" +
		"\u13ED\x03\x02\x02\x02\u13EE\u13EF\x03\x02\x02\x02\u13EF\u13F0\x03\x02" +
		"\x02\x02\u13F0\u13F1\x05\u0394\u01CB\x02\u13F1\u0393\x03\x02\x02\x02\u13F2" +
		"\u13F4\t3\x02\x02\u13F3\u13F2\x03\x02\x02\x02\u13F3\u13F4\x03\x02\x02" +
		"\x02\u13F4\u13F5\x03\x02\x02\x02\u13F5\u13FE\x05\u0396\u01CC\x02\u13F6" +
		"\u13F8\x07\xFC\x02\x02\u13F7\u13F6\x03\x02\x02\x02\u13F7\u13F8\x03\x02" +
		"\x02\x02\u13F8\u13F9\x03\x02\x02\x02\u13F9\u13FB\t\x1B\x02\x02\u13FA\u13FC" +
		"\x07\xB2\x02\x02\u13FB\u13FA\x03\x02\x02\x02\u13FB\u13FC\x03\x02\x02\x02" +
		"\u13FC\u13FE\x03\x02\x02\x02\u13FD\u13F3\x03\x02\x02\x02\u13FD\u13F7\x03" +
		"\x02\x02\x02\u13FE\u0395\x03\x02\x02\x02\u13FF\u1404\x07\x03\x02\x02\u1400" +
		"\u1404\x05\u0338\u019D\x02\u1401\u1404\x07}\x02\x02\u1402\u1404\x07\u0125" +
		"\x02\x02\u1403\u13FF\x03\x02\x02\x02\u1403\u1400\x03\x02\x02\x02\u1403" +
		"\u1401\x03\x02\x02\x02\u1403\u1402\x03\x02\x02\x02\u1404\u0397\x03\x02" +
		"\x02\x02\u1405\u1406\x07\u01C9\x02\x02\u1406\u0399\x03\x02\x02\x02\u1407" +
		"\u1408\x07\xE0\x02\x02\u1408\u140C\x07\u01C3\x02\x02\u1409\u140B\x05T" +
		"+\x02\u140A\u1409\x03\x02\x02\x02\u140B\u140E\x03\x02\x02\x02\u140C\u140A" +
		"\x03\x02\x02\x02\u140C\u140D\x03\x02\x02\x02\u140D\u141B\x03\x02\x02\x02" +
		"\u140E\u140C\x03\x02\x02\x02\u140F\u1411\x05\u039C\u01CF\x02\u1410\u140F" +
		"\x03\x02\x02\x02\u1411\u1412\x03\x02\x02\x02\u1412\u1410\x03\x02\x02\x02" +
		"\u1412\u1413\x03\x02\x02\x02\u1413\u1414\x03\x02\x02\x02\u1414\u1418\x07" +
		"\u01C3\x02\x02\u1415\u1417\x05T+\x02\u1416\u1415\x03\x02\x02\x02\u1417" +
		"\u141A\x03\x02\x02\x02\u1418\u1416\x03\x02\x02\x02\u1418\u1419\x03\x02" +
		"\x02\x02\u1419\u141C\x03\x02\x02\x02\u141A\u1418\x03\x02\x02\x02\u141B" +
		"\u1410\x03\x02\x02\x02\u141B\u141C\x03\x02\x02\x02\u141C\u039B\x03\x02" +
		"\x02\x02\u141D\u1422\x05\u03B6\u01DC\x02\u141E\u1422\x05\u03B2\u01DA\x02" +
		"\u141F\u1422\x05\u03A6\u01D4\x02\u1420\u1422\x05\u039E\u01D0\x02\u1421" +
		"\u141D\x03\x02\x02\x02\u1421\u141E\x03\x02\x02\x02\u1421\u141F\x03\x02" +
		"\x02\x02\u1421\u1420\x03\x02\x02\x02\u1422\u039D\x03\x02\x02\x02\u1423" +
		"\u1424\x07\xFC\x02\x02\u1424\u1426\x07\xB2\x02\x02\u1425\u1427\x07\u0180" +
		"\x02\x02\u1426\u1425\x03\x02\x02\x02\u1426\u1427\x03\x02\x02\x02\u1427" +
		"\u1429\x03\x02\x02\x02\u1428\u142A\x07W\x02\x02\u1429\u1428\x03\x02\x02" +
		"\x02\u1429\u142A\x03\x02\x02\x02\u142A\u142C\x03\x02\x02\x02\u142B\u142D" +
		"\x05\u03A0\u01D1\x02\u142C\u142B\x03\x02\x02\x02\u142D\u142E\x03\x02\x02" +
		"\x02\u142E\u142C\x03\x02\x02\x02\u142E\u142F\x03\x02\x02\x02\u142F\u039F" +
		"\x03\x02\x02\x02\u1430\u1433\x05\u03A2\u01D2\x02\u1431\u1432\x07\u0121" +
		"\x02\x02\u1432\u1434\x05\u03A4\u01D3\x02\u1433\u1431\x03\x02\x02\x02\u1433" +
		"\u1434\x03\x02\x02\x02\u1434\u03A1\x03\x02\x02\x02\u1435\u1436\x07\u01C9" +
		"\x02\x02\u1436\u03A3\x03\x02\x02\x02\u1437\u1438\t\n\x02\x02\u1438\u03A5" +
		"\x03\x02\x02\x02\u1439\u143C\x07\u0145\x02\x02\u143A\u143B\x07\u010B\x02" +
		"\x02\u143B\u143D\x05\u0398\u01CD\x02\u143C\u143A\x03\x02\x02\x02\u143C" +
		"\u143D\x03\x02\x02\x02\u143D\u143F\x03\x02\x02\x02\u143E\u1440\x07\xA8" +
		"\x02\x02\u143F\u143E\x03\x02\x02\x02\u143F\u1440\x03\x02\x02\x02\u1440" +
		"\u1441\x03\x02\x02\x02\u1441\u1442\x05\u03A8\u01D5\x02\u1442\u03A7\x03" +
		"\x02\x02\x02\u1443\u1445\x05\u03AE\u01D8\x02\u1444\u1446\x07\u0108\x02" +
		"\x02\u1445\u1444\x03\x02\x02\x02\u1445\u1446\x03\x02\x02\x02\u1446\u1447" +
		"\x03\x02\x02\x02\u1447\u1448\x05\u0398\u01CD\x02\u1448\u144E\x03\x02\x02" +
		"\x02\u1449\u144A\x05\u03AA\u01D6\x02\u144A\u144B\x07>\x02\x02\u144B\u144E" +
		"\x03\x02\x02\x02\u144C\u144E\x05\u03AC\u01D7\x02\u144D\u1443\x03\x02\x02" +
		"\x02\u144D\u1449\x03\x02\x02\x02\u144D\u144C\x03\x02\x02\x02\u144E\u03A9" +
		"\x03\x02\x02\x02\u144F\u1450\t\n\x02\x02\u1450\u03AB\x03\x02\x02\x02\u1451" +
		"\u1452\x07\u01C9\x02\x02\u1452\u03AD\x03\x02\x02\x02\u1453\u1455\x07\x88" +
		"\x02\x02\u1454\u1456\x07\u0108\x02\x02\u1455\u1454\x03\x02\x02\x02\u1455" +
		"\u1456\x03\x02\x02\x02\u1456\u1458\x03\x02\x02\x02\u1457\u1453\x03\x02" +
		"\x02\x02\u1457\u1458\x03\x02\x02\x02\u1458\u1459\x03\x02\x02\x02\u1459" +
		"\u145E\t\x1B\x02\x02\u145A\u145B\x05\u03B0\u01D9\x02\u145B\u145C\x07\u0135" +
		"\x02\x02\u145C\u145E\x03\x02\x02\x02\u145D\u1457\x03\x02\x02\x02\u145D" +
		"\u145A\x03\x02\x02\x02\u145E\u03AF\x03\x02\x02\x02\u145F\u1460\t\n\x02" +
		"\x02\u1460\u03B1\x03\x02\x02\x02\u1461\u1463\x07\u0153\x02\x02\u1462\u1464" +
		"\t4\x02\x02\u1463\u1462\x03\x02\x02\x02\u1463\u1464\x03\x02\x02\x02\u1464" +
		"\u1466\x03\x02\x02\x02\u1465\u1467\x07\x19\x02\x02\u1466\u1465\x03\x02" +
		"\x02\x02\u1466\u1467\x03\x02\x02\x02\u1467\u1469\x03\x02\x02\x02\u1468" +
		"\u146A\x07\xBD\x02\x02\u1469\u1468\x03\x02\x02\x02\u1469\u146A\x03\x02" +
		"\x02\x02\u146A\u146B\x03\x02\x02\x02\u146B\u146D\x05\u03B4\u01DB\x02\u146C" +
		"\u146E\x05\u03B4\u01DB\x02\u146D\u146C\x03\x02\x02\x02\u146E\u146F\x03" +
		"\x02\x02\x02\u146F\u146D\x03\x02\x02\x02\u146F\u1470\x03\x02\x02\x02\u1470" +
		"\u03B3\x03\x02\x02\x02\u1471\u1472\x07\u01C9\x02\x02\u1472\u03B5\x03\x02" +
		"\x02\x02\u1473\u1475\x07\x17\x02\x02\u1474\u1476\x05\u03B8\u01DD\x02\u1475" +
		"\u1474\x03\x02\x02\x02\u1476\u1477\x03\x02\x02\x02\u1477\u1475\x03\x02" +
		"\x02\x02\u1477\u1478\x03\x02\x02\x02\u1478\u1479\x03\x02\x02\x02\u1479" +
		"\u147B\x07\u010B\x02\x02\u147A\u147C\x05\u0398\u01CD\x02\u147B\u147A\x03" +
		"\x02\x02\x02\u147C\u147D\x03\x02\x02\x02\u147D\u147B\x03\x02\x02\x02\u147D" +
		"\u147E\x03\x02\x02\x02\u147E\u03B7\x03\x02\x02\x02\u147F\u148E\x07s\x02" +
		"\x02\u1480\u1481\x07\xAD\x02\x02\u1481\u148E\x05\u03BE\u01E0\x02\u1482" +
		"\u148E\x07\xB6\x02\x02\u1483\u148E\x07\xF1\x02\x02\u1484\u148E\x07\xF6" +
		"\x02\x02\u1485\u1487\t5\x02\x02\u1486\u1485\x03\x02\x02\x02\u1486\u1487" +
		"\x03\x02\x02\x02\u1487\u1488\x03\x02\x02\x02\u1488\u1489\x07\u0123\x02" +
		"\x02\u1489\u148E\x05\u03BC\u01DF\x02\u148A\u148E\x07\u0127\x02\x02\u148B" +
		"\u148C\x07\u01A0\x02\x02\u148C\u148E\x05\u03BA\u01DE\x02\u148D\u147F\x03" +
		"\x02\x02\x02\u148D\u1480\x03\x02\x02\x02\u148D\u1482\x03\x02\x02\x02\u148D" +
		"\u1483\x03\x02\x02\x02\u148D\u1484\x03\x02\x02\x02\u148D\u1486\x03\x02" +
		"\x02\x02\u148D\u148A\x03\x02\x02\x02\u148D\u148B\x03\x02\x02\x02\u148E" +
		"\u03B9\x03\x02\x02\x02\u148F\u1490\t\n\x02\x02\u1490\u03BB\x03\x02\x02" +
		"\x02\u1491\u1492\t\n\x02\x02\u1492\u03BD\x03\x02\x02\x02\u1493\u1494\t" +
		"\n\x02\x02\u1494\u03BF\x03\x02\x02\x02\u1495\u1496\b\u01E1\x01\x02\u1496" +
		"\u1497\x07\u01BD\x02\x02\u1497\u1498\x05\u03C0\u01E1\x02\u1498\u1499\x07" +
		"\u01BE\x02\x02\u1499\u14A0\x03\x02\x02\x02\u149A\u149B\x05\u03C6\u01E4" +
		"\x02\u149B\u149C\x05\u03C0\u01E1\x05\u149C\u14A0\x03\x02\x02\x02\u149D" +
		"\u14A0\x05\u03DA\u01EE\x02\u149E\u14A0\x05\u03C2\u01E2\x02\u149F\u1495" +
		"\x03\x02\x02\x02\u149F\u149A\x03\x02\x02\x02\u149F\u149D\x03\x02\x02\x02" +
		"\u149F\u149E\x03\x02\x02\x02\u14A0\u14A7\x03\x02\x02\x02\u14A1\u14A2\f" +
		"\x06\x02\x02\u14A2\u14A3\x05\u03C4\u01E3\x02\u14A3\u14A4\x05\u03C0\u01E1" +
		"\x07\u14A4\u14A6\x03\x02\x02\x02\u14A5\u14A1\x03\x02\x02\x02\u14A6\u14A9" +
		"\x03\x02\x02\x02\u14A7\u14A5\x03\x02\x02\x02\u14A7\u14A8\x03\x02\x02\x02" +
		"\u14A8\u03C1\x03\x02\x02\x02\u14A9\u14A7\x03\x02\x02\x02\u14AA\u14AE\t" +
		"\f\x02\x02\u14AB\u14AE\x07\x03\x02\x02\u14AC\u14AE\x05\"\x12\x02\u14AD" +
		"\u14AA\x03\x02\x02\x02\u14AD\u14AB\x03\x02\x02\x02\u14AD\u14AC\x03\x02" +
		"\x02\x02\u14AE\u03C3\x03\x02\x02\x02\u14AF\u14B6\x07\u01B3\x02\x02\u14B0" +
		"\u14B6\x07\u01B4\x02\x02\u14B1\u14B6\x07\u01B5\x02\x02\u14B2\u14B6\x07" +
		"\u01B6\x02\x02\u14B3\u14B4\x07\u01B5\x02\x02\u14B4\u14B6\x07\u01B5\x02" +
		"\x02\u14B5\u14AF\x03\x02\x02\x02\u14B5\u14B0\x03\x02\x02\x02\u14B5\u14B1" +
		"\x03\x02\x02\x02\u14B5\u14B2\x03\x02\x02\x02\u14B5\u14B3\x03\x02\x02\x02" +
		"\u14B6\u03C5\x03\x02\x02\x02\u14B7\u14B8\t6\x02\x02\u14B8\u03C7\x03\x02" +
		"\x02\x02\u14B9\u14BA\b\u01E5\x01\x02\u14BA\u14BB\x07\u01BD\x02\x02\u14BB" +
		"\u14BC\x05\u03C8\u01E5\x02\u14BC\u14BD\x07\u01BE\x02\x02\u14BD\u14C2\x03" +
		"\x02\x02\x02\u14BE\u14BF\x07\u0102\x02\x02\u14BF\u14C2\x05\u03C8\u01E5" +
		"\x04\u14C0\u14C2\x05\u03CA\u01E6\x02\u14C1\u14B9\x03\x02\x02\x02\u14C1" +
		"\u14BE\x03\x02\x02\x02\u14C1\u14C0\x03\x02\x02\x02\u14C2\u14C9\x03\x02" +
		"\x02\x02\u14C3\u14C4\f\x05\x02\x02\u14C4\u14C5\x05\u03CE\u01E8\x02\u14C5" +
		"\u14C6\x05\u03C8\u01E5\x06\u14C6\u14C8\x03\x02\x02\x02\u14C7\u14C3\x03" +
		"\x02\x02\x02\u14C8\u14CB\x03\x02\x02\x02\u14C9\u14C7\x03\x02\x02\x02\u14C9" +
		"\u14CA\x03\x02\x02\x02\u14CA\u03C9\x03\x02\x02\x02\u14CB\u14C9\x03\x02" +
		"\x02\x02\u14CC\u14CD\x05\u03C0\u01E1\x02\u14CD\u14CE\x05\u03D6\u01EC\x02" +
		"\u14CE\u14D4\x05\u03C0\u01E1\x02\u14CF\u14D0\x05\u03CE\u01E8\x02\u14D0" +
		"\u14D1\x05\u03CC\u01E7\x02\u14D1\u14D3\x03\x02\x02\x02\u14D2\u14CF\x03" +
		"\x02\x02\x02\u14D3\u14D6\x03\x02\x02\x02\u14D4\u14D2\x03\x02\x02\x02\u14D4" +
		"\u14D5\x03\x02\x02\x02\u14D5\u14F5\x03\x02\x02\x02\u14D6\u14D4\x03\x02" +
		"\x02\x02\u14D7\u14D9\x05\u03C0\u01E1\x02\u14D8\u14DA\x07\xDE\x02\x02\u14D9" +
		"\u14D8\x03\x02\x02\x02\u14D9\u14DA\x03\x02\x02\x02\u14DA\u14DC\x03\x02" +
		"\x02\x02\u14DB\u14DD\x07\u0102\x02\x02\u14DC\u14DB\x03\x02\x02\x02\u14DC" +
		"\u14DD\x03\x02\x02\x02\u14DD\u14E0\x03\x02\x02\x02\u14DE\u14E1\x05\u03D4" +
		"\u01EB\x02\u14DF\u14E1\x05\u03D2\u01EA\x02\u14E0\u14DE\x03\x02\x02\x02" +
		"\u14E0\u14DF\x03\x02\x02\x02\u14E1\u14E7\x03\x02\x02\x02\u14E2\u14E3\x05" +
		"\u03CE\u01E8\x02\u14E3\u14E4\x05\u03CC\u01E7\x02\u14E4\u14E6\x03\x02\x02" +
		"\x02\u14E5\u14E2\x03\x02\x02\x02\u14E6\u14E9\x03\x02\x02\x02\u14E7\u14E5" +
		"\x03\x02\x02\x02\u14E7\u14E8\x03\x02\x02\x02\u14E8\u14F5\x03\x02\x02\x02" +
		"\u14E9\u14E7\x03\x02\x02\x02\u14EA\u14EC\x05\u03C0\u01E1\x02\u14EB\u14ED" +
		"\x07\xDE\x02\x02\u14EC\u14EB\x03\x02\x02\x02\u14EC\u14ED\x03\x02\x02\x02" +
		"\u14ED\u14EF\x03\x02\x02\x02\u14EE\u14F0\x07\u0102\x02\x02\u14EF\u14EE" +
		"\x03\x02\x02\x02\u14EF\u14F0\x03\x02\x02\x02\u14F0\u14F1\x03\x02\x02\x02" +
		"\u14F1\u14F2\t\x10\x02\x02\u14F2\u14F5\x03\x02\x02\x02\u14F3\u14F5\x05" +
		"\u03D8\u01ED\x02\u14F4\u14CC\x03\x02\x02\x02\u14F4\u14D7\x03\x02\x02\x02" +
		"\u14F4\u14EA\x03\x02\x02\x02\u14F4\u14F3\x03\x02\x02\x02\u14F5\u03CB\x03" +
		"\x02\x02\x02\u14F6\u14F8\x05\u03D6\u01EC\x02\u14F7\u14F6\x03\x02\x02\x02" +
		"\u14F7\u14F8\x03\x02\x02\x02\u14F8\u14F9\x03\x02\x02\x02\u14F9\u14FA\x05" +
		"\u03C0\u01E1\x02\u14FA\u03CD\x03\x02\x02\x02\u14FB\u14FC\t7\x02\x02\u14FC" +
		"\u03CF\x03\x02\x02\x02\u14FD\u14FE\t\x10\x02\x02\u14FE\u03D1\x03\x02\x02" +
		"\x02\u14FF\u1500\t8\x02\x02\u1500\u03D3\x03\x02\x02\x02\u1501\u1502\t" +
		"9\x02\x02\u1502\u03D5\x03\x02\x02\x02\u1503\u1505\x07\xDE\x02\x02\u1504" +
		"\u1503\x03\x02\x02\x02\u1504\u1505\x03\x02\x02\x02\u1505\u1537\x03\x02" +
		"\x02\x02\u1506\u1508\x07\u0102\x02\x02\u1507\u1506\x03\x02\x02\x02\u1507" +
		"\u1508\x03\x02\x02\x02\u1508\u1521\x03\x02\x02\x02\u1509\u150B\x07\xC6" +
		"\x02\x02\u150A\u150C\x07\u0183\x02\x02\u150B\u150A\x03\x02\x02\x02\u150B" +
		"\u150C\x03\x02\x02\x02\u150C\u1522\x03\x02\x02\x02\u150D\u150F\x07\u01BC" +
		"\x02\x02\u150E\u1510\x07\u0183\x02\x02\u150F\u150E\x03\x02\x02\x02\u150F" +
		"\u1510\x03\x02\x02\x02\u1510\u1522\x03\x02\x02\x02\u1511\u1513\x07\xE8" +
		"\x02\x02\u1512\u1514\x07\u0183\x02\x02\u1513\u1512\x03\x02\x02\x02\u1513" +
		"\u1514\x03\x02\x02\x02\u1514\u1522\x03\x02\x02\x02\u1515\u1517\x07\u01B9" +
		"\x02\x02\u1516\u1518\x07\u0183\x02\x02\u1517\u1516\x03\x02\x02\x02\u1517" +
		"\u1518\x03\x02\x02\x02\u1518\u1522\x03\x02\x02\x02\u1519\u151B\x07\xA4" +
		"\x02\x02\u151A\u151C\x07\u0189\x02\x02\u151B\u151A\x03\x02\x02\x02\u151B" +
		"\u151C\x03\x02\x02\x02\u151C\u1522\x03\x02\x02\x02\u151D\u151F\x07\u01B8" +
		"\x02\x02\u151E\u1520\x07\u0189\x02\x02\u151F\u151E\x03\x02\x02\x02\u151F" +
		"\u1520\x03\x02\x02\x02\u1520\u1522\x03\x02\x02\x02\u1521\u1509\x03\x02" +
		"\x02\x02\u1521\u150D\x03\x02\x02\x02\u1521\u1511\x03\x02\x02\x02\u1521" +
		"\u1515\x03\x02\x02\x02\u1521\u1519\x03\x02\x02\x02\u1521\u151D\x03\x02" +
		"\x02\x02\u1522\u1538\x03\x02\x02\x02\u1523\u1525\x07\xC6\x02\x02\u1524" +
		"\u1526\x07\u0183\x02\x02\u1525\u1524\x03\x02\x02\x02\u1525\u1526\x03\x02" +
		"\x02\x02\u1526\u1527\x03\x02\x02\x02\u1527\u1528\x07\u010F\x02\x02\u1528" +
		"\u152A\x07\xA4\x02\x02\u1529\u152B\x07\u0189\x02\x02\u152A\u1529\x03\x02" +
		"\x02\x02\u152A\u152B\x03\x02\x02\x02\u152B\u1538\x03\x02\x02\x02\u152C" +
		"\u1538\x07\u01BB\x02\x02\u152D\u152F\x07\xE8\x02\x02\u152E\u1530\x07\u0183" +
		"\x02\x02\u152F\u152E\x03\x02\x02\x02\u152F\u1530\x03\x02\x02\x02\u1530" +
		"\u1531\x03\x02\x02\x02\u1531\u1532\x07\u010F\x02\x02\u1532\u1534\x07\xA4" +
		"\x02\x02\u1533\u1535\x07\u0189\x02\x02\u1534\u1533\x03\x02\x02\x02\u1534" +
		"\u1535\x03\x02\x02\x02\u1535\u1538\x03\x02\x02\x02\u1536\u1538\x07\u01BA" +
		"\x02\x02\u1537\u1507\x03\x02\x02\x02\u1537\u1523\x03\x02\x02\x02\u1537" +
		"\u152C\x03\x02\x02\x02\u1537\u152D\x03\x02\x02\x02\u1537\u1536\x03\x02" +
		"\x02\x02\u1538\u03D7\x03\x02\x02\x02\u1539\u153B\x05\u0338\u019D\x02\u153A" +
		"\u153C\x05\u03DE\u01F0\x02\u153B\u153A\x03\x02\x02\x02\u153B\u153C\x03" +
		"\x02\x02\x02\u153C\u153E\x03\x02\x02\x02\u153D\u153F\x05\u03E0\u01F1\x02" +
		"\u153E\u153D\x03\x02\x02\x02\u153E\u153F\x03\x02\x02\x02\u153F\u03D9\x03" +
		"\x02\x02\x02\u1540\u154A\x05\u03D8\u01ED\x02\u1541\u1542\x07\xC1\x02\x02" +
		"\u1542\u1544\x05\u03E6\u01F4\x02\u1543\u1545\x05\u03DC\u01EF\x02\u1544" +
		"\u1543\x03\x02\x02\x02\u1544\u1545\x03\x02\x02\x02\u1545\u1547\x03\x02" +
		"\x02\x02\u1546\u1548\x05\u03E0\u01F1\x02\u1547\u1546\x03\x02\x02\x02\u1547" +
		"\u1548\x03\x02\x02\x02\u1548\u154A\x03\x02\x02\x02\u1549\u1540\x03\x02" +
		"\x02\x02\u1549\u1541\x03\x02\x02\x02\u154A\u03DB\x03\x02\x02\x02\u154B" +
		"\u154C\x05\u03DE\u01F0\x02\u154C\u03DD\x03\x02\x02\x02\u154D\u1550\x07" +
		"\u01BD\x02\x02\u154E\u1551\x05\u03C0\u01E1\x02\u154F\u1551\x07\t\x02\x02" +
		"\u1550\u154E\x03\x02\x02\x02\u1550\u154F\x03\x02\x02\x02\u1551\u1552\x03" +
		"\x02\x02\x02\u1552\u1550\x03\x02\x02\x02\u1552\u1553\x03\x02\x02\x02\u1553" +
		"\u1554\x03\x02\x02\x02\u1554\u1555\x07\u01BE\x02\x02\u1555\u03DF\x03\x02" +
		"\x02\x02\u1556\u1557\x07\u01BD\x02\x02\u1557\u1558\x05\u03E2\u01F2\x02" +
		"\u1558\u155A\x07\u01B7\x02\x02\u1559\u155B\x05\u03E4\u01F3\x02\u155A\u1559" +
		"\x03\x02\x02\x02\u155A\u155B\x03\x02\x02\x02\u155B\u155C\x03\x02\x02\x02" +
		"\u155C\u155D\x07\u01BE\x02\x02\u155D\u03E1\x03\x02\x02\x02\u155E\u155F" +
		"\x05\u03C0\u01E1\x02\u155F\u03E3\x03\x02\x02\x02\u1560\u1561\x05\u03C0" +
		"\u01E1\x02\u1561\u03E5\x03\x02\x02\x02\u1562\u1563\t:\x02\x02\u1563\u03E7" +
		"\x03\x02\x02\x02\u035B\u03EB\u03F1\u03F8\u03FB\u03FE\u0403\u0407\u040C" +
		"\u040F\u0412\u0415\u0418\u041B\u0423\u0428\u042B\u0433\u0438\u043B\u043E" +
		"\u0441\u0444\u044C\u0451\u0456\u045C\u045F\u0468\u046E\u047A\u047F\u0483" +
		"\u048B\u0493\u0496\u04A1\u04A8\u04AF\u04B9\u04C2\u04CA\u04D2\u04D7\u04D9" +
		"\u04DF\u04E4\u04EB\u04EF\u04F4\u04FA\u0500\u0508\u050E\u0513\u0519\u0522" +
		"\u0551\u0558\u055D\u056E\u0571\u0577\u057C\u057E\u0583\u0586\u058B\u058F" +
		"\u0591\u0594\u0598\u059C\u05A0\u05A6\u05AD\u05B0\u05B6\u05B9\u05BD\u05C1" +
		"\u05C4\u05C7\u05CA\u05D1\u05D4\u05D8\u05DB\u05E4\u05EB\u05F5\u05F7\u05FD" +
		"\u0601\u0607\u060D\u0611\u0615\u061C\u061E\u0621\u0624\u062A\u0630\u0634" +
		"\u0638\u063C\u0641\u0645\u0648\u064B\u0656\u065B\u0660\u0668\u066B\u066E" +
		"\u0671\u067A\u067E\u0682\u0685\u0687\u068A\u068E\u0691\u0699\u069B\u06A3" +
		"\u06A5\u06AB\u06B0\u06B4\u06BA\u06C5\u06CB\u06D4\u06DE\u06EA\u06F0\u06F5" +
		"\u0700\u0704\u070A\u070D\u0713\u0715\u0719\u0721\u0723\u0726\u072A\u072E" +
		"\u0730\u0736\u073E\u0743\u0745\u0748";
	private static readonly _serializedATNSegment10: string =
		"\u074C\u074E\u0752\u0756\u0759\u075C\u0761\u076F\u0774\u0776\u0779\u077C" +
		"\u0783\u0787\u078C\u078F\u0797\u07A2\u07A5\u07A8\u07AB\u07B4\u07B7\u07BB" +
		"\u07C0\u07C3\u07C7\u07CB\u07CD\u07D1\u07D4\u07D8\u07DB\u07E2\u07E4\u07E6" +
		"\u07E9\u07EC\u07F0\u07F4\u07F9\u07FB\u0800\u0804\u0809\u080D\u0812\u0818" +
		"\u081E\u082B\u0836\u083A\u0842\u0848\u084C\u0850\u0854\u0856\u085B\u085F" +
		"\u0862\u0866\u0869\u086F\u0874\u0877\u087E\u0881\u0888\u088B\u0890\u0892" +
		"\u0894\u089C\u08A0\u08A4\u08A7\u08AA\u08AE\u08B5\u08B8\u08BC\u08BF\u08C5" +
		"\u08C9\u08CE\u08DC\u08E0\u08E5\u08EF\u08F3\u08FC\u0906\u0908\u0911\u0916" +
		"\u0920\u0929\u092F\u0931\u0937\u093C\u0945\u094A\u094F\u095B\u0961\u0966" +
		"\u096C\u0972\u0976\u097C\u0983\u0988\u098C\u098E\u0992\u0997\u0999\u099D" +
		"\u099F\u09A2\u09B0\u09B3\u09B7\u09BC\u09C0\u09C4\u09CB\u09D0\u09D6\u09DB" +
		"\u09E0\u09E2\u09E7\u09ED\u09EF\u09F2\u09F5\u09F9\u09FE\u0A03\u0A09\u0A0D" +
		"\u0A15\u0A19\u0A1D\u0A20\u0A23\u0A2B\u0A2F\u0A34\u0A37\u0A3D\u0A43\u0A4A" +
		"\u0A4F\u0A52\u0A59\u0A5E\u0A61\u0A66\u0A6A\u0A6E\u0A70\u0A72\u0A75\u0A7B" +
		"\u0A7E\u0A82\u0A86\u0A8A\u0A8E\u0A92\u0A97\u0A9D\u0AA2\u0AA6\u0AB3\u0AB8" +
		"\u0ABF\u0AC7\u0ACB\u0ACD\u0AD2\u0AD6\u0ADB\u0ADF\u0AE8\u0AEB\u0AEE\u0AF5" +
		"\u0AF9\u0AFE\u0B01\u0B06\u0B0A\u0B0E\u0B12\u0B16\u0B19\u0B1E\u0B20\u0B26" +
		"\u0B2B\u0B2E\u0B31\u0B34\u0B3D\u0B41\u0B46\u0B48\u0B4B\u0B4F\u0B53\u0B57" +
		"\u0B5A\u0B5F\u0B63\u0B6A\u0B70\u0B76\u0B7B\u0B7F\u0B85\u0B89\u0B8E\u0B93" +
		"\u0B97\u0B9F\u0BA1\u0BA4\u0BA7\u0BAD\u0BB5\u0BBA\u0BBF\u0BC1\u0BC6\u0BCB" +
		"\u0BCD\u0BD2\u0BD7\u0BD9\u0BDE\u0BE3\u0BE5\u0BEA\u0BEF\u0BF1\u0BF6\u0BFB" +
		"\u0BFD\u0C02\u0C06\u0C09\u0C11\u0C15\u0C18\u0C1B\u0C27\u0C2B\u0C2E\u0C32" +
		"\u0C36\u0C3C\u0C40\u0C43\u0C48\u0C4B\u0C4E\u0C51\u0C55\u0C59\u0C5B\u0C5F" +
		"\u0C63\u0C67\u0C6B\u0C71\u0C74\u0C78\u0C7D\u0C81\u0C8F\u0C95\u0C99\u0C9D" +
		"\u0CA3\u0CA8\u0CB4\u0CB6\u0CBB\u0CBF\u0CC4\u0CC8\u0CCC\u0CD2\u0CD8\u0CDA" +
		"\u0CDE\u0CE0\u0CE4\u0CE8\u0CEC\u0CF3\u0CF8\u0CFA\u0CFE\u0D03\u0D05\u0D09" +
		"\u0D0F\u0D11\u0D15\u0D1A\u0D1C\u0D20\u0D25\u0D27\u0D2C\u0D30\u0D32\u0D3B" +
		"\u0D40\u0D42\u0D49\u0D50\u0D59\u0D5F\u0D64\u0D6C\u0D72\u0D7B\u0D81\u0D88" +
		"\u0D91\u0D97\u0D9F\u0DA6\u0DAE\u0DB5\u0DBD\u0DC4\u0DD5\u0DD8\u0DDD\u0DE4" +
		"\u0DE8\u0DED\u0DF4\u0E04\u0E08\u0E0C\u0E10\u0E18\u0E20\u0E24\u0E26\u0E2B" +
		"\u0E2F\u0E36\u0E43\u0E4A\u0E4E\u0E52\u0E57\u0E5D\u0E60\u0E65\u0E6B\u0E71" +
		"\u0E75\u0E79\u0E83\u0E88\u0E8F\u0E9D\u0EA2\u0EA6\u0EAC\u0EB2\u0EB6\u0EB9" +
		"\u0EBF\u0EC1\u0EC7\u0ECE\u0ED4\u0ED7\u0EDD\u0EDF\u0EE4\u0EE6\u0EEC\u0EEF" +
		"\u0EF4\u0EF9\u0EFD\u0F00\u0F13\u0F18\u0F1D\u0F24\u0F2B\u0F32\u0F37\u0F40" +
		"\u0F44\u0F48\u0F4C\u0F54\u0F59\u0F5D\u0F5F\u0F63\u0F67\u0F6C\u0F71\u0F75" +
		"\u0F79\u0F7D\u0F7F\u0F84\u0F8A\u0F8D\u0FA0\u0FA2\u0FA9\u0FAD\u0FB1\u0FB5" +
		"\u0FCD\u0FD1\u0FDD\u0FE1\u0FE5\u0FE7\u0FEC\u0FF2\u0FF6\u0FF9\u0FFD\u1000" +
		"\u1003\u1006\u100A\u100D\u1010\u1014\u1018\u101C\u1020\u1024\u1029\u102D" +
		"\u102F\u1034\u103C\u1042\u1047\u104B\u104D\u1055\u105A\u105E\u1061\u1065" +
		"\u1068\u106B\u106E\u1072\u1075\u1079\u107C\u107E\u1089\u108E\u1095\u10AD" +
		"\u10B1\u10B7\u10BA\u10BE\u10C4\u10C7\u10CA\u10D0\u10D3\u10D6\u10F3\u10F9" +
		"\u1106\u110F\u1118\u111D\u1120\u1126\u112C\u1130\u1134\u1136\u1139\u113C" +
		"\u1148\u114E\u1156\u115C\u1164\u116A\u1172\u1178\u1180\u1184\u1188\u118F" +
		"\u1198\u119C\u119F\u11A2\u11AA\u11AE\u11B1\u11B8\u11BD\u11C3\u11C6\u11CB" +
		"\u11D5\u11DA\u11DD\u11E0\u11E6\u11E9\u11ED\u11F7\u11FA\u11FE\u1206\u1211" +
		"\u1219\u121C\u1220\u1222\u1228\u122E\u1234\u123A\u123F\u1242\u1245\u1248" +
		"\u124C\u1253\u1259\u1262\u1265\u1268\u126C\u1270\u1272\u1276\u1279\u127F" +
		"\u1282\u1291\u1296\u1299\u129F\u12A4\u12AF\u12B4\u12BB\u12BF\u12C4\u12C9" +
		"\u12CC\u12D1\u12D4\u12D9\u12E5\u12F1\u12F3\u12F8\u12FF\u1301\u1305\u1309" +
		"\u130D\u1318\u131E\u1323\u1329\u132F\u133E\u1341\u1345\u134D\u1350\u1354" +
		"\u1357\u135A\u135F\u1362\u1366\u1369\u136C\u1374\u1376\u137E\u1381\u1383" +
		"\u1388\u138B\u138E\u1393\u139A\u13A0\u13A3\u13AB\u13AD\u13B4\u13B8\u13BB" +
		"\u13C1\u13C9\u13CF\u13D1\u13D4\u13D8\u13DE\u13E3\u13EE\u13F3\u13F7\u13FB" +
		"\u13FD\u1403\u140C\u1412\u1418\u141B\u1421\u1426\u1429\u142E\u1433\u143C" +
		"\u143F\u1445\u144D\u1455\u1457\u145D\u1463\u1466\u1469\u146F\u1477\u147D" +
		"\u1486\u148D\u149F\u14A7\u14AD\u14B5\u14C1\u14C9\u14D4\u14D9\u14DC\u14E0" +
		"\u14E7\u14EC\u14EF\u14F4\u14F7\u1504\u1507\u150B\u150F\u1513\u1517\u151B" +
		"\u151F\u1521\u1525\u152A\u152F\u1534\u1537\u153B\u153E\u1544\u1547\u1549" +
		"\u1550\u1552\u155A";
	public static readonly _serializedATN: string = Utils.join(
		[
			cobolParser._serializedATNSegment0,
			cobolParser._serializedATNSegment1,
			cobolParser._serializedATNSegment2,
			cobolParser._serializedATNSegment3,
			cobolParser._serializedATNSegment4,
			cobolParser._serializedATNSegment5,
			cobolParser._serializedATNSegment6,
			cobolParser._serializedATNSegment7,
			cobolParser._serializedATNSegment8,
			cobolParser._serializedATNSegment9,
			cobolParser._serializedATNSegment10,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!cobolParser.__ATN) {
			cobolParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(cobolParser._serializedATN));
		}

		return cobolParser.__ATN;
	}

}

export class Cobol_sourceContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(cobolParser.EOF, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cobol_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCobol_source) {
			listener.enterCobol_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCobol_source) {
			listener.exitCobol_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCobol_source) {
			return visitor.visitCobol_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramContext extends ParserRuleContext {
	public identification_division(): Identification_divisionContext {
		return this.getRuleContext(0, Identification_divisionContext);
	}
	public environment_division(): Environment_divisionContext | undefined {
		return this.tryGetRuleContext(0, Environment_divisionContext);
	}
	public data_division(): Data_divisionContext | undefined {
		return this.tryGetRuleContext(0, Data_divisionContext);
	}
	public procedure_division(): Procedure_divisionContext | undefined {
		return this.tryGetRuleContext(0, Procedure_divisionContext);
	}
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	public end_program(): End_programContext | undefined {
		return this.tryGetRuleContext(0, End_programContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_divisionContext extends ParserRuleContext {
	public identification_division_header(): Identification_division_headerContext {
		return this.getRuleContext(0, Identification_division_headerContext);
	}
	public program_id(): Program_idContext {
		return this.getRuleContext(0, Program_idContext);
	}
	public author(): AuthorContext | undefined {
		return this.tryGetRuleContext(0, AuthorContext);
	}
	public installation(): InstallationContext | undefined {
		return this.tryGetRuleContext(0, InstallationContext);
	}
	public date_written(): Date_writtenContext | undefined {
		return this.tryGetRuleContext(0, Date_writtenContext);
	}
	public date_compiled(): Date_compiledContext | undefined {
		return this.tryGetRuleContext(0, Date_compiledContext);
	}
	public security(): SecurityContext | undefined {
		return this.tryGetRuleContext(0, SecurityContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division) {
			listener.enterIdentification_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division) {
			listener.exitIdentification_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division) {
			return visitor.visitIdentification_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_division_headerContext extends ParserRuleContext {
	public IDENTIFICATION(): TerminalNode { return this.getToken(cobolParser.IDENTIFICATION, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division_header) {
			listener.enterIdentification_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division_header) {
			listener.exitIdentification_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division_header) {
			return visitor.visitIdentification_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_divisionContext extends ParserRuleContext {
	public environment_division_header(): Environment_division_headerContext {
		return this.getRuleContext(0, Environment_division_headerContext);
	}
	public configuration_section(): Configuration_sectionContext | undefined {
		return this.tryGetRuleContext(0, Configuration_sectionContext);
	}
	public input_output_section(): Input_output_sectionContext | undefined {
		return this.tryGetRuleContext(0, Input_output_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division) {
			listener.enterEnvironment_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division) {
			listener.exitEnvironment_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division) {
			return visitor.visitEnvironment_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_division_headerContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(cobolParser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division_header) {
			listener.enterEnvironment_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division_header) {
			listener.exitEnvironment_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division_header) {
			return visitor.visitEnvironment_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_divisionContext extends ParserRuleContext {
	public data_division_header(): Data_division_headerContext {
		return this.getRuleContext(0, Data_division_headerContext);
	}
	public file_section(): File_sectionContext | undefined {
		return this.tryGetRuleContext(0, File_sectionContext);
	}
	public working_storage_section(): Working_storage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Working_storage_sectionContext);
	}
	public linkage_section(): Linkage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Linkage_sectionContext);
	}
	public report_section(): Report_sectionContext | undefined {
		return this.tryGetRuleContext(0, Report_sectionContext);
	}
	public screen_section(): Screen_sectionContext | undefined {
		return this.tryGetRuleContext(0, Screen_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division) {
			listener.enterData_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division) {
			listener.exitData_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division) {
			return visitor.visitData_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_division_headerContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division_header) {
			listener.enterData_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division_header) {
			listener.exitData_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division_header) {
			return visitor.visitData_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_divisionContext extends ParserRuleContext {
	public procedure_division_header(): Procedure_division_headerContext {
		return this.getRuleContext(0, Procedure_division_headerContext);
	}
	public declaratives(): DeclarativesContext | undefined {
		return this.tryGetRuleContext(0, DeclarativesContext);
	}
	public section(): SectionContext[];
	public section(i: number): SectionContext;
	public section(i?: number): SectionContext | SectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SectionContext);
		} else {
			return this.getRuleContext(i, SectionContext);
		}
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division) {
			listener.enterProcedure_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division) {
			listener.exitProcedure_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division) {
			return visitor.visitProcedure_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Word_in_area_BContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_word_in_area_B; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWord_in_area_B) {
			listener.enterWord_in_area_B(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWord_in_area_B) {
			listener.exitWord_in_area_B(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWord_in_area_B) {
			return visitor.visitWord_in_area_B(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorContext extends ParserRuleContext {
	public author_header(): Author_headerContext {
		return this.getRuleContext(0, Author_headerContext);
	}
	public word_in_area_B(): Word_in_area_BContext[];
	public word_in_area_B(i: number): Word_in_area_BContext;
	public word_in_area_B(i?: number): Word_in_area_BContext | Word_in_area_BContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Word_in_area_BContext);
		} else {
			return this.getRuleContext(i, Word_in_area_BContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor) {
			listener.enterAuthor(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor) {
			listener.exitAuthor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor) {
			return visitor.visitAuthor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Author_headerContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(cobolParser.AUTHOR, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor_header) {
			listener.enterAuthor_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor_header) {
			listener.exitAuthor_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor_header) {
			return visitor.visitAuthor_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_witout_all_zeroContext extends ParserRuleContext {
	public SPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACE, 0); }
	public SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACES, 0); }
	public HIGH_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUE, 0); }
	public HIGH_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUES, 0); }
	public LOW_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUE, 0); }
	public LOW_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUES, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTE, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_witout_all_zero; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_witout_all_zero) {
			listener.enterFigurative_constant_witout_all_zero(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_witout_all_zero) {
			listener.exitFigurative_constant_witout_all_zero(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_witout_all_zero) {
			return visitor.visitFigurative_constant_witout_all_zero(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_zeroContext extends ParserRuleContext {
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public ZEROS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZEROS, 0); }
	public ZEROES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZEROES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_zero; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_zero) {
			listener.enterFigurative_constant_zero(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_zero) {
			listener.exitFigurative_constant_zero(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_zero) {
			return visitor.visitFigurative_constant_zero(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_witout_allContext extends ParserRuleContext {
	public figurative_constant_witout_all_zero(): Figurative_constant_witout_all_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_all_zeroContext);
	}
	public figurative_constant_zero(): Figurative_constant_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_zeroContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_witout_all; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_witout_all) {
			listener.enterFigurative_constant_witout_all(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_witout_all) {
			listener.exitFigurative_constant_witout_all(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_witout_all) {
			return visitor.visitFigurative_constant_witout_all(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_witout_zeroContext extends ParserRuleContext {
	public figurative_constant_witout_all_zero(): Figurative_constant_witout_all_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_all_zeroContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_witout_zero; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_witout_zero) {
			listener.enterFigurative_constant_witout_zero(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_witout_zero) {
			listener.exitFigurative_constant_witout_zero(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_witout_zero) {
			return visitor.visitFigurative_constant_witout_zero(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constantContext extends ParserRuleContext {
	public figurative_constant_witout_zero(): Figurative_constant_witout_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_zeroContext);
	}
	public figurative_constant_zero(): Figurative_constant_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_zeroContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant) {
			listener.enterFigurative_constant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant) {
			listener.exitFigurative_constant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant) {
			return visitor.visitFigurative_constant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_programContext extends ParserRuleContext {
	public end_program_header(): End_program_headerContext {
		return this.getRuleContext(0, End_program_headerContext);
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_program) {
			listener.enterEnd_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_program) {
			listener.exitEnd_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_program) {
			return visitor.visitEnd_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_program_headerContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(cobolParser.END, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(cobolParser.PROGRAM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_program_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_program_header) {
			listener.enterEnd_program_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_program_header) {
			listener.exitEnd_program_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_program_header) {
			return visitor.visitEnd_program_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_division_headerContext extends ParserRuleContext {
	public procedure_division_header_start(): Procedure_division_header_startContext {
		return this.getRuleContext(0, Procedure_division_header_startContext);
	}
	public procedure_division_header_end(): Procedure_division_header_endContext {
		return this.getRuleContext(0, Procedure_division_header_endContext);
	}
	public using(): UsingContext | undefined {
		return this.tryGetRuleContext(0, UsingContext);
	}
	public giving(): GivingContext | undefined {
		return this.tryGetRuleContext(0, GivingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division_header) {
			listener.enterProcedure_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division_header) {
			listener.exitProcedure_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division_header) {
			return visitor.visitProcedure_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_division_header_startContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division_header_start; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division_header_start) {
			listener.enterProcedure_division_header_start(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division_header_start) {
			listener.exitProcedure_division_header_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division_header_start) {
			return visitor.visitProcedure_division_header_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_division_header_endContext extends ParserRuleContext {
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division_header_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division_header_end) {
			listener.enterProcedure_division_header_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division_header_end) {
			listener.exitProcedure_division_header_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division_header_end) {
			return visitor.visitProcedure_division_header_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection) {
			listener.enterSection(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection) {
			listener.exitSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection) {
			return visitor.visitSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclarativesContext extends ParserRuleContext {
	public declaratives_header(): Declaratives_headerContext {
		return this.getRuleContext(0, Declaratives_headerContext);
	}
	public end_declaratives(): End_declarativesContext {
		return this.getRuleContext(0, End_declarativesContext);
	}
	public declaratives_section(): Declaratives_sectionContext[];
	public declaratives_section(i: number): Declaratives_sectionContext;
	public declaratives_section(i?: number): Declaratives_sectionContext | Declaratives_sectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declaratives_sectionContext);
		} else {
			return this.getRuleContext(i, Declaratives_sectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives) {
			listener.enterDeclaratives(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives) {
			listener.exitDeclaratives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives) {
			return visitor.visitDeclaratives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declaratives_headerContext extends ParserRuleContext {
	public DECLARATIVES(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives_header) {
			listener.enterDeclaratives_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives_header) {
			listener.exitDeclaratives_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives_header) {
			return visitor.visitDeclaratives_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_declarativesContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(cobolParser.END, 0); }
	public DECLARATIVES(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_declaratives; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_declaratives) {
			listener.enterEnd_declaratives(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_declaratives) {
			listener.exitEnd_declaratives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_declaratives) {
			return visitor.visitEnd_declaratives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declaratives_sectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	public use_statement(): Use_statementContext {
		return this.getRuleContext(0, Use_statementContext);
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives_section) {
			listener.enterDeclaratives_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives_section) {
			listener.exitDeclaratives_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives_section) {
			return visitor.visitDeclaratives_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphContext extends ParserRuleContext {
	public paragraph_name(): Paragraph_nameContext {
		return this.getRuleContext(0, Paragraph_nameContext);
	}
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph) {
			listener.enterParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph) {
			listener.exitParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph) {
			return visitor.visitParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Paragraph_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph_name) {
			listener.enterParagraph_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph_name) {
			listener.exitParagraph_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph_name) {
			return visitor.visitParagraph_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_statementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(cobolParser.USE, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROCEDURE, 0); }
	public use_on(): Use_onContext | undefined {
		return this.tryGetRuleContext(0, Use_onContext);
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public REPORTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTING, 0); }
	public group_data_name(): Group_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Group_data_nameContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCEPTION, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERROR, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_statement) {
			listener.enterUse_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_statement) {
			listener.exitUse_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_statement) {
			return visitor.visitUse_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_group_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGroup_data_name) {
			listener.enterGroup_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGroup_data_name) {
			listener.exitGroup_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGroup_data_name) {
			return visitor.visitGroup_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_onContext extends ParserRuleContext {
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I_O, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTEND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_on) {
			listener.enterUse_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_on) {
			listener.exitUse_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_on) {
			return visitor.visitUse_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_headerContext extends ParserRuleContext {
	public section_name(): Section_nameContext {
		return this.getRuleContext(0, Section_nameContext);
	}
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public segment_number(): Segment_numberContext | undefined {
		return this.tryGetRuleContext(0, Segment_numberContext);
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_header) {
			listener.enterSection_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_header) {
			listener.exitSection_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_header) {
			return visitor.visitSection_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_name) {
			listener.enterSection_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_name) {
			listener.exitSection_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_name) {
			return visitor.visitSection_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing) {
			listener.enterUsing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing) {
			listener.exitUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing) {
			return visitor.visitUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GivingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGiving) {
			listener.enterGiving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGiving) {
			listener.exitGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGiving) {
			return visitor.visitGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public accept_statement(): Accept_statementContext | undefined {
		return this.tryGetRuleContext(0, Accept_statementContext);
	}
	public add_statement(): Add_statementContext | undefined {
		return this.tryGetRuleContext(0, Add_statementContext);
	}
	public alter_statement(): Alter_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_statementContext);
	}
	public call_statement(): Call_statementContext | undefined {
		return this.tryGetRuleContext(0, Call_statementContext);
	}
	public cancel_statement(): Cancel_statementContext | undefined {
		return this.tryGetRuleContext(0, Cancel_statementContext);
	}
	public close_statement(): Close_statementContext | undefined {
		return this.tryGetRuleContext(0, Close_statementContext);
	}
	public compute_statement(): Compute_statementContext | undefined {
		return this.tryGetRuleContext(0, Compute_statementContext);
	}
	public continue_statement(): Continue_statementContext | undefined {
		return this.tryGetRuleContext(0, Continue_statementContext);
	}
	public delete_statement(): Delete_statementContext | undefined {
		return this.tryGetRuleContext(0, Delete_statementContext);
	}
	public display_statement(): Display_statementContext | undefined {
		return this.tryGetRuleContext(0, Display_statementContext);
	}
	public divide_statement(): Divide_statementContext | undefined {
		return this.tryGetRuleContext(0, Divide_statementContext);
	}
	public evaluate_statement(): Evaluate_statementContext | undefined {
		return this.tryGetRuleContext(0, Evaluate_statementContext);
	}
	public exit_statement(): Exit_statementContext | undefined {
		return this.tryGetRuleContext(0, Exit_statementContext);
	}
	public exit_program_statement(): Exit_program_statementContext | undefined {
		return this.tryGetRuleContext(0, Exit_program_statementContext);
	}
	public generate_statement(): Generate_statementContext | undefined {
		return this.tryGetRuleContext(0, Generate_statementContext);
	}
	public go_to_statement(): Go_to_statementContext | undefined {
		return this.tryGetRuleContext(0, Go_to_statementContext);
	}
	public if_statement(): If_statementContext | undefined {
		return this.tryGetRuleContext(0, If_statementContext);
	}
	public initialize_statement(): Initialize_statementContext | undefined {
		return this.tryGetRuleContext(0, Initialize_statementContext);
	}
	public initiate_statement(): Initiate_statementContext | undefined {
		return this.tryGetRuleContext(0, Initiate_statementContext);
	}
	public inspect_statement(): Inspect_statementContext | undefined {
		return this.tryGetRuleContext(0, Inspect_statementContext);
	}
	public merge_statement(): Merge_statementContext | undefined {
		return this.tryGetRuleContext(0, Merge_statementContext);
	}
	public move_statement(): Move_statementContext | undefined {
		return this.tryGetRuleContext(0, Move_statementContext);
	}
	public multiply_statement(): Multiply_statementContext | undefined {
		return this.tryGetRuleContext(0, Multiply_statementContext);
	}
	public open_statement(): Open_statementContext | undefined {
		return this.tryGetRuleContext(0, Open_statementContext);
	}
	public perform_statement(): Perform_statementContext | undefined {
		return this.tryGetRuleContext(0, Perform_statementContext);
	}
	public read_statement(): Read_statementContext | undefined {
		return this.tryGetRuleContext(0, Read_statementContext);
	}
	public release_statement(): Release_statementContext | undefined {
		return this.tryGetRuleContext(0, Release_statementContext);
	}
	public return_statement(): Return_statementContext | undefined {
		return this.tryGetRuleContext(0, Return_statementContext);
	}
	public rewrite_statement(): Rewrite_statementContext | undefined {
		return this.tryGetRuleContext(0, Rewrite_statementContext);
	}
	public search_statement(): Search_statementContext | undefined {
		return this.tryGetRuleContext(0, Search_statementContext);
	}
	public set_statement(): Set_statementContext | undefined {
		return this.tryGetRuleContext(0, Set_statementContext);
	}
	public sort_statement(): Sort_statementContext | undefined {
		return this.tryGetRuleContext(0, Sort_statementContext);
	}
	public start_statement(): Start_statementContext | undefined {
		return this.tryGetRuleContext(0, Start_statementContext);
	}
	public stop_statement(): Stop_statementContext | undefined {
		return this.tryGetRuleContext(0, Stop_statementContext);
	}
	public string_statement(): String_statementContext | undefined {
		return this.tryGetRuleContext(0, String_statementContext);
	}
	public subtract_statement(): Subtract_statementContext | undefined {
		return this.tryGetRuleContext(0, Subtract_statementContext);
	}
	public suppress_statement(): Suppress_statementContext | undefined {
		return this.tryGetRuleContext(0, Suppress_statementContext);
	}
	public terminate_statement(): Terminate_statementContext | undefined {
		return this.tryGetRuleContext(0, Terminate_statementContext);
	}
	public unlock_statement(): Unlock_statementContext | undefined {
		return this.tryGetRuleContext(0, Unlock_statementContext);
	}
	public unstring_statement(): Unstring_statementContext | undefined {
		return this.tryGetRuleContext(0, Unstring_statementContext);
	}
	public write_statement(): Write_statementContext | undefined {
		return this.tryGetRuleContext(0, Write_statementContext);
	}
	public record_statement(): Record_statementContext | undefined {
		return this.tryGetRuleContext(0, Record_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exec_sql_statementContext extends ParserRuleContext {
	public EXEC(): TerminalNode { return this.getToken(cobolParser.EXEC, 0); }
	public SQL(): TerminalNode { return this.getToken(cobolParser.SQL, 0); }
	public END_EXEC(): TerminalNode[];
	public END_EXEC(i: number): TerminalNode;
	public END_EXEC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.END_EXEC);
		} else {
			return this.getToken(cobolParser.END_EXEC, i);
		}
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_exec_sql_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExec_sql_statement) {
			listener.enterExec_sql_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExec_sql_statement) {
			listener.exitExec_sql_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExec_sql_statement) {
			return visitor.visitExec_sql_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_name) {
			listener.enterRecord_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_name) {
			listener.exitRecord_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_name) {
			return visitor.visitRecord_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Library_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_library_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLibrary_name) {
			listener.enterLibrary_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLibrary_name) {
			listener.exitLibrary_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLibrary_name) {
			return visitor.visitLibrary_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Text_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_text_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterText_name) {
			listener.enterText_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitText_name) {
			listener.exitText_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitText_name) {
			return visitor.visitText_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replace_statementContext extends ParserRuleContext {
	public REPLACE(): TerminalNode { return this.getToken(cobolParser.REPLACE, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OFF, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public PSEUDO_TEXT_(): TerminalNode[];
	public PSEUDO_TEXT_(i: number): TerminalNode;
	public PSEUDO_TEXT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.PSEUDO_TEXT_);
		} else {
			return this.getToken(cobolParser.PSEUDO_TEXT_, i);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.BY);
		} else {
			return this.getToken(cobolParser.BY, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replace_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplace_statement) {
			listener.enterReplace_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplace_statement) {
			listener.exitReplace_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplace_statement) {
			return visitor.visitReplace_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Write_statementContext extends ParserRuleContext {
	public WRITE(): TerminalNode { return this.getToken(cobolParser.WRITE, 0); }
	public rec_name(): Rec_nameContext {
		return this.getRuleContext(0, Rec_nameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public src_item(): Src_itemContext | undefined {
		return this.tryGetRuleContext(0, Src_itemContext);
	}
	public ALLOWING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALLOWING, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public at_eop_variants(): At_eop_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_eop_variantsContext);
	}
	public advance_value(): Advance_valueContext | undefined {
		return this.tryGetRuleContext(0, Advance_valueContext);
	}
	public END_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_WRITE, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHERS, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_write_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWrite_statement) {
			listener.enterWrite_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWrite_statement) {
			listener.exitWrite_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWrite_statement) {
			return visitor.visitWrite_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Advance_valueContext extends ParserRuleContext {
	public advance_num(): Advance_numContext | undefined {
		return this.tryGetRuleContext(0, Advance_numContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	public top_of_page_name(): Top_of_page_nameContext | undefined {
		return this.tryGetRuleContext(0, Top_of_page_nameContext);
	}
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_advance_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdvance_value) {
			listener.enterAdvance_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdvance_value) {
			listener.exitAdvance_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdvance_value) {
			return visitor.visitAdvance_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Advance_numContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_advance_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdvance_num) {
			listener.enterAdvance_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdvance_num) {
			listener.exitAdvance_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdvance_num) {
			return visitor.visitAdvance_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unstring_statementContext extends ParserRuleContext {
	public UNSTRING(): TerminalNode { return this.getToken(cobolParser.UNSTRING, 0); }
	public unstring_src(): Unstring_srcContext {
		return this.getRuleContext(0, Unstring_srcContext);
	}
	public INTO(): TerminalNode { return this.getToken(cobolParser.INTO, 0); }
	public DELIMITED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DELIMITED, 0); }
	public unstring_delim_clause(): Unstring_delim_clauseContext[];
	public unstring_delim_clause(i: number): Unstring_delim_clauseContext;
	public unstring_delim_clause(i?: number): Unstring_delim_clauseContext | Unstring_delim_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unstring_delim_clauseContext);
		} else {
			return this.getRuleContext(i, Unstring_delim_clauseContext);
		}
	}
	public unstring_dest_clause(): Unstring_dest_clauseContext[];
	public unstring_dest_clause(i: number): Unstring_dest_clauseContext;
	public unstring_dest_clause(i?: number): Unstring_dest_clauseContext | Unstring_dest_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unstring_dest_clauseContext);
		} else {
			return this.getRuleContext(i, Unstring_dest_clauseContext);
		}
	}
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public string_pointer(): String_pointerContext | undefined {
		return this.tryGetRuleContext(0, String_pointerContext);
	}
	public TALLYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TALLYING, 0); }
	public unstring_tally_ctr(): Unstring_tally_ctrContext | undefined {
		return this.tryGetRuleContext(0, Unstring_tally_ctrContext);
	}
	public on_overflow_variants(): On_overflow_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_overflow_variantsContext);
	}
	public END_UNSTRING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_UNSTRING, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public OR(): TerminalNode[];
	public OR(i: number): TerminalNode;
	public OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OR);
		} else {
			return this.getToken(cobolParser.OR, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unstring_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnstring_statement) {
			listener.enterUnstring_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnstring_statement) {
			listener.exitUnstring_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnstring_statement) {
			return visitor.visitUnstring_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unstring_tally_ctrContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unstring_tally_ctr; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnstring_tally_ctr) {
			listener.enterUnstring_tally_ctr(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnstring_tally_ctr) {
			listener.exitUnstring_tally_ctr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnstring_tally_ctr) {
			return visitor.visitUnstring_tally_ctr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unstring_dest_clauseContext extends ParserRuleContext {
	public dest_string(): Dest_stringContext {
		return this.getRuleContext(0, Dest_stringContext);
	}
	public DELIMITER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DELIMITER, 0); }
	public delim_dest(): Delim_destContext | undefined {
		return this.tryGetRuleContext(0, Delim_destContext);
	}
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COUNT, 0); }
	public countr(): CountrContext | undefined {
		return this.tryGetRuleContext(0, CountrContext);
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unstring_dest_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnstring_dest_clause) {
			listener.enterUnstring_dest_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnstring_dest_clause) {
			listener.exitUnstring_dest_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnstring_dest_clause) {
			return visitor.visitUnstring_dest_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CountrContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_countr; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCountr) {
			listener.enterCountr(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCountr) {
			listener.exitCountr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCountr) {
			return visitor.visitCountr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dest_stringContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_dest_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDest_string) {
			listener.enterDest_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDest_string) {
			listener.exitDest_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDest_string) {
			return visitor.visitDest_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delim_destContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delim_dest; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelim_dest) {
			listener.enterDelim_dest(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelim_dest) {
			listener.exitDelim_dest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelim_dest) {
			return visitor.visitDelim_dest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unstring_delim_clauseContext extends ParserRuleContext {
	public unstring_delim(): Unstring_delimContext {
		return this.getRuleContext(0, Unstring_delimContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unstring_delim_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnstring_delim_clause) {
			listener.enterUnstring_delim_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnstring_delim_clause) {
			listener.exitUnstring_delim_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnstring_delim_clause) {
			return visitor.visitUnstring_delim_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unstring_delimContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public figurative_constant_witout_all(): Figurative_constant_witout_allContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_allContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unstring_delim; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnstring_delim) {
			listener.enterUnstring_delim(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnstring_delim) {
			listener.exitUnstring_delim(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnstring_delim) {
			return visitor.visitUnstring_delim(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unstring_srcContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unstring_src; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnstring_src) {
			listener.enterUnstring_src(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnstring_src) {
			listener.exitUnstring_src(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnstring_src) {
			return visitor.visitUnstring_src(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unlock_statementContext extends ParserRuleContext {
	public UNLOCK(): TerminalNode { return this.getToken(cobolParser.UNLOCK, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unlock_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnlock_statement) {
			listener.enterUnlock_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnlock_statement) {
			listener.exitUnlock_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnlock_statement) {
			return visitor.visitUnlock_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Terminate_statementContext extends ParserRuleContext {
	public TERMINATE(): TerminalNode { return this.getToken(cobolParser.TERMINATE, 0); }
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_terminate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTerminate_statement) {
			listener.enterTerminate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTerminate_statement) {
			listener.exitTerminate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTerminate_statement) {
			return visitor.visitTerminate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Suppress_statementContext extends ParserRuleContext {
	public SUPPRESS(): TerminalNode { return this.getToken(cobolParser.SUPPRESS, 0); }
	public PRINTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_suppress_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSuppress_statement) {
			listener.enterSuppress_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSuppress_statement) {
			listener.exitSuppress_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSuppress_statement) {
			return visitor.visitSuppress_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Subtract_statementContext extends ParserRuleContext {
	public SUBTRACT(): TerminalNode { return this.getToken(cobolParser.SUBTRACT, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public sub_grp(): Sub_grpContext[];
	public sub_grp(i: number): Sub_grpContext;
	public sub_grp(i?: number): Sub_grpContext | Sub_grpContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sub_grpContext);
		} else {
			return this.getRuleContext(i, Sub_grpContext);
		}
	}
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_SUBTRACT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_SUBTRACT, 0); }
	public sub_num(): Sub_numContext[];
	public sub_num(i: number): Sub_numContext;
	public sub_num(i?: number): Sub_numContext | Sub_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sub_numContext);
		} else {
			return this.getRuleContext(i, Sub_numContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subtract_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubtract_statement) {
			listener.enterSubtract_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubtract_statement) {
			listener.exitSubtract_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubtract_statement) {
			return visitor.visitSubtract_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sub_grpContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sub_grp; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSub_grp) {
			listener.enterSub_grp(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSub_grp) {
			listener.exitSub_grp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSub_grp) {
			return visitor.visitSub_grp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sub_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sub_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSub_num) {
			listener.enterSub_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSub_num) {
			listener.exitSub_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSub_num) {
			return visitor.visitSub_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class String_statementContext extends ParserRuleContext {
	public STRING(): TerminalNode { return this.getToken(cobolParser.STRING, 0); }
	public INTO(): TerminalNode { return this.getToken(cobolParser.INTO, 0); }
	public string_dest(): String_destContext {
		return this.getRuleContext(0, String_destContext);
	}
	public DELIMITED(): TerminalNode[];
	public DELIMITED(i: number): TerminalNode;
	public DELIMITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DELIMITED);
		} else {
			return this.getToken(cobolParser.DELIMITED, i);
		}
	}
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public string_pointer(): String_pointerContext | undefined {
		return this.tryGetRuleContext(0, String_pointerContext);
	}
	public on_overflow_variants(): On_overflow_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_overflow_variantsContext);
	}
	public END_STRING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_STRING, 0); }
	public SIZE(): TerminalNode[];
	public SIZE(i: number): TerminalNode;
	public SIZE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SIZE);
		} else {
			return this.getToken(cobolParser.SIZE, i);
		}
	}
	public string_delim(): String_delimContext[];
	public string_delim(i: number): String_delimContext;
	public string_delim(i?: number): String_delimContext | String_delimContext[] {
		if (i === undefined) {
			return this.getRuleContexts(String_delimContext);
		} else {
			return this.getRuleContext(i, String_delimContext);
		}
	}
	public string_src(): String_srcContext[];
	public string_src(i: number): String_srcContext;
	public string_src(i?: number): String_srcContext | String_srcContext[] {
		if (i === undefined) {
			return this.getRuleContexts(String_srcContext);
		} else {
			return this.getRuleContext(i, String_srcContext);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.BY);
		} else {
			return this.getToken(cobolParser.BY, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_string_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterString_statement) {
			listener.enterString_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitString_statement) {
			listener.exitString_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitString_statement) {
			return visitor.visitString_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class String_pointerContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_string_pointer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterString_pointer) {
			listener.enterString_pointer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitString_pointer) {
			listener.exitString_pointer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitString_pointer) {
			return visitor.visitString_pointer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class String_destContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_string_dest; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterString_dest) {
			listener.enterString_dest(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitString_dest) {
			listener.exitString_dest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitString_dest) {
			return visitor.visitString_dest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class String_delimContext extends ParserRuleContext {
	public string_src(): String_srcContext {
		return this.getRuleContext(0, String_srcContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_string_delim; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterString_delim) {
			listener.enterString_delim(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitString_delim) {
			listener.exitString_delim(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitString_delim) {
			return visitor.visitString_delim(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class String_srcContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_string_src; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterString_src) {
			listener.enterString_src(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitString_src) {
			listener.exitString_src(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitString_src) {
			return visitor.visitString_src(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stop_statementContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(cobolParser.STOP, 0); }
	public RUN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RUN, 0); }
	public stop_disp(): Stop_dispContext | undefined {
		return this.tryGetRuleContext(0, Stop_dispContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_stop_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStop_statement) {
			listener.enterStop_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStop_statement) {
			listener.exitStop_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStop_statement) {
			return visitor.visitStop_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stop_dispContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public figurative_constant_witout_all(): Figurative_constant_witout_allContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_allContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_stop_disp; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStop_disp) {
			listener.enterStop_disp(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStop_disp) {
			listener.exitStop_disp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStop_disp) {
			return visitor.visitStop_disp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Start_statementContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(cobolParser.START, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public condition_operator(): Condition_operatorContext | undefined {
		return this.tryGetRuleContext(0, Condition_operatorContext);
	}
	public sort_key_data(): Sort_key_dataContext | undefined {
		return this.tryGetRuleContext(0, Sort_key_dataContext);
	}
	public regard_allow(): Regard_allowContext | undefined {
		return this.tryGetRuleContext(0, Regard_allowContext);
	}
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public END_START(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_START, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_start_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStart_statement) {
			listener.enterStart_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStart_statement) {
			listener.exitStart_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStart_statement) {
			return visitor.visitStart_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_key_dataContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_key_data; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_key_data) {
			listener.enterSort_key_data(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_key_data) {
			listener.exitSort_key_data(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_key_data) {
			return visitor.visitSort_key_data(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_statementContext extends ParserRuleContext {
	public SORT(): TerminalNode { return this.getToken(cobolParser.SORT, 0); }
	public sort_name(): Sort_nameContext {
		return this.getRuleContext(0, Sort_nameContext);
	}
	public on_sort_key(): On_sort_keyContext[];
	public on_sort_key(i: number): On_sort_keyContext;
	public on_sort_key(i?: number): On_sort_keyContext | On_sort_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_sort_keyContext);
		} else {
			return this.getRuleContext(i, On_sort_keyContext);
		}
	}
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext | undefined {
		return this.tryGetRuleContext(0, Alpha_nameContext);
	}
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public procedure_is(): Procedure_isContext[];
	public procedure_is(i: number): Procedure_isContext;
	public procedure_is(i?: number): Procedure_isContext | Procedure_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_isContext);
		} else {
			return this.getRuleContext(i, Procedure_isContext);
		}
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USING, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORDER, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_statement) {
			listener.enterSort_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_statement) {
			listener.exitSort_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_statement) {
			return visitor.visitSort_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_name) {
			listener.enterSort_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_name) {
			listener.exitSort_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_name) {
			return visitor.visitSort_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_isContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public proc_thru_proc(): Proc_thru_procContext {
		return this.getRuleContext(0, Proc_thru_procContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_is) {
			listener.enterProcedure_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_is) {
			listener.exitProcedure_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_is) {
			return visitor.visitProcedure_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_sort_keyContext extends ParserRuleContext {
	public sort_key(): Sort_keyContext[];
	public sort_key(i: number): Sort_keyContext;
	public sort_key(i?: number): Sort_keyContext | Sort_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_keyContext);
		} else {
			return this.getRuleContext(i, Sort_keyContext);
		}
	}
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_sort_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_sort_key) {
			listener.enterOn_sort_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_sort_key) {
			listener.exitOn_sort_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_sort_key) {
			return visitor.visitOn_sort_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_keyContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_key) {
			listener.enterSort_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_key) {
			listener.exitSort_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_key) {
			return visitor.visitSort_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statementContext extends ParserRuleContext {
	public set_statement_form1(): Set_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Set_statement_form1Context);
	}
	public set_statement_form2(): Set_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Set_statement_form2Context);
	}
	public set_statement_form3(): Set_statement_form3Context | undefined {
		return this.tryGetRuleContext(0, Set_statement_form3Context);
	}
	public set_statement_form4(): Set_statement_form4Context | undefined {
		return this.tryGetRuleContext(0, Set_statement_form4Context);
	}
	public set_statement_form5(): Set_statement_form5Context | undefined {
		return this.tryGetRuleContext(0, Set_statement_form5Context);
	}
	public set_statement_form6(): Set_statement_form6Context | undefined {
		return this.tryGetRuleContext(0, Set_statement_form6Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_statement) {
			listener.enterSet_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_statement) {
			listener.exitSet_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_statement) {
			return visitor.visitSet_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statement_form1Context extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(cobolParser.SET, 0); }
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public set_val(): Set_valContext {
		return this.getRuleContext(0, Set_valContext);
	}
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_statement_form1) {
			listener.enterSet_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_statement_form1) {
			listener.exitSet_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_statement_form1) {
			return visitor.visitSet_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statement_form2Context extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(cobolParser.SET, 0); }
	public BY(): TerminalNode { return this.getToken(cobolParser.BY, 0); }
	public set_increm(): Set_incremContext {
		return this.getRuleContext(0, Set_incremContext);
	}
	public UP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UP, 0); }
	public DOWN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOWN, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_statement_form2) {
			listener.enterSet_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_statement_form2) {
			listener.exitSet_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_statement_form2) {
			return visitor.visitSet_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statement_form3Context extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(cobolParser.SET, 0); }
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public TRUE(): TerminalNode { return this.getToken(cobolParser.TRUE, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_statement_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_statement_form3) {
			listener.enterSet_statement_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_statement_form3) {
			listener.exitSet_statement_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_statement_form3) {
			return visitor.visitSet_statement_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statement_form4Context extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(cobolParser.SET, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.TO);
		} else {
			return this.getToken(cobolParser.TO, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ON);
		} else {
			return this.getToken(cobolParser.ON, i);
		}
	}
	public OFF(): TerminalNode[];
	public OFF(i: number): TerminalNode;
	public OFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OFF);
		} else {
			return this.getToken(cobolParser.OFF, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_statement_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_statement_form4) {
			listener.enterSet_statement_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_statement_form4) {
			listener.exitSet_statement_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_statement_form4) {
			return visitor.visitSet_statement_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statement_form5Context extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(cobolParser.SET, 0); }
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public REFERENCE(): TerminalNode { return this.getToken(cobolParser.REFERENCE, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_statement_form5; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_statement_form5) {
			listener.enterSet_statement_form5(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_statement_form5) {
			listener.exitSet_statement_form5(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_statement_form5) {
			return visitor.visitSet_statement_form5(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_statement_form6Context extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(cobolParser.SET, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SUCCESS, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FAILURE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_statement_form6; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_statement_form6) {
			listener.enterSet_statement_form6(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_statement_form6) {
			listener.exitSet_statement_form6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_statement_form6) {
			return visitor.visitSet_statement_form6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_incremContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_increm; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_increm) {
			listener.enterSet_increm(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_increm) {
			listener.exitSet_increm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_increm) {
			return visitor.visitSet_increm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_valContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_set_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSet_val) {
			listener.enterSet_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSet_val) {
			listener.exitSet_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSet_val) {
			return visitor.visitSet_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_statementContext extends ParserRuleContext {
	public SEARCH(): TerminalNode { return this.getToken(cobolParser.SEARCH, 0); }
	public src_table(): Src_tableContext {
		return this.getRuleContext(0, Src_tableContext);
	}
	public END_SEARCH(): TerminalNode[];
	public END_SEARCH(i: number): TerminalNode;
	public END_SEARCH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.END_SEARCH);
		} else {
			return this.getToken(cobolParser.END_SEARCH, i);
		}
	}
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public search_pointer(): Search_pointerContext | undefined {
		return this.tryGetRuleContext(0, Search_pointerContext);
	}
	public at_end(): At_endContext | undefined {
		return this.tryGetRuleContext(0, At_endContext);
	}
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WHEN);
		} else {
			return this.getToken(cobolParser.WHEN, i);
		}
	}
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public NEXT(): TerminalNode[];
	public NEXT(i: number): TerminalNode;
	public NEXT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEXT);
		} else {
			return this.getToken(cobolParser.NEXT, i);
		}
	}
	public SENTENCE(): TerminalNode[];
	public SENTENCE(i: number): TerminalNode;
	public SENTENCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SENTENCE);
		} else {
			return this.getToken(cobolParser.SENTENCE, i);
		}
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public search_condition(): Search_conditionContext[];
	public search_condition(i: number): Search_conditionContext;
	public search_condition(i?: number): Search_conditionContext | Search_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Search_conditionContext);
		} else {
			return this.getRuleContext(i, Search_conditionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AND);
		} else {
			return this.getToken(cobolParser.AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_search_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSearch_statement) {
			listener.enterSearch_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSearch_statement) {
			listener.exitSearch_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSearch_statement) {
			return visitor.visitSearch_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_conditionContext extends ParserRuleContext {
	public search_elemnt(): Search_elemntContext | undefined {
		return this.tryGetRuleContext(0, Search_elemntContext);
	}
	public search_arg(): Search_argContext | undefined {
		return this.tryGetRuleContext(0, Search_argContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_search_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSearch_condition) {
			listener.enterSearch_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSearch_condition) {
			listener.exitSearch_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSearch_condition) {
			return visitor.visitSearch_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_argContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_search_arg; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSearch_arg) {
			listener.enterSearch_arg(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSearch_arg) {
			listener.exitSearch_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSearch_arg) {
			return visitor.visitSearch_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_elemntContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_search_elemnt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSearch_elemnt) {
			listener.enterSearch_elemnt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSearch_elemnt) {
			listener.exitSearch_elemnt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSearch_elemnt) {
			return visitor.visitSearch_elemnt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Search_pointerContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_search_pointer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSearch_pointer) {
			listener.enterSearch_pointer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSearch_pointer) {
			listener.exitSearch_pointer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSearch_pointer) {
			return visitor.visitSearch_pointer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_tableContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_table; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_table) {
			listener.enterSrc_table(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_table) {
			listener.exitSrc_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_table) {
			return visitor.visitSrc_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rewrite_statementContext extends ParserRuleContext {
	public REWRITE(): TerminalNode { return this.getToken(cobolParser.REWRITE, 0); }
	public rewrite_rec_name(): Rewrite_rec_nameContext {
		return this.getRuleContext(0, Rewrite_rec_nameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public src_item(): Src_itemContext | undefined {
		return this.tryGetRuleContext(0, Src_itemContext);
	}
	public ALLOWING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALLOWING, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public END_REWRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_REWRITE, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rewrite_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRewrite_statement) {
			listener.enterRewrite_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRewrite_statement) {
			listener.exitRewrite_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRewrite_statement) {
			return visitor.visitRewrite_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rewrite_rec_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rewrite_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRewrite_rec_name) {
			listener.enterRewrite_rec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRewrite_rec_name) {
			listener.exitRewrite_rec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRewrite_rec_name) {
			return visitor.visitRewrite_rec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Return_statementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(cobolParser.RETURN, 0); }
	public smrg_file(): Smrg_fileContext {
		return this.getRuleContext(0, Smrg_fileContext);
	}
	public at_end(): At_endContext[];
	public at_end(i: number): At_endContext;
	public at_end(i?: number): At_endContext | At_endContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_endContext);
		} else {
			return this.getRuleContext(i, At_endContext);
		}
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public dest_item(): Dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Dest_itemContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public END_RETURN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_RETURN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_return_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReturn_statement) {
			listener.enterReturn_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReturn_statement) {
			listener.exitReturn_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReturn_statement) {
			return visitor.visitReturn_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smrg_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smrg_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmrg_file) {
			listener.enterSmrg_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmrg_file) {
			listener.exitSmrg_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmrg_file) {
			return visitor.visitSmrg_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Release_statementContext extends ParserRuleContext {
	public RELEASE(): TerminalNode { return this.getToken(cobolParser.RELEASE, 0); }
	public release_rec(): Release_recContext {
		return this.getRuleContext(0, Release_recContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public release_src_area(): Release_src_areaContext | undefined {
		return this.tryGetRuleContext(0, Release_src_areaContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_release_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelease_statement) {
			listener.enterRelease_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelease_statement) {
			listener.exitRelease_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelease_statement) {
			return visitor.visitRelease_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Release_src_areaContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_release_src_area; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelease_src_area) {
			listener.enterRelease_src_area(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelease_src_area) {
			listener.exitRelease_src_area(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelease_src_area) {
			return visitor.visitRelease_src_area(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Release_recContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_release_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelease_rec) {
			listener.enterRelease_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelease_rec) {
			listener.exitRelease_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelease_rec) {
			return visitor.visitRelease_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_statementContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DEPENDENCY(): TerminalNode { return this.getToken(cobolParser.DEPENDENCY, 0); }
	public path_name(): Path_nameContext {
		return this.getRuleContext(0, Path_nameContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public relation_type(): Relation_typeContext | undefined {
		return this.tryGetRuleContext(0, Relation_typeContext);
	}
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DICTIONARY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_statement) {
			listener.enterRecord_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_statement) {
			listener.exitRecord_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_statement) {
			return visitor.visitRecord_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Relation_typeContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_relation_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRelation_type) {
			listener.enterRelation_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRelation_type) {
			listener.exitRelation_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRelation_type) {
			return visitor.visitRelation_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Path_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_path_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPath_name) {
			listener.enterPath_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPath_name) {
			listener.exitPath_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPath_name) {
			return visitor.visitPath_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Read_statementContext extends ParserRuleContext {
	public READ(): TerminalNode { return this.getToken(cobolParser.READ, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public dest_item(): Dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Dest_itemContext);
	}
	public read_options(): Read_optionsContext | undefined {
		return this.tryGetRuleContext(0, Read_optionsContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public key_name(): Key_nameContext | undefined {
		return this.tryGetRuleContext(0, Key_nameContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public END_READ(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_READ, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PREVIOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREVIOUS, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRIOR, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_read_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRead_statement) {
			listener.enterRead_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRead_statement) {
			listener.exitRead_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRead_statement) {
			return visitor.visitRead_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Regard_allowContext extends ParserRuleContext {
	public REGARDLESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REGARDLESS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ALLOWING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALLOWING, 0); }
	public UPDATERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UPDATERS, 0); }
	public READERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.READERS, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_regard_allow; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRegard_allow) {
			listener.enterRegard_allow(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRegard_allow) {
			listener.exitRegard_allow(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRegard_allow) {
			return visitor.visitRegard_allow(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Read_optionsContext extends ParserRuleContext {
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public regard_allow(): Regard_allowContext | undefined {
		return this.tryGetRuleContext(0, Regard_allowContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_read_options; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRead_options) {
			listener.enterRead_options(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRead_options) {
			listener.exitRead_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRead_options) {
			return visitor.visitRead_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_statementContext extends ParserRuleContext {
	public PERFORM(): TerminalNode { return this.getToken(cobolParser.PERFORM, 0); }
	public proc_thru_proc(): Proc_thru_procContext | undefined {
		return this.tryGetRuleContext(0, Proc_thru_procContext);
	}
	public END_PERFORM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_PERFORM, 0); }
	public perform_times(): Perform_timesContext | undefined {
		return this.tryGetRuleContext(0, Perform_timesContext);
	}
	public perform_until(): Perform_untilContext | undefined {
		return this.tryGetRuleContext(0, Perform_untilContext);
	}
	public perform_varying(): Perform_varyingContext | undefined {
		return this.tryGetRuleContext(0, Perform_varyingContext);
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_statement) {
			listener.enterPerform_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_statement) {
			listener.exitPerform_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_statement) {
			return visitor.visitPerform_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_thru_procContext extends ParserRuleContext {
	public proc_name(): Proc_nameContext[];
	public proc_name(i: number): Proc_nameContext;
	public proc_name(i?: number): Proc_nameContext | Proc_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_nameContext);
		} else {
			return this.getRuleContext(i, Proc_nameContext);
		}
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_proc_thru_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProc_thru_proc) {
			listener.enterProc_thru_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProc_thru_proc) {
			listener.exitProc_thru_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProc_thru_proc) {
			return visitor.visitProc_thru_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_timesContext extends ParserRuleContext {
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_times) {
			listener.enterPerform_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_times) {
			listener.exitPerform_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_times) {
			return visitor.visitPerform_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_testContext extends ParserRuleContext {
	public TEST(): TerminalNode { return this.getToken(cobolParser.TEST, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_test; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_test) {
			listener.enterWith_test(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_test) {
			listener.exitWith_test(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_test) {
			return visitor.visitWith_test(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_untilContext extends ParserRuleContext {
	public UNTIL(): TerminalNode { return this.getToken(cobolParser.UNTIL, 0); }
	public logic_expression(): Logic_expressionContext {
		return this.getRuleContext(0, Logic_expressionContext);
	}
	public with_test(): With_testContext | undefined {
		return this.tryGetRuleContext(0, With_testContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_until; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_until) {
			listener.enterPerform_until(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_until) {
			listener.exitPerform_until(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_until) {
			return visitor.visitPerform_until(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_varyingContext extends ParserRuleContext {
	public VARYING(): TerminalNode { return this.getToken(cobolParser.VARYING, 0); }
	public perform_range(): Perform_rangeContext[];
	public perform_range(i: number): Perform_rangeContext;
	public perform_range(i?: number): Perform_rangeContext | Perform_rangeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Perform_rangeContext);
		} else {
			return this.getRuleContext(i, Perform_rangeContext);
		}
	}
	public UNTIL(): TerminalNode[];
	public UNTIL(i: number): TerminalNode;
	public UNTIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UNTIL);
		} else {
			return this.getToken(cobolParser.UNTIL, i);
		}
	}
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public with_test(): With_testContext | undefined {
		return this.tryGetRuleContext(0, With_testContext);
	}
	public AFTER(): TerminalNode[];
	public AFTER(i: number): TerminalNode;
	public AFTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AFTER);
		} else {
			return this.getToken(cobolParser.AFTER, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_varying; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_varying) {
			listener.enterPerform_varying(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_varying) {
			listener.exitPerform_varying(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_varying) {
			return visitor.visitPerform_varying(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_rangeContext extends ParserRuleContext {
	public perform_var(): Perform_varContext {
		return this.getRuleContext(0, Perform_varContext);
	}
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public perform_init(): Perform_initContext {
		return this.getRuleContext(0, Perform_initContext);
	}
	public BY(): TerminalNode { return this.getToken(cobolParser.BY, 0); }
	public perform_increm(): Perform_incremContext {
		return this.getRuleContext(0, Perform_incremContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_range; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_range) {
			listener.enterPerform_range(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_range) {
			listener.exitPerform_range(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_range) {
			return visitor.visitPerform_range(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_incremContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_increm; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_increm) {
			listener.enterPerform_increm(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_increm) {
			listener.exitPerform_increm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_increm) {
			return visitor.visitPerform_increm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_initContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_init; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_init) {
			listener.enterPerform_init(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_init) {
			listener.exitPerform_init(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_init) {
			return visitor.visitPerform_init(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Perform_varContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_perform_var; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPerform_var) {
			listener.enterPerform_var(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPerform_var) {
			listener.exitPerform_var(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPerform_var) {
			return visitor.visitPerform_var(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_statementContext extends ParserRuleContext {
	public OPEN(): TerminalNode { return this.getToken(cobolParser.OPEN, 0); }
	public open_definition(): Open_definitionContext[];
	public open_definition(i: number): Open_definitionContext;
	public open_definition(i?: number): Open_definitionContext | Open_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Open_definitionContext);
		} else {
			return this.getRuleContext(i, Open_definitionContext);
		}
	}
	public OUTPUT(): TerminalNode[];
	public OUTPUT(i: number): TerminalNode;
	public OUTPUT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OUTPUT);
		} else {
			return this.getToken(cobolParser.OUTPUT, i);
		}
	}
	public EXTEND(): TerminalNode[];
	public EXTEND(i: number): TerminalNode;
	public EXTEND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.EXTEND);
		} else {
			return this.getToken(cobolParser.EXTEND, i);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NO);
		} else {
			return this.getToken(cobolParser.NO, i);
		}
	}
	public REWIND(): TerminalNode[];
	public REWIND(i: number): TerminalNode;
	public REWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.REWIND);
		} else {
			return this.getToken(cobolParser.REWIND, i);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WITH);
		} else {
			return this.getToken(cobolParser.WITH, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_open_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOpen_statement) {
			listener.enterOpen_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOpen_statement) {
			listener.exitOpen_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOpen_statement) {
			return visitor.visitOpen_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_definitionContext extends ParserRuleContext {
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTEND, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I_O, 0); }
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NO);
		} else {
			return this.getToken(cobolParser.NO, i);
		}
	}
	public REWIND(): TerminalNode[];
	public REWIND(i: number): TerminalNode;
	public REWIND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.REWIND);
		} else {
			return this.getToken(cobolParser.REWIND, i);
		}
	}
	public open_file_attributes(): Open_file_attributesContext[];
	public open_file_attributes(i: number): Open_file_attributesContext;
	public open_file_attributes(i?: number): Open_file_attributesContext | Open_file_attributesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Open_file_attributesContext);
		} else {
			return this.getRuleContext(i, Open_file_attributesContext);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WITH);
		} else {
			return this.getToken(cobolParser.WITH, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_open_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOpen_definition) {
			listener.enterOpen_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOpen_definition) {
			listener.exitOpen_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOpen_definition) {
			return visitor.visitOpen_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_file_attributesContext extends ParserRuleContext {
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public ALLOWING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALLOWING, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public READERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.READERS, 0); }
	public UPDATERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UPDATERS, 0); }
	public WRITERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WRITERS, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_open_file_attributes; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOpen_file_attributes) {
			listener.enterOpen_file_attributes(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOpen_file_attributes) {
			listener.exitOpen_file_attributes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOpen_file_attributes) {
			return visitor.visitOpen_file_attributes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiply_statementContext extends ParserRuleContext {
	public MULTIPLY(): TerminalNode { return this.getToken(cobolParser.MULTIPLY, 0); }
	public mult_num(): Mult_numContext[];
	public mult_num(i: number): Mult_numContext;
	public mult_num(i?: number): Mult_numContext | Mult_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Mult_numContext);
		} else {
			return this.getRuleContext(i, Mult_numContext);
		}
	}
	public BY(): TerminalNode { return this.getToken(cobolParser.BY, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_MULTIPLY, 0); }
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiply_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiply_statement) {
			listener.enterMultiply_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiply_statement) {
			listener.exitMultiply_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiply_statement) {
			return visitor.visitMultiply_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Mult_numContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_mult_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMult_num) {
			listener.enterMult_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMult_num) {
			listener.exitMult_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMult_num) {
			return visitor.visitMult_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_statementContext extends ParserRuleContext {
	public MERGE(): TerminalNode { return this.getToken(cobolParser.MERGE, 0); }
	public mergefile(): MergefileContext {
		return this.getRuleContext(0, MergefileContext);
	}
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public output_proc(): Output_procContext | undefined {
		return this.tryGetRuleContext(0, Output_procContext);
	}
	public giving_file(): Giving_fileContext | undefined {
		return this.tryGetRuleContext(0, Giving_fileContext);
	}
	public merge_on(): Merge_onContext[];
	public merge_on(i: number): Merge_onContext;
	public merge_on(i?: number): Merge_onContext | Merge_onContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Merge_onContext);
		} else {
			return this.getRuleContext(i, Merge_onContext);
		}
	}
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext | undefined {
		return this.tryGetRuleContext(0, Alpha_nameContext);
	}
	public infile(): InfileContext[];
	public infile(i: number): InfileContext;
	public infile(i?: number): InfileContext | InfileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InfileContext);
		} else {
			return this.getRuleContext(i, InfileContext);
		}
	}
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_merge_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMerge_statement) {
			listener.enterMerge_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMerge_statement) {
			listener.exitMerge_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMerge_statement) {
			return visitor.visitMerge_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Output_procContext extends ParserRuleContext {
	public OUTPUT(): TerminalNode { return this.getToken(cobolParser.OUTPUT, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public proc_thru_proc(): Proc_thru_procContext {
		return this.getRuleContext(0, Proc_thru_procContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_output_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOutput_proc) {
			listener.enterOutput_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOutput_proc) {
			listener.exitOutput_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOutput_proc) {
			return visitor.visitOutput_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_procContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_proc) {
			listener.enterFirst_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_proc) {
			listener.exitFirst_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_proc) {
			return visitor.visitFirst_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_procContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_proc) {
			listener.enterEnd_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_proc) {
			listener.exitEnd_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_proc) {
			return visitor.visitEnd_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Giving_fileContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_giving_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGiving_file) {
			listener.enterGiving_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGiving_file) {
			listener.exitGiving_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGiving_file) {
			return visitor.visitGiving_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InfileContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_infile; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInfile) {
			listener.enterInfile(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInfile) {
			listener.exitInfile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInfile) {
			return visitor.visitInfile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_onContext extends ParserRuleContext {
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public mergekey(): MergekeyContext[];
	public mergekey(i: number): MergekeyContext;
	public mergekey(i?: number): MergekeyContext | MergekeyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MergekeyContext);
		} else {
			return this.getRuleContext(i, MergekeyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_merge_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMerge_on) {
			listener.enterMerge_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMerge_on) {
			listener.exitMerge_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMerge_on) {
			return visitor.visitMerge_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergefileContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_mergefile; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMergefile) {
			listener.enterMergefile(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMergefile) {
			listener.exitMergefile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMergefile) {
			return visitor.visitMergefile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergekeyContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_mergekey; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMergekey) {
			listener.enterMergekey(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMergekey) {
			listener.exitMergekey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMergekey) {
			return visitor.visitMergekey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_statementContext extends ParserRuleContext {
	public INSPECT(): TerminalNode { return this.getToken(cobolParser.INSPECT, 0); }
	public src_string(): Src_stringContext {
		return this.getRuleContext(0, Src_stringContext);
	}
	public inspect_tallying(): Inspect_tallyingContext | undefined {
		return this.tryGetRuleContext(0, Inspect_tallyingContext);
	}
	public inspect_replacing(): Inspect_replacingContext | undefined {
		return this.tryGetRuleContext(0, Inspect_replacingContext);
	}
	public inspect_converting(): Inspect_convertingContext | undefined {
		return this.tryGetRuleContext(0, Inspect_convertingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_statement) {
			listener.enterInspect_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_statement) {
			listener.exitInspect_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_statement) {
			return visitor.visitInspect_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_convertingContext extends ParserRuleContext {
	public CONVERTING(): TerminalNode { return this.getToken(cobolParser.CONVERTING, 0); }
	public compare_chars(): Compare_charsContext {
		return this.getRuleContext(0, Compare_charsContext);
	}
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public convert_chars(): Convert_charsContext {
		return this.getRuleContext(0, Convert_charsContext);
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_converting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_converting) {
			listener.enterInspect_converting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_converting) {
			listener.exitInspect_converting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_converting) {
			return visitor.visitInspect_converting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Convert_charsContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_convert_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConvert_chars) {
			listener.enterConvert_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConvert_chars) {
			listener.exitConvert_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConvert_chars) {
			return visitor.visitConvert_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compare_charsContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compare_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompare_chars) {
			listener.enterCompare_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompare_chars) {
			listener.exitCompare_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompare_chars) {
			return visitor.visitCompare_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_replacingContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(cobolParser.REPLACING, 0); }
	public replacing_characters(): Replacing_charactersContext[];
	public replacing_characters(i: number): Replacing_charactersContext;
	public replacing_characters(i?: number): Replacing_charactersContext | Replacing_charactersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replacing_charactersContext);
		} else {
			return this.getRuleContext(i, Replacing_charactersContext);
		}
	}
	public replacing_all(): Replacing_allContext[];
	public replacing_all(i: number): Replacing_allContext;
	public replacing_all(i?: number): Replacing_allContext | Replacing_allContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replacing_allContext);
		} else {
			return this.getRuleContext(i, Replacing_allContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_replacing; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_replacing) {
			listener.enterInspect_replacing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_replacing) {
			listener.exitInspect_replacing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_replacing) {
			return visitor.visitInspect_replacing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replacing_allContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public compare_val(): Compare_valContext[];
	public compare_val(i: number): Compare_valContext;
	public compare_val(i?: number): Compare_valContext | Compare_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Compare_valContext);
		} else {
			return this.getRuleContext(i, Compare_valContext);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.BY);
		} else {
			return this.getToken(cobolParser.BY, i);
		}
	}
	public replace_val(): Replace_valContext[];
	public replace_val(i: number): Replace_valContext;
	public replace_val(i?: number): Replace_valContext | Replace_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_valContext);
		} else {
			return this.getRuleContext(i, Replace_valContext);
		}
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replacing_all; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplacing_all) {
			listener.enterReplacing_all(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplacing_all) {
			listener.exitReplacing_all(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplacing_all) {
			return visitor.visitReplacing_all(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replace_valContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replace_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplace_val) {
			listener.enterReplace_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplace_val) {
			listener.exitReplace_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplace_val) {
			return visitor.visitReplace_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replacing_charactersContext extends ParserRuleContext {
	public CHARACTERS(): TerminalNode { return this.getToken(cobolParser.CHARACTERS, 0); }
	public BY(): TerminalNode { return this.getToken(cobolParser.BY, 0); }
	public replace_char(): Replace_charContext {
		return this.getRuleContext(0, Replace_charContext);
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replacing_characters; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplacing_characters) {
			listener.enterReplacing_characters(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplacing_characters) {
			listener.exitReplacing_characters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplacing_characters) {
			return visitor.visitReplacing_characters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replace_charContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replace_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplace_char) {
			listener.enterReplace_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplace_char) {
			listener.exitReplace_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplace_char) {
			return visitor.visitReplace_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Inspect_tallyingContext extends ParserRuleContext {
	public TALLYING(): TerminalNode { return this.getToken(cobolParser.TALLYING, 0); }
	public tallying_for(): Tallying_forContext[];
	public tallying_for(i: number): Tallying_forContext;
	public tallying_for(i?: number): Tallying_forContext | Tallying_forContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tallying_forContext);
		} else {
			return this.getRuleContext(i, Tallying_forContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_inspect_tallying; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInspect_tallying) {
			listener.enterInspect_tallying(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInspect_tallying) {
			listener.exitInspect_tallying(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInspect_tallying) {
			return visitor.visitInspect_tallying(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tallying_forContext extends ParserRuleContext {
	public tally_ctr(): Tally_ctrContext {
		return this.getRuleContext(0, Tally_ctrContext);
	}
	public FOR(): TerminalNode { return this.getToken(cobolParser.FOR, 0); }
	public tallying_for_characters(): Tallying_for_charactersContext[];
	public tallying_for_characters(i: number): Tallying_for_charactersContext;
	public tallying_for_characters(i?: number): Tallying_for_charactersContext | Tallying_for_charactersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tallying_for_charactersContext);
		} else {
			return this.getRuleContext(i, Tallying_for_charactersContext);
		}
	}
	public tallying_for_all(): Tallying_for_allContext[];
	public tallying_for_all(i: number): Tallying_for_allContext;
	public tallying_for_all(i?: number): Tallying_for_allContext | Tallying_for_allContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tallying_for_allContext);
		} else {
			return this.getRuleContext(i, Tallying_for_allContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tallying_for; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTallying_for) {
			listener.enterTallying_for(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTallying_for) {
			listener.exitTallying_for(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTallying_for) {
			return visitor.visitTallying_for(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tallying_for_charactersContext extends ParserRuleContext {
	public CHARACTERS(): TerminalNode { return this.getToken(cobolParser.CHARACTERS, 0); }
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tallying_for_characters; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTallying_for_characters) {
			listener.enterTallying_for_characters(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTallying_for_characters) {
			listener.exitTallying_for_characters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTallying_for_characters) {
			return visitor.visitTallying_for_characters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delim_definitionContext extends ParserRuleContext {
	public delim_val(): Delim_valContext {
		return this.getRuleContext(0, Delim_valContext);
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delim_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelim_definition) {
			listener.enterDelim_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelim_definition) {
			listener.exitDelim_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelim_definition) {
			return visitor.visitDelim_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tallying_for_allContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public compare_val(): Compare_valContext[];
	public compare_val(i: number): Compare_valContext;
	public compare_val(i?: number): Compare_valContext | Compare_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Compare_valContext);
		} else {
			return this.getRuleContext(i, Compare_valContext);
		}
	}
	public delim_definition(): Delim_definitionContext[];
	public delim_definition(i: number): Delim_definitionContext;
	public delim_definition(i?: number): Delim_definitionContext | Delim_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Delim_definitionContext);
		} else {
			return this.getRuleContext(i, Delim_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tallying_for_all; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTallying_for_all) {
			listener.enterTallying_for_all(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTallying_for_all) {
			listener.exitTallying_for_all(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTallying_for_all) {
			return visitor.visitTallying_for_all(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compare_valContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public figurative_constant_witout_all(): Figurative_constant_witout_allContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_allContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compare_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompare_val) {
			listener.enterCompare_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompare_val) {
			listener.exitCompare_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompare_val) {
			return visitor.visitCompare_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delim_valContext extends ParserRuleContext {
	public compare_val(): Compare_valContext {
		return this.getRuleContext(0, Compare_valContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delim_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelim_val) {
			listener.enterDelim_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelim_val) {
			listener.exitDelim_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelim_val) {
			return visitor.visitDelim_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tally_ctrContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_tally_ctr; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTally_ctr) {
			listener.enterTally_ctr(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTally_ctr) {
			listener.exitTally_ctr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTally_ctr) {
			return visitor.visitTally_ctr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_stringContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_string) {
			listener.enterSrc_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_string) {
			listener.exitSrc_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_string) {
			return visitor.visitSrc_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Initiate_statementContext extends ParserRuleContext {
	public INITIATE(): TerminalNode { return this.getToken(cobolParser.INITIATE, 0); }
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_initiate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInitiate_statement) {
			listener.enterInitiate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInitiate_statement) {
			listener.exitInitiate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInitiate_statement) {
			return visitor.visitInitiate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Initialize_statementContext extends ParserRuleContext {
	public INITIALIZE(): TerminalNode { return this.getToken(cobolParser.INITIALIZE, 0); }
	public fld_name(): Fld_nameContext[];
	public fld_name(i: number): Fld_nameContext;
	public fld_name(i?: number): Fld_nameContext | Fld_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fld_nameContext);
		} else {
			return this.getRuleContext(i, Fld_nameContext);
		}
	}
	public replacing(): ReplacingContext[];
	public replacing(i: number): ReplacingContext;
	public replacing(i?: number): ReplacingContext | ReplacingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReplacingContext);
		} else {
			return this.getRuleContext(i, ReplacingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_initialize_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInitialize_statement) {
			listener.enterInitialize_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInitialize_statement) {
			listener.exitInitialize_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInitialize_statement) {
			return visitor.visitInitialize_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplacingContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(cobolParser.REPLACING, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.BY);
		} else {
			return this.getToken(cobolParser.BY, i);
		}
	}
	public init_value(): Init_valueContext[];
	public init_value(i: number): Init_valueContext;
	public init_value(i?: number): Init_valueContext | Init_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Init_valueContext);
		} else {
			return this.getRuleContext(i, Init_valueContext);
		}
	}
	public ALPHABETIC(): TerminalNode[];
	public ALPHABETIC(i: number): TerminalNode;
	public ALPHABETIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHABETIC);
		} else {
			return this.getToken(cobolParser.ALPHABETIC, i);
		}
	}
	public ALPHANUMERIC(): TerminalNode[];
	public ALPHANUMERIC(i: number): TerminalNode;
	public ALPHANUMERIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHANUMERIC);
		} else {
			return this.getToken(cobolParser.ALPHANUMERIC, i);
		}
	}
	public NUMERIC(): TerminalNode[];
	public NUMERIC(i: number): TerminalNode;
	public NUMERIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NUMERIC);
		} else {
			return this.getToken(cobolParser.NUMERIC, i);
		}
	}
	public ALPHANUMERIC_EDITED(): TerminalNode[];
	public ALPHANUMERIC_EDITED(i: number): TerminalNode;
	public ALPHANUMERIC_EDITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHANUMERIC_EDITED);
		} else {
			return this.getToken(cobolParser.ALPHANUMERIC_EDITED, i);
		}
	}
	public NUMERIC_EDITED(): TerminalNode[];
	public NUMERIC_EDITED(i: number): TerminalNode;
	public NUMERIC_EDITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NUMERIC_EDITED);
		} else {
			return this.getToken(cobolParser.NUMERIC_EDITED, i);
		}
	}
	public DATA(): TerminalNode[];
	public DATA(i: number): TerminalNode;
	public DATA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DATA);
		} else {
			return this.getToken(cobolParser.DATA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replacing; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplacing) {
			listener.enterReplacing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplacing) {
			listener.exitReplacing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplacing) {
			return visitor.visitReplacing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Init_valueContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_init_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInit_value) {
			listener.enterInit_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInit_value) {
			listener.exitInit_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInit_value) {
			return visitor.visitInit_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fld_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fld_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFld_name) {
			listener.enterFld_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFld_name) {
			listener.exitFld_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFld_name) {
			return visitor.visitFld_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Move_statementContext extends ParserRuleContext {
	public MOVE(): TerminalNode { return this.getToken(cobolParser.MOVE, 0); }
	public src_item(): Src_itemContext {
		return this.getRuleContext(0, Src_itemContext);
	}
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public dest_item(): Dest_itemContext[];
	public dest_item(i: number): Dest_itemContext;
	public dest_item(i?: number): Dest_itemContext | Dest_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dest_itemContext);
		} else {
			return this.getRuleContext(i, Dest_itemContext);
		}
	}
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_move_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMove_statement) {
			listener.enterMove_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMove_statement) {
			listener.exitMove_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMove_statement) {
			return visitor.visitMove_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_statementContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(cobolParser.IF, 0); }
	public logic_expression(): Logic_expressionContext {
		return this.getRuleContext(0, Logic_expressionContext);
	}
	public NEXT(): TerminalNode[];
	public NEXT(i: number): TerminalNode;
	public NEXT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEXT);
		} else {
			return this.getToken(cobolParser.NEXT, i);
		}
	}
	public SENTENCE(): TerminalNode[];
	public SENTENCE(i: number): TerminalNode;
	public SENTENCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SENTENCE);
		} else {
			return this.getToken(cobolParser.SENTENCE, i);
		}
	}
	public THEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THEN, 0); }
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ELSE, 0); }
	public END_IF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_IF, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_if_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIf_statement) {
			listener.enterIf_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIf_statement) {
			listener.exitIf_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIf_statement) {
			return visitor.visitIf_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generate_statementContext extends ParserRuleContext {
	public GENERATE(): TerminalNode { return this.getToken(cobolParser.GENERATE, 0); }
	public report_item(): Report_itemContext {
		return this.getRuleContext(0, Report_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_generate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGenerate_statement) {
			listener.enterGenerate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGenerate_statement) {
			listener.exitGenerate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGenerate_statement) {
			return visitor.visitGenerate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_item) {
			listener.enterReport_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_item) {
			listener.exitReport_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_item) {
			return visitor.visitReport_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_statementContext extends ParserRuleContext {
	public EXIT(): TerminalNode { return this.getToken(cobolParser.EXIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_exit_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExit_statement) {
			listener.enterExit_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExit_statement) {
			listener.exitExit_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExit_statement) {
			return visitor.visitExit_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_program_statementContext extends ParserRuleContext {
	public EXIT(): TerminalNode { return this.getToken(cobolParser.EXIT, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(cobolParser.PROGRAM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_exit_program_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExit_program_statement) {
			listener.enterExit_program_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExit_program_statement) {
			listener.exitExit_program_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExit_program_statement) {
			return visitor.visitExit_program_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Go_to_statementContext extends ParserRuleContext {
	public GO(): TerminalNode { return this.getToken(cobolParser.GO, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public proc_name(): Proc_nameContext[];
	public proc_name(i: number): Proc_nameContext;
	public proc_name(i?: number): Proc_nameContext | Proc_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_nameContext);
		} else {
			return this.getRuleContext(i, Proc_nameContext);
		}
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_go_to_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGo_to_statement) {
			listener.enterGo_to_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGo_to_statement) {
			listener.exitGo_to_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGo_to_statement) {
			return visitor.visitGo_to_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_proc_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProc_name) {
			listener.enterProc_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProc_name) {
			listener.exitProc_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProc_name) {
			return visitor.visitProc_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Evaluate_statementContext extends ParserRuleContext {
	public EVALUATE(): TerminalNode { return this.getToken(cobolParser.EVALUATE, 0); }
	public subj_item(): Subj_itemContext[];
	public subj_item(i: number): Subj_itemContext;
	public subj_item(i?: number): Subj_itemContext | Subj_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Subj_itemContext);
		} else {
			return this.getRuleContext(i, Subj_itemContext);
		}
	}
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WHEN);
		} else {
			return this.getToken(cobolParser.WHEN, i);
		}
	}
	public when_condition(): When_conditionContext[];
	public when_condition(i: number): When_conditionContext;
	public when_condition(i?: number): When_conditionContext | When_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(When_conditionContext);
		} else {
			return this.getRuleContext(i, When_conditionContext);
		}
	}
	public OTHER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHER, 0); }
	public END_EVALUATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_EVALUATE, 0); }
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_evaluate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEvaluate_statement) {
			listener.enterEvaluate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEvaluate_statement) {
			listener.exitEvaluate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEvaluate_statement) {
			return visitor.visitEvaluate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class When_conditionContext extends ParserRuleContext {
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ANY, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_when_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWhen_condition) {
			listener.enterWhen_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWhen_condition) {
			listener.exitWhen_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWhen_condition) {
			return visitor.visitWhen_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Subj_itemContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Arithmetic_expressionContext);
	}
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subj_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubj_item) {
			listener.enterSubj_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubj_item) {
			listener.exitSubj_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubj_item) {
			return visitor.visitSubj_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statementContext extends ParserRuleContext {
	public divide_statement_form1(): Divide_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form1Context);
	}
	public divide_statement_form2(): Divide_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form2Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement) {
			listener.enterDivide_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement) {
			listener.exitDivide_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement) {
			return visitor.visitDivide_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form1Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form1) {
			listener.enterDivide_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form1) {
			listener.exitDivide_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form1) {
			return visitor.visitDivide_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form2Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public REMAINDER(): TerminalNode { return this.getToken(cobolParser.REMAINDER, 0); }
	public remaind(): RemaindContext {
		return this.getRuleContext(0, RemaindContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROUNDED, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form2) {
			listener.enterDivide_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form2) {
			listener.exitDivide_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form2) {
			return visitor.visitDivide_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemaindContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_remaind; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRemaind) {
			listener.enterRemaind(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRemaind) {
			listener.exitRemaind(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRemaind) {
			return visitor.visitRemaind(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_numContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_num) {
			listener.enterDivide_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_num) {
			listener.exitDivide_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_num) {
			return visitor.visitDivide_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statementContext extends ParserRuleContext {
	public display_statement_form1(): Display_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form1Context);
	}
	public display_statement_form2(): Display_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form2Context);
	}
	public display_statement_form3(): Display_statement_form3Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form3Context);
	}
	public display_statement_form4(): Display_statement_form4Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form4Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement) {
			listener.enterDisplay_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement) {
			listener.exitDisplay_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement) {
			return visitor.visitDisplay_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form1Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public display_form1_clause(): Display_form1_clauseContext[];
	public display_form1_clause(i: number): Display_form1_clauseContext;
	public display_form1_clause(i?: number): Display_form1_clauseContext | Display_form1_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form1_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form1_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form1) {
			listener.enterDisplay_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form1) {
			listener.exitDisplay_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form1) {
			return visitor.visitDisplay_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form2Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public display_form2_clause(): Display_form2_clauseContext[];
	public display_form2_clause(i: number): Display_form2_clauseContext;
	public display_form2_clause(i?: number): Display_form2_clauseContext | Display_form2_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form2_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form2_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form2) {
			listener.enterDisplay_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form2) {
			listener.exitDisplay_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form2) {
			return visitor.visitDisplay_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form3Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public disp_f3_line(): Disp_f3_lineContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_lineContext);
	}
	public disp_f3_column(): Disp_f3_columnContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form3) {
			listener.enterDisplay_statement_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form3) {
			listener.exitDisplay_statement_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form3) {
			return visitor.visitDisplay_statement_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form4Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext {
		return this.getRuleContext(0, Src_itemContext);
	}
	public upon_dest(): Upon_destContext {
		return this.getRuleContext(0, Upon_destContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form4) {
			listener.enterDisplay_statement_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form4) {
			listener.exitDisplay_statement_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form4) {
			return visitor.visitDisplay_statement_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_itemContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_item) {
			listener.enterSrc_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_item) {
			listener.exitSrc_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_item) {
			return visitor.visitSrc_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_line) {
			listener.enterDisp_f3_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_line) {
			listener.exitDisp_f3_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_line) {
			return visitor.visitDisp_f3_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_column) {
			listener.enterDisp_f3_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_column) {
			listener.exitDisp_f3_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_column) {
			return visitor.visitDisp_f3_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form1_clauseContext extends ParserRuleContext {
	public with_conversion(): With_conversionContext | undefined {
		return this.tryGetRuleContext(0, With_conversionContext);
	}
	public upon_dest(): Upon_destContext | undefined {
		return this.tryGetRuleContext(0, Upon_destContext);
	}
	public with_no_advancing(): With_no_advancingContext | undefined {
		return this.tryGetRuleContext(0, With_no_advancingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form1_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form1_clause) {
			listener.enterDisplay_form1_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form1_clause) {
			listener.exitDisplay_form1_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form1_clause) {
			return visitor.visitDisplay_form1_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Upon_destContext extends ParserRuleContext {
	public UPON(): TerminalNode { return this.getToken(cobolParser.UPON, 0); }
	public out_dest(): Out_destContext {
		return this.getRuleContext(0, Out_destContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_upon_dest; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUpon_dest) {
			listener.enterUpon_dest(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUpon_dest) {
			listener.exitUpon_dest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUpon_dest) {
			return visitor.visitUpon_dest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_conversionContext extends ParserRuleContext {
	public CONVERSION(): TerminalNode { return this.getToken(cobolParser.CONVERSION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_conversion; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_conversion) {
			listener.enterWith_conversion(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_conversion) {
			listener.exitWith_conversion(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_conversion) {
			return visitor.visitWith_conversion(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_no_advancingContext extends ParserRuleContext {
	public NO(): TerminalNode { return this.getToken(cobolParser.NO, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_no_advancing; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_no_advancing) {
			listener.enterWith_no_advancing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_no_advancing) {
			listener.exitWith_no_advancing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_no_advancing) {
			return visitor.visitWith_no_advancing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form2_clauseContext extends ParserRuleContext {
	public display_form1_clause(): Display_form1_clauseContext | undefined {
		return this.tryGetRuleContext(0, Display_form1_clauseContext);
	}
	public at_line_number(): At_line_numberContext | undefined {
		return this.tryGetRuleContext(0, At_line_numberContext);
	}
	public at_column_number(): At_column_numberContext | undefined {
		return this.tryGetRuleContext(0, At_column_numberContext);
	}
	public erase_to(): Erase_toContext | undefined {
		return this.tryGetRuleContext(0, Erase_toContext);
	}
	public with_bell(): With_bellContext | undefined {
		return this.tryGetRuleContext(0, With_bellContext);
	}
	public underlined(): UnderlinedContext | undefined {
		return this.tryGetRuleContext(0, UnderlinedContext);
	}
	public bold(): BoldContext | undefined {
		return this.tryGetRuleContext(0, BoldContext);
	}
	public with_blinking(): With_blinkingContext | undefined {
		return this.tryGetRuleContext(0, With_blinkingContext);
	}
	public reversed(): ReversedContext | undefined {
		return this.tryGetRuleContext(0, ReversedContext);
	}
	public with_conversion(): With_conversionContext | undefined {
		return this.tryGetRuleContext(0, With_conversionContext);
	}
	public with_no_advancing(): With_no_advancingContext | undefined {
		return this.tryGetRuleContext(0, With_no_advancingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form2_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form2_clause) {
			listener.enterDisplay_form2_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form2_clause) {
			listener.exitDisplay_form2_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form2_clause) {
			return visitor.visitDisplay_form2_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReversedContext extends ParserRuleContext {
	public REVERSED(): TerminalNode { return this.getToken(cobolParser.REVERSED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reversed; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReversed) {
			listener.enterReversed(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReversed) {
			listener.exitReversed(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReversed) {
			return visitor.visitReversed(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_blinkingContext extends ParserRuleContext {
	public BLINKING(): TerminalNode { return this.getToken(cobolParser.BLINKING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_blinking; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_blinking) {
			listener.enterWith_blinking(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_blinking) {
			listener.exitWith_blinking(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_blinking) {
			return visitor.visitWith_blinking(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BoldContext extends ParserRuleContext {
	public BOLD(): TerminalNode { return this.getToken(cobolParser.BOLD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bold; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBold) {
			listener.enterBold(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBold) {
			listener.exitBold(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBold) {
			return visitor.visitBold(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_bellContext extends ParserRuleContext {
	public BELL(): TerminalNode { return this.getToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_bell; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_bell) {
			listener.enterWith_bell(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_bell) {
			listener.exitWith_bell(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_bell) {
			return visitor.visitWith_bell(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnderlinedContext extends ParserRuleContext {
	public UNDERLINED(): TerminalNode { return this.getToken(cobolParser.UNDERLINED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_underlined; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnderlined) {
			listener.enterUnderlined(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnderlined) {
			listener.exitUnderlined(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnderlined) {
			return visitor.visitUnderlined(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Erase_toContext extends ParserRuleContext {
	public ERASE(): TerminalNode { return this.getToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_erase_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterErase_to) {
			listener.enterErase_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitErase_to) {
			listener.exitErase_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitErase_to) {
			return visitor.visitErase_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_line_numberContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_line_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_line_number) {
			listener.enterAt_line_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_line_number) {
			listener.exitAt_line_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_line_number) {
			return visitor.visitAt_line_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_column_numberContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_column_number) {
			listener.enterAt_column_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_column_number) {
			listener.exitAt_column_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_column_number) {
			return visitor.visitAt_column_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Out_destContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_out_dest; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOut_dest) {
			listener.enterOut_dest(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOut_dest) {
			listener.exitOut_dest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOut_dest) {
			return visitor.visitOut_dest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_statementContext extends ParserRuleContext {
	public DELETE(): TerminalNode { return this.getToken(cobolParser.DELETE, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public invalid_key_variants(): Invalid_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, Invalid_key_variantsContext);
	}
	public END_DELETE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delete_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelete_statement) {
			listener.enterDelete_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelete_statement) {
			listener.exitDelete_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelete_statement) {
			return visitor.visitDelete_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Continue_statementContext extends ParserRuleContext {
	public CONTINUE(): TerminalNode { return this.getToken(cobolParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_continue_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterContinue_statement) {
			listener.enterContinue_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitContinue_statement) {
			listener.exitContinue_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitContinue_statement) {
			return visitor.visitContinue_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compute_statementContext extends ParserRuleContext {
	public COMPUTE(): TerminalNode { return this.getToken(cobolParser.COMPUTE, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_COMPUTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_COMPUTE, 0); }
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compute_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompute_statement) {
			listener.enterCompute_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompute_statement) {
			listener.exitCompute_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompute_statement) {
			return visitor.visitCompute_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_statementContext extends ParserRuleContext {
	public CLOSE(): TerminalNode { return this.getToken(cobolParser.CLOSE, 0); }
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public close_params(): Close_paramsContext[];
	public close_params(i: number): Close_paramsContext;
	public close_params(i?: number): Close_paramsContext | Close_paramsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Close_paramsContext);
		} else {
			return this.getRuleContext(i, Close_paramsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_statement) {
			listener.enterClose_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_statement) {
			listener.exitClose_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_statement) {
			return visitor.visitClose_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_paramsContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public REMOVAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REMOVAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REWIND, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_params; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_params) {
			listener.enterClose_params(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_params) {
			listener.exitClose_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_params) {
			return visitor.visitClose_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cancel_statementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(cobolParser.CANCEL, 0); }
	public prog_name(): Prog_nameContext[];
	public prog_name(i: number): Prog_nameContext;
	public prog_name(i?: number): Prog_nameContext | Prog_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Prog_nameContext);
		} else {
			return this.getRuleContext(i, Prog_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cancel_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCancel_statement) {
			listener.enterCancel_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCancel_statement) {
			listener.exitCancel_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCancel_statement) {
			return visitor.visitCancel_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_statementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(cobolParser.CALL, 0); }
	public prog_name(): Prog_nameContext {
		return this.getRuleContext(0, Prog_nameContext);
	}
	public call_using(): Call_usingContext | undefined {
		return this.tryGetRuleContext(0, Call_usingContext);
	}
	public call_giving(): Call_givingContext | undefined {
		return this.tryGetRuleContext(0, Call_givingContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_CALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_CALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_statement) {
			listener.enterCall_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_statement) {
			listener.exitCall_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_statement) {
			return visitor.visitCall_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_givingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_giving) {
			listener.enterCall_giving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_giving) {
			listener.exitCall_giving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_giving) {
			return visitor.visitCall_giving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public using_arg(): Using_argContext[];
	public using_arg(i: number): Using_argContext;
	public using_arg(i?: number): Using_argContext | Using_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Using_argContext);
		} else {
			return this.getRuleContext(i, Using_argContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_using) {
			listener.enterCall_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_using) {
			listener.exitCall_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_using) {
			return visitor.visitCall_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_argContext extends ParserRuleContext {
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public using_prefix(): Using_prefixContext | undefined {
		return this.tryGetRuleContext(0, Using_prefixContext);
	}
	public argument(): ArgumentContext[];
	public argument(i: number): ArgumentContext;
	public argument(i?: number): ArgumentContext | ArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArgumentContext);
		} else {
			return this.getRuleContext(i, ArgumentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_arg; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_arg) {
			listener.enterUsing_arg(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_arg) {
			listener.exitUsing_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_arg) {
			return visitor.visitUsing_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_prefixContext extends ParserRuleContext {
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTENT, 0); }
	public DESCRIPTOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCRIPTOR, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_prefix; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_prefix) {
			listener.enterUsing_prefix(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_prefix) {
			listener.exitUsing_prefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_prefix) {
			return visitor.visitUsing_prefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_argument; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArgument) {
			listener.enterArgument(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArgument) {
			listener.exitArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArgument) {
			return visitor.visitArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prog_nameContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prog_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProg_name) {
			listener.enterProg_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProg_name) {
			listener.exitProg_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProg_name) {
			return visitor.visitProg_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_statementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(cobolParser.ALTER, 0); }
	public proc_name(): Proc_nameContext[];
	public proc_name(i: number): Proc_nameContext;
	public proc_name(i?: number): Proc_nameContext | Proc_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_nameContext);
		} else {
			return this.getRuleContext(i, Proc_nameContext);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.TO);
		} else {
			return this.getToken(cobolParser.TO, i);
		}
	}
	public PROCEED(): TerminalNode[];
	public PROCEED(i: number): TerminalNode;
	public PROCEED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.PROCEED);
		} else {
			return this.getToken(cobolParser.PROCEED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_statement) {
			listener.enterAlter_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_statement) {
			listener.exitAlter_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_statement) {
			return visitor.visitAlter_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_statementContext extends ParserRuleContext {
	public ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADD, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public add_grp(): Add_grpContext[];
	public add_grp(i: number): Add_grpContext;
	public add_grp(i?: number): Add_grpContext | Add_grpContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_grpContext);
		} else {
			return this.getRuleContext(i, Add_grpContext);
		}
	}
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ADD, 0); }
	public add_num(): Add_numContext[];
	public add_num(i: number): Add_numContext;
	public add_num(i?: number): Add_numContext | Add_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_numContext);
		} else {
			return this.getRuleContext(i, Add_numContext);
		}
	}
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_statement) {
			listener.enterAdd_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_statement) {
			listener.exitAdd_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_statement) {
			return visitor.visitAdd_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_grpContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_grp; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_grp) {
			listener.enterAdd_grp(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_grp) {
			listener.exitAdd_grp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_grp) {
			return visitor.visitAdd_grp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_num) {
			listener.enterAdd_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_num) {
			listener.exitAdd_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_num) {
			return visitor.visitAdd_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_statementContext extends ParserRuleContext {
	public accept_form1(): Accept_form1Context | undefined {
		return this.tryGetRuleContext(0, Accept_form1Context);
	}
	public accept_form2(): Accept_form2Context | undefined {
		return this.tryGetRuleContext(0, Accept_form2Context);
	}
	public accept_form3(): Accept_form3Context | undefined {
		return this.tryGetRuleContext(0, Accept_form3Context);
	}
	public accept_form4(): Accept_form4Context | undefined {
		return this.tryGetRuleContext(0, Accept_form4Context);
	}
	public accept_form5(): Accept_form5Context | undefined {
		return this.tryGetRuleContext(0, Accept_form5Context);
	}
	public accept_form6(): Accept_form6Context | undefined {
		return this.tryGetRuleContext(0, Accept_form6Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_statement) {
			listener.enterAccept_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_statement) {
			listener.exitAccept_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_statement) {
			return visitor.visitAccept_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exception_variantsContext extends ParserRuleContext {
	public on_exception(): On_exceptionContext[];
	public on_exception(i: number): On_exceptionContext;
	public on_exception(i?: number): On_exceptionContext | On_exceptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_exceptionContext);
		} else {
			return this.getRuleContext(i, On_exceptionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception_variants) {
			listener.enterOn_exception_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception_variants) {
			listener.exitOn_exception_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception_variants) {
			return visitor.visitOn_exception_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_end_variantsContext extends ParserRuleContext {
	public at_end(): At_endContext[];
	public at_end(i: number): At_endContext;
	public at_end(i?: number): At_endContext | At_endContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_endContext);
		} else {
			return this.getRuleContext(i, At_endContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end_variants) {
			listener.enterAt_end_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end_variants) {
			listener.exitAt_end_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end_variants) {
			return visitor.visitAt_end_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_size_variantsContext extends ParserRuleContext {
	public on_size(): On_sizeContext[];
	public on_size(i: number): On_sizeContext;
	public on_size(i?: number): On_sizeContext | On_sizeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_sizeContext);
		} else {
			return this.getRuleContext(i, On_sizeContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size_variants) {
			listener.enterOn_size_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size_variants) {
			listener.exitOn_size_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size_variants) {
			return visitor.visitOn_size_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_overflow_variantsContext extends ParserRuleContext {
	public on_overflow(): On_overflowContext[];
	public on_overflow(i: number): On_overflowContext;
	public on_overflow(i?: number): On_overflowContext | On_overflowContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_overflowContext);
		} else {
			return this.getRuleContext(i, On_overflowContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_overflow_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_overflow_variants) {
			listener.enterOn_overflow_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_overflow_variants) {
			listener.exitOn_overflow_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_overflow_variants) {
			return visitor.visitOn_overflow_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_eop_variantsContext extends ParserRuleContext {
	public at_eop(): At_eopContext[];
	public at_eop(i: number): At_eopContext;
	public at_eop(i?: number): At_eopContext | At_eopContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_eopContext);
		} else {
			return this.getRuleContext(i, At_eopContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_eop_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_eop_variants) {
			listener.enterAt_eop_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_eop_variants) {
			listener.exitAt_eop_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_eop_variants) {
			return visitor.visitAt_eop_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Invalid_key_variantsContext extends ParserRuleContext {
	public invalid_key(): Invalid_keyContext[];
	public invalid_key(i: number): Invalid_keyContext;
	public invalid_key(i?: number): Invalid_keyContext | Invalid_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Invalid_keyContext);
		} else {
			return this.getRuleContext(i, Invalid_keyContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_invalid_key_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInvalid_key_variants) {
			listener.enterInvalid_key_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInvalid_key_variants) {
			listener.exitInvalid_key_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInvalid_key_variants) {
			return visitor.visitInvalid_key_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form6Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public arg_env_accept(): Arg_env_acceptContext {
		return this.getRuleContext(0, Arg_env_acceptContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form6; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form6) {
			listener.enterAccept_form6(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form6) {
			listener.exitAccept_form6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form6) {
			return visitor.visitAccept_form6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_env_acceptContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env_accept; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env_accept) {
			listener.enterArg_env_accept(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env_accept) {
			listener.exitArg_env_accept(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env_accept) {
			return visitor.visitArg_env_accept(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form1Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public input_source(): Input_sourceContext | undefined {
		return this.tryGetRuleContext(0, Input_sourceContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form1) {
			listener.enterAccept_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form1) {
			listener.exitAccept_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form1) {
			return visitor.visitAccept_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form2Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public date_time(): Date_timeContext {
		return this.getRuleContext(0, Date_timeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form2) {
			listener.enterAccept_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form2) {
			listener.exitAccept_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form2) {
			return visitor.visitAccept_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public accept_form3_clause(): Accept_form3_clauseContext[];
	public accept_form3_clause(i: number): Accept_form3_clauseContext;
	public accept_form3_clause(i?: number): Accept_form3_clauseContext | Accept_form3_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form3_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form3_clauseContext);
		}
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3) {
			listener.enterAccept_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3) {
			listener.exitAccept_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3) {
			return visitor.visitAccept_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public KEY(): TerminalNode { return this.getToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext {
		return this.getRuleContext(0, Key_dest_itemContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public accept_form4_clause(): Accept_form4_clauseContext[];
	public accept_form4_clause(i: number): Accept_form4_clauseContext;
	public accept_form4_clause(i?: number): Accept_form4_clauseContext | Accept_form4_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form4_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form4_clauseContext);
		}
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4) {
			listener.enterAccept_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4) {
			listener.exitAccept_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4) {
			return visitor.visitAccept_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form5Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public data_name(): Data_nameContext {
		return this.getRuleContext(0, Data_nameContext);
	}
	public accept_at(): Accept_atContext | undefined {
		return this.tryGetRuleContext(0, Accept_atContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form5; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form5) {
			listener.enterAccept_form5(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form5) {
			listener.exitAccept_form5(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form5) {
			return visitor.visitAccept_form5(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_atContext extends ParserRuleContext {
	public accept_at_line(): Accept_at_lineContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_lineContext);
	}
	public accept_at_column(): Accept_at_columnContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at) {
			listener.enterAccept_at(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at) {
			listener.exitAccept_at(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at) {
			return visitor.visitAccept_at(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_line) {
			listener.enterAccept_at_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_line) {
			listener.exitAccept_at_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_line) {
			return visitor.visitAccept_at_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_column) {
			listener.enterAccept_at_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_column) {
			listener.exitAccept_at_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_column) {
			return visitor.visitAccept_at_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4_clauseContext extends ParserRuleContext {
	public from_line_number(): From_line_numberContext | undefined {
		return this.tryGetRuleContext(0, From_line_numberContext);
	}
	public from_column_number(): From_column_numberContext | undefined {
		return this.tryGetRuleContext(0, From_column_numberContext);
	}
	public erase_to(): Erase_toContext | undefined {
		return this.tryGetRuleContext(0, Erase_toContext);
	}
	public with_bell(): With_bellContext | undefined {
		return this.tryGetRuleContext(0, With_bellContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4_clause) {
			listener.enterAccept_form4_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4_clause) {
			listener.exitAccept_form4_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4_clause) {
			return visitor.visitAccept_form4_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_column_numberContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_from_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFrom_column_number) {
			listener.enterFrom_column_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFrom_column_number) {
			listener.exitFrom_column_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFrom_column_number) {
			return visitor.visitFrom_column_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_line_numberContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_from_line_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFrom_line_number) {
			listener.enterFrom_line_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFrom_line_number) {
			listener.exitFrom_line_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFrom_line_number) {
			return visitor.visitFrom_line_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3_clauseContext extends ParserRuleContext {
	public accept_form4_clause(): Accept_form4_clauseContext | undefined {
		return this.tryGetRuleContext(0, Accept_form4_clauseContext);
	}
	public underlined(): UnderlinedContext | undefined {
		return this.tryGetRuleContext(0, UnderlinedContext);
	}
	public bold(): BoldContext | undefined {
		return this.tryGetRuleContext(0, BoldContext);
	}
	public with_blinking(): With_blinkingContext | undefined {
		return this.tryGetRuleContext(0, With_blinkingContext);
	}
	public protected_clause(): Protected_clauseContext | undefined {
		return this.tryGetRuleContext(0, Protected_clauseContext);
	}
	public with_conversion(): With_conversionContext | undefined {
		return this.tryGetRuleContext(0, With_conversionContext);
	}
	public reversed(): ReversedContext | undefined {
		return this.tryGetRuleContext(0, ReversedContext);
	}
	public with_no_echo(): With_no_echoContext | undefined {
		return this.tryGetRuleContext(0, With_no_echoContext);
	}
	public default_is(): Default_isContext | undefined {
		return this.tryGetRuleContext(0, Default_isContext);
	}
	public control_key_in(): Control_key_inContext | undefined {
		return this.tryGetRuleContext(0, Control_key_inContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3_clause) {
			listener.enterAccept_form3_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3_clause) {
			listener.exitAccept_form3_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3_clause) {
			return visitor.visitAccept_form3_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Protected_clauseContext extends ParserRuleContext {
	public PROTECTED(): TerminalNode { return this.getToken(cobolParser.PROTECTED, 0); }
	public protected_value(): Protected_valueContext[];
	public protected_value(i: number): Protected_valueContext;
	public protected_value(i?: number): Protected_valueContext | Protected_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Protected_valueContext);
		} else {
			return this.getRuleContext(i, Protected_valueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_protected_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProtected_clause) {
			listener.enterProtected_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProtected_clause) {
			listener.exitProtected_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProtected_clause) {
			return visitor.visitProtected_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_key_inContext extends ParserRuleContext {
	public KEY(): TerminalNode { return this.getToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext {
		return this.getRuleContext(0, Key_dest_itemContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_key_in; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_key_in) {
			listener.enterControl_key_in(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_key_in) {
			listener.exitControl_key_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_key_in) {
			return visitor.visitControl_key_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Default_isContext extends ParserRuleContext {
	public DEFAULT(): TerminalNode { return this.getToken(cobolParser.DEFAULT, 0); }
	public def_value(): Def_valueContext {
		return this.getRuleContext(0, Def_valueContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_default_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDefault_is) {
			listener.enterDefault_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDefault_is) {
			listener.exitDefault_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDefault_is) {
			return visitor.visitDefault_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_no_echoContext extends ParserRuleContext {
	public NO(): TerminalNode { return this.getToken(cobolParser.NO, 0); }
	public ECHO(): TerminalNode { return this.getToken(cobolParser.ECHO, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_no_echo; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_no_echo) {
			listener.enterWith_no_echo(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_no_echo) {
			listener.exitWith_no_echo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_no_echo) {
			return visitor.visitWith_no_echo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_dest_itemContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_dest_item) {
			listener.enterKey_dest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_dest_item) {
			listener.exitKey_dest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_dest_item) {
			return visitor.visitKey_dest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_valueContext extends ParserRuleContext {
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURRENT, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_def_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDef_value) {
			listener.enterDef_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDef_value) {
			listener.exitDef_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDef_value) {
			return visitor.visitDef_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Protected_valueContext extends ParserRuleContext {
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public prot_size_value(): Prot_size_valueContext | undefined {
		return this.tryGetRuleContext(0, Prot_size_valueContext);
	}
	public AUTOTERMINATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOTERMINATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public EDITING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EDITING, 0); }
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public prot_fill_lit(): Prot_fill_litContext | undefined {
		return this.tryGetRuleContext(0, Prot_fill_litContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_protected_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProtected_value) {
			listener.enterProtected_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProtected_value) {
			listener.exitProtected_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProtected_value) {
			return visitor.visitProtected_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_fill_litContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_fill_lit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_fill_lit) {
			listener.enterProt_fill_lit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_fill_lit) {
			listener.exitProt_fill_lit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_fill_lit) {
			return visitor.visitProt_fill_lit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_size_valueContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_size_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_size_value) {
			listener.enterProt_size_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_size_value) {
			listener.exitProt_size_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_size_value) {
			return visitor.visitProt_size_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Number_valueContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_number_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNumber_value) {
			listener.enterNumber_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNumber_value) {
			listener.exitNumber_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNumber_value) {
			return visitor.visitNumber_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_timeContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DATE, 0); }
	public YYYYMMDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYMMDD, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY, 0); }
	public YYYYDDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYDDD, 0); }
	public DAY_OF_WEEK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY_OF_WEEK, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TIME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_time; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_time) {
			listener.enterDate_time(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_time) {
			listener.exitDate_time(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_time) {
			return visitor.visitDate_time(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dest_itemContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDest_item) {
			listener.enterDest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDest_item) {
			listener.exitDest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDest_item) {
			return visitor.visitDest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_sourceContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_source) {
			listener.enterInput_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_source) {
			listener.exitInput_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_source) {
			return visitor.visitInput_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_endContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(cobolParser.END, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end) {
			listener.enterAt_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end) {
			listener.exitAt_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end) {
			return visitor.visitAt_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exceptionContext extends ParserRuleContext {
	public EXCEPTION(): TerminalNode { return this.getToken(cobolParser.EXCEPTION, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception) {
			listener.enterOn_exception(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception) {
			listener.exitOn_exception(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception) {
			return visitor.visitOn_exception(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_sizeContext extends ParserRuleContext {
	public SIZE(): TerminalNode { return this.getToken(cobolParser.SIZE, 0); }
	public ERROR(): TerminalNode { return this.getToken(cobolParser.ERROR, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size) {
			listener.enterOn_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size) {
			listener.exitOn_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size) {
			return visitor.visitOn_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_overflowContext extends ParserRuleContext {
	public OVERFLOW(): TerminalNode { return this.getToken(cobolParser.OVERFLOW, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_overflow; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_overflow) {
			listener.enterOn_overflow(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_overflow) {
			listener.exitOn_overflow(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_overflow) {
			return visitor.visitOn_overflow(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_eopContext extends ParserRuleContext {
	public END_OF_PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_OF_PAGE, 0); }
	public EOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOP, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_eop; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_eop) {
			listener.enterAt_eop(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_eop) {
			listener.exitAt_eop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_eop) {
			return visitor.visitAt_eop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Invalid_keyContext extends ParserRuleContext {
	public INVALID(): TerminalNode { return this.getToken(cobolParser.INVALID, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public exec_sql_statement(): Exec_sql_statementContext[];
	public exec_sql_statement(i: number): Exec_sql_statementContext;
	public exec_sql_statement(i?: number): Exec_sql_statementContext | Exec_sql_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exec_sql_statementContext);
		} else {
			return this.getRuleContext(i, Exec_sql_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_invalid_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInvalid_key) {
			listener.enterInvalid_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInvalid_key) {
			listener.exitInvalid_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInvalid_key) {
			return visitor.visitInvalid_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public file_description(): File_descriptionContext[];
	public file_description(i: number): File_descriptionContext;
	public file_description(i?: number): File_descriptionContext | File_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_descriptionContext);
		} else {
			return this.getRuleContext(i, File_descriptionContext);
		}
	}
	public sort_merge_file_description(): Sort_merge_file_descriptionContext[];
	public sort_merge_file_description(i: number): Sort_merge_file_descriptionContext;
	public sort_merge_file_description(i?: number): Sort_merge_file_descriptionContext | Sort_merge_file_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_descriptionContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_section) {
			listener.enterFile_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_section) {
			listener.exitFile_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_section) {
			return visitor.visitFile_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_descriptionContext extends ParserRuleContext {
	public file_description_entry(): File_description_entryContext {
		return this.getRuleContext(0, File_description_entryContext);
	}
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description) {
			listener.enterFile_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description) {
			listener.exitFile_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description) {
			return visitor.visitFile_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_descriptionContext extends ParserRuleContext {
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext {
		return this.getRuleContext(0, Sort_merge_file_description_entryContext);
	}
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description) {
			listener.enterSort_merge_file_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description) {
			listener.exitSort_merge_file_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description) {
			return visitor.visitSort_merge_file_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_sectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(cobolParser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public working_storage_entry(): Working_storage_entryContext[];
	public working_storage_entry(i: number): Working_storage_entryContext;
	public working_storage_entry(i?: number): Working_storage_entryContext | Working_storage_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Working_storage_entryContext);
		} else {
			return this.getRuleContext(i, Working_storage_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_section) {
			listener.enterWorking_storage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_section) {
			listener.exitWorking_storage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_section) {
			return visitor.visitWorking_storage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_entryContext extends ParserRuleContext {
	public data_description_entry(): Data_description_entryContext | undefined {
		return this.tryGetRuleContext(0, Data_description_entryContext);
	}
	public exec_sql_statement(): Exec_sql_statementContext | undefined {
		return this.tryGetRuleContext(0, Exec_sql_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_entry) {
			listener.enterWorking_storage_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_entry) {
			listener.exitWorking_storage_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_entry) {
			return visitor.visitWorking_storage_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Linkage_sectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(cobolParser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linkage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinkage_section) {
			listener.enterLinkage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinkage_section) {
			listener.exitLinkage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinkage_section) {
			return visitor.visitLinkage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_sectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(cobolParser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public report_description(): Report_descriptionContext[];
	public report_description(i: number): Report_descriptionContext;
	public report_description(i?: number): Report_descriptionContext | Report_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_descriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_section) {
			listener.enterReport_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_section) {
			listener.exitReport_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_section) {
			return visitor.visitReport_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_descriptionContext extends ParserRuleContext {
	public report_description_entry(): Report_description_entryContext {
		return this.getRuleContext(0, Report_description_entryContext);
	}
	public report_group_data_description_entry(): Report_group_data_description_entryContext[];
	public report_group_data_description_entry(i: number): Report_group_data_description_entryContext;
	public report_group_data_description_entry(i?: number): Report_group_data_description_entryContext | Report_group_data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_group_data_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description) {
			listener.enterReport_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description) {
			listener.exitReport_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description) {
			return visitor.visitReport_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_sectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(cobolParser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public screen_description_entry(): Screen_description_entryContext[];
	public screen_description_entry(i: number): Screen_description_entryContext;
	public screen_description_entry(i?: number): Screen_description_entryContext | Screen_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_entryContext);
		} else {
			return this.getRuleContext(i, Screen_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_section) {
			listener.enterScreen_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_section) {
			listener.exitScreen_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_section) {
			return visitor.visitScreen_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_description_entryContext extends ParserRuleContext {
	public FD(): TerminalNode { return this.getToken(cobolParser.FD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public fd_clause(): Fd_clauseContext[];
	public fd_clause(i: number): Fd_clauseContext;
	public fd_clause(i?: number): Fd_clauseContext | Fd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fd_clauseContext);
		} else {
			return this.getRuleContext(i, Fd_clauseContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description_entry) {
			listener.enterFile_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description_entry) {
			listener.exitFile_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description_entry) {
			return visitor.visitFile_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_description_entryContext extends ParserRuleContext {
	public SD(): TerminalNode { return this.getToken(cobolParser.SD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public sd_clause(): Sd_clauseContext[];
	public sd_clause(i: number): Sd_clauseContext;
	public sd_clause(i?: number): Sd_clauseContext | Sd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sd_clauseContext);
		} else {
			return this.getRuleContext(i, Sd_clauseContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description_entry) {
			listener.enterSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description_entry) {
			listener.exitSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description_entry) {
			return visitor.visitSort_merge_file_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_description_entryContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(cobolParser.RD, 0); }
	public report_name(): Report_nameContext {
		return this.getRuleContext(0, Report_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public rd_clause(): Rd_clauseContext[];
	public rd_clause(i: number): Rd_clauseContext;
	public rd_clause(i?: number): Rd_clauseContext | Rd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rd_clauseContext);
		} else {
			return this.getRuleContext(i, Rd_clauseContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description_entry) {
			listener.enterReport_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description_entry) {
			listener.exitReport_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description_entry) {
			return visitor.visitReport_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fd_clauseContext extends ParserRuleContext {
	public is_external(): Is_externalContext | undefined {
		return this.tryGetRuleContext(0, Is_externalContext);
	}
	public is_global(): Is_globalContext | undefined {
		return this.tryGetRuleContext(0, Is_globalContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public value_of_id(): Value_of_idContext | undefined {
		return this.tryGetRuleContext(0, Value_of_idContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	public linage(): LinageContext | undefined {
		return this.tryGetRuleContext(0, LinageContext);
	}
	public report_is(): Report_isContext | undefined {
		return this.tryGetRuleContext(0, Report_isContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public alt_record_key(): Alt_record_keyContext | undefined {
		return this.tryGetRuleContext(0, Alt_record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFd_clause) {
			listener.enterFd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFd_clause) {
			listener.exitFd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFd_clause) {
			return visitor.visitFd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_externalContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode { return this.getToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_external; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_external) {
			listener.enterIs_external(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_external) {
			listener.exitIs_external(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_external) {
			return visitor.visitIs_external(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_globalContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode { return this.getToken(cobolParser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_global; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_global) {
			listener.enterIs_global(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_global) {
			listener.exitIs_global(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_global) {
			return visitor.visitIs_global(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public REDEFINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REDEFINES, 0); }
	public other_data_item(): Other_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Other_data_itemContext);
	}
	public data_description_clause(): Data_description_clauseContext[];
	public data_description_clause(i: number): Data_description_clauseContext;
	public data_description_clause(i?: number): Data_description_clauseContext | Data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Data_description_clauseContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_entry) {
			listener.enterData_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_entry) {
			listener.exitData_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_entry) {
			return visitor.visitData_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Level_numberContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_level_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLevel_number) {
			listener.enterLevel_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLevel_number) {
			listener.exitLevel_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLevel_number) {
			return visitor.visitLevel_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_clauseContext extends ParserRuleContext {
	public is_external(): Is_externalContext | undefined {
		return this.tryGetRuleContext(0, Is_externalContext);
	}
	public is_global(): Is_globalContext | undefined {
		return this.tryGetRuleContext(0, Is_globalContext);
	}
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public usage(): UsageContext | undefined {
		return this.tryGetRuleContext(0, UsageContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public occurs(): OccursContext | undefined {
		return this.tryGetRuleContext(0, OccursContext);
	}
	public synchronized_lr(): Synchronized_lrContext | undefined {
		return this.tryGetRuleContext(0, Synchronized_lrContext);
	}
	public justified(): JustifiedContext | undefined {
		return this.tryGetRuleContext(0, JustifiedContext);
	}
	public black_when_zero(): Black_when_zeroContext | undefined {
		return this.tryGetRuleContext(0, Black_when_zeroContext);
	}
	public value_is(): Value_isContext | undefined {
		return this.tryGetRuleContext(0, Value_isContext);
	}
	public renames(): RenamesContext | undefined {
		return this.tryGetRuleContext(0, RenamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_clause) {
			listener.enterData_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_clause) {
			listener.exitData_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_clause) {
			return visitor.visitData_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Synchronized_lrContext extends ParserRuleContext {
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_synchronized_lr; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSynchronized_lr) {
			listener.enterSynchronized_lr(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSynchronized_lr) {
			listener.exitSynchronized_lr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSynchronized_lr) {
			return visitor.visitSynchronized_lr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JustifiedContext extends ParserRuleContext {
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_justified; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterJustified) {
			listener.enterJustified(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitJustified) {
			listener.exitJustified(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitJustified) {
			return visitor.visitJustified(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Black_when_zeroContext extends ParserRuleContext {
	public BLANK(): TerminalNode { return this.getToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode { return this.getToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_black_when_zero; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlack_when_zero) {
			listener.enterBlack_when_zero(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlack_when_zero) {
			listener.exitBlack_when_zero(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlack_when_zero) {
			return visitor.visitBlack_when_zero(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenamesContext extends ParserRuleContext {
	public RENAMES(): TerminalNode { return this.getToken(cobolParser.RENAMES, 0); }
	public rename_start(): Rename_startContext {
		return this.getRuleContext(0, Rename_startContext);
	}
	public rename_end(): Rename_endContext | undefined {
		return this.tryGetRuleContext(0, Rename_endContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_renames; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRenames) {
			listener.enterRenames(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRenames) {
			listener.exitRenames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRenames) {
			return visitor.visitRenames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_startContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_start; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_start) {
			listener.enterRename_start(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_start) {
			listener.exitRename_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_start) {
			return visitor.visitRename_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_endContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_end) {
			listener.enterRename_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_end) {
			listener.exitRename_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_end) {
			return visitor.visitRename_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_isContext extends ParserRuleContext {
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUES, 0); }
	public value_is_definition(): Value_is_definitionContext[];
	public value_is_definition(i: number): Value_is_definitionContext;
	public value_is_definition(i?: number): Value_is_definitionContext | Value_is_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Value_is_definitionContext);
		} else {
			return this.getRuleContext(i, Value_is_definitionContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is) {
			listener.enterValue_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is) {
			listener.exitValue_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is) {
			return visitor.visitValue_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definitionContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public value_is_definition_thru(): Value_is_definition_thruContext | undefined {
		return this.tryGetRuleContext(0, Value_is_definition_thruContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition) {
			listener.enterValue_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition) {
			listener.exitValue_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition) {
			return visitor.visitValue_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_partContext extends ParserRuleContext {
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public ref_data_name(): Ref_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Ref_data_nameContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public external_name(): External_nameContext | undefined {
		return this.tryGetRuleContext(0, External_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_part) {
			listener.enterValue_is_definition_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_part) {
			listener.exitValue_is_definition_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_part) {
			return visitor.visitValue_is_definition_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_thruContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_thru; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_thru) {
			listener.enterValue_is_definition_thru(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_thru) {
			listener.exitValue_is_definition_thru(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_thru) {
			return visitor.visitValue_is_definition_thru(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_external_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExternal_name) {
			listener.enterExternal_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExternal_name) {
			listener.exitExternal_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExternal_name) {
			return visitor.visitExternal_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ref_data_nameContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ref_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRef_data_name) {
			listener.enterRef_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRef_data_name) {
			listener.exitRef_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRef_data_name) {
			return visitor.visitRef_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_literalContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_literal) {
			listener.enterValue_is_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_literal) {
			listener.exitValue_is_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_literal) {
			return visitor.visitValue_is_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OccursContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(cobolParser.OCCURS, 0); }
	public times_definition(): Times_definitionContext {
		return this.getRuleContext(0, Times_definitionContext);
	}
	public key_is(): Key_isContext[];
	public key_is(i: number): Key_isContext;
	public key_is(i?: number): Key_isContext | Key_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_isContext);
		} else {
			return this.getRuleContext(i, Key_isContext);
		}
	}
	public indexed_by(): Indexed_byContext | undefined {
		return this.tryGetRuleContext(0, Indexed_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_occurs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOccurs) {
			listener.enterOccurs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOccurs) {
			listener.exitOccurs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOccurs) {
			return visitor.visitOccurs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indexed_byContext extends ParserRuleContext {
	public INDEXED(): TerminalNode { return this.getToken(cobolParser.INDEXED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public ind_name(): Ind_nameContext[];
	public ind_name(i: number): Ind_nameContext;
	public ind_name(i?: number): Ind_nameContext | Ind_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ind_nameContext);
		} else {
			return this.getRuleContext(i, Ind_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_indexed_by; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIndexed_by) {
			listener.enterIndexed_by(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIndexed_by) {
			listener.exitIndexed_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIndexed_by) {
			return visitor.visitIndexed_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ind_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ind_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInd_name) {
			listener.enterInd_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInd_name) {
			listener.exitInd_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInd_name) {
			return visitor.visitInd_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_isContext extends ParserRuleContext {
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public key_name(): Key_nameContext[];
	public key_name(i: number): Key_nameContext;
	public key_name(i?: number): Key_nameContext | Key_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_nameContext);
		} else {
			return this.getRuleContext(i, Key_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_is) {
			listener.enterKey_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_is) {
			listener.exitKey_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_is) {
			return visitor.visitKey_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_name) {
			listener.enterKey_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_name) {
			listener.exitKey_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_name) {
			return visitor.visitKey_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Times_definitionContext extends ParserRuleContext {
	public table_size(): Table_sizeContext | undefined {
		return this.tryGetRuleContext(0, Table_sizeContext);
	}
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TIMES, 0); }
	public min_times(): Min_timesContext | undefined {
		return this.tryGetRuleContext(0, Min_timesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public max_times(): Max_timesContext | undefined {
		return this.tryGetRuleContext(0, Max_timesContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_times_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTimes_definition) {
			listener.enterTimes_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTimes_definition) {
			listener.exitTimes_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTimes_definition) {
			return visitor.visitTimes_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sizeContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_table_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTable_size) {
			listener.enterTable_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTable_size) {
			listener.exitTable_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTable_size) {
			return visitor.visitTable_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Min_timesContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_min_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMin_times) {
			listener.enterMin_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMin_times) {
			listener.exitMin_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMin_times) {
			return visitor.visitMin_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Max_timesContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_max_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMax_times) {
			listener.enterMax_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMax_times) {
			listener.exitMax_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMax_times) {
			return visitor.visitMax_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public report_group_data_description_clause(): Report_group_data_description_clauseContext[];
	public report_group_data_description_clause(i: number): Report_group_data_description_clauseContext;
	public report_group_data_description_clause(i?: number): Report_group_data_description_clauseContext | Report_group_data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Report_group_data_description_clauseContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description_entry) {
			listener.enterReport_group_data_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description_entry) {
			listener.exitReport_group_data_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description_entry) {
			return visitor.visitReport_group_data_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_description_clauseContext extends ParserRuleContext {
	public rep_line_num(): Rep_line_numContext | undefined {
		return this.tryGetRuleContext(0, Rep_line_numContext);
	}
	public rep_next_group(): Rep_next_groupContext | undefined {
		return this.tryGetRuleContext(0, Rep_next_groupContext);
	}
	public rep_type(): Rep_typeContext | undefined {
		return this.tryGetRuleContext(0, Rep_typeContext);
	}
	public usage_display(): Usage_displayContext | undefined {
		return this.tryGetRuleContext(0, Usage_displayContext);
	}
	public black_when_zero(): Black_when_zeroContext | undefined {
		return this.tryGetRuleContext(0, Black_when_zeroContext);
	}
	public rep_column(): Rep_columnContext | undefined {
		return this.tryGetRuleContext(0, Rep_columnContext);
	}
	public rep_group_ind(): Rep_group_indContext | undefined {
		return this.tryGetRuleContext(0, Rep_group_indContext);
	}
	public justified(): JustifiedContext | undefined {
		return this.tryGetRuleContext(0, JustifiedContext);
	}
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public rep_source_sum_or_value(): Rep_source_sum_or_valueContext | undefined {
		return this.tryGetRuleContext(0, Rep_source_sum_or_valueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description_clause) {
			listener.enterReport_group_data_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description_clause) {
			listener.exitReport_group_data_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description_clause) {
			return visitor.visitReport_group_data_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_source_sum_or_valueContext extends ParserRuleContext {
	public rep_source(): Rep_sourceContext | undefined {
		return this.tryGetRuleContext(0, Rep_sourceContext);
	}
	public rep_sum(): Rep_sumContext | undefined {
		return this.tryGetRuleContext(0, Rep_sumContext);
	}
	public rep_value_is(): Rep_value_isContext | undefined {
		return this.tryGetRuleContext(0, Rep_value_isContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_source_sum_or_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_source_sum_or_value) {
			listener.enterRep_source_sum_or_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_source_sum_or_value) {
			listener.exitRep_source_sum_or_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_source_sum_or_value) {
			return visitor.visitRep_source_sum_or_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_value_isContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public value_is_literal(): Value_is_literalContext {
		return this.getRuleContext(0, Value_is_literalContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_value_is) {
			listener.enterRep_value_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_value_is) {
			listener.exitRep_value_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_value_is) {
			return visitor.visitRep_value_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_sourceContext extends ParserRuleContext {
	public SOURCE(): TerminalNode { return this.getToken(cobolParser.SOURCE, 0); }
	public source_name(): Source_nameContext {
		return this.getRuleContext(0, Source_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_source) {
			listener.enterRep_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_source) {
			listener.exitRep_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_source) {
			return visitor.visitRep_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_group_indContext extends ParserRuleContext {
	public GROUP(): TerminalNode { return this.getToken(cobolParser.GROUP, 0); }
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDICATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_group_ind; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_group_ind) {
			listener.enterRep_group_ind(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_group_ind) {
			listener.exitRep_group_ind(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_group_ind) {
			return visitor.visitRep_group_ind(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public column_number(): Column_numberContext {
		return this.getRuleContext(0, Column_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_column) {
			listener.enterRep_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_column) {
			listener.exitRep_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_column) {
			return visitor.visitRep_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_displayContext extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_display; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_display) {
			listener.enterUsage_display(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_display) {
			listener.exitUsage_display(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_display) {
			return visitor.visitUsage_display(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_typeContext extends ParserRuleContext {
	public TYPE(): TerminalNode { return this.getToken(cobolParser.TYPE, 0); }
	public type_is_definition(): Type_is_definitionContext {
		return this.getRuleContext(0, Type_is_definitionContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type) {
			listener.enterRep_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type) {
			listener.exitRep_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type) {
			return visitor.visitRep_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_next_groupContext extends ParserRuleContext {
	public NEXT(): TerminalNode { return this.getToken(cobolParser.NEXT, 0); }
	public GROUP(): TerminalNode { return this.getToken(cobolParser.GROUP, 0); }
	public next_group_definition(): Next_group_definitionContext {
		return this.getRuleContext(0, Next_group_definitionContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_next_group; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_next_group) {
			listener.enterRep_next_group(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_next_group) {
			listener.exitRep_next_group(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_next_group) {
			return visitor.visitRep_next_group(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_line_numContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public line_num_definition(): Line_num_definitionContext {
		return this.getRuleContext(0, Line_num_definitionContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_line_num) {
			listener.enterRep_line_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_line_num) {
			listener.exitRep_line_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_line_num) {
			return visitor.visitRep_line_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_isContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_is) {
			listener.enterSign_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_is) {
			listener.exitSign_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_is) {
			return visitor.visitSign_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_sumContext extends ParserRuleContext {
	public SUM(): TerminalNode[];
	public SUM(i: number): TerminalNode;
	public SUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SUM);
		} else {
			return this.getToken(cobolParser.SUM, i);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RESET, 0); }
	public control_foot_name(): Control_foot_nameContext | undefined {
		return this.tryGetRuleContext(0, Control_foot_nameContext);
	}
	public sum_name(): Sum_nameContext[];
	public sum_name(i: number): Sum_nameContext;
	public sum_name(i?: number): Sum_nameContext | Sum_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sum_nameContext);
		} else {
			return this.getRuleContext(i, Sum_nameContext);
		}
	}
	public UPON(): TerminalNode[];
	public UPON(i: number): TerminalNode;
	public UPON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UPON);
		} else {
			return this.getToken(cobolParser.UPON, i);
		}
	}
	public detail_report_group_name(): Detail_report_group_nameContext[];
	public detail_report_group_name(i: number): Detail_report_group_nameContext;
	public detail_report_group_name(i?: number): Detail_report_group_nameContext | Detail_report_group_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Detail_report_group_nameContext);
		} else {
			return this.getRuleContext(i, Detail_report_group_nameContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_sum; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_sum) {
			listener.enterRep_sum(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_sum) {
			listener.exitRep_sum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_sum) {
			return visitor.visitRep_sum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_foot_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_foot_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_foot_name) {
			listener.enterControl_foot_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_foot_name) {
			listener.exitControl_foot_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_foot_name) {
			return visitor.visitControl_foot_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Detail_report_group_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_detail_report_group_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDetail_report_group_name) {
			listener.enterDetail_report_group_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDetail_report_group_name) {
			listener.exitDetail_report_group_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDetail_report_group_name) {
			return visitor.visitDetail_report_group_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sum_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum_name) {
			listener.enterSum_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum_name) {
			listener.exitSum_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum_name) {
			return visitor.visitSum_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_name) {
			listener.enterSource_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_name) {
			listener.exitSource_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_name) {
			return visitor.visitSource_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_numberContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColumn_number) {
			listener.enterColumn_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColumn_number) {
			listener.exitColumn_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColumn_number) {
			return visitor.visitColumn_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_is_definitionContext extends ParserRuleContext {
	public rep_type_rh(): Rep_type_rhContext | undefined {
		return this.tryGetRuleContext(0, Rep_type_rhContext);
	}
	public rep_type_ph(): Rep_type_phContext | undefined {
		return this.tryGetRuleContext(0, Rep_type_phContext);
	}
	public rep_type_ch(): Rep_type_chContext | undefined {
		return this.tryGetRuleContext(0, Rep_type_chContext);
	}
	public rep_type_de(): Rep_type_deContext | undefined {
		return this.tryGetRuleContext(0, Rep_type_deContext);
	}
	public rep_type_cf(): Rep_type_cfContext | undefined {
		return this.tryGetRuleContext(0, Rep_type_cfContext);
	}
	public rep_type_pf(): Rep_type_pfContext | undefined {
		return this.tryGetRuleContext(0, Rep_type_pfContext);
	}
	public rep_type_rf(): Rep_type_rfContext | undefined {
		return this.tryGetRuleContext(0, Rep_type_rfContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_is_definition) {
			listener.enterType_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_is_definition) {
			listener.exitType_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_is_definition) {
			return visitor.visitType_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_type_pfContext extends ParserRuleContext {
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type_pf; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type_pf) {
			listener.enterRep_type_pf(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type_pf) {
			listener.exitRep_type_pf(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type_pf) {
			return visitor.visitRep_type_pf(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_type_rfContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type_rf; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type_rf) {
			listener.enterRep_type_rf(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type_rf) {
			listener.exitRep_type_rf(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type_rf) {
			return visitor.visitRep_type_rf(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_type_deContext extends ParserRuleContext {
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type_de; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type_de) {
			listener.enterRep_type_de(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type_de) {
			listener.exitRep_type_de(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type_de) {
			return visitor.visitRep_type_de(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_type_chContext extends ParserRuleContext {
	public type_control_name(): Type_control_nameContext {
		return this.getRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type_ch; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type_ch) {
			listener.enterRep_type_ch(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type_ch) {
			listener.exitRep_type_ch(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type_ch) {
			return visitor.visitRep_type_ch(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_type_cfContext extends ParserRuleContext {
	public type_control_name(): Type_control_nameContext {
		return this.getRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type_cf; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type_cf) {
			listener.enterRep_type_cf(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type_cf) {
			listener.exitRep_type_cf(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type_cf) {
			return visitor.visitRep_type_cf(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_type_rhContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public RH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type_rh; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type_rh) {
			listener.enterRep_type_rh(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type_rh) {
			listener.exitRep_type_rh(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type_rh) {
			return visitor.visitRep_type_rh(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rep_type_phContext extends ParserRuleContext {
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rep_type_ph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRep_type_ph) {
			listener.enterRep_type_ph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRep_type_ph) {
			listener.exitRep_type_ph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRep_type_ph) {
			return visitor.visitRep_type_ph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_control_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_control_name) {
			listener.enterType_control_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_control_name) {
			listener.exitType_control_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_control_name) {
			return visitor.visitType_control_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Next_group_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_next_group_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNext_group_definition) {
			listener.enterNext_group_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNext_group_definition) {
			listener.exitNext_group_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNext_group_definition) {
			return visitor.visitNext_group_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_num_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext {
		return this.getRuleContext(0, Line_numContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num_definition) {
			listener.enterLine_num_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num_definition) {
			listener.exitLine_num_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num_definition) {
			return visitor.visitLine_num_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_numContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num) {
			listener.enterLine_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num) {
			listener.exitLine_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num) {
			return visitor.visitLine_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rd_clauseContext extends ParserRuleContext {
	public is_global(): Is_globalContext | undefined {
		return this.tryGetRuleContext(0, Is_globalContext);
	}
	public report_code(): Report_codeContext | undefined {
		return this.tryGetRuleContext(0, Report_codeContext);
	}
	public report_control(): Report_controlContext | undefined {
		return this.tryGetRuleContext(0, Report_controlContext);
	}
	public report_page(): Report_pageContext | undefined {
		return this.tryGetRuleContext(0, Report_pageContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRd_clause) {
			listener.enterRd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRd_clause) {
			listener.exitRd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRd_clause) {
			return visitor.visitRd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_pageContext extends ParserRuleContext {
	public PAGE(): TerminalNode { return this.getToken(cobolParser.PAGE, 0); }
	public page_size_rd(): Page_size_rdContext {
		return this.getRuleContext(0, Page_size_rdContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMITS, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public heading_line(): Heading_lineContext | undefined {
		return this.tryGetRuleContext(0, Heading_lineContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public DETAIL(): TerminalNode[];
	public DETAIL(i: number): TerminalNode;
	public DETAIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DETAIL);
		} else {
			return this.getToken(cobolParser.DETAIL, i);
		}
	}
	public first_detail_line(): First_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, First_detail_lineContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LAST, 0); }
	public last_detail_line(): Last_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, Last_detail_lineContext);
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line_rd(): Footing_line_rdContext | undefined {
		return this.tryGetRuleContext(0, Footing_line_rdContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_page; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_page) {
			listener.enterReport_page(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_page) {
			listener.exitReport_page(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_page) {
			return visitor.visitReport_page(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_controlContext extends ParserRuleContext {
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CONTROLS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROLS, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public control_name(): Control_nameContext[];
	public control_name(i: number): Control_nameContext;
	public control_name(i?: number): Control_nameContext | Control_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Control_nameContext);
		} else {
			return this.getRuleContext(i, Control_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_control) {
			listener.enterReport_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_control) {
			listener.exitReport_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_control) {
			return visitor.visitReport_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_codeContext extends ParserRuleContext {
	public CODE(): TerminalNode { return this.getToken(cobolParser.CODE, 0); }
	public STRING_LITERAL_(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_code; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_code) {
			listener.enterReport_code(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_code) {
			listener.exitReport_code(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_code) {
			return visitor.visitReport_code(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_line_rdContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line_rd) {
			listener.enterFooting_line_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line_rd) {
			listener.exitFooting_line_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line_rd) {
			return visitor.visitFooting_line_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_detail_lineContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_detail_line) {
			listener.enterLast_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_detail_line) {
			listener.exitLast_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_detail_line) {
			return visitor.visitLast_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_detail_lineContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_detail_line) {
			listener.enterFirst_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_detail_line) {
			listener.exitFirst_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_detail_line) {
			return visitor.visitFirst_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Heading_lineContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_heading_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterHeading_line) {
			listener.enterHeading_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitHeading_line) {
			listener.exitHeading_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitHeading_line) {
			return visitor.visitHeading_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_size_rdContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size_rd) {
			listener.enterPage_size_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size_rd) {
			listener.exitPage_size_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size_rd) {
			return visitor.visitPage_size_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_name) {
			listener.enterControl_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_name) {
			listener.exitControl_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_name) {
			return visitor.visitControl_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsageContext extends ParserRuleContext {
	public usage_definition(): Usage_definitionContext {
		return this.getRuleContext(0, Usage_definitionContext);
	}
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage) {
			listener.enterUsage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage) {
			listener.exitUsage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage) {
			return visitor.visitUsage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_definitionContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY, 0); }
	public BINARY_CHAR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_CHAR, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNSIGNED, 0); }
	public BINARY_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_SHORT, 0); }
	public BINARY_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_LONG, 0); }
	public BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_DOUBLE, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_5, 0); }
	public COMPUTATIONAL_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_X, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_5, 0); }
	public COMP_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_X, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public FLOAT_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_SHORT, 0); }
	public FLOAT_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_LONG, 0); }
	public FLOAT_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_EXTENDED, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEX, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public POINTER_64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER_64, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_definition) {
			listener.enterUsage_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_definition) {
			listener.exitUsage_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_definition) {
			return visitor.visitUsage_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureContext extends ParserRuleContext {
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IS_IN_PICTURE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS_IN_PICTURE_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPicture) {
			listener.enterPicture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPicture) {
			listener.exitPicture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPicture) {
			return visitor.visitPicture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public CHARACTER_STRING_(): TerminalNode { return this.getToken(cobolParser.CHARACTER_STRING_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_character_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCharacter_string) {
			return visitor.visitCharacter_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Other_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_other_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOther_data_item) {
			listener.enterOther_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOther_data_item) {
			listener.exitOther_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOther_data_item) {
			return visitor.visitOther_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_name) {
			listener.enterData_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_name) {
			listener.exitData_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_name) {
			return visitor.visitData_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sd_clauseContext extends ParserRuleContext {
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSd_clause) {
			listener.enterSd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSd_clause) {
			listener.exitSd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSd_clause) {
			return visitor.visitSd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_isContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTS, 0); }
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_is) {
			listener.enterReport_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_is) {
			listener.exitReport_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_is) {
			return visitor.visitReport_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_name) {
			listener.enterReport_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_name) {
			listener.exitReport_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_name) {
			return visitor.visitReport_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(cobolParser.LINAGE, 0); }
	public page_size(): Page_sizeContext {
		return this.getRuleContext(0, Page_sizeContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.LINES);
		} else {
			return this.getToken(cobolParser.LINES, i);
		}
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line(): Footing_lineContext | undefined {
		return this.tryGetRuleContext(0, Footing_lineContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TOP, 0); }
	public top_lines(): Top_linesContext | undefined {
		return this.tryGetRuleContext(0, Top_linesContext);
	}
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOTTOM, 0); }
	public bottom_lines(): Bottom_linesContext | undefined {
		return this.tryGetRuleContext(0, Bottom_linesContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AT);
		} else {
			return this.getToken(cobolParser.AT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinage) {
			listener.enterLinage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinage) {
			listener.exitLinage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinage) {
			return visitor.visitLinage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bottom_linesContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bottom_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBottom_lines) {
			listener.enterBottom_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBottom_lines) {
			listener.exitBottom_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBottom_lines) {
			return visitor.visitBottom_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_linesContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_lines) {
			listener.enterTop_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_lines) {
			listener.exitTop_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_lines) {
			return visitor.visitTop_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_lineContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line) {
			listener.enterFooting_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line) {
			listener.exitFooting_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line) {
			return visitor.visitFooting_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_sizeContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size) {
			listener.enterPage_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size) {
			listener.exitPage_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size) {
			return visitor.visitPage_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_recContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public rec_name(): Rec_nameContext[];
	public rec_name(i: number): Rec_nameContext;
	public rec_name(i?: number): Rec_nameContext | Rec_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_nameContext);
		} else {
			return this.getRuleContext(i, Rec_nameContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_rec) {
			listener.enterData_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_rec) {
			listener.exitData_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_rec) {
			return visitor.visitData_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_name) {
			listener.enterRec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_name) {
			listener.exitRec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_name) {
			return visitor.visitRec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_idContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(cobolParser.OF, 0); }
	public value_of_id_definition(): Value_of_id_definitionContext {
		return this.getRuleContext(0, Value_of_id_definitionContext);
	}
	public ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ID, 0); }
	public FILE_ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE_ID, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id) {
			listener.enterValue_of_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id) {
			listener.exitValue_of_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id) {
			return visitor.visitValue_of_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_id_definitionContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id_definition) {
			listener.enterValue_of_id_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id_definition) {
			listener.exitValue_of_id_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id_definition) {
			return visitor.visitValue_of_id_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(cobolParser.LABEL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_label; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_definition(): Record_definitionContext {
		return this.getRuleContext(0, Record_definitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord) {
			listener.enterRecord(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord) {
			listener.exitRecord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord) {
			return visitor.visitRecord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_definitionContext extends ParserRuleContext {
	public longest_rec(): Longest_recContext | undefined {
		return this.tryGetRuleContext(0, Longest_recContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public shortest_rec(): Shortest_recContext | undefined {
		return this.tryGetRuleContext(0, Shortest_recContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_definition) {
			listener.enterRecord_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_definition) {
			listener.exitRecord_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_definition) {
			return visitor.visitRecord_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Depending_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_depending_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDepending_item) {
			listener.enterDepending_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDepending_item) {
			listener.exitDepending_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDepending_item) {
			return visitor.visitDepending_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Shortest_recContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_shortest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterShortest_rec) {
			listener.enterShortest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitShortest_rec) {
			listener.exitShortest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitShortest_rec) {
			return visitor.visitShortest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Longest_recContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_longest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLongest_rec) {
			listener.enterLongest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLongest_rec) {
			listener.exitLongest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLongest_rec) {
			return visitor.visitLongest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public screen_description_clause(): Screen_description_clauseContext[];
	public screen_description_clause(i: number): Screen_description_clauseContext;
	public screen_description_clause(i?: number): Screen_description_clauseContext | Screen_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_clauseContext);
		} else {
			return this.getRuleContext(i, Screen_description_clauseContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_entry) {
			listener.enterScreen_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_entry) {
			listener.exitScreen_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_entry) {
			return visitor.visitScreen_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_clauseContext extends ParserRuleContext {
	public scr_blank(): Scr_blankContext | undefined {
		return this.tryGetRuleContext(0, Scr_blankContext);
	}
	public scr_foreground(): Scr_foregroundContext | undefined {
		return this.tryGetRuleContext(0, Scr_foregroundContext);
	}
	public scr_background(): Scr_backgroundContext | undefined {
		return this.tryGetRuleContext(0, Scr_backgroundContext);
	}
	public scr_auto(): Scr_autoContext | undefined {
		return this.tryGetRuleContext(0, Scr_autoContext);
	}
	public scr_secure(): Scr_secureContext | undefined {
		return this.tryGetRuleContext(0, Scr_secureContext);
	}
	public scr_required(): Scr_requiredContext | undefined {
		return this.tryGetRuleContext(0, Scr_requiredContext);
	}
	public usage_display(): Usage_displayContext | undefined {
		return this.tryGetRuleContext(0, Usage_displayContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public scr_full(): Scr_fullContext | undefined {
		return this.tryGetRuleContext(0, Scr_fullContext);
	}
	public scr_bell(): Scr_bellContext | undefined {
		return this.tryGetRuleContext(0, Scr_bellContext);
	}
	public scr_blink(): Scr_blinkContext | undefined {
		return this.tryGetRuleContext(0, Scr_blinkContext);
	}
	public scr_erase(): Scr_eraseContext | undefined {
		return this.tryGetRuleContext(0, Scr_eraseContext);
	}
	public scr_light(): Scr_lightContext | undefined {
		return this.tryGetRuleContext(0, Scr_lightContext);
	}
	public scr_reverse(): Scr_reverseContext | undefined {
		return this.tryGetRuleContext(0, Scr_reverseContext);
	}
	public scr_underline(): Scr_underlineContext | undefined {
		return this.tryGetRuleContext(0, Scr_underlineContext);
	}
	public scr_line(): Scr_lineContext | undefined {
		return this.tryGetRuleContext(0, Scr_lineContext);
	}
	public scr_column(): Scr_columnContext | undefined {
		return this.tryGetRuleContext(0, Scr_columnContext);
	}
	public scr_value(): Scr_valueContext | undefined {
		return this.tryGetRuleContext(0, Scr_valueContext);
	}
	public black_when_zero(): Black_when_zeroContext | undefined {
		return this.tryGetRuleContext(0, Black_when_zeroContext);
	}
	public justified(): JustifiedContext | undefined {
		return this.tryGetRuleContext(0, JustifiedContext);
	}
	public scr_picture(): Scr_pictureContext | undefined {
		return this.tryGetRuleContext(0, Scr_pictureContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_clause) {
			listener.enterScreen_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_clause) {
			listener.exitScreen_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_clause) {
			return visitor.visitScreen_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_lightContext extends ParserRuleContext {
	public scr_highlight(): Scr_highlightContext | undefined {
		return this.tryGetRuleContext(0, Scr_highlightContext);
	}
	public scr_lowlight(): Scr_lowlightContext | undefined {
		return this.tryGetRuleContext(0, Scr_lowlightContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_light; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_light) {
			listener.enterScr_light(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_light) {
			listener.exitScr_light(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_light) {
			return visitor.visitScr_light(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pictureContext extends ParserRuleContext {
	public picture(): PictureContext {
		return this.getRuleContext(0, PictureContext);
	}
	public scr_pic_using(): Scr_pic_usingContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_usingContext);
	}
	public scr_pic_from(): Scr_pic_fromContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_fromContext);
	}
	public scr_pic_to(): Scr_pic_toContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_picture) {
			listener.enterScr_picture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_picture) {
			listener.exitScr_picture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_picture) {
			return visitor.visitScr_picture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_valueContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public nonnumeric_literal(): Nonnumeric_literalContext {
		return this.getRuleContext(0, Nonnumeric_literalContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_value) {
			listener.enterScr_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_value) {
			listener.exitScr_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_value) {
			return visitor.visitScr_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public src_number(): Src_numberContext {
		return this.getRuleContext(0, Src_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_column) {
			listener.enterScr_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_column) {
			listener.exitScr_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_column) {
			return visitor.visitScr_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public src_number(): Src_numberContext {
		return this.getRuleContext(0, Src_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_line) {
			listener.enterScr_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_line) {
			listener.exitScr_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_line) {
			return visitor.visitScr_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_underlineContext extends ParserRuleContext {
	public UNDERLINE(): TerminalNode { return this.getToken(cobolParser.UNDERLINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_underline; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_underline) {
			listener.enterScr_underline(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_underline) {
			listener.exitScr_underline(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_underline) {
			return visitor.visitScr_underline(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_reverseContext extends ParserRuleContext {
	public REVERSE_VIDEO(): TerminalNode { return this.getToken(cobolParser.REVERSE_VIDEO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_reverse; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_reverse) {
			listener.enterScr_reverse(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_reverse) {
			listener.exitScr_reverse(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_reverse) {
			return visitor.visitScr_reverse(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_lowlightContext extends ParserRuleContext {
	public LOWLIGHT(): TerminalNode { return this.getToken(cobolParser.LOWLIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_lowlight; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_lowlight) {
			listener.enterScr_lowlight(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_lowlight) {
			listener.exitScr_lowlight(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_lowlight) {
			return visitor.visitScr_lowlight(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_highlightContext extends ParserRuleContext {
	public HIGHLIGHT(): TerminalNode { return this.getToken(cobolParser.HIGHLIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_highlight; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_highlight) {
			listener.enterScr_highlight(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_highlight) {
			listener.exitScr_highlight(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_highlight) {
			return visitor.visitScr_highlight(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_eraseContext extends ParserRuleContext {
	public ERASE(): TerminalNode { return this.getToken(cobolParser.ERASE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_erase; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_erase) {
			listener.enterScr_erase(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_erase) {
			listener.exitScr_erase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_erase) {
			return visitor.visitScr_erase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_blinkContext extends ParserRuleContext {
	public BLINK(): TerminalNode { return this.getToken(cobolParser.BLINK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_blink; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_blink) {
			listener.enterScr_blink(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_blink) {
			listener.exitScr_blink(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_blink) {
			return visitor.visitScr_blink(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_bellContext extends ParserRuleContext {
	public BELL(): TerminalNode { return this.getToken(cobolParser.BELL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_bell; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_bell) {
			listener.enterScr_bell(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_bell) {
			listener.exitScr_bell(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_bell) {
			return visitor.visitScr_bell(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_fullContext extends ParserRuleContext {
	public FULL(): TerminalNode { return this.getToken(cobolParser.FULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_full; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_full) {
			listener.enterScr_full(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_full) {
			listener.exitScr_full(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_full) {
			return visitor.visitScr_full(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_requiredContext extends ParserRuleContext {
	public REQUIRED(): TerminalNode { return this.getToken(cobolParser.REQUIRED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_required; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_required) {
			listener.enterScr_required(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_required) {
			listener.exitScr_required(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_required) {
			return visitor.visitScr_required(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_secureContext extends ParserRuleContext {
	public SECURE(): TerminalNode { return this.getToken(cobolParser.SECURE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_secure; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_secure) {
			listener.enterScr_secure(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_secure) {
			listener.exitScr_secure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_secure) {
			return visitor.visitScr_secure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_autoContext extends ParserRuleContext {
	public AUTO(): TerminalNode { return this.getToken(cobolParser.AUTO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_auto; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_auto) {
			listener.enterScr_auto(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_auto) {
			listener.exitScr_auto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_auto) {
			return visitor.visitScr_auto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_backgroundContext extends ParserRuleContext {
	public BACKGROUND_COLOR(): TerminalNode { return this.getToken(cobolParser.BACKGROUND_COLOR, 0); }
	public color_num(): Color_numContext {
		return this.getRuleContext(0, Color_numContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_background; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_background) {
			listener.enterScr_background(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_background) {
			listener.exitScr_background(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_background) {
			return visitor.visitScr_background(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_foregroundContext extends ParserRuleContext {
	public FOREGROUND_COLOR(): TerminalNode { return this.getToken(cobolParser.FOREGROUND_COLOR, 0); }
	public color_num(): Color_numContext {
		return this.getRuleContext(0, Color_numContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_foreground; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_foreground) {
			listener.enterScr_foreground(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_foreground) {
			listener.exitScr_foreground(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_foreground) {
			return visitor.visitScr_foreground(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_blankContext extends ParserRuleContext {
	public BLANK(): TerminalNode { return this.getToken(cobolParser.BLANK, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_blank; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_blank) {
			listener.enterScr_blank(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_blank) {
			listener.exitScr_blank(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_blank) {
			return visitor.visitScr_blank(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_using) {
			listener.enterScr_pic_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_using) {
			listener.exitScr_pic_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_using) {
			return visitor.visitScr_pic_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_fromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_from; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_from) {
			listener.enterScr_pic_from(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_from) {
			listener.exitScr_pic_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_from) {
			return visitor.visitScr_pic_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_toContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_to) {
			listener.enterScr_pic_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_to) {
			listener.exitScr_pic_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_to) {
			return visitor.visitScr_pic_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nonnumeric_literalContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_nonnumeric_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNonnumeric_literal) {
			listener.enterNonnumeric_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNonnumeric_literal) {
			listener.exitNonnumeric_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNonnumeric_literal) {
			return visitor.visitNonnumeric_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_numberContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_number) {
			listener.enterSrc_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_number) {
			listener.exitSrc_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_number) {
			return visitor.visitSrc_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Color_numContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_color_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColor_num) {
			listener.enterColor_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColor_num) {
			listener.exitColor_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColor_num) {
			return visitor.visitColor_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_idContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(cobolParser.PROGRAM_ID, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public common_initial(): Common_initialContext | undefined {
		return this.tryGetRuleContext(0, Common_initialContext);
	}
	public with_ident(): With_identContext | undefined {
		return this.tryGetRuleContext(0, With_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_id) {
			listener.enterProgram_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_id) {
			listener.exitProgram_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_id) {
			return visitor.visitProgram_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_name) {
			listener.enterProgram_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_name) {
			listener.exitProgram_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_name) {
			return visitor.visitProgram_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Common_initialContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_common_initial; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCommon_initial) {
			listener.enterCommon_initial(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCommon_initial) {
			listener.exitCommon_initial(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCommon_initial) {
			return visitor.visitCommon_initial(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_identContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(cobolParser.IDENT, 0); }
	public ident_string(): Ident_stringContext {
		return this.getRuleContext(0, Ident_stringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_ident; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_ident) {
			listener.enterWith_ident(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_ident) {
			listener.exitWith_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_ident) {
			return visitor.visitWith_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ident_stringContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ident_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdent_string) {
			listener.enterIdent_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdent_string) {
			listener.exitIdent_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdent_string) {
			return visitor.visitIdent_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(cobolParser.INSTALLATION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public word_in_area_B(): Word_in_area_BContext[];
	public word_in_area_B(i: number): Word_in_area_BContext;
	public word_in_area_B(i?: number): Word_in_area_BContext | Word_in_area_BContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Word_in_area_BContext);
		} else {
			return this.getRuleContext(i, Word_in_area_BContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_installation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInstallation) {
			listener.enterInstallation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInstallation) {
			listener.exitInstallation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInstallation) {
			return visitor.visitInstallation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_writtenContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(cobolParser.DATE_WRITTEN, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public word_in_area_B(): Word_in_area_BContext[];
	public word_in_area_B(i: number): Word_in_area_BContext;
	public word_in_area_B(i?: number): Word_in_area_BContext | Word_in_area_BContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Word_in_area_BContext);
		} else {
			return this.getRuleContext(i, Word_in_area_BContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_written; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_written) {
			listener.enterDate_written(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_written) {
			listener.exitDate_written(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_written) {
			return visitor.visitDate_written(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_compiledContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(cobolParser.DATE_COMPILED, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public word_in_area_B(): Word_in_area_BContext[];
	public word_in_area_B(i: number): Word_in_area_BContext;
	public word_in_area_B(i?: number): Word_in_area_BContext | Word_in_area_BContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Word_in_area_BContext);
		} else {
			return this.getRuleContext(i, Word_in_area_BContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_compiled; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_compiled) {
			listener.enterDate_compiled(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_compiled) {
			listener.exitDate_compiled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_compiled) {
			return visitor.visitDate_compiled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(cobolParser.SECURITY, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public word_in_area_B(): Word_in_area_BContext[];
	public word_in_area_B(i: number): Word_in_area_BContext;
	public word_in_area_B(i?: number): Word_in_area_BContext | Word_in_area_BContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Word_in_area_BContext);
		} else {
			return this.getRuleContext(i, Word_in_area_BContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_security; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSecurity) {
			listener.enterSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSecurity) {
			listener.exitSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSecurity) {
			return visitor.visitSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(cobolParser.OPTIONS, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public arithmetic(): ArithmeticContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_options_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticContext extends ParserRuleContext {
	public ARITHMETIC(): TerminalNode { return this.getToken(cobolParser.ARITHMETIC, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic) {
			listener.enterArithmetic(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic) {
			listener.exitArithmetic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic) {
			return visitor.visitArithmetic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Configuration_sectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(cobolParser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public source_computer(): Source_computerContext | undefined {
		return this.tryGetRuleContext(0, Source_computerContext);
	}
	public object_computer(): Object_computerContext | undefined {
		return this.tryGetRuleContext(0, Object_computerContext);
	}
	public special_names(): Special_namesContext | undefined {
		return this.tryGetRuleContext(0, Special_namesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_configuration_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConfiguration_section) {
			listener.enterConfiguration_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConfiguration_section) {
			listener.exitConfiguration_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConfiguration_section) {
			return visitor.visitConfiguration_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_output_sectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(cobolParser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public file_control(): File_controlContext | undefined {
		return this.tryGetRuleContext(0, File_controlContext);
	}
	public i_o_control(): I_o_controlContext | undefined {
		return this.tryGetRuleContext(0, I_o_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_output_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_output_section) {
			listener.enterInput_output_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_output_section) {
			listener.exitInput_output_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_output_section) {
			return visitor.visitInput_output_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_computerContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(cobolParser.SOURCE_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public with_debugging(): With_debuggingContext | undefined {
		return this.tryGetRuleContext(0, With_debuggingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_computer) {
			listener.enterSource_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_computer) {
			listener.exitSource_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_computer) {
			return visitor.visitSource_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Computer_typeContext extends ParserRuleContext {
	public ALPHA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHA, 0); }
	public I64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I64, 0); }
	public VAX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VAX, 0); }
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_computer_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComputer_type) {
			listener.enterComputer_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComputer_type) {
			listener.exitComputer_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComputer_type) {
			return visitor.visitComputer_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_debuggingContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(cobolParser.DEBUGGING, 0); }
	public MODE(): TerminalNode { return this.getToken(cobolParser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_debugging; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_debugging) {
			listener.enterWith_debugging(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_debugging) {
			listener.exitWith_debugging(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_debugging) {
			return visitor.visitWith_debugging(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_computerContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(cobolParser.OBJECT_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public memory_size(): Memory_sizeContext | undefined {
		return this.tryGetRuleContext(0, Memory_sizeContext);
	}
	public program_collating(): Program_collatingContext | undefined {
		return this.tryGetRuleContext(0, Program_collatingContext);
	}
	public segment_limit(): Segment_limitContext | undefined {
		return this.tryGetRuleContext(0, Segment_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_object_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterObject_computer) {
			listener.enterObject_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitObject_computer) {
			listener.exitObject_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitObject_computer) {
			return visitor.visitObject_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_sizeContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(cobolParser.MEMORY, 0); }
	public memory_size_amount(): Memory_size_amountContext {
		return this.getRuleContext(0, Memory_size_amountContext);
	}
	public memory_size_unit(): Memory_size_unitContext {
		return this.getRuleContext(0, Memory_size_unitContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size) {
			listener.enterMemory_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size) {
			listener.exitMemory_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size) {
			return visitor.visitMemory_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_amountContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_amount; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_amount) {
			listener.enterMemory_size_amount(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_amount) {
			listener.exitMemory_size_amount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_amount) {
			return visitor.visitMemory_size_amount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_unitContext extends ParserRuleContext {
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_unit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_unit) {
			listener.enterMemory_size_unit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_unit) {
			listener.exitMemory_size_unit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_unit) {
			return visitor.visitMemory_size_unit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_collatingContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_collating; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_collating) {
			listener.enterProgram_collating(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_collating) {
			listener.exitProgram_collating(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_collating) {
			return visitor.visitProgram_collating(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_name) {
			listener.enterAlpha_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_name) {
			listener.exitAlpha_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_name) {
			return visitor.visitAlpha_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_limitContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(cobolParser.SEGMENT_LIMIT, 0); }
	public segment_number(): Segment_numberContext {
		return this.getRuleContext(0, Segment_numberContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_limit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_limit) {
			listener.enterSegment_limit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_limit) {
			listener.exitSegment_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_limit) {
			return visitor.visitSegment_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_numberContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_number) {
			listener.enterSegment_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_number) {
			listener.exitSegment_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_number) {
			return visitor.visitSegment_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_namesContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(cobolParser.SPECIAL_NAMES, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public special_names_content(): Special_names_contentContext | undefined {
		return this.tryGetRuleContext(0, Special_names_contentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names) {
			listener.enterSpecial_names(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names) {
			listener.exitSpecial_names(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names) {
			return visitor.visitSpecial_names(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_names_contentContext extends ParserRuleContext {
	public predefined_name_relation(): Predefined_name_relationContext[];
	public predefined_name_relation(i: number): Predefined_name_relationContext;
	public predefined_name_relation(i?: number): Predefined_name_relationContext | Predefined_name_relationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Predefined_name_relationContext);
		} else {
			return this.getRuleContext(i, Predefined_name_relationContext);
		}
	}
	public switch_definition(): Switch_definitionContext[];
	public switch_definition(i: number): Switch_definitionContext;
	public switch_definition(i?: number): Switch_definitionContext | Switch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Switch_definitionContext);
		} else {
			return this.getRuleContext(i, Switch_definitionContext);
		}
	}
	public alphabet(): AlphabetContext[];
	public alphabet(i: number): AlphabetContext;
	public alphabet(i?: number): AlphabetContext | AlphabetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlphabetContext);
		} else {
			return this.getRuleContext(i, AlphabetContext);
		}
	}
	public symbolic_chars(): Symbolic_charsContext[];
	public symbolic_chars(i: number): Symbolic_charsContext;
	public symbolic_chars(i?: number): Symbolic_charsContext | Symbolic_charsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbolic_charsContext);
		} else {
			return this.getRuleContext(i, Symbolic_charsContext);
		}
	}
	public class_(): Class_Context[];
	public class_(i: number): Class_Context;
	public class_(i?: number): Class_Context | Class_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Class_Context);
		} else {
			return this.getRuleContext(i, Class_Context);
		}
	}
	public currency(): CurrencyContext[];
	public currency(i: number): CurrencyContext;
	public currency(i?: number): CurrencyContext | CurrencyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CurrencyContext);
		} else {
			return this.getRuleContext(i, CurrencyContext);
		}
	}
	public DECIMAL_POINT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA, 0); }
	public cursor_is(): Cursor_isContext | undefined {
		return this.tryGetRuleContext(0, Cursor_isContext);
	}
	public crt_is(): Crt_isContext | undefined {
		return this.tryGetRuleContext(0, Crt_isContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names_content; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names_content) {
			listener.enterSpecial_names_content(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names_content) {
			listener.exitSpecial_names_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names_content) {
			return visitor.visitSpecial_names_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_isContext extends ParserRuleContext {
	public CURSOR(): TerminalNode { return this.getToken(cobolParser.CURSOR, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cursor_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCursor_is) {
			listener.enterCursor_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCursor_is) {
			listener.exitCursor_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCursor_is) {
			return visitor.visitCursor_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Crt_isContext extends ParserRuleContext {
	public CRT(): TerminalNode { return this.getToken(cobolParser.CRT, 0); }
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_crt_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCrt_is) {
			listener.enterCrt_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCrt_is) {
			listener.exitCrt_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCrt_is) {
			return visitor.visitCrt_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_name_relationContext extends ParserRuleContext {
	public predefined_name(): Predefined_nameContext {
		return this.getRuleContext(0, Predefined_nameContext);
	}
	public user_name(): User_nameContext {
		return this.getRuleContext(0, User_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_name_relation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_name_relation) {
			listener.enterPredefined_name_relation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_name_relation) {
			listener.exitPredefined_name_relation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_name_relation) {
			return visitor.visitPredefined_name_relation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_nameContext extends ParserRuleContext {
	public CARD_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CARD_READER, 0); }
	public PAPER_TAPE_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_READER, 0); }
	public CONSOLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONSOLE, 0); }
	public LINE_PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE_PRINTER, 0); }
	public PAPER_TAPE_PUNCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
	public SYSIN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSIN, 0); }
	public SYSOUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSOUT, 0); }
	public SYSERR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSERR, 0); }
	public C01(): TerminalNode | undefined { return this.tryGetToken(cobolParser.C01, 0); }
	public ARGUMENT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_NUMBER, 0); }
	public ARGUMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_VALUE, 0); }
	public ENVIRONMENT_NAME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_NAME, 0); }
	public ENVIRONMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_name) {
			listener.enterPredefined_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_name) {
			listener.exitPredefined_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_name) {
			return visitor.visitPredefined_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_definitionContext extends ParserRuleContext {
	public SWITCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SWITCH, 0); }
	public switch_num(): Switch_numContext | undefined {
		return this.tryGetRuleContext(0, Switch_numContext);
	}
	public SWITCH_N_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SWITCH_N_, 0); }
	public switch_name(): Switch_nameContext | undefined {
		return this.tryGetRuleContext(0, Switch_nameContext);
	}
	public switch_clause_on(): Switch_clause_onContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_onContext);
	}
	public switch_clause_off(): Switch_clause_offContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_offContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_definition) {
			listener.enterSwitch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_definition) {
			listener.exitSwitch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_definition) {
			return visitor.visitSwitch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_onContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_on) {
			listener.enterSwitch_clause_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_on) {
			listener.exitSwitch_clause_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_on) {
			return visitor.visitSwitch_clause_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_offContext extends ParserRuleContext {
	public OFF(): TerminalNode { return this.getToken(cobolParser.OFF, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_off; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_off) {
			listener.enterSwitch_clause_off(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_off) {
			listener.exitSwitch_clause_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_off) {
			return visitor.visitSwitch_clause_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cond_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cond_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCond_name) {
			listener.enterCond_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCond_name) {
			listener.exitCond_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCond_name) {
			return visitor.visitCond_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_name) {
			listener.enterSwitch_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_name) {
			listener.exitSwitch_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_name) {
			return visitor.visitSwitch_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_numContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_num) {
			listener.enterSwitch_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_num) {
			listener.exitSwitch_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_num) {
			return visitor.visitSwitch_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode[];
	public USER_DEFINED_WORD_(i: number): TerminalNode;
	public USER_DEFINED_WORD_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.USER_DEFINED_WORD_);
		} else {
			return this.getToken(cobolParser.USER_DEFINED_WORD_, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OF);
		} else {
			return this.getToken(cobolParser.OF, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_qualified_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterQualified_data_item) {
			listener.enterQualified_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitQualified_data_item) {
			listener.exitQualified_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitQualified_data_item) {
			return visitor.visitQualified_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencyContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(cobolParser.CURRENCY, 0); }
	public currency_definition(): Currency_definitionContext {
		return this.getRuleContext(0, Currency_definitionContext);
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency) {
			listener.enterCurrency(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency) {
			listener.exitCurrency(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency) {
			return visitor.visitCurrency(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_definitionContext extends ParserRuleContext {
	public currency_char(): Currency_charContext {
		return this.getRuleContext(0, Currency_charContext);
	}
	public currency_string(): Currency_stringContext | undefined {
		return this.tryGetRuleContext(0, Currency_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL, 0); }
	public SYMBOL_IN_PICTURE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL_IN_PICTURE_, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_definition) {
			listener.enterCurrency_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_definition) {
			listener.exitCurrency_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_definition) {
			return visitor.visitCurrency_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_stringContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_string) {
			listener.enterCurrency_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_string) {
			listener.exitCurrency_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_string) {
			return visitor.visitCurrency_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_charContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_char) {
			listener.enterCurrency_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_char) {
			listener.exitCurrency_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_char) {
			return visitor.visitCurrency_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_Context extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(cobolParser.CLASS, 0); }
	public class_name(): Class_nameContext {
		return this.getRuleContext(0, Class_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public user_class(): User_classContext[];
	public user_class(i: number): User_classContext;
	public user_class(i?: number): User_classContext | User_classContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_classContext);
		} else {
			return this.getRuleContext(i, User_classContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_) {
			listener.enterClass_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_) {
			listener.exitClass_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_) {
			return visitor.visitClass_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_name) {
			listener.enterClass_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_name) {
			listener.exitClass_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_name) {
			return visitor.visitClass_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_classContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_class; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_class) {
			listener.enterUser_class(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_class) {
			listener.exitUser_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_class) {
			return visitor.visitUser_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbolic_charsContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(cobolParser.SYMBOLIC, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public symb_ch_definition(): Symb_ch_definitionContext[];
	public symb_ch_definition(i: number): Symb_ch_definitionContext;
	public symb_ch_definition(i?: number): Symb_ch_definitionContext | Symb_ch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_definitionContext);
		} else {
			return this.getRuleContext(i, Symb_ch_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbolic_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbolic_chars) {
			listener.enterSymbolic_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbolic_chars) {
			listener.exitSymbolic_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbolic_chars) {
			return visitor.visitSymbolic_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_definitionContext extends ParserRuleContext {
	public symb_ch_def_clause(): Symb_ch_def_clauseContext[];
	public symb_ch_def_clause(i: number): Symb_ch_def_clauseContext;
	public symb_ch_def_clause(i?: number): Symb_ch_def_clauseContext | Symb_ch_def_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_def_clauseContext);
		} else {
			return this.getRuleContext(i, Symb_ch_def_clauseContext);
		}
	}
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext | undefined {
		return this.tryGetRuleContext(0, Symb_ch_def_in_alphabetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_definition) {
			listener.enterSymb_ch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_definition) {
			listener.exitSymb_ch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_definition) {
			return visitor.visitSymb_ch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_clauseContext extends ParserRuleContext {
	public symbol_char(): Symbol_charContext[];
	public symbol_char(i: number): Symbol_charContext;
	public symbol_char(i?: number): Symbol_charContext | Symbol_charContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbol_charContext);
		} else {
			return this.getRuleContext(i, Symbol_charContext);
		}
	}
	public char_val(): Char_valContext[];
	public char_val(i: number): Char_valContext;
	public char_val(i?: number): Char_valContext | Char_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_valContext);
		} else {
			return this.getRuleContext(i, Char_valContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_clause) {
			listener.enterSymb_ch_def_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_clause) {
			listener.exitSymb_ch_def_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_clause) {
			return visitor.visitSymb_ch_def_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(cobolParser.IN, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_in_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_in_alphabet) {
			listener.enterSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_in_alphabet) {
			listener.exitSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_in_alphabet) {
			return visitor.visitSymb_ch_def_in_alphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbol_charContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbol_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbol_char) {
			listener.enterSymbol_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbol_char) {
			listener.exitSymbol_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbol_char) {
			return visitor.visitSymbol_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_valContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_val) {
			listener.enterChar_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_val) {
			listener.exitChar_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_val) {
			return visitor.visitChar_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetContext extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(cobolParser.ALPHABET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public alpha_value(): Alpha_valueContext {
		return this.getRuleContext(0, Alpha_valueContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlphabet) {
			listener.enterAlphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlphabet) {
			listener.exitAlphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlphabet) {
			return visitor.visitAlphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_valueContext extends ParserRuleContext {
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EBCDIC, 0); }
	public user_alpha(): User_alphaContext[];
	public user_alpha(i: number): User_alphaContext;
	public user_alpha(i?: number): User_alphaContext | User_alphaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_alphaContext);
		} else {
			return this.getRuleContext(i, User_alphaContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_value) {
			listener.enterAlpha_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_value) {
			listener.exitAlpha_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_value) {
			return visitor.visitAlpha_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_alphaContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public same_literal(): Same_literalContext[];
	public same_literal(i: number): Same_literalContext;
	public same_literal(i?: number): Same_literalContext | Same_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_literalContext);
		} else {
			return this.getRuleContext(i, Same_literalContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_alpha; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_alpha) {
			listener.enterUser_alpha(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_alpha) {
			listener.exitUser_alpha(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_alpha) {
			return visitor.visitUser_alpha(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_literalContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_literal) {
			listener.enterFirst_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_literal) {
			listener.exitFirst_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_literal) {
			return visitor.visitFirst_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_literalContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_literal) {
			listener.enterLast_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_literal) {
			listener.exitLast_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_literal) {
			return visitor.visitLast_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_literalContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_literal) {
			listener.enterSame_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_literal) {
			listener.exitSame_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_literal) {
			return visitor.visitSame_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_of_page_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_of_page_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_of_page_name) {
			listener.enterTop_of_page_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_of_page_name) {
			listener.exitTop_of_page_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_of_page_name) {
			return visitor.visitTop_of_page_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_name) {
			listener.enterUser_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_name) {
			listener.exitUser_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_name) {
			return visitor.visitUser_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_controlContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(cobolParser.FILE_CONTROL, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public select(): SelectContext[];
	public select(i: number): SelectContext;
	public select(i?: number): SelectContext | SelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectContext);
		} else {
			return this.getRuleContext(i, SelectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_control) {
			listener.enterFile_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_control) {
			listener.exitFile_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_control) {
			return visitor.visitFile_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(cobolParser.SELECT, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OPTIONAL, 0); }
	public select_clause(): Select_clauseContext[];
	public select_clause(i: number): Select_clauseContext;
	public select_clause(i?: number): Select_clauseContext | Select_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Select_clauseContext);
		} else {
			return this.getRuleContext(i, Select_clauseContext);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect) {
			return visitor.visitSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_clauseContext extends ParserRuleContext {
	public assign_to(): Assign_toContext | undefined {
		return this.tryGetRuleContext(0, Assign_toContext);
	}
	public reserve(): ReserveContext | undefined {
		return this.tryGetRuleContext(0, ReserveContext);
	}
	public organization(): OrganizationContext | undefined {
		return this.tryGetRuleContext(0, OrganizationContext);
	}
	public padding(): PaddingContext | undefined {
		return this.tryGetRuleContext(0, PaddingContext);
	}
	public record_delimiter(): Record_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Record_delimiterContext);
	}
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public alt_record_key(): Alt_record_keyContext | undefined {
		return this.tryGetRuleContext(0, Alt_record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect_clause) {
			listener.enterSelect_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect_clause) {
			listener.exitSelect_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect_clause) {
			return visitor.visitSelect_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public file_stat(): File_statContext {
		return this.getRuleContext(0, File_statContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_status; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_status) {
			listener.enterFile_status(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_status) {
			listener.exitFile_status(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_status) {
			return visitor.visitFile_status(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_stat; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_stat) {
			listener.enterFile_stat(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_stat) {
			listener.exitFile_stat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_stat) {
			return visitor.visitFile_stat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_keyContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_definition(): Record_key_definitionContext {
		return this.getRuleContext(0, Record_key_definitionContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key) {
			listener.enterRecord_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key) {
			listener.exitRecord_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key) {
			return visitor.visitRecord_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alt_record_keyContext extends ParserRuleContext {
	public ALTERNATE(): TerminalNode { return this.getToken(cobolParser.ALTERNATE, 0); }
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_definition(): Record_key_definitionContext {
		return this.getRuleContext(0, Record_key_definitionContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alt_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlt_record_key) {
			listener.enterAlt_record_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlt_record_key) {
			listener.exitAlt_record_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlt_record_key) {
			return visitor.visitAlt_record_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_key_definitionContext extends ParserRuleContext {
	public rec_key(): Rec_keyContext[];
	public rec_key(i: number): Rec_keyContext;
	public rec_key(i?: number): Rec_keyContext | Rec_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_keyContext);
		} else {
			return this.getRuleContext(i, Rec_keyContext);
		}
	}
	public seg_key(): Seg_keyContext | undefined {
		return this.tryGetRuleContext(0, Seg_keyContext);
	}
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key_definition) {
			listener.enterRecord_key_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key_definition) {
			listener.exitRecord_key_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key_definition) {
			return visitor.visitRecord_key_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Seg_keyContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_seg_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSeg_key) {
			listener.enterSeg_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSeg_key) {
			listener.exitSeg_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSeg_key) {
			return visitor.visitSeg_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_keyContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_key) {
			listener.enterRec_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_key) {
			listener.exitRec_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_key) {
			return visitor.visitRec_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_modeContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ACCESS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IS);
		} else {
			return this.getToken(cobolParser.IS, i);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_access_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccess_mode) {
			listener.enterAccess_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccess_mode) {
			listener.exitAccess_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccess_mode) {
			return visitor.visitAccess_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(cobolParser.RESERVE, 0); }
	public reserve_num(): Reserve_numContext {
		return this.getRuleContext(0, Reserve_numContext);
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve) {
			listener.enterReserve(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve) {
			listener.exitReserve(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve) {
			return visitor.visitReserve(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserve_numContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve_num) {
			listener.enterReserve_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve_num) {
			listener.exitReserve_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve_num) {
			return visitor.visitReserve_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_delimiterContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(cobolParser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode { return this.getToken(cobolParser.STANDARD_1, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_delimiter; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_delimiter) {
			listener.enterRecord_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_delimiter) {
			listener.exitRecord_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_delimiter) {
			return visitor.visitRecord_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(cobolParser.PADDING, 0); }
	public pad_char(): Pad_charContext {
		return this.getRuleContext(0, Pad_charContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_padding; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPadding) {
			listener.enterPadding(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPadding) {
			listener.exitPadding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPadding) {
			return visitor.visitPadding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pad_charContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pad_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPad_char) {
			listener.enterPad_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPad_char) {
			listener.exitPad_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPad_char) {
			return visitor.visitPad_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORGANIZATION, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_organization; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOrganization) {
			listener.enterOrganization(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOrganization) {
			listener.exitOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOrganization) {
			return visitor.visitOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(cobolParser.LOCK, 0); }
	public lock_mode_definition(): Lock_mode_definitionContext {
		return this.getRuleContext(0, Lock_mode_definitionContext);
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode) {
			return visitor.visitLock_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_mode_definitionContext extends ParserRuleContext {
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MANUAL, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOMATIC, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROLLBACK, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode_definition) {
			listener.enterLock_mode_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode_definition) {
			listener.exitLock_mode_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode_definition) {
			return visitor.visitLock_mode_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Code_setContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(cobolParser.CODE_SET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_code_set; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCode_set) {
			listener.enterCode_set(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCode_set) {
			listener.exitCode_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCode_set) {
			return visitor.visitCode_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_containsContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(cobolParser.BLOCK, 0); }
	public blocksize(): BlocksizeContext {
		return this.getRuleContext(0, BlocksizeContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public smallest_block(): Smallest_blockContext | undefined {
		return this.tryGetRuleContext(0, Smallest_blockContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_block_contains; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlock_contains) {
			listener.enterBlock_contains(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlock_contains) {
			listener.exitBlock_contains(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlock_contains) {
			return visitor.visitBlock_contains(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smallest_blockContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smallest_block; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmallest_block) {
			listener.enterSmallest_block(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmallest_block) {
			listener.exitSmallest_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmallest_block) {
			return visitor.visitSmallest_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlocksizeContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_blocksize; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlocksize) {
			listener.enterBlocksize(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlocksize) {
			listener.exitBlocksize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlocksize) {
			return visitor.visitBlocksize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_toContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(cobolParser.ASSIGN, 0); }
	public assign_to_definition(): Assign_to_definitionContext {
		return this.getRuleContext(0, Assign_to_definitionContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to) {
			listener.enterAssign_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to) {
			listener.exitAssign_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to) {
			return visitor.visitAssign_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_to_definitionContext extends ParserRuleContext {
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to_definition) {
			listener.enterAssign_to_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to_definition) {
			listener.exitAssign_to_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to_definition) {
			return visitor.visitAssign_to_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public DISK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISK, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_controlContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(cobolParser.I_O_CONTROL, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public replace_statement(): Replace_statementContext[];
	public replace_statement(i: number): Replace_statementContext;
	public replace_statement(i?: number): Replace_statementContext | Replace_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Replace_statementContext);
		} else {
			return this.getRuleContext(i, Replace_statementContext);
		}
	}
	public i_o_control_clause(): I_o_control_clauseContext[];
	public i_o_control_clause(i: number): I_o_control_clauseContext;
	public i_o_control_clause(i?: number): I_o_control_clauseContext | I_o_control_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(I_o_control_clauseContext);
		} else {
			return this.getRuleContext(i, I_o_control_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control) {
			listener.enterI_o_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control) {
			listener.exitI_o_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control) {
			return visitor.visitI_o_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_control_clauseContext extends ParserRuleContext {
	public apply(): ApplyContext | undefined {
		return this.tryGetRuleContext(0, ApplyContext);
	}
	public same(): SameContext | undefined {
		return this.tryGetRuleContext(0, SameContext);
	}
	public rerun(): RerunContext | undefined {
		return this.tryGetRuleContext(0, RerunContext);
	}
	public multiple_file(): Multiple_fileContext | undefined {
		return this.tryGetRuleContext(0, Multiple_fileContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control_clause) {
			listener.enterI_o_control_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control_clause) {
			listener.exitI_o_control_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control_clause) {
			return visitor.visitI_o_control_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_fileContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public multiple_file_definition(): Multiple_file_definitionContext[];
	public multiple_file_definition(i: number): Multiple_file_definitionContext;
	public multiple_file_definition(i?: number): Multiple_file_definitionContext | Multiple_file_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_file_definitionContext);
		} else {
			return this.getRuleContext(i, Multiple_file_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file) {
			listener.enterMultiple_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file) {
			listener.exitMultiple_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file) {
			return visitor.visitMultiple_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_definitionContext extends ParserRuleContext {
	public multiple_file_name(): Multiple_file_nameContext {
		return this.getRuleContext(0, Multiple_file_nameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITION, 0); }
	public pos_integer(): Pos_integerContext | undefined {
		return this.tryGetRuleContext(0, Pos_integerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_definition) {
			listener.enterMultiple_file_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_definition) {
			listener.exitMultiple_file_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_definition) {
			return visitor.visitMultiple_file_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_name) {
			listener.enterMultiple_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_name) {
			listener.exitMultiple_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_name) {
			return visitor.visitMultiple_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos_integerContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pos_integer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPos_integer) {
			listener.enterPos_integer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPos_integer) {
			listener.exitPos_integer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPos_integer) {
			return visitor.visitPos_integer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(cobolParser.RERUN, 0); }
	public rerun_definition(): Rerun_definitionContext {
		return this.getRuleContext(0, Rerun_definitionContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EVERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun) {
			listener.enterRerun(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun) {
			listener.exitRerun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun) {
			return visitor.visitRerun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_definitionContext extends ParserRuleContext {
	public rerun_def_file(): Rerun_def_fileContext | undefined {
		return this.tryGetRuleContext(0, Rerun_def_fileContext);
	}
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public clock_count(): Clock_countContext | undefined {
		return this.tryGetRuleContext(0, Clock_countContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CLOCK_UNITS, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_definition) {
			listener.enterRerun_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_definition) {
			listener.exitRerun_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_definition) {
			return visitor.visitRerun_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Clock_countContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_clock_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClock_count) {
			listener.enterClock_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClock_count) {
			listener.exitClock_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClock_count) {
			return visitor.visitClock_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_name) {
			listener.enterCondition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_name) {
			listener.exitCondition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_name) {
			return visitor.visitCondition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_def_fileContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public rec_count(): Rec_countContext | undefined {
		return this.tryGetRuleContext(0, Rec_countContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def_file) {
			listener.enterRerun_def_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def_file) {
			listener.exitRerun_def_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def_file) {
			return visitor.visitRerun_def_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_countContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_count) {
			listener.enterRec_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_count) {
			listener.exitRec_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_count) {
			return visitor.visitRec_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(cobolParser.SAME, 0); }
	public same_area_file(): Same_area_fileContext[];
	public same_area_file(i: number): Same_area_fileContext;
	public same_area_file(i?: number): Same_area_fileContext | Same_area_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_area_fileContext);
		} else {
			return this.getRuleContext(i, Same_area_fileContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame) {
			listener.enterSame(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame) {
			listener.exitSame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame) {
			return visitor.visitSame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_area_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_area_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_area_file) {
			listener.enterSame_area_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_area_file) {
			listener.exitSame_area_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_area_file) {
			return visitor.visitSame_area_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyContext extends ParserRuleContext {
	public APPLY(): TerminalNode { return this.getToken(cobolParser.APPLY, 0); }
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public apply_definition(): Apply_definitionContext[];
	public apply_definition(i: number): Apply_definitionContext;
	public apply_definition(i?: number): Apply_definitionContext | Apply_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Apply_definitionContext);
		} else {
			return this.getRuleContext(i, Apply_definitionContext);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply) {
			listener.enterApply(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply) {
			listener.exitApply(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply) {
			return visitor.visitApply(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Apply_definitionContext extends ParserRuleContext {
	public DEFERRED_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFERRED_WRITE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTENSION, 0); }
	public extend_amt(): Extend_amtContext | undefined {
		return this.tryGetRuleContext(0, Extend_amtContext);
	}
	public FILL_SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILL_SIZE, 0); }
	public LOCK_HOLDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK_HOLDING, 0); }
	public MASS_INSERT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MASS_INSERT, 0); }
	public PREALLOCATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREALLOCATION, 0); }
	public preall_amt(): Preall_amtContext | undefined {
		return this.tryGetRuleContext(0, Preall_amtContext);
	}
	public CONTIGUOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS, 0); }
	public CONTIGUOUS_BEST_TRY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
	public PRINT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINT_CONTROL, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WINDOW, 0); }
	public window_ptrs(): Window_ptrsContext | undefined {
		return this.tryGetRuleContext(0, Window_ptrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply_definition) {
			listener.enterApply_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply_definition) {
			listener.exitApply_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply_definition) {
			return visitor.visitApply_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_ptrsContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_window_ptrs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWindow_ptrs) {
			listener.enterWindow_ptrs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWindow_ptrs) {
			listener.exitWindow_ptrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWindow_ptrs) {
			return visitor.visitWindow_ptrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Preall_amtContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_preall_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPreall_amt) {
			listener.enterPreall_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPreall_amt) {
			listener.exitPreall_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPreall_amt) {
			return visitor.visitPreall_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extend_amtContext extends ParserRuleContext {
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_extend_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExtend_amt) {
			listener.enterExtend_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExtend_amt) {
			listener.exitExtend_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExtend_amt) {
			return visitor.visitExtend_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_arithmetic_operatorContext);
	}
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_arithmetic_operatorContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_expression) {
			listener.enterArithmetic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_expression) {
			listener.exitArithmetic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_expression) {
			return visitor.visitArithmetic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public NUMERIC_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL_, 0); }
	public INTEGER_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTEGER_LITERAL_, 0); }
	public HEX_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEX_LITERAL_, 0); }
	public STRING_LITERAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL_, 0); }
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Binary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	public STAR_(): TerminalNode[];
	public STAR_(i: number): TerminalNode;
	public STAR_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.STAR_);
		} else {
			return this.getToken(cobolParser.STAR_, i);
		}
	}
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_binary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBinary_arithmetic_operator) {
			listener.enterBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBinary_arithmetic_operator) {
			listener.exitBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBinary_arithmetic_operator) {
			return visitor.visitBinary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnary_arithmetic_operator) {
			listener.enterUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnary_arithmetic_operator) {
			listener.exitUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnary_arithmetic_operator) {
			return visitor.visitUnary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_expression) {
			listener.enterLogic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_expression) {
			listener.exitLogic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_expression) {
			return visitor.visitLogic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public condition_operator(): Condition_operatorContext | undefined {
		return this.tryGetRuleContext(0, Condition_operatorContext);
	}
	public logic_operation(): Logic_operationContext[];
	public logic_operation(i: number): Logic_operationContext;
	public logic_operation(i?: number): Logic_operationContext | Logic_operationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_operationContext);
		} else {
			return this.getRuleContext(i, Logic_operationContext);
		}
	}
	public logic_condition_abbrev(): Logic_condition_abbrevContext[];
	public logic_condition_abbrev(i: number): Logic_condition_abbrevContext;
	public logic_condition_abbrev(i?: number): Logic_condition_abbrevContext | Logic_condition_abbrevContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_condition_abbrevContext);
		} else {
			return this.getRuleContext(i, Logic_condition_abbrevContext);
		}
	}
	public class_condition_name(): Class_condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Class_condition_nameContext);
	}
	public sign_condition_name(): Sign_condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Sign_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SUCCESS, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FAILURE, 0); }
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_condition) {
			listener.enterLogic_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_condition) {
			listener.exitLogic_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_condition) {
			return visitor.visitLogic_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_condition_abbrevContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public condition_operator(): Condition_operatorContext | undefined {
		return this.tryGetRuleContext(0, Condition_operatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_condition_abbrev; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_condition_abbrev) {
			listener.enterLogic_condition_abbrev(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_condition_abbrev) {
			listener.exitLogic_condition_abbrev(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_condition_abbrev) {
			return visitor.visitLogic_condition_abbrev(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_operationContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_operation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_operation) {
			listener.enterLogic_operation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_operation) {
			listener.exitLogic_operation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_operation) {
			return visitor.visitLogic_operation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_condition_nameContext extends ParserRuleContext {
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SUCCESS, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FAILURE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bool_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBool_condition_name) {
			listener.enterBool_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBool_condition_name) {
			listener.exitBool_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBool_condition_name) {
			return visitor.visitBool_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_condition_nameContext extends ParserRuleContext {
	public POSITIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITIVE, 0); }
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEGATIVE, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition_name) {
			listener.enterSign_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition_name) {
			listener.exitSign_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition_name) {
			return visitor.visitSign_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_condition_nameContext extends ParserRuleContext {
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC, 0); }
	public ALPHABETIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC, 0); }
	public ALPHABETIC_LOWER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_LOWER, 0); }
	public ALPHABETIC_UPPER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_UPPER, 0); }
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition_name) {
			listener.enterClass_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition_name) {
			listener.exitClass_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition_name) {
			return visitor.visitClass_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_operatorContext extends ParserRuleContext {
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GREATER, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public GE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GE_, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LESS, 0); }
	public LE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LE_, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public GT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GT_, 0); }
	public LT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LT_, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THAN, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_operator) {
			listener.enterCondition_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_operator) {
			listener.exitCondition_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_operator) {
			return visitor.visitCondition_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identifier_resultContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public subscripting(): SubscriptingContext | undefined {
		return this.tryGetRuleContext(0, SubscriptingContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier_result; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier_result) {
			listener.enterIdentifier_result(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier_result) {
			listener.exitIdentifier_result(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier_result) {
			return visitor.visitIdentifier_result(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FUNCTION, 0); }
	public function_name(): Function_nameContext | undefined {
		return this.tryGetRuleContext(0, Function_nameContext);
	}
	public arguments(): ArgumentsContext | undefined {
		return this.tryGetRuleContext(0, ArgumentsContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentsContext extends ParserRuleContext {
	public subscripting(): SubscriptingContext {
		return this.getRuleContext(0, SubscriptingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arguments; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArguments) {
			listener.enterArguments(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArguments) {
			listener.exitArguments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArguments) {
			return visitor.visitArguments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubscriptingContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALL);
		} else {
			return this.getToken(cobolParser.ALL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subscripting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubscripting) {
			listener.enterSubscripting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubscripting) {
			listener.exitSubscripting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubscripting) {
			return visitor.visitSubscripting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reference_modificationContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public leftmost_character_position(): Leftmost_character_positionContext {
		return this.getRuleContext(0, Leftmost_character_positionContext);
	}
	public COLON_(): TerminalNode { return this.getToken(cobolParser.COLON_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public length(): LengthContext | undefined {
		return this.tryGetRuleContext(0, LengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reference_modification; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReference_modification) {
			listener.enterReference_modification(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReference_modification) {
			listener.exitReference_modification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReference_modification) {
			return visitor.visitReference_modification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Leftmost_character_positionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_leftmost_character_position; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLeftmost_character_position) {
			listener.enterLeftmost_character_position(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLeftmost_character_position) {
			listener.exitLeftmost_character_position(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLeftmost_character_position) {
			return visitor.visitLeftmost_character_position(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_length; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLength) {
			listener.enterLength(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLength) {
			listener.exitLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLength) {
			return visitor.visitLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD_, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_function_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFunction_name) {
			listener.enterFunction_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFunction_name) {
			listener.exitFunction_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFunction_name) {
			return visitor.visitFunction_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


